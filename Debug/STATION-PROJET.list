
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800d288  0800d288  0001d288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7fc  0800d7fc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7fc  0800d7fc  0001d7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d804  0800d804  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d804  0800d804  0001d804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d808  0800d808  0001d808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d80c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  200001dc  0800d9e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  0800d9e8  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5fa  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac9  00000000  00000000  0003a806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0003e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  0003f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a642  00000000  00000000  00040c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d961  00000000  00000000  0006b2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f814a  00000000  00000000  00088c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180d55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac8  00000000  00000000  00180da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d26c 	.word	0x0800d26c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800d26c 	.word	0x0800d26c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <WR_TO_Sd>:
/**
 * @brief Ecriture dans le fichier
 * @param : file_name : nom du fichier
 * @param : Wtext : data à transmettre
 */
FRESULT WR_TO_Sd(const char* file_name,const char* fmt, ...) {
 8000eec:	b40e      	push	{r1, r2, r3}
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b09f      	sub	sp, #124	; 0x7c
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	char wtext[100];
    va_list arg;
    va_start(arg, fmt);
 8000ef6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000efa:	60fb      	str	r3, [r7, #12]
    vsprintf(wtext,fmt, arg);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000f06:	4618      	mov	r0, r3
 8000f08:	f009 ff4c 	bl	800ada4 <vsiprintf>

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */

	//Open file for writing (Create)
	if (f_open(&SDFile, file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 8000f0c:	2232      	movs	r2, #50	; 0x32
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4816      	ldr	r0, [pc, #88]	; (8000f6c <WR_TO_Sd+0x80>)
 8000f12:	f008 f965 	bl	80091e0 <f_open>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <WR_TO_Sd+0x34>
		Error_Handler();
 8000f1c:	f000 fb00 	bl	8001520 <Error_Handler>
	}
	//Write to the text file
	res = f_write(&SDFile, wtext, strlen(wtext), (void*) &byteswritten);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff f973 	bl	8000210 <strlen>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	f107 0110 	add.w	r1, r7, #16
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <WR_TO_Sd+0x80>)
 8000f36:	f008 fb11 	bl	800955c <f_write>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if ((byteswritten == 0) || (res != FR_OK)) {
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <WR_TO_Sd+0x62>
 8000f46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <WR_TO_Sd+0x68>
		Error_Handler();
 8000f4e:	f000 fae7 	bl	8001520 <Error_Handler>
 8000f52:	e002      	b.n	8000f5a <WR_TO_Sd+0x6e>
	} else {

		f_close(&SDFile); // Close file object
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <WR_TO_Sd+0x80>)
 8000f56:	f008 fcf4 	bl	8009942 <f_close>
	}
	//f_mount(&SDFatFS, (TCHAR const*) NULL, 0); //unmount file system object
	return res;
 8000f5a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	377c      	adds	r7, #124	; 0x7c
 8000f62:	46bd      	mov	sp, r7
 8000f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f68:	b003      	add	sp, #12
 8000f6a:	4770      	bx	lr
 8000f6c:	20000698 	.word	0x20000698

08000f70 <Fat_Init>:

/**
 * @brief : Initialiser un espace de travail dans la carte Sd
 */

void Fat_Init() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000f76:	af02      	add	r7, sp, #8

	uint8_t rtext[_MAX_SS];/* File read buffer */
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4910      	ldr	r1, [pc, #64]	; (8000fbc <Fat_Init+0x4c>)
 8000f7c:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <Fat_Init+0x50>)
 8000f7e:	f008 f8e9 	bl	8009154 <f_mount>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <Fat_Init+0x1e>
		Error_Handler();
 8000f88:	f000 faca 	bl	8001520 <Error_Handler>
		FRESULT res = f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext));
		if (res!= FR_OK){ //creates a FAT volume on the logical drive)
			Error_Handler(); // error handler
		}
	}
}
 8000f8c:	e011      	b.n	8000fb2 <Fat_Init+0x42>
		FRESULT res = f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f94:	9200      	str	r2, [sp, #0]
 8000f96:	2200      	movs	r2, #0
 8000f98:	2107      	movs	r1, #7
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <Fat_Init+0x4c>)
 8000f9c:	f008 fdb0 	bl	8009b00 <f_mkfs>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (res!= FR_OK){ //creates a FAT volume on the logical drive)
 8000fa6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <Fat_Init+0x42>
			Error_Handler(); // error handler
 8000fae:	f000 fab7 	bl	8001520 <Error_Handler>
}
 8000fb2:	bf00      	nop
 8000fb4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000464 	.word	0x20000464
 8000fc0:	20000468 	.word	0x20000468
 8000fc4:	00000000 	.word	0x00000000

08000fc8 <Sd_Space>:


SD_State Sd_Space() {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b093      	sub	sp, #76	; 0x4c
 8000fcc:	af00      	add	r7, sp, #0
	SD_State result;
	FATFS *fs;
	FRESULT res;
	DWORD fre_clust, fre_sect, tot_sect;
	/* Get volume information and free clusters of drive 1 */
	res = f_getfree((TCHAR const*) SDPath, &fre_clust, &fs);
 8000fce:	f107 0214 	add.w	r2, r7, #20
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4827      	ldr	r0, [pc, #156]	; (8001078 <Sd_Space+0xb0>)
 8000fda:	f008 fcdc 	bl	8009996 <f_getfree>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	/* Get total sectors and free sectors */
	tot_sect = (fs->n_fatent - 2) * fs->csize;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	3b02      	subs	r3, #2
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	8952      	ldrh	r2, [r2, #10]
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	643b      	str	r3, [r7, #64]	; 0x40
	fre_sect = fre_clust * fs->csize;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	895b      	ldrh	r3, [r3, #10]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	63fb      	str	r3, [r7, #60]	; 0x3c
	//512 bytes/sectors
	result.Total_Space=(double)(tot_sect/2)*0.000001; //Gbytes
 8001002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001004:	085b      	lsrs	r3, r3, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa9c 	bl	8000544 <__aeabi_ui2d>
 800100c:	a318      	add	r3, pc, #96	; (adr r3, 8001070 <Sd_Space+0xa8>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff fb11 	bl	8000638 <__aeabi_dmul>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	result.Free_Space=(double)(fre_sect/2)*0.000001; //Gbytes
 800101e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001020:	085b      	lsrs	r3, r3, #1
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fa8e 	bl	8000544 <__aeabi_ui2d>
 8001028:	a311      	add	r3, pc, #68	; (adr r3, 8001070 <Sd_Space+0xa8>)
 800102a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102e:	f7ff fb03 	bl	8000638 <__aeabi_dmul>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9c7 2308 	strd	r2, r3, [r7, #32]
	return result;
 800103a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001048:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800104c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001050:	ec41 0b16 	vmov	d6, r0, r1
 8001054:	ec43 2b17 	vmov	d7, r2, r3
}
 8001058:	eeb0 0a46 	vmov.f32	s0, s12
 800105c:	eef0 0a66 	vmov.f32	s1, s13
 8001060:	eeb0 1a47 	vmov.f32	s2, s14
 8001064:	eef0 1a67 	vmov.f32	s3, s15
 8001068:	374c      	adds	r7, #76	; 0x4c
 800106a:	46bd      	mov	sp, r7
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	bf00      	nop
 8001070:	a0b5ed8d 	.word	0xa0b5ed8d
 8001074:	3eb0c6f7 	.word	0x3eb0c6f7
 8001078:	20000464 	.word	0x20000464

0800107c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_DMA_Init+0x48>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_DMA_Init+0x48>)
 8001088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_DMA_Init+0x48>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	203b      	movs	r0, #59	; 0x3b
 80010a0:	f000 ffc5 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010a4:	203b      	movs	r0, #59	; 0x3b
 80010a6:	f000 ffde 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	2045      	movs	r0, #69	; 0x45
 80010b0:	f000 ffbd 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010b4:	2045      	movs	r0, #69	; 0x45
 80010b6:	f000 ffd6 	bl	8002066 <HAL_NVIC_EnableIRQ>

}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b090      	sub	sp, #64	; 0x40
 80010cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010de:	4b91      	ldr	r3, [pc, #580]	; (8001324 <MX_GPIO_Init+0x25c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a90      	ldr	r2, [pc, #576]	; (8001324 <MX_GPIO_Init+0x25c>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b8e      	ldr	r3, [pc, #568]	; (8001324 <MX_GPIO_Init+0x25c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80010f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f6:	4b8b      	ldr	r3, [pc, #556]	; (8001324 <MX_GPIO_Init+0x25c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a8a      	ldr	r2, [pc, #552]	; (8001324 <MX_GPIO_Init+0x25c>)
 80010fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b88      	ldr	r3, [pc, #544]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b85      	ldr	r3, [pc, #532]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a84      	ldr	r2, [pc, #528]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b82      	ldr	r3, [pc, #520]	; (8001324 <MX_GPIO_Init+0x25c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	623b      	str	r3, [r7, #32]
 8001124:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	4b7f      	ldr	r3, [pc, #508]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a7e      	ldr	r2, [pc, #504]	; (8001324 <MX_GPIO_Init+0x25c>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b7c      	ldr	r3, [pc, #496]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b79      	ldr	r3, [pc, #484]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a78      	ldr	r2, [pc, #480]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b76      	ldr	r3, [pc, #472]	; (8001324 <MX_GPIO_Init+0x25c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b73      	ldr	r3, [pc, #460]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a72      	ldr	r2, [pc, #456]	; (8001324 <MX_GPIO_Init+0x25c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b70      	ldr	r3, [pc, #448]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800116e:	4b6d      	ldr	r3, [pc, #436]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a6c      	ldr	r2, [pc, #432]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b6a      	ldr	r3, [pc, #424]	; (8001324 <MX_GPIO_Init+0x25c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001186:	4b67      	ldr	r3, [pc, #412]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a66      	ldr	r2, [pc, #408]	; (8001324 <MX_GPIO_Init+0x25c>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b64      	ldr	r3, [pc, #400]	; (8001324 <MX_GPIO_Init+0x25c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800119e:	4b61      	ldr	r3, [pc, #388]	; (8001324 <MX_GPIO_Init+0x25c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a60      	ldr	r2, [pc, #384]	; (8001324 <MX_GPIO_Init+0x25c>)
 80011a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b5e      	ldr	r3, [pc, #376]	; (8001324 <MX_GPIO_Init+0x25c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b6:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <MX_GPIO_Init+0x25c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a5a      	ldr	r2, [pc, #360]	; (8001324 <MX_GPIO_Init+0x25c>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b58      	ldr	r3, [pc, #352]	; (8001324 <MX_GPIO_Init+0x25c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ce:	4b55      	ldr	r3, [pc, #340]	; (8001324 <MX_GPIO_Init+0x25c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a54      	ldr	r2, [pc, #336]	; (8001324 <MX_GPIO_Init+0x25c>)
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b52      	ldr	r3, [pc, #328]	; (8001324 <MX_GPIO_Init+0x25c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 80011e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ec:	2303      	movs	r3, #3
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f8:	4619      	mov	r1, r3
 80011fa:	484b      	ldr	r0, [pc, #300]	; (8001328 <MX_GPIO_Init+0x260>)
 80011fc:	f001 faf4 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 8001200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	4619      	mov	r1, r3
 8001214:	4845      	ldr	r0, [pc, #276]	; (800132c <MX_GPIO_Init+0x264>)
 8001216:	f001 fae7 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB13 PB12 PB2
                           PB10 PB1 PB0 PB11
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800121a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2
                          |GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001220:	2303      	movs	r3, #3
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122c:	4619      	mov	r1, r3
 800122e:	4840      	ldr	r0, [pc, #256]	; (8001330 <MX_GPIO_Init+0x268>)
 8001230:	f001 fada 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8001234:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	483a      	ldr	r0, [pc, #232]	; (8001334 <MX_GPIO_Init+0x26c>)
 800124a:	f001 facd 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 800124e:	f649 63ff 	movw	r3, #40703	; 0x9eff
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001254:	2303      	movs	r3, #3
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001260:	4619      	mov	r1, r3
 8001262:	4835      	ldr	r0, [pc, #212]	; (8001338 <MX_GPIO_Init+0x270>)
 8001264:	f001 fac0 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8001268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126e:	2303      	movs	r3, #3
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127a:	4619      	mov	r1, r3
 800127c:	482f      	ldr	r0, [pc, #188]	; (800133c <MX_GPIO_Init+0x274>)
 800127e:	f001 fab3 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001288:	2303      	movs	r3, #3
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001294:	4619      	mov	r1, r3
 8001296:	482a      	ldr	r0, [pc, #168]	; (8001340 <MX_GPIO_Init+0x278>)
 8001298:	f001 faa6 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800129c:	23ff      	movs	r3, #255	; 0xff
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	2303      	movs	r3, #3
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80012a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ac:	4619      	mov	r1, r3
 80012ae:	4825      	ldr	r0, [pc, #148]	; (8001344 <MX_GPIO_Init+0x27c>)
 80012b0:	f001 fa9a 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	2300      	movs	r3, #0
 80012bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c6:	4619      	mov	r1, r3
 80012c8:	481f      	ldr	r0, [pc, #124]	; (8001348 <MX_GPIO_Init+0x280>)
 80012ca:	f001 fa8d 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d4:	2303      	movs	r3, #3
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	481a      	ldr	r0, [pc, #104]	; (800134c <MX_GPIO_Init+0x284>)
 80012e4:	f001 fa80 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80012e8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012fa:	4619      	mov	r1, r3
 80012fc:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_GPIO_Init+0x288>)
 80012fe:	f001 fa73 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC3 PC0 PC1 PC2
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 8001302:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001308:	2303      	movs	r3, #3
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001314:	4619      	mov	r1, r3
 8001316:	480c      	ldr	r0, [pc, #48]	; (8001348 <MX_GPIO_Init+0x280>)
 8001318:	f001 fa66 	bl	80027e8 <HAL_GPIO_Init>

}
 800131c:	bf00      	nop
 800131e:	3740      	adds	r7, #64	; 0x40
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40023800 	.word	0x40023800
 8001328:	40021000 	.word	0x40021000
 800132c:	40021800 	.word	0x40021800
 8001330:	40020400 	.word	0x40020400
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40020000 	.word	0x40020000
 800133c:	40022400 	.word	0x40022400
 8001340:	40022000 	.word	0x40022000
 8001344:	40022800 	.word	0x40022800
 8001348:	40020800 	.word	0x40020800
 800134c:	40021400 	.word	0x40021400
 8001350:	40021c00 	.word	0x40021c00

08001354 <_write>:
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char *ptr, int len) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 100);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	b29a      	uxth	r2, r3
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <_write+0x24>)
 800136a:	f004 fd4b 	bl	8005e04 <HAL_UART_Transmit>
	return len;
 800136e:	687b      	ldr	r3, [r7, #4]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200003d8 	.word	0x200003d8

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001382:	f000 fcf8 	bl	8001d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001386:	f000 f84f 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138a:	f7ff fe9d 	bl	80010c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800138e:	f7ff fe75 	bl	800107c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001392:	f000 f8cb 	bl	800152c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001396:	f005 ff3d 	bl	8007214 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 800139a:	f000 fc35 	bl	8001c08 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800139e:	f000 fb89 	bl	8001ab4 <MX_TIM6_Init>
  MX_TIM1_Init();
 80013a2:	f000 fb2d 	bl	8001a00 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Fat_Init();
 80013a6:	f7ff fde3 	bl	8000f70 <Fat_Init>
  /* USER CODE END 2 */
  int  Wind_Speed_KMH=0,Min_Wind=0, Max_Wind=1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	2301      	movs	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
  uint8_t Force =5;
 80013b6:	2305      	movs	r3, #5
 80013b8:	74fb      	strb	r3, [r7, #19]
  WR_TO_Sd("test6.csv","Average_Wind_Speed,Min,Max,Force,\n");
 80013ba:	4916      	ldr	r1, [pc, #88]	; (8001414 <main+0x98>)
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <main+0x9c>)
 80013be:	f7ff fd95 	bl	8000eec <WR_TO_Sd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  WR_TO_Sd("test6.csv","%d km/h,%d,%d,%u\n", Wind_Speed_KMH, Min_Wind, Max_Wind, Force);
 80013c2:	7cfb      	ldrb	r3, [r7, #19]
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	4913      	ldr	r1, [pc, #76]	; (800141c <main+0xa0>)
 80013d0:	4811      	ldr	r0, [pc, #68]	; (8001418 <main+0x9c>)
 80013d2:	f7ff fd8b 	bl	8000eec <WR_TO_Sd>
	  SD_State Space = Sd_Space();
 80013d6:	f7ff fdf7 	bl	8000fc8 <Sd_Space>
 80013da:	eeb0 6a40 	vmov.f32	s12, s0
 80013de:	eef0 6a60 	vmov.f32	s13, s1
 80013e2:	eeb0 7a41 	vmov.f32	s14, s2
 80013e6:	eef0 7a61 	vmov.f32	s15, s3
 80013ea:	ed87 6b00 	vstr	d6, [r7]
 80013ee:	ed87 7b02 	vstr	d7, [r7, #8]
	  WR_TO_Sd("Space.txt","Total = %lf Gbytes, Free= %lf Gbytes\n\r",Space.Total_Space,Space.Free_Space);
 80013f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013fa:	e9cd 2300 	strd	r2, r3, [sp]
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4907      	ldr	r1, [pc, #28]	; (8001420 <main+0xa4>)
 8001404:	4807      	ldr	r0, [pc, #28]	; (8001424 <main+0xa8>)
 8001406:	f7ff fd71 	bl	8000eec <WR_TO_Sd>
	  HAL_Delay(5);
 800140a:	2005      	movs	r0, #5
 800140c:	f000 fd10 	bl	8001e30 <HAL_Delay>
  {
 8001410:	e7d7      	b.n	80013c2 <main+0x46>
 8001412:	bf00      	nop
 8001414:	0800d288 	.word	0x0800d288
 8001418:	0800d2ac 	.word	0x0800d2ac
 800141c:	0800d2b8 	.word	0x0800d2b8
 8001420:	0800d2cc 	.word	0x0800d2cc
 8001424:	0800d2f4 	.word	0x0800d2f4

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b094      	sub	sp, #80	; 0x50
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	2230      	movs	r2, #48	; 0x30
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f009 f814 	bl	800a464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <SystemClock_Config+0xd4>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <SystemClock_Config+0xd4>)
 8001452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	; 0x40
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <SystemClock_Config+0xd4>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <SystemClock_Config+0xd8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800146c:	4a24      	ldr	r2, [pc, #144]	; (8001500 <SystemClock_Config+0xd8>)
 800146e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <SystemClock_Config+0xd8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148a:	2302      	movs	r3, #2
 800148c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800148e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001494:	230c      	movs	r3, #12
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001498:	2360      	movs	r3, #96	; 0x60
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fbb1 	bl	8002c10 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80014b4:	f000 f834 	bl	8001520 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014b8:	f001 fb5a 	bl	8002b70 <HAL_PWREx_EnableOverDrive>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014c2:	f000 f82d 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c6:	230f      	movs	r3, #15
 80014c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ca:	2302      	movs	r3, #2
 80014cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2103      	movs	r1, #3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 fe37 	bl	8003158 <HAL_RCC_ClockConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80014f0:	f000 f816 	bl	8001520 <Error_Handler>
  }
}
 80014f4:	bf00      	nop
 80014f6:	3750      	adds	r7, #80	; 0x50
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	printf("hey\n\r");
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x18>)
 800150e:	f009 fc1b 	bl	800ad48 <iprintf>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	0800d300 	.word	0x0800d300

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_SDMMC1_SD_Init+0x38>)
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <MX_SDMMC1_SD_Init+0x3c>)
 8001534:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_SDMMC1_SD_Init+0x38>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_SDMMC1_SD_Init+0x38>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_SDMMC1_SD_Init+0x38>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_SDMMC1_SD_Init+0x38>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <MX_SDMMC1_SD_Init+0x38>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <MX_SDMMC1_SD_Init+0x38>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	200001f8 	.word	0x200001f8
 8001568:	40012c00 	.word	0x40012c00

0800156c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0ac      	sub	sp, #176	; 0xb0
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	2284      	movs	r2, #132	; 0x84
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f008 ff69 	bl	800a464 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a74      	ldr	r2, [pc, #464]	; (8001768 <HAL_SD_MspInit+0x1fc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	f040 80e0 	bne.w	800175e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800159e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80015a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 ffb5 	bl	8003524 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80015c0:	f7ff ffae 	bl	8001520 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015c4:	4b69      	ldr	r3, [pc, #420]	; (800176c <HAL_SD_MspInit+0x200>)
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	4a68      	ldr	r2, [pc, #416]	; (800176c <HAL_SD_MspInit+0x200>)
 80015ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ce:	6453      	str	r3, [r2, #68]	; 0x44
 80015d0:	4b66      	ldr	r3, [pc, #408]	; (800176c <HAL_SD_MspInit+0x200>)
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015dc:	4b63      	ldr	r3, [pc, #396]	; (800176c <HAL_SD_MspInit+0x200>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a62      	ldr	r2, [pc, #392]	; (800176c <HAL_SD_MspInit+0x200>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b60      	ldr	r3, [pc, #384]	; (800176c <HAL_SD_MspInit+0x200>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f4:	4b5d      	ldr	r3, [pc, #372]	; (800176c <HAL_SD_MspInit+0x200>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4a5c      	ldr	r2, [pc, #368]	; (800176c <HAL_SD_MspInit+0x200>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001600:	4b5a      	ldr	r3, [pc, #360]	; (800176c <HAL_SD_MspInit+0x200>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 800160c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001626:	230c      	movs	r3, #12
 8001628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001630:	4619      	mov	r1, r3
 8001632:	484f      	ldr	r0, [pc, #316]	; (8001770 <HAL_SD_MspInit+0x204>)
 8001634:	f001 f8d8 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001638:	2304      	movs	r3, #4
 800163a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001650:	230c      	movs	r3, #12
 8001652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001656:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800165a:	4619      	mov	r1, r3
 800165c:	4845      	ldr	r0, [pc, #276]	; (8001774 <HAL_SD_MspInit+0x208>)
 800165e:	f001 f8c3 	bl	80027e8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001662:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_SD_MspInit+0x20c>)
 8001664:	4a45      	ldr	r2, [pc, #276]	; (800177c <HAL_SD_MspInit+0x210>)
 8001666:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001668:	4b43      	ldr	r3, [pc, #268]	; (8001778 <HAL_SD_MspInit+0x20c>)
 800166a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800166e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_SD_MspInit+0x20c>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001676:	4b40      	ldr	r3, [pc, #256]	; (8001778 <HAL_SD_MspInit+0x20c>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HAL_SD_MspInit+0x20c>)
 800167e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001682:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001684:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <HAL_SD_MspInit+0x20c>)
 8001686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_SD_MspInit+0x20c>)
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_SD_MspInit+0x20c>)
 8001696:	2220      	movs	r2, #32
 8001698:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HAL_SD_MspInit+0x20c>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016a0:	4b35      	ldr	r3, [pc, #212]	; (8001778 <HAL_SD_MspInit+0x20c>)
 80016a2:	2204      	movs	r2, #4
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016a6:	4b34      	ldr	r3, [pc, #208]	; (8001778 <HAL_SD_MspInit+0x20c>)
 80016a8:	2203      	movs	r2, #3
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_SD_MspInit+0x20c>)
 80016ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_SD_MspInit+0x20c>)
 80016b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016ba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80016bc:	482e      	ldr	r0, [pc, #184]	; (8001778 <HAL_SD_MspInit+0x20c>)
 80016be:	f000 fced 	bl	800209c <HAL_DMA_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80016c8:	f7ff ff2a 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <HAL_SD_MspInit+0x20c>)
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <HAL_SD_MspInit+0x20c>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80016d8:	4b29      	ldr	r3, [pc, #164]	; (8001780 <HAL_SD_MspInit+0x214>)
 80016da:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <HAL_SD_MspInit+0x218>)
 80016dc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80016de:	4b28      	ldr	r3, [pc, #160]	; (8001780 <HAL_SD_MspInit+0x214>)
 80016e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016e4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <HAL_SD_MspInit+0x214>)
 80016e8:	2240      	movs	r2, #64	; 0x40
 80016ea:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HAL_SD_MspInit+0x214>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <HAL_SD_MspInit+0x214>)
 80016f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <HAL_SD_MspInit+0x214>)
 80016fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001700:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <HAL_SD_MspInit+0x214>)
 8001704:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001708:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <HAL_SD_MspInit+0x214>)
 800170c:	2220      	movs	r2, #32
 800170e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_SD_MspInit+0x214>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_SD_MspInit+0x214>)
 8001718:	2204      	movs	r2, #4
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_SD_MspInit+0x214>)
 800171e:	2203      	movs	r2, #3
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <HAL_SD_MspInit+0x214>)
 8001724:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_SD_MspInit+0x214>)
 800172c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001732:	4813      	ldr	r0, [pc, #76]	; (8001780 <HAL_SD_MspInit+0x214>)
 8001734:	f000 fcb2 	bl	800209c <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800173e:	f7ff feef 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_SD_MspInit+0x214>)
 8001746:	63da      	str	r2, [r3, #60]	; 0x3c
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_SD_MspInit+0x214>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2031      	movs	r0, #49	; 0x31
 8001754:	f000 fc6b 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001758:	2031      	movs	r0, #49	; 0x31
 800175a:	f000 fc84 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800175e:	bf00      	nop
 8001760:	37b0      	adds	r7, #176	; 0xb0
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40012c00 	.word	0x40012c00
 800176c:	40023800 	.word	0x40023800
 8001770:	40020800 	.word	0x40020800
 8001774:	40020c00 	.word	0x40020c00
 8001778:	2000027c 	.word	0x2000027c
 800177c:	40026458 	.word	0x40026458
 8001780:	200002dc 	.word	0x200002dc
 8001784:	400264a0 	.word	0x400264a0

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_MspInit+0x44>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_MspInit+0x44>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_MspInit+0x44>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_MspInit+0x44>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_MspInit+0x44>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_MspInit+0x44>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 fae8 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM1_CC_IRQHandler+0x10>)
 800182a:	f003 fe44 	bl	80054b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000340 	.word	0x20000340

08001838 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <SDMMC1_IRQHandler+0x10>)
 800183e:	f002 fce1 	bl	8004204 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200001f8 	.word	0x200001f8

0800184c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <TIM6_DAC_IRQHandler+0x10>)
 8001852:	f003 fe30 	bl	80054b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000038c 	.word	0x2000038c

08001860 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <DMA2_Stream3_IRQHandler+0x10>)
 8001866:	f000 fd49 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000027c 	.word	0x2000027c

08001874 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <DMA2_Stream6_IRQHandler+0x10>)
 800187a:	f000 fd3f 	bl	80022fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200002dc 	.word	0x200002dc

08001888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	return 1;
 800188c:	2301      	movs	r3, #1
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_kill>:

int _kill(int pid, int sig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018a2:	f008 fdb5 	bl	800a410 <__errno>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2216      	movs	r2, #22
 80018aa:	601a      	str	r2, [r3, #0]
	return -1;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_exit>:

void _exit (int status)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ffe7 	bl	8001898 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ca:	e7fe      	b.n	80018ca <_exit+0x12>

080018cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e00a      	b.n	80018f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018de:	f3af 8000 	nop.w
 80018e2:	4601      	mov	r1, r0
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60ba      	str	r2, [r7, #8]
 80018ea:	b2ca      	uxtb	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf0      	blt.n	80018de <_read+0x12>
	}

return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	return -1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192e:	605a      	str	r2, [r3, #4]
	return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_isatty>:

int _isatty(int file)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
	return 1;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
	return 0;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f008 fd36 	bl	800a410 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20050000 	.word	0x20050000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	2000033c 	.word	0x2000033c
 80019d8:	20000918 	.word	0x20000918

080019dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <MX_TIM1_Init+0xb0>)
 8001a22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a4a:	4818      	ldr	r0, [pc, #96]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a4c:	f003 fcdc 	bl	8005408 <HAL_TIM_IC_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a56:	f7ff fd63 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480f      	ldr	r0, [pc, #60]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a6e:	f004 f8cf 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001a78:	f7ff fd52 	bl	8001520 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a80:	2301      	movs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_TIM1_Init+0xac>)
 8001a94:	f003 fe2e 	bl	80056f4 <HAL_TIM_IC_ConfigChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001a9e:	f7ff fd3f 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000340 	.word	0x20000340
 8001ab0:	40010000 	.word	0x40010000

08001ab4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_TIM6_Init+0x68>)
 8001ac6:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <MX_TIM6_Init+0x6c>)
 8001ac8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_TIM6_Init+0x68>)
 8001acc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_TIM6_Init+0x68>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_TIM6_Init+0x68>)
 8001ada:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001ade:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_TIM6_Init+0x68>)
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ae6:	480d      	ldr	r0, [pc, #52]	; (8001b1c <MX_TIM6_Init+0x68>)
 8001ae8:	f003 fc37 	bl	800535a <HAL_TIM_Base_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001af2:	f7ff fd15 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_TIM6_Init+0x68>)
 8001b04:	f004 f884 	bl	8005c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001b0e:	f7ff fd07 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000038c 	.word	0x2000038c
 8001b20:	40001000 	.word	0x40001000

08001b24 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_TIM_IC_MspInit+0x8c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d130      	bne.n	8001ba8 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <HAL_TIM_IC_MspInit+0x90>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a1a      	ldr	r2, [pc, #104]	; (8001bb4 <HAL_TIM_IC_MspInit+0x90>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_TIM_IC_MspInit+0x90>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <HAL_TIM_IC_MspInit+0x90>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_TIM_IC_MspInit+0x90>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_TIM_IC_MspInit+0x90>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <HAL_TIM_IC_MspInit+0x94>)
 8001b94:	f000 fe28 	bl	80027e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	201b      	movs	r0, #27
 8001b9e:	f000 fa46 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ba2:	201b      	movs	r0, #27
 8001ba4:	f000 fa5f 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40010000 	.word	0x40010000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_TIM_Base_MspInit+0x44>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d113      	bne.n	8001bf6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_TIM_Base_MspInit+0x48>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_TIM_Base_MspInit+0x48>)
 8001bd4:	f043 0310 	orr.w	r3, r3, #16
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_TIM_Base_MspInit+0x48>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	2036      	movs	r0, #54	; 0x36
 8001bec:	f000 fa1f 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bf0:	2036      	movs	r0, #54	; 0x36
 8001bf2:	f000 fa38 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40001000 	.word	0x40001000
 8001c04:	40023800 	.word	0x40023800

08001c08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c0e:	4a15      	ldr	r2, [pc, #84]	; (8001c64 <MX_USART1_UART_Init+0x5c>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART1_UART_Init+0x58>)
 8001c4c:	f004 f88c 	bl	8005d68 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c56:	f7ff fc63 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200003d8 	.word	0x200003d8
 8001c64:	40011000 	.word	0x40011000

08001c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0aa      	sub	sp, #168	; 0xa8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	2284      	movs	r2, #132	; 0x84
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f008 fbeb 	bl	800a464 <memset>
  if(uartHandle->Instance==USART1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <HAL_UART_MspInit+0xb0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d13a      	bne.n	8001d0e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c98:	2340      	movs	r3, #64	; 0x40
 8001c9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f001 fc3d 	bl	8003524 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cb0:	f7ff fc36 	bl	8001520 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_UART_MspInit+0xb4>)
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <HAL_UART_MspInit+0xb4>)
 8001cba:	f043 0310 	orr.w	r3, r3, #16
 8001cbe:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_UART_MspInit+0xb4>)
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_UART_MspInit+0xb4>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <HAL_UART_MspInit+0xb4>)
 8001cd2:	f043 0302 	orr.w	r3, r3, #2
 8001cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_UART_MspInit+0xb4>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001ce4:	23c0      	movs	r3, #192	; 0xc0
 8001ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <HAL_UART_MspInit+0xb8>)
 8001d0a:	f000 fd6d 	bl	80027e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d0e:	bf00      	nop
 8001d10:	37a8      	adds	r7, #168	; 0xa8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020400 	.word	0x40020400

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2a:	490e      	ldr	r1, [pc, #56]	; (8001d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d40:	4c0b      	ldr	r4, [pc, #44]	; (8001d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d4e:	f7ff fe45 	bl	80019dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d52:	f008 fb63 	bl	800a41c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d56:	f7ff fb11 	bl	800137c <main>
  bx  lr    
 8001d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d68:	0800d80c 	.word	0x0800d80c
  ldr r2, =_sbss
 8001d6c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d70:	20000914 	.word	0x20000914

08001d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC_IRQHandler>

08001d76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	f000 f94c 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 f805 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d86:	f7ff fcff 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f967 	bl	8002082 <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 f92f 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000008 	.word	0x20000008
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_IncTick+0x20>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x24>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <HAL_IncTick+0x24>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000008 	.word	0x20000008
 8001e14:	2000045c 	.word	0x2000045c

08001e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <HAL_GetTick+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	2000045c 	.word	0x2000045c

08001e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e38:	f7ff ffee 	bl	8001e18 <HAL_GetTick>
 8001e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e48:	d005      	beq.n	8001e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_Delay+0x44>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e56:	bf00      	nop
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d8f7      	bhi.n	8001e58 <HAL_Delay+0x28>
  {
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00
 8001ebc:	05fa0000 	.word	0x05fa0000

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	; (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	; (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	; (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	; 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff29 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff3e 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff31 	bl	8001edc <__NVIC_EnableIRQ>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffa2 	bl	8001fd4 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff feb6 	bl	8001e18 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e099      	b.n	80021ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d8:	e00f      	b.n	80020fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020da:	f7ff fe9d 	bl	8001e18 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d908      	bls.n	80020fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e078      	b.n	80021ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e8      	bne.n	80020da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_DMA_Init+0x158>)
 8002114:	4013      	ands	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	2b04      	cmp	r3, #4
 8002152:	d107      	bne.n	8002164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4313      	orrs	r3, r2
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f023 0307 	bic.w	r3, r3, #7
 800217a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	2b04      	cmp	r3, #4
 800218c:	d117      	bne.n	80021be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00e      	beq.n	80021be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 faa5 	bl	80026f0 <DMA_CheckFifoParam>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021ba:	2301      	movs	r3, #1
 80021bc:	e016      	b.n	80021ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fa5c 	bl	8002684 <DMA_CalcBaseAndBitshift>
 80021cc:	4603      	mov	r3, r0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	223f      	movs	r2, #63	; 0x3f
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	f010803f 	.word	0xf010803f

080021f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_DMA_Start_IT+0x26>
 800221a:	2302      	movs	r3, #2
 800221c:	e048      	b.n	80022b0 <HAL_DMA_Start_IT+0xb8>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d137      	bne.n	80022a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f9ee 	bl	8002628 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002250:	223f      	movs	r2, #63	; 0x3f
 8002252:	409a      	lsls	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0216 	orr.w	r2, r2, #22
 8002266:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002276:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0208 	orr.w	r2, r2, #8
 800228e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	e005      	b.n	80022ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022aa:	2302      	movs	r3, #2
 80022ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d004      	beq.n	80022d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00c      	b.n	80022f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2205      	movs	r2, #5
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002308:	4b8e      	ldr	r3, [pc, #568]	; (8002544 <HAL_DMA_IRQHandler+0x248>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a8e      	ldr	r2, [pc, #568]	; (8002548 <HAL_DMA_IRQHandler+0x24c>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0a9b      	lsrs	r3, r3, #10
 8002314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2208      	movs	r2, #8
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d01a      	beq.n	8002368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0204 	bic.w	r2, r2, #4
 800234e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	2208      	movs	r2, #8
 8002356:	409a      	lsls	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	2201      	movs	r2, #1
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d012      	beq.n	800239e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2201      	movs	r2, #1
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002396:	f043 0202 	orr.w	r2, r3, #2
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a2:	2204      	movs	r2, #4
 80023a4:	409a      	lsls	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d012      	beq.n	80023d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	2204      	movs	r2, #4
 80023c2:	409a      	lsls	r2, r3
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f043 0204 	orr.w	r2, r3, #4
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2210      	movs	r2, #16
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d043      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d03c      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	2210      	movs	r2, #16
 80023f8:	409a      	lsls	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d018      	beq.n	800243e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d024      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	4798      	blx	r3
 800242a:	e01f      	b.n	800246c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
 800243c:	e016      	b.n	800246c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d107      	bne.n	800245c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0208 	bic.w	r2, r2, #8
 800245a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	2220      	movs	r2, #32
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 808f 	beq.w	800259c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 8087 	beq.w	800259c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	2220      	movs	r2, #32
 8002494:	409a      	lsls	r2, r3
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d136      	bne.n	8002514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0216 	bic.w	r2, r2, #22
 80024b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695a      	ldr	r2, [r3, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <HAL_DMA_IRQHandler+0x1da>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0208 	bic.w	r2, r2, #8
 80024e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	223f      	movs	r2, #63	; 0x3f
 80024ec:	409a      	lsls	r2, r3
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	2b00      	cmp	r3, #0
 8002508:	d07e      	beq.n	8002608 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	4798      	blx	r3
        }
        return;
 8002512:	e079      	b.n	8002608 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d01d      	beq.n	800255e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10d      	bne.n	800254c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002534:	2b00      	cmp	r3, #0
 8002536:	d031      	beq.n	800259c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
 8002540:	e02c      	b.n	800259c <HAL_DMA_IRQHandler+0x2a0>
 8002542:	bf00      	nop
 8002544:	20000000 	.word	0x20000000
 8002548:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d023      	beq.n	800259c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
 800255c:	e01e      	b.n	800259c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10f      	bne.n	800258c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0210 	bic.w	r2, r2, #16
 800257a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d032      	beq.n	800260a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d022      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2205      	movs	r2, #5
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0201 	bic.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	3301      	adds	r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d307      	bcc.n	80025e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f2      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x2cc>
 80025e2:	e000      	b.n	80025e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
 8002606:	e000      	b.n	800260a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002608:	bf00      	nop
    }
  }
}
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002644:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d108      	bne.n	8002668 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002666:	e007      	b.n	8002678 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	60da      	str	r2, [r3, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	3b10      	subs	r3, #16
 8002694:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <DMA_CalcBaseAndBitshift+0x60>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <DMA_CalcBaseAndBitshift+0x64>)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d908      	bls.n	80026c4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <DMA_CalcBaseAndBitshift+0x68>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	1d1a      	adds	r2, r3, #4
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	659a      	str	r2, [r3, #88]	; 0x58
 80026c2:	e006      	b.n	80026d2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <DMA_CalcBaseAndBitshift+0x68>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	aaaaaaab 	.word	0xaaaaaaab
 80026e8:	0800d364 	.word	0x0800d364
 80026ec:	fffffc00 	.word	0xfffffc00

080026f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d11f      	bne.n	800274a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d856      	bhi.n	80027be <DMA_CheckFifoParam+0xce>
 8002710:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <DMA_CheckFifoParam+0x28>)
 8002712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002716:	bf00      	nop
 8002718:	08002729 	.word	0x08002729
 800271c:	0800273b 	.word	0x0800273b
 8002720:	08002729 	.word	0x08002729
 8002724:	080027bf 	.word	0x080027bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d046      	beq.n	80027c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002738:	e043      	b.n	80027c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002742:	d140      	bne.n	80027c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002748:	e03d      	b.n	80027c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002752:	d121      	bne.n	8002798 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d837      	bhi.n	80027ca <DMA_CheckFifoParam+0xda>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <DMA_CheckFifoParam+0x70>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002771 	.word	0x08002771
 8002764:	08002777 	.word	0x08002777
 8002768:	08002771 	.word	0x08002771
 800276c:	08002789 	.word	0x08002789
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      break;
 8002774:	e030      	b.n	80027d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d025      	beq.n	80027ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002786:	e022      	b.n	80027ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002790:	d11f      	bne.n	80027d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002796:	e01c      	b.n	80027d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d903      	bls.n	80027a6 <DMA_CheckFifoParam+0xb6>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d003      	beq.n	80027ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027a4:	e018      	b.n	80027d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
      break;
 80027aa:	e015      	b.n	80027d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00e      	beq.n	80027d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      break;
 80027bc:	e00b      	b.n	80027d6 <DMA_CheckFifoParam+0xe6>
      break;
 80027be:	bf00      	nop
 80027c0:	e00a      	b.n	80027d8 <DMA_CheckFifoParam+0xe8>
      break;
 80027c2:	bf00      	nop
 80027c4:	e008      	b.n	80027d8 <DMA_CheckFifoParam+0xe8>
      break;
 80027c6:	bf00      	nop
 80027c8:	e006      	b.n	80027d8 <DMA_CheckFifoParam+0xe8>
      break;
 80027ca:	bf00      	nop
 80027cc:	e004      	b.n	80027d8 <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
 80027d0:	e002      	b.n	80027d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80027d2:	bf00      	nop
 80027d4:	e000      	b.n	80027d8 <DMA_CheckFifoParam+0xe8>
      break;
 80027d6:	bf00      	nop
    }
  } 
  
  return status; 
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e175      	b.n	8002af4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002808:	2201      	movs	r2, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	429a      	cmp	r2, r3
 8002822:	f040 8164 	bne.w	8002aee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d005      	beq.n	800283e <HAL_GPIO_Init+0x56>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d130      	bne.n	80028a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0201 	and.w	r2, r3, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d017      	beq.n	80028dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d123      	bne.n	8002930 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	220f      	movs	r2, #15
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	08da      	lsrs	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	69b9      	ldr	r1, [r7, #24]
 800292c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80be 	beq.w	8002aee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	4b66      	ldr	r3, [pc, #408]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4a65      	ldr	r2, [pc, #404]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297c:	6453      	str	r3, [r2, #68]	; 0x44
 800297e:	4b63      	ldr	r3, [pc, #396]	; (8002b0c <HAL_GPIO_Init+0x324>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800298a:	4a61      	ldr	r2, [pc, #388]	; (8002b10 <HAL_GPIO_Init+0x328>)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	089b      	lsrs	r3, r3, #2
 8002990:	3302      	adds	r3, #2
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	220f      	movs	r2, #15
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a58      	ldr	r2, [pc, #352]	; (8002b14 <HAL_GPIO_Init+0x32c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d037      	beq.n	8002a26 <HAL_GPIO_Init+0x23e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a57      	ldr	r2, [pc, #348]	; (8002b18 <HAL_GPIO_Init+0x330>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d031      	beq.n	8002a22 <HAL_GPIO_Init+0x23a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a56      	ldr	r2, [pc, #344]	; (8002b1c <HAL_GPIO_Init+0x334>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d02b      	beq.n	8002a1e <HAL_GPIO_Init+0x236>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a55      	ldr	r2, [pc, #340]	; (8002b20 <HAL_GPIO_Init+0x338>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d025      	beq.n	8002a1a <HAL_GPIO_Init+0x232>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a54      	ldr	r2, [pc, #336]	; (8002b24 <HAL_GPIO_Init+0x33c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01f      	beq.n	8002a16 <HAL_GPIO_Init+0x22e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a53      	ldr	r2, [pc, #332]	; (8002b28 <HAL_GPIO_Init+0x340>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x22a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a52      	ldr	r2, [pc, #328]	; (8002b2c <HAL_GPIO_Init+0x344>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x226>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a51      	ldr	r2, [pc, #324]	; (8002b30 <HAL_GPIO_Init+0x348>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x222>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a50      	ldr	r2, [pc, #320]	; (8002b34 <HAL_GPIO_Init+0x34c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x21e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4f      	ldr	r2, [pc, #316]	; (8002b38 <HAL_GPIO_Init+0x350>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x21a>
 80029fe:	2309      	movs	r3, #9
 8002a00:	e012      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a02:	230a      	movs	r3, #10
 8002a04:	e010      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a06:	2308      	movs	r3, #8
 8002a08:	e00e      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	e00c      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a0e:	2306      	movs	r3, #6
 8002a10:	e00a      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a12:	2305      	movs	r3, #5
 8002a14:	e008      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a16:	2304      	movs	r3, #4
 8002a18:	e006      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e004      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e002      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_GPIO_Init+0x240>
 8002a26:	2300      	movs	r3, #0
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	f002 0203 	and.w	r2, r2, #3
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4093      	lsls	r3, r2
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a38:	4935      	ldr	r1, [pc, #212]	; (8002b10 <HAL_GPIO_Init+0x328>)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	089b      	lsrs	r3, r3, #2
 8002a3e:	3302      	adds	r3, #2
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a46:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6a:	4a34      	ldr	r2, [pc, #208]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a94:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002abe:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <HAL_GPIO_Init+0x354>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	f67f ae86 	bls.w	8002808 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40013800 	.word	0x40013800
 8002b14:	40020000 	.word	0x40020000
 8002b18:	40020400 	.word	0x40020400
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40020c00 	.word	0x40020c00
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40021400 	.word	0x40021400
 8002b2c:	40021800 	.word	0x40021800
 8002b30:	40021c00 	.word	0x40021c00
 8002b34:	40022000 	.word	0x40022000
 8002b38:	40022400 	.word	0x40022400
 8002b3c:	40013c00 	.word	0x40013c00

08002b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e001      	b.n	8002b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a22      	ldr	r2, [pc, #136]	; (8002c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b92:	4b1e      	ldr	r3, [pc, #120]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9e:	f7ff f93b 	bl	8001e18 <HAL_GetTick>
 8002ba2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ba4:	e009      	b.n	8002bba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba6:	f7ff f937 	bl	8001e18 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb4:	d901      	bls.n	8002bba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e022      	b.n	8002c00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc6:	d1ee      	bne.n	8002ba6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bc8:	4b10      	ldr	r3, [pc, #64]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd4:	f7ff f920 	bl	8001e18 <HAL_GetTick>
 8002bd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bda:	e009      	b.n	8002bf0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bdc:	f7ff f91c 	bl	8001e18 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bea:	d901      	bls.n	8002bf0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e007      	b.n	8002c00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bfc:	d1ee      	bne.n	8002bdc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40007000 	.word	0x40007000

08002c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e291      	b.n	800314a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8087 	beq.w	8002d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c34:	4b96      	ldr	r3, [pc, #600]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d00c      	beq.n	8002c5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c40:	4b93      	ldr	r3, [pc, #588]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d112      	bne.n	8002c72 <HAL_RCC_OscConfig+0x62>
 8002c4c:	4b90      	ldr	r3, [pc, #576]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c58:	d10b      	bne.n	8002c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5a:	4b8d      	ldr	r3, [pc, #564]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d06c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x130>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d168      	bne.n	8002d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e26b      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_OscConfig+0x7a>
 8002c7c:	4b84      	ldr	r3, [pc, #528]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a83      	ldr	r2, [pc, #524]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	e02e      	b.n	8002ce8 <HAL_RCC_OscConfig+0xd8>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x9c>
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7e      	ldr	r2, [pc, #504]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b7c      	ldr	r3, [pc, #496]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7b      	ldr	r2, [pc, #492]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e01d      	b.n	8002ce8 <HAL_RCC_OscConfig+0xd8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0xc0>
 8002cb6:	4b76      	ldr	r3, [pc, #472]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a75      	ldr	r2, [pc, #468]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b73      	ldr	r3, [pc, #460]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a72      	ldr	r2, [pc, #456]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0xd8>
 8002cd0:	4b6f      	ldr	r3, [pc, #444]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6e      	ldr	r2, [pc, #440]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b6c      	ldr	r3, [pc, #432]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6b      	ldr	r2, [pc, #428]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7ff f892 	bl	8001e18 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7ff f88e 	bl	8001e18 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e21f      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0xe8>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7ff f87e 	bl	8001e18 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7ff f87a 	bl	8001e18 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e20b      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d32:	4b57      	ldr	r3, [pc, #348]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x110>
 8002d3e:	e000      	b.n	8002d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d069      	beq.n	8002e22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d4e:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00b      	beq.n	8002d72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b4d      	ldr	r3, [pc, #308]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d11c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x190>
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d116      	bne.n	8002da0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_RCC_OscConfig+0x17a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d001      	beq.n	8002d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e1df      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8a:	4b41      	ldr	r3, [pc, #260]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	493d      	ldr	r1, [pc, #244]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	e040      	b.n	8002e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d023      	beq.n	8002df0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002da8:	4b39      	ldr	r3, [pc, #228]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a38      	ldr	r2, [pc, #224]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7ff f830 	bl	8001e18 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbc:	f7ff f82c 	bl	8001e18 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1bd      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dce:	4b30      	ldr	r3, [pc, #192]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4929      	ldr	r1, [pc, #164]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
 8002dee:	e018      	b.n	8002e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f80c 	bl	8001e18 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7ff f808 	bl	8001e18 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e199      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d038      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d019      	beq.n	8002e6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fe ffe9 	bl	8001e18 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4a:	f7fe ffe5 	bl	8001e18 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e176      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x23a>
 8002e68:	e01a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <HAL_RCC_OscConfig+0x280>)
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7fe ffcf 	bl	8001e18 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7e:	f7fe ffcb 	bl	8001e18 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d903      	bls.n	8002e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e15c      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
 8002e90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	4b91      	ldr	r3, [pc, #580]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ee      	bne.n	8002e7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80a4 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eae:	4b8b      	ldr	r3, [pc, #556]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10d      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a87      	ldr	r2, [pc, #540]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b85      	ldr	r3, [pc, #532]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed6:	4b82      	ldr	r3, [pc, #520]	; (80030e0 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d118      	bne.n	8002f14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	; (80030e0 <HAL_RCC_OscConfig+0x4d0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a7e      	ldr	r2, [pc, #504]	; (80030e0 <HAL_RCC_OscConfig+0x4d0>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7fe ff93 	bl	8001e18 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7fe ff8f 	bl	8001e18 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b64      	cmp	r3, #100	; 0x64
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e120      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f08:	4b75      	ldr	r3, [pc, #468]	; (80030e0 <HAL_RCC_OscConfig+0x4d0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x31a>
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	e02d      	b.n	8002f86 <HAL_RCC_OscConfig+0x376>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x33c>
 8002f32:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a69      	ldr	r2, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	4a66      	ldr	r2, [pc, #408]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f44:	f023 0304 	bic.w	r3, r3, #4
 8002f48:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4a:	e01c      	b.n	8002f86 <HAL_RCC_OscConfig+0x376>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d10c      	bne.n	8002f6e <HAL_RCC_OscConfig+0x35e>
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	4a60      	ldr	r2, [pc, #384]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f60:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4a5d      	ldr	r2, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x376>
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a5a      	ldr	r2, [pc, #360]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	4b58      	ldr	r3, [pc, #352]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a57      	ldr	r2, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7fe ff43 	bl	8001e18 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fe ff3f 	bl	8001e18 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e0ce      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ee      	beq.n	8002f96 <HAL_RCC_OscConfig+0x386>
 8002fb8:	e014      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fba:	f7fe ff2d 	bl	8001e18 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7fe ff29 	bl	8001e18 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0b8      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd8:	4b40      	ldr	r3, [pc, #256]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ee      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fea:	4b3c      	ldr	r3, [pc, #240]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8002ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80a4 	beq.w	8003148 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003000:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d06b      	beq.n	80030e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d149      	bne.n	80030a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a30      	ldr	r2, [pc, #192]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 800301a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe fefa 	bl	8001e18 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7fe fef6 	bl	8001e18 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e087      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	4b28      	ldr	r3, [pc, #160]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	019b      	lsls	r3, r3, #6
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	4313      	orrs	r3, r2
 800306c:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 800306e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003072:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fe feca 	bl	8001e18 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fec6 	bl	8001e18 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e057      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x478>
 80030a6:	e04f      	b.n	8003148 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 80030ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe feb0 	bl	8001e18 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe feac 	bl	8001e18 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e03d      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_OscConfig+0x4cc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x4ac>
 80030da:	e035      	b.n	8003148 <HAL_RCC_OscConfig+0x538>
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x544>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d028      	beq.n	8003144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d121      	bne.n	8003144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d11a      	bne.n	8003144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003114:	4013      	ands	r3, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800311a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800311c:	4293      	cmp	r3, r2
 800311e:	d111      	bne.n	8003144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	085b      	lsrs	r3, r3, #1
 800312c:	3b01      	subs	r3, #1
 800312e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d107      	bne.n	8003144 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0d0      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003170:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d910      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317e:	4b67      	ldr	r3, [pc, #412]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 020f 	bic.w	r2, r3, #15
 8003186:	4965      	ldr	r1, [pc, #404]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318e:	4b63      	ldr	r3, [pc, #396]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0b8      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d020      	beq.n	80031ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b8:	4b59      	ldr	r3, [pc, #356]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a58      	ldr	r2, [pc, #352]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031d0:	4b53      	ldr	r3, [pc, #332]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80031d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031dc:	4b50      	ldr	r3, [pc, #320]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	494d      	ldr	r1, [pc, #308]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d040      	beq.n	800327c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b47      	ldr	r3, [pc, #284]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d115      	bne.n	800323a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e07f      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321a:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e073      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322a:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e06b      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323a:	4b39      	ldr	r3, [pc, #228]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4936      	ldr	r1, [pc, #216]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324c:	f7fe fde4 	bl	8001e18 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003254:	f7fe fde0 	bl	8001e18 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e053      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800327c:	4b27      	ldr	r3, [pc, #156]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d210      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 020f 	bic.w	r2, r3, #15
 8003292:	4922      	ldr	r1, [pc, #136]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b20      	ldr	r3, [pc, #128]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e032      	b.n	8003312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4916      	ldr	r1, [pc, #88]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	490e      	ldr	r1, [pc, #56]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ea:	f000 f821 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	490a      	ldr	r1, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x1cc>)
 80032fc:	5ccb      	ldrb	r3, [r1, r3]
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	4a09      	ldr	r2, [pc, #36]	; (8003328 <HAL_RCC_ClockConfig+0x1d0>)
 8003304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003306:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_ClockConfig+0x1d4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fd40 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023c00 	.word	0x40023c00
 8003320:	40023800 	.word	0x40023800
 8003324:	0800d34c 	.word	0x0800d34c
 8003328:	20000000 	.word	0x20000000
 800332c:	20000004 	.word	0x20000004

08003330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	b090      	sub	sp, #64	; 0x40
 8003336:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
 800333c:	2300      	movs	r3, #0
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003340:	2300      	movs	r3, #0
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003348:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d00d      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x40>
 8003354:	2b08      	cmp	r3, #8
 8003356:	f200 80a1 	bhi.w	800349c <HAL_RCC_GetSysClockFreq+0x16c>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0x34>
 800335e:	2b04      	cmp	r3, #4
 8003360:	d003      	beq.n	800336a <HAL_RCC_GetSysClockFreq+0x3a>
 8003362:	e09b      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003364:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003366:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003368:	e09b      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800336a:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800336e:	e098      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003370:	4b4f      	ldr	r3, [pc, #316]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003378:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800337a:	4b4d      	ldr	r3, [pc, #308]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d028      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003386:	4b4a      	ldr	r3, [pc, #296]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	099b      	lsrs	r3, r3, #6
 800338c:	2200      	movs	r2, #0
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	627a      	str	r2, [r7, #36]	; 0x24
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003398:	2100      	movs	r1, #0
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800339c:	fb03 f201 	mul.w	r2, r3, r1
 80033a0:	2300      	movs	r3, #0
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	4a43      	ldr	r2, [pc, #268]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033aa:	fba0 1202 	umull	r1, r2, r0, r2
 80033ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033b0:	460a      	mov	r2, r1
 80033b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80033b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b6:	4413      	add	r3, r2
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	2200      	movs	r2, #0
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	61fa      	str	r2, [r7, #28]
 80033c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033ca:	f7fd fc0d 	bl	8000be8 <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4613      	mov	r3, r2
 80033d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d6:	e053      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d8:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	2200      	movs	r2, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	617a      	str	r2, [r7, #20]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033ea:	f04f 0b00 	mov.w	fp, #0
 80033ee:	4652      	mov	r2, sl
 80033f0:	465b      	mov	r3, fp
 80033f2:	f04f 0000 	mov.w	r0, #0
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	0159      	lsls	r1, r3, #5
 80033fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003400:	0150      	lsls	r0, r2, #5
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	ebb2 080a 	subs.w	r8, r2, sl
 800340a:	eb63 090b 	sbc.w	r9, r3, fp
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800341a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800341e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003422:	ebb2 0408 	subs.w	r4, r2, r8
 8003426:	eb63 0509 	sbc.w	r5, r3, r9
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	00eb      	lsls	r3, r5, #3
 8003434:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003438:	00e2      	lsls	r2, r4, #3
 800343a:	4614      	mov	r4, r2
 800343c:	461d      	mov	r5, r3
 800343e:	eb14 030a 	adds.w	r3, r4, sl
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	eb45 030b 	adc.w	r3, r5, fp
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003456:	4629      	mov	r1, r5
 8003458:	028b      	lsls	r3, r1, #10
 800345a:	4621      	mov	r1, r4
 800345c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003460:	4621      	mov	r1, r4
 8003462:	028a      	lsls	r2, r1, #10
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346a:	2200      	movs	r2, #0
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	60fa      	str	r2, [r7, #12]
 8003470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003474:	f7fd fbb8 	bl	8000be8 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	3301      	adds	r3, #1
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003490:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800349a:	e002      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3740      	adds	r7, #64	; 0x40
 80034a8:	46bd      	mov	sp, r7
 80034aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	017d7840 	.word	0x017d7840

080034bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a9b      	lsrs	r3, r3, #10
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	0800d35c 	.word	0x0800d35c

080034fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003500:	f7ff ffdc 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0b5b      	lsrs	r3, r3, #13
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4903      	ldr	r1, [pc, #12]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	0800d35c 	.word	0x0800d35c

08003524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800354c:	4b69      	ldr	r3, [pc, #420]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a68      	ldr	r2, [pc, #416]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003556:	6093      	str	r3, [r2, #8]
 8003558:	4b66      	ldr	r3, [pc, #408]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003560:	4964      	ldr	r1, [pc, #400]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800356e:	2301      	movs	r3, #1
 8003570:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d017      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800357e:	4b5d      	ldr	r3, [pc, #372]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003584:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	4959      	ldr	r1, [pc, #356]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035aa:	2301      	movs	r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d017      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ba:	4b4e      	ldr	r3, [pc, #312]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	494a      	ldr	r1, [pc, #296]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d8:	d101      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035da:	2301      	movs	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 808b 	beq.w	800371e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b3a      	ldr	r3, [pc, #232]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	4a39      	ldr	r2, [pc, #228]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003612:	6413      	str	r3, [r2, #64]	; 0x40
 8003614:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a34      	ldr	r2, [pc, #208]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362c:	f7fe fbf4 	bl	8001e18 <HAL_GetTick>
 8003630:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003634:	f7fe fbf0 	bl	8001e18 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e357      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003646:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003652:	4b28      	ldr	r3, [pc, #160]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d035      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	429a      	cmp	r2, r3
 800366e:	d02e      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003670:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003678:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800367a:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	4a1d      	ldr	r2, [pc, #116]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	4a1a      	ldr	r2, [pc, #104]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003690:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003692:	4a18      	ldr	r2, [pc, #96]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003698:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d114      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fbb8 	bl	8001e18 <HAL_GetTick>
 80036a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fe fbb4 	bl	8001e18 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e319      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0ee      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036da:	d111      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036ea:	400b      	ands	r3, r1
 80036ec:	4901      	ldr	r1, [pc, #4]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
 80036f2:	e00b      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40007000 	.word	0x40007000
 80036fc:	0ffffcff 	.word	0x0ffffcff
 8003700:	4baa      	ldr	r3, [pc, #680]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4aa9      	ldr	r2, [pc, #676]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003706:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	4ba7      	ldr	r3, [pc, #668]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800370e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	49a4      	ldr	r1, [pc, #656]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371a:	4313      	orrs	r3, r2
 800371c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b00      	cmp	r3, #0
 8003728:	d010      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800372a:	4ba0      	ldr	r3, [pc, #640]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003730:	4a9e      	ldr	r2, [pc, #632]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003736:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800373a:	4b9c      	ldr	r3, [pc, #624]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800373c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	4999      	ldr	r1, [pc, #612]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003758:	4b94      	ldr	r3, [pc, #592]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003766:	4991      	ldr	r1, [pc, #580]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800377a:	4b8c      	ldr	r3, [pc, #560]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003788:	4988      	ldr	r1, [pc, #544]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800379c:	4b83      	ldr	r3, [pc, #524]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037aa:	4980      	ldr	r1, [pc, #512]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037be:	4b7b      	ldr	r3, [pc, #492]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4977      	ldr	r1, [pc, #476]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e0:	4b72      	ldr	r3, [pc, #456]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	496f      	ldr	r1, [pc, #444]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003802:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	f023 020c 	bic.w	r2, r3, #12
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003810:	4966      	ldr	r1, [pc, #408]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003824:	4b61      	ldr	r3, [pc, #388]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003832:	495e      	ldr	r1, [pc, #376]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003846:	4b59      	ldr	r3, [pc, #356]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003854:	4955      	ldr	r1, [pc, #340]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003876:	494d      	ldr	r1, [pc, #308]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800388a:	4b48      	ldr	r3, [pc, #288]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	4944      	ldr	r1, [pc, #272]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038ac:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	493c      	ldr	r1, [pc, #240]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038ce:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038dc:	4933      	ldr	r1, [pc, #204]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038f0:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038fe:	492b      	ldr	r1, [pc, #172]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d011      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003920:	4922      	ldr	r1, [pc, #136]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003922:	4313      	orrs	r3, r2
 8003924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800392c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003930:	d101      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003932:	2301      	movs	r3, #1
 8003934:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003942:	2301      	movs	r3, #1
 8003944:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003952:	4b16      	ldr	r3, [pc, #88]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003958:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003960:	4912      	ldr	r1, [pc, #72]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003984:	4909      	ldr	r1, [pc, #36]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d006      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80d9 	beq.w	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039a0:	4b02      	ldr	r3, [pc, #8]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a01      	ldr	r2, [pc, #4]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039aa:	e001      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039ac:	40023800 	.word	0x40023800
 80039b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b2:	f7fe fa31 	bl	8001e18 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ba:	f7fe fa2d 	bl	8001e18 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b64      	cmp	r3, #100	; 0x64
 80039c6:	d901      	bls.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e194      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039cc:	4b6c      	ldr	r3, [pc, #432]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f0      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d021      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d11d      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039ec:	4b64      	ldr	r3, [pc, #400]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039fa:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a00:	0e1b      	lsrs	r3, r3, #24
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	019a      	lsls	r2, r3, #6
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	431a      	orrs	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	061b      	lsls	r3, r3, #24
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	071b      	lsls	r3, r3, #28
 8003a20:	4957      	ldr	r1, [pc, #348]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02e      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a52:	d129      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a54:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a62:	4b47      	ldr	r3, [pc, #284]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a68:	0f1b      	lsrs	r3, r3, #28
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	019a      	lsls	r2, r3, #6
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	431a      	orrs	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	071b      	lsls	r3, r3, #28
 8003a88:	493d      	ldr	r1, [pc, #244]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a90:	4b3b      	ldr	r3, [pc, #236]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a96:	f023 021f 	bic.w	r2, r3, #31
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	4937      	ldr	r1, [pc, #220]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01d      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ab4:	4b32      	ldr	r3, [pc, #200]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aba:	0e1b      	lsrs	r3, r3, #24
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	0f1b      	lsrs	r3, r3, #28
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	019a      	lsls	r2, r3, #6
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	431a      	orrs	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	071b      	lsls	r3, r3, #28
 8003ae8:	4925      	ldr	r1, [pc, #148]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d011      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	019a      	lsls	r2, r3, #6
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	071b      	lsls	r3, r3, #28
 8003b18:	4919      	ldr	r1, [pc, #100]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b2c:	f7fe f974 	bl	8001e18 <HAL_GetTick>
 8003b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b34:	f7fe f970 	bl	8001e18 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e0d7      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	f040 80cd 	bne.w	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b66:	f7fe f957 	bl	8001e18 <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b6e:	f7fe f953 	bl	8001e18 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	; 0x64
 8003b7a:	d903      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0ba      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b84:	4b5e      	ldr	r3, [pc, #376]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b90:	d0ed      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d02e      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d12a      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bba:	4b51      	ldr	r3, [pc, #324]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	0c1b      	lsrs	r3, r3, #16
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bc8:	4b4d      	ldr	r3, [pc, #308]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	0f1b      	lsrs	r3, r3, #28
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	019a      	lsls	r2, r3, #6
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	061b      	lsls	r3, r3, #24
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	071b      	lsls	r3, r3, #28
 8003bee:	4944      	ldr	r1, [pc, #272]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003bf6:	4b42      	ldr	r3, [pc, #264]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bfc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	493d      	ldr	r1, [pc, #244]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d022      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c24:	d11d      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c26:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	0e1b      	lsrs	r3, r3, #24
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c34:	4b32      	ldr	r3, [pc, #200]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	0f1b      	lsrs	r3, r3, #28
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	019a      	lsls	r2, r3, #6
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	061b      	lsls	r3, r3, #24
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	4929      	ldr	r1, [pc, #164]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d028      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	0e1b      	lsrs	r3, r3, #24
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c7c:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	0c1b      	lsrs	r3, r3, #16
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	019a      	lsls	r2, r3, #6
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	431a      	orrs	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	061b      	lsls	r3, r3, #24
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	071b      	lsls	r3, r3, #28
 8003ca2:	4917      	ldr	r1, [pc, #92]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	4911      	ldr	r1, [pc, #68]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0e      	ldr	r2, [pc, #56]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ccc:	f7fe f8a4 	bl	8001e18 <HAL_GetTick>
 8003cd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cd4:	f7fe f8a0 	bl	8001e18 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e007      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf2:	d1ef      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800

08003d04 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e022      	b.n	8003d5c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fd fc1f 	bl	800156c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2203      	movs	r2, #3
 8003d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f814 	bl	8003d64 <HAL_SD_InitCard>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e00a      	b.n	8003d5c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d64:	b5b0      	push	{r4, r5, r7, lr}
 8003d66:	b08e      	sub	sp, #56	; 0x38
 8003d68:	af04      	add	r7, sp, #16
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003d80:	2376      	movs	r3, #118	; 0x76
 8003d82:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681d      	ldr	r5, [r3, #0]
 8003d88:	466c      	mov	r4, sp
 8003d8a:	f107 0314 	add.w	r3, r7, #20
 8003d8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d96:	f107 0308 	add.w	r3, r7, #8
 8003d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f002 fcc3 	bl	8006728 <SDMMC_Init>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e059      	b.n	8003e68 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f002 fcf7 	bl	80067bc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003dde:	2002      	movs	r0, #2
 8003de0:	f7fe f826 	bl	8001e30 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fff3 	bl	8004dd0 <SD_PowerON>
 8003dea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e02e      	b.n	8003e68 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 ff12 	bl	8004c34 <SD_InitCard>
 8003e10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00b      	beq.n	8003e30 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e01b      	b.n	8003e68 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f002 fd51 	bl	80068e0 <SDMMC_CmdBlockLength>
 8003e3e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00f      	beq.n	8003e66 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <HAL_SD_InitCard+0x10c>)
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3728      	adds	r7, #40	; 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e70:	004005ff 	.word	0x004005ff

08003e74 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08c      	sub	sp, #48	; 0x30
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0c3      	b.n	8004024 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	f040 80bc 	bne.w	8004022 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	441a      	add	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d907      	bls.n	8003ece <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0aa      	b.n	8004024 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003eec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a4e      	ldr	r2, [pc, #312]	; (800402c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a4d      	ldr	r2, [pc, #308]	; (8004030 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003efc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2200      	movs	r2, #0
 8003f04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3380      	adds	r3, #128	; 0x80
 8003f34:	4619      	mov	r1, r3
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	025b      	lsls	r3, r3, #9
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	f7fe f95b 	bl	80021f8 <HAL_DMA_Start_IT>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d017      	beq.n	8003f78 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a35      	ldr	r2, [pc, #212]	; (8004034 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e055      	b.n	8004024 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0208 	orr.w	r2, r2, #8
 8003f86:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d002      	beq.n	8003f96 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	025b      	lsls	r3, r3, #9
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	025b      	lsls	r3, r3, #9
 8003fa0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003fa2:	2390      	movs	r3, #144	; 0x90
 8003fa4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f107 0210 	add.w	r2, r7, #16
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f002 fc63 	bl	8006888 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d90a      	bls.n	8003fde <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2282      	movs	r2, #130	; 0x82
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f002 fcc7 	bl	8006968 <SDMMC_CmdReadMultiBlock>
 8003fda:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003fdc:	e009      	b.n	8003ff2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2281      	movs	r2, #129	; 0x81
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fea:	4618      	mov	r0, r3
 8003fec:	f002 fc9a 	bl	8006924 <SDMMC_CmdReadSingleBlock>
 8003ff0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0d      	ldr	r2, [pc, #52]	; (8004034 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004006:	431a      	orrs	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e002      	b.n	8004024 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	e000      	b.n	8004024 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3730      	adds	r7, #48	; 0x30
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	08004a43 	.word	0x08004a43
 8004030:	08004ab5 	.word	0x08004ab5
 8004034:	004005ff 	.word	0x004005ff

08004038 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08c      	sub	sp, #48	; 0x30
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d107      	bne.n	8004060 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0c6      	b.n	80041ee <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	f040 80bf 	bne.w	80041ec <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	441a      	add	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407e:	429a      	cmp	r2, r3
 8004080:	d907      	bls.n	8004092 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0ad      	b.n	80041ee <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2203      	movs	r2, #3
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2200      	movs	r2, #0
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 021a 	orr.w	r2, r2, #26
 80040b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	4a50      	ldr	r2, [pc, #320]	; (80041f8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80040b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	4a4f      	ldr	r2, [pc, #316]	; (80041fc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80040c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	2200      	movs	r2, #0
 80040c8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d002      	beq.n	80040d8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	025b      	lsls	r3, r3, #9
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d90a      	bls.n	80040f4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	22a0      	movs	r2, #160	; 0xa0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 fc80 	bl	80069f0 <SDMMC_CmdWriteMultiBlock>
 80040f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80040f2:	e009      	b.n	8004108 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2290      	movs	r2, #144	; 0x90
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004100:	4618      	mov	r0, r3
 8004102:	f002 fc53 	bl	80069ac <SDMMC_CmdWriteSingleBlock>
 8004106:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d012      	beq.n	8004134 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a3b      	ldr	r2, [pc, #236]	; (8004200 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004114:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	431a      	orrs	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e05c      	b.n	80041ee <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0208 	orr.w	r2, r2, #8
 8004142:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004148:	2240      	movs	r2, #64	; 0x40
 800414a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3380      	adds	r3, #128	; 0x80
 8004174:	461a      	mov	r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	025b      	lsls	r3, r3, #9
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	f7fe f83c 	bl	80021f8 <HAL_DMA_Start_IT>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01a      	beq.n	80041bc <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 021a 	bic.w	r2, r2, #26
 8004194:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800419c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e018      	b.n	80041ee <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041bc:	f04f 33ff 	mov.w	r3, #4294967295
 80041c0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	025b      	lsls	r3, r3, #9
 80041c6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80041c8:	2390      	movs	r3, #144	; 0x90
 80041ca:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80041d0:	2300      	movs	r3, #0
 80041d2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80041d4:	2301      	movs	r3, #1
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f107 0210 	add.w	r2, r7, #16
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f002 fb50 	bl	8006888 <SDMMC_ConfigData>

      return HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	e000      	b.n	80041ee <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3730      	adds	r7, #48	; 0x30
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	08004a19 	.word	0x08004a19
 80041fc:	08004ab5 	.word	0x08004ab5
 8004200:	004005ff 	.word	0x004005ff

08004204 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_SD_IRQHandler+0x2e>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 ffef 	bl	800520e <SD_Read_IT>
 8004230:	e15a      	b.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 808d 	beq.w	800435c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800424a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	4b9a      	ldr	r3, [pc, #616]	; (80044c0 <HAL_SD_IRQHandler+0x2bc>)
 8004258:	400b      	ands	r3, r1
 800425a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d039      	beq.n	80042ea <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d104      	bne.n	800428a <HAL_SD_IRQHandler+0x86>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d011      	beq.n	80042ae <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f002 fbd0 	bl	8006a34 <SDMMC_CmdStopTransfer>
 8004294:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f921 	bl	80044f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f240 523a 	movw	r2, #1338	; 0x53a
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <HAL_SD_IRQHandler+0xd6>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f003 f840 	bl	8007360 <HAL_SD_RxCpltCallback>
 80042e0:	e102      	b.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f003 f832 	bl	800734c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042e8:	e0fe      	b.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80f9 	beq.w	80044e8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d011      	beq.n	8004324 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f002 fb95 	bl	8006a34 <SDMMC_CmdStopTransfer>
 800430a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f8e6 	bl	80044f0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	f040 80dc 	bne.w	80044e8 <HAL_SD_IRQHandler+0x2e4>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 80d6 	bne.w	80044e8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0208 	bic.w	r2, r2, #8
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f002 fff9 	bl	800734c <HAL_SD_TxCpltCallback>
}
 800435a:	e0c5      	b.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_SD_IRQHandler+0x178>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 ff9b 	bl	80052b0 <SD_Write_IT>
 800437a:	e0b5      	b.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80ae 	beq.w	80044e8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	f043 0202 	orr.w	r2, r3, #2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	f043 0208 	orr.w	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	f043 0210 	orr.w	r2, r3, #16
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80043fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800440c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f002 fb0e 	bl	8006a34 <SDMMC_CmdStopTransfer>
 8004418:	4602      	mov	r2, r0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f857 	bl	80044f0 <HAL_SD_ErrorCallback>
}
 8004442:	e051      	b.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	d04c      	beq.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <HAL_SD_IRQHandler+0x25e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <HAL_SD_IRQHandler+0x2c0>)
 8004468:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	4618      	mov	r0, r3
 8004470:	f7fd ff22 	bl	80022b8 <HAL_DMA_Abort_IT>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d036      	beq.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fb6a 	bl	8004b58 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004484:	e030      	b.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_SD_IRQHandler+0x296>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d018      	beq.n	80044cc <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <HAL_SD_IRQHandler+0x2c4>)
 80044a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd ff06 	bl	80022b8 <HAL_DMA_Abort_IT>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01a      	beq.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fb85 	bl	8004bc6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80044bc:	e014      	b.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
 80044be:	bf00      	nop
 80044c0:	ffff3ec5 	.word	0xffff3ec5
 80044c4:	08004b59 	.word	0x08004b59
 80044c8:	08004bc7 	.word	0x08004bc7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f002 ff29 	bl	8007338 <HAL_SD_AbortCallback>
}
 80044e6:	e7ff      	b.n	80044e8 <HAL_SD_IRQHandler+0x2e4>
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004512:	0f9b      	lsrs	r3, r3, #30
 8004514:	b2da      	uxtb	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451e:	0e9b      	lsrs	r3, r3, #26
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	b2da      	uxtb	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004530:	0e1b      	lsrs	r3, r3, #24
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	b2da      	uxtb	r2, r3
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004542:	0c1b      	lsrs	r3, r3, #16
 8004544:	b2da      	uxtb	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454e:	0a1b      	lsrs	r3, r3, #8
 8004550:	b2da      	uxtb	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455a:	b2da      	uxtb	r2, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004564:	0d1b      	lsrs	r3, r3, #20
 8004566:	b29a      	uxth	r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	b2da      	uxtb	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004582:	0bdb      	lsrs	r3, r3, #15
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	b2da      	uxtb	r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004594:	0b9b      	lsrs	r3, r3, #14
 8004596:	b2db      	uxtb	r3, r3
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	b2da      	uxtb	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a6:	0b5b      	lsrs	r3, r3, #13
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b8:	0b1b      	lsrs	r3, r3, #12
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2200      	movs	r2, #0
 80045ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d163      	bne.n	800469c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d8:	009a      	lsls	r2, r3, #2
 80045da:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045de:	4013      	ands	r3, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80045e4:	0f92      	lsrs	r2, r2, #30
 80045e6:	431a      	orrs	r2, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f0:	0edb      	lsrs	r3, r3, #27
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004602:	0e1b      	lsrs	r3, r3, #24
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	b2da      	uxtb	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004614:	0d5b      	lsrs	r3, r3, #21
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	b2da      	uxtb	r2, r3
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004626:	0c9b      	lsrs	r3, r3, #18
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	b2da      	uxtb	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004638:	0bdb      	lsrs	r3, r3, #15
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	b2da      	uxtb	r2, r3
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	7e1b      	ldrb	r3, [r3, #24]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	3302      	adds	r3, #2
 800465c:	2201      	movs	r2, #1
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004666:	fb03 f202 	mul.w	r2, r3, r2
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	7a1b      	ldrb	r3, [r3, #8]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	2201      	movs	r2, #1
 800467a:	409a      	lsls	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004688:	0a52      	lsrs	r2, r2, #9
 800468a:	fb03 f202 	mul.w	r2, r3, r2
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004698:	661a      	str	r2, [r3, #96]	; 0x60
 800469a:	e031      	b.n	8004700 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d11d      	bne.n	80046e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	431a      	orrs	r2, r3
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	3301      	adds	r3, #1
 80046c0:	029a      	lsls	r2, r3, #10
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	661a      	str	r2, [r3, #96]	; 0x60
 80046de:	e00f      	b.n	8004700 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a58      	ldr	r2, [pc, #352]	; (8004848 <HAL_SD_GetCardCSD+0x344>)
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e09d      	b.n	800483c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004704:	0b9b      	lsrs	r3, r3, #14
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004716:	09db      	lsrs	r3, r3, #7
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471e:	b2da      	uxtb	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800472e:	b2da      	uxtb	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	0fdb      	lsrs	r3, r3, #31
 800473a:	b2da      	uxtb	r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	0f5b      	lsrs	r3, r3, #29
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	b2da      	uxtb	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	0e9b      	lsrs	r3, r3, #26
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	b2da      	uxtb	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	0d9b      	lsrs	r3, r3, #22
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	b2da      	uxtb	r2, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	0d5b      	lsrs	r3, r3, #21
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	b2da      	uxtb	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	0c1b      	lsrs	r3, r3, #16
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	0bdb      	lsrs	r3, r3, #15
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	0b9b      	lsrs	r3, r3, #14
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	0b5b      	lsrs	r3, r3, #13
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	0b1b      	lsrs	r3, r3, #12
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	0a9b      	lsrs	r3, r3, #10
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	b2da      	uxtb	r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	b2da      	uxtb	r2, r3
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482a:	b2da      	uxtb	r2, r3
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	004005ff 	.word	0x004005ff

0800484c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80048a4:	b5b0      	push	{r4, r5, r7, lr}
 80048a6:	b08e      	sub	sp, #56	; 0x38
 80048a8:	af04      	add	r7, sp, #16
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2203      	movs	r2, #3
 80048b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d02e      	beq.n	8004922 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d106      	bne.n	80048da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
 80048d8:	e029      	b.n	800492e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e0:	d10a      	bne.n	80048f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fb2a 	bl	8004f3c <SD_WideBus_Enable>
 80048e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	639a      	str	r2, [r3, #56]	; 0x38
 80048f6:	e01a      	b.n	800492e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fb67 	bl	8004fd2 <SD_WideBus_Disable>
 8004904:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
 8004912:	e00c      	b.n	800492e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
 8004920:	e005      	b.n	800492e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00b      	beq.n	800494e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800494c:	e01f      	b.n	800498e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681d      	ldr	r5, [r3, #0]
 8004974:	466c      	mov	r4, sp
 8004976:	f107 0314 	add.w	r3, r7, #20
 800497a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800497e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004982:	f107 0308 	add.w	r3, r7, #8
 8004986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004988:	4628      	mov	r0, r5
 800498a:	f001 fecd 	bl	8006728 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004996:	4618      	mov	r0, r3
 8004998:	f001 ffa2 	bl	80068e0 <SDMMC_CmdBlockLength>
 800499c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00c      	beq.n	80049be <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80049c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3728      	adds	r7, #40	; 0x28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bdb0      	pop	{r4, r5, r7, pc}
 80049d2:	bf00      	nop
 80049d4:	004005ff 	.word	0x004005ff

080049d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80049e4:	f107 030c 	add.w	r3, r7, #12
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa7e 	bl	8004eec <SD_SendStatus>
 80049f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	0a5b      	lsrs	r3, r3, #9
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004a0e:	693b      	ldr	r3, [r7, #16]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	2b82      	cmp	r3, #130	; 0x82
 8004a56:	d111      	bne.n	8004a7c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 ffe9 	bl	8006a34 <SDMMC_CmdStopTransfer>
 8004a62:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff fd3a 	bl	80044f0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0208 	bic.w	r2, r2, #8
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f002 fc5b 	bl	8007360 <HAL_SD_RxCpltCallback>
#endif
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fd fda4 	bl	8002610 <HAL_DMA_GetError>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d03e      	beq.n	8004b4c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004adc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d002      	beq.n	8004aea <SD_DMAError+0x36>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d12d      	bne.n	8004b46 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <SD_DMAError+0xa0>)
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004b00:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004b0e:	6978      	ldr	r0, [r7, #20]
 8004b10:	f7ff ff62 	bl	80049d8 <HAL_SD_GetCardState>
 8004b14:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b06      	cmp	r3, #6
 8004b1a:	d002      	beq.n	8004b22 <SD_DMAError+0x6e>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	d10a      	bne.n	8004b38 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 ff84 	bl	8006a34 <SDMMC_CmdStopTransfer>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	431a      	orrs	r2, r3
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004b46:	6978      	ldr	r0, [r7, #20]
 8004b48:	f7ff fcd2 	bl	80044f0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	004005ff 	.word	0x004005ff

08004b58 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7ff ff31 	bl	80049d8 <HAL_SD_GetCardState>
 8004b76:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b06      	cmp	r3, #6
 8004b8a:	d002      	beq.n	8004b92 <SD_DMATxAbort+0x3a>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d10a      	bne.n	8004ba8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 ff4c 	bl	8006a34 <SDMMC_CmdStopTransfer>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f002 fbc1 	bl	8007338 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004bb6:	e002      	b.n	8004bbe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff fc99 	bl	80044f0 <HAL_SD_ErrorCallback>
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f240 523a 	movw	r2, #1338	; 0x53a
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff fefa 	bl	80049d8 <HAL_SD_GetCardState>
 8004be4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b06      	cmp	r3, #6
 8004bf8:	d002      	beq.n	8004c00 <SD_DMARxAbort+0x3a>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b05      	cmp	r3, #5
 8004bfe:	d10a      	bne.n	8004c16 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 ff15 	bl	8006a34 <SDMMC_CmdStopTransfer>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	431a      	orrs	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d103      	bne.n	8004c26 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f002 fb8a 	bl	8007338 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004c24:	e002      	b.n	8004c2c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f7ff fc62 	bl	80044f0 <HAL_SD_ErrorCallback>
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004c34:	b5b0      	push	{r4, r5, r7, lr}
 8004c36:	b094      	sub	sp, #80	; 0x50
 8004c38:	af04      	add	r7, sp, #16
 8004c3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f001 fdc7 	bl	80067d8 <SDMMC_GetPowerState>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004c54:	e0b8      	b.n	8004dc8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d02f      	beq.n	8004cbe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 fff1 	bl	8006c4a <SDMMC_CmdSendCID>
 8004c68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <SD_InitCard+0x40>
    {
      return errorstate;
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	e0a9      	b.n	8004dc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f001 fdf1 	bl	8006862 <SDMMC_GetResponse>
 8004c80:	4602      	mov	r2, r0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2104      	movs	r1, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fde8 	bl	8006862 <SDMMC_GetResponse>
 8004c92:	4602      	mov	r2, r0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2108      	movs	r1, #8
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 fddf 	bl	8006862 <SDMMC_GetResponse>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	210c      	movs	r1, #12
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 fdd6 	bl	8006862 <SDMMC_GetResponse>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d00d      	beq.n	8004ce2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f107 020e 	add.w	r2, r7, #14
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 fff7 	bl	8006cc4 <SDMMC_CmdSetRelAdd>
 8004cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce0:	e072      	b.n	8004dc8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d036      	beq.n	8004d58 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004cea:	89fb      	ldrh	r3, [r7, #14]
 8004cec:	461a      	mov	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f001 ffc1 	bl	8006c86 <SDMMC_CmdSendCSD>
 8004d04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0e:	e05b      	b.n	8004dc8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 fda3 	bl	8006862 <SDMMC_GetResponse>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2104      	movs	r1, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 fd9a 	bl	8006862 <SDMMC_GetResponse>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2108      	movs	r1, #8
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 fd91 	bl	8006862 <SDMMC_GetResponse>
 8004d40:	4602      	mov	r2, r0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	210c      	movs	r1, #12
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 fd88 	bl	8006862 <SDMMC_GetResponse>
 8004d52:	4602      	mov	r2, r0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2104      	movs	r1, #4
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 fd7f 	bl	8006862 <SDMMC_GetResponse>
 8004d64:	4603      	mov	r3, r0
 8004d66:	0d1a      	lsrs	r2, r3, #20
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004d6c:	f107 0310 	add.w	r3, r7, #16
 8004d70:	4619      	mov	r1, r3
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fbc6 	bl	8004504 <HAL_SD_GetCardCSD>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d82:	e021      	b.n	8004dc8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6819      	ldr	r1, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	2200      	movs	r2, #0
 8004d90:	461c      	mov	r4, r3
 8004d92:	4615      	mov	r5, r2
 8004d94:	4622      	mov	r2, r4
 8004d96:	462b      	mov	r3, r5
 8004d98:	4608      	mov	r0, r1
 8004d9a:	f001 fe6d 	bl	8006a78 <SDMMC_CmdSelDesel>
 8004d9e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <SD_InitCard+0x176>
  {
    return errorstate;
 8004da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da8:	e00e      	b.n	8004dc8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681d      	ldr	r5, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	466c      	mov	r4, sp
 8004db2:	f103 0210 	add.w	r2, r3, #16
 8004db6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f001 fcb1 	bl	8006728 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3740      	adds	r7, #64	; 0x40
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bdb0      	pop	{r4, r5, r7, pc}

08004dd0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 fe68 	bl	8006abe <SDMMC_CmdGoIdleState>
 8004dee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <SD_PowerON+0x2a>
  {
    return errorstate;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	e072      	b.n	8004ee0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 fe7b 	bl	8006afa <SDMMC_CmdOperCond>
 8004e04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 fe51 	bl	8006abe <SDMMC_CmdGoIdleState>
 8004e1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d004      	beq.n	8004e2e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	e05b      	b.n	8004ee0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d137      	bne.n	8004ea6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 fe7b 	bl	8006b38 <SDMMC_CmdAppCommand>
 8004e42:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d02d      	beq.n	8004ea6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e4e:	e047      	b.n	8004ee0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 fe6e 	bl	8006b38 <SDMMC_CmdAppCommand>
 8004e5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <SD_PowerON+0x98>
    {
      return errorstate;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	e03b      	b.n	8004ee0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	491e      	ldr	r1, [pc, #120]	; (8004ee8 <SD_PowerON+0x118>)
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f001 fe84 	bl	8006b7c <SDMMC_CmdAppOperCommand>
 8004e74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e80:	e02e      	b.n	8004ee0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f001 fcea 	bl	8006862 <SDMMC_GetResponse>
 8004e8e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	0fdb      	lsrs	r3, r3, #31
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <SD_PowerON+0xcc>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <SD_PowerON+0xce>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]

    count++;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d802      	bhi.n	8004eb6 <SD_PowerON+0xe6>
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0cc      	beq.n	8004e50 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d902      	bls.n	8004ec6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ec4:	e00c      	b.n	8004ee0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
 8004ed6:	e002      	b.n	8004ede <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	c1100000 	.word	0xc1100000

08004eec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004efc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f00:	e018      	b.n	8004f34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f001 fef9 	bl	8006d06 <SDMMC_CmdSendStatus>
 8004f14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	e009      	b.n	8004f34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 fc9b 	bl	8006862 <SDMMC_GetResponse>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 fc85 	bl	8006862 <SDMMC_GetResponse>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f62:	d102      	bne.n	8004f6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f68:	e02f      	b.n	8004fca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004f6a:	f107 030c 	add.w	r3, r7, #12
 8004f6e:	4619      	mov	r1, r3
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f879 	bl	8005068 <SD_FindSCR>
 8004f76:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	e023      	b.n	8004fca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01c      	beq.n	8004fc6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f001 fdcd 	bl	8006b38 <SDMMC_CmdAppCommand>
 8004f9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	e00f      	b.n	8004fca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2102      	movs	r1, #2
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f001 fe07 	bl	8006bc4 <SDMMC_CmdBusWidth>
 8004fb6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	e003      	b.n	8004fca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e001      	b.n	8004fca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004fc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 fc3a 	bl	8006862 <SDMMC_GetResponse>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff8:	d102      	bne.n	8005000 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ffa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ffe:	e02f      	b.n	8005060 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005000:	f107 030c 	add.w	r3, r7, #12
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f82e 	bl	8005068 <SD_FindSCR>
 800500c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	e023      	b.n	8005060 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01c      	beq.n	800505c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f001 fd82 	bl	8006b38 <SDMMC_CmdAppCommand>
 8005034:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	e00f      	b.n	8005060 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2100      	movs	r1, #0
 8005046:	4618      	mov	r0, r3
 8005048:	f001 fdbc 	bl	8006bc4 <SDMMC_CmdBusWidth>
 800504c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	e003      	b.n	8005060 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005058:	2300      	movs	r3, #0
 800505a:	e001      	b.n	8005060 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800505c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b08f      	sub	sp, #60	; 0x3c
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005072:	f7fc fed1 	bl	8001e18 <HAL_GetTick>
 8005076:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800507c:	2300      	movs	r3, #0
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2108      	movs	r1, #8
 800508e:	4618      	mov	r0, r3
 8005090:	f001 fc26 	bl	80068e0 <SDMMC_CmdBlockLength>
 8005094:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	e0b2      	b.n	8005206 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f001 fd43 	bl	8006b38 <SDMMC_CmdAppCommand>
 80050b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <SD_FindSCR+0x56>
  {
    return errorstate;
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	e0a3      	b.n	8005206 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295
 80050c2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80050c4:	2308      	movs	r3, #8
 80050c6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80050c8:	2330      	movs	r3, #48	; 0x30
 80050ca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80050cc:	2302      	movs	r3, #2
 80050ce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f107 0210 	add.w	r2, r7, #16
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 fbd0 	bl	8006888 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 fd8b 	bl	8006c08 <SDMMC_CmdSendSCR>
 80050f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02a      	beq.n	8005150 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80050fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fc:	e083      	b.n	8005206 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00f      	beq.n	800512c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6819      	ldr	r1, [r3, #0]
 8005110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	f107 0208 	add.w	r2, r7, #8
 8005118:	18d4      	adds	r4, r2, r3
 800511a:	4608      	mov	r0, r1
 800511c:	f001 fb30 	bl	8006780 <SDMMC_ReadFIFO>
 8005120:	4603      	mov	r3, r0
 8005122:	6023      	str	r3, [r4, #0]
      index++;
 8005124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005126:	3301      	adds	r3, #1
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
 800512a:	e006      	b.n	800513a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d012      	beq.n	8005160 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800513a:	f7fc fe6d 	bl	8001e18 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d102      	bne.n	8005150 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800514a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800514e:	e05a      	b.n	8005206 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005156:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0cf      	beq.n	80050fe <SD_FindSCR+0x96>
 800515e:	e000      	b.n	8005162 <SD_FindSCR+0xfa>
      break;
 8005160:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2208      	movs	r2, #8
 8005176:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005178:	2308      	movs	r3, #8
 800517a:	e044      	b.n	8005206 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2202      	movs	r2, #2
 8005190:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005192:	2302      	movs	r3, #2
 8005194:	e037      	b.n	8005206 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2220      	movs	r2, #32
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80051ac:	2320      	movs	r3, #32
 80051ae:	e02a      	b.n	8005206 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f240 523a 	movw	r2, #1338	; 0x53a
 80051b8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	061a      	lsls	r2, r3, #24
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80051d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	0e1b      	lsrs	r3, r3, #24
 80051d6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	601a      	str	r2, [r3, #0]
    scr++;
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	3304      	adds	r3, #4
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	061a      	lsls	r2, r3, #24
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	0a1b      	lsrs	r3, r3, #8
 80051f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80051f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	0e1b      	lsrs	r3, r3, #24
 80051fe:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005202:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	373c      	adds	r7, #60	; 0x3c
 800520a:	46bd      	mov	sp, r7
 800520c:	bd90      	pop	{r4, r7, pc}

0800520e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d03f      	beq.n	80052a8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e033      	b.n	8005296 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f001 faa4 	bl	8006780 <SDMMC_ReadFIFO>
 8005238:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	b2da      	uxtb	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	3b01      	subs	r3, #1
 800524c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	b2da      	uxtb	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	3b01      	subs	r3, #1
 8005262:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	3b01      	subs	r3, #1
 8005278:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	0e1b      	lsrs	r3, r3, #24
 800527e:	b2da      	uxtb	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3301      	adds	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3b01      	subs	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3301      	adds	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b07      	cmp	r3, #7
 800529a:	d9c8      	bls.n	800522e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80052a8:	bf00      	nop
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d043      	beq.n	8005352 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	e037      	b.n	8005340 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	3b01      	subs	r3, #1
 80052e0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	021a      	lsls	r2, r3, #8
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60bb      	str	r3, [r7, #8]
      tmp++;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3301      	adds	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	041a      	lsls	r2, r3, #16
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4313      	orrs	r3, r2
 8005304:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3301      	adds	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	3b01      	subs	r3, #1
 8005310:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	061a      	lsls	r2, r3, #24
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4313      	orrs	r3, r2
 800531c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	3b01      	subs	r3, #1
 8005328:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f107 0208 	add.w	r2, r7, #8
 8005332:	4611      	mov	r1, r2
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fa30 	bl	800679a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	3301      	adds	r3, #1
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b07      	cmp	r3, #7
 8005344:	d9c4      	bls.n	80052d0 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005352:	bf00      	nop
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e049      	b.n	8005400 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7fc fc1b 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f000 fa6f 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e049      	b.n	80054ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fc fb78 	bl	8001b24 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f000 fa18 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d122      	bne.n	8005512 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d11b      	bne.n	8005512 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f06f 0202 	mvn.w	r2, #2
 80054e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f9a1 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 80054fe:	e005      	b.n	800550c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f993 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f9a4 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b04      	cmp	r3, #4
 800551e:	d122      	bne.n	8005566 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b04      	cmp	r3, #4
 800552c:	d11b      	bne.n	8005566 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0204 	mvn.w	r2, #4
 8005536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f977 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 8005552:	e005      	b.n	8005560 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f969 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f97a 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d122      	bne.n	80055ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b08      	cmp	r3, #8
 8005580:	d11b      	bne.n	80055ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f06f 0208 	mvn.w	r2, #8
 800558a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2204      	movs	r2, #4
 8005590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f94d 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 80055a6:	e005      	b.n	80055b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f93f 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f950 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d122      	bne.n	800560e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b10      	cmp	r3, #16
 80055d4:	d11b      	bne.n	800560e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f06f 0210 	mvn.w	r2, #16
 80055de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2208      	movs	r2, #8
 80055e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f923 	bl	8005840 <HAL_TIM_IC_CaptureCallback>
 80055fa:	e005      	b.n	8005608 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f915 	bl	800582c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f926 	bl	8005854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d10e      	bne.n	800563a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d107      	bne.n	800563a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f06f 0201 	mvn.w	r2, #1
 8005632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fb ff65 	bl	8001504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005644:	2b80      	cmp	r3, #128	; 0x80
 8005646:	d10e      	bne.n	8005666 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d107      	bne.n	8005666 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800565e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 fb6d 	bl	8005d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005674:	d10e      	bne.n	8005694 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d107      	bne.n	8005694 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fb60 	bl	8005d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d10e      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d107      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8d4 	bl	8005868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d10e      	bne.n	80056ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d107      	bne.n	80056ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0220 	mvn.w	r2, #32
 80056e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fb20 	bl	8005d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_TIM_IC_ConfigChannel+0x1e>
 800570e:	2302      	movs	r3, #2
 8005710:	e088      	b.n	8005824 <HAL_TIM_IC_ConfigChannel+0x130>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11b      	bne.n	8005758 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6819      	ldr	r1, [r3, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f000 f944 	bl	80059bc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 020c 	bic.w	r2, r2, #12
 8005742:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6999      	ldr	r1, [r3, #24]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	619a      	str	r2, [r3, #24]
 8005756:	e060      	b.n	800581a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d11c      	bne.n	8005798 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6818      	ldr	r0, [r3, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f000 f999 	bl	8005aa4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005780:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6999      	ldr	r1, [r3, #24]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	021a      	lsls	r2, r3, #8
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	619a      	str	r2, [r3, #24]
 8005796:	e040      	b.n	800581a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b08      	cmp	r3, #8
 800579c:	d11b      	bne.n	80057d6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6819      	ldr	r1, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f000 f9b6 	bl	8005b1e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 020c 	bic.w	r2, r2, #12
 80057c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69d9      	ldr	r1, [r3, #28]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	61da      	str	r2, [r3, #28]
 80057d4:	e021      	b.n	800581a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b0c      	cmp	r3, #12
 80057da:	d11c      	bne.n	8005816 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6819      	ldr	r1, [r3, #0]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f000 f9d3 	bl	8005b96 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69da      	ldr	r2, [r3, #28]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69d9      	ldr	r1, [r3, #28]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	021a      	lsls	r2, r3, #8
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	61da      	str	r2, [r3, #28]
 8005814:	e001      	b.n	800581a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005822:	7dfb      	ldrb	r3, [r7, #23]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a40      	ldr	r2, [pc, #256]	; (8005990 <TIM_Base_SetConfig+0x114>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589a:	d00f      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a3d      	ldr	r2, [pc, #244]	; (8005994 <TIM_Base_SetConfig+0x118>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00b      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a3c      	ldr	r2, [pc, #240]	; (8005998 <TIM_Base_SetConfig+0x11c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d007      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a3b      	ldr	r2, [pc, #236]	; (800599c <TIM_Base_SetConfig+0x120>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_Base_SetConfig+0x40>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a3a      	ldr	r2, [pc, #232]	; (80059a0 <TIM_Base_SetConfig+0x124>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d108      	bne.n	80058ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2f      	ldr	r2, [pc, #188]	; (8005990 <TIM_Base_SetConfig+0x114>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d02b      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058dc:	d027      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2c      	ldr	r2, [pc, #176]	; (8005994 <TIM_Base_SetConfig+0x118>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d023      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <TIM_Base_SetConfig+0x11c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d01f      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2a      	ldr	r2, [pc, #168]	; (800599c <TIM_Base_SetConfig+0x120>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01b      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a29      	ldr	r2, [pc, #164]	; (80059a0 <TIM_Base_SetConfig+0x124>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d017      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a28      	ldr	r2, [pc, #160]	; (80059a4 <TIM_Base_SetConfig+0x128>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a27      	ldr	r2, [pc, #156]	; (80059a8 <TIM_Base_SetConfig+0x12c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00f      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a26      	ldr	r2, [pc, #152]	; (80059ac <TIM_Base_SetConfig+0x130>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a25      	ldr	r2, [pc, #148]	; (80059b0 <TIM_Base_SetConfig+0x134>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d007      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a24      	ldr	r2, [pc, #144]	; (80059b4 <TIM_Base_SetConfig+0x138>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_Base_SetConfig+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a23      	ldr	r2, [pc, #140]	; (80059b8 <TIM_Base_SetConfig+0x13c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <TIM_Base_SetConfig+0x114>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_Base_SetConfig+0xf8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a0c      	ldr	r2, [pc, #48]	; (80059a0 <TIM_Base_SetConfig+0x124>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d103      	bne.n	800597c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	615a      	str	r2, [r3, #20]
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40010000 	.word	0x40010000
 8005994:	40000400 	.word	0x40000400
 8005998:	40000800 	.word	0x40000800
 800599c:	40000c00 	.word	0x40000c00
 80059a0:	40010400 	.word	0x40010400
 80059a4:	40014000 	.word	0x40014000
 80059a8:	40014400 	.word	0x40014400
 80059ac:	40014800 	.word	0x40014800
 80059b0:	40001800 	.word	0x40001800
 80059b4:	40001c00 	.word	0x40001c00
 80059b8:	40002000 	.word	0x40002000

080059bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	f023 0201 	bic.w	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a28      	ldr	r2, [pc, #160]	; (8005a88 <TIM_TI1_SetConfig+0xcc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01b      	beq.n	8005a22 <TIM_TI1_SetConfig+0x66>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f0:	d017      	beq.n	8005a22 <TIM_TI1_SetConfig+0x66>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4a25      	ldr	r2, [pc, #148]	; (8005a8c <TIM_TI1_SetConfig+0xd0>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <TIM_TI1_SetConfig+0x66>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <TIM_TI1_SetConfig+0xd4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00f      	beq.n	8005a22 <TIM_TI1_SetConfig+0x66>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <TIM_TI1_SetConfig+0xd8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00b      	beq.n	8005a22 <TIM_TI1_SetConfig+0x66>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <TIM_TI1_SetConfig+0xdc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d007      	beq.n	8005a22 <TIM_TI1_SetConfig+0x66>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <TIM_TI1_SetConfig+0xe0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_TI1_SetConfig+0x66>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <TIM_TI1_SetConfig+0xe4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d101      	bne.n	8005a26 <TIM_TI1_SetConfig+0x6a>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <TIM_TI1_SetConfig+0x6c>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0303 	bic.w	r3, r3, #3
 8005a32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e003      	b.n	8005a46 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f043 0301 	orr.w	r3, r3, #1
 8005a44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f023 030a 	bic.w	r3, r3, #10
 8005a60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f003 030a 	and.w	r3, r3, #10
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	40000c00 	.word	0x40000c00
 8005a98:	40010400 	.word	0x40010400
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	40001800 	.word	0x40001800

08005aa4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f023 0210 	bic.w	r2, r3, #16
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ae2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	031b      	lsls	r3, r3, #12
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b087      	sub	sp, #28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b087      	sub	sp, #28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	031b      	lsls	r3, r3, #12
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005be8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	621a      	str	r2, [r3, #32]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e06d      	b.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a30      	ldr	r2, [pc, #192]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d004      	beq.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a2f      	ldr	r2, [pc, #188]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d108      	bne.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9a:	d01d      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1d      	ldr	r2, [pc, #116]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a15      	ldr	r2, [pc, #84]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d10c      	bne.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40010400 	.word	0x40010400
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40000c00 	.word	0x40000c00
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40001800 	.word	0x40001800

08005d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e040      	b.n	8005dfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7fb ff6c 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2224      	movs	r2, #36	; 0x24
 8005d94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0201 	bic.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f8c0 	bl	8005f2c <UART_SetConfig>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e022      	b.n	8005dfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fb18 	bl	80063f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fb9f 	bl	8006538 <UART_CheckIdleState>
 8005dfa:	4603      	mov	r3, r0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08a      	sub	sp, #40	; 0x28
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	f040 8081 	bne.w	8005f20 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_UART_Transmit+0x26>
 8005e24:	88fb      	ldrh	r3, [r7, #6]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e079      	b.n	8005f22 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d101      	bne.n	8005e3c <HAL_UART_Transmit+0x38>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	e072      	b.n	8005f22 <HAL_UART_Transmit+0x11e>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2221      	movs	r2, #33	; 0x21
 8005e50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e52:	f7fb ffe1 	bl	8001e18 <HAL_GetTick>
 8005e56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	88fa      	ldrh	r2, [r7, #6]
 8005e5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	88fa      	ldrh	r2, [r7, #6]
 8005e64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e70:	d108      	bne.n	8005e84 <HAL_UART_Transmit+0x80>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d104      	bne.n	8005e84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	e003      	b.n	8005e8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005e94:	e02c      	b.n	8005ef0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fb7c 	bl	800659e <UART_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e038      	b.n	8005f22 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ec4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	61bb      	str	r3, [r7, #24]
 8005ecc:	e007      	b.n	8005ede <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	781a      	ldrb	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	3301      	adds	r3, #1
 8005edc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1cc      	bne.n	8005e96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2200      	movs	r2, #0
 8005f04:	2140      	movs	r1, #64	; 0x40
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fb49 	bl	800659e <UART_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e005      	b.n	8005f22 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e000      	b.n	8005f22 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005f20:	2302      	movs	r3, #2
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3720      	adds	r7, #32
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4ba6      	ldr	r3, [pc, #664]	; (80061f0 <UART_SetConfig+0x2c4>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a94      	ldr	r2, [pc, #592]	; (80061f4 <UART_SetConfig+0x2c8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d120      	bne.n	8005fea <UART_SetConfig+0xbe>
 8005fa8:	4b93      	ldr	r3, [pc, #588]	; (80061f8 <UART_SetConfig+0x2cc>)
 8005faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d816      	bhi.n	8005fe4 <UART_SetConfig+0xb8>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <UART_SetConfig+0x90>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08005fcd 	.word	0x08005fcd
 8005fc0:	08005fd9 	.word	0x08005fd9
 8005fc4:	08005fd3 	.word	0x08005fd3
 8005fc8:	08005fdf 	.word	0x08005fdf
 8005fcc:	2301      	movs	r3, #1
 8005fce:	77fb      	strb	r3, [r7, #31]
 8005fd0:	e150      	b.n	8006274 <UART_SetConfig+0x348>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e14d      	b.n	8006274 <UART_SetConfig+0x348>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	77fb      	strb	r3, [r7, #31]
 8005fdc:	e14a      	b.n	8006274 <UART_SetConfig+0x348>
 8005fde:	2308      	movs	r3, #8
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e147      	b.n	8006274 <UART_SetConfig+0x348>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e144      	b.n	8006274 <UART_SetConfig+0x348>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a83      	ldr	r2, [pc, #524]	; (80061fc <UART_SetConfig+0x2d0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d132      	bne.n	800605a <UART_SetConfig+0x12e>
 8005ff4:	4b80      	ldr	r3, [pc, #512]	; (80061f8 <UART_SetConfig+0x2cc>)
 8005ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	d828      	bhi.n	8006054 <UART_SetConfig+0x128>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <UART_SetConfig+0xdc>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	0800603d 	.word	0x0800603d
 800600c:	08006055 	.word	0x08006055
 8006010:	08006055 	.word	0x08006055
 8006014:	08006055 	.word	0x08006055
 8006018:	08006049 	.word	0x08006049
 800601c:	08006055 	.word	0x08006055
 8006020:	08006055 	.word	0x08006055
 8006024:	08006055 	.word	0x08006055
 8006028:	08006043 	.word	0x08006043
 800602c:	08006055 	.word	0x08006055
 8006030:	08006055 	.word	0x08006055
 8006034:	08006055 	.word	0x08006055
 8006038:	0800604f 	.word	0x0800604f
 800603c:	2300      	movs	r3, #0
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e118      	b.n	8006274 <UART_SetConfig+0x348>
 8006042:	2302      	movs	r3, #2
 8006044:	77fb      	strb	r3, [r7, #31]
 8006046:	e115      	b.n	8006274 <UART_SetConfig+0x348>
 8006048:	2304      	movs	r3, #4
 800604a:	77fb      	strb	r3, [r7, #31]
 800604c:	e112      	b.n	8006274 <UART_SetConfig+0x348>
 800604e:	2308      	movs	r3, #8
 8006050:	77fb      	strb	r3, [r7, #31]
 8006052:	e10f      	b.n	8006274 <UART_SetConfig+0x348>
 8006054:	2310      	movs	r3, #16
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e10c      	b.n	8006274 <UART_SetConfig+0x348>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a68      	ldr	r2, [pc, #416]	; (8006200 <UART_SetConfig+0x2d4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d120      	bne.n	80060a6 <UART_SetConfig+0x17a>
 8006064:	4b64      	ldr	r3, [pc, #400]	; (80061f8 <UART_SetConfig+0x2cc>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800606e:	2b30      	cmp	r3, #48	; 0x30
 8006070:	d013      	beq.n	800609a <UART_SetConfig+0x16e>
 8006072:	2b30      	cmp	r3, #48	; 0x30
 8006074:	d814      	bhi.n	80060a0 <UART_SetConfig+0x174>
 8006076:	2b20      	cmp	r3, #32
 8006078:	d009      	beq.n	800608e <UART_SetConfig+0x162>
 800607a:	2b20      	cmp	r3, #32
 800607c:	d810      	bhi.n	80060a0 <UART_SetConfig+0x174>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <UART_SetConfig+0x15c>
 8006082:	2b10      	cmp	r3, #16
 8006084:	d006      	beq.n	8006094 <UART_SetConfig+0x168>
 8006086:	e00b      	b.n	80060a0 <UART_SetConfig+0x174>
 8006088:	2300      	movs	r3, #0
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e0f2      	b.n	8006274 <UART_SetConfig+0x348>
 800608e:	2302      	movs	r3, #2
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e0ef      	b.n	8006274 <UART_SetConfig+0x348>
 8006094:	2304      	movs	r3, #4
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e0ec      	b.n	8006274 <UART_SetConfig+0x348>
 800609a:	2308      	movs	r3, #8
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e0e9      	b.n	8006274 <UART_SetConfig+0x348>
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e0e6      	b.n	8006274 <UART_SetConfig+0x348>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a56      	ldr	r2, [pc, #344]	; (8006204 <UART_SetConfig+0x2d8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d120      	bne.n	80060f2 <UART_SetConfig+0x1c6>
 80060b0:	4b51      	ldr	r3, [pc, #324]	; (80061f8 <UART_SetConfig+0x2cc>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060ba:	2bc0      	cmp	r3, #192	; 0xc0
 80060bc:	d013      	beq.n	80060e6 <UART_SetConfig+0x1ba>
 80060be:	2bc0      	cmp	r3, #192	; 0xc0
 80060c0:	d814      	bhi.n	80060ec <UART_SetConfig+0x1c0>
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d009      	beq.n	80060da <UART_SetConfig+0x1ae>
 80060c6:	2b80      	cmp	r3, #128	; 0x80
 80060c8:	d810      	bhi.n	80060ec <UART_SetConfig+0x1c0>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <UART_SetConfig+0x1a8>
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d006      	beq.n	80060e0 <UART_SetConfig+0x1b4>
 80060d2:	e00b      	b.n	80060ec <UART_SetConfig+0x1c0>
 80060d4:	2300      	movs	r3, #0
 80060d6:	77fb      	strb	r3, [r7, #31]
 80060d8:	e0cc      	b.n	8006274 <UART_SetConfig+0x348>
 80060da:	2302      	movs	r3, #2
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e0c9      	b.n	8006274 <UART_SetConfig+0x348>
 80060e0:	2304      	movs	r3, #4
 80060e2:	77fb      	strb	r3, [r7, #31]
 80060e4:	e0c6      	b.n	8006274 <UART_SetConfig+0x348>
 80060e6:	2308      	movs	r3, #8
 80060e8:	77fb      	strb	r3, [r7, #31]
 80060ea:	e0c3      	b.n	8006274 <UART_SetConfig+0x348>
 80060ec:	2310      	movs	r3, #16
 80060ee:	77fb      	strb	r3, [r7, #31]
 80060f0:	e0c0      	b.n	8006274 <UART_SetConfig+0x348>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a44      	ldr	r2, [pc, #272]	; (8006208 <UART_SetConfig+0x2dc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d125      	bne.n	8006148 <UART_SetConfig+0x21c>
 80060fc:	4b3e      	ldr	r3, [pc, #248]	; (80061f8 <UART_SetConfig+0x2cc>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800610a:	d017      	beq.n	800613c <UART_SetConfig+0x210>
 800610c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006110:	d817      	bhi.n	8006142 <UART_SetConfig+0x216>
 8006112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006116:	d00b      	beq.n	8006130 <UART_SetConfig+0x204>
 8006118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611c:	d811      	bhi.n	8006142 <UART_SetConfig+0x216>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <UART_SetConfig+0x1fe>
 8006122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006126:	d006      	beq.n	8006136 <UART_SetConfig+0x20a>
 8006128:	e00b      	b.n	8006142 <UART_SetConfig+0x216>
 800612a:	2300      	movs	r3, #0
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e0a1      	b.n	8006274 <UART_SetConfig+0x348>
 8006130:	2302      	movs	r3, #2
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e09e      	b.n	8006274 <UART_SetConfig+0x348>
 8006136:	2304      	movs	r3, #4
 8006138:	77fb      	strb	r3, [r7, #31]
 800613a:	e09b      	b.n	8006274 <UART_SetConfig+0x348>
 800613c:	2308      	movs	r3, #8
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e098      	b.n	8006274 <UART_SetConfig+0x348>
 8006142:	2310      	movs	r3, #16
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e095      	b.n	8006274 <UART_SetConfig+0x348>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2f      	ldr	r2, [pc, #188]	; (800620c <UART_SetConfig+0x2e0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d125      	bne.n	800619e <UART_SetConfig+0x272>
 8006152:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <UART_SetConfig+0x2cc>)
 8006154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006158:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800615c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006160:	d017      	beq.n	8006192 <UART_SetConfig+0x266>
 8006162:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006166:	d817      	bhi.n	8006198 <UART_SetConfig+0x26c>
 8006168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616c:	d00b      	beq.n	8006186 <UART_SetConfig+0x25a>
 800616e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006172:	d811      	bhi.n	8006198 <UART_SetConfig+0x26c>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <UART_SetConfig+0x254>
 8006178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617c:	d006      	beq.n	800618c <UART_SetConfig+0x260>
 800617e:	e00b      	b.n	8006198 <UART_SetConfig+0x26c>
 8006180:	2301      	movs	r3, #1
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e076      	b.n	8006274 <UART_SetConfig+0x348>
 8006186:	2302      	movs	r3, #2
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e073      	b.n	8006274 <UART_SetConfig+0x348>
 800618c:	2304      	movs	r3, #4
 800618e:	77fb      	strb	r3, [r7, #31]
 8006190:	e070      	b.n	8006274 <UART_SetConfig+0x348>
 8006192:	2308      	movs	r3, #8
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e06d      	b.n	8006274 <UART_SetConfig+0x348>
 8006198:	2310      	movs	r3, #16
 800619a:	77fb      	strb	r3, [r7, #31]
 800619c:	e06a      	b.n	8006274 <UART_SetConfig+0x348>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1b      	ldr	r2, [pc, #108]	; (8006210 <UART_SetConfig+0x2e4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d138      	bne.n	800621a <UART_SetConfig+0x2ee>
 80061a8:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <UART_SetConfig+0x2cc>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061b6:	d017      	beq.n	80061e8 <UART_SetConfig+0x2bc>
 80061b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061bc:	d82a      	bhi.n	8006214 <UART_SetConfig+0x2e8>
 80061be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c2:	d00b      	beq.n	80061dc <UART_SetConfig+0x2b0>
 80061c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c8:	d824      	bhi.n	8006214 <UART_SetConfig+0x2e8>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <UART_SetConfig+0x2aa>
 80061ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d2:	d006      	beq.n	80061e2 <UART_SetConfig+0x2b6>
 80061d4:	e01e      	b.n	8006214 <UART_SetConfig+0x2e8>
 80061d6:	2300      	movs	r3, #0
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e04b      	b.n	8006274 <UART_SetConfig+0x348>
 80061dc:	2302      	movs	r3, #2
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e048      	b.n	8006274 <UART_SetConfig+0x348>
 80061e2:	2304      	movs	r3, #4
 80061e4:	77fb      	strb	r3, [r7, #31]
 80061e6:	e045      	b.n	8006274 <UART_SetConfig+0x348>
 80061e8:	2308      	movs	r3, #8
 80061ea:	77fb      	strb	r3, [r7, #31]
 80061ec:	e042      	b.n	8006274 <UART_SetConfig+0x348>
 80061ee:	bf00      	nop
 80061f0:	efff69f3 	.word	0xefff69f3
 80061f4:	40011000 	.word	0x40011000
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40004400 	.word	0x40004400
 8006200:	40004800 	.word	0x40004800
 8006204:	40004c00 	.word	0x40004c00
 8006208:	40005000 	.word	0x40005000
 800620c:	40011400 	.word	0x40011400
 8006210:	40007800 	.word	0x40007800
 8006214:	2310      	movs	r3, #16
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e02c      	b.n	8006274 <UART_SetConfig+0x348>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a72      	ldr	r2, [pc, #456]	; (80063e8 <UART_SetConfig+0x4bc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d125      	bne.n	8006270 <UART_SetConfig+0x344>
 8006224:	4b71      	ldr	r3, [pc, #452]	; (80063ec <UART_SetConfig+0x4c0>)
 8006226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800622e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006232:	d017      	beq.n	8006264 <UART_SetConfig+0x338>
 8006234:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006238:	d817      	bhi.n	800626a <UART_SetConfig+0x33e>
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623e:	d00b      	beq.n	8006258 <UART_SetConfig+0x32c>
 8006240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006244:	d811      	bhi.n	800626a <UART_SetConfig+0x33e>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <UART_SetConfig+0x326>
 800624a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800624e:	d006      	beq.n	800625e <UART_SetConfig+0x332>
 8006250:	e00b      	b.n	800626a <UART_SetConfig+0x33e>
 8006252:	2300      	movs	r3, #0
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	e00d      	b.n	8006274 <UART_SetConfig+0x348>
 8006258:	2302      	movs	r3, #2
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e00a      	b.n	8006274 <UART_SetConfig+0x348>
 800625e:	2304      	movs	r3, #4
 8006260:	77fb      	strb	r3, [r7, #31]
 8006262:	e007      	b.n	8006274 <UART_SetConfig+0x348>
 8006264:	2308      	movs	r3, #8
 8006266:	77fb      	strb	r3, [r7, #31]
 8006268:	e004      	b.n	8006274 <UART_SetConfig+0x348>
 800626a:	2310      	movs	r3, #16
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e001      	b.n	8006274 <UART_SetConfig+0x348>
 8006270:	2310      	movs	r3, #16
 8006272:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627c:	d15b      	bne.n	8006336 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800627e:	7ffb      	ldrb	r3, [r7, #31]
 8006280:	2b08      	cmp	r3, #8
 8006282:	d828      	bhi.n	80062d6 <UART_SetConfig+0x3aa>
 8006284:	a201      	add	r2, pc, #4	; (adr r2, 800628c <UART_SetConfig+0x360>)
 8006286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628a:	bf00      	nop
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062c1 	.word	0x080062c1
 8006298:	080062d7 	.word	0x080062d7
 800629c:	080062c7 	.word	0x080062c7
 80062a0:	080062d7 	.word	0x080062d7
 80062a4:	080062d7 	.word	0x080062d7
 80062a8:	080062d7 	.word	0x080062d7
 80062ac:	080062cf 	.word	0x080062cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b0:	f7fd f910 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 80062b4:	61b8      	str	r0, [r7, #24]
        break;
 80062b6:	e013      	b.n	80062e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b8:	f7fd f920 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 80062bc:	61b8      	str	r0, [r7, #24]
        break;
 80062be:	e00f      	b.n	80062e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c0:	4b4b      	ldr	r3, [pc, #300]	; (80063f0 <UART_SetConfig+0x4c4>)
 80062c2:	61bb      	str	r3, [r7, #24]
        break;
 80062c4:	e00c      	b.n	80062e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c6:	f7fd f833 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 80062ca:	61b8      	str	r0, [r7, #24]
        break;
 80062cc:	e008      	b.n	80062e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d2:	61bb      	str	r3, [r7, #24]
        break;
 80062d4:	e004      	b.n	80062e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	77bb      	strb	r3, [r7, #30]
        break;
 80062de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d074      	beq.n	80063d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	005a      	lsls	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	441a      	add	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b0f      	cmp	r3, #15
 8006300:	d916      	bls.n	8006330 <UART_SetConfig+0x404>
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006308:	d212      	bcs.n	8006330 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f023 030f 	bic.w	r3, r3, #15
 8006312:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	b29b      	uxth	r3, r3
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	b29a      	uxth	r2, r3
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	4313      	orrs	r3, r2
 8006324:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	89fa      	ldrh	r2, [r7, #14]
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	e04f      	b.n	80063d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	77bb      	strb	r3, [r7, #30]
 8006334:	e04c      	b.n	80063d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006336:	7ffb      	ldrb	r3, [r7, #31]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d828      	bhi.n	800638e <UART_SetConfig+0x462>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <UART_SetConfig+0x418>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006369 	.word	0x08006369
 8006348:	08006371 	.word	0x08006371
 800634c:	08006379 	.word	0x08006379
 8006350:	0800638f 	.word	0x0800638f
 8006354:	0800637f 	.word	0x0800637f
 8006358:	0800638f 	.word	0x0800638f
 800635c:	0800638f 	.word	0x0800638f
 8006360:	0800638f 	.word	0x0800638f
 8006364:	08006387 	.word	0x08006387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006368:	f7fd f8b4 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 800636c:	61b8      	str	r0, [r7, #24]
        break;
 800636e:	e013      	b.n	8006398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006370:	f7fd f8c4 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 8006374:	61b8      	str	r0, [r7, #24]
        break;
 8006376:	e00f      	b.n	8006398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <UART_SetConfig+0x4c4>)
 800637a:	61bb      	str	r3, [r7, #24]
        break;
 800637c:	e00c      	b.n	8006398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637e:	f7fc ffd7 	bl	8003330 <HAL_RCC_GetSysClockFreq>
 8006382:	61b8      	str	r0, [r7, #24]
        break;
 8006384:	e008      	b.n	8006398 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800638a:	61bb      	str	r3, [r7, #24]
        break;
 800638c:	e004      	b.n	8006398 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	77bb      	strb	r3, [r7, #30]
        break;
 8006396:	bf00      	nop
    }

    if (pclk != 0U)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d018      	beq.n	80063d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085a      	lsrs	r2, r3, #1
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	441a      	add	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b0f      	cmp	r3, #15
 80063b6:	d909      	bls.n	80063cc <UART_SetConfig+0x4a0>
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d205      	bcs.n	80063cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60da      	str	r2, [r3, #12]
 80063ca:	e001      	b.n	80063d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	40007c00 	.word	0x40007c00
 80063ec:	40023800 	.word	0x40023800
 80063f0:	00f42400 	.word	0x00f42400

080063f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00a      	beq.n	800641e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f2:	d10a      	bne.n	800650a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006548:	f7fb fc66 	bl	8001e18 <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d10e      	bne.n	800657a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800655c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f817 	bl	800659e <UART_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e00d      	b.n	8006596 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b09c      	sub	sp, #112	; 0x70
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ae:	e0a5      	b.n	80066fc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b6:	f000 80a1 	beq.w	80066fc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ba:	f7fb fc2d 	bl	8001e18 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80065ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d13e      	bne.n	800664e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065e4:	667b      	str	r3, [r7, #100]	; 0x64
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e6      	bne.n	80065d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3308      	adds	r3, #8
 8006608:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	f023 0301 	bic.w	r3, r3, #1
 8006618:	663b      	str	r3, [r7, #96]	; 0x60
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3308      	adds	r3, #8
 8006620:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006622:	64ba      	str	r2, [r7, #72]	; 0x48
 8006624:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e5      	bne.n	8006602 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2220      	movs	r2, #32
 8006640:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e067      	b.n	800671e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d04f      	beq.n	80066fc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666a:	d147      	bne.n	80066fc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006674:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800668a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	461a      	mov	r2, r3
 8006692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
 8006696:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800669a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e6      	bne.n	8006676 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	613b      	str	r3, [r7, #16]
   return(result);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	66bb      	str	r3, [r7, #104]	; 0x68
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066c8:	623a      	str	r2, [r7, #32]
 80066ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	69f9      	ldr	r1, [r7, #28]
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e5      	bne.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2220      	movs	r2, #32
 80066e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e010      	b.n	800671e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4013      	ands	r3, r2
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	429a      	cmp	r2, r3
 800670a:	bf0c      	ite	eq
 800670c:	2301      	moveq	r3, #1
 800670e:	2300      	movne	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	461a      	mov	r2, r3
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	429a      	cmp	r2, r3
 8006718:	f43f af4a 	beq.w	80065b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3770      	adds	r7, #112	; 0x70
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
	...

08006728 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006728:	b084      	sub	sp, #16
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	f107 001c 	add.w	r0, r7, #28
 8006736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800673e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006740:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006742:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006746:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800674a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800674e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006752:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	4b07      	ldr	r3, [pc, #28]	; (800677c <SDMMC_Init+0x54>)
 8006760:	4013      	ands	r3, r2
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	b004      	add	sp, #16
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	ffff8100 	.word	0xffff8100

08006780 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2203      	movs	r2, #3
 80067c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0303 	and.w	r3, r3, #3
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006812:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006818:	431a      	orrs	r2, r3
                       Command->CPSM);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800681e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	4b06      	ldr	r3, [pc, #24]	; (8006844 <SDMMC_SendCommand+0x50>)
 800682c:	4013      	ands	r3, r2
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	fffff000 	.word	0xfffff000

08006848 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	b2db      	uxtb	r3, r3
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3314      	adds	r3, #20
 8006870:	461a      	mov	r2, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	4413      	add	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
}  
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068ae:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80068b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80068ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	4313      	orrs	r3, r2
 80068c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0

}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80068ee:	2310      	movs	r3, #16
 80068f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068f2:	2340      	movs	r3, #64	; 0x40
 80068f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006900:	f107 0308 	add.w	r3, r7, #8
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff ff74 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800690c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006910:	2110      	movs	r1, #16
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa1a 	bl	8006d4c <SDMMC_GetCmdResp1>
 8006918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800691a:	69fb      	ldr	r3, [r7, #28]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3720      	adds	r7, #32
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006932:	2311      	movs	r3, #17
 8006934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006936:	2340      	movs	r3, #64	; 0x40
 8006938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800693e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006942:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006944:	f107 0308 	add.w	r3, r7, #8
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff ff52 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006950:	f241 3288 	movw	r2, #5000	; 0x1388
 8006954:	2111      	movs	r1, #17
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f9f8 	bl	8006d4c <SDMMC_GetCmdResp1>
 800695c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800695e:	69fb      	ldr	r3, [r7, #28]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006976:	2312      	movs	r3, #18
 8006978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800697a:	2340      	movs	r3, #64	; 0x40
 800697c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006986:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006988:	f107 0308 	add.w	r3, r7, #8
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff ff30 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006994:	f241 3288 	movw	r2, #5000	; 0x1388
 8006998:	2112      	movs	r1, #18
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f9d6 	bl	8006d4c <SDMMC_GetCmdResp1>
 80069a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069a2:	69fb      	ldr	r3, [r7, #28]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80069ba:	2318      	movs	r3, #24
 80069bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80069be:	2340      	movs	r3, #64	; 0x40
 80069c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80069c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80069cc:	f107 0308 	add.w	r3, r7, #8
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff ff0e 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80069d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069dc:	2118      	movs	r1, #24
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9b4 	bl	8006d4c <SDMMC_GetCmdResp1>
 80069e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069e6:	69fb      	ldr	r3, [r7, #28]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80069fe:	2319      	movs	r3, #25
 8006a00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a02:	2340      	movs	r3, #64	; 0x40
 8006a04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a10:	f107 0308 	add.w	r3, r7, #8
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff feec 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8006a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a20:	2119      	movs	r1, #25
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f992 	bl	8006d4c <SDMMC_GetCmdResp1>
 8006a28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006a40:	230c      	movs	r3, #12
 8006a42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a52:	f107 0308 	add.w	r3, r7, #8
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff fecb 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8006a5e:	4a05      	ldr	r2, [pc, #20]	; (8006a74 <SDMMC_CmdStopTransfer+0x40>)
 8006a60:	210c      	movs	r1, #12
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f972 	bl	8006d4c <SDMMC_GetCmdResp1>
 8006a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	05f5e100 	.word	0x05f5e100

08006a78 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08a      	sub	sp, #40	; 0x28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006a88:	2307      	movs	r3, #7
 8006a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006a8c:	2340      	movs	r3, #64	; 0x40
 8006a8e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a98:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006a9a:	f107 0310 	add.w	r3, r7, #16
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff fea7 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aaa:	2107      	movs	r1, #7
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f94d 	bl	8006d4c <SDMMC_GetCmdResp1>
 8006ab2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3728      	adds	r7, #40	; 0x28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b088      	sub	sp, #32
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ada:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006adc:	f107 0308 	add.w	r3, r7, #8
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fe86 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fb67 	bl	80071bc <SDMMC_GetCmdError>
 8006aee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006af0:	69fb      	ldr	r3, [r7, #28]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3720      	adds	r7, #32
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b088      	sub	sp, #32
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006b02:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006b06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006b08:	2308      	movs	r3, #8
 8006b0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b1a:	f107 0308 	add.w	r3, r7, #8
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff fe67 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fafa 	bl	8007120 <SDMMC_GetCmdResp7>
 8006b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006b46:	2337      	movs	r3, #55	; 0x37
 8006b48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b4a:	2340      	movs	r3, #64	; 0x40
 8006b4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006b58:	f107 0308 	add.w	r3, r7, #8
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fe48 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b68:	2137      	movs	r1, #55	; 0x37
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f8ee 	bl	8006d4c <SDMMC_GetCmdResp1>
 8006b70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b72:	69fb      	ldr	r3, [r7, #28]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3720      	adds	r7, #32
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	4b0d      	ldr	r3, [pc, #52]	; (8006bc0 <SDMMC_CmdAppOperCommand+0x44>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006b8e:	2329      	movs	r3, #41	; 0x29
 8006b90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006b92:	2340      	movs	r3, #64	; 0x40
 8006b94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ba0:	f107 0308 	add.w	r3, r7, #8
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fe24 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fa03 	bl	8006fb8 <SDMMC_GetCmdResp3>
 8006bb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3720      	adds	r7, #32
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	80100000 	.word	0x80100000

08006bc4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006bd2:	2306      	movs	r3, #6
 8006bd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006bd6:	2340      	movs	r3, #64	; 0x40
 8006bd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006be4:	f107 0308 	add.w	r3, r7, #8
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff fe02 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf4:	2106      	movs	r1, #6
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f8a8 	bl	8006d4c <SDMMC_GetCmdResp1>
 8006bfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006c14:	2333      	movs	r3, #51	; 0x33
 8006c16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006c18:	2340      	movs	r3, #64	; 0x40
 8006c1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c26:	f107 0308 	add.w	r3, r7, #8
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fde1 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8006c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c36:	2133      	movs	r1, #51	; 0x33
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f887 	bl	8006d4c <SDMMC_GetCmdResp1>
 8006c3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c40:	69fb      	ldr	r3, [r7, #28]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3720      	adds	r7, #32
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b088      	sub	sp, #32
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006c56:	2302      	movs	r3, #2
 8006c58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006c5a:	23c0      	movs	r3, #192	; 0xc0
 8006c5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006c68:	f107 0308 	add.w	r3, r7, #8
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fdc0 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f957 	bl	8006f28 <SDMMC_GetCmdResp2>
 8006c7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b088      	sub	sp, #32
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006c94:	2309      	movs	r3, #9
 8006c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006c98:	23c0      	movs	r3, #192	; 0xc0
 8006c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ca6:	f107 0308 	add.w	r3, r7, #8
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff fda1 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f938 	bl	8006f28 <SDMMC_GetCmdResp2>
 8006cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cba:	69fb      	ldr	r3, [r7, #28]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3720      	adds	r7, #32
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b088      	sub	sp, #32
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006cd6:	2340      	movs	r3, #64	; 0x40
 8006cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006ce4:	f107 0308 	add.w	r3, r7, #8
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff fd82 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	2103      	movs	r1, #3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f99d 	bl	8007034 <SDMMC_GetCmdResp6>
 8006cfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b088      	sub	sp, #32
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006d14:	230d      	movs	r3, #13
 8006d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006d18:	2340      	movs	r3, #64	; 0x40
 8006d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006d26:	f107 0308 	add.w	r3, r7, #8
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff fd61 	bl	80067f4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8006d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d36:	210d      	movs	r1, #13
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f807 	bl	8006d4c <SDMMC_GetCmdResp1>
 8006d3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d40:	69fb      	ldr	r3, [r7, #28]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	460b      	mov	r3, r1
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006d5a:	4b70      	ldr	r3, [pc, #448]	; (8006f1c <SDMMC_GetCmdResp1+0x1d0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a70      	ldr	r2, [pc, #448]	; (8006f20 <SDMMC_GetCmdResp1+0x1d4>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	0a5a      	lsrs	r2, r3, #9
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	fb02 f303 	mul.w	r3, r2, r3
 8006d6c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	1e5a      	subs	r2, r3, #1
 8006d72:	61fa      	str	r2, [r7, #28]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d102      	bne.n	8006d7e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d7c:	e0c9      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0ef      	beq.n	8006d6e <SDMMC_GetCmdResp1+0x22>
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1ea      	bne.n	8006d6e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d004      	beq.n	8006dae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2204      	movs	r2, #4
 8006da8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006daa:	2304      	movs	r3, #4
 8006dac:	e0b1      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0a6      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	22c5      	movs	r2, #197	; 0xc5
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff fd3c 	bl	8006848 <SDMMC_GetCommandResponse>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d001      	beq.n	8006dde <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e099      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006dde:	2100      	movs	r1, #0
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7ff fd3e 	bl	8006862 <SDMMC_GetResponse>
 8006de6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4b4e      	ldr	r3, [pc, #312]	; (8006f24 <SDMMC_GetCmdResp1+0x1d8>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e08d      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da02      	bge.n	8006e02 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e00:	e087      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006e0c:	2340      	movs	r3, #64	; 0x40
 8006e0e:	e080      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006e1a:	2380      	movs	r3, #128	; 0x80
 8006e1c:	e079      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006e28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e2c:	e071      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e3c:	e069      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e4c:	e061      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e5c:	e059      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e6c:	e051      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e7c:	e049      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006e88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e8c:	e041      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e9c:	e039      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006eac:	e031      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006eb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ebc:	e029      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006ec8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ecc:	e021      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006ed8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006edc:	e019      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006eec:	e011      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006ef8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006efc:	e009      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006f08:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f0c:	e001      	b.n	8006f12 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3720      	adds	r7, #32
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000000 	.word	0x20000000
 8006f20:	10624dd3 	.word	0x10624dd3
 8006f24:	fdffe008 	.word	0xfdffe008

08006f28 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f30:	4b1f      	ldr	r3, [pc, #124]	; (8006fb0 <SDMMC_GetCmdResp2+0x88>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1f      	ldr	r2, [pc, #124]	; (8006fb4 <SDMMC_GetCmdResp2+0x8c>)
 8006f36:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3a:	0a5b      	lsrs	r3, r3, #9
 8006f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
 8006f44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	1e5a      	subs	r2, r3, #1
 8006f4a:	60fa      	str	r2, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f54:	e026      	b.n	8006fa4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0ef      	beq.n	8006f46 <SDMMC_GetCmdResp2+0x1e>
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1ea      	bne.n	8006f46 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2204      	movs	r2, #4
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f82:	2304      	movs	r3, #4
 8006f84:	e00e      	b.n	8006fa4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e003      	b.n	8006fa4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	22c5      	movs	r2, #197	; 0xc5
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	20000000 	.word	0x20000000
 8006fb4:	10624dd3 	.word	0x10624dd3

08006fb8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006fc0:	4b1a      	ldr	r3, [pc, #104]	; (800702c <SDMMC_GetCmdResp3+0x74>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <SDMMC_GetCmdResp3+0x78>)
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	0a5b      	lsrs	r3, r3, #9
 8006fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd0:	fb02 f303 	mul.w	r3, r2, r3
 8006fd4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1e5a      	subs	r2, r3, #1
 8006fda:	60fa      	str	r2, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d102      	bne.n	8006fe6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fe0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fe4:	e01b      	b.n	800701e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0ef      	beq.n	8006fd6 <SDMMC_GetCmdResp3+0x1e>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1ea      	bne.n	8006fd6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2204      	movs	r2, #4
 8007010:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007012:	2304      	movs	r3, #4
 8007014:	e003      	b.n	800701e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	22c5      	movs	r2, #197	; 0xc5
 800701a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000000 	.word	0x20000000
 8007030:	10624dd3 	.word	0x10624dd3

08007034 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	460b      	mov	r3, r1
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007042:	4b35      	ldr	r3, [pc, #212]	; (8007118 <SDMMC_GetCmdResp6+0xe4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a35      	ldr	r2, [pc, #212]	; (800711c <SDMMC_GetCmdResp6+0xe8>)
 8007048:	fba2 2303 	umull	r2, r3, r2, r3
 800704c:	0a5b      	lsrs	r3, r3, #9
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	1e5a      	subs	r2, r3, #1
 800705c:	61fa      	str	r2, [r7, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d102      	bne.n	8007068 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007062:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007066:	e052      	b.n	800710e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0ef      	beq.n	8007058 <SDMMC_GetCmdResp6+0x24>
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1ea      	bne.n	8007058 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d004      	beq.n	8007098 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2204      	movs	r2, #4
 8007092:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007094:	2304      	movs	r3, #4
 8007096:	e03a      	b.n	800710e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e02f      	b.n	800710e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f7ff fbca 	bl	8006848 <SDMMC_GetCommandResponse>
 80070b4:	4603      	mov	r3, r0
 80070b6:	461a      	mov	r2, r3
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d001      	beq.n	80070c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070be:	2301      	movs	r3, #1
 80070c0:	e025      	b.n	800710e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	22c5      	movs	r2, #197	; 0xc5
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80070c8:	2100      	movs	r1, #0
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff fbc9 	bl	8006862 <SDMMC_GetResponse>
 80070d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	0c1b      	lsrs	r3, r3, #16
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	e011      	b.n	800710e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070f8:	e009      	b.n	800710e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007108:	e001      	b.n	800710e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800710a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20000000 	.word	0x20000000
 800711c:	10624dd3 	.word	0x10624dd3

08007120 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007128:	4b22      	ldr	r3, [pc, #136]	; (80071b4 <SDMMC_GetCmdResp7+0x94>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a22      	ldr	r2, [pc, #136]	; (80071b8 <SDMMC_GetCmdResp7+0x98>)
 800712e:	fba2 2303 	umull	r2, r3, r2, r3
 8007132:	0a5b      	lsrs	r3, r3, #9
 8007134:	f241 3288 	movw	r2, #5000	; 0x1388
 8007138:	fb02 f303 	mul.w	r3, r2, r3
 800713c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1e5a      	subs	r2, r3, #1
 8007142:	60fa      	str	r2, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007148:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800714c:	e02c      	b.n	80071a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007152:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0ef      	beq.n	800713e <SDMMC_GetCmdResp7+0x1e>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1ea      	bne.n	800713e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2204      	movs	r2, #4
 8007178:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800717a:	2304      	movs	r3, #4
 800717c:	e014      	b.n	80071a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007190:	2301      	movs	r3, #1
 8007192:	e009      	b.n	80071a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2240      	movs	r2, #64	; 0x40
 80071a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80071a6:	2300      	movs	r3, #0
  
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	20000000 	.word	0x20000000
 80071b8:	10624dd3 	.word	0x10624dd3

080071bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071c4:	4b11      	ldr	r3, [pc, #68]	; (800720c <SDMMC_GetCmdError+0x50>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a11      	ldr	r2, [pc, #68]	; (8007210 <SDMMC_GetCmdError+0x54>)
 80071ca:	fba2 2303 	umull	r2, r3, r2, r3
 80071ce:	0a5b      	lsrs	r3, r3, #9
 80071d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d4:	fb02 f303 	mul.w	r3, r2, r3
 80071d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	1e5a      	subs	r2, r3, #1
 80071de:	60fa      	str	r2, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071e8:	e009      	b.n	80071fe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0f1      	beq.n	80071da <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	22c5      	movs	r2, #197	; 0xc5
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	20000000 	.word	0x20000000
 8007210:	10624dd3 	.word	0x10624dd3

08007214 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007218:	4904      	ldr	r1, [pc, #16]	; (800722c <MX_FATFS_Init+0x18>)
 800721a:	4805      	ldr	r0, [pc, #20]	; (8007230 <MX_FATFS_Init+0x1c>)
 800721c:	f003 f8e8 	bl	800a3f0 <FATFS_LinkDriver>
 8007220:	4603      	mov	r3, r0
 8007222:	461a      	mov	r2, r3
 8007224:	4b03      	ldr	r3, [pc, #12]	; (8007234 <MX_FATFS_Init+0x20>)
 8007226:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007228:	bf00      	nop
 800722a:	bd80      	pop	{r7, pc}
 800722c:	20000464 	.word	0x20000464
 8007230:	0800d36c 	.word	0x0800d36c
 8007234:	20000460 	.word	0x20000460

08007238 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800723c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800723e:	4618      	mov	r0, r3
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007252:	f000 f896 	bl	8007382 <BSP_SD_IsDetected>
 8007256:	4603      	mov	r3, r0
 8007258:	2b01      	cmp	r3, #1
 800725a:	d001      	beq.n	8007260 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800725c:	2302      	movs	r3, #2
 800725e:	e012      	b.n	8007286 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007260:	480b      	ldr	r0, [pc, #44]	; (8007290 <BSP_SD_Init+0x48>)
 8007262:	f7fc fd4f 	bl	8003d04 <HAL_SD_Init>
 8007266:	4603      	mov	r3, r0
 8007268:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007274:	4806      	ldr	r0, [pc, #24]	; (8007290 <BSP_SD_Init+0x48>)
 8007276:	f7fd fb15 	bl	80048a4 <HAL_SD_ConfigWideBusOperation>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007284:	79fb      	ldrb	r3, [r7, #7]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	200001f8 	.word	0x200001f8

08007294 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	68f9      	ldr	r1, [r7, #12]
 80072aa:	4806      	ldr	r0, [pc, #24]	; (80072c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80072ac:	f7fc fde2 	bl	8003e74 <HAL_SD_ReadBlocks_DMA>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	200001f8 	.word	0x200001f8

080072c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	68f9      	ldr	r1, [r7, #12]
 80072de:	4806      	ldr	r0, [pc, #24]	; (80072f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80072e0:	f7fc feaa 	bl	8004038 <HAL_SD_WriteBlocks_DMA>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	200001f8 	.word	0x200001f8

080072fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007300:	4805      	ldr	r0, [pc, #20]	; (8007318 <BSP_SD_GetCardState+0x1c>)
 8007302:	f7fd fb69 	bl	80049d8 <HAL_SD_GetCardState>
 8007306:	4603      	mov	r3, r0
 8007308:	2b04      	cmp	r3, #4
 800730a:	bf14      	ite	ne
 800730c:	2301      	movne	r3, #1
 800730e:	2300      	moveq	r3, #0
 8007310:	b2db      	uxtb	r3, r3
}
 8007312:	4618      	mov	r0, r3
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	200001f8 	.word	0x200001f8

0800731c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4803      	ldr	r0, [pc, #12]	; (8007334 <BSP_SD_GetCardInfo+0x18>)
 8007328:	f7fd fa90 	bl	800484c <HAL_SD_GetCardInfo>
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	200001f8 	.word	0x200001f8

08007338 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007340:	f000 f818 	bl	8007374 <BSP_SD_AbortCallback>
}
 8007344:	bf00      	nop
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007354:	f000 f9a8 	bl	80076a8 <BSP_SD_WriteCpltCallback>
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007368:	f000 f9aa 	bl	80076c0 <BSP_SD_ReadCpltCallback>
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0

}
 8007378:	bf00      	nop
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007388:	2301      	movs	r3, #1
 800738a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800738c:	f000 f80c 	bl	80073a8 <BSP_PlatformIsDetected>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d101      	bne.n	800739a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007396:	2300      	movs	r3, #0
 8007398:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	b2db      	uxtb	r3, r3
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80073ae:	2301      	movs	r3, #1
 80073b0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80073b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073b6:	4806      	ldr	r0, [pc, #24]	; (80073d0 <BSP_PlatformIsDetected+0x28>)
 80073b8:	f7fb fbc2 	bl	8002b40 <HAL_GPIO_ReadPin>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80073c2:	2300      	movs	r3, #0
 80073c4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80073c6:	79fb      	ldrb	r3, [r7, #7]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40020800 	.word	0x40020800

080073d4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80073dc:	f7fa fd1c 	bl	8001e18 <HAL_GetTick>
 80073e0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80073e2:	e006      	b.n	80073f2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80073e4:	f7ff ff8a 	bl	80072fc <BSP_SD_GetCardState>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	e009      	b.n	8007406 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80073f2:	f7fa fd11 	bl	8001e18 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d8f0      	bhi.n	80073e4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800741a:	4b0b      	ldr	r3, [pc, #44]	; (8007448 <SD_CheckStatus+0x38>)
 800741c:	2201      	movs	r2, #1
 800741e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007420:	f7ff ff6c 	bl	80072fc <BSP_SD_GetCardState>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <SD_CheckStatus+0x38>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	b2da      	uxtb	r2, r3
 8007436:	4b04      	ldr	r3, [pc, #16]	; (8007448 <SD_CheckStatus+0x38>)
 8007438:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800743a:	4b03      	ldr	r3, [pc, #12]	; (8007448 <SD_CheckStatus+0x38>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	b2db      	uxtb	r3, r3
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20000009 	.word	0x20000009

0800744c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	4603      	mov	r3, r0
 8007454:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007456:	f7ff fef7 	bl	8007248 <BSP_SD_Init>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d107      	bne.n	8007470 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff ffd4 	bl	8007410 <SD_CheckStatus>
 8007468:	4603      	mov	r3, r0
 800746a:	461a      	mov	r2, r3
 800746c:	4b04      	ldr	r3, [pc, #16]	; (8007480 <SD_initialize+0x34>)
 800746e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007470:	4b03      	ldr	r3, [pc, #12]	; (8007480 <SD_initialize+0x34>)
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	b2db      	uxtb	r3, r3
}
 8007476:	4618      	mov	r0, r3
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000009 	.word	0x20000009

08007484 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff ffbd 	bl	8007410 <SD_CheckStatus>
 8007496:	4603      	mov	r3, r0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80074b4:	f247 5030 	movw	r0, #30000	; 0x7530
 80074b8:	f7ff ff8c 	bl	80073d4 <SD_CheckStatusWithTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	da01      	bge.n	80074c6 <SD_read+0x26>
  {
    return res;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	e03b      	b.n	800753e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	68b8      	ldr	r0, [r7, #8]
 80074cc:	f7ff fee2 	bl	8007294 <BSP_SD_ReadBlocks_DMA>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d132      	bne.n	800753c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80074d6:	4b1c      	ldr	r3, [pc, #112]	; (8007548 <SD_read+0xa8>)
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80074dc:	f7fa fc9c 	bl	8001e18 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80074e2:	bf00      	nop
 80074e4:	4b18      	ldr	r3, [pc, #96]	; (8007548 <SD_read+0xa8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d108      	bne.n	80074fe <SD_read+0x5e>
 80074ec:	f7fa fc94 	bl	8001e18 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	f247 522f 	movw	r2, #29999	; 0x752f
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d9f2      	bls.n	80074e4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80074fe:	4b12      	ldr	r3, [pc, #72]	; (8007548 <SD_read+0xa8>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	75fb      	strb	r3, [r7, #23]
 800750a:	e017      	b.n	800753c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800750c:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <SD_read+0xa8>)
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007512:	f7fa fc81 	bl	8001e18 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007518:	e007      	b.n	800752a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800751a:	f7ff feef 	bl	80072fc <BSP_SD_GetCardState>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <SD_read+0x8a>
          {
            res = RES_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007528:	e008      	b.n	800753c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800752a:	f7fa fc75 	bl	8001e18 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	f247 522f 	movw	r2, #29999	; 0x752f
 8007538:	4293      	cmp	r3, r2
 800753a:	d9ee      	bls.n	800751a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800753c:	7dfb      	ldrb	r3, [r7, #23]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	200008cc 	.word	0x200008cc

0800754c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
 8007556:	603b      	str	r3, [r7, #0]
 8007558:	4603      	mov	r3, r0
 800755a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007560:	4b24      	ldr	r3, [pc, #144]	; (80075f4 <SD_write+0xa8>)
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007566:	f247 5030 	movw	r0, #30000	; 0x7530
 800756a:	f7ff ff33 	bl	80073d4 <SD_CheckStatusWithTimeout>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	da01      	bge.n	8007578 <SD_write+0x2c>
  {
    return res;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	e038      	b.n	80075ea <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	68b8      	ldr	r0, [r7, #8]
 800757e:	f7ff fea3 	bl	80072c8 <BSP_SD_WriteBlocks_DMA>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d12f      	bne.n	80075e8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007588:	f7fa fc46 	bl	8001e18 <HAL_GetTick>
 800758c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800758e:	bf00      	nop
 8007590:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <SD_write+0xa8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d108      	bne.n	80075aa <SD_write+0x5e>
 8007598:	f7fa fc3e 	bl	8001e18 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f247 522f 	movw	r2, #29999	; 0x752f
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d9f2      	bls.n	8007590 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <SD_write+0xa8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	75fb      	strb	r3, [r7, #23]
 80075b6:	e017      	b.n	80075e8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80075b8:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <SD_write+0xa8>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80075be:	f7fa fc2b 	bl	8001e18 <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80075c4:	e007      	b.n	80075d6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80075c6:	f7ff fe99 	bl	80072fc <BSP_SD_GetCardState>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d102      	bne.n	80075d6 <SD_write+0x8a>
          {
            res = RES_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	75fb      	strb	r3, [r7, #23]
            break;
 80075d4:	e008      	b.n	80075e8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80075d6:	f7fa fc1f 	bl	8001e18 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d9ee      	bls.n	80075c6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	200008c8 	.word	0x200008c8

080075f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08c      	sub	sp, #48	; 0x30
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	603a      	str	r2, [r7, #0]
 8007602:	71fb      	strb	r3, [r7, #7]
 8007604:	460b      	mov	r3, r1
 8007606:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800760e:	4b25      	ldr	r3, [pc, #148]	; (80076a4 <SD_ioctl+0xac>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <SD_ioctl+0x28>
 800761c:	2303      	movs	r3, #3
 800761e:	e03c      	b.n	800769a <SD_ioctl+0xa2>

  switch (cmd)
 8007620:	79bb      	ldrb	r3, [r7, #6]
 8007622:	2b03      	cmp	r3, #3
 8007624:	d834      	bhi.n	8007690 <SD_ioctl+0x98>
 8007626:	a201      	add	r2, pc, #4	; (adr r2, 800762c <SD_ioctl+0x34>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	0800763d 	.word	0x0800763d
 8007630:	08007645 	.word	0x08007645
 8007634:	0800765d 	.word	0x0800765d
 8007638:	08007677 	.word	0x08007677
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007642:	e028      	b.n	8007696 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007644:	f107 030c 	add.w	r3, r7, #12
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff fe67 	bl	800731c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800764e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800765a:	e01c      	b.n	8007696 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800765c:	f107 030c 	add.w	r3, r7, #12
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fe5b 	bl	800731c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	b29a      	uxth	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007674:	e00f      	b.n	8007696 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007676:	f107 030c 	add.w	r3, r7, #12
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fe4e 	bl	800731c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	0a5a      	lsrs	r2, r3, #9
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800768e:	e002      	b.n	8007696 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007690:	2304      	movs	r3, #4
 8007692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800769a:	4618      	mov	r0, r3
 800769c:	3730      	adds	r7, #48	; 0x30
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20000009 	.word	0x20000009

080076a8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80076ac:	4b03      	ldr	r3, [pc, #12]	; (80076bc <BSP_SD_WriteCpltCallback+0x14>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
}
 80076b2:	bf00      	nop
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	200008c8 	.word	0x200008c8

080076c0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80076c4:	4b03      	ldr	r3, [pc, #12]	; (80076d4 <BSP_SD_ReadCpltCallback+0x14>)
 80076c6:	2201      	movs	r2, #1
 80076c8:	601a      	str	r2, [r3, #0]
}
 80076ca:	bf00      	nop
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	200008cc 	.word	0x200008cc

080076d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	4a08      	ldr	r2, [pc, #32]	; (8007708 <disk_status+0x30>)
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	4413      	add	r3, r2
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	79fa      	ldrb	r2, [r7, #7]
 80076f0:	4905      	ldr	r1, [pc, #20]	; (8007708 <disk_status+0x30>)
 80076f2:	440a      	add	r2, r1
 80076f4:	7a12      	ldrb	r2, [r2, #8]
 80076f6:	4610      	mov	r0, r2
 80076f8:	4798      	blx	r3
 80076fa:	4603      	mov	r3, r0
 80076fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	200008f8 	.word	0x200008f8

0800770c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800771a:	79fb      	ldrb	r3, [r7, #7]
 800771c:	4a0d      	ldr	r2, [pc, #52]	; (8007754 <disk_initialize+0x48>)
 800771e:	5cd3      	ldrb	r3, [r2, r3]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d111      	bne.n	8007748 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	4a0b      	ldr	r2, [pc, #44]	; (8007754 <disk_initialize+0x48>)
 8007728:	2101      	movs	r1, #1
 800772a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <disk_initialize+0x48>)
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	79fa      	ldrb	r2, [r7, #7]
 800773a:	4906      	ldr	r1, [pc, #24]	; (8007754 <disk_initialize+0x48>)
 800773c:	440a      	add	r2, r1
 800773e:	7a12      	ldrb	r2, [r2, #8]
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007748:	7bfb      	ldrb	r3, [r7, #15]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	200008f8 	.word	0x200008f8

08007758 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007758:	b590      	push	{r4, r7, lr}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	607a      	str	r2, [r7, #4]
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	4a0a      	ldr	r2, [pc, #40]	; (8007794 <disk_read+0x3c>)
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	689c      	ldr	r4, [r3, #8]
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	4a07      	ldr	r2, [pc, #28]	; (8007794 <disk_read+0x3c>)
 8007778:	4413      	add	r3, r2
 800777a:	7a18      	ldrb	r0, [r3, #8]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	47a0      	blx	r4
 8007784:	4603      	mov	r3, r0
 8007786:	75fb      	strb	r3, [r7, #23]
  return res;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
}
 800778a:	4618      	mov	r0, r3
 800778c:	371c      	adds	r7, #28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd90      	pop	{r4, r7, pc}
 8007792:	bf00      	nop
 8007794:	200008f8 	.word	0x200008f8

08007798 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007798:	b590      	push	{r4, r7, lr}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	4603      	mov	r3, r0
 80077a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	4a0a      	ldr	r2, [pc, #40]	; (80077d4 <disk_write+0x3c>)
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	68dc      	ldr	r4, [r3, #12]
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	4a07      	ldr	r2, [pc, #28]	; (80077d4 <disk_write+0x3c>)
 80077b8:	4413      	add	r3, r2
 80077ba:	7a18      	ldrb	r0, [r3, #8]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	47a0      	blx	r4
 80077c4:	4603      	mov	r3, r0
 80077c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd90      	pop	{r4, r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200008f8 	.word	0x200008f8

080077d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	603a      	str	r2, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
 80077e4:	460b      	mov	r3, r1
 80077e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	4a09      	ldr	r2, [pc, #36]	; (8007810 <disk_ioctl+0x38>)
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	79fa      	ldrb	r2, [r7, #7]
 80077f6:	4906      	ldr	r1, [pc, #24]	; (8007810 <disk_ioctl+0x38>)
 80077f8:	440a      	add	r2, r1
 80077fa:	7a10      	ldrb	r0, [r2, #8]
 80077fc:	79b9      	ldrb	r1, [r7, #6]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	4798      	blx	r3
 8007802:	4603      	mov	r3, r0
 8007804:	73fb      	strb	r3, [r7, #15]
  return res;
 8007806:	7bfb      	ldrb	r3, [r7, #15]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	200008f8 	.word	0x200008f8

08007814 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3301      	adds	r3, #1
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007824:	89fb      	ldrh	r3, [r7, #14]
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	b21a      	sxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b21b      	sxth	r3, r3
 8007830:	4313      	orrs	r3, r2
 8007832:	b21b      	sxth	r3, r3
 8007834:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007836:	89fb      	ldrh	r3, [r7, #14]
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3303      	adds	r3, #3
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	3202      	adds	r2, #2
 800785c:	7812      	ldrb	r2, [r2, #0]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	3201      	adds	r2, #1
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	7812      	ldrb	r2, [r2, #0]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
	return rv;
 800787c:	68fb      	ldr	r3, [r7, #12]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800788a:	b480      	push	{r7}
 800788c:	b083      	sub	sp, #12
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	887a      	ldrh	r2, [r7, #2]
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	887b      	ldrh	r3, [r7, #2]
 80078a4:	0a1b      	lsrs	r3, r3, #8
 80078a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	887a      	ldrh	r2, [r7, #2]
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	701a      	strb	r2, [r3, #0]
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	0a1b      	lsrs	r3, r3, #8
 80078da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	0a1b      	lsrs	r3, r3, #8
 80078ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	0a1b      	lsrs	r3, r3, #8
 80078fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00d      	beq.n	800794e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	1c53      	adds	r3, r2, #1
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	1c59      	adds	r1, r3, #1
 800793c:	6179      	str	r1, [r7, #20]
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3b01      	subs	r3, #1
 8007946:	607b      	str	r3, [r7, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f1      	bne.n	8007932 <mem_cpy+0x1a>
	}
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800795a:	b480      	push	{r7}
 800795c:	b087      	sub	sp, #28
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	1c5a      	adds	r2, r3, #1
 800796e:	617a      	str	r2, [r7, #20]
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	607b      	str	r3, [r7, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f3      	bne.n	800796a <mem_set+0x10>
}
 8007982:	bf00      	nop
 8007984:	bf00      	nop
 8007986:	371c      	adds	r7, #28
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007990:	b480      	push	{r7}
 8007992:	b089      	sub	sp, #36	; 0x24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	61fa      	str	r2, [r7, #28]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	4619      	mov	r1, r3
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	61ba      	str	r2, [r7, #24]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	1acb      	subs	r3, r1, r3
 80079bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	607b      	str	r3, [r7, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <mem_cmp+0x40>
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0eb      	beq.n	80079a8 <mem_cmp+0x18>

	return r;
 80079d0:	697b      	ldr	r3, [r7, #20]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3724      	adds	r7, #36	; 0x24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80079e8:	e002      	b.n	80079f0 <chk_chr+0x12>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3301      	adds	r3, #1
 80079ee:	607b      	str	r3, [r7, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d005      	beq.n	8007a04 <chk_chr+0x26>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d1f2      	bne.n	80079ea <chk_chr+0xc>
	return *str;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	781b      	ldrb	r3, [r3, #0]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60bb      	str	r3, [r7, #8]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	e029      	b.n	8007a7c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007a28:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <chk_lock+0xb4>)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	4413      	add	r3, r2
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01d      	beq.n	8007a72 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007a36:	4a24      	ldr	r2, [pc, #144]	; (8007ac8 <chk_lock+0xb4>)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	4413      	add	r3, r2
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d116      	bne.n	8007a76 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007a48:	4a1f      	ldr	r2, [pc, #124]	; (8007ac8 <chk_lock+0xb4>)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	4413      	add	r3, r2
 8007a50:	3304      	adds	r3, #4
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d10c      	bne.n	8007a76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007a5c:	4a1a      	ldr	r2, [pc, #104]	; (8007ac8 <chk_lock+0xb4>)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	4413      	add	r3, r2
 8007a64:	3308      	adds	r3, #8
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d102      	bne.n	8007a76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007a70:	e007      	b.n	8007a82 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007a72:	2301      	movs	r3, #1
 8007a74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d9d2      	bls.n	8007a28 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d109      	bne.n	8007a9c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <chk_lock+0x80>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d101      	bne.n	8007a98 <chk_lock+0x84>
 8007a94:	2300      	movs	r3, #0
 8007a96:	e010      	b.n	8007aba <chk_lock+0xa6>
 8007a98:	2312      	movs	r3, #18
 8007a9a:	e00e      	b.n	8007aba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d108      	bne.n	8007ab4 <chk_lock+0xa0>
 8007aa2:	4a09      	ldr	r2, [pc, #36]	; (8007ac8 <chk_lock+0xb4>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	4413      	add	r3, r2
 8007aaa:	330c      	adds	r3, #12
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ab2:	d101      	bne.n	8007ab8 <chk_lock+0xa4>
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	e000      	b.n	8007aba <chk_lock+0xa6>
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	200008d8 	.word	0x200008d8

08007acc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	607b      	str	r3, [r7, #4]
 8007ad6:	e002      	b.n	8007ade <enq_lock+0x12>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3301      	adds	r3, #1
 8007adc:	607b      	str	r3, [r7, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d806      	bhi.n	8007af2 <enq_lock+0x26>
 8007ae4:	4a09      	ldr	r2, [pc, #36]	; (8007b0c <enq_lock+0x40>)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	4413      	add	r3, r2
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1f2      	bne.n	8007ad8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	bf14      	ite	ne
 8007af8:	2301      	movne	r3, #1
 8007afa:	2300      	moveq	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	200008d8 	.word	0x200008d8

08007b10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	e01f      	b.n	8007b60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007b20:	4a41      	ldr	r2, [pc, #260]	; (8007c28 <inc_lock+0x118>)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	011b      	lsls	r3, r3, #4
 8007b26:	4413      	add	r3, r2
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d113      	bne.n	8007b5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007b32:	4a3d      	ldr	r2, [pc, #244]	; (8007c28 <inc_lock+0x118>)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	011b      	lsls	r3, r3, #4
 8007b38:	4413      	add	r3, r2
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d109      	bne.n	8007b5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007b46:	4a38      	ldr	r2, [pc, #224]	; (8007c28 <inc_lock+0x118>)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	4413      	add	r3, r2
 8007b4e:	3308      	adds	r3, #8
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d006      	beq.n	8007b68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d9dc      	bls.n	8007b20 <inc_lock+0x10>
 8007b66:	e000      	b.n	8007b6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007b68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d132      	bne.n	8007bd6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	e002      	b.n	8007b7c <inc_lock+0x6c>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d806      	bhi.n	8007b90 <inc_lock+0x80>
 8007b82:	4a29      	ldr	r2, [pc, #164]	; (8007c28 <inc_lock+0x118>)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	4413      	add	r3, r2
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1f2      	bne.n	8007b76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d101      	bne.n	8007b9a <inc_lock+0x8a>
 8007b96:	2300      	movs	r3, #0
 8007b98:	e040      	b.n	8007c1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4922      	ldr	r1, [pc, #136]	; (8007c28 <inc_lock+0x118>)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	440b      	add	r3, r1
 8007ba6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	491e      	ldr	r1, [pc, #120]	; (8007c28 <inc_lock+0x118>)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	440b      	add	r3, r1
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	491a      	ldr	r1, [pc, #104]	; (8007c28 <inc_lock+0x118>)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007bc8:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <inc_lock+0x118>)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	4413      	add	r3, r2
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d009      	beq.n	8007bf0 <inc_lock+0xe0>
 8007bdc:	4a12      	ldr	r2, [pc, #72]	; (8007c28 <inc_lock+0x118>)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	4413      	add	r3, r2
 8007be4:	330c      	adds	r3, #12
 8007be6:	881b      	ldrh	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <inc_lock+0xe0>
 8007bec:	2300      	movs	r3, #0
 8007bee:	e015      	b.n	8007c1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d108      	bne.n	8007c08 <inc_lock+0xf8>
 8007bf6:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <inc_lock+0x118>)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	4413      	add	r3, r2
 8007bfe:	330c      	adds	r3, #12
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	e001      	b.n	8007c0c <inc_lock+0xfc>
 8007c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c0c:	4906      	ldr	r1, [pc, #24]	; (8007c28 <inc_lock+0x118>)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	440b      	add	r3, r1
 8007c14:	330c      	adds	r3, #12
 8007c16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	200008d8 	.word	0x200008d8

08007c2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d825      	bhi.n	8007c8c <dec_lock+0x60>
		n = Files[i].ctr;
 8007c40:	4a17      	ldr	r2, [pc, #92]	; (8007ca0 <dec_lock+0x74>)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	4413      	add	r3, r2
 8007c48:	330c      	adds	r3, #12
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007c4e:	89fb      	ldrh	r3, [r7, #14]
 8007c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c54:	d101      	bne.n	8007c5a <dec_lock+0x2e>
 8007c56:	2300      	movs	r3, #0
 8007c58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007c5a:	89fb      	ldrh	r3, [r7, #14]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <dec_lock+0x3a>
 8007c60:	89fb      	ldrh	r3, [r7, #14]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007c66:	4a0e      	ldr	r2, [pc, #56]	; (8007ca0 <dec_lock+0x74>)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	4413      	add	r3, r2
 8007c6e:	330c      	adds	r3, #12
 8007c70:	89fa      	ldrh	r2, [r7, #14]
 8007c72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007c74:	89fb      	ldrh	r3, [r7, #14]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <dec_lock+0x5a>
 8007c7a:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <dec_lock+0x74>)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	4413      	add	r3, r2
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	737b      	strb	r3, [r7, #13]
 8007c8a:	e001      	b.n	8007c90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007c90:	7b7b      	ldrb	r3, [r7, #13]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	200008d8 	.word	0x200008d8

08007ca4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e010      	b.n	8007cd4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007cb2:	4a0d      	ldr	r2, [pc, #52]	; (8007ce8 <clear_lock+0x44>)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	4413      	add	r3, r2
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d105      	bne.n	8007cce <clear_lock+0x2a>
 8007cc2:	4a09      	ldr	r2, [pc, #36]	; (8007ce8 <clear_lock+0x44>)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	4413      	add	r3, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d9eb      	bls.n	8007cb2 <clear_lock+0xe>
	}
}
 8007cda:	bf00      	nop
 8007cdc:	bf00      	nop
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	200008d8 	.word	0x200008d8

08007cec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	78db      	ldrb	r3, [r3, #3]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d034      	beq.n	8007d6a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7858      	ldrb	r0, [r3, #1]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d10:	2301      	movs	r3, #1
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	f7ff fd40 	bl	8007798 <disk_write>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	73fb      	strb	r3, [r7, #15]
 8007d22:	e022      	b.n	8007d6a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d217      	bcs.n	8007d6a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	789b      	ldrb	r3, [r3, #2]
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	e010      	b.n	8007d64 <sync_window+0x78>
					wsect += fs->fsize;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4413      	add	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7858      	ldrb	r0, [r3, #1]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d56:	2301      	movs	r3, #1
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	f7ff fd1d 	bl	8007798 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d8eb      	bhi.n	8007d42 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d01b      	beq.n	8007dc4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff ffad 	bl	8007cec <sync_window>
 8007d92:	4603      	mov	r3, r0
 8007d94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d113      	bne.n	8007dc4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7858      	ldrb	r0, [r3, #1]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007da6:	2301      	movs	r3, #1
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	f7ff fcd5 	bl	8007758 <disk_read>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007db4:	f04f 33ff 	mov.w	r3, #4294967295
 8007db8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7ff ff87 	bl	8007cec <sync_window>
 8007dde:	4603      	mov	r3, r0
 8007de0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d158      	bne.n	8007e9a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d148      	bne.n	8007e82 <sync_fs+0xb2>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	791b      	ldrb	r3, [r3, #4]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d144      	bne.n	8007e82 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3330      	adds	r3, #48	; 0x30
 8007dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e00:	2100      	movs	r1, #0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7ff fda9 	bl	800795a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	3330      	adds	r3, #48	; 0x30
 8007e0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e10:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7ff fd38 	bl	800788a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3330      	adds	r3, #48	; 0x30
 8007e1e:	4921      	ldr	r1, [pc, #132]	; (8007ea4 <sync_fs+0xd4>)
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff fd4d 	bl	80078c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3330      	adds	r3, #48	; 0x30
 8007e2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e2e:	491e      	ldr	r1, [pc, #120]	; (8007ea8 <sync_fs+0xd8>)
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff fd45 	bl	80078c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3330      	adds	r3, #48	; 0x30
 8007e3a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f7ff fd3b 	bl	80078c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3330      	adds	r3, #48	; 0x30
 8007e4e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	4619      	mov	r1, r3
 8007e58:	4610      	mov	r0, r2
 8007e5a:	f7ff fd31 	bl	80078c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	7858      	ldrb	r0, [r3, #1]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e76:	2301      	movs	r3, #1
 8007e78:	f7ff fc8e 	bl	8007798 <disk_write>
			fs->fsi_flag = 0;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	785b      	ldrb	r3, [r3, #1]
 8007e86:	2200      	movs	r2, #0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fca4 	bl	80077d8 <disk_ioctl>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <sync_fs+0xca>
 8007e96:	2301      	movs	r3, #1
 8007e98:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	41615252 	.word	0x41615252
 8007ea8:	61417272 	.word	0x61417272

08007eac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	3b02      	subs	r3, #2
 8007eba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	3b02      	subs	r3, #2
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d301      	bcc.n	8007ecc <clust2sect+0x20>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e008      	b.n	8007ede <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	895b      	ldrh	r3, [r3, #10]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	fb03 f202 	mul.w	r2, r3, r2
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007edc:	4413      	add	r3, r2
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b086      	sub	sp, #24
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d904      	bls.n	8007f0a <get_fat+0x20>
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d302      	bcc.n	8007f10 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	e08f      	b.n	8008030 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007f10:	f04f 33ff 	mov.w	r3, #4294967295
 8007f14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d062      	beq.n	8007fe4 <get_fat+0xfa>
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	dc7c      	bgt.n	800801c <get_fat+0x132>
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d002      	beq.n	8007f2c <get_fat+0x42>
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d042      	beq.n	8007fb0 <get_fat+0xc6>
 8007f2a:	e077      	b.n	800801c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	085b      	lsrs	r3, r3, #1
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	6a1a      	ldr	r2, [r3, #32]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	0a5b      	lsrs	r3, r3, #9
 8007f42:	4413      	add	r3, r2
 8007f44:	4619      	mov	r1, r3
 8007f46:	6938      	ldr	r0, [r7, #16]
 8007f48:	f7ff ff14 	bl	8007d74 <move_window>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d167      	bne.n	8008022 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	60fa      	str	r2, [r7, #12]
 8007f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	6a1a      	ldr	r2, [r3, #32]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	0a5b      	lsrs	r3, r3, #9
 8007f6e:	4413      	add	r3, r2
 8007f70:	4619      	mov	r1, r3
 8007f72:	6938      	ldr	r0, [r7, #16]
 8007f74:	f7ff fefe 	bl	8007d74 <move_window>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d153      	bne.n	8008026 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f8c:	021b      	lsls	r3, r3, #8
 8007f8e:	461a      	mov	r2, r3
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <get_fat+0xbc>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	091b      	lsrs	r3, r3, #4
 8007fa4:	e002      	b.n	8007fac <get_fat+0xc2>
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fac:	617b      	str	r3, [r7, #20]
			break;
 8007fae:	e03f      	b.n	8008030 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6a1a      	ldr	r2, [r3, #32]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	4413      	add	r3, r2
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6938      	ldr	r0, [r7, #16]
 8007fbe:	f7ff fed9 	bl	8007d74 <move_window>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d130      	bne.n	800802a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007fd6:	4413      	add	r3, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff fc1b 	bl	8007814 <ld_word>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	617b      	str	r3, [r7, #20]
			break;
 8007fe2:	e025      	b.n	8008030 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6a1a      	ldr	r2, [r3, #32]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	09db      	lsrs	r3, r3, #7
 8007fec:	4413      	add	r3, r2
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6938      	ldr	r0, [r7, #16]
 8007ff2:	f7ff febf 	bl	8007d74 <move_window>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d118      	bne.n	800802e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800800a:	4413      	add	r3, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff fc19 	bl	8007844 <ld_dword>
 8008012:	4603      	mov	r3, r0
 8008014:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008018:	617b      	str	r3, [r7, #20]
			break;
 800801a:	e009      	b.n	8008030 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800801c:	2301      	movs	r3, #1
 800801e:	617b      	str	r3, [r7, #20]
 8008020:	e006      	b.n	8008030 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008022:	bf00      	nop
 8008024:	e004      	b.n	8008030 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008026:	bf00      	nop
 8008028:	e002      	b.n	8008030 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800802a:	bf00      	nop
 800802c:	e000      	b.n	8008030 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800802e:	bf00      	nop
		}
	}

	return val;
 8008030:	697b      	ldr	r3, [r7, #20]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800803a:	b590      	push	{r4, r7, lr}
 800803c:	b089      	sub	sp, #36	; 0x24
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008046:	2302      	movs	r3, #2
 8008048:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b01      	cmp	r3, #1
 800804e:	f240 80d2 	bls.w	80081f6 <put_fat+0x1bc>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	429a      	cmp	r2, r3
 800805a:	f080 80cc 	bcs.w	80081f6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b03      	cmp	r3, #3
 8008064:	f000 8096 	beq.w	8008194 <put_fat+0x15a>
 8008068:	2b03      	cmp	r3, #3
 800806a:	f300 80cd 	bgt.w	8008208 <put_fat+0x1ce>
 800806e:	2b01      	cmp	r3, #1
 8008070:	d002      	beq.n	8008078 <put_fat+0x3e>
 8008072:	2b02      	cmp	r3, #2
 8008074:	d06e      	beq.n	8008154 <put_fat+0x11a>
 8008076:	e0c7      	b.n	8008208 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	61bb      	str	r3, [r7, #24]
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	085b      	lsrs	r3, r3, #1
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	4413      	add	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	0a5b      	lsrs	r3, r3, #9
 800808e:	4413      	add	r3, r2
 8008090:	4619      	mov	r1, r3
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7ff fe6e 	bl	8007d74 <move_window>
 8008098:	4603      	mov	r3, r0
 800809a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800809c:	7ffb      	ldrb	r3, [r7, #31]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f040 80ab 	bne.w	80081fa <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	1c59      	adds	r1, r3, #1
 80080ae:	61b9      	str	r1, [r7, #24]
 80080b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b4:	4413      	add	r3, r2
 80080b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00d      	beq.n	80080de <put_fat+0xa4>
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b25b      	sxtb	r3, r3
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	b25a      	sxtb	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	b25b      	sxtb	r3, r3
 80080d6:	4313      	orrs	r3, r2
 80080d8:	b25b      	sxtb	r3, r3
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	e001      	b.n	80080e2 <put_fat+0xa8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a1a      	ldr	r2, [r3, #32]
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	0a5b      	lsrs	r3, r3, #9
 80080f4:	4413      	add	r3, r2
 80080f6:	4619      	mov	r1, r3
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f7ff fe3b 	bl	8007d74 <move_window>
 80080fe:	4603      	mov	r3, r0
 8008100:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008102:	7ffb      	ldrb	r3, [r7, #31]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d17a      	bne.n	80081fe <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008114:	4413      	add	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <put_fat+0xf0>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	091b      	lsrs	r3, r3, #4
 8008126:	b2db      	uxtb	r3, r3
 8008128:	e00e      	b.n	8008148 <put_fat+0x10e>
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b25b      	sxtb	r3, r3
 8008130:	f023 030f 	bic.w	r3, r3, #15
 8008134:	b25a      	sxtb	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	0a1b      	lsrs	r3, r3, #8
 800813a:	b25b      	sxtb	r3, r3
 800813c:	f003 030f 	and.w	r3, r3, #15
 8008140:	b25b      	sxtb	r3, r3
 8008142:	4313      	orrs	r3, r2
 8008144:	b25b      	sxtb	r3, r3
 8008146:	b2db      	uxtb	r3, r3
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	70da      	strb	r2, [r3, #3]
			break;
 8008152:	e059      	b.n	8008208 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a1a      	ldr	r2, [r3, #32]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	4413      	add	r3, r2
 800815e:	4619      	mov	r1, r3
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f7ff fe07 	bl	8007d74 <move_window>
 8008166:	4603      	mov	r3, r0
 8008168:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800816a:	7ffb      	ldrb	r3, [r7, #31]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d148      	bne.n	8008202 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800817e:	4413      	add	r3, r2
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	b292      	uxth	r2, r2
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fb7f 	bl	800788a <st_word>
			fs->wflag = 1;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2201      	movs	r2, #1
 8008190:	70da      	strb	r2, [r3, #3]
			break;
 8008192:	e039      	b.n	8008208 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a1a      	ldr	r2, [r3, #32]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	09db      	lsrs	r3, r3, #7
 800819c:	4413      	add	r3, r2
 800819e:	4619      	mov	r1, r3
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff fde7 	bl	8007d74 <move_window>
 80081a6:	4603      	mov	r3, r0
 80081a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80081aa:	7ffb      	ldrb	r3, [r7, #31]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d12a      	bne.n	8008206 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80081c4:	4413      	add	r3, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fb3c 	bl	8007844 <ld_dword>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80081d2:	4323      	orrs	r3, r4
 80081d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80081e4:	4413      	add	r3, r2
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff fb69 	bl	80078c0 <st_dword>
			fs->wflag = 1;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	70da      	strb	r2, [r3, #3]
			break;
 80081f4:	e008      	b.n	8008208 <put_fat+0x1ce>
		}
	}
 80081f6:	bf00      	nop
 80081f8:	e006      	b.n	8008208 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80081fa:	bf00      	nop
 80081fc:	e004      	b.n	8008208 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80081fe:	bf00      	nop
 8008200:	e002      	b.n	8008208 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008202:	bf00      	nop
 8008204:	e000      	b.n	8008208 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008206:	bf00      	nop
	return res;
 8008208:	7ffb      	ldrb	r3, [r7, #31]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3724      	adds	r7, #36	; 0x24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd90      	pop	{r4, r7, pc}

08008212 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b088      	sub	sp, #32
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d904      	bls.n	8008238 <remove_chain+0x26>
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	429a      	cmp	r2, r3
 8008236:	d301      	bcc.n	800823c <remove_chain+0x2a>
 8008238:	2302      	movs	r3, #2
 800823a:	e04b      	b.n	80082d4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00c      	beq.n	800825c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008242:	f04f 32ff 	mov.w	r2, #4294967295
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	69b8      	ldr	r0, [r7, #24]
 800824a:	f7ff fef6 	bl	800803a <put_fat>
 800824e:	4603      	mov	r3, r0
 8008250:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008252:	7ffb      	ldrb	r3, [r7, #31]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <remove_chain+0x4a>
 8008258:	7ffb      	ldrb	r3, [r7, #31]
 800825a:	e03b      	b.n	80082d4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800825c:	68b9      	ldr	r1, [r7, #8]
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7ff fe43 	bl	8007eea <get_fat>
 8008264:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d031      	beq.n	80082d0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <remove_chain+0x64>
 8008272:	2302      	movs	r3, #2
 8008274:	e02e      	b.n	80082d4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d101      	bne.n	8008282 <remove_chain+0x70>
 800827e:	2301      	movs	r3, #1
 8008280:	e028      	b.n	80082d4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008282:	2200      	movs	r2, #0
 8008284:	68b9      	ldr	r1, [r7, #8]
 8008286:	69b8      	ldr	r0, [r7, #24]
 8008288:	f7ff fed7 	bl	800803a <put_fat>
 800828c:	4603      	mov	r3, r0
 800828e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008290:	7ffb      	ldrb	r3, [r7, #31]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <remove_chain+0x88>
 8008296:	7ffb      	ldrb	r3, [r7, #31]
 8008298:	e01c      	b.n	80082d4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	3b02      	subs	r3, #2
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d20b      	bcs.n	80082c0 <remove_chain+0xae>
			fs->free_clst++;
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	791b      	ldrb	r3, [r3, #4]
 80082b6:	f043 0301 	orr.w	r3, r3, #1
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d3c6      	bcc.n	800825c <remove_chain+0x4a>
 80082ce:	e000      	b.n	80082d2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80082d0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3720      	adds	r7, #32
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10d      	bne.n	800830e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <create_chain+0x2c>
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	429a      	cmp	r2, r3
 8008306:	d31b      	bcc.n	8008340 <create_chain+0x64>
 8008308:	2301      	movs	r3, #1
 800830a:	61bb      	str	r3, [r7, #24]
 800830c:	e018      	b.n	8008340 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff fdea 	bl	8007eea <get_fat>
 8008316:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d801      	bhi.n	8008322 <create_chain+0x46>
 800831e:	2301      	movs	r3, #1
 8008320:	e070      	b.n	8008404 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008328:	d101      	bne.n	800832e <create_chain+0x52>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	e06a      	b.n	8008404 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	429a      	cmp	r2, r3
 8008336:	d201      	bcs.n	800833c <create_chain+0x60>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	e063      	b.n	8008404 <create_chain+0x128>
		scl = clst;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	3301      	adds	r3, #1
 8008348:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	69fa      	ldr	r2, [r7, #28]
 8008350:	429a      	cmp	r2, r3
 8008352:	d307      	bcc.n	8008364 <create_chain+0x88>
				ncl = 2;
 8008354:	2302      	movs	r3, #2
 8008356:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	429a      	cmp	r2, r3
 800835e:	d901      	bls.n	8008364 <create_chain+0x88>
 8008360:	2300      	movs	r3, #0
 8008362:	e04f      	b.n	8008404 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008364:	69f9      	ldr	r1, [r7, #28]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff fdbf 	bl	8007eea <get_fat>
 800836c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00e      	beq.n	8008392 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d003      	beq.n	8008382 <create_chain+0xa6>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d101      	bne.n	8008386 <create_chain+0xaa>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	e03e      	b.n	8008404 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	429a      	cmp	r2, r3
 800838c:	d1da      	bne.n	8008344 <create_chain+0x68>
 800838e:	2300      	movs	r3, #0
 8008390:	e038      	b.n	8008404 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008392:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008394:	f04f 32ff 	mov.w	r2, #4294967295
 8008398:	69f9      	ldr	r1, [r7, #28]
 800839a:	6938      	ldr	r0, [r7, #16]
 800839c:	f7ff fe4d 	bl	800803a <put_fat>
 80083a0:	4603      	mov	r3, r0
 80083a2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d109      	bne.n	80083be <create_chain+0xe2>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d006      	beq.n	80083be <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80083b0:	69fa      	ldr	r2, [r7, #28]
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6938      	ldr	r0, [r7, #16]
 80083b6:	f7ff fe40 	bl	800803a <put_fat>
 80083ba:	4603      	mov	r3, r0
 80083bc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d116      	bne.n	80083f2 <create_chain+0x116>
		fs->last_clst = ncl;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	69fa      	ldr	r2, [r7, #28]
 80083c8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	3b02      	subs	r3, #2
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d804      	bhi.n	80083e2 <create_chain+0x106>
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	1e5a      	subs	r2, r3, #1
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	791b      	ldrb	r3, [r3, #4]
 80083e6:	f043 0301 	orr.w	r3, r3, #1
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	711a      	strb	r2, [r3, #4]
 80083f0:	e007      	b.n	8008402 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d102      	bne.n	80083fe <create_chain+0x122>
 80083f8:	f04f 33ff 	mov.w	r3, #4294967295
 80083fc:	e000      	b.n	8008400 <create_chain+0x124>
 80083fe:	2301      	movs	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008402:	69fb      	ldr	r3, [r7, #28]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3720      	adds	r7, #32
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	3304      	adds	r3, #4
 8008422:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	0a5b      	lsrs	r3, r3, #9
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	8952      	ldrh	r2, [r2, #10]
 800842c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008430:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	1d1a      	adds	r2, r3, #4
 8008436:	613a      	str	r2, [r7, #16]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <clmt_clust+0x3a>
 8008442:	2300      	movs	r3, #0
 8008444:	e010      	b.n	8008468 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	429a      	cmp	r2, r3
 800844c:	d307      	bcc.n	800845e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	617b      	str	r3, [r7, #20]
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	3304      	adds	r3, #4
 800845a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800845c:	e7e9      	b.n	8008432 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800845e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	4413      	add	r3, r2
}
 8008468:	4618      	mov	r0, r3
 800846a:	371c      	adds	r7, #28
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800848a:	d204      	bcs.n	8008496 <dir_sdi+0x22>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	f003 031f 	and.w	r3, r3, #31
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008496:	2302      	movs	r3, #2
 8008498:	e063      	b.n	8008562 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <dir_sdi+0x46>
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d902      	bls.n	80084ba <dir_sdi+0x46>
		clst = fs->dirbase;
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10c      	bne.n	80084da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	8912      	ldrh	r2, [r2, #8]
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d301      	bcc.n	80084d0 <dir_sdi+0x5c>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e048      	b.n	8008562 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	61da      	str	r2, [r3, #28]
 80084d8:	e029      	b.n	800852e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	895b      	ldrh	r3, [r3, #10]
 80084de:	025b      	lsls	r3, r3, #9
 80084e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80084e2:	e019      	b.n	8008518 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6979      	ldr	r1, [r7, #20]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fcfe 	bl	8007eea <get_fat>
 80084ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	d101      	bne.n	80084fc <dir_sdi+0x88>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e032      	b.n	8008562 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d904      	bls.n	800850c <dir_sdi+0x98>
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	429a      	cmp	r2, r3
 800850a:	d301      	bcc.n	8008510 <dir_sdi+0x9c>
 800850c:	2302      	movs	r3, #2
 800850e:	e028      	b.n	8008562 <dir_sdi+0xee>
			ofs -= csz;
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	429a      	cmp	r2, r3
 800851e:	d2e1      	bcs.n	80084e4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008520:	6979      	ldr	r1, [r7, #20]
 8008522:	6938      	ldr	r0, [r7, #16]
 8008524:	f7ff fcc2 	bl	8007eac <clust2sect>
 8008528:	4602      	mov	r2, r0
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	69db      	ldr	r3, [r3, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <dir_sdi+0xcc>
 800853c:	2302      	movs	r3, #2
 800853e:	e010      	b.n	8008562 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	69da      	ldr	r2, [r3, #28]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	0a5b      	lsrs	r3, r3, #9
 8008548:	441a      	add	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855a:	441a      	add	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b086      	sub	sp, #24
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	3320      	adds	r3, #32
 8008580:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <dir_next+0x28>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008590:	d301      	bcc.n	8008596 <dir_next+0x2c>
 8008592:	2304      	movs	r3, #4
 8008594:	e0aa      	b.n	80086ec <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859c:	2b00      	cmp	r3, #0
 800859e:	f040 8098 	bne.w	80086d2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10b      	bne.n	80085cc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	8912      	ldrh	r2, [r2, #8]
 80085bc:	4293      	cmp	r3, r2
 80085be:	f0c0 8088 	bcc.w	80086d2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	61da      	str	r2, [r3, #28]
 80085c8:	2304      	movs	r3, #4
 80085ca:	e08f      	b.n	80086ec <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	0a5b      	lsrs	r3, r3, #9
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	8952      	ldrh	r2, [r2, #10]
 80085d4:	3a01      	subs	r2, #1
 80085d6:	4013      	ands	r3, r2
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d17a      	bne.n	80086d2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f7ff fc80 	bl	8007eea <get_fat>
 80085ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d801      	bhi.n	80085f6 <dir_next+0x8c>
 80085f2:	2302      	movs	r3, #2
 80085f4:	e07a      	b.n	80086ec <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fc:	d101      	bne.n	8008602 <dir_next+0x98>
 80085fe:	2301      	movs	r3, #1
 8008600:	e074      	b.n	80086ec <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	429a      	cmp	r2, r3
 800860a:	d358      	bcc.n	80086be <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	61da      	str	r2, [r3, #28]
 8008618:	2304      	movs	r3, #4
 800861a:	e067      	b.n	80086ec <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	4619      	mov	r1, r3
 8008624:	4610      	mov	r0, r2
 8008626:	f7ff fe59 	bl	80082dc <create_chain>
 800862a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <dir_next+0xcc>
 8008632:	2307      	movs	r3, #7
 8008634:	e05a      	b.n	80086ec <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <dir_next+0xd6>
 800863c:	2302      	movs	r3, #2
 800863e:	e055      	b.n	80086ec <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008646:	d101      	bne.n	800864c <dir_next+0xe2>
 8008648:	2301      	movs	r3, #1
 800864a:	e04f      	b.n	80086ec <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff fb4d 	bl	8007cec <sync_window>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <dir_next+0xf2>
 8008658:	2301      	movs	r3, #1
 800865a:	e047      	b.n	80086ec <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3330      	adds	r3, #48	; 0x30
 8008660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff f977 	bl	800795a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800866c:	2300      	movs	r3, #0
 800866e:	613b      	str	r3, [r7, #16]
 8008670:	6979      	ldr	r1, [r7, #20]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f7ff fc1a 	bl	8007eac <clust2sect>
 8008678:	4602      	mov	r2, r0
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	62da      	str	r2, [r3, #44]	; 0x2c
 800867e:	e012      	b.n	80086a6 <dir_next+0x13c>
						fs->wflag = 1;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7ff fb30 	bl	8007cec <sync_window>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <dir_next+0x12c>
 8008692:	2301      	movs	r3, #1
 8008694:	e02a      	b.n	80086ec <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	3301      	adds	r3, #1
 800869a:	613b      	str	r3, [r7, #16]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	895b      	ldrh	r3, [r3, #10]
 80086aa:	461a      	mov	r2, r3
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d3e6      	bcc.n	8008680 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	1ad2      	subs	r2, r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80086c4:	6979      	ldr	r1, [r7, #20]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff fbf0 	bl	8007eac <clust2sect>
 80086cc:	4602      	mov	r2, r0
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e4:	441a      	add	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008704:	2100      	movs	r1, #0
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff feb4 	bl	8008474 <dir_sdi>
 800870c:	4603      	mov	r3, r0
 800870e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008710:	7dfb      	ldrb	r3, [r7, #23]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d12b      	bne.n	800876e <dir_alloc+0x7a>
		n = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	4619      	mov	r1, r3
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f7ff fb27 	bl	8007d74 <move_window>
 8008726:	4603      	mov	r3, r0
 8008728:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d11d      	bne.n	800876c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2be5      	cmp	r3, #229	; 0xe5
 8008738:	d004      	beq.n	8008744 <dir_alloc+0x50>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d107      	bne.n	8008754 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	3301      	adds	r3, #1
 8008748:	613b      	str	r3, [r7, #16]
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	429a      	cmp	r2, r3
 8008750:	d102      	bne.n	8008758 <dir_alloc+0x64>
 8008752:	e00c      	b.n	800876e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008754:	2300      	movs	r3, #0
 8008756:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008758:	2101      	movs	r1, #1
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7ff ff05 	bl	800856a <dir_next>
 8008760:	4603      	mov	r3, r0
 8008762:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0d7      	beq.n	800871a <dir_alloc+0x26>
 800876a:	e000      	b.n	800876e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800876c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	2b04      	cmp	r3, #4
 8008772:	d101      	bne.n	8008778 <dir_alloc+0x84>
 8008774:	2307      	movs	r3, #7
 8008776:	75fb      	strb	r3, [r7, #23]
	return res;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b084      	sub	sp, #16
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	331a      	adds	r3, #26
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff f83f 	bl	8007814 <ld_word>
 8008796:	4603      	mov	r3, r0
 8008798:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d109      	bne.n	80087b6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	3314      	adds	r3, #20
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff f834 	bl	8007814 <ld_word>
 80087ac:	4603      	mov	r3, r0
 80087ae:	041b      	lsls	r3, r3, #16
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80087b6:	68fb      	ldr	r3, [r7, #12]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	331a      	adds	r3, #26
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	b292      	uxth	r2, r2
 80087d4:	4611      	mov	r1, r2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff f857 	bl	800788a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d109      	bne.n	80087f8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f103 0214 	add.w	r2, r3, #20
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	0c1b      	lsrs	r3, r3, #16
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	4619      	mov	r1, r3
 80087f2:	4610      	mov	r0, r2
 80087f4:	f7ff f849 	bl	800788a <st_word>
	}
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800880e:	2100      	movs	r1, #0
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff fe2f 	bl	8008474 <dir_sdi>
 8008816:	4603      	mov	r3, r0
 8008818:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <dir_find+0x24>
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	e03e      	b.n	80088a2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	4619      	mov	r1, r3
 800882a:	6938      	ldr	r0, [r7, #16]
 800882c:	f7ff faa2 	bl	8007d74 <move_window>
 8008830:	4603      	mov	r3, r0
 8008832:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d12f      	bne.n	800889a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d102      	bne.n	800884e <dir_find+0x4e>
 8008848:	2304      	movs	r3, #4
 800884a:	75fb      	strb	r3, [r7, #23]
 800884c:	e028      	b.n	80088a0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	330b      	adds	r3, #11
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800885a:	b2da      	uxtb	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a1b      	ldr	r3, [r3, #32]
 8008864:	330b      	adds	r3, #11
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10a      	bne.n	8008886 <dir_find+0x86>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a18      	ldr	r0, [r3, #32]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3324      	adds	r3, #36	; 0x24
 8008878:	220b      	movs	r2, #11
 800887a:	4619      	mov	r1, r3
 800887c:	f7ff f888 	bl	8007990 <mem_cmp>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008886:	2100      	movs	r1, #0
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fe6e 	bl	800856a <dir_next>
 800888e:	4603      	mov	r3, r0
 8008890:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008892:	7dfb      	ldrb	r3, [r7, #23]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0c5      	beq.n	8008824 <dir_find+0x24>
 8008898:	e002      	b.n	80088a0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800889a:	bf00      	nop
 800889c:	e000      	b.n	80088a0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800889e:	bf00      	nop

	return res;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80088b8:	2101      	movs	r1, #1
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff ff1a 	bl	80086f4 <dir_alloc>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d11c      	bne.n	8008904 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	4619      	mov	r1, r3
 80088d0:	68b8      	ldr	r0, [r7, #8]
 80088d2:	f7ff fa4f 	bl	8007d74 <move_window>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d111      	bne.n	8008904 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	2220      	movs	r2, #32
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff f836 	bl	800795a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a18      	ldr	r0, [r3, #32]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	3324      	adds	r3, #36	; 0x24
 80088f6:	220b      	movs	r2, #11
 80088f8:	4619      	mov	r1, r3
 80088fa:	f7ff f80d 	bl	8007918 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2201      	movs	r2, #1
 8008902:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3324      	adds	r3, #36	; 0x24
 8008924:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008926:	220b      	movs	r2, #11
 8008928:	2120      	movs	r1, #32
 800892a:	68b8      	ldr	r0, [r7, #8]
 800892c:	f7ff f815 	bl	800795a <mem_set>
	si = i = 0; ni = 8;
 8008930:	2300      	movs	r3, #0
 8008932:	613b      	str	r3, [r7, #16]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	61fb      	str	r3, [r7, #28]
 8008938:	2308      	movs	r3, #8
 800893a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	61fa      	str	r2, [r7, #28]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	4413      	add	r3, r2
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800894a:	7efb      	ldrb	r3, [r7, #27]
 800894c:	2b20      	cmp	r3, #32
 800894e:	d94e      	bls.n	80089ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008950:	7efb      	ldrb	r3, [r7, #27]
 8008952:	2b2f      	cmp	r3, #47	; 0x2f
 8008954:	d006      	beq.n	8008964 <create_name+0x54>
 8008956:	7efb      	ldrb	r3, [r7, #27]
 8008958:	2b5c      	cmp	r3, #92	; 0x5c
 800895a:	d110      	bne.n	800897e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800895c:	e002      	b.n	8008964 <create_name+0x54>
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	3301      	adds	r3, #1
 8008962:	61fb      	str	r3, [r7, #28]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	4413      	add	r3, r2
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b2f      	cmp	r3, #47	; 0x2f
 800896e:	d0f6      	beq.n	800895e <create_name+0x4e>
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	4413      	add	r3, r2
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b5c      	cmp	r3, #92	; 0x5c
 800897a:	d0f0      	beq.n	800895e <create_name+0x4e>
			break;
 800897c:	e038      	b.n	80089f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800897e:	7efb      	ldrb	r3, [r7, #27]
 8008980:	2b2e      	cmp	r3, #46	; 0x2e
 8008982:	d003      	beq.n	800898c <create_name+0x7c>
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	429a      	cmp	r2, r3
 800898a:	d30c      	bcc.n	80089a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b0b      	cmp	r3, #11
 8008990:	d002      	beq.n	8008998 <create_name+0x88>
 8008992:	7efb      	ldrb	r3, [r7, #27]
 8008994:	2b2e      	cmp	r3, #46	; 0x2e
 8008996:	d001      	beq.n	800899c <create_name+0x8c>
 8008998:	2306      	movs	r3, #6
 800899a:	e044      	b.n	8008a26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800899c:	2308      	movs	r3, #8
 800899e:	613b      	str	r3, [r7, #16]
 80089a0:	230b      	movs	r3, #11
 80089a2:	617b      	str	r3, [r7, #20]
			continue;
 80089a4:	e022      	b.n	80089ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80089a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da04      	bge.n	80089b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80089ae:	7efb      	ldrb	r3, [r7, #27]
 80089b0:	3b80      	subs	r3, #128	; 0x80
 80089b2:	4a1f      	ldr	r2, [pc, #124]	; (8008a30 <create_name+0x120>)
 80089b4:	5cd3      	ldrb	r3, [r2, r3]
 80089b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80089b8:	7efb      	ldrb	r3, [r7, #27]
 80089ba:	4619      	mov	r1, r3
 80089bc:	481d      	ldr	r0, [pc, #116]	; (8008a34 <create_name+0x124>)
 80089be:	f7ff f80e 	bl	80079de <chk_chr>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <create_name+0xbc>
 80089c8:	2306      	movs	r3, #6
 80089ca:	e02c      	b.n	8008a26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80089cc:	7efb      	ldrb	r3, [r7, #27]
 80089ce:	2b60      	cmp	r3, #96	; 0x60
 80089d0:	d905      	bls.n	80089de <create_name+0xce>
 80089d2:	7efb      	ldrb	r3, [r7, #27]
 80089d4:	2b7a      	cmp	r3, #122	; 0x7a
 80089d6:	d802      	bhi.n	80089de <create_name+0xce>
 80089d8:	7efb      	ldrb	r3, [r7, #27]
 80089da:	3b20      	subs	r3, #32
 80089dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	613a      	str	r2, [r7, #16]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	4413      	add	r3, r2
 80089e8:	7efa      	ldrb	r2, [r7, #27]
 80089ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80089ec:	e7a6      	b.n	800893c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80089ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	441a      	add	r2, r3
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <create_name+0xf4>
 8008a00:	2306      	movs	r3, #6
 8008a02:	e010      	b.n	8008a26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2be5      	cmp	r3, #229	; 0xe5
 8008a0a:	d102      	bne.n	8008a12 <create_name+0x102>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2205      	movs	r2, #5
 8008a10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008a12:	7efb      	ldrb	r3, [r7, #27]
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d801      	bhi.n	8008a1c <create_name+0x10c>
 8008a18:	2204      	movs	r2, #4
 8008a1a:	e000      	b.n	8008a1e <create_name+0x10e>
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	330b      	adds	r3, #11
 8008a22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008a24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3720      	adds	r7, #32
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	0800d380 	.word	0x0800d380
 8008a34:	0800d308 	.word	0x0800d308

08008a38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008a4c:	e002      	b.n	8008a54 <follow_path+0x1c>
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	603b      	str	r3, [r7, #0]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b2f      	cmp	r3, #47	; 0x2f
 8008a5a:	d0f8      	beq.n	8008a4e <follow_path+0x16>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b5c      	cmp	r3, #92	; 0x5c
 8008a62:	d0f4      	beq.n	8008a4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2200      	movs	r2, #0
 8008a68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	2b1f      	cmp	r3, #31
 8008a70:	d80a      	bhi.n	8008a88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2280      	movs	r2, #128	; 0x80
 8008a76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff fcf9 	bl	8008474 <dir_sdi>
 8008a82:	4603      	mov	r3, r0
 8008a84:	75fb      	strb	r3, [r7, #23]
 8008a86:	e043      	b.n	8008b10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a88:	463b      	mov	r3, r7
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff ff3f 	bl	8008910 <create_name>
 8008a92:	4603      	mov	r3, r0
 8008a94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d134      	bne.n	8008b06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff feaf 	bl	8008800 <dir_find>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008aac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008aae:	7dfb      	ldrb	r3, [r7, #23]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
 8008ab6:	2b04      	cmp	r3, #4
 8008ab8:	d127      	bne.n	8008b0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d122      	bne.n	8008b0a <follow_path+0xd2>
 8008ac4:	2305      	movs	r3, #5
 8008ac6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008ac8:	e01f      	b.n	8008b0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008aca:	7afb      	ldrb	r3, [r7, #11]
 8008acc:	f003 0304 	and.w	r3, r3, #4
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d11c      	bne.n	8008b0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	799b      	ldrb	r3, [r3, #6]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d102      	bne.n	8008ae6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008ae0:	2305      	movs	r3, #5
 8008ae2:	75fb      	strb	r3, [r7, #23]
 8008ae4:	e014      	b.n	8008b10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af4:	4413      	add	r3, r2
 8008af6:	4619      	mov	r1, r3
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff fe42 	bl	8008782 <ld_clust>
 8008afe:	4602      	mov	r2, r0
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b04:	e7c0      	b.n	8008a88 <follow_path+0x50>
			if (res != FR_OK) break;
 8008b06:	bf00      	nop
 8008b08:	e002      	b.n	8008b10 <follow_path+0xd8>
				break;
 8008b0a:	bf00      	nop
 8008b0c:	e000      	b.n	8008b10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b0e:	bf00      	nop
			}
		}
	}

	return res;
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b087      	sub	sp, #28
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008b22:	f04f 33ff 	mov.w	r3, #4294967295
 8008b26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d031      	beq.n	8008b94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	e002      	b.n	8008b3e <get_ldnumber+0x24>
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d903      	bls.n	8008b4e <get_ldnumber+0x34>
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	2b3a      	cmp	r3, #58	; 0x3a
 8008b4c:	d1f4      	bne.n	8008b38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b3a      	cmp	r3, #58	; 0x3a
 8008b54:	d11c      	bne.n	8008b90 <get_ldnumber+0x76>
			tp = *path;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	60fa      	str	r2, [r7, #12]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	3b30      	subs	r3, #48	; 0x30
 8008b66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b09      	cmp	r3, #9
 8008b6c:	d80e      	bhi.n	8008b8c <get_ldnumber+0x72>
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d10a      	bne.n	8008b8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d107      	bne.n	8008b8c <get_ldnumber+0x72>
					vol = (int)i;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	3301      	adds	r3, #1
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	697a      	ldr	r2, [r7, #20]
 8008b8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	e002      	b.n	8008b96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008b90:	2300      	movs	r3, #0
 8008b92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008b94:	693b      	ldr	r3, [r7, #16]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
	...

08008ba4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	70da      	strb	r2, [r3, #3]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff f8d8 	bl	8007d74 <move_window>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <check_fs+0x2a>
 8008bca:	2304      	movs	r3, #4
 8008bcc:	e038      	b.n	8008c40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3330      	adds	r3, #48	; 0x30
 8008bd2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe fe1c 	bl	8007814 <ld_word>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	461a      	mov	r2, r3
 8008be0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d001      	beq.n	8008bec <check_fs+0x48>
 8008be8:	2303      	movs	r3, #3
 8008bea:	e029      	b.n	8008c40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008bf2:	2be9      	cmp	r3, #233	; 0xe9
 8008bf4:	d009      	beq.n	8008c0a <check_fs+0x66>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008bfc:	2beb      	cmp	r3, #235	; 0xeb
 8008bfe:	d11e      	bne.n	8008c3e <check_fs+0x9a>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008c06:	2b90      	cmp	r3, #144	; 0x90
 8008c08:	d119      	bne.n	8008c3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3330      	adds	r3, #48	; 0x30
 8008c0e:	3336      	adds	r3, #54	; 0x36
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe fe17 	bl	8007844 <ld_dword>
 8008c16:	4603      	mov	r3, r0
 8008c18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c1c:	4a0a      	ldr	r2, [pc, #40]	; (8008c48 <check_fs+0xa4>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d101      	bne.n	8008c26 <check_fs+0x82>
 8008c22:	2300      	movs	r3, #0
 8008c24:	e00c      	b.n	8008c40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3330      	adds	r3, #48	; 0x30
 8008c2a:	3352      	adds	r3, #82	; 0x52
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fe fe09 	bl	8007844 <ld_dword>
 8008c32:	4603      	mov	r3, r0
 8008c34:	4a05      	ldr	r2, [pc, #20]	; (8008c4c <check_fs+0xa8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d101      	bne.n	8008c3e <check_fs+0x9a>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e000      	b.n	8008c40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008c3e:	2302      	movs	r3, #2
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	00544146 	.word	0x00544146
 8008c4c:	33544146 	.word	0x33544146

08008c50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b096      	sub	sp, #88	; 0x58
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2200      	movs	r2, #0
 8008c62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f7ff ff58 	bl	8008b1a <get_ldnumber>
 8008c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	da01      	bge.n	8008c76 <find_volume+0x26>
 8008c72:	230b      	movs	r3, #11
 8008c74:	e22d      	b.n	80090d2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008c76:	4aa1      	ldr	r2, [pc, #644]	; (8008efc <find_volume+0x2ac>)
 8008c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <find_volume+0x3a>
 8008c86:	230c      	movs	r3, #12
 8008c88:	e223      	b.n	80090d2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	f023 0301 	bic.w	r3, r3, #1
 8008c96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01a      	beq.n	8008cd6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	785b      	ldrb	r3, [r3, #1]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fe fd17 	bl	80076d8 <disk_status>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10c      	bne.n	8008cd6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <find_volume+0x82>
 8008cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008cce:	230a      	movs	r3, #10
 8008cd0:	e1ff      	b.n	80090d2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	e1fd      	b.n	80090d2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	2200      	movs	r2, #0
 8008cda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce6:	785b      	ldrb	r3, [r3, #1]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe fd0f 	bl	800770c <disk_initialize>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008d00:	2303      	movs	r3, #3
 8008d02:	e1e6      	b.n	80090d2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008d04:	79fb      	ldrb	r3, [r7, #7]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d007      	beq.n	8008d1a <find_volume+0xca>
 8008d0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d0e:	f003 0304 	and.w	r3, r3, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008d16:	230a      	movs	r3, #10
 8008d18:	e1db      	b.n	80090d2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008d1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008d20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d22:	f7ff ff3f 	bl	8008ba4 <check_fs>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008d2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d149      	bne.n	8008dc8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008d34:	2300      	movs	r3, #0
 8008d36:	643b      	str	r3, [r7, #64]	; 0x40
 8008d38:	e01e      	b.n	8008d78 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008d48:	4413      	add	r3, r2
 8008d4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4e:	3304      	adds	r3, #4
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d006      	beq.n	8008d64 <find_volume+0x114>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	3308      	adds	r3, #8
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7fe fd72 	bl	8007844 <ld_dword>
 8008d60:	4602      	mov	r2, r0
 8008d62:	e000      	b.n	8008d66 <find_volume+0x116>
 8008d64:	2200      	movs	r2, #0
 8008d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	3358      	adds	r3, #88	; 0x58
 8008d6c:	443b      	add	r3, r7
 8008d6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d74:	3301      	adds	r3, #1
 8008d76:	643b      	str	r3, [r7, #64]	; 0x40
 8008d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d9dd      	bls.n	8008d3a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008d7e:	2300      	movs	r3, #0
 8008d80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <find_volume+0x13e>
 8008d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	3358      	adds	r3, #88	; 0x58
 8008d94:	443b      	add	r3, r7
 8008d96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008d9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <find_volume+0x15e>
 8008da2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008da4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008da6:	f7ff fefd 	bl	8008ba4 <check_fs>
 8008daa:	4603      	mov	r3, r0
 8008dac:	e000      	b.n	8008db0 <find_volume+0x160>
 8008dae:	2303      	movs	r3, #3
 8008db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d905      	bls.n	8008dc8 <find_volume+0x178>
 8008dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8008dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d9e2      	bls.n	8008d8e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d101      	bne.n	8008dd4 <find_volume+0x184>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e17e      	b.n	80090d2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d901      	bls.n	8008de0 <find_volume+0x190>
 8008ddc:	230d      	movs	r3, #13
 8008dde:	e178      	b.n	80090d2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	3330      	adds	r3, #48	; 0x30
 8008de4:	330b      	adds	r3, #11
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fd14 	bl	8007814 <ld_word>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008df2:	d001      	beq.n	8008df8 <find_volume+0x1a8>
 8008df4:	230d      	movs	r3, #13
 8008df6:	e16c      	b.n	80090d2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	3330      	adds	r3, #48	; 0x30
 8008dfc:	3316      	adds	r3, #22
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fd08 	bl	8007814 <ld_word>
 8008e04:	4603      	mov	r3, r0
 8008e06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <find_volume+0x1cc>
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	3330      	adds	r3, #48	; 0x30
 8008e12:	3324      	adds	r3, #36	; 0x24
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fe fd15 	bl	8007844 <ld_dword>
 8008e1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e20:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	789b      	ldrb	r3, [r3, #2]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d005      	beq.n	8008e40 <find_volume+0x1f0>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	789b      	ldrb	r3, [r3, #2]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d001      	beq.n	8008e40 <find_volume+0x1f0>
 8008e3c:	230d      	movs	r3, #13
 8008e3e:	e148      	b.n	80090d2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	789b      	ldrb	r3, [r3, #2]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e48:	fb02 f303 	mul.w	r3, r2, r3
 8008e4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	895b      	ldrh	r3, [r3, #10]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d008      	beq.n	8008e74 <find_volume+0x224>
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	895b      	ldrh	r3, [r3, #10]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	895b      	ldrh	r3, [r3, #10]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	4013      	ands	r3, r2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <find_volume+0x228>
 8008e74:	230d      	movs	r3, #13
 8008e76:	e12c      	b.n	80090d2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7a:	3330      	adds	r3, #48	; 0x30
 8008e7c:	3311      	adds	r3, #17
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fcc8 	bl	8007814 <ld_word>
 8008e84:	4603      	mov	r3, r0
 8008e86:	461a      	mov	r2, r3
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	891b      	ldrh	r3, [r3, #8]
 8008e90:	f003 030f 	and.w	r3, r3, #15
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <find_volume+0x24e>
 8008e9a:	230d      	movs	r3, #13
 8008e9c:	e119      	b.n	80090d2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	3330      	adds	r3, #48	; 0x30
 8008ea2:	3313      	adds	r3, #19
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe fcb5 	bl	8007814 <ld_word>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <find_volume+0x272>
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	3330      	adds	r3, #48	; 0x30
 8008eb8:	3320      	adds	r3, #32
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fe fcc2 	bl	8007844 <ld_dword>
 8008ec0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	3330      	adds	r3, #48	; 0x30
 8008ec6:	330e      	adds	r3, #14
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7fe fca3 	bl	8007814 <ld_word>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <find_volume+0x28c>
 8008ed8:	230d      	movs	r3, #13
 8008eda:	e0fa      	b.n	80090d2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008edc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee0:	4413      	add	r3, r2
 8008ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ee4:	8912      	ldrh	r2, [r2, #8]
 8008ee6:	0912      	lsrs	r2, r2, #4
 8008ee8:	b292      	uxth	r2, r2
 8008eea:	4413      	add	r3, r2
 8008eec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d204      	bcs.n	8008f00 <find_volume+0x2b0>
 8008ef6:	230d      	movs	r3, #13
 8008ef8:	e0eb      	b.n	80090d2 <find_volume+0x482>
 8008efa:	bf00      	nop
 8008efc:	200008d0 	.word	0x200008d0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f08:	8952      	ldrh	r2, [r2, #10]
 8008f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <find_volume+0x2ca>
 8008f16:	230d      	movs	r3, #13
 8008f18:	e0db      	b.n	80090d2 <find_volume+0x482>
		fmt = FS_FAT32;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d802      	bhi.n	8008f30 <find_volume+0x2e0>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d802      	bhi.n	8008f40 <find_volume+0x2f0>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	1c9a      	adds	r2, r3, #2
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f4c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008f4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f52:	441a      	add	r2, r3
 8008f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f56:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008f58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	441a      	add	r2, r3
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008f62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d11e      	bne.n	8008fa8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	3330      	adds	r3, #48	; 0x30
 8008f6e:	332a      	adds	r3, #42	; 0x2a
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fc4f 	bl	8007814 <ld_word>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <find_volume+0x330>
 8008f7c:	230d      	movs	r3, #13
 8008f7e:	e0a8      	b.n	80090d2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	891b      	ldrh	r3, [r3, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <find_volume+0x33c>
 8008f88:	230d      	movs	r3, #13
 8008f8a:	e0a2      	b.n	80090d2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	3330      	adds	r3, #48	; 0x30
 8008f90:	332c      	adds	r3, #44	; 0x2c
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fc56 	bl	8007844 <ld_dword>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8008fa6:	e01f      	b.n	8008fe8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	891b      	ldrh	r3, [r3, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <find_volume+0x364>
 8008fb0:	230d      	movs	r3, #13
 8008fb2:	e08e      	b.n	80090d2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	6a1a      	ldr	r2, [r3, #32]
 8008fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fba:	441a      	add	r2, r3
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d103      	bne.n	8008fd0 <find_volume+0x380>
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	e00a      	b.n	8008fe6 <find_volume+0x396>
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	695a      	ldr	r2, [r3, #20]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	4413      	add	r3, r2
 8008fda:	085a      	lsrs	r2, r3, #1
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008fe6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008ff2:	0a5b      	lsrs	r3, r3, #9
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d201      	bcs.n	8008ffc <find_volume+0x3ac>
 8008ff8:	230d      	movs	r3, #13
 8008ffa:	e06a      	b.n	80090d2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8009002:	611a      	str	r2, [r3, #16]
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	691a      	ldr	r2, [r3, #16]
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	2280      	movs	r2, #128	; 0x80
 8009010:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009012:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009016:	2b03      	cmp	r3, #3
 8009018:	d149      	bne.n	80090ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	3330      	adds	r3, #48	; 0x30
 800901e:	3330      	adds	r3, #48	; 0x30
 8009020:	4618      	mov	r0, r3
 8009022:	f7fe fbf7 	bl	8007814 <ld_word>
 8009026:	4603      	mov	r3, r0
 8009028:	2b01      	cmp	r3, #1
 800902a:	d140      	bne.n	80090ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800902c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800902e:	3301      	adds	r3, #1
 8009030:	4619      	mov	r1, r3
 8009032:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009034:	f7fe fe9e 	bl	8007d74 <move_window>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d137      	bne.n	80090ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	2200      	movs	r2, #0
 8009042:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	3330      	adds	r3, #48	; 0x30
 8009048:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe fbe1 	bl	8007814 <ld_word>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800905a:	429a      	cmp	r2, r3
 800905c:	d127      	bne.n	80090ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	3330      	adds	r3, #48	; 0x30
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fbee 	bl	8007844 <ld_dword>
 8009068:	4603      	mov	r3, r0
 800906a:	4a1c      	ldr	r2, [pc, #112]	; (80090dc <find_volume+0x48c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d11e      	bne.n	80090ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	3330      	adds	r3, #48	; 0x30
 8009074:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009078:	4618      	mov	r0, r3
 800907a:	f7fe fbe3 	bl	8007844 <ld_dword>
 800907e:	4603      	mov	r3, r0
 8009080:	4a17      	ldr	r2, [pc, #92]	; (80090e0 <find_volume+0x490>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d113      	bne.n	80090ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	3330      	adds	r3, #48	; 0x30
 800908a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fbd8 	bl	8007844 <ld_dword>
 8009094:	4602      	mov	r2, r0
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	3330      	adds	r3, #48	; 0x30
 800909e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fe fbce 	bl	8007844 <ld_dword>
 80090a8:	4602      	mov	r2, r0
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80090b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80090b6:	4b0b      	ldr	r3, [pc, #44]	; (80090e4 <find_volume+0x494>)
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	3301      	adds	r3, #1
 80090bc:	b29a      	uxth	r2, r3
 80090be:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <find_volume+0x494>)
 80090c0:	801a      	strh	r2, [r3, #0]
 80090c2:	4b08      	ldr	r3, [pc, #32]	; (80090e4 <find_volume+0x494>)
 80090c4:	881a      	ldrh	r2, [r3, #0]
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80090ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090cc:	f7fe fdea 	bl	8007ca4 <clear_lock>
#endif
	return FR_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3758      	adds	r7, #88	; 0x58
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	41615252 	.word	0x41615252
 80090e0:	61417272 	.word	0x61417272
 80090e4:	200008d4 	.word	0x200008d4

080090e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80090f2:	2309      	movs	r3, #9
 80090f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d01c      	beq.n	8009136 <validate+0x4e>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d018      	beq.n	8009136 <validate+0x4e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d013      	beq.n	8009136 <validate+0x4e>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	889a      	ldrh	r2, [r3, #4]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	88db      	ldrh	r3, [r3, #6]
 8009118:	429a      	cmp	r2, r3
 800911a:	d10c      	bne.n	8009136 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	785b      	ldrb	r3, [r3, #1]
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fad8 	bl	80076d8 <disk_status>
 8009128:	4603      	mov	r3, r0
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <validate+0x4e>
			res = FR_OK;
 8009132:	2300      	movs	r3, #0
 8009134:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d102      	bne.n	8009142 <validate+0x5a>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	e000      	b.n	8009144 <validate+0x5c>
 8009142:	2300      	movs	r3, #0
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	6013      	str	r3, [r2, #0]
	return res;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	4613      	mov	r3, r2
 8009160:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009166:	f107 0310 	add.w	r3, r7, #16
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fcd5 	bl	8008b1a <get_ldnumber>
 8009170:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	2b00      	cmp	r3, #0
 8009176:	da01      	bge.n	800917c <f_mount+0x28>
 8009178:	230b      	movs	r3, #11
 800917a:	e02b      	b.n	80091d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800917c:	4a17      	ldr	r2, [pc, #92]	; (80091dc <f_mount+0x88>)
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009184:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800918c:	69b8      	ldr	r0, [r7, #24]
 800918e:	f7fe fd89 	bl	8007ca4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	2200      	movs	r2, #0
 8009196:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	490d      	ldr	r1, [pc, #52]	; (80091dc <f_mount+0x88>)
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <f_mount+0x66>
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d001      	beq.n	80091be <f_mount+0x6a>
 80091ba:	2300      	movs	r3, #0
 80091bc:	e00a      	b.n	80091d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80091be:	f107 010c 	add.w	r1, r7, #12
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	2200      	movs	r2, #0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff fd41 	bl	8008c50 <find_volume>
 80091ce:	4603      	mov	r3, r0
 80091d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	200008d0 	.word	0x200008d0

080091e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b098      	sub	sp, #96	; 0x60
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	4613      	mov	r3, r2
 80091ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d101      	bne.n	80091f8 <f_open+0x18>
 80091f4:	2309      	movs	r3, #9
 80091f6:	e1ad      	b.n	8009554 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009200:	79fa      	ldrb	r2, [r7, #7]
 8009202:	f107 0110 	add.w	r1, r7, #16
 8009206:	f107 0308 	add.w	r3, r7, #8
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff fd20 	bl	8008c50 <find_volume>
 8009210:	4603      	mov	r3, r0
 8009212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800921a:	2b00      	cmp	r3, #0
 800921c:	f040 8191 	bne.w	8009542 <f_open+0x362>
		dj.obj.fs = fs;
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	f107 0314 	add.w	r3, r7, #20
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff fc03 	bl	8008a38 <follow_path>
 8009232:	4603      	mov	r3, r0
 8009234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800923c:	2b00      	cmp	r3, #0
 800923e:	d11a      	bne.n	8009276 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009240:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009244:	b25b      	sxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	da03      	bge.n	8009252 <f_open+0x72>
				res = FR_INVALID_NAME;
 800924a:	2306      	movs	r3, #6
 800924c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009250:	e011      	b.n	8009276 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	bf14      	ite	ne
 800925c:	2301      	movne	r3, #1
 800925e:	2300      	moveq	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	461a      	mov	r2, r3
 8009264:	f107 0314 	add.w	r3, r7, #20
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe fbd2 	bl	8007a14 <chk_lock>
 8009270:	4603      	mov	r3, r0
 8009272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009276:	79fb      	ldrb	r3, [r7, #7]
 8009278:	f003 031c 	and.w	r3, r3, #28
 800927c:	2b00      	cmp	r3, #0
 800927e:	d07f      	beq.n	8009380 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009280:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009284:	2b00      	cmp	r3, #0
 8009286:	d017      	beq.n	80092b8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009288:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800928c:	2b04      	cmp	r3, #4
 800928e:	d10e      	bne.n	80092ae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009290:	f7fe fc1c 	bl	8007acc <enq_lock>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d006      	beq.n	80092a8 <f_open+0xc8>
 800929a:	f107 0314 	add.w	r3, r7, #20
 800929e:	4618      	mov	r0, r3
 80092a0:	f7ff fb03 	bl	80088aa <dir_register>
 80092a4:	4603      	mov	r3, r0
 80092a6:	e000      	b.n	80092aa <f_open+0xca>
 80092a8:	2312      	movs	r3, #18
 80092aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	f043 0308 	orr.w	r3, r3, #8
 80092b4:	71fb      	strb	r3, [r7, #7]
 80092b6:	e010      	b.n	80092da <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80092b8:	7ebb      	ldrb	r3, [r7, #26]
 80092ba:	f003 0311 	and.w	r3, r3, #17
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <f_open+0xea>
					res = FR_DENIED;
 80092c2:	2307      	movs	r3, #7
 80092c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80092c8:	e007      	b.n	80092da <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <f_open+0xfa>
 80092d4:	2308      	movs	r3, #8
 80092d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80092da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d168      	bne.n	80093b4 <f_open+0x1d4>
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	f003 0308 	and.w	r3, r3, #8
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d063      	beq.n	80093b4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80092ec:	f7fd ffa4 	bl	8007238 <get_fattime>
 80092f0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80092f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f4:	330e      	adds	r3, #14
 80092f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7fe fae1 	bl	80078c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80092fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009300:	3316      	adds	r3, #22
 8009302:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009304:	4618      	mov	r0, r3
 8009306:	f7fe fadb 	bl	80078c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800930a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800930c:	330b      	adds	r3, #11
 800930e:	2220      	movs	r2, #32
 8009310:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009316:	4611      	mov	r1, r2
 8009318:	4618      	mov	r0, r3
 800931a:	f7ff fa32 	bl	8008782 <ld_clust>
 800931e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009324:	2200      	movs	r2, #0
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff fa4a 	bl	80087c0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800932c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800932e:	331c      	adds	r3, #28
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe fac4 	bl	80078c0 <st_dword>
					fs->wflag = 1;
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2201      	movs	r2, #1
 800933c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800933e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d037      	beq.n	80093b4 <f_open+0x1d4>
						dw = fs->winsect;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800934a:	f107 0314 	add.w	r3, r7, #20
 800934e:	2200      	movs	r2, #0
 8009350:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe ff5d 	bl	8008212 <remove_chain>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800935e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009362:	2b00      	cmp	r3, #0
 8009364:	d126      	bne.n	80093b4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe fd02 	bl	8007d74 <move_window>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800937a:	3a01      	subs	r2, #1
 800937c:	60da      	str	r2, [r3, #12]
 800937e:	e019      	b.n	80093b4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009380:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009384:	2b00      	cmp	r3, #0
 8009386:	d115      	bne.n	80093b4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009388:	7ebb      	ldrb	r3, [r7, #26]
 800938a:	f003 0310 	and.w	r3, r3, #16
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009392:	2304      	movs	r3, #4
 8009394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009398:	e00c      	b.n	80093b4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800939a:	79fb      	ldrb	r3, [r7, #7]
 800939c:	f003 0302 	and.w	r3, r3, #2
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d007      	beq.n	80093b4 <f_open+0x1d4>
 80093a4:	7ebb      	ldrb	r3, [r7, #26]
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <f_open+0x1d4>
						res = FR_DENIED;
 80093ae:	2307      	movs	r3, #7
 80093b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80093b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d128      	bne.n	800940e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	f003 0308 	and.w	r3, r3, #8
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093cc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80093d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80093dc:	79fb      	ldrb	r3, [r7, #7]
 80093de:	f023 0301 	bic.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bf14      	ite	ne
 80093e6:	2301      	movne	r3, #1
 80093e8:	2300      	moveq	r3, #0
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	461a      	mov	r2, r3
 80093ee:	f107 0314 	add.w	r3, r7, #20
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fe fb8b 	bl	8007b10 <inc_lock>
 80093fa:	4602      	mov	r2, r0
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d102      	bne.n	800940e <f_open+0x22e>
 8009408:	2302      	movs	r3, #2
 800940a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800940e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009412:	2b00      	cmp	r3, #0
 8009414:	f040 8095 	bne.w	8009542 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800941c:	4611      	mov	r1, r2
 800941e:	4618      	mov	r0, r3
 8009420:	f7ff f9af 	bl	8008782 <ld_clust>
 8009424:	4602      	mov	r2, r0
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800942a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942c:	331c      	adds	r3, #28
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fa08 	bl	8007844 <ld_dword>
 8009434:	4602      	mov	r2, r0
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	88da      	ldrh	r2, [r3, #6]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	79fa      	ldrb	r2, [r7, #7]
 8009452:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	3330      	adds	r3, #48	; 0x30
 800946a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800946e:	2100      	movs	r1, #0
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fa72 	bl	800795a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	f003 0320 	and.w	r3, r3, #32
 800947c:	2b00      	cmp	r3, #0
 800947e:	d060      	beq.n	8009542 <f_open+0x362>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d05c      	beq.n	8009542 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	68da      	ldr	r2, [r3, #12]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	895b      	ldrh	r3, [r3, #10]
 8009494:	025b      	lsls	r3, r3, #9
 8009496:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	657b      	str	r3, [r7, #84]	; 0x54
 80094a4:	e016      	b.n	80094d4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe fd1d 	bl	8007eea <get_fat>
 80094b0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80094b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d802      	bhi.n	80094be <f_open+0x2de>
 80094b8:	2302      	movs	r3, #2
 80094ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80094be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c4:	d102      	bne.n	80094cc <f_open+0x2ec>
 80094c6:	2301      	movs	r3, #1
 80094c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80094cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	657b      	str	r3, [r7, #84]	; 0x54
 80094d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d103      	bne.n	80094e4 <f_open+0x304>
 80094dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d8e0      	bhi.n	80094a6 <f_open+0x2c6>
				}
				fp->clust = clst;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80094ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d127      	bne.n	8009542 <f_open+0x362>
 80094f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d022      	beq.n	8009542 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe fcd3 	bl	8007eac <clust2sect>
 8009506:	6478      	str	r0, [r7, #68]	; 0x44
 8009508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800950a:	2b00      	cmp	r3, #0
 800950c:	d103      	bne.n	8009516 <f_open+0x336>
						res = FR_INT_ERR;
 800950e:	2302      	movs	r3, #2
 8009510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009514:	e015      	b.n	8009542 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009518:	0a5a      	lsrs	r2, r3, #9
 800951a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800951c:	441a      	add	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	7858      	ldrb	r0, [r3, #1]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6a1a      	ldr	r2, [r3, #32]
 8009530:	2301      	movs	r3, #1
 8009532:	f7fe f911 	bl	8007758 <disk_read>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <f_open+0x362>
 800953c:	2301      	movs	r3, #1
 800953e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <f_open+0x370>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009554:	4618      	mov	r0, r3
 8009556:	3760      	adds	r7, #96	; 0x60
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08c      	sub	sp, #48	; 0x30
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
 8009568:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f107 0210 	add.w	r2, r7, #16
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff fdb3 	bl	80090e8 <validate>
 8009582:	4603      	mov	r3, r0
 8009584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800958c:	2b00      	cmp	r3, #0
 800958e:	d107      	bne.n	80095a0 <f_write+0x44>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	7d5b      	ldrb	r3, [r3, #21]
 8009594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <f_write+0x4a>
 80095a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095a4:	e14b      	b.n	800983e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	7d1b      	ldrb	r3, [r3, #20]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <f_write+0x5a>
 80095b2:	2307      	movs	r3, #7
 80095b4:	e143      	b.n	800983e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	699a      	ldr	r2, [r3, #24]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	441a      	add	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	f080 812d 	bcs.w	8009822 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	43db      	mvns	r3, r3
 80095ce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80095d0:	e127      	b.n	8009822 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f040 80e3 	bne.w	80097a6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	0a5b      	lsrs	r3, r3, #9
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	8952      	ldrh	r2, [r2, #10]
 80095ea:	3a01      	subs	r2, #1
 80095ec:	4013      	ands	r3, r2
 80095ee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d143      	bne.n	800967e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	699b      	ldr	r3, [r3, #24]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d10c      	bne.n	8009618 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	2b00      	cmp	r3, #0
 8009608:	d11a      	bne.n	8009640 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2100      	movs	r1, #0
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fe64 	bl	80082dc <create_chain>
 8009614:	62b8      	str	r0, [r7, #40]	; 0x28
 8009616:	e013      	b.n	8009640 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	2b00      	cmp	r3, #0
 800961e:	d007      	beq.n	8009630 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	4619      	mov	r1, r3
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f7fe fef0 	bl	800840c <clmt_clust>
 800962c:	62b8      	str	r0, [r7, #40]	; 0x28
 800962e:	e007      	b.n	8009640 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	4619      	mov	r1, r3
 8009638:	4610      	mov	r0, r2
 800963a:	f7fe fe4f 	bl	80082dc <create_chain>
 800963e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b00      	cmp	r3, #0
 8009644:	f000 80f2 	beq.w	800982c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	2b01      	cmp	r3, #1
 800964c:	d104      	bne.n	8009658 <f_write+0xfc>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2202      	movs	r2, #2
 8009652:	755a      	strb	r2, [r3, #21]
 8009654:	2302      	movs	r3, #2
 8009656:	e0f2      	b.n	800983e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965e:	d104      	bne.n	800966a <f_write+0x10e>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2201      	movs	r2, #1
 8009664:	755a      	strb	r2, [r3, #21]
 8009666:	2301      	movs	r3, #1
 8009668:	e0e9      	b.n	800983e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800966e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d102      	bne.n	800967e <f_write+0x122>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800967c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	7d1b      	ldrb	r3, [r3, #20]
 8009682:	b25b      	sxtb	r3, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	da18      	bge.n	80096ba <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	7858      	ldrb	r0, [r3, #1]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6a1a      	ldr	r2, [r3, #32]
 8009696:	2301      	movs	r3, #1
 8009698:	f7fe f87e 	bl	8007798 <disk_write>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d004      	beq.n	80096ac <f_write+0x150>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2201      	movs	r2, #1
 80096a6:	755a      	strb	r2, [r3, #21]
 80096a8:	2301      	movs	r3, #1
 80096aa:	e0c8      	b.n	800983e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	7d1b      	ldrb	r3, [r3, #20]
 80096b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f7fe fbf2 	bl	8007eac <clust2sect>
 80096c8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d104      	bne.n	80096da <f_write+0x17e>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2202      	movs	r2, #2
 80096d4:	755a      	strb	r2, [r3, #21]
 80096d6:	2302      	movs	r3, #2
 80096d8:	e0b1      	b.n	800983e <f_write+0x2e2>
			sect += csect;
 80096da:	697a      	ldr	r2, [r7, #20]
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	4413      	add	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	0a5b      	lsrs	r3, r3, #9
 80096e6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d03c      	beq.n	8009768 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80096ee:	69ba      	ldr	r2, [r7, #24]
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	4413      	add	r3, r2
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	8952      	ldrh	r2, [r2, #10]
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d905      	bls.n	8009708 <f_write+0x1ac>
					cc = fs->csize - csect;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	895b      	ldrh	r3, [r3, #10]
 8009700:	461a      	mov	r2, r3
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	7858      	ldrb	r0, [r3, #1]
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	69f9      	ldr	r1, [r7, #28]
 8009712:	f7fe f841 	bl	8007798 <disk_write>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d004      	beq.n	8009726 <f_write+0x1ca>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2201      	movs	r2, #1
 8009720:	755a      	strb	r2, [r3, #21]
 8009722:	2301      	movs	r3, #1
 8009724:	e08b      	b.n	800983e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6a1a      	ldr	r2, [r3, #32]
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	6a3a      	ldr	r2, [r7, #32]
 8009730:	429a      	cmp	r2, r3
 8009732:	d915      	bls.n	8009760 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6a1a      	ldr	r2, [r3, #32]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	025b      	lsls	r3, r3, #9
 8009744:	69fa      	ldr	r2, [r7, #28]
 8009746:	4413      	add	r3, r2
 8009748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800974c:	4619      	mov	r1, r3
 800974e:	f7fe f8e3 	bl	8007918 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	7d1b      	ldrb	r3, [r3, #20]
 8009756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800975a:	b2da      	uxtb	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	025b      	lsls	r3, r3, #9
 8009764:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009766:	e03f      	b.n	80097e8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	429a      	cmp	r2, r3
 8009770:	d016      	beq.n	80097a0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	699a      	ldr	r2, [r3, #24]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800977a:	429a      	cmp	r2, r3
 800977c:	d210      	bcs.n	80097a0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	7858      	ldrb	r0, [r3, #1]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009788:	2301      	movs	r3, #1
 800978a:	697a      	ldr	r2, [r7, #20]
 800978c:	f7fd ffe4 	bl	8007758 <disk_read>
 8009790:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2201      	movs	r2, #1
 800979a:	755a      	strb	r2, [r3, #21]
 800979c:	2301      	movs	r3, #1
 800979e:	e04e      	b.n	800983e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ae:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80097b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d901      	bls.n	80097c0 <f_write+0x264>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ce:	4413      	add	r3, r2
 80097d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d2:	69f9      	ldr	r1, [r7, #28]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe f89f 	bl	8007918 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	7d1b      	ldrb	r3, [r3, #20]
 80097de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80097e8:	69fa      	ldr	r2, [r7, #28]
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	4413      	add	r3, r2
 80097ee:	61fb      	str	r3, [r7, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	699a      	ldr	r2, [r3, #24]
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	441a      	add	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	619a      	str	r2, [r3, #24]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	429a      	cmp	r2, r3
 8009806:	bf38      	it	cc
 8009808:	461a      	movcc	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	60da      	str	r2, [r3, #12]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	441a      	add	r2, r3
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f47f aed4 	bne.w	80095d2 <f_write+0x76>
 800982a:	e000      	b.n	800982e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800982c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	7d1b      	ldrb	r3, [r3, #20]
 8009832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009836:	b2da      	uxtb	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3730      	adds	r7, #48	; 0x30
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b086      	sub	sp, #24
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f107 0208 	add.w	r2, r7, #8
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff fc46 	bl	80090e8 <validate>
 800985c:	4603      	mov	r3, r0
 800985e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d168      	bne.n	8009938 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	7d1b      	ldrb	r3, [r3, #20]
 800986a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986e:	2b00      	cmp	r3, #0
 8009870:	d062      	beq.n	8009938 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	7d1b      	ldrb	r3, [r3, #20]
 8009876:	b25b      	sxtb	r3, r3
 8009878:	2b00      	cmp	r3, #0
 800987a:	da15      	bge.n	80098a8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	7858      	ldrb	r0, [r3, #1]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1a      	ldr	r2, [r3, #32]
 800988a:	2301      	movs	r3, #1
 800988c:	f7fd ff84 	bl	8007798 <disk_write>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <f_sync+0x54>
 8009896:	2301      	movs	r3, #1
 8009898:	e04f      	b.n	800993a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	7d1b      	ldrb	r3, [r3, #20]
 800989e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80098a8:	f7fd fcc6 	bl	8007238 <get_fattime>
 80098ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	4619      	mov	r1, r3
 80098b6:	4610      	mov	r0, r2
 80098b8:	f7fe fa5c 	bl	8007d74 <move_window>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d138      	bne.n	8009938 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	330b      	adds	r3, #11
 80098d0:	781a      	ldrb	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	330b      	adds	r3, #11
 80098d6:	f042 0220 	orr.w	r2, r2, #32
 80098da:	b2d2      	uxtb	r2, r2
 80098dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6818      	ldr	r0, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	461a      	mov	r2, r3
 80098e8:	68f9      	ldr	r1, [r7, #12]
 80098ea:	f7fe ff69 	bl	80087c0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f103 021c 	add.w	r2, r3, #28
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	4619      	mov	r1, r3
 80098fa:	4610      	mov	r0, r2
 80098fc:	f7fd ffe0 	bl	80078c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3316      	adds	r3, #22
 8009904:	6939      	ldr	r1, [r7, #16]
 8009906:	4618      	mov	r0, r3
 8009908:	f7fd ffda 	bl	80078c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3312      	adds	r3, #18
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f7fd ffb9 	bl	800788a <st_word>
					fs->wflag = 1;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2201      	movs	r2, #1
 800991c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	4618      	mov	r0, r3
 8009922:	f7fe fa55 	bl	8007dd0 <sync_fs>
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	7d1b      	ldrb	r3, [r3, #20]
 800992e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009932:	b2da      	uxtb	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009938:	7dfb      	ldrb	r3, [r7, #23]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7ff ff7b 	bl	8009846 <f_sync>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d118      	bne.n	800998c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f107 0208 	add.w	r2, r7, #8
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff fbc0 	bl	80090e8 <validate>
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10c      	bne.n	800998c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe f958 	bl	8007c2c <dec_lock>
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d102      	bne.n	800998c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b092      	sub	sp, #72	; 0x48
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80099a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80099a6:	f107 030c 	add.w	r3, r7, #12
 80099aa:	2200      	movs	r2, #0
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7ff f94f 	bl	8008c50 <find_volume>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80099b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f040 8099 	bne.w	8009af4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80099c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	691a      	ldr	r2, [r3, #16]
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	695b      	ldr	r3, [r3, #20]
 80099d0:	3b02      	subs	r3, #2
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d804      	bhi.n	80099e0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	691a      	ldr	r2, [r3, #16]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	e089      	b.n	8009af4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d128      	bne.n	8009a3e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80099ec:	2302      	movs	r3, #2
 80099ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80099f4:	f107 0314 	add.w	r3, r7, #20
 80099f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7fe fa75 	bl	8007eea <get_fat>
 8009a00:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a08:	d103      	bne.n	8009a12 <f_getfree+0x7c>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a10:	e063      	b.n	8009ada <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d103      	bne.n	8009a20 <f_getfree+0x8a>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a1e:	e05c      	b.n	8009ada <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d102      	bne.n	8009a2c <f_getfree+0x96>
 8009a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a28:	3301      	adds	r3, #1
 8009a2a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8009a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a2e:	3301      	adds	r3, #1
 8009a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d3db      	bcc.n	80099f4 <f_getfree+0x5e>
 8009a3c:	e04d      	b.n	8009ada <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a4e:	2300      	movs	r3, #0
 8009a50:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d113      	bne.n	8009a80 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7fe f987 	bl	8007d74 <move_window>
 8009a66:	4603      	mov	r3, r0
 8009a68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8009a6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d131      	bne.n	8009ad8 <f_getfree+0x142>
							p = fs->win;
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	3330      	adds	r3, #48	; 0x30
 8009a78:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a7e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8009a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d10f      	bne.n	8009aa8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a8a:	f7fd fec3 	bl	8007814 <ld_word>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d102      	bne.n	8009a9a <f_getfree+0x104>
 8009a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a96:	3301      	adds	r3, #1
 8009a98:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	3302      	adds	r3, #2
 8009a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8009aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa2:	3b02      	subs	r3, #2
 8009aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8009aa6:	e010      	b.n	8009aca <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009aaa:	f7fd fecb 	bl	8007844 <ld_dword>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d102      	bne.n	8009abe <f_getfree+0x128>
 8009ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aba:	3301      	adds	r3, #1
 8009abc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8009ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac6:	3b04      	subs	r3, #4
 8009ac8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8009aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009acc:	3b01      	subs	r3, #1
 8009ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1bd      	bne.n	8009a52 <f_getfree+0xbc>
 8009ad6:	e000      	b.n	8009ada <f_getfree+0x144>
							if (res != FR_OK) break;
 8009ad8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ade:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ae4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	791a      	ldrb	r2, [r3, #4]
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	f042 0201 	orr.w	r2, r2, #1
 8009af0:	b2d2      	uxtb	r2, r2
 8009af2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009af4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3748      	adds	r7, #72	; 0x48
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8009b00:	b590      	push	{r4, r7, lr}
 8009b02:	b09d      	sub	sp, #116	; 0x74
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	607a      	str	r2, [r7, #4]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8009b10:	2301      	movs	r3, #1
 8009b12:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8009b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b18:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8009b1a:	f107 030c 	add.w	r3, r7, #12
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe fffb 	bl	8008b1a <get_ldnumber>
 8009b24:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	da02      	bge.n	8009b32 <f_mkfs+0x32>
 8009b2c:	230b      	movs	r3, #11
 8009b2e:	f000 bc0d 	b.w	800a34c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8009b32:	4a94      	ldr	r2, [pc, #592]	; (8009d84 <f_mkfs+0x284>)
 8009b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <f_mkfs+0x4a>
 8009b3e:	4a91      	ldr	r2, [pc, #580]	; (8009d84 <f_mkfs+0x284>)
 8009b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8009b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8009b56:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fd fdd6 	bl	800770c <disk_initialize>
 8009b60:	4603      	mov	r3, r0
 8009b62:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8009b66:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <f_mkfs+0x76>
 8009b72:	2303      	movs	r3, #3
 8009b74:	e3ea      	b.n	800a34c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8009b76:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <f_mkfs+0x86>
 8009b82:	230a      	movs	r3, #10
 8009b84:	e3e2      	b.n	800a34c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8009b86:	f107 0214 	add.w	r2, r7, #20
 8009b8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009b8e:	2103      	movs	r1, #3
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fd fe21 	bl	80077d8 <disk_ioctl>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10c      	bne.n	8009bb6 <f_mkfs+0xb6>
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d009      	beq.n	8009bb6 <f_mkfs+0xb6>
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba8:	d805      	bhi.n	8009bb6 <f_mkfs+0xb6>
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	1e5a      	subs	r2, r3, #1
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <f_mkfs+0xba>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8009bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bbe:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <f_mkfs+0xce>
 8009bc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d309      	bcc.n	8009be2 <f_mkfs+0xe2>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bd4:	d805      	bhi.n	8009be2 <f_mkfs+0xe2>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	1e5a      	subs	r2, r3, #1
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4013      	ands	r3, r2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <f_mkfs+0xe6>
 8009be2:	2313      	movs	r3, #19
 8009be4:	e3b2      	b.n	800a34c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8009be6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bee:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8009bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8009c00:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c04:	fb02 f303 	mul.w	r3, r2, r3
 8009c08:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8009c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <f_mkfs+0x114>
 8009c10:	230e      	movs	r3, #14
 8009c12:	e39b      	b.n	800a34c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8009c14:	f107 0210 	add.w	r2, r7, #16
 8009c18:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fd fdda 	bl	80077d8 <disk_ioctl>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <f_mkfs+0x12e>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e38e      	b.n	800a34c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009c2e:	7afb      	ldrb	r3, [r7, #11]
 8009c30:	f003 0308 	and.w	r3, r3, #8
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <f_mkfs+0x13c>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	e000      	b.n	8009c3e <f_mkfs+0x13e>
 8009c3c:	233f      	movs	r3, #63	; 0x3f
 8009c3e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d901      	bls.n	8009c4c <f_mkfs+0x14c>
 8009c48:	230e      	movs	r3, #14
 8009c4a:	e37f      	b.n	800a34c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	2b7f      	cmp	r3, #127	; 0x7f
 8009c58:	d801      	bhi.n	8009c5e <f_mkfs+0x15e>
 8009c5a:	230e      	movs	r3, #14
 8009c5c:	e376      	b.n	800a34c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b80      	cmp	r3, #128	; 0x80
 8009c62:	d901      	bls.n	8009c68 <f_mkfs+0x168>
 8009c64:	2313      	movs	r3, #19
 8009c66:	e371      	b.n	800a34c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8009c68:	7afb      	ldrb	r3, [r7, #11]
 8009c6a:	f003 0302 	and.w	r3, r3, #2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00d      	beq.n	8009c8e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8009c72:	7afb      	ldrb	r3, [r7, #11]
 8009c74:	f003 0307 	and.w	r3, r3, #7
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d004      	beq.n	8009c86 <f_mkfs+0x186>
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d103      	bne.n	8009c8e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8009c86:	2303      	movs	r3, #3
 8009c88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009c8c:	e009      	b.n	8009ca2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	f003 0301 	and.w	r3, r3, #1
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <f_mkfs+0x19c>
 8009c98:	2313      	movs	r3, #19
 8009c9a:	e357      	b.n	800a34c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8009ca6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d13c      	bne.n	8009d28 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8009cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d11b      	bne.n	8009cec <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	0c5b      	lsrs	r3, r3, #17
 8009cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009cba:	2300      	movs	r3, #0
 8009cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8009cc2:	e005      	b.n	8009cd0 <f_mkfs+0x1d0>
 8009cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	653b      	str	r3, [r7, #80]	; 0x50
 8009cd0:	4a2d      	ldr	r2, [pc, #180]	; (8009d88 <f_mkfs+0x288>)
 8009cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d007      	beq.n	8009cec <f_mkfs+0x1ec>
 8009cdc:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <f_mkfs+0x288>)
 8009cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d2eb      	bcs.n	8009cc4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	3302      	adds	r3, #2
 8009cfa:	009a      	lsls	r2, r3, #2
 8009cfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009cfe:	4413      	add	r3, r2
 8009d00:	1e5a      	subs	r2, r3, #1
 8009d02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d08:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8009d0a:	2320      	movs	r3, #32
 8009d0c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8009d0e:	2300      	movs	r3, #0
 8009d10:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d903      	bls.n	8009d24 <f_mkfs+0x224>
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	4a1b      	ldr	r2, [pc, #108]	; (8009d8c <f_mkfs+0x28c>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d952      	bls.n	8009dca <f_mkfs+0x2ca>
 8009d24:	230e      	movs	r3, #14
 8009d26:	e311      	b.n	800a34c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8009d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d11b      	bne.n	8009d66 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	0b1b      	lsrs	r3, r3, #12
 8009d32:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8009d34:	2300      	movs	r3, #0
 8009d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d38:	2301      	movs	r3, #1
 8009d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8009d3c:	e005      	b.n	8009d4a <f_mkfs+0x24a>
 8009d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d40:	3301      	adds	r3, #1
 8009d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	653b      	str	r3, [r7, #80]	; 0x50
 8009d4a:	4a11      	ldr	r2, [pc, #68]	; (8009d90 <f_mkfs+0x290>)
 8009d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <f_mkfs+0x266>
 8009d56:	4a0e      	ldr	r2, [pc, #56]	; (8009d90 <f_mkfs+0x290>)
 8009d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d2eb      	bcs.n	8009d3e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d6e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d90c      	bls.n	8009d94 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	3302      	adds	r3, #2
 8009d7e:	005b      	lsls	r3, r3, #1
 8009d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d82:	e012      	b.n	8009daa <f_mkfs+0x2aa>
 8009d84:	200008d0 	.word	0x200008d0
 8009d88:	0800d400 	.word	0x0800d400
 8009d8c:	0ffffff5 	.word	0x0ffffff5
 8009d90:	0800d410 	.word	0x0800d410
				} else {
					fmt = FS_FAT12;
 8009d94:	2301      	movs	r3, #1
 8009d96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8009d9a:	6a3a      	ldr	r2, [r7, #32]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	4413      	add	r3, r2
 8009da2:	3301      	adds	r3, #1
 8009da4:	085b      	lsrs	r3, r3, #1
 8009da6:	3303      	adds	r3, #3
 8009da8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8009daa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dae:	4413      	add	r3, r2
 8009db0:	1e5a      	subs	r2, r3, #1
 8009db2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8009dba:	2301      	movs	r3, #1
 8009dbc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8009dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8009dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dce:	4413      	add	r3, r2
 8009dd0:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8009dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dd6:	fb03 f202 	mul.w	r2, r3, r2
 8009dda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ddc:	4413      	add	r3, r2
 8009dde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009de0:	4413      	add	r3, r2
 8009de2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	4413      	add	r3, r2
 8009dea:	1e5a      	subs	r2, r3, #1
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	425b      	negs	r3, r3
 8009df0:	401a      	ands	r2, r3
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8009df8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d108      	bne.n	8009e12 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8009e00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e04:	4413      	add	r3, r2
 8009e06:	657b      	str	r3, [r7, #84]	; 0x54
 8009e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e0c:	4413      	add	r3, r2
 8009e0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e10:	e006      	b.n	8009e20 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8009e12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e1c:	4413      	add	r3, r2
 8009e1e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8009e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e22:	011a      	lsls	r2, r3, #4
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	441a      	add	r2, r3
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	1ad2      	subs	r2, r2, r3
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d901      	bls.n	8009e36 <f_mkfs+0x336>
 8009e32:	230e      	movs	r3, #14
 8009e34:	e28a      	b.n	800a34c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e3a:	1ad2      	subs	r2, r2, r3
 8009e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e40:	fb01 f303 	mul.w	r3, r1, r3
 8009e44:	1ad2      	subs	r2, r2, r3
 8009e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e48:	1ad2      	subs	r2, r2, r3
 8009e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e50:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8009e52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d10f      	bne.n	8009e7a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d80a      	bhi.n	8009e7a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d105      	bne.n	8009e76 <f_mkfs+0x376>
 8009e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e6c:	085b      	lsrs	r3, r3, #1
 8009e6e:	607b      	str	r3, [r7, #4]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d144      	bne.n	8009f00 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8009e76:	230e      	movs	r3, #14
 8009e78:	e268      	b.n	800a34c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8009e7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d133      	bne.n	8009eea <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d91e      	bls.n	8009eca <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d107      	bne.n	8009ea2 <f_mkfs+0x3a2>
 8009e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e94:	005b      	lsls	r3, r3, #1
 8009e96:	2b40      	cmp	r3, #64	; 0x40
 8009e98:	d803      	bhi.n	8009ea2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8009e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	607b      	str	r3, [r7, #4]
 8009ea0:	e033      	b.n	8009f0a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8009ea2:	7afb      	ldrb	r3, [r7, #11]
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8009eac:	2303      	movs	r3, #3
 8009eae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009eb2:	e02a      	b.n	8009f0a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d105      	bne.n	8009ec6 <f_mkfs+0x3c6>
 8009eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ebc:	005b      	lsls	r3, r3, #1
 8009ebe:	607b      	str	r3, [r7, #4]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b80      	cmp	r3, #128	; 0x80
 8009ec4:	d91e      	bls.n	8009f04 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8009ec6:	230e      	movs	r3, #14
 8009ec8:	e240      	b.n	800a34c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d80a      	bhi.n	8009eea <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <f_mkfs+0x3e6>
 8009eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	607b      	str	r3, [r7, #4]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b80      	cmp	r3, #128	; 0x80
 8009ee4:	d910      	bls.n	8009f08 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8009ee6:	230e      	movs	r3, #14
 8009ee8:	e230      	b.n	800a34c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8009eea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d10c      	bne.n	8009f0c <f_mkfs+0x40c>
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d907      	bls.n	8009f0c <f_mkfs+0x40c>
 8009efc:	230e      	movs	r3, #14
 8009efe:	e225      	b.n	800a34c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009f00:	bf00      	nop
 8009f02:	e6ce      	b.n	8009ca2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009f04:	bf00      	nop
 8009f06:	e6cc      	b.n	8009ca2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009f08:	bf00      	nop
			pau = au;
 8009f0a:	e6ca      	b.n	8009ca2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8009f0c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8009f0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f10:	461a      	mov	r2, r3
 8009f12:	2100      	movs	r1, #0
 8009f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f16:	f7fd fd20 	bl	800795a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8009f1a:	220b      	movs	r2, #11
 8009f1c:	49b2      	ldr	r1, [pc, #712]	; (800a1e8 <f_mkfs+0x6e8>)
 8009f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f20:	f7fd fcfa 	bl	8007918 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	330b      	adds	r3, #11
 8009f28:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fd fcac 	bl	800788a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	330d      	adds	r3, #13
 8009f36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f38:	b2d2      	uxtb	r2, r2
 8009f3a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3e:	330e      	adds	r3, #14
 8009f40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f42:	b292      	uxth	r2, r2
 8009f44:	4611      	mov	r1, r2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fd fc9f 	bl	800788a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	3310      	adds	r3, #16
 8009f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f52:	b2d2      	uxtb	r2, r2
 8009f54:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	f103 0211 	add.w	r2, r3, #17
 8009f5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d002      	beq.n	8009f6a <f_mkfs+0x46a>
 8009f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	e000      	b.n	8009f6c <f_mkfs+0x46c>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7fd fc8b 	bl	800788a <st_word>
		if (sz_vol < 0x10000) {
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f7a:	d208      	bcs.n	8009f8e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	3313      	adds	r3, #19
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	b292      	uxth	r2, r2
 8009f84:	4611      	mov	r1, r2
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fd fc7f 	bl	800788a <st_word>
 8009f8c:	e006      	b.n	8009f9c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8009f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f90:	3320      	adds	r3, #32
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	4611      	mov	r1, r2
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fd fc92 	bl	80078c0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	3315      	adds	r3, #21
 8009fa0:	22f8      	movs	r2, #248	; 0xf8
 8009fa2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa6:	3318      	adds	r3, #24
 8009fa8:	213f      	movs	r1, #63	; 0x3f
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fd fc6d 	bl	800788a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	331a      	adds	r3, #26
 8009fb4:	21ff      	movs	r1, #255	; 0xff
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fd fc67 	bl	800788a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	331c      	adds	r3, #28
 8009fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fd fc7c 	bl	80078c0 <st_dword>
		if (fmt == FS_FAT32) {
 8009fc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	d131      	bne.n	800a034 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8009fd6:	f7fd f92f 	bl	8007238 <get_fattime>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f7fd fc6e 	bl	80078c0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	3324      	adds	r3, #36	; 0x24
 8009fe8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fd fc68 	bl	80078c0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff2:	332c      	adds	r3, #44	; 0x2c
 8009ff4:	2102      	movs	r1, #2
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fd fc62 	bl	80078c0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	3330      	adds	r3, #48	; 0x30
 800a000:	2101      	movs	r1, #1
 800a002:	4618      	mov	r0, r3
 800a004:	f7fd fc41 	bl	800788a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	3332      	adds	r3, #50	; 0x32
 800a00c:	2106      	movs	r1, #6
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fd fc3b 	bl	800788a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	3340      	adds	r3, #64	; 0x40
 800a018:	2280      	movs	r2, #128	; 0x80
 800a01a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	3342      	adds	r3, #66	; 0x42
 800a020:	2229      	movs	r2, #41	; 0x29
 800a022:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	3347      	adds	r3, #71	; 0x47
 800a028:	2213      	movs	r2, #19
 800a02a:	4970      	ldr	r1, [pc, #448]	; (800a1ec <f_mkfs+0x6ec>)
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fd fc73 	bl	8007918 <mem_cpy>
 800a032:	e020      	b.n	800a076 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800a03a:	f7fd f8fd 	bl	8007238 <get_fattime>
 800a03e:	4603      	mov	r3, r0
 800a040:	4619      	mov	r1, r3
 800a042:	4620      	mov	r0, r4
 800a044:	f7fd fc3c 	bl	80078c0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	3316      	adds	r3, #22
 800a04c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a04e:	b292      	uxth	r2, r2
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f7fd fc19 	bl	800788a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	3324      	adds	r3, #36	; 0x24
 800a05c:	2280      	movs	r2, #128	; 0x80
 800a05e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	3326      	adds	r3, #38	; 0x26
 800a064:	2229      	movs	r2, #41	; 0x29
 800a066:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	332b      	adds	r3, #43	; 0x2b
 800a06c:	2213      	movs	r2, #19
 800a06e:	4960      	ldr	r1, [pc, #384]	; (800a1f0 <f_mkfs+0x6f0>)
 800a070:	4618      	mov	r0, r3
 800a072:	f7fd fc51 	bl	8007918 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a07c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a080:	4618      	mov	r0, r3
 800a082:	f7fd fc02 	bl	800788a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a086:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a08a:	2301      	movs	r3, #1
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a090:	f7fd fb82 	bl	8007798 <disk_write>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <f_mkfs+0x59e>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e156      	b.n	800a34c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800a09e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d140      	bne.n	800a128 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	1d9a      	adds	r2, r3, #6
 800a0aa:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0b2:	f7fd fb71 	bl	8007798 <disk_write>
			mem_set(buf, 0, ss);
 800a0b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0be:	f7fd fc4c 	bl	800795a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a0c2:	494c      	ldr	r1, [pc, #304]	; (800a1f4 <f_mkfs+0x6f4>)
 800a0c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0c6:	f7fd fbfb 	bl	80078c0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a0d0:	4949      	ldr	r1, [pc, #292]	; (800a1f8 <f_mkfs+0x6f8>)
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fd fbf4 	bl	80078c0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0da:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	f7fd fbeb 	bl	80078c0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a0f0:	2102      	movs	r1, #2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fd fbe4 	bl	80078c0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0fe:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a102:	4618      	mov	r0, r3
 800a104:	f7fd fbc1 	bl	800788a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	1dda      	adds	r2, r3, #7
 800a10c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a110:	2301      	movs	r3, #1
 800a112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a114:	f7fd fb40 	bl	8007798 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a120:	2301      	movs	r3, #1
 800a122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a124:	f7fd fb38 	bl	8007798 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800a128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a12a:	2100      	movs	r1, #0
 800a12c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a12e:	f7fd fc14 	bl	800795a <mem_set>
		sect = b_fat;		/* FAT start sector */
 800a132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a134:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a136:	2300      	movs	r3, #0
 800a138:	64bb      	str	r3, [r7, #72]	; 0x48
 800a13a:	e04b      	b.n	800a1d4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800a13c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a140:	2b03      	cmp	r3, #3
 800a142:	d113      	bne.n	800a16c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800a144:	f06f 0107 	mvn.w	r1, #7
 800a148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a14a:	f7fd fbb9 	bl	80078c0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	3304      	adds	r3, #4
 800a152:	f04f 31ff 	mov.w	r1, #4294967295
 800a156:	4618      	mov	r0, r3
 800a158:	f7fd fbb2 	bl	80078c0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	3308      	adds	r3, #8
 800a160:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a164:	4618      	mov	r0, r3
 800a166:	f7fd fbab 	bl	80078c0 <st_dword>
 800a16a:	e00b      	b.n	800a184 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800a16c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <f_mkfs+0x678>
 800a174:	4b21      	ldr	r3, [pc, #132]	; (800a1fc <f_mkfs+0x6fc>)
 800a176:	e001      	b.n	800a17c <f_mkfs+0x67c>
 800a178:	f06f 0307 	mvn.w	r3, #7
 800a17c:	4619      	mov	r1, r3
 800a17e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a180:	f7fd fb9e 	bl	80078c0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800a184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a186:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800a188:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18c:	4293      	cmp	r3, r2
 800a18e:	bf28      	it	cs
 800a190:	4613      	movcs	r3, r2
 800a192:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a194:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a19a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a19c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a19e:	f7fd fafb 	bl	8007798 <disk_write>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <f_mkfs+0x6ac>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e0cf      	b.n	800a34c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800a1ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1b4:	f7fd fbd1 	bl	800795a <mem_set>
				sect += n; nsect -= n;
 800a1b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a1ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1bc:	4413      	add	r3, r2
 800a1be:	667b      	str	r3, [r7, #100]	; 0x64
 800a1c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800a1c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1dc      	bne.n	800a188 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d3af      	bcc.n	800a13c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800a1dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d10d      	bne.n	800a200 <f_mkfs+0x700>
 800a1e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1e6:	e00c      	b.n	800a202 <f_mkfs+0x702>
 800a1e8:	0800d318 	.word	0x0800d318
 800a1ec:	0800d324 	.word	0x0800d324
 800a1f0:	0800d338 	.word	0x0800d338
 800a1f4:	41615252 	.word	0x41615252
 800a1f8:	61417272 	.word	0x61417272
 800a1fc:	00fffff8 	.word	0x00fffff8
 800a200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a202:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800a204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	4293      	cmp	r3, r2
 800a20a:	bf28      	it	cs
 800a20c:	4613      	movcs	r3, r2
 800a20e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a210:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a216:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a21a:	f7fd fabd 	bl	8007798 <disk_write>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <f_mkfs+0x728>
 800a224:	2301      	movs	r3, #1
 800a226:	e091      	b.n	800a34c <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800a228:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a22a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a22c:	4413      	add	r3, r2
 800a22e:	667b      	str	r3, [r7, #100]	; 0x64
 800a230:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800a238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e2      	bne.n	800a204 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800a23e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a242:	2b03      	cmp	r3, #3
 800a244:	d103      	bne.n	800a24e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800a246:	230c      	movs	r3, #12
 800a248:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800a24c:	e010      	b.n	800a270 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a254:	d303      	bcc.n	800a25e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800a256:	2306      	movs	r3, #6
 800a258:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800a25c:	e008      	b.n	800a270 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800a25e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a262:	2b02      	cmp	r3, #2
 800a264:	d101      	bne.n	800a26a <f_mkfs+0x76a>
 800a266:	2304      	movs	r3, #4
 800a268:	e000      	b.n	800a26c <f_mkfs+0x76c>
 800a26a:	2301      	movs	r3, #1
 800a26c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800a270:	7afb      	ldrb	r3, [r7, #11]
 800a272:	f003 0308 	and.w	r3, r3, #8
 800a276:	2b00      	cmp	r3, #0
 800a278:	d15b      	bne.n	800a332 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800a27a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a27c:	461a      	mov	r2, r3
 800a27e:	2100      	movs	r1, #0
 800a280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a282:	f7fd fb6a 	bl	800795a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a28c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a290:	4618      	mov	r0, r3
 800a292:	f7fd fafa 	bl	800788a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a29c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	3302      	adds	r3, #2
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	3303      	adds	r3, #3
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800a2c4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	441a      	add	r2, r3
 800a2cc:	4b21      	ldr	r3, [pc, #132]	; (800a354 <f_mkfs+0x854>)
 800a2ce:	fba3 1302 	umull	r1, r3, r3, r2
 800a2d2:	1ad2      	subs	r2, r2, r3
 800a2d4:	0852      	lsrs	r2, r2, #1
 800a2d6:	4413      	add	r3, r2
 800a2d8:	0b5b      	lsrs	r3, r3, #13
 800a2da:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	3305      	adds	r3, #5
 800a2e0:	22fe      	movs	r2, #254	; 0xfe
 800a2e2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800a2e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2e6:	089b      	lsrs	r3, r3, #2
 800a2e8:	b2da      	uxtb	r2, r3
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	3306      	adds	r3, #6
 800a2ee:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800a2f2:	b2d2      	uxtb	r2, r2
 800a2f4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	3307      	adds	r3, #7
 800a2fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2fc:	b2d2      	uxtb	r2, r2
 800a2fe:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	3308      	adds	r3, #8
 800a304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a306:	4618      	mov	r0, r3
 800a308:	f7fd fada 	bl	80078c0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800a30c:	69bb      	ldr	r3, [r7, #24]
 800a30e:	330c      	adds	r3, #12
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f7fd fad3 	bl	80078c0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800a31a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a31e:	2301      	movs	r3, #1
 800a320:	2200      	movs	r2, #0
 800a322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a324:	f7fd fa38 	bl	8007798 <disk_write>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <f_mkfs+0x832>
 800a32e:	2301      	movs	r3, #1
 800a330:	e00c      	b.n	800a34c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800a332:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a336:	2200      	movs	r2, #0
 800a338:	2100      	movs	r1, #0
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fd fa4c 	bl	80077d8 <disk_ioctl>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <f_mkfs+0x84a>
 800a346:	2301      	movs	r3, #1
 800a348:	e000      	b.n	800a34c <f_mkfs+0x84c>

	return FR_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3774      	adds	r7, #116	; 0x74
 800a350:	46bd      	mov	sp, r7
 800a352:	bd90      	pop	{r4, r7, pc}
 800a354:	0515565b 	.word	0x0515565b

0800a358 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a358:	b480      	push	{r7}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	4613      	mov	r3, r2
 800a364:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a366:	2301      	movs	r3, #1
 800a368:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a36e:	4b1f      	ldr	r3, [pc, #124]	; (800a3ec <FATFS_LinkDriverEx+0x94>)
 800a370:	7a5b      	ldrb	r3, [r3, #9]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b00      	cmp	r3, #0
 800a376:	d131      	bne.n	800a3dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a378:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <FATFS_LinkDriverEx+0x94>)
 800a37a:	7a5b      	ldrb	r3, [r3, #9]
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	461a      	mov	r2, r3
 800a380:	4b1a      	ldr	r3, [pc, #104]	; (800a3ec <FATFS_LinkDriverEx+0x94>)
 800a382:	2100      	movs	r1, #0
 800a384:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a386:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <FATFS_LinkDriverEx+0x94>)
 800a388:	7a5b      	ldrb	r3, [r3, #9]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4a17      	ldr	r2, [pc, #92]	; (800a3ec <FATFS_LinkDriverEx+0x94>)
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a396:	4b15      	ldr	r3, [pc, #84]	; (800a3ec <FATFS_LinkDriverEx+0x94>)
 800a398:	7a5b      	ldrb	r3, [r3, #9]
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	461a      	mov	r2, r3
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <FATFS_LinkDriverEx+0x94>)
 800a3a0:	4413      	add	r3, r2
 800a3a2:	79fa      	ldrb	r2, [r7, #7]
 800a3a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3a6:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <FATFS_LinkDriverEx+0x94>)
 800a3a8:	7a5b      	ldrb	r3, [r3, #9]
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	b2d1      	uxtb	r1, r2
 800a3b0:	4a0e      	ldr	r2, [pc, #56]	; (800a3ec <FATFS_LinkDriverEx+0x94>)
 800a3b2:	7251      	strb	r1, [r2, #9]
 800a3b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3b6:	7dbb      	ldrb	r3, [r7, #22]
 800a3b8:	3330      	adds	r3, #48	; 0x30
 800a3ba:	b2da      	uxtb	r2, r3
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	223a      	movs	r2, #58	; 0x3a
 800a3c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	3302      	adds	r3, #2
 800a3cc:	222f      	movs	r2, #47	; 0x2f
 800a3ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	3303      	adds	r3, #3
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	371c      	adds	r7, #28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	200008f8 	.word	0x200008f8

0800a3f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff ffaa 	bl	800a358 <FATFS_LinkDriverEx>
 800a404:	4603      	mov	r3, r0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <__errno>:
 800a410:	4b01      	ldr	r3, [pc, #4]	; (800a418 <__errno+0x8>)
 800a412:	6818      	ldr	r0, [r3, #0]
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	2000000c 	.word	0x2000000c

0800a41c <__libc_init_array>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	4d0d      	ldr	r5, [pc, #52]	; (800a454 <__libc_init_array+0x38>)
 800a420:	4c0d      	ldr	r4, [pc, #52]	; (800a458 <__libc_init_array+0x3c>)
 800a422:	1b64      	subs	r4, r4, r5
 800a424:	10a4      	asrs	r4, r4, #2
 800a426:	2600      	movs	r6, #0
 800a428:	42a6      	cmp	r6, r4
 800a42a:	d109      	bne.n	800a440 <__libc_init_array+0x24>
 800a42c:	4d0b      	ldr	r5, [pc, #44]	; (800a45c <__libc_init_array+0x40>)
 800a42e:	4c0c      	ldr	r4, [pc, #48]	; (800a460 <__libc_init_array+0x44>)
 800a430:	f002 ff1c 	bl	800d26c <_init>
 800a434:	1b64      	subs	r4, r4, r5
 800a436:	10a4      	asrs	r4, r4, #2
 800a438:	2600      	movs	r6, #0
 800a43a:	42a6      	cmp	r6, r4
 800a43c:	d105      	bne.n	800a44a <__libc_init_array+0x2e>
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	f855 3b04 	ldr.w	r3, [r5], #4
 800a444:	4798      	blx	r3
 800a446:	3601      	adds	r6, #1
 800a448:	e7ee      	b.n	800a428 <__libc_init_array+0xc>
 800a44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44e:	4798      	blx	r3
 800a450:	3601      	adds	r6, #1
 800a452:	e7f2      	b.n	800a43a <__libc_init_array+0x1e>
 800a454:	0800d804 	.word	0x0800d804
 800a458:	0800d804 	.word	0x0800d804
 800a45c:	0800d804 	.word	0x0800d804
 800a460:	0800d808 	.word	0x0800d808

0800a464 <memset>:
 800a464:	4402      	add	r2, r0
 800a466:	4603      	mov	r3, r0
 800a468:	4293      	cmp	r3, r2
 800a46a:	d100      	bne.n	800a46e <memset+0xa>
 800a46c:	4770      	bx	lr
 800a46e:	f803 1b01 	strb.w	r1, [r3], #1
 800a472:	e7f9      	b.n	800a468 <memset+0x4>

0800a474 <__cvt>:
 800a474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a478:	ec55 4b10 	vmov	r4, r5, d0
 800a47c:	2d00      	cmp	r5, #0
 800a47e:	460e      	mov	r6, r1
 800a480:	4619      	mov	r1, r3
 800a482:	462b      	mov	r3, r5
 800a484:	bfbb      	ittet	lt
 800a486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a48a:	461d      	movlt	r5, r3
 800a48c:	2300      	movge	r3, #0
 800a48e:	232d      	movlt	r3, #45	; 0x2d
 800a490:	700b      	strb	r3, [r1, #0]
 800a492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a494:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a498:	4691      	mov	r9, r2
 800a49a:	f023 0820 	bic.w	r8, r3, #32
 800a49e:	bfbc      	itt	lt
 800a4a0:	4622      	movlt	r2, r4
 800a4a2:	4614      	movlt	r4, r2
 800a4a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4a8:	d005      	beq.n	800a4b6 <__cvt+0x42>
 800a4aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4ae:	d100      	bne.n	800a4b2 <__cvt+0x3e>
 800a4b0:	3601      	adds	r6, #1
 800a4b2:	2102      	movs	r1, #2
 800a4b4:	e000      	b.n	800a4b8 <__cvt+0x44>
 800a4b6:	2103      	movs	r1, #3
 800a4b8:	ab03      	add	r3, sp, #12
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	ab02      	add	r3, sp, #8
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	ec45 4b10 	vmov	d0, r4, r5
 800a4c4:	4653      	mov	r3, sl
 800a4c6:	4632      	mov	r2, r6
 800a4c8:	f000 fd02 	bl	800aed0 <_dtoa_r>
 800a4cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	d102      	bne.n	800a4da <__cvt+0x66>
 800a4d4:	f019 0f01 	tst.w	r9, #1
 800a4d8:	d022      	beq.n	800a520 <__cvt+0xac>
 800a4da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4de:	eb07 0906 	add.w	r9, r7, r6
 800a4e2:	d110      	bne.n	800a506 <__cvt+0x92>
 800a4e4:	783b      	ldrb	r3, [r7, #0]
 800a4e6:	2b30      	cmp	r3, #48	; 0x30
 800a4e8:	d10a      	bne.n	800a500 <__cvt+0x8c>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f6 fb09 	bl	8000b08 <__aeabi_dcmpeq>
 800a4f6:	b918      	cbnz	r0, 800a500 <__cvt+0x8c>
 800a4f8:	f1c6 0601 	rsb	r6, r6, #1
 800a4fc:	f8ca 6000 	str.w	r6, [sl]
 800a500:	f8da 3000 	ldr.w	r3, [sl]
 800a504:	4499      	add	r9, r3
 800a506:	2200      	movs	r2, #0
 800a508:	2300      	movs	r3, #0
 800a50a:	4620      	mov	r0, r4
 800a50c:	4629      	mov	r1, r5
 800a50e:	f7f6 fafb 	bl	8000b08 <__aeabi_dcmpeq>
 800a512:	b108      	cbz	r0, 800a518 <__cvt+0xa4>
 800a514:	f8cd 900c 	str.w	r9, [sp, #12]
 800a518:	2230      	movs	r2, #48	; 0x30
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	454b      	cmp	r3, r9
 800a51e:	d307      	bcc.n	800a530 <__cvt+0xbc>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a524:	1bdb      	subs	r3, r3, r7
 800a526:	4638      	mov	r0, r7
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	b004      	add	sp, #16
 800a52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a530:	1c59      	adds	r1, r3, #1
 800a532:	9103      	str	r1, [sp, #12]
 800a534:	701a      	strb	r2, [r3, #0]
 800a536:	e7f0      	b.n	800a51a <__cvt+0xa6>

0800a538 <__exponent>:
 800a538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a53a:	4603      	mov	r3, r0
 800a53c:	2900      	cmp	r1, #0
 800a53e:	bfb8      	it	lt
 800a540:	4249      	neglt	r1, r1
 800a542:	f803 2b02 	strb.w	r2, [r3], #2
 800a546:	bfb4      	ite	lt
 800a548:	222d      	movlt	r2, #45	; 0x2d
 800a54a:	222b      	movge	r2, #43	; 0x2b
 800a54c:	2909      	cmp	r1, #9
 800a54e:	7042      	strb	r2, [r0, #1]
 800a550:	dd2a      	ble.n	800a5a8 <__exponent+0x70>
 800a552:	f10d 0407 	add.w	r4, sp, #7
 800a556:	46a4      	mov	ip, r4
 800a558:	270a      	movs	r7, #10
 800a55a:	46a6      	mov	lr, r4
 800a55c:	460a      	mov	r2, r1
 800a55e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a562:	fb07 1516 	mls	r5, r7, r6, r1
 800a566:	3530      	adds	r5, #48	; 0x30
 800a568:	2a63      	cmp	r2, #99	; 0x63
 800a56a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a56e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a572:	4631      	mov	r1, r6
 800a574:	dcf1      	bgt.n	800a55a <__exponent+0x22>
 800a576:	3130      	adds	r1, #48	; 0x30
 800a578:	f1ae 0502 	sub.w	r5, lr, #2
 800a57c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a580:	1c44      	adds	r4, r0, #1
 800a582:	4629      	mov	r1, r5
 800a584:	4561      	cmp	r1, ip
 800a586:	d30a      	bcc.n	800a59e <__exponent+0x66>
 800a588:	f10d 0209 	add.w	r2, sp, #9
 800a58c:	eba2 020e 	sub.w	r2, r2, lr
 800a590:	4565      	cmp	r5, ip
 800a592:	bf88      	it	hi
 800a594:	2200      	movhi	r2, #0
 800a596:	4413      	add	r3, r2
 800a598:	1a18      	subs	r0, r3, r0
 800a59a:	b003      	add	sp, #12
 800a59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5a6:	e7ed      	b.n	800a584 <__exponent+0x4c>
 800a5a8:	2330      	movs	r3, #48	; 0x30
 800a5aa:	3130      	adds	r1, #48	; 0x30
 800a5ac:	7083      	strb	r3, [r0, #2]
 800a5ae:	70c1      	strb	r1, [r0, #3]
 800a5b0:	1d03      	adds	r3, r0, #4
 800a5b2:	e7f1      	b.n	800a598 <__exponent+0x60>

0800a5b4 <_printf_float>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	ed2d 8b02 	vpush	{d8}
 800a5bc:	b08d      	sub	sp, #52	; 0x34
 800a5be:	460c      	mov	r4, r1
 800a5c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	461f      	mov	r7, r3
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	f001 fb65 	bl	800bc98 <_localeconv_r>
 800a5ce:	f8d0 a000 	ldr.w	sl, [r0]
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	f7f5 fe1c 	bl	8000210 <strlen>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	930a      	str	r3, [sp, #40]	; 0x28
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	9305      	str	r3, [sp, #20]
 800a5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a5e8:	3307      	adds	r3, #7
 800a5ea:	f023 0307 	bic.w	r3, r3, #7
 800a5ee:	f103 0208 	add.w	r2, r3, #8
 800a5f2:	f8c8 2000 	str.w	r2, [r8]
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a5fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a606:	9307      	str	r3, [sp, #28]
 800a608:	f8cd 8018 	str.w	r8, [sp, #24]
 800a60c:	ee08 0a10 	vmov	s16, r0
 800a610:	4b9f      	ldr	r3, [pc, #636]	; (800a890 <_printf_float+0x2dc>)
 800a612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a616:	f04f 32ff 	mov.w	r2, #4294967295
 800a61a:	f7f6 faa7 	bl	8000b6c <__aeabi_dcmpun>
 800a61e:	bb88      	cbnz	r0, 800a684 <_printf_float+0xd0>
 800a620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a624:	4b9a      	ldr	r3, [pc, #616]	; (800a890 <_printf_float+0x2dc>)
 800a626:	f04f 32ff 	mov.w	r2, #4294967295
 800a62a:	f7f6 fa81 	bl	8000b30 <__aeabi_dcmple>
 800a62e:	bb48      	cbnz	r0, 800a684 <_printf_float+0xd0>
 800a630:	2200      	movs	r2, #0
 800a632:	2300      	movs	r3, #0
 800a634:	4640      	mov	r0, r8
 800a636:	4649      	mov	r1, r9
 800a638:	f7f6 fa70 	bl	8000b1c <__aeabi_dcmplt>
 800a63c:	b110      	cbz	r0, 800a644 <_printf_float+0x90>
 800a63e:	232d      	movs	r3, #45	; 0x2d
 800a640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a644:	4b93      	ldr	r3, [pc, #588]	; (800a894 <_printf_float+0x2e0>)
 800a646:	4894      	ldr	r0, [pc, #592]	; (800a898 <_printf_float+0x2e4>)
 800a648:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a64c:	bf94      	ite	ls
 800a64e:	4698      	movls	r8, r3
 800a650:	4680      	movhi	r8, r0
 800a652:	2303      	movs	r3, #3
 800a654:	6123      	str	r3, [r4, #16]
 800a656:	9b05      	ldr	r3, [sp, #20]
 800a658:	f023 0204 	bic.w	r2, r3, #4
 800a65c:	6022      	str	r2, [r4, #0]
 800a65e:	f04f 0900 	mov.w	r9, #0
 800a662:	9700      	str	r7, [sp, #0]
 800a664:	4633      	mov	r3, r6
 800a666:	aa0b      	add	r2, sp, #44	; 0x2c
 800a668:	4621      	mov	r1, r4
 800a66a:	4628      	mov	r0, r5
 800a66c:	f000 f9d8 	bl	800aa20 <_printf_common>
 800a670:	3001      	adds	r0, #1
 800a672:	f040 8090 	bne.w	800a796 <_printf_float+0x1e2>
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	b00d      	add	sp, #52	; 0x34
 800a67c:	ecbd 8b02 	vpop	{d8}
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a684:	4642      	mov	r2, r8
 800a686:	464b      	mov	r3, r9
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	f7f6 fa6e 	bl	8000b6c <__aeabi_dcmpun>
 800a690:	b140      	cbz	r0, 800a6a4 <_printf_float+0xf0>
 800a692:	464b      	mov	r3, r9
 800a694:	2b00      	cmp	r3, #0
 800a696:	bfbc      	itt	lt
 800a698:	232d      	movlt	r3, #45	; 0x2d
 800a69a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a69e:	487f      	ldr	r0, [pc, #508]	; (800a89c <_printf_float+0x2e8>)
 800a6a0:	4b7f      	ldr	r3, [pc, #508]	; (800a8a0 <_printf_float+0x2ec>)
 800a6a2:	e7d1      	b.n	800a648 <_printf_float+0x94>
 800a6a4:	6863      	ldr	r3, [r4, #4]
 800a6a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6aa:	9206      	str	r2, [sp, #24]
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	d13f      	bne.n	800a730 <_printf_float+0x17c>
 800a6b0:	2306      	movs	r3, #6
 800a6b2:	6063      	str	r3, [r4, #4]
 800a6b4:	9b05      	ldr	r3, [sp, #20]
 800a6b6:	6861      	ldr	r1, [r4, #4]
 800a6b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9303      	str	r3, [sp, #12]
 800a6c0:	ab0a      	add	r3, sp, #40	; 0x28
 800a6c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a6c6:	ab09      	add	r3, sp, #36	; 0x24
 800a6c8:	ec49 8b10 	vmov	d0, r8, r9
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	6022      	str	r2, [r4, #0]
 800a6d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	f7ff fecd 	bl	800a474 <__cvt>
 800a6da:	9b06      	ldr	r3, [sp, #24]
 800a6dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6de:	2b47      	cmp	r3, #71	; 0x47
 800a6e0:	4680      	mov	r8, r0
 800a6e2:	d108      	bne.n	800a6f6 <_printf_float+0x142>
 800a6e4:	1cc8      	adds	r0, r1, #3
 800a6e6:	db02      	blt.n	800a6ee <_printf_float+0x13a>
 800a6e8:	6863      	ldr	r3, [r4, #4]
 800a6ea:	4299      	cmp	r1, r3
 800a6ec:	dd41      	ble.n	800a772 <_printf_float+0x1be>
 800a6ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800a6f2:	fa5f fb8b 	uxtb.w	fp, fp
 800a6f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6fa:	d820      	bhi.n	800a73e <_printf_float+0x18a>
 800a6fc:	3901      	subs	r1, #1
 800a6fe:	465a      	mov	r2, fp
 800a700:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a704:	9109      	str	r1, [sp, #36]	; 0x24
 800a706:	f7ff ff17 	bl	800a538 <__exponent>
 800a70a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a70c:	1813      	adds	r3, r2, r0
 800a70e:	2a01      	cmp	r2, #1
 800a710:	4681      	mov	r9, r0
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	dc02      	bgt.n	800a71c <_printf_float+0x168>
 800a716:	6822      	ldr	r2, [r4, #0]
 800a718:	07d2      	lsls	r2, r2, #31
 800a71a:	d501      	bpl.n	800a720 <_printf_float+0x16c>
 800a71c:	3301      	adds	r3, #1
 800a71e:	6123      	str	r3, [r4, #16]
 800a720:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a724:	2b00      	cmp	r3, #0
 800a726:	d09c      	beq.n	800a662 <_printf_float+0xae>
 800a728:	232d      	movs	r3, #45	; 0x2d
 800a72a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a72e:	e798      	b.n	800a662 <_printf_float+0xae>
 800a730:	9a06      	ldr	r2, [sp, #24]
 800a732:	2a47      	cmp	r2, #71	; 0x47
 800a734:	d1be      	bne.n	800a6b4 <_printf_float+0x100>
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1bc      	bne.n	800a6b4 <_printf_float+0x100>
 800a73a:	2301      	movs	r3, #1
 800a73c:	e7b9      	b.n	800a6b2 <_printf_float+0xfe>
 800a73e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a742:	d118      	bne.n	800a776 <_printf_float+0x1c2>
 800a744:	2900      	cmp	r1, #0
 800a746:	6863      	ldr	r3, [r4, #4]
 800a748:	dd0b      	ble.n	800a762 <_printf_float+0x1ae>
 800a74a:	6121      	str	r1, [r4, #16]
 800a74c:	b913      	cbnz	r3, 800a754 <_printf_float+0x1a0>
 800a74e:	6822      	ldr	r2, [r4, #0]
 800a750:	07d0      	lsls	r0, r2, #31
 800a752:	d502      	bpl.n	800a75a <_printf_float+0x1a6>
 800a754:	3301      	adds	r3, #1
 800a756:	440b      	add	r3, r1
 800a758:	6123      	str	r3, [r4, #16]
 800a75a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a75c:	f04f 0900 	mov.w	r9, #0
 800a760:	e7de      	b.n	800a720 <_printf_float+0x16c>
 800a762:	b913      	cbnz	r3, 800a76a <_printf_float+0x1b6>
 800a764:	6822      	ldr	r2, [r4, #0]
 800a766:	07d2      	lsls	r2, r2, #31
 800a768:	d501      	bpl.n	800a76e <_printf_float+0x1ba>
 800a76a:	3302      	adds	r3, #2
 800a76c:	e7f4      	b.n	800a758 <_printf_float+0x1a4>
 800a76e:	2301      	movs	r3, #1
 800a770:	e7f2      	b.n	800a758 <_printf_float+0x1a4>
 800a772:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a778:	4299      	cmp	r1, r3
 800a77a:	db05      	blt.n	800a788 <_printf_float+0x1d4>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	6121      	str	r1, [r4, #16]
 800a780:	07d8      	lsls	r0, r3, #31
 800a782:	d5ea      	bpl.n	800a75a <_printf_float+0x1a6>
 800a784:	1c4b      	adds	r3, r1, #1
 800a786:	e7e7      	b.n	800a758 <_printf_float+0x1a4>
 800a788:	2900      	cmp	r1, #0
 800a78a:	bfd4      	ite	le
 800a78c:	f1c1 0202 	rsble	r2, r1, #2
 800a790:	2201      	movgt	r2, #1
 800a792:	4413      	add	r3, r2
 800a794:	e7e0      	b.n	800a758 <_printf_float+0x1a4>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	055a      	lsls	r2, r3, #21
 800a79a:	d407      	bmi.n	800a7ac <_printf_float+0x1f8>
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	4642      	mov	r2, r8
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b8      	blx	r7
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d12c      	bne.n	800a804 <_printf_float+0x250>
 800a7aa:	e764      	b.n	800a676 <_printf_float+0xc2>
 800a7ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7b0:	f240 80e0 	bls.w	800a974 <_printf_float+0x3c0>
 800a7b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f7f6 f9a4 	bl	8000b08 <__aeabi_dcmpeq>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d034      	beq.n	800a82e <_printf_float+0x27a>
 800a7c4:	4a37      	ldr	r2, [pc, #220]	; (800a8a4 <_printf_float+0x2f0>)
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	47b8      	blx	r7
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	f43f af51 	beq.w	800a676 <_printf_float+0xc2>
 800a7d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	db02      	blt.n	800a7e2 <_printf_float+0x22e>
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	07d8      	lsls	r0, r3, #31
 800a7e0:	d510      	bpl.n	800a804 <_printf_float+0x250>
 800a7e2:	ee18 3a10 	vmov	r3, s16
 800a7e6:	4652      	mov	r2, sl
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b8      	blx	r7
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f43f af41 	beq.w	800a676 <_printf_float+0xc2>
 800a7f4:	f04f 0800 	mov.w	r8, #0
 800a7f8:	f104 091a 	add.w	r9, r4, #26
 800a7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fe:	3b01      	subs	r3, #1
 800a800:	4543      	cmp	r3, r8
 800a802:	dc09      	bgt.n	800a818 <_printf_float+0x264>
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	079b      	lsls	r3, r3, #30
 800a808:	f100 8105 	bmi.w	800aa16 <_printf_float+0x462>
 800a80c:	68e0      	ldr	r0, [r4, #12]
 800a80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a810:	4298      	cmp	r0, r3
 800a812:	bfb8      	it	lt
 800a814:	4618      	movlt	r0, r3
 800a816:	e730      	b.n	800a67a <_printf_float+0xc6>
 800a818:	2301      	movs	r3, #1
 800a81a:	464a      	mov	r2, r9
 800a81c:	4631      	mov	r1, r6
 800a81e:	4628      	mov	r0, r5
 800a820:	47b8      	blx	r7
 800a822:	3001      	adds	r0, #1
 800a824:	f43f af27 	beq.w	800a676 <_printf_float+0xc2>
 800a828:	f108 0801 	add.w	r8, r8, #1
 800a82c:	e7e6      	b.n	800a7fc <_printf_float+0x248>
 800a82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	dc39      	bgt.n	800a8a8 <_printf_float+0x2f4>
 800a834:	4a1b      	ldr	r2, [pc, #108]	; (800a8a4 <_printf_float+0x2f0>)
 800a836:	2301      	movs	r3, #1
 800a838:	4631      	mov	r1, r6
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	f43f af19 	beq.w	800a676 <_printf_float+0xc2>
 800a844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a848:	4313      	orrs	r3, r2
 800a84a:	d102      	bne.n	800a852 <_printf_float+0x29e>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	07d9      	lsls	r1, r3, #31
 800a850:	d5d8      	bpl.n	800a804 <_printf_float+0x250>
 800a852:	ee18 3a10 	vmov	r3, s16
 800a856:	4652      	mov	r2, sl
 800a858:	4631      	mov	r1, r6
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b8      	blx	r7
 800a85e:	3001      	adds	r0, #1
 800a860:	f43f af09 	beq.w	800a676 <_printf_float+0xc2>
 800a864:	f04f 0900 	mov.w	r9, #0
 800a868:	f104 0a1a 	add.w	sl, r4, #26
 800a86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a86e:	425b      	negs	r3, r3
 800a870:	454b      	cmp	r3, r9
 800a872:	dc01      	bgt.n	800a878 <_printf_float+0x2c4>
 800a874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a876:	e792      	b.n	800a79e <_printf_float+0x1ea>
 800a878:	2301      	movs	r3, #1
 800a87a:	4652      	mov	r2, sl
 800a87c:	4631      	mov	r1, r6
 800a87e:	4628      	mov	r0, r5
 800a880:	47b8      	blx	r7
 800a882:	3001      	adds	r0, #1
 800a884:	f43f aef7 	beq.w	800a676 <_printf_float+0xc2>
 800a888:	f109 0901 	add.w	r9, r9, #1
 800a88c:	e7ee      	b.n	800a86c <_printf_float+0x2b8>
 800a88e:	bf00      	nop
 800a890:	7fefffff 	.word	0x7fefffff
 800a894:	0800d424 	.word	0x0800d424
 800a898:	0800d428 	.word	0x0800d428
 800a89c:	0800d430 	.word	0x0800d430
 800a8a0:	0800d42c 	.word	0x0800d42c
 800a8a4:	0800d434 	.word	0x0800d434
 800a8a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	bfa8      	it	ge
 800a8b0:	461a      	movge	r2, r3
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	4691      	mov	r9, r2
 800a8b6:	dc37      	bgt.n	800a928 <_printf_float+0x374>
 800a8b8:	f04f 0b00 	mov.w	fp, #0
 800a8bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8c0:	f104 021a 	add.w	r2, r4, #26
 800a8c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8c6:	9305      	str	r3, [sp, #20]
 800a8c8:	eba3 0309 	sub.w	r3, r3, r9
 800a8cc:	455b      	cmp	r3, fp
 800a8ce:	dc33      	bgt.n	800a938 <_printf_float+0x384>
 800a8d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	db3b      	blt.n	800a950 <_printf_float+0x39c>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	07da      	lsls	r2, r3, #31
 800a8dc:	d438      	bmi.n	800a950 <_printf_float+0x39c>
 800a8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e0:	9a05      	ldr	r2, [sp, #20]
 800a8e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8e4:	1a9a      	subs	r2, r3, r2
 800a8e6:	eba3 0901 	sub.w	r9, r3, r1
 800a8ea:	4591      	cmp	r9, r2
 800a8ec:	bfa8      	it	ge
 800a8ee:	4691      	movge	r9, r2
 800a8f0:	f1b9 0f00 	cmp.w	r9, #0
 800a8f4:	dc35      	bgt.n	800a962 <_printf_float+0x3ae>
 800a8f6:	f04f 0800 	mov.w	r8, #0
 800a8fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8fe:	f104 0a1a 	add.w	sl, r4, #26
 800a902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a906:	1a9b      	subs	r3, r3, r2
 800a908:	eba3 0309 	sub.w	r3, r3, r9
 800a90c:	4543      	cmp	r3, r8
 800a90e:	f77f af79 	ble.w	800a804 <_printf_float+0x250>
 800a912:	2301      	movs	r3, #1
 800a914:	4652      	mov	r2, sl
 800a916:	4631      	mov	r1, r6
 800a918:	4628      	mov	r0, r5
 800a91a:	47b8      	blx	r7
 800a91c:	3001      	adds	r0, #1
 800a91e:	f43f aeaa 	beq.w	800a676 <_printf_float+0xc2>
 800a922:	f108 0801 	add.w	r8, r8, #1
 800a926:	e7ec      	b.n	800a902 <_printf_float+0x34e>
 800a928:	4613      	mov	r3, r2
 800a92a:	4631      	mov	r1, r6
 800a92c:	4642      	mov	r2, r8
 800a92e:	4628      	mov	r0, r5
 800a930:	47b8      	blx	r7
 800a932:	3001      	adds	r0, #1
 800a934:	d1c0      	bne.n	800a8b8 <_printf_float+0x304>
 800a936:	e69e      	b.n	800a676 <_printf_float+0xc2>
 800a938:	2301      	movs	r3, #1
 800a93a:	4631      	mov	r1, r6
 800a93c:	4628      	mov	r0, r5
 800a93e:	9205      	str	r2, [sp, #20]
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	f43f ae97 	beq.w	800a676 <_printf_float+0xc2>
 800a948:	9a05      	ldr	r2, [sp, #20]
 800a94a:	f10b 0b01 	add.w	fp, fp, #1
 800a94e:	e7b9      	b.n	800a8c4 <_printf_float+0x310>
 800a950:	ee18 3a10 	vmov	r3, s16
 800a954:	4652      	mov	r2, sl
 800a956:	4631      	mov	r1, r6
 800a958:	4628      	mov	r0, r5
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	d1be      	bne.n	800a8de <_printf_float+0x32a>
 800a960:	e689      	b.n	800a676 <_printf_float+0xc2>
 800a962:	9a05      	ldr	r2, [sp, #20]
 800a964:	464b      	mov	r3, r9
 800a966:	4442      	add	r2, r8
 800a968:	4631      	mov	r1, r6
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b8      	blx	r7
 800a96e:	3001      	adds	r0, #1
 800a970:	d1c1      	bne.n	800a8f6 <_printf_float+0x342>
 800a972:	e680      	b.n	800a676 <_printf_float+0xc2>
 800a974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a976:	2a01      	cmp	r2, #1
 800a978:	dc01      	bgt.n	800a97e <_printf_float+0x3ca>
 800a97a:	07db      	lsls	r3, r3, #31
 800a97c:	d538      	bpl.n	800a9f0 <_printf_float+0x43c>
 800a97e:	2301      	movs	r3, #1
 800a980:	4642      	mov	r2, r8
 800a982:	4631      	mov	r1, r6
 800a984:	4628      	mov	r0, r5
 800a986:	47b8      	blx	r7
 800a988:	3001      	adds	r0, #1
 800a98a:	f43f ae74 	beq.w	800a676 <_printf_float+0xc2>
 800a98e:	ee18 3a10 	vmov	r3, s16
 800a992:	4652      	mov	r2, sl
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	47b8      	blx	r7
 800a99a:	3001      	adds	r0, #1
 800a99c:	f43f ae6b 	beq.w	800a676 <_printf_float+0xc2>
 800a9a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f7f6 f8ae 	bl	8000b08 <__aeabi_dcmpeq>
 800a9ac:	b9d8      	cbnz	r0, 800a9e6 <_printf_float+0x432>
 800a9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b0:	f108 0201 	add.w	r2, r8, #1
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	47b8      	blx	r7
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d10e      	bne.n	800a9de <_printf_float+0x42a>
 800a9c0:	e659      	b.n	800a676 <_printf_float+0xc2>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	f43f ae52 	beq.w	800a676 <_printf_float+0xc2>
 800a9d2:	f108 0801 	add.w	r8, r8, #1
 800a9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	4543      	cmp	r3, r8
 800a9dc:	dcf1      	bgt.n	800a9c2 <_printf_float+0x40e>
 800a9de:	464b      	mov	r3, r9
 800a9e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9e4:	e6dc      	b.n	800a7a0 <_printf_float+0x1ec>
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	f104 0a1a 	add.w	sl, r4, #26
 800a9ee:	e7f2      	b.n	800a9d6 <_printf_float+0x422>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4642      	mov	r2, r8
 800a9f4:	e7df      	b.n	800a9b6 <_printf_float+0x402>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	464a      	mov	r2, r9
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	47b8      	blx	r7
 800aa00:	3001      	adds	r0, #1
 800aa02:	f43f ae38 	beq.w	800a676 <_printf_float+0xc2>
 800aa06:	f108 0801 	add.w	r8, r8, #1
 800aa0a:	68e3      	ldr	r3, [r4, #12]
 800aa0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa0e:	1a5b      	subs	r3, r3, r1
 800aa10:	4543      	cmp	r3, r8
 800aa12:	dcf0      	bgt.n	800a9f6 <_printf_float+0x442>
 800aa14:	e6fa      	b.n	800a80c <_printf_float+0x258>
 800aa16:	f04f 0800 	mov.w	r8, #0
 800aa1a:	f104 0919 	add.w	r9, r4, #25
 800aa1e:	e7f4      	b.n	800aa0a <_printf_float+0x456>

0800aa20 <_printf_common>:
 800aa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	4616      	mov	r6, r2
 800aa26:	4699      	mov	r9, r3
 800aa28:	688a      	ldr	r2, [r1, #8]
 800aa2a:	690b      	ldr	r3, [r1, #16]
 800aa2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa30:	4293      	cmp	r3, r2
 800aa32:	bfb8      	it	lt
 800aa34:	4613      	movlt	r3, r2
 800aa36:	6033      	str	r3, [r6, #0]
 800aa38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	b10a      	cbz	r2, 800aa46 <_printf_common+0x26>
 800aa42:	3301      	adds	r3, #1
 800aa44:	6033      	str	r3, [r6, #0]
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	0699      	lsls	r1, r3, #26
 800aa4a:	bf42      	ittt	mi
 800aa4c:	6833      	ldrmi	r3, [r6, #0]
 800aa4e:	3302      	addmi	r3, #2
 800aa50:	6033      	strmi	r3, [r6, #0]
 800aa52:	6825      	ldr	r5, [r4, #0]
 800aa54:	f015 0506 	ands.w	r5, r5, #6
 800aa58:	d106      	bne.n	800aa68 <_printf_common+0x48>
 800aa5a:	f104 0a19 	add.w	sl, r4, #25
 800aa5e:	68e3      	ldr	r3, [r4, #12]
 800aa60:	6832      	ldr	r2, [r6, #0]
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	42ab      	cmp	r3, r5
 800aa66:	dc26      	bgt.n	800aab6 <_printf_common+0x96>
 800aa68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa6c:	1e13      	subs	r3, r2, #0
 800aa6e:	6822      	ldr	r2, [r4, #0]
 800aa70:	bf18      	it	ne
 800aa72:	2301      	movne	r3, #1
 800aa74:	0692      	lsls	r2, r2, #26
 800aa76:	d42b      	bmi.n	800aad0 <_printf_common+0xb0>
 800aa78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4638      	mov	r0, r7
 800aa80:	47c0      	blx	r8
 800aa82:	3001      	adds	r0, #1
 800aa84:	d01e      	beq.n	800aac4 <_printf_common+0xa4>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	68e5      	ldr	r5, [r4, #12]
 800aa8a:	6832      	ldr	r2, [r6, #0]
 800aa8c:	f003 0306 	and.w	r3, r3, #6
 800aa90:	2b04      	cmp	r3, #4
 800aa92:	bf08      	it	eq
 800aa94:	1aad      	subeq	r5, r5, r2
 800aa96:	68a3      	ldr	r3, [r4, #8]
 800aa98:	6922      	ldr	r2, [r4, #16]
 800aa9a:	bf0c      	ite	eq
 800aa9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaa0:	2500      	movne	r5, #0
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	bfc4      	itt	gt
 800aaa6:	1a9b      	subgt	r3, r3, r2
 800aaa8:	18ed      	addgt	r5, r5, r3
 800aaaa:	2600      	movs	r6, #0
 800aaac:	341a      	adds	r4, #26
 800aaae:	42b5      	cmp	r5, r6
 800aab0:	d11a      	bne.n	800aae8 <_printf_common+0xc8>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e008      	b.n	800aac8 <_printf_common+0xa8>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4652      	mov	r2, sl
 800aaba:	4649      	mov	r1, r9
 800aabc:	4638      	mov	r0, r7
 800aabe:	47c0      	blx	r8
 800aac0:	3001      	adds	r0, #1
 800aac2:	d103      	bne.n	800aacc <_printf_common+0xac>
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	3501      	adds	r5, #1
 800aace:	e7c6      	b.n	800aa5e <_printf_common+0x3e>
 800aad0:	18e1      	adds	r1, r4, r3
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	2030      	movs	r0, #48	; 0x30
 800aad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aada:	4422      	add	r2, r4
 800aadc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aae4:	3302      	adds	r3, #2
 800aae6:	e7c7      	b.n	800aa78 <_printf_common+0x58>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4622      	mov	r2, r4
 800aaec:	4649      	mov	r1, r9
 800aaee:	4638      	mov	r0, r7
 800aaf0:	47c0      	blx	r8
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d0e6      	beq.n	800aac4 <_printf_common+0xa4>
 800aaf6:	3601      	adds	r6, #1
 800aaf8:	e7d9      	b.n	800aaae <_printf_common+0x8e>
	...

0800aafc <_printf_i>:
 800aafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	7e0f      	ldrb	r7, [r1, #24]
 800ab02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab04:	2f78      	cmp	r7, #120	; 0x78
 800ab06:	4691      	mov	r9, r2
 800ab08:	4680      	mov	r8, r0
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	469a      	mov	sl, r3
 800ab0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab12:	d807      	bhi.n	800ab24 <_printf_i+0x28>
 800ab14:	2f62      	cmp	r7, #98	; 0x62
 800ab16:	d80a      	bhi.n	800ab2e <_printf_i+0x32>
 800ab18:	2f00      	cmp	r7, #0
 800ab1a:	f000 80d8 	beq.w	800acce <_printf_i+0x1d2>
 800ab1e:	2f58      	cmp	r7, #88	; 0x58
 800ab20:	f000 80a3 	beq.w	800ac6a <_printf_i+0x16e>
 800ab24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab2c:	e03a      	b.n	800aba4 <_printf_i+0xa8>
 800ab2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab32:	2b15      	cmp	r3, #21
 800ab34:	d8f6      	bhi.n	800ab24 <_printf_i+0x28>
 800ab36:	a101      	add	r1, pc, #4	; (adr r1, 800ab3c <_printf_i+0x40>)
 800ab38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab3c:	0800ab95 	.word	0x0800ab95
 800ab40:	0800aba9 	.word	0x0800aba9
 800ab44:	0800ab25 	.word	0x0800ab25
 800ab48:	0800ab25 	.word	0x0800ab25
 800ab4c:	0800ab25 	.word	0x0800ab25
 800ab50:	0800ab25 	.word	0x0800ab25
 800ab54:	0800aba9 	.word	0x0800aba9
 800ab58:	0800ab25 	.word	0x0800ab25
 800ab5c:	0800ab25 	.word	0x0800ab25
 800ab60:	0800ab25 	.word	0x0800ab25
 800ab64:	0800ab25 	.word	0x0800ab25
 800ab68:	0800acb5 	.word	0x0800acb5
 800ab6c:	0800abd9 	.word	0x0800abd9
 800ab70:	0800ac97 	.word	0x0800ac97
 800ab74:	0800ab25 	.word	0x0800ab25
 800ab78:	0800ab25 	.word	0x0800ab25
 800ab7c:	0800acd7 	.word	0x0800acd7
 800ab80:	0800ab25 	.word	0x0800ab25
 800ab84:	0800abd9 	.word	0x0800abd9
 800ab88:	0800ab25 	.word	0x0800ab25
 800ab8c:	0800ab25 	.word	0x0800ab25
 800ab90:	0800ac9f 	.word	0x0800ac9f
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	1d1a      	adds	r2, r3, #4
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	602a      	str	r2, [r5, #0]
 800ab9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aba4:	2301      	movs	r3, #1
 800aba6:	e0a3      	b.n	800acf0 <_printf_i+0x1f4>
 800aba8:	6820      	ldr	r0, [r4, #0]
 800abaa:	6829      	ldr	r1, [r5, #0]
 800abac:	0606      	lsls	r6, r0, #24
 800abae:	f101 0304 	add.w	r3, r1, #4
 800abb2:	d50a      	bpl.n	800abca <_printf_i+0xce>
 800abb4:	680e      	ldr	r6, [r1, #0]
 800abb6:	602b      	str	r3, [r5, #0]
 800abb8:	2e00      	cmp	r6, #0
 800abba:	da03      	bge.n	800abc4 <_printf_i+0xc8>
 800abbc:	232d      	movs	r3, #45	; 0x2d
 800abbe:	4276      	negs	r6, r6
 800abc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc4:	485e      	ldr	r0, [pc, #376]	; (800ad40 <_printf_i+0x244>)
 800abc6:	230a      	movs	r3, #10
 800abc8:	e019      	b.n	800abfe <_printf_i+0x102>
 800abca:	680e      	ldr	r6, [r1, #0]
 800abcc:	602b      	str	r3, [r5, #0]
 800abce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800abd2:	bf18      	it	ne
 800abd4:	b236      	sxthne	r6, r6
 800abd6:	e7ef      	b.n	800abb8 <_printf_i+0xbc>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	6820      	ldr	r0, [r4, #0]
 800abdc:	1d19      	adds	r1, r3, #4
 800abde:	6029      	str	r1, [r5, #0]
 800abe0:	0601      	lsls	r1, r0, #24
 800abe2:	d501      	bpl.n	800abe8 <_printf_i+0xec>
 800abe4:	681e      	ldr	r6, [r3, #0]
 800abe6:	e002      	b.n	800abee <_printf_i+0xf2>
 800abe8:	0646      	lsls	r6, r0, #25
 800abea:	d5fb      	bpl.n	800abe4 <_printf_i+0xe8>
 800abec:	881e      	ldrh	r6, [r3, #0]
 800abee:	4854      	ldr	r0, [pc, #336]	; (800ad40 <_printf_i+0x244>)
 800abf0:	2f6f      	cmp	r7, #111	; 0x6f
 800abf2:	bf0c      	ite	eq
 800abf4:	2308      	moveq	r3, #8
 800abf6:	230a      	movne	r3, #10
 800abf8:	2100      	movs	r1, #0
 800abfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abfe:	6865      	ldr	r5, [r4, #4]
 800ac00:	60a5      	str	r5, [r4, #8]
 800ac02:	2d00      	cmp	r5, #0
 800ac04:	bfa2      	ittt	ge
 800ac06:	6821      	ldrge	r1, [r4, #0]
 800ac08:	f021 0104 	bicge.w	r1, r1, #4
 800ac0c:	6021      	strge	r1, [r4, #0]
 800ac0e:	b90e      	cbnz	r6, 800ac14 <_printf_i+0x118>
 800ac10:	2d00      	cmp	r5, #0
 800ac12:	d04d      	beq.n	800acb0 <_printf_i+0x1b4>
 800ac14:	4615      	mov	r5, r2
 800ac16:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac1a:	fb03 6711 	mls	r7, r3, r1, r6
 800ac1e:	5dc7      	ldrb	r7, [r0, r7]
 800ac20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac24:	4637      	mov	r7, r6
 800ac26:	42bb      	cmp	r3, r7
 800ac28:	460e      	mov	r6, r1
 800ac2a:	d9f4      	bls.n	800ac16 <_printf_i+0x11a>
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d10b      	bne.n	800ac48 <_printf_i+0x14c>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	07de      	lsls	r6, r3, #31
 800ac34:	d508      	bpl.n	800ac48 <_printf_i+0x14c>
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	6861      	ldr	r1, [r4, #4]
 800ac3a:	4299      	cmp	r1, r3
 800ac3c:	bfde      	ittt	le
 800ac3e:	2330      	movle	r3, #48	; 0x30
 800ac40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac48:	1b52      	subs	r2, r2, r5
 800ac4a:	6122      	str	r2, [r4, #16]
 800ac4c:	f8cd a000 	str.w	sl, [sp]
 800ac50:	464b      	mov	r3, r9
 800ac52:	aa03      	add	r2, sp, #12
 800ac54:	4621      	mov	r1, r4
 800ac56:	4640      	mov	r0, r8
 800ac58:	f7ff fee2 	bl	800aa20 <_printf_common>
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	d14c      	bne.n	800acfa <_printf_i+0x1fe>
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295
 800ac64:	b004      	add	sp, #16
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	4835      	ldr	r0, [pc, #212]	; (800ad40 <_printf_i+0x244>)
 800ac6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac70:	6829      	ldr	r1, [r5, #0]
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac78:	6029      	str	r1, [r5, #0]
 800ac7a:	061d      	lsls	r5, r3, #24
 800ac7c:	d514      	bpl.n	800aca8 <_printf_i+0x1ac>
 800ac7e:	07df      	lsls	r7, r3, #31
 800ac80:	bf44      	itt	mi
 800ac82:	f043 0320 	orrmi.w	r3, r3, #32
 800ac86:	6023      	strmi	r3, [r4, #0]
 800ac88:	b91e      	cbnz	r6, 800ac92 <_printf_i+0x196>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	f023 0320 	bic.w	r3, r3, #32
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	2310      	movs	r3, #16
 800ac94:	e7b0      	b.n	800abf8 <_printf_i+0xfc>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	f043 0320 	orr.w	r3, r3, #32
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	2378      	movs	r3, #120	; 0x78
 800aca0:	4828      	ldr	r0, [pc, #160]	; (800ad44 <_printf_i+0x248>)
 800aca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aca6:	e7e3      	b.n	800ac70 <_printf_i+0x174>
 800aca8:	0659      	lsls	r1, r3, #25
 800acaa:	bf48      	it	mi
 800acac:	b2b6      	uxthmi	r6, r6
 800acae:	e7e6      	b.n	800ac7e <_printf_i+0x182>
 800acb0:	4615      	mov	r5, r2
 800acb2:	e7bb      	b.n	800ac2c <_printf_i+0x130>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	6826      	ldr	r6, [r4, #0]
 800acb8:	6961      	ldr	r1, [r4, #20]
 800acba:	1d18      	adds	r0, r3, #4
 800acbc:	6028      	str	r0, [r5, #0]
 800acbe:	0635      	lsls	r5, r6, #24
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	d501      	bpl.n	800acc8 <_printf_i+0x1cc>
 800acc4:	6019      	str	r1, [r3, #0]
 800acc6:	e002      	b.n	800acce <_printf_i+0x1d2>
 800acc8:	0670      	lsls	r0, r6, #25
 800acca:	d5fb      	bpl.n	800acc4 <_printf_i+0x1c8>
 800accc:	8019      	strh	r1, [r3, #0]
 800acce:	2300      	movs	r3, #0
 800acd0:	6123      	str	r3, [r4, #16]
 800acd2:	4615      	mov	r5, r2
 800acd4:	e7ba      	b.n	800ac4c <_printf_i+0x150>
 800acd6:	682b      	ldr	r3, [r5, #0]
 800acd8:	1d1a      	adds	r2, r3, #4
 800acda:	602a      	str	r2, [r5, #0]
 800acdc:	681d      	ldr	r5, [r3, #0]
 800acde:	6862      	ldr	r2, [r4, #4]
 800ace0:	2100      	movs	r1, #0
 800ace2:	4628      	mov	r0, r5
 800ace4:	f7f5 fa9c 	bl	8000220 <memchr>
 800ace8:	b108      	cbz	r0, 800acee <_printf_i+0x1f2>
 800acea:	1b40      	subs	r0, r0, r5
 800acec:	6060      	str	r0, [r4, #4]
 800acee:	6863      	ldr	r3, [r4, #4]
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	2300      	movs	r3, #0
 800acf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf8:	e7a8      	b.n	800ac4c <_printf_i+0x150>
 800acfa:	6923      	ldr	r3, [r4, #16]
 800acfc:	462a      	mov	r2, r5
 800acfe:	4649      	mov	r1, r9
 800ad00:	4640      	mov	r0, r8
 800ad02:	47d0      	blx	sl
 800ad04:	3001      	adds	r0, #1
 800ad06:	d0ab      	beq.n	800ac60 <_printf_i+0x164>
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	079b      	lsls	r3, r3, #30
 800ad0c:	d413      	bmi.n	800ad36 <_printf_i+0x23a>
 800ad0e:	68e0      	ldr	r0, [r4, #12]
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	4298      	cmp	r0, r3
 800ad14:	bfb8      	it	lt
 800ad16:	4618      	movlt	r0, r3
 800ad18:	e7a4      	b.n	800ac64 <_printf_i+0x168>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	4632      	mov	r2, r6
 800ad1e:	4649      	mov	r1, r9
 800ad20:	4640      	mov	r0, r8
 800ad22:	47d0      	blx	sl
 800ad24:	3001      	adds	r0, #1
 800ad26:	d09b      	beq.n	800ac60 <_printf_i+0x164>
 800ad28:	3501      	adds	r5, #1
 800ad2a:	68e3      	ldr	r3, [r4, #12]
 800ad2c:	9903      	ldr	r1, [sp, #12]
 800ad2e:	1a5b      	subs	r3, r3, r1
 800ad30:	42ab      	cmp	r3, r5
 800ad32:	dcf2      	bgt.n	800ad1a <_printf_i+0x21e>
 800ad34:	e7eb      	b.n	800ad0e <_printf_i+0x212>
 800ad36:	2500      	movs	r5, #0
 800ad38:	f104 0619 	add.w	r6, r4, #25
 800ad3c:	e7f5      	b.n	800ad2a <_printf_i+0x22e>
 800ad3e:	bf00      	nop
 800ad40:	0800d436 	.word	0x0800d436
 800ad44:	0800d447 	.word	0x0800d447

0800ad48 <iprintf>:
 800ad48:	b40f      	push	{r0, r1, r2, r3}
 800ad4a:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <iprintf+0x2c>)
 800ad4c:	b513      	push	{r0, r1, r4, lr}
 800ad4e:	681c      	ldr	r4, [r3, #0]
 800ad50:	b124      	cbz	r4, 800ad5c <iprintf+0x14>
 800ad52:	69a3      	ldr	r3, [r4, #24]
 800ad54:	b913      	cbnz	r3, 800ad5c <iprintf+0x14>
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 ff00 	bl	800bb5c <__sinit>
 800ad5c:	ab05      	add	r3, sp, #20
 800ad5e:	9a04      	ldr	r2, [sp, #16]
 800ad60:	68a1      	ldr	r1, [r4, #8]
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	4620      	mov	r0, r4
 800ad66:	f001 fdb5 	bl	800c8d4 <_vfiprintf_r>
 800ad6a:	b002      	add	sp, #8
 800ad6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad70:	b004      	add	sp, #16
 800ad72:	4770      	bx	lr
 800ad74:	2000000c 	.word	0x2000000c

0800ad78 <_vsiprintf_r>:
 800ad78:	b500      	push	{lr}
 800ad7a:	b09b      	sub	sp, #108	; 0x6c
 800ad7c:	9100      	str	r1, [sp, #0]
 800ad7e:	9104      	str	r1, [sp, #16]
 800ad80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad84:	9105      	str	r1, [sp, #20]
 800ad86:	9102      	str	r1, [sp, #8]
 800ad88:	4905      	ldr	r1, [pc, #20]	; (800ada0 <_vsiprintf_r+0x28>)
 800ad8a:	9103      	str	r1, [sp, #12]
 800ad8c:	4669      	mov	r1, sp
 800ad8e:	f001 fc77 	bl	800c680 <_svfiprintf_r>
 800ad92:	9b00      	ldr	r3, [sp, #0]
 800ad94:	2200      	movs	r2, #0
 800ad96:	701a      	strb	r2, [r3, #0]
 800ad98:	b01b      	add	sp, #108	; 0x6c
 800ad9a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad9e:	bf00      	nop
 800ada0:	ffff0208 	.word	0xffff0208

0800ada4 <vsiprintf>:
 800ada4:	4613      	mov	r3, r2
 800ada6:	460a      	mov	r2, r1
 800ada8:	4601      	mov	r1, r0
 800adaa:	4802      	ldr	r0, [pc, #8]	; (800adb4 <vsiprintf+0x10>)
 800adac:	6800      	ldr	r0, [r0, #0]
 800adae:	f7ff bfe3 	b.w	800ad78 <_vsiprintf_r>
 800adb2:	bf00      	nop
 800adb4:	2000000c 	.word	0x2000000c

0800adb8 <quorem>:
 800adb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	6903      	ldr	r3, [r0, #16]
 800adbe:	690c      	ldr	r4, [r1, #16]
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	4607      	mov	r7, r0
 800adc4:	f2c0 8081 	blt.w	800aeca <quorem+0x112>
 800adc8:	3c01      	subs	r4, #1
 800adca:	f101 0814 	add.w	r8, r1, #20
 800adce:	f100 0514 	add.w	r5, r0, #20
 800add2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800addc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ade0:	3301      	adds	r3, #1
 800ade2:	429a      	cmp	r2, r3
 800ade4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ade8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adec:	fbb2 f6f3 	udiv	r6, r2, r3
 800adf0:	d331      	bcc.n	800ae56 <quorem+0x9e>
 800adf2:	f04f 0e00 	mov.w	lr, #0
 800adf6:	4640      	mov	r0, r8
 800adf8:	46ac      	mov	ip, r5
 800adfa:	46f2      	mov	sl, lr
 800adfc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae00:	b293      	uxth	r3, r2
 800ae02:	fb06 e303 	mla	r3, r6, r3, lr
 800ae06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	ebaa 0303 	sub.w	r3, sl, r3
 800ae10:	f8dc a000 	ldr.w	sl, [ip]
 800ae14:	0c12      	lsrs	r2, r2, #16
 800ae16:	fa13 f38a 	uxtah	r3, r3, sl
 800ae1a:	fb06 e202 	mla	r2, r6, r2, lr
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	9b00      	ldr	r3, [sp, #0]
 800ae22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae26:	b292      	uxth	r2, r2
 800ae28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae30:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae34:	4581      	cmp	r9, r0
 800ae36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae3a:	f84c 3b04 	str.w	r3, [ip], #4
 800ae3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae42:	d2db      	bcs.n	800adfc <quorem+0x44>
 800ae44:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae48:	b92b      	cbnz	r3, 800ae56 <quorem+0x9e>
 800ae4a:	9b01      	ldr	r3, [sp, #4]
 800ae4c:	3b04      	subs	r3, #4
 800ae4e:	429d      	cmp	r5, r3
 800ae50:	461a      	mov	r2, r3
 800ae52:	d32e      	bcc.n	800aeb2 <quorem+0xfa>
 800ae54:	613c      	str	r4, [r7, #16]
 800ae56:	4638      	mov	r0, r7
 800ae58:	f001 f9be 	bl	800c1d8 <__mcmp>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	db24      	blt.n	800aeaa <quorem+0xf2>
 800ae60:	3601      	adds	r6, #1
 800ae62:	4628      	mov	r0, r5
 800ae64:	f04f 0c00 	mov.w	ip, #0
 800ae68:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae6c:	f8d0 e000 	ldr.w	lr, [r0]
 800ae70:	b293      	uxth	r3, r2
 800ae72:	ebac 0303 	sub.w	r3, ip, r3
 800ae76:	0c12      	lsrs	r2, r2, #16
 800ae78:	fa13 f38e 	uxtah	r3, r3, lr
 800ae7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae8a:	45c1      	cmp	r9, r8
 800ae8c:	f840 3b04 	str.w	r3, [r0], #4
 800ae90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae94:	d2e8      	bcs.n	800ae68 <quorem+0xb0>
 800ae96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae9e:	b922      	cbnz	r2, 800aeaa <quorem+0xf2>
 800aea0:	3b04      	subs	r3, #4
 800aea2:	429d      	cmp	r5, r3
 800aea4:	461a      	mov	r2, r3
 800aea6:	d30a      	bcc.n	800aebe <quorem+0x106>
 800aea8:	613c      	str	r4, [r7, #16]
 800aeaa:	4630      	mov	r0, r6
 800aeac:	b003      	add	sp, #12
 800aeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb2:	6812      	ldr	r2, [r2, #0]
 800aeb4:	3b04      	subs	r3, #4
 800aeb6:	2a00      	cmp	r2, #0
 800aeb8:	d1cc      	bne.n	800ae54 <quorem+0x9c>
 800aeba:	3c01      	subs	r4, #1
 800aebc:	e7c7      	b.n	800ae4e <quorem+0x96>
 800aebe:	6812      	ldr	r2, [r2, #0]
 800aec0:	3b04      	subs	r3, #4
 800aec2:	2a00      	cmp	r2, #0
 800aec4:	d1f0      	bne.n	800aea8 <quorem+0xf0>
 800aec6:	3c01      	subs	r4, #1
 800aec8:	e7eb      	b.n	800aea2 <quorem+0xea>
 800aeca:	2000      	movs	r0, #0
 800aecc:	e7ee      	b.n	800aeac <quorem+0xf4>
	...

0800aed0 <_dtoa_r>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	ed2d 8b04 	vpush	{d8-d9}
 800aed8:	ec57 6b10 	vmov	r6, r7, d0
 800aedc:	b093      	sub	sp, #76	; 0x4c
 800aede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aee0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aee4:	9106      	str	r1, [sp, #24]
 800aee6:	ee10 aa10 	vmov	sl, s0
 800aeea:	4604      	mov	r4, r0
 800aeec:	9209      	str	r2, [sp, #36]	; 0x24
 800aeee:	930c      	str	r3, [sp, #48]	; 0x30
 800aef0:	46bb      	mov	fp, r7
 800aef2:	b975      	cbnz	r5, 800af12 <_dtoa_r+0x42>
 800aef4:	2010      	movs	r0, #16
 800aef6:	f000 fed7 	bl	800bca8 <malloc>
 800aefa:	4602      	mov	r2, r0
 800aefc:	6260      	str	r0, [r4, #36]	; 0x24
 800aefe:	b920      	cbnz	r0, 800af0a <_dtoa_r+0x3a>
 800af00:	4ba7      	ldr	r3, [pc, #668]	; (800b1a0 <_dtoa_r+0x2d0>)
 800af02:	21ea      	movs	r1, #234	; 0xea
 800af04:	48a7      	ldr	r0, [pc, #668]	; (800b1a4 <_dtoa_r+0x2d4>)
 800af06:	f001 ff3b 	bl	800cd80 <__assert_func>
 800af0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af0e:	6005      	str	r5, [r0, #0]
 800af10:	60c5      	str	r5, [r0, #12]
 800af12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af14:	6819      	ldr	r1, [r3, #0]
 800af16:	b151      	cbz	r1, 800af2e <_dtoa_r+0x5e>
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	604a      	str	r2, [r1, #4]
 800af1c:	2301      	movs	r3, #1
 800af1e:	4093      	lsls	r3, r2
 800af20:	608b      	str	r3, [r1, #8]
 800af22:	4620      	mov	r0, r4
 800af24:	f000 ff16 	bl	800bd54 <_Bfree>
 800af28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
 800af2e:	1e3b      	subs	r3, r7, #0
 800af30:	bfaa      	itet	ge
 800af32:	2300      	movge	r3, #0
 800af34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800af38:	f8c8 3000 	strge.w	r3, [r8]
 800af3c:	4b9a      	ldr	r3, [pc, #616]	; (800b1a8 <_dtoa_r+0x2d8>)
 800af3e:	bfbc      	itt	lt
 800af40:	2201      	movlt	r2, #1
 800af42:	f8c8 2000 	strlt.w	r2, [r8]
 800af46:	ea33 030b 	bics.w	r3, r3, fp
 800af4a:	d11b      	bne.n	800af84 <_dtoa_r+0xb4>
 800af4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af58:	4333      	orrs	r3, r6
 800af5a:	f000 8592 	beq.w	800ba82 <_dtoa_r+0xbb2>
 800af5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af60:	b963      	cbnz	r3, 800af7c <_dtoa_r+0xac>
 800af62:	4b92      	ldr	r3, [pc, #584]	; (800b1ac <_dtoa_r+0x2dc>)
 800af64:	e022      	b.n	800afac <_dtoa_r+0xdc>
 800af66:	4b92      	ldr	r3, [pc, #584]	; (800b1b0 <_dtoa_r+0x2e0>)
 800af68:	9301      	str	r3, [sp, #4]
 800af6a:	3308      	adds	r3, #8
 800af6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	9801      	ldr	r0, [sp, #4]
 800af72:	b013      	add	sp, #76	; 0x4c
 800af74:	ecbd 8b04 	vpop	{d8-d9}
 800af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7c:	4b8b      	ldr	r3, [pc, #556]	; (800b1ac <_dtoa_r+0x2dc>)
 800af7e:	9301      	str	r3, [sp, #4]
 800af80:	3303      	adds	r3, #3
 800af82:	e7f3      	b.n	800af6c <_dtoa_r+0x9c>
 800af84:	2200      	movs	r2, #0
 800af86:	2300      	movs	r3, #0
 800af88:	4650      	mov	r0, sl
 800af8a:	4659      	mov	r1, fp
 800af8c:	f7f5 fdbc 	bl	8000b08 <__aeabi_dcmpeq>
 800af90:	ec4b ab19 	vmov	d9, sl, fp
 800af94:	4680      	mov	r8, r0
 800af96:	b158      	cbz	r0, 800afb0 <_dtoa_r+0xe0>
 800af98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af9a:	2301      	movs	r3, #1
 800af9c:	6013      	str	r3, [r2, #0]
 800af9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f000 856b 	beq.w	800ba7c <_dtoa_r+0xbac>
 800afa6:	4883      	ldr	r0, [pc, #524]	; (800b1b4 <_dtoa_r+0x2e4>)
 800afa8:	6018      	str	r0, [r3, #0]
 800afaa:	1e43      	subs	r3, r0, #1
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	e7df      	b.n	800af70 <_dtoa_r+0xa0>
 800afb0:	ec4b ab10 	vmov	d0, sl, fp
 800afb4:	aa10      	add	r2, sp, #64	; 0x40
 800afb6:	a911      	add	r1, sp, #68	; 0x44
 800afb8:	4620      	mov	r0, r4
 800afba:	f001 f9b3 	bl	800c324 <__d2b>
 800afbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800afc2:	ee08 0a10 	vmov	s16, r0
 800afc6:	2d00      	cmp	r5, #0
 800afc8:	f000 8084 	beq.w	800b0d4 <_dtoa_r+0x204>
 800afcc:	ee19 3a90 	vmov	r3, s19
 800afd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800afd8:	4656      	mov	r6, sl
 800afda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800afde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800afe2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800afe6:	4b74      	ldr	r3, [pc, #464]	; (800b1b8 <_dtoa_r+0x2e8>)
 800afe8:	2200      	movs	r2, #0
 800afea:	4630      	mov	r0, r6
 800afec:	4639      	mov	r1, r7
 800afee:	f7f5 f96b 	bl	80002c8 <__aeabi_dsub>
 800aff2:	a365      	add	r3, pc, #404	; (adr r3, 800b188 <_dtoa_r+0x2b8>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	f7f5 fb1e 	bl	8000638 <__aeabi_dmul>
 800affc:	a364      	add	r3, pc, #400	; (adr r3, 800b190 <_dtoa_r+0x2c0>)
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	f7f5 f963 	bl	80002cc <__adddf3>
 800b006:	4606      	mov	r6, r0
 800b008:	4628      	mov	r0, r5
 800b00a:	460f      	mov	r7, r1
 800b00c:	f7f5 faaa 	bl	8000564 <__aeabi_i2d>
 800b010:	a361      	add	r3, pc, #388	; (adr r3, 800b198 <_dtoa_r+0x2c8>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f7f5 fb0f 	bl	8000638 <__aeabi_dmul>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4630      	mov	r0, r6
 800b020:	4639      	mov	r1, r7
 800b022:	f7f5 f953 	bl	80002cc <__adddf3>
 800b026:	4606      	mov	r6, r0
 800b028:	460f      	mov	r7, r1
 800b02a:	f7f5 fdb5 	bl	8000b98 <__aeabi_d2iz>
 800b02e:	2200      	movs	r2, #0
 800b030:	9000      	str	r0, [sp, #0]
 800b032:	2300      	movs	r3, #0
 800b034:	4630      	mov	r0, r6
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fd70 	bl	8000b1c <__aeabi_dcmplt>
 800b03c:	b150      	cbz	r0, 800b054 <_dtoa_r+0x184>
 800b03e:	9800      	ldr	r0, [sp, #0]
 800b040:	f7f5 fa90 	bl	8000564 <__aeabi_i2d>
 800b044:	4632      	mov	r2, r6
 800b046:	463b      	mov	r3, r7
 800b048:	f7f5 fd5e 	bl	8000b08 <__aeabi_dcmpeq>
 800b04c:	b910      	cbnz	r0, 800b054 <_dtoa_r+0x184>
 800b04e:	9b00      	ldr	r3, [sp, #0]
 800b050:	3b01      	subs	r3, #1
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	9b00      	ldr	r3, [sp, #0]
 800b056:	2b16      	cmp	r3, #22
 800b058:	d85a      	bhi.n	800b110 <_dtoa_r+0x240>
 800b05a:	9a00      	ldr	r2, [sp, #0]
 800b05c:	4b57      	ldr	r3, [pc, #348]	; (800b1bc <_dtoa_r+0x2ec>)
 800b05e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b066:	ec51 0b19 	vmov	r0, r1, d9
 800b06a:	f7f5 fd57 	bl	8000b1c <__aeabi_dcmplt>
 800b06e:	2800      	cmp	r0, #0
 800b070:	d050      	beq.n	800b114 <_dtoa_r+0x244>
 800b072:	9b00      	ldr	r3, [sp, #0]
 800b074:	3b01      	subs	r3, #1
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	2300      	movs	r3, #0
 800b07a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b07c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b07e:	1b5d      	subs	r5, r3, r5
 800b080:	1e6b      	subs	r3, r5, #1
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	bf45      	ittet	mi
 800b086:	f1c5 0301 	rsbmi	r3, r5, #1
 800b08a:	9304      	strmi	r3, [sp, #16]
 800b08c:	2300      	movpl	r3, #0
 800b08e:	2300      	movmi	r3, #0
 800b090:	bf4c      	ite	mi
 800b092:	9305      	strmi	r3, [sp, #20]
 800b094:	9304      	strpl	r3, [sp, #16]
 800b096:	9b00      	ldr	r3, [sp, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	db3d      	blt.n	800b118 <_dtoa_r+0x248>
 800b09c:	9b05      	ldr	r3, [sp, #20]
 800b09e:	9a00      	ldr	r2, [sp, #0]
 800b0a0:	920a      	str	r2, [sp, #40]	; 0x28
 800b0a2:	4413      	add	r3, r2
 800b0a4:	9305      	str	r3, [sp, #20]
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	9307      	str	r3, [sp, #28]
 800b0aa:	9b06      	ldr	r3, [sp, #24]
 800b0ac:	2b09      	cmp	r3, #9
 800b0ae:	f200 8089 	bhi.w	800b1c4 <_dtoa_r+0x2f4>
 800b0b2:	2b05      	cmp	r3, #5
 800b0b4:	bfc4      	itt	gt
 800b0b6:	3b04      	subgt	r3, #4
 800b0b8:	9306      	strgt	r3, [sp, #24]
 800b0ba:	9b06      	ldr	r3, [sp, #24]
 800b0bc:	f1a3 0302 	sub.w	r3, r3, #2
 800b0c0:	bfcc      	ite	gt
 800b0c2:	2500      	movgt	r5, #0
 800b0c4:	2501      	movle	r5, #1
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	f200 8087 	bhi.w	800b1da <_dtoa_r+0x30a>
 800b0cc:	e8df f003 	tbb	[pc, r3]
 800b0d0:	59383a2d 	.word	0x59383a2d
 800b0d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b0d8:	441d      	add	r5, r3
 800b0da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b0de:	2b20      	cmp	r3, #32
 800b0e0:	bfc1      	itttt	gt
 800b0e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b0e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b0ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800b0ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b0f2:	bfda      	itte	le
 800b0f4:	f1c3 0320 	rsble	r3, r3, #32
 800b0f8:	fa06 f003 	lslle.w	r0, r6, r3
 800b0fc:	4318      	orrgt	r0, r3
 800b0fe:	f7f5 fa21 	bl	8000544 <__aeabi_ui2d>
 800b102:	2301      	movs	r3, #1
 800b104:	4606      	mov	r6, r0
 800b106:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b10a:	3d01      	subs	r5, #1
 800b10c:	930e      	str	r3, [sp, #56]	; 0x38
 800b10e:	e76a      	b.n	800afe6 <_dtoa_r+0x116>
 800b110:	2301      	movs	r3, #1
 800b112:	e7b2      	b.n	800b07a <_dtoa_r+0x1aa>
 800b114:	900b      	str	r0, [sp, #44]	; 0x2c
 800b116:	e7b1      	b.n	800b07c <_dtoa_r+0x1ac>
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	9a00      	ldr	r2, [sp, #0]
 800b11c:	1a9b      	subs	r3, r3, r2
 800b11e:	9304      	str	r3, [sp, #16]
 800b120:	4253      	negs	r3, r2
 800b122:	9307      	str	r3, [sp, #28]
 800b124:	2300      	movs	r3, #0
 800b126:	930a      	str	r3, [sp, #40]	; 0x28
 800b128:	e7bf      	b.n	800b0aa <_dtoa_r+0x1da>
 800b12a:	2300      	movs	r3, #0
 800b12c:	9308      	str	r3, [sp, #32]
 800b12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b130:	2b00      	cmp	r3, #0
 800b132:	dc55      	bgt.n	800b1e0 <_dtoa_r+0x310>
 800b134:	2301      	movs	r3, #1
 800b136:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b13a:	461a      	mov	r2, r3
 800b13c:	9209      	str	r2, [sp, #36]	; 0x24
 800b13e:	e00c      	b.n	800b15a <_dtoa_r+0x28a>
 800b140:	2301      	movs	r3, #1
 800b142:	e7f3      	b.n	800b12c <_dtoa_r+0x25c>
 800b144:	2300      	movs	r3, #0
 800b146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b148:	9308      	str	r3, [sp, #32]
 800b14a:	9b00      	ldr	r3, [sp, #0]
 800b14c:	4413      	add	r3, r2
 800b14e:	9302      	str	r3, [sp, #8]
 800b150:	3301      	adds	r3, #1
 800b152:	2b01      	cmp	r3, #1
 800b154:	9303      	str	r3, [sp, #12]
 800b156:	bfb8      	it	lt
 800b158:	2301      	movlt	r3, #1
 800b15a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b15c:	2200      	movs	r2, #0
 800b15e:	6042      	str	r2, [r0, #4]
 800b160:	2204      	movs	r2, #4
 800b162:	f102 0614 	add.w	r6, r2, #20
 800b166:	429e      	cmp	r6, r3
 800b168:	6841      	ldr	r1, [r0, #4]
 800b16a:	d93d      	bls.n	800b1e8 <_dtoa_r+0x318>
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 fdb1 	bl	800bcd4 <_Balloc>
 800b172:	9001      	str	r0, [sp, #4]
 800b174:	2800      	cmp	r0, #0
 800b176:	d13b      	bne.n	800b1f0 <_dtoa_r+0x320>
 800b178:	4b11      	ldr	r3, [pc, #68]	; (800b1c0 <_dtoa_r+0x2f0>)
 800b17a:	4602      	mov	r2, r0
 800b17c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b180:	e6c0      	b.n	800af04 <_dtoa_r+0x34>
 800b182:	2301      	movs	r3, #1
 800b184:	e7df      	b.n	800b146 <_dtoa_r+0x276>
 800b186:	bf00      	nop
 800b188:	636f4361 	.word	0x636f4361
 800b18c:	3fd287a7 	.word	0x3fd287a7
 800b190:	8b60c8b3 	.word	0x8b60c8b3
 800b194:	3fc68a28 	.word	0x3fc68a28
 800b198:	509f79fb 	.word	0x509f79fb
 800b19c:	3fd34413 	.word	0x3fd34413
 800b1a0:	0800d465 	.word	0x0800d465
 800b1a4:	0800d47c 	.word	0x0800d47c
 800b1a8:	7ff00000 	.word	0x7ff00000
 800b1ac:	0800d461 	.word	0x0800d461
 800b1b0:	0800d458 	.word	0x0800d458
 800b1b4:	0800d435 	.word	0x0800d435
 800b1b8:	3ff80000 	.word	0x3ff80000
 800b1bc:	0800d5d0 	.word	0x0800d5d0
 800b1c0:	0800d4d7 	.word	0x0800d4d7
 800b1c4:	2501      	movs	r5, #1
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9306      	str	r3, [sp, #24]
 800b1ca:	9508      	str	r5, [sp, #32]
 800b1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	2312      	movs	r3, #18
 800b1d8:	e7b0      	b.n	800b13c <_dtoa_r+0x26c>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	9308      	str	r3, [sp, #32]
 800b1de:	e7f5      	b.n	800b1cc <_dtoa_r+0x2fc>
 800b1e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1e6:	e7b8      	b.n	800b15a <_dtoa_r+0x28a>
 800b1e8:	3101      	adds	r1, #1
 800b1ea:	6041      	str	r1, [r0, #4]
 800b1ec:	0052      	lsls	r2, r2, #1
 800b1ee:	e7b8      	b.n	800b162 <_dtoa_r+0x292>
 800b1f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f2:	9a01      	ldr	r2, [sp, #4]
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	2b0e      	cmp	r3, #14
 800b1fa:	f200 809d 	bhi.w	800b338 <_dtoa_r+0x468>
 800b1fe:	2d00      	cmp	r5, #0
 800b200:	f000 809a 	beq.w	800b338 <_dtoa_r+0x468>
 800b204:	9b00      	ldr	r3, [sp, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	dd32      	ble.n	800b270 <_dtoa_r+0x3a0>
 800b20a:	4ab7      	ldr	r2, [pc, #732]	; (800b4e8 <_dtoa_r+0x618>)
 800b20c:	f003 030f 	and.w	r3, r3, #15
 800b210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b214:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b218:	9b00      	ldr	r3, [sp, #0]
 800b21a:	05d8      	lsls	r0, r3, #23
 800b21c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b220:	d516      	bpl.n	800b250 <_dtoa_r+0x380>
 800b222:	4bb2      	ldr	r3, [pc, #712]	; (800b4ec <_dtoa_r+0x61c>)
 800b224:	ec51 0b19 	vmov	r0, r1, d9
 800b228:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b22c:	f7f5 fb2e 	bl	800088c <__aeabi_ddiv>
 800b230:	f007 070f 	and.w	r7, r7, #15
 800b234:	4682      	mov	sl, r0
 800b236:	468b      	mov	fp, r1
 800b238:	2503      	movs	r5, #3
 800b23a:	4eac      	ldr	r6, [pc, #688]	; (800b4ec <_dtoa_r+0x61c>)
 800b23c:	b957      	cbnz	r7, 800b254 <_dtoa_r+0x384>
 800b23e:	4642      	mov	r2, r8
 800b240:	464b      	mov	r3, r9
 800b242:	4650      	mov	r0, sl
 800b244:	4659      	mov	r1, fp
 800b246:	f7f5 fb21 	bl	800088c <__aeabi_ddiv>
 800b24a:	4682      	mov	sl, r0
 800b24c:	468b      	mov	fp, r1
 800b24e:	e028      	b.n	800b2a2 <_dtoa_r+0x3d2>
 800b250:	2502      	movs	r5, #2
 800b252:	e7f2      	b.n	800b23a <_dtoa_r+0x36a>
 800b254:	07f9      	lsls	r1, r7, #31
 800b256:	d508      	bpl.n	800b26a <_dtoa_r+0x39a>
 800b258:	4640      	mov	r0, r8
 800b25a:	4649      	mov	r1, r9
 800b25c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b260:	f7f5 f9ea 	bl	8000638 <__aeabi_dmul>
 800b264:	3501      	adds	r5, #1
 800b266:	4680      	mov	r8, r0
 800b268:	4689      	mov	r9, r1
 800b26a:	107f      	asrs	r7, r7, #1
 800b26c:	3608      	adds	r6, #8
 800b26e:	e7e5      	b.n	800b23c <_dtoa_r+0x36c>
 800b270:	f000 809b 	beq.w	800b3aa <_dtoa_r+0x4da>
 800b274:	9b00      	ldr	r3, [sp, #0]
 800b276:	4f9d      	ldr	r7, [pc, #628]	; (800b4ec <_dtoa_r+0x61c>)
 800b278:	425e      	negs	r6, r3
 800b27a:	4b9b      	ldr	r3, [pc, #620]	; (800b4e8 <_dtoa_r+0x618>)
 800b27c:	f006 020f 	and.w	r2, r6, #15
 800b280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b288:	ec51 0b19 	vmov	r0, r1, d9
 800b28c:	f7f5 f9d4 	bl	8000638 <__aeabi_dmul>
 800b290:	1136      	asrs	r6, r6, #4
 800b292:	4682      	mov	sl, r0
 800b294:	468b      	mov	fp, r1
 800b296:	2300      	movs	r3, #0
 800b298:	2502      	movs	r5, #2
 800b29a:	2e00      	cmp	r6, #0
 800b29c:	d17a      	bne.n	800b394 <_dtoa_r+0x4c4>
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1d3      	bne.n	800b24a <_dtoa_r+0x37a>
 800b2a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 8082 	beq.w	800b3ae <_dtoa_r+0x4de>
 800b2aa:	4b91      	ldr	r3, [pc, #580]	; (800b4f0 <_dtoa_r+0x620>)
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	4659      	mov	r1, fp
 800b2b2:	f7f5 fc33 	bl	8000b1c <__aeabi_dcmplt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d079      	beq.n	800b3ae <_dtoa_r+0x4de>
 800b2ba:	9b03      	ldr	r3, [sp, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d076      	beq.n	800b3ae <_dtoa_r+0x4de>
 800b2c0:	9b02      	ldr	r3, [sp, #8]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dd36      	ble.n	800b334 <_dtoa_r+0x464>
 800b2c6:	9b00      	ldr	r3, [sp, #0]
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	4659      	mov	r1, fp
 800b2cc:	1e5f      	subs	r7, r3, #1
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	4b88      	ldr	r3, [pc, #544]	; (800b4f4 <_dtoa_r+0x624>)
 800b2d2:	f7f5 f9b1 	bl	8000638 <__aeabi_dmul>
 800b2d6:	9e02      	ldr	r6, [sp, #8]
 800b2d8:	4682      	mov	sl, r0
 800b2da:	468b      	mov	fp, r1
 800b2dc:	3501      	adds	r5, #1
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f7f5 f940 	bl	8000564 <__aeabi_i2d>
 800b2e4:	4652      	mov	r2, sl
 800b2e6:	465b      	mov	r3, fp
 800b2e8:	f7f5 f9a6 	bl	8000638 <__aeabi_dmul>
 800b2ec:	4b82      	ldr	r3, [pc, #520]	; (800b4f8 <_dtoa_r+0x628>)
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f7f4 ffec 	bl	80002cc <__adddf3>
 800b2f4:	46d0      	mov	r8, sl
 800b2f6:	46d9      	mov	r9, fp
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b2fe:	2e00      	cmp	r6, #0
 800b300:	d158      	bne.n	800b3b4 <_dtoa_r+0x4e4>
 800b302:	4b7e      	ldr	r3, [pc, #504]	; (800b4fc <_dtoa_r+0x62c>)
 800b304:	2200      	movs	r2, #0
 800b306:	4640      	mov	r0, r8
 800b308:	4649      	mov	r1, r9
 800b30a:	f7f4 ffdd 	bl	80002c8 <__aeabi_dsub>
 800b30e:	4652      	mov	r2, sl
 800b310:	465b      	mov	r3, fp
 800b312:	4680      	mov	r8, r0
 800b314:	4689      	mov	r9, r1
 800b316:	f7f5 fc1f 	bl	8000b58 <__aeabi_dcmpgt>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	f040 8295 	bne.w	800b84a <_dtoa_r+0x97a>
 800b320:	4652      	mov	r2, sl
 800b322:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b326:	4640      	mov	r0, r8
 800b328:	4649      	mov	r1, r9
 800b32a:	f7f5 fbf7 	bl	8000b1c <__aeabi_dcmplt>
 800b32e:	2800      	cmp	r0, #0
 800b330:	f040 8289 	bne.w	800b846 <_dtoa_r+0x976>
 800b334:	ec5b ab19 	vmov	sl, fp, d9
 800b338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f2c0 8148 	blt.w	800b5d0 <_dtoa_r+0x700>
 800b340:	9a00      	ldr	r2, [sp, #0]
 800b342:	2a0e      	cmp	r2, #14
 800b344:	f300 8144 	bgt.w	800b5d0 <_dtoa_r+0x700>
 800b348:	4b67      	ldr	r3, [pc, #412]	; (800b4e8 <_dtoa_r+0x618>)
 800b34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b34e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b354:	2b00      	cmp	r3, #0
 800b356:	f280 80d5 	bge.w	800b504 <_dtoa_r+0x634>
 800b35a:	9b03      	ldr	r3, [sp, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f300 80d1 	bgt.w	800b504 <_dtoa_r+0x634>
 800b362:	f040 826f 	bne.w	800b844 <_dtoa_r+0x974>
 800b366:	4b65      	ldr	r3, [pc, #404]	; (800b4fc <_dtoa_r+0x62c>)
 800b368:	2200      	movs	r2, #0
 800b36a:	4640      	mov	r0, r8
 800b36c:	4649      	mov	r1, r9
 800b36e:	f7f5 f963 	bl	8000638 <__aeabi_dmul>
 800b372:	4652      	mov	r2, sl
 800b374:	465b      	mov	r3, fp
 800b376:	f7f5 fbe5 	bl	8000b44 <__aeabi_dcmpge>
 800b37a:	9e03      	ldr	r6, [sp, #12]
 800b37c:	4637      	mov	r7, r6
 800b37e:	2800      	cmp	r0, #0
 800b380:	f040 8245 	bne.w	800b80e <_dtoa_r+0x93e>
 800b384:	9d01      	ldr	r5, [sp, #4]
 800b386:	2331      	movs	r3, #49	; 0x31
 800b388:	f805 3b01 	strb.w	r3, [r5], #1
 800b38c:	9b00      	ldr	r3, [sp, #0]
 800b38e:	3301      	adds	r3, #1
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	e240      	b.n	800b816 <_dtoa_r+0x946>
 800b394:	07f2      	lsls	r2, r6, #31
 800b396:	d505      	bpl.n	800b3a4 <_dtoa_r+0x4d4>
 800b398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b39c:	f7f5 f94c 	bl	8000638 <__aeabi_dmul>
 800b3a0:	3501      	adds	r5, #1
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	1076      	asrs	r6, r6, #1
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	e777      	b.n	800b29a <_dtoa_r+0x3ca>
 800b3aa:	2502      	movs	r5, #2
 800b3ac:	e779      	b.n	800b2a2 <_dtoa_r+0x3d2>
 800b3ae:	9f00      	ldr	r7, [sp, #0]
 800b3b0:	9e03      	ldr	r6, [sp, #12]
 800b3b2:	e794      	b.n	800b2de <_dtoa_r+0x40e>
 800b3b4:	9901      	ldr	r1, [sp, #4]
 800b3b6:	4b4c      	ldr	r3, [pc, #304]	; (800b4e8 <_dtoa_r+0x618>)
 800b3b8:	4431      	add	r1, r6
 800b3ba:	910d      	str	r1, [sp, #52]	; 0x34
 800b3bc:	9908      	ldr	r1, [sp, #32]
 800b3be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b3c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3c6:	2900      	cmp	r1, #0
 800b3c8:	d043      	beq.n	800b452 <_dtoa_r+0x582>
 800b3ca:	494d      	ldr	r1, [pc, #308]	; (800b500 <_dtoa_r+0x630>)
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	f7f5 fa5d 	bl	800088c <__aeabi_ddiv>
 800b3d2:	4652      	mov	r2, sl
 800b3d4:	465b      	mov	r3, fp
 800b3d6:	f7f4 ff77 	bl	80002c8 <__aeabi_dsub>
 800b3da:	9d01      	ldr	r5, [sp, #4]
 800b3dc:	4682      	mov	sl, r0
 800b3de:	468b      	mov	fp, r1
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	4640      	mov	r0, r8
 800b3e4:	f7f5 fbd8 	bl	8000b98 <__aeabi_d2iz>
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	f7f5 f8bb 	bl	8000564 <__aeabi_i2d>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	f7f4 ff67 	bl	80002c8 <__aeabi_dsub>
 800b3fa:	3630      	adds	r6, #48	; 0x30
 800b3fc:	f805 6b01 	strb.w	r6, [r5], #1
 800b400:	4652      	mov	r2, sl
 800b402:	465b      	mov	r3, fp
 800b404:	4680      	mov	r8, r0
 800b406:	4689      	mov	r9, r1
 800b408:	f7f5 fb88 	bl	8000b1c <__aeabi_dcmplt>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d163      	bne.n	800b4d8 <_dtoa_r+0x608>
 800b410:	4642      	mov	r2, r8
 800b412:	464b      	mov	r3, r9
 800b414:	4936      	ldr	r1, [pc, #216]	; (800b4f0 <_dtoa_r+0x620>)
 800b416:	2000      	movs	r0, #0
 800b418:	f7f4 ff56 	bl	80002c8 <__aeabi_dsub>
 800b41c:	4652      	mov	r2, sl
 800b41e:	465b      	mov	r3, fp
 800b420:	f7f5 fb7c 	bl	8000b1c <__aeabi_dcmplt>
 800b424:	2800      	cmp	r0, #0
 800b426:	f040 80b5 	bne.w	800b594 <_dtoa_r+0x6c4>
 800b42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b42c:	429d      	cmp	r5, r3
 800b42e:	d081      	beq.n	800b334 <_dtoa_r+0x464>
 800b430:	4b30      	ldr	r3, [pc, #192]	; (800b4f4 <_dtoa_r+0x624>)
 800b432:	2200      	movs	r2, #0
 800b434:	4650      	mov	r0, sl
 800b436:	4659      	mov	r1, fp
 800b438:	f7f5 f8fe 	bl	8000638 <__aeabi_dmul>
 800b43c:	4b2d      	ldr	r3, [pc, #180]	; (800b4f4 <_dtoa_r+0x624>)
 800b43e:	4682      	mov	sl, r0
 800b440:	468b      	mov	fp, r1
 800b442:	4640      	mov	r0, r8
 800b444:	4649      	mov	r1, r9
 800b446:	2200      	movs	r2, #0
 800b448:	f7f5 f8f6 	bl	8000638 <__aeabi_dmul>
 800b44c:	4680      	mov	r8, r0
 800b44e:	4689      	mov	r9, r1
 800b450:	e7c6      	b.n	800b3e0 <_dtoa_r+0x510>
 800b452:	4650      	mov	r0, sl
 800b454:	4659      	mov	r1, fp
 800b456:	f7f5 f8ef 	bl	8000638 <__aeabi_dmul>
 800b45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b45c:	9d01      	ldr	r5, [sp, #4]
 800b45e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b460:	4682      	mov	sl, r0
 800b462:	468b      	mov	fp, r1
 800b464:	4649      	mov	r1, r9
 800b466:	4640      	mov	r0, r8
 800b468:	f7f5 fb96 	bl	8000b98 <__aeabi_d2iz>
 800b46c:	4606      	mov	r6, r0
 800b46e:	f7f5 f879 	bl	8000564 <__aeabi_i2d>
 800b472:	3630      	adds	r6, #48	; 0x30
 800b474:	4602      	mov	r2, r0
 800b476:	460b      	mov	r3, r1
 800b478:	4640      	mov	r0, r8
 800b47a:	4649      	mov	r1, r9
 800b47c:	f7f4 ff24 	bl	80002c8 <__aeabi_dsub>
 800b480:	f805 6b01 	strb.w	r6, [r5], #1
 800b484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b486:	429d      	cmp	r5, r3
 800b488:	4680      	mov	r8, r0
 800b48a:	4689      	mov	r9, r1
 800b48c:	f04f 0200 	mov.w	r2, #0
 800b490:	d124      	bne.n	800b4dc <_dtoa_r+0x60c>
 800b492:	4b1b      	ldr	r3, [pc, #108]	; (800b500 <_dtoa_r+0x630>)
 800b494:	4650      	mov	r0, sl
 800b496:	4659      	mov	r1, fp
 800b498:	f7f4 ff18 	bl	80002cc <__adddf3>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	4649      	mov	r1, r9
 800b4a4:	f7f5 fb58 	bl	8000b58 <__aeabi_dcmpgt>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d173      	bne.n	800b594 <_dtoa_r+0x6c4>
 800b4ac:	4652      	mov	r2, sl
 800b4ae:	465b      	mov	r3, fp
 800b4b0:	4913      	ldr	r1, [pc, #76]	; (800b500 <_dtoa_r+0x630>)
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	f7f4 ff08 	bl	80002c8 <__aeabi_dsub>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4640      	mov	r0, r8
 800b4be:	4649      	mov	r1, r9
 800b4c0:	f7f5 fb2c 	bl	8000b1c <__aeabi_dcmplt>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	f43f af35 	beq.w	800b334 <_dtoa_r+0x464>
 800b4ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b4cc:	1e6b      	subs	r3, r5, #1
 800b4ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4d4:	2b30      	cmp	r3, #48	; 0x30
 800b4d6:	d0f8      	beq.n	800b4ca <_dtoa_r+0x5fa>
 800b4d8:	9700      	str	r7, [sp, #0]
 800b4da:	e049      	b.n	800b570 <_dtoa_r+0x6a0>
 800b4dc:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <_dtoa_r+0x624>)
 800b4de:	f7f5 f8ab 	bl	8000638 <__aeabi_dmul>
 800b4e2:	4680      	mov	r8, r0
 800b4e4:	4689      	mov	r9, r1
 800b4e6:	e7bd      	b.n	800b464 <_dtoa_r+0x594>
 800b4e8:	0800d5d0 	.word	0x0800d5d0
 800b4ec:	0800d5a8 	.word	0x0800d5a8
 800b4f0:	3ff00000 	.word	0x3ff00000
 800b4f4:	40240000 	.word	0x40240000
 800b4f8:	401c0000 	.word	0x401c0000
 800b4fc:	40140000 	.word	0x40140000
 800b500:	3fe00000 	.word	0x3fe00000
 800b504:	9d01      	ldr	r5, [sp, #4]
 800b506:	4656      	mov	r6, sl
 800b508:	465f      	mov	r7, fp
 800b50a:	4642      	mov	r2, r8
 800b50c:	464b      	mov	r3, r9
 800b50e:	4630      	mov	r0, r6
 800b510:	4639      	mov	r1, r7
 800b512:	f7f5 f9bb 	bl	800088c <__aeabi_ddiv>
 800b516:	f7f5 fb3f 	bl	8000b98 <__aeabi_d2iz>
 800b51a:	4682      	mov	sl, r0
 800b51c:	f7f5 f822 	bl	8000564 <__aeabi_i2d>
 800b520:	4642      	mov	r2, r8
 800b522:	464b      	mov	r3, r9
 800b524:	f7f5 f888 	bl	8000638 <__aeabi_dmul>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	4630      	mov	r0, r6
 800b52e:	4639      	mov	r1, r7
 800b530:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b534:	f7f4 fec8 	bl	80002c8 <__aeabi_dsub>
 800b538:	f805 6b01 	strb.w	r6, [r5], #1
 800b53c:	9e01      	ldr	r6, [sp, #4]
 800b53e:	9f03      	ldr	r7, [sp, #12]
 800b540:	1bae      	subs	r6, r5, r6
 800b542:	42b7      	cmp	r7, r6
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	d135      	bne.n	800b5b6 <_dtoa_r+0x6e6>
 800b54a:	f7f4 febf 	bl	80002cc <__adddf3>
 800b54e:	4642      	mov	r2, r8
 800b550:	464b      	mov	r3, r9
 800b552:	4606      	mov	r6, r0
 800b554:	460f      	mov	r7, r1
 800b556:	f7f5 faff 	bl	8000b58 <__aeabi_dcmpgt>
 800b55a:	b9d0      	cbnz	r0, 800b592 <_dtoa_r+0x6c2>
 800b55c:	4642      	mov	r2, r8
 800b55e:	464b      	mov	r3, r9
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 fad0 	bl	8000b08 <__aeabi_dcmpeq>
 800b568:	b110      	cbz	r0, 800b570 <_dtoa_r+0x6a0>
 800b56a:	f01a 0f01 	tst.w	sl, #1
 800b56e:	d110      	bne.n	800b592 <_dtoa_r+0x6c2>
 800b570:	4620      	mov	r0, r4
 800b572:	ee18 1a10 	vmov	r1, s16
 800b576:	f000 fbed 	bl	800bd54 <_Bfree>
 800b57a:	2300      	movs	r3, #0
 800b57c:	9800      	ldr	r0, [sp, #0]
 800b57e:	702b      	strb	r3, [r5, #0]
 800b580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b582:	3001      	adds	r0, #1
 800b584:	6018      	str	r0, [r3, #0]
 800b586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f43f acf1 	beq.w	800af70 <_dtoa_r+0xa0>
 800b58e:	601d      	str	r5, [r3, #0]
 800b590:	e4ee      	b.n	800af70 <_dtoa_r+0xa0>
 800b592:	9f00      	ldr	r7, [sp, #0]
 800b594:	462b      	mov	r3, r5
 800b596:	461d      	mov	r5, r3
 800b598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b59c:	2a39      	cmp	r2, #57	; 0x39
 800b59e:	d106      	bne.n	800b5ae <_dtoa_r+0x6de>
 800b5a0:	9a01      	ldr	r2, [sp, #4]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d1f7      	bne.n	800b596 <_dtoa_r+0x6c6>
 800b5a6:	9901      	ldr	r1, [sp, #4]
 800b5a8:	2230      	movs	r2, #48	; 0x30
 800b5aa:	3701      	adds	r7, #1
 800b5ac:	700a      	strb	r2, [r1, #0]
 800b5ae:	781a      	ldrb	r2, [r3, #0]
 800b5b0:	3201      	adds	r2, #1
 800b5b2:	701a      	strb	r2, [r3, #0]
 800b5b4:	e790      	b.n	800b4d8 <_dtoa_r+0x608>
 800b5b6:	4ba6      	ldr	r3, [pc, #664]	; (800b850 <_dtoa_r+0x980>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f7f5 f83d 	bl	8000638 <__aeabi_dmul>
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	f7f5 fa9f 	bl	8000b08 <__aeabi_dcmpeq>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d09d      	beq.n	800b50a <_dtoa_r+0x63a>
 800b5ce:	e7cf      	b.n	800b570 <_dtoa_r+0x6a0>
 800b5d0:	9a08      	ldr	r2, [sp, #32]
 800b5d2:	2a00      	cmp	r2, #0
 800b5d4:	f000 80d7 	beq.w	800b786 <_dtoa_r+0x8b6>
 800b5d8:	9a06      	ldr	r2, [sp, #24]
 800b5da:	2a01      	cmp	r2, #1
 800b5dc:	f300 80ba 	bgt.w	800b754 <_dtoa_r+0x884>
 800b5e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5e2:	2a00      	cmp	r2, #0
 800b5e4:	f000 80b2 	beq.w	800b74c <_dtoa_r+0x87c>
 800b5e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5ec:	9e07      	ldr	r6, [sp, #28]
 800b5ee:	9d04      	ldr	r5, [sp, #16]
 800b5f0:	9a04      	ldr	r2, [sp, #16]
 800b5f2:	441a      	add	r2, r3
 800b5f4:	9204      	str	r2, [sp, #16]
 800b5f6:	9a05      	ldr	r2, [sp, #20]
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	441a      	add	r2, r3
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	9205      	str	r2, [sp, #20]
 800b600:	f000 fc60 	bl	800bec4 <__i2b>
 800b604:	4607      	mov	r7, r0
 800b606:	2d00      	cmp	r5, #0
 800b608:	dd0c      	ble.n	800b624 <_dtoa_r+0x754>
 800b60a:	9b05      	ldr	r3, [sp, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	dd09      	ble.n	800b624 <_dtoa_r+0x754>
 800b610:	42ab      	cmp	r3, r5
 800b612:	9a04      	ldr	r2, [sp, #16]
 800b614:	bfa8      	it	ge
 800b616:	462b      	movge	r3, r5
 800b618:	1ad2      	subs	r2, r2, r3
 800b61a:	9204      	str	r2, [sp, #16]
 800b61c:	9a05      	ldr	r2, [sp, #20]
 800b61e:	1aed      	subs	r5, r5, r3
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	9305      	str	r3, [sp, #20]
 800b624:	9b07      	ldr	r3, [sp, #28]
 800b626:	b31b      	cbz	r3, 800b670 <_dtoa_r+0x7a0>
 800b628:	9b08      	ldr	r3, [sp, #32]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f000 80af 	beq.w	800b78e <_dtoa_r+0x8be>
 800b630:	2e00      	cmp	r6, #0
 800b632:	dd13      	ble.n	800b65c <_dtoa_r+0x78c>
 800b634:	4639      	mov	r1, r7
 800b636:	4632      	mov	r2, r6
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fd03 	bl	800c044 <__pow5mult>
 800b63e:	ee18 2a10 	vmov	r2, s16
 800b642:	4601      	mov	r1, r0
 800b644:	4607      	mov	r7, r0
 800b646:	4620      	mov	r0, r4
 800b648:	f000 fc52 	bl	800bef0 <__multiply>
 800b64c:	ee18 1a10 	vmov	r1, s16
 800b650:	4680      	mov	r8, r0
 800b652:	4620      	mov	r0, r4
 800b654:	f000 fb7e 	bl	800bd54 <_Bfree>
 800b658:	ee08 8a10 	vmov	s16, r8
 800b65c:	9b07      	ldr	r3, [sp, #28]
 800b65e:	1b9a      	subs	r2, r3, r6
 800b660:	d006      	beq.n	800b670 <_dtoa_r+0x7a0>
 800b662:	ee18 1a10 	vmov	r1, s16
 800b666:	4620      	mov	r0, r4
 800b668:	f000 fcec 	bl	800c044 <__pow5mult>
 800b66c:	ee08 0a10 	vmov	s16, r0
 800b670:	2101      	movs	r1, #1
 800b672:	4620      	mov	r0, r4
 800b674:	f000 fc26 	bl	800bec4 <__i2b>
 800b678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	4606      	mov	r6, r0
 800b67e:	f340 8088 	ble.w	800b792 <_dtoa_r+0x8c2>
 800b682:	461a      	mov	r2, r3
 800b684:	4601      	mov	r1, r0
 800b686:	4620      	mov	r0, r4
 800b688:	f000 fcdc 	bl	800c044 <__pow5mult>
 800b68c:	9b06      	ldr	r3, [sp, #24]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	4606      	mov	r6, r0
 800b692:	f340 8081 	ble.w	800b798 <_dtoa_r+0x8c8>
 800b696:	f04f 0800 	mov.w	r8, #0
 800b69a:	6933      	ldr	r3, [r6, #16]
 800b69c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6a0:	6918      	ldr	r0, [r3, #16]
 800b6a2:	f000 fbbf 	bl	800be24 <__hi0bits>
 800b6a6:	f1c0 0020 	rsb	r0, r0, #32
 800b6aa:	9b05      	ldr	r3, [sp, #20]
 800b6ac:	4418      	add	r0, r3
 800b6ae:	f010 001f 	ands.w	r0, r0, #31
 800b6b2:	f000 8092 	beq.w	800b7da <_dtoa_r+0x90a>
 800b6b6:	f1c0 0320 	rsb	r3, r0, #32
 800b6ba:	2b04      	cmp	r3, #4
 800b6bc:	f340 808a 	ble.w	800b7d4 <_dtoa_r+0x904>
 800b6c0:	f1c0 001c 	rsb	r0, r0, #28
 800b6c4:	9b04      	ldr	r3, [sp, #16]
 800b6c6:	4403      	add	r3, r0
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	9b05      	ldr	r3, [sp, #20]
 800b6cc:	4403      	add	r3, r0
 800b6ce:	4405      	add	r5, r0
 800b6d0:	9305      	str	r3, [sp, #20]
 800b6d2:	9b04      	ldr	r3, [sp, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dd07      	ble.n	800b6e8 <_dtoa_r+0x818>
 800b6d8:	ee18 1a10 	vmov	r1, s16
 800b6dc:	461a      	mov	r2, r3
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 fd0a 	bl	800c0f8 <__lshift>
 800b6e4:	ee08 0a10 	vmov	s16, r0
 800b6e8:	9b05      	ldr	r3, [sp, #20]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dd05      	ble.n	800b6fa <_dtoa_r+0x82a>
 800b6ee:	4631      	mov	r1, r6
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f000 fd00 	bl	800c0f8 <__lshift>
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d06e      	beq.n	800b7de <_dtoa_r+0x90e>
 800b700:	ee18 0a10 	vmov	r0, s16
 800b704:	4631      	mov	r1, r6
 800b706:	f000 fd67 	bl	800c1d8 <__mcmp>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	da67      	bge.n	800b7de <_dtoa_r+0x90e>
 800b70e:	9b00      	ldr	r3, [sp, #0]
 800b710:	3b01      	subs	r3, #1
 800b712:	ee18 1a10 	vmov	r1, s16
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	220a      	movs	r2, #10
 800b71a:	2300      	movs	r3, #0
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 fb3b 	bl	800bd98 <__multadd>
 800b722:	9b08      	ldr	r3, [sp, #32]
 800b724:	ee08 0a10 	vmov	s16, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 81b1 	beq.w	800ba90 <_dtoa_r+0xbc0>
 800b72e:	2300      	movs	r3, #0
 800b730:	4639      	mov	r1, r7
 800b732:	220a      	movs	r2, #10
 800b734:	4620      	mov	r0, r4
 800b736:	f000 fb2f 	bl	800bd98 <__multadd>
 800b73a:	9b02      	ldr	r3, [sp, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	4607      	mov	r7, r0
 800b740:	f300 808e 	bgt.w	800b860 <_dtoa_r+0x990>
 800b744:	9b06      	ldr	r3, [sp, #24]
 800b746:	2b02      	cmp	r3, #2
 800b748:	dc51      	bgt.n	800b7ee <_dtoa_r+0x91e>
 800b74a:	e089      	b.n	800b860 <_dtoa_r+0x990>
 800b74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b74e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b752:	e74b      	b.n	800b5ec <_dtoa_r+0x71c>
 800b754:	9b03      	ldr	r3, [sp, #12]
 800b756:	1e5e      	subs	r6, r3, #1
 800b758:	9b07      	ldr	r3, [sp, #28]
 800b75a:	42b3      	cmp	r3, r6
 800b75c:	bfbf      	itttt	lt
 800b75e:	9b07      	ldrlt	r3, [sp, #28]
 800b760:	9607      	strlt	r6, [sp, #28]
 800b762:	1af2      	sublt	r2, r6, r3
 800b764:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b766:	bfb6      	itet	lt
 800b768:	189b      	addlt	r3, r3, r2
 800b76a:	1b9e      	subge	r6, r3, r6
 800b76c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	bfb8      	it	lt
 800b772:	2600      	movlt	r6, #0
 800b774:	2b00      	cmp	r3, #0
 800b776:	bfb7      	itett	lt
 800b778:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b77c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b780:	1a9d      	sublt	r5, r3, r2
 800b782:	2300      	movlt	r3, #0
 800b784:	e734      	b.n	800b5f0 <_dtoa_r+0x720>
 800b786:	9e07      	ldr	r6, [sp, #28]
 800b788:	9d04      	ldr	r5, [sp, #16]
 800b78a:	9f08      	ldr	r7, [sp, #32]
 800b78c:	e73b      	b.n	800b606 <_dtoa_r+0x736>
 800b78e:	9a07      	ldr	r2, [sp, #28]
 800b790:	e767      	b.n	800b662 <_dtoa_r+0x792>
 800b792:	9b06      	ldr	r3, [sp, #24]
 800b794:	2b01      	cmp	r3, #1
 800b796:	dc18      	bgt.n	800b7ca <_dtoa_r+0x8fa>
 800b798:	f1ba 0f00 	cmp.w	sl, #0
 800b79c:	d115      	bne.n	800b7ca <_dtoa_r+0x8fa>
 800b79e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7a2:	b993      	cbnz	r3, 800b7ca <_dtoa_r+0x8fa>
 800b7a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7a8:	0d1b      	lsrs	r3, r3, #20
 800b7aa:	051b      	lsls	r3, r3, #20
 800b7ac:	b183      	cbz	r3, 800b7d0 <_dtoa_r+0x900>
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	9b05      	ldr	r3, [sp, #20]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	9305      	str	r3, [sp, #20]
 800b7ba:	f04f 0801 	mov.w	r8, #1
 800b7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f47f af6a 	bne.w	800b69a <_dtoa_r+0x7ca>
 800b7c6:	2001      	movs	r0, #1
 800b7c8:	e76f      	b.n	800b6aa <_dtoa_r+0x7da>
 800b7ca:	f04f 0800 	mov.w	r8, #0
 800b7ce:	e7f6      	b.n	800b7be <_dtoa_r+0x8ee>
 800b7d0:	4698      	mov	r8, r3
 800b7d2:	e7f4      	b.n	800b7be <_dtoa_r+0x8ee>
 800b7d4:	f43f af7d 	beq.w	800b6d2 <_dtoa_r+0x802>
 800b7d8:	4618      	mov	r0, r3
 800b7da:	301c      	adds	r0, #28
 800b7dc:	e772      	b.n	800b6c4 <_dtoa_r+0x7f4>
 800b7de:	9b03      	ldr	r3, [sp, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	dc37      	bgt.n	800b854 <_dtoa_r+0x984>
 800b7e4:	9b06      	ldr	r3, [sp, #24]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	dd34      	ble.n	800b854 <_dtoa_r+0x984>
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	9302      	str	r3, [sp, #8]
 800b7ee:	9b02      	ldr	r3, [sp, #8]
 800b7f0:	b96b      	cbnz	r3, 800b80e <_dtoa_r+0x93e>
 800b7f2:	4631      	mov	r1, r6
 800b7f4:	2205      	movs	r2, #5
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f000 face 	bl	800bd98 <__multadd>
 800b7fc:	4601      	mov	r1, r0
 800b7fe:	4606      	mov	r6, r0
 800b800:	ee18 0a10 	vmov	r0, s16
 800b804:	f000 fce8 	bl	800c1d8 <__mcmp>
 800b808:	2800      	cmp	r0, #0
 800b80a:	f73f adbb 	bgt.w	800b384 <_dtoa_r+0x4b4>
 800b80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b810:	9d01      	ldr	r5, [sp, #4]
 800b812:	43db      	mvns	r3, r3
 800b814:	9300      	str	r3, [sp, #0]
 800b816:	f04f 0800 	mov.w	r8, #0
 800b81a:	4631      	mov	r1, r6
 800b81c:	4620      	mov	r0, r4
 800b81e:	f000 fa99 	bl	800bd54 <_Bfree>
 800b822:	2f00      	cmp	r7, #0
 800b824:	f43f aea4 	beq.w	800b570 <_dtoa_r+0x6a0>
 800b828:	f1b8 0f00 	cmp.w	r8, #0
 800b82c:	d005      	beq.n	800b83a <_dtoa_r+0x96a>
 800b82e:	45b8      	cmp	r8, r7
 800b830:	d003      	beq.n	800b83a <_dtoa_r+0x96a>
 800b832:	4641      	mov	r1, r8
 800b834:	4620      	mov	r0, r4
 800b836:	f000 fa8d 	bl	800bd54 <_Bfree>
 800b83a:	4639      	mov	r1, r7
 800b83c:	4620      	mov	r0, r4
 800b83e:	f000 fa89 	bl	800bd54 <_Bfree>
 800b842:	e695      	b.n	800b570 <_dtoa_r+0x6a0>
 800b844:	2600      	movs	r6, #0
 800b846:	4637      	mov	r7, r6
 800b848:	e7e1      	b.n	800b80e <_dtoa_r+0x93e>
 800b84a:	9700      	str	r7, [sp, #0]
 800b84c:	4637      	mov	r7, r6
 800b84e:	e599      	b.n	800b384 <_dtoa_r+0x4b4>
 800b850:	40240000 	.word	0x40240000
 800b854:	9b08      	ldr	r3, [sp, #32]
 800b856:	2b00      	cmp	r3, #0
 800b858:	f000 80ca 	beq.w	800b9f0 <_dtoa_r+0xb20>
 800b85c:	9b03      	ldr	r3, [sp, #12]
 800b85e:	9302      	str	r3, [sp, #8]
 800b860:	2d00      	cmp	r5, #0
 800b862:	dd05      	ble.n	800b870 <_dtoa_r+0x9a0>
 800b864:	4639      	mov	r1, r7
 800b866:	462a      	mov	r2, r5
 800b868:	4620      	mov	r0, r4
 800b86a:	f000 fc45 	bl	800c0f8 <__lshift>
 800b86e:	4607      	mov	r7, r0
 800b870:	f1b8 0f00 	cmp.w	r8, #0
 800b874:	d05b      	beq.n	800b92e <_dtoa_r+0xa5e>
 800b876:	6879      	ldr	r1, [r7, #4]
 800b878:	4620      	mov	r0, r4
 800b87a:	f000 fa2b 	bl	800bcd4 <_Balloc>
 800b87e:	4605      	mov	r5, r0
 800b880:	b928      	cbnz	r0, 800b88e <_dtoa_r+0x9be>
 800b882:	4b87      	ldr	r3, [pc, #540]	; (800baa0 <_dtoa_r+0xbd0>)
 800b884:	4602      	mov	r2, r0
 800b886:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b88a:	f7ff bb3b 	b.w	800af04 <_dtoa_r+0x34>
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	3202      	adds	r2, #2
 800b892:	0092      	lsls	r2, r2, #2
 800b894:	f107 010c 	add.w	r1, r7, #12
 800b898:	300c      	adds	r0, #12
 800b89a:	f000 fa0d 	bl	800bcb8 <memcpy>
 800b89e:	2201      	movs	r2, #1
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 fc28 	bl	800c0f8 <__lshift>
 800b8a8:	9b01      	ldr	r3, [sp, #4]
 800b8aa:	f103 0901 	add.w	r9, r3, #1
 800b8ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	9305      	str	r3, [sp, #20]
 800b8b6:	f00a 0301 	and.w	r3, sl, #1
 800b8ba:	46b8      	mov	r8, r7
 800b8bc:	9304      	str	r3, [sp, #16]
 800b8be:	4607      	mov	r7, r0
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	ee18 0a10 	vmov	r0, s16
 800b8c6:	f7ff fa77 	bl	800adb8 <quorem>
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	9002      	str	r0, [sp, #8]
 800b8ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b8d2:	ee18 0a10 	vmov	r0, s16
 800b8d6:	f000 fc7f 	bl	800c1d8 <__mcmp>
 800b8da:	463a      	mov	r2, r7
 800b8dc:	9003      	str	r0, [sp, #12]
 800b8de:	4631      	mov	r1, r6
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f000 fc95 	bl	800c210 <__mdiff>
 800b8e6:	68c2      	ldr	r2, [r0, #12]
 800b8e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	bb02      	cbnz	r2, 800b932 <_dtoa_r+0xa62>
 800b8f0:	4601      	mov	r1, r0
 800b8f2:	ee18 0a10 	vmov	r0, s16
 800b8f6:	f000 fc6f 	bl	800c1d8 <__mcmp>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	4620      	mov	r0, r4
 800b900:	9207      	str	r2, [sp, #28]
 800b902:	f000 fa27 	bl	800bd54 <_Bfree>
 800b906:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b90a:	ea43 0102 	orr.w	r1, r3, r2
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	430b      	orrs	r3, r1
 800b912:	464d      	mov	r5, r9
 800b914:	d10f      	bne.n	800b936 <_dtoa_r+0xa66>
 800b916:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b91a:	d02a      	beq.n	800b972 <_dtoa_r+0xaa2>
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	dd02      	ble.n	800b928 <_dtoa_r+0xa58>
 800b922:	9b02      	ldr	r3, [sp, #8]
 800b924:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b928:	f88b a000 	strb.w	sl, [fp]
 800b92c:	e775      	b.n	800b81a <_dtoa_r+0x94a>
 800b92e:	4638      	mov	r0, r7
 800b930:	e7ba      	b.n	800b8a8 <_dtoa_r+0x9d8>
 800b932:	2201      	movs	r2, #1
 800b934:	e7e2      	b.n	800b8fc <_dtoa_r+0xa2c>
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	db04      	blt.n	800b946 <_dtoa_r+0xa76>
 800b93c:	9906      	ldr	r1, [sp, #24]
 800b93e:	430b      	orrs	r3, r1
 800b940:	9904      	ldr	r1, [sp, #16]
 800b942:	430b      	orrs	r3, r1
 800b944:	d122      	bne.n	800b98c <_dtoa_r+0xabc>
 800b946:	2a00      	cmp	r2, #0
 800b948:	ddee      	ble.n	800b928 <_dtoa_r+0xa58>
 800b94a:	ee18 1a10 	vmov	r1, s16
 800b94e:	2201      	movs	r2, #1
 800b950:	4620      	mov	r0, r4
 800b952:	f000 fbd1 	bl	800c0f8 <__lshift>
 800b956:	4631      	mov	r1, r6
 800b958:	ee08 0a10 	vmov	s16, r0
 800b95c:	f000 fc3c 	bl	800c1d8 <__mcmp>
 800b960:	2800      	cmp	r0, #0
 800b962:	dc03      	bgt.n	800b96c <_dtoa_r+0xa9c>
 800b964:	d1e0      	bne.n	800b928 <_dtoa_r+0xa58>
 800b966:	f01a 0f01 	tst.w	sl, #1
 800b96a:	d0dd      	beq.n	800b928 <_dtoa_r+0xa58>
 800b96c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b970:	d1d7      	bne.n	800b922 <_dtoa_r+0xa52>
 800b972:	2339      	movs	r3, #57	; 0x39
 800b974:	f88b 3000 	strb.w	r3, [fp]
 800b978:	462b      	mov	r3, r5
 800b97a:	461d      	mov	r5, r3
 800b97c:	3b01      	subs	r3, #1
 800b97e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b982:	2a39      	cmp	r2, #57	; 0x39
 800b984:	d071      	beq.n	800ba6a <_dtoa_r+0xb9a>
 800b986:	3201      	adds	r2, #1
 800b988:	701a      	strb	r2, [r3, #0]
 800b98a:	e746      	b.n	800b81a <_dtoa_r+0x94a>
 800b98c:	2a00      	cmp	r2, #0
 800b98e:	dd07      	ble.n	800b9a0 <_dtoa_r+0xad0>
 800b990:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b994:	d0ed      	beq.n	800b972 <_dtoa_r+0xaa2>
 800b996:	f10a 0301 	add.w	r3, sl, #1
 800b99a:	f88b 3000 	strb.w	r3, [fp]
 800b99e:	e73c      	b.n	800b81a <_dtoa_r+0x94a>
 800b9a0:	9b05      	ldr	r3, [sp, #20]
 800b9a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b9a6:	4599      	cmp	r9, r3
 800b9a8:	d047      	beq.n	800ba3a <_dtoa_r+0xb6a>
 800b9aa:	ee18 1a10 	vmov	r1, s16
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	220a      	movs	r2, #10
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 f9f0 	bl	800bd98 <__multadd>
 800b9b8:	45b8      	cmp	r8, r7
 800b9ba:	ee08 0a10 	vmov	s16, r0
 800b9be:	f04f 0300 	mov.w	r3, #0
 800b9c2:	f04f 020a 	mov.w	r2, #10
 800b9c6:	4641      	mov	r1, r8
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	d106      	bne.n	800b9da <_dtoa_r+0xb0a>
 800b9cc:	f000 f9e4 	bl	800bd98 <__multadd>
 800b9d0:	4680      	mov	r8, r0
 800b9d2:	4607      	mov	r7, r0
 800b9d4:	f109 0901 	add.w	r9, r9, #1
 800b9d8:	e772      	b.n	800b8c0 <_dtoa_r+0x9f0>
 800b9da:	f000 f9dd 	bl	800bd98 <__multadd>
 800b9de:	4639      	mov	r1, r7
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	220a      	movs	r2, #10
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 f9d6 	bl	800bd98 <__multadd>
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	e7f1      	b.n	800b9d4 <_dtoa_r+0xb04>
 800b9f0:	9b03      	ldr	r3, [sp, #12]
 800b9f2:	9302      	str	r3, [sp, #8]
 800b9f4:	9d01      	ldr	r5, [sp, #4]
 800b9f6:	ee18 0a10 	vmov	r0, s16
 800b9fa:	4631      	mov	r1, r6
 800b9fc:	f7ff f9dc 	bl	800adb8 <quorem>
 800ba00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	f805 ab01 	strb.w	sl, [r5], #1
 800ba0a:	1aea      	subs	r2, r5, r3
 800ba0c:	9b02      	ldr	r3, [sp, #8]
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	dd09      	ble.n	800ba26 <_dtoa_r+0xb56>
 800ba12:	ee18 1a10 	vmov	r1, s16
 800ba16:	2300      	movs	r3, #0
 800ba18:	220a      	movs	r2, #10
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	f000 f9bc 	bl	800bd98 <__multadd>
 800ba20:	ee08 0a10 	vmov	s16, r0
 800ba24:	e7e7      	b.n	800b9f6 <_dtoa_r+0xb26>
 800ba26:	9b02      	ldr	r3, [sp, #8]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	bfc8      	it	gt
 800ba2c:	461d      	movgt	r5, r3
 800ba2e:	9b01      	ldr	r3, [sp, #4]
 800ba30:	bfd8      	it	le
 800ba32:	2501      	movle	r5, #1
 800ba34:	441d      	add	r5, r3
 800ba36:	f04f 0800 	mov.w	r8, #0
 800ba3a:	ee18 1a10 	vmov	r1, s16
 800ba3e:	2201      	movs	r2, #1
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 fb59 	bl	800c0f8 <__lshift>
 800ba46:	4631      	mov	r1, r6
 800ba48:	ee08 0a10 	vmov	s16, r0
 800ba4c:	f000 fbc4 	bl	800c1d8 <__mcmp>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	dc91      	bgt.n	800b978 <_dtoa_r+0xaa8>
 800ba54:	d102      	bne.n	800ba5c <_dtoa_r+0xb8c>
 800ba56:	f01a 0f01 	tst.w	sl, #1
 800ba5a:	d18d      	bne.n	800b978 <_dtoa_r+0xaa8>
 800ba5c:	462b      	mov	r3, r5
 800ba5e:	461d      	mov	r5, r3
 800ba60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba64:	2a30      	cmp	r2, #48	; 0x30
 800ba66:	d0fa      	beq.n	800ba5e <_dtoa_r+0xb8e>
 800ba68:	e6d7      	b.n	800b81a <_dtoa_r+0x94a>
 800ba6a:	9a01      	ldr	r2, [sp, #4]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d184      	bne.n	800b97a <_dtoa_r+0xaaa>
 800ba70:	9b00      	ldr	r3, [sp, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	2331      	movs	r3, #49	; 0x31
 800ba78:	7013      	strb	r3, [r2, #0]
 800ba7a:	e6ce      	b.n	800b81a <_dtoa_r+0x94a>
 800ba7c:	4b09      	ldr	r3, [pc, #36]	; (800baa4 <_dtoa_r+0xbd4>)
 800ba7e:	f7ff ba95 	b.w	800afac <_dtoa_r+0xdc>
 800ba82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f47f aa6e 	bne.w	800af66 <_dtoa_r+0x96>
 800ba8a:	4b07      	ldr	r3, [pc, #28]	; (800baa8 <_dtoa_r+0xbd8>)
 800ba8c:	f7ff ba8e 	b.w	800afac <_dtoa_r+0xdc>
 800ba90:	9b02      	ldr	r3, [sp, #8]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dcae      	bgt.n	800b9f4 <_dtoa_r+0xb24>
 800ba96:	9b06      	ldr	r3, [sp, #24]
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	f73f aea8 	bgt.w	800b7ee <_dtoa_r+0x91e>
 800ba9e:	e7a9      	b.n	800b9f4 <_dtoa_r+0xb24>
 800baa0:	0800d4d7 	.word	0x0800d4d7
 800baa4:	0800d434 	.word	0x0800d434
 800baa8:	0800d458 	.word	0x0800d458

0800baac <std>:
 800baac:	2300      	movs	r3, #0
 800baae:	b510      	push	{r4, lr}
 800bab0:	4604      	mov	r4, r0
 800bab2:	e9c0 3300 	strd	r3, r3, [r0]
 800bab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baba:	6083      	str	r3, [r0, #8]
 800babc:	8181      	strh	r1, [r0, #12]
 800babe:	6643      	str	r3, [r0, #100]	; 0x64
 800bac0:	81c2      	strh	r2, [r0, #14]
 800bac2:	6183      	str	r3, [r0, #24]
 800bac4:	4619      	mov	r1, r3
 800bac6:	2208      	movs	r2, #8
 800bac8:	305c      	adds	r0, #92	; 0x5c
 800baca:	f7fe fccb 	bl	800a464 <memset>
 800bace:	4b05      	ldr	r3, [pc, #20]	; (800bae4 <std+0x38>)
 800bad0:	6263      	str	r3, [r4, #36]	; 0x24
 800bad2:	4b05      	ldr	r3, [pc, #20]	; (800bae8 <std+0x3c>)
 800bad4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bad6:	4b05      	ldr	r3, [pc, #20]	; (800baec <std+0x40>)
 800bad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bada:	4b05      	ldr	r3, [pc, #20]	; (800baf0 <std+0x44>)
 800badc:	6224      	str	r4, [r4, #32]
 800bade:	6323      	str	r3, [r4, #48]	; 0x30
 800bae0:	bd10      	pop	{r4, pc}
 800bae2:	bf00      	nop
 800bae4:	0800cb55 	.word	0x0800cb55
 800bae8:	0800cb77 	.word	0x0800cb77
 800baec:	0800cbaf 	.word	0x0800cbaf
 800baf0:	0800cbd3 	.word	0x0800cbd3

0800baf4 <_cleanup_r>:
 800baf4:	4901      	ldr	r1, [pc, #4]	; (800bafc <_cleanup_r+0x8>)
 800baf6:	f000 b8af 	b.w	800bc58 <_fwalk_reent>
 800bafa:	bf00      	nop
 800bafc:	0800cee9 	.word	0x0800cee9

0800bb00 <__sfmoreglue>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	2268      	movs	r2, #104	; 0x68
 800bb04:	1e4d      	subs	r5, r1, #1
 800bb06:	4355      	muls	r5, r2
 800bb08:	460e      	mov	r6, r1
 800bb0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb0e:	f000 fce7 	bl	800c4e0 <_malloc_r>
 800bb12:	4604      	mov	r4, r0
 800bb14:	b140      	cbz	r0, 800bb28 <__sfmoreglue+0x28>
 800bb16:	2100      	movs	r1, #0
 800bb18:	e9c0 1600 	strd	r1, r6, [r0]
 800bb1c:	300c      	adds	r0, #12
 800bb1e:	60a0      	str	r0, [r4, #8]
 800bb20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb24:	f7fe fc9e 	bl	800a464 <memset>
 800bb28:	4620      	mov	r0, r4
 800bb2a:	bd70      	pop	{r4, r5, r6, pc}

0800bb2c <__sfp_lock_acquire>:
 800bb2c:	4801      	ldr	r0, [pc, #4]	; (800bb34 <__sfp_lock_acquire+0x8>)
 800bb2e:	f000 b8b8 	b.w	800bca2 <__retarget_lock_acquire_recursive>
 800bb32:	bf00      	nop
 800bb34:	20000905 	.word	0x20000905

0800bb38 <__sfp_lock_release>:
 800bb38:	4801      	ldr	r0, [pc, #4]	; (800bb40 <__sfp_lock_release+0x8>)
 800bb3a:	f000 b8b3 	b.w	800bca4 <__retarget_lock_release_recursive>
 800bb3e:	bf00      	nop
 800bb40:	20000905 	.word	0x20000905

0800bb44 <__sinit_lock_acquire>:
 800bb44:	4801      	ldr	r0, [pc, #4]	; (800bb4c <__sinit_lock_acquire+0x8>)
 800bb46:	f000 b8ac 	b.w	800bca2 <__retarget_lock_acquire_recursive>
 800bb4a:	bf00      	nop
 800bb4c:	20000906 	.word	0x20000906

0800bb50 <__sinit_lock_release>:
 800bb50:	4801      	ldr	r0, [pc, #4]	; (800bb58 <__sinit_lock_release+0x8>)
 800bb52:	f000 b8a7 	b.w	800bca4 <__retarget_lock_release_recursive>
 800bb56:	bf00      	nop
 800bb58:	20000906 	.word	0x20000906

0800bb5c <__sinit>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	4604      	mov	r4, r0
 800bb60:	f7ff fff0 	bl	800bb44 <__sinit_lock_acquire>
 800bb64:	69a3      	ldr	r3, [r4, #24]
 800bb66:	b11b      	cbz	r3, 800bb70 <__sinit+0x14>
 800bb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb6c:	f7ff bff0 	b.w	800bb50 <__sinit_lock_release>
 800bb70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb74:	6523      	str	r3, [r4, #80]	; 0x50
 800bb76:	4b13      	ldr	r3, [pc, #76]	; (800bbc4 <__sinit+0x68>)
 800bb78:	4a13      	ldr	r2, [pc, #76]	; (800bbc8 <__sinit+0x6c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb7e:	42a3      	cmp	r3, r4
 800bb80:	bf04      	itt	eq
 800bb82:	2301      	moveq	r3, #1
 800bb84:	61a3      	streq	r3, [r4, #24]
 800bb86:	4620      	mov	r0, r4
 800bb88:	f000 f820 	bl	800bbcc <__sfp>
 800bb8c:	6060      	str	r0, [r4, #4]
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f000 f81c 	bl	800bbcc <__sfp>
 800bb94:	60a0      	str	r0, [r4, #8]
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 f818 	bl	800bbcc <__sfp>
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	60e0      	str	r0, [r4, #12]
 800bba0:	2104      	movs	r1, #4
 800bba2:	6860      	ldr	r0, [r4, #4]
 800bba4:	f7ff ff82 	bl	800baac <std>
 800bba8:	68a0      	ldr	r0, [r4, #8]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	2109      	movs	r1, #9
 800bbae:	f7ff ff7d 	bl	800baac <std>
 800bbb2:	68e0      	ldr	r0, [r4, #12]
 800bbb4:	2202      	movs	r2, #2
 800bbb6:	2112      	movs	r1, #18
 800bbb8:	f7ff ff78 	bl	800baac <std>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	61a3      	str	r3, [r4, #24]
 800bbc0:	e7d2      	b.n	800bb68 <__sinit+0xc>
 800bbc2:	bf00      	nop
 800bbc4:	0800d420 	.word	0x0800d420
 800bbc8:	0800baf5 	.word	0x0800baf5

0800bbcc <__sfp>:
 800bbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbce:	4607      	mov	r7, r0
 800bbd0:	f7ff ffac 	bl	800bb2c <__sfp_lock_acquire>
 800bbd4:	4b1e      	ldr	r3, [pc, #120]	; (800bc50 <__sfp+0x84>)
 800bbd6:	681e      	ldr	r6, [r3, #0]
 800bbd8:	69b3      	ldr	r3, [r6, #24]
 800bbda:	b913      	cbnz	r3, 800bbe2 <__sfp+0x16>
 800bbdc:	4630      	mov	r0, r6
 800bbde:	f7ff ffbd 	bl	800bb5c <__sinit>
 800bbe2:	3648      	adds	r6, #72	; 0x48
 800bbe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	d503      	bpl.n	800bbf4 <__sfp+0x28>
 800bbec:	6833      	ldr	r3, [r6, #0]
 800bbee:	b30b      	cbz	r3, 800bc34 <__sfp+0x68>
 800bbf0:	6836      	ldr	r6, [r6, #0]
 800bbf2:	e7f7      	b.n	800bbe4 <__sfp+0x18>
 800bbf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbf8:	b9d5      	cbnz	r5, 800bc30 <__sfp+0x64>
 800bbfa:	4b16      	ldr	r3, [pc, #88]	; (800bc54 <__sfp+0x88>)
 800bbfc:	60e3      	str	r3, [r4, #12]
 800bbfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc02:	6665      	str	r5, [r4, #100]	; 0x64
 800bc04:	f000 f84c 	bl	800bca0 <__retarget_lock_init_recursive>
 800bc08:	f7ff ff96 	bl	800bb38 <__sfp_lock_release>
 800bc0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc14:	6025      	str	r5, [r4, #0]
 800bc16:	61a5      	str	r5, [r4, #24]
 800bc18:	2208      	movs	r2, #8
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc20:	f7fe fc20 	bl	800a464 <memset>
 800bc24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc30:	3468      	adds	r4, #104	; 0x68
 800bc32:	e7d9      	b.n	800bbe8 <__sfp+0x1c>
 800bc34:	2104      	movs	r1, #4
 800bc36:	4638      	mov	r0, r7
 800bc38:	f7ff ff62 	bl	800bb00 <__sfmoreglue>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	6030      	str	r0, [r6, #0]
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d1d5      	bne.n	800bbf0 <__sfp+0x24>
 800bc44:	f7ff ff78 	bl	800bb38 <__sfp_lock_release>
 800bc48:	230c      	movs	r3, #12
 800bc4a:	603b      	str	r3, [r7, #0]
 800bc4c:	e7ee      	b.n	800bc2c <__sfp+0x60>
 800bc4e:	bf00      	nop
 800bc50:	0800d420 	.word	0x0800d420
 800bc54:	ffff0001 	.word	0xffff0001

0800bc58 <_fwalk_reent>:
 800bc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	4688      	mov	r8, r1
 800bc60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc64:	2700      	movs	r7, #0
 800bc66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc6a:	f1b9 0901 	subs.w	r9, r9, #1
 800bc6e:	d505      	bpl.n	800bc7c <_fwalk_reent+0x24>
 800bc70:	6824      	ldr	r4, [r4, #0]
 800bc72:	2c00      	cmp	r4, #0
 800bc74:	d1f7      	bne.n	800bc66 <_fwalk_reent+0xe>
 800bc76:	4638      	mov	r0, r7
 800bc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc7c:	89ab      	ldrh	r3, [r5, #12]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d907      	bls.n	800bc92 <_fwalk_reent+0x3a>
 800bc82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc86:	3301      	adds	r3, #1
 800bc88:	d003      	beq.n	800bc92 <_fwalk_reent+0x3a>
 800bc8a:	4629      	mov	r1, r5
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	47c0      	blx	r8
 800bc90:	4307      	orrs	r7, r0
 800bc92:	3568      	adds	r5, #104	; 0x68
 800bc94:	e7e9      	b.n	800bc6a <_fwalk_reent+0x12>
	...

0800bc98 <_localeconv_r>:
 800bc98:	4800      	ldr	r0, [pc, #0]	; (800bc9c <_localeconv_r+0x4>)
 800bc9a:	4770      	bx	lr
 800bc9c:	20000160 	.word	0x20000160

0800bca0 <__retarget_lock_init_recursive>:
 800bca0:	4770      	bx	lr

0800bca2 <__retarget_lock_acquire_recursive>:
 800bca2:	4770      	bx	lr

0800bca4 <__retarget_lock_release_recursive>:
 800bca4:	4770      	bx	lr
	...

0800bca8 <malloc>:
 800bca8:	4b02      	ldr	r3, [pc, #8]	; (800bcb4 <malloc+0xc>)
 800bcaa:	4601      	mov	r1, r0
 800bcac:	6818      	ldr	r0, [r3, #0]
 800bcae:	f000 bc17 	b.w	800c4e0 <_malloc_r>
 800bcb2:	bf00      	nop
 800bcb4:	2000000c 	.word	0x2000000c

0800bcb8 <memcpy>:
 800bcb8:	440a      	add	r2, r1
 800bcba:	4291      	cmp	r1, r2
 800bcbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcc0:	d100      	bne.n	800bcc4 <memcpy+0xc>
 800bcc2:	4770      	bx	lr
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcce:	4291      	cmp	r1, r2
 800bcd0:	d1f9      	bne.n	800bcc6 <memcpy+0xe>
 800bcd2:	bd10      	pop	{r4, pc}

0800bcd4 <_Balloc>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bcd8:	4604      	mov	r4, r0
 800bcda:	460d      	mov	r5, r1
 800bcdc:	b976      	cbnz	r6, 800bcfc <_Balloc+0x28>
 800bcde:	2010      	movs	r0, #16
 800bce0:	f7ff ffe2 	bl	800bca8 <malloc>
 800bce4:	4602      	mov	r2, r0
 800bce6:	6260      	str	r0, [r4, #36]	; 0x24
 800bce8:	b920      	cbnz	r0, 800bcf4 <_Balloc+0x20>
 800bcea:	4b18      	ldr	r3, [pc, #96]	; (800bd4c <_Balloc+0x78>)
 800bcec:	4818      	ldr	r0, [pc, #96]	; (800bd50 <_Balloc+0x7c>)
 800bcee:	2166      	movs	r1, #102	; 0x66
 800bcf0:	f001 f846 	bl	800cd80 <__assert_func>
 800bcf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcf8:	6006      	str	r6, [r0, #0]
 800bcfa:	60c6      	str	r6, [r0, #12]
 800bcfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bcfe:	68f3      	ldr	r3, [r6, #12]
 800bd00:	b183      	cbz	r3, 800bd24 <_Balloc+0x50>
 800bd02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd0a:	b9b8      	cbnz	r0, 800bd3c <_Balloc+0x68>
 800bd0c:	2101      	movs	r1, #1
 800bd0e:	fa01 f605 	lsl.w	r6, r1, r5
 800bd12:	1d72      	adds	r2, r6, #5
 800bd14:	0092      	lsls	r2, r2, #2
 800bd16:	4620      	mov	r0, r4
 800bd18:	f000 fb60 	bl	800c3dc <_calloc_r>
 800bd1c:	b160      	cbz	r0, 800bd38 <_Balloc+0x64>
 800bd1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd22:	e00e      	b.n	800bd42 <_Balloc+0x6e>
 800bd24:	2221      	movs	r2, #33	; 0x21
 800bd26:	2104      	movs	r1, #4
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f000 fb57 	bl	800c3dc <_calloc_r>
 800bd2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd30:	60f0      	str	r0, [r6, #12]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d1e4      	bne.n	800bd02 <_Balloc+0x2e>
 800bd38:	2000      	movs	r0, #0
 800bd3a:	bd70      	pop	{r4, r5, r6, pc}
 800bd3c:	6802      	ldr	r2, [r0, #0]
 800bd3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd42:	2300      	movs	r3, #0
 800bd44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd48:	e7f7      	b.n	800bd3a <_Balloc+0x66>
 800bd4a:	bf00      	nop
 800bd4c:	0800d465 	.word	0x0800d465
 800bd50:	0800d548 	.word	0x0800d548

0800bd54 <_Bfree>:
 800bd54:	b570      	push	{r4, r5, r6, lr}
 800bd56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bd58:	4605      	mov	r5, r0
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	b976      	cbnz	r6, 800bd7c <_Bfree+0x28>
 800bd5e:	2010      	movs	r0, #16
 800bd60:	f7ff ffa2 	bl	800bca8 <malloc>
 800bd64:	4602      	mov	r2, r0
 800bd66:	6268      	str	r0, [r5, #36]	; 0x24
 800bd68:	b920      	cbnz	r0, 800bd74 <_Bfree+0x20>
 800bd6a:	4b09      	ldr	r3, [pc, #36]	; (800bd90 <_Bfree+0x3c>)
 800bd6c:	4809      	ldr	r0, [pc, #36]	; (800bd94 <_Bfree+0x40>)
 800bd6e:	218a      	movs	r1, #138	; 0x8a
 800bd70:	f001 f806 	bl	800cd80 <__assert_func>
 800bd74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd78:	6006      	str	r6, [r0, #0]
 800bd7a:	60c6      	str	r6, [r0, #12]
 800bd7c:	b13c      	cbz	r4, 800bd8e <_Bfree+0x3a>
 800bd7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd80:	6862      	ldr	r2, [r4, #4]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd88:	6021      	str	r1, [r4, #0]
 800bd8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}
 800bd90:	0800d465 	.word	0x0800d465
 800bd94:	0800d548 	.word	0x0800d548

0800bd98 <__multadd>:
 800bd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd9c:	690d      	ldr	r5, [r1, #16]
 800bd9e:	4607      	mov	r7, r0
 800bda0:	460c      	mov	r4, r1
 800bda2:	461e      	mov	r6, r3
 800bda4:	f101 0c14 	add.w	ip, r1, #20
 800bda8:	2000      	movs	r0, #0
 800bdaa:	f8dc 3000 	ldr.w	r3, [ip]
 800bdae:	b299      	uxth	r1, r3
 800bdb0:	fb02 6101 	mla	r1, r2, r1, r6
 800bdb4:	0c1e      	lsrs	r6, r3, #16
 800bdb6:	0c0b      	lsrs	r3, r1, #16
 800bdb8:	fb02 3306 	mla	r3, r2, r6, r3
 800bdbc:	b289      	uxth	r1, r1
 800bdbe:	3001      	adds	r0, #1
 800bdc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdc4:	4285      	cmp	r5, r0
 800bdc6:	f84c 1b04 	str.w	r1, [ip], #4
 800bdca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdce:	dcec      	bgt.n	800bdaa <__multadd+0x12>
 800bdd0:	b30e      	cbz	r6, 800be16 <__multadd+0x7e>
 800bdd2:	68a3      	ldr	r3, [r4, #8]
 800bdd4:	42ab      	cmp	r3, r5
 800bdd6:	dc19      	bgt.n	800be0c <__multadd+0x74>
 800bdd8:	6861      	ldr	r1, [r4, #4]
 800bdda:	4638      	mov	r0, r7
 800bddc:	3101      	adds	r1, #1
 800bdde:	f7ff ff79 	bl	800bcd4 <_Balloc>
 800bde2:	4680      	mov	r8, r0
 800bde4:	b928      	cbnz	r0, 800bdf2 <__multadd+0x5a>
 800bde6:	4602      	mov	r2, r0
 800bde8:	4b0c      	ldr	r3, [pc, #48]	; (800be1c <__multadd+0x84>)
 800bdea:	480d      	ldr	r0, [pc, #52]	; (800be20 <__multadd+0x88>)
 800bdec:	21b5      	movs	r1, #181	; 0xb5
 800bdee:	f000 ffc7 	bl	800cd80 <__assert_func>
 800bdf2:	6922      	ldr	r2, [r4, #16]
 800bdf4:	3202      	adds	r2, #2
 800bdf6:	f104 010c 	add.w	r1, r4, #12
 800bdfa:	0092      	lsls	r2, r2, #2
 800bdfc:	300c      	adds	r0, #12
 800bdfe:	f7ff ff5b 	bl	800bcb8 <memcpy>
 800be02:	4621      	mov	r1, r4
 800be04:	4638      	mov	r0, r7
 800be06:	f7ff ffa5 	bl	800bd54 <_Bfree>
 800be0a:	4644      	mov	r4, r8
 800be0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be10:	3501      	adds	r5, #1
 800be12:	615e      	str	r6, [r3, #20]
 800be14:	6125      	str	r5, [r4, #16]
 800be16:	4620      	mov	r0, r4
 800be18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be1c:	0800d4d7 	.word	0x0800d4d7
 800be20:	0800d548 	.word	0x0800d548

0800be24 <__hi0bits>:
 800be24:	0c03      	lsrs	r3, r0, #16
 800be26:	041b      	lsls	r3, r3, #16
 800be28:	b9d3      	cbnz	r3, 800be60 <__hi0bits+0x3c>
 800be2a:	0400      	lsls	r0, r0, #16
 800be2c:	2310      	movs	r3, #16
 800be2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800be32:	bf04      	itt	eq
 800be34:	0200      	lsleq	r0, r0, #8
 800be36:	3308      	addeq	r3, #8
 800be38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800be3c:	bf04      	itt	eq
 800be3e:	0100      	lsleq	r0, r0, #4
 800be40:	3304      	addeq	r3, #4
 800be42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800be46:	bf04      	itt	eq
 800be48:	0080      	lsleq	r0, r0, #2
 800be4a:	3302      	addeq	r3, #2
 800be4c:	2800      	cmp	r0, #0
 800be4e:	db05      	blt.n	800be5c <__hi0bits+0x38>
 800be50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800be54:	f103 0301 	add.w	r3, r3, #1
 800be58:	bf08      	it	eq
 800be5a:	2320      	moveq	r3, #32
 800be5c:	4618      	mov	r0, r3
 800be5e:	4770      	bx	lr
 800be60:	2300      	movs	r3, #0
 800be62:	e7e4      	b.n	800be2e <__hi0bits+0xa>

0800be64 <__lo0bits>:
 800be64:	6803      	ldr	r3, [r0, #0]
 800be66:	f013 0207 	ands.w	r2, r3, #7
 800be6a:	4601      	mov	r1, r0
 800be6c:	d00b      	beq.n	800be86 <__lo0bits+0x22>
 800be6e:	07da      	lsls	r2, r3, #31
 800be70:	d423      	bmi.n	800beba <__lo0bits+0x56>
 800be72:	0798      	lsls	r0, r3, #30
 800be74:	bf49      	itett	mi
 800be76:	085b      	lsrmi	r3, r3, #1
 800be78:	089b      	lsrpl	r3, r3, #2
 800be7a:	2001      	movmi	r0, #1
 800be7c:	600b      	strmi	r3, [r1, #0]
 800be7e:	bf5c      	itt	pl
 800be80:	600b      	strpl	r3, [r1, #0]
 800be82:	2002      	movpl	r0, #2
 800be84:	4770      	bx	lr
 800be86:	b298      	uxth	r0, r3
 800be88:	b9a8      	cbnz	r0, 800beb6 <__lo0bits+0x52>
 800be8a:	0c1b      	lsrs	r3, r3, #16
 800be8c:	2010      	movs	r0, #16
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	b90a      	cbnz	r2, 800be96 <__lo0bits+0x32>
 800be92:	3008      	adds	r0, #8
 800be94:	0a1b      	lsrs	r3, r3, #8
 800be96:	071a      	lsls	r2, r3, #28
 800be98:	bf04      	itt	eq
 800be9a:	091b      	lsreq	r3, r3, #4
 800be9c:	3004      	addeq	r0, #4
 800be9e:	079a      	lsls	r2, r3, #30
 800bea0:	bf04      	itt	eq
 800bea2:	089b      	lsreq	r3, r3, #2
 800bea4:	3002      	addeq	r0, #2
 800bea6:	07da      	lsls	r2, r3, #31
 800bea8:	d403      	bmi.n	800beb2 <__lo0bits+0x4e>
 800beaa:	085b      	lsrs	r3, r3, #1
 800beac:	f100 0001 	add.w	r0, r0, #1
 800beb0:	d005      	beq.n	800bebe <__lo0bits+0x5a>
 800beb2:	600b      	str	r3, [r1, #0]
 800beb4:	4770      	bx	lr
 800beb6:	4610      	mov	r0, r2
 800beb8:	e7e9      	b.n	800be8e <__lo0bits+0x2a>
 800beba:	2000      	movs	r0, #0
 800bebc:	4770      	bx	lr
 800bebe:	2020      	movs	r0, #32
 800bec0:	4770      	bx	lr
	...

0800bec4 <__i2b>:
 800bec4:	b510      	push	{r4, lr}
 800bec6:	460c      	mov	r4, r1
 800bec8:	2101      	movs	r1, #1
 800beca:	f7ff ff03 	bl	800bcd4 <_Balloc>
 800bece:	4602      	mov	r2, r0
 800bed0:	b928      	cbnz	r0, 800bede <__i2b+0x1a>
 800bed2:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <__i2b+0x24>)
 800bed4:	4805      	ldr	r0, [pc, #20]	; (800beec <__i2b+0x28>)
 800bed6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800beda:	f000 ff51 	bl	800cd80 <__assert_func>
 800bede:	2301      	movs	r3, #1
 800bee0:	6144      	str	r4, [r0, #20]
 800bee2:	6103      	str	r3, [r0, #16]
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	bf00      	nop
 800bee8:	0800d4d7 	.word	0x0800d4d7
 800beec:	0800d548 	.word	0x0800d548

0800bef0 <__multiply>:
 800bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef4:	4691      	mov	r9, r2
 800bef6:	690a      	ldr	r2, [r1, #16]
 800bef8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800befc:	429a      	cmp	r2, r3
 800befe:	bfb8      	it	lt
 800bf00:	460b      	movlt	r3, r1
 800bf02:	460c      	mov	r4, r1
 800bf04:	bfbc      	itt	lt
 800bf06:	464c      	movlt	r4, r9
 800bf08:	4699      	movlt	r9, r3
 800bf0a:	6927      	ldr	r7, [r4, #16]
 800bf0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf10:	68a3      	ldr	r3, [r4, #8]
 800bf12:	6861      	ldr	r1, [r4, #4]
 800bf14:	eb07 060a 	add.w	r6, r7, sl
 800bf18:	42b3      	cmp	r3, r6
 800bf1a:	b085      	sub	sp, #20
 800bf1c:	bfb8      	it	lt
 800bf1e:	3101      	addlt	r1, #1
 800bf20:	f7ff fed8 	bl	800bcd4 <_Balloc>
 800bf24:	b930      	cbnz	r0, 800bf34 <__multiply+0x44>
 800bf26:	4602      	mov	r2, r0
 800bf28:	4b44      	ldr	r3, [pc, #272]	; (800c03c <__multiply+0x14c>)
 800bf2a:	4845      	ldr	r0, [pc, #276]	; (800c040 <__multiply+0x150>)
 800bf2c:	f240 115d 	movw	r1, #349	; 0x15d
 800bf30:	f000 ff26 	bl	800cd80 <__assert_func>
 800bf34:	f100 0514 	add.w	r5, r0, #20
 800bf38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf3c:	462b      	mov	r3, r5
 800bf3e:	2200      	movs	r2, #0
 800bf40:	4543      	cmp	r3, r8
 800bf42:	d321      	bcc.n	800bf88 <__multiply+0x98>
 800bf44:	f104 0314 	add.w	r3, r4, #20
 800bf48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf4c:	f109 0314 	add.w	r3, r9, #20
 800bf50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf54:	9202      	str	r2, [sp, #8]
 800bf56:	1b3a      	subs	r2, r7, r4
 800bf58:	3a15      	subs	r2, #21
 800bf5a:	f022 0203 	bic.w	r2, r2, #3
 800bf5e:	3204      	adds	r2, #4
 800bf60:	f104 0115 	add.w	r1, r4, #21
 800bf64:	428f      	cmp	r7, r1
 800bf66:	bf38      	it	cc
 800bf68:	2204      	movcc	r2, #4
 800bf6a:	9201      	str	r2, [sp, #4]
 800bf6c:	9a02      	ldr	r2, [sp, #8]
 800bf6e:	9303      	str	r3, [sp, #12]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d80c      	bhi.n	800bf8e <__multiply+0x9e>
 800bf74:	2e00      	cmp	r6, #0
 800bf76:	dd03      	ble.n	800bf80 <__multiply+0x90>
 800bf78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d05a      	beq.n	800c036 <__multiply+0x146>
 800bf80:	6106      	str	r6, [r0, #16]
 800bf82:	b005      	add	sp, #20
 800bf84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf88:	f843 2b04 	str.w	r2, [r3], #4
 800bf8c:	e7d8      	b.n	800bf40 <__multiply+0x50>
 800bf8e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf92:	f1ba 0f00 	cmp.w	sl, #0
 800bf96:	d024      	beq.n	800bfe2 <__multiply+0xf2>
 800bf98:	f104 0e14 	add.w	lr, r4, #20
 800bf9c:	46a9      	mov	r9, r5
 800bf9e:	f04f 0c00 	mov.w	ip, #0
 800bfa2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bfa6:	f8d9 1000 	ldr.w	r1, [r9]
 800bfaa:	fa1f fb82 	uxth.w	fp, r2
 800bfae:	b289      	uxth	r1, r1
 800bfb0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bfb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bfb8:	f8d9 2000 	ldr.w	r2, [r9]
 800bfbc:	4461      	add	r1, ip
 800bfbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfc2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bfc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bfca:	b289      	uxth	r1, r1
 800bfcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bfd0:	4577      	cmp	r7, lr
 800bfd2:	f849 1b04 	str.w	r1, [r9], #4
 800bfd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bfda:	d8e2      	bhi.n	800bfa2 <__multiply+0xb2>
 800bfdc:	9a01      	ldr	r2, [sp, #4]
 800bfde:	f845 c002 	str.w	ip, [r5, r2]
 800bfe2:	9a03      	ldr	r2, [sp, #12]
 800bfe4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bfe8:	3304      	adds	r3, #4
 800bfea:	f1b9 0f00 	cmp.w	r9, #0
 800bfee:	d020      	beq.n	800c032 <__multiply+0x142>
 800bff0:	6829      	ldr	r1, [r5, #0]
 800bff2:	f104 0c14 	add.w	ip, r4, #20
 800bff6:	46ae      	mov	lr, r5
 800bff8:	f04f 0a00 	mov.w	sl, #0
 800bffc:	f8bc b000 	ldrh.w	fp, [ip]
 800c000:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c004:	fb09 220b 	mla	r2, r9, fp, r2
 800c008:	4492      	add	sl, r2
 800c00a:	b289      	uxth	r1, r1
 800c00c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c010:	f84e 1b04 	str.w	r1, [lr], #4
 800c014:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c018:	f8be 1000 	ldrh.w	r1, [lr]
 800c01c:	0c12      	lsrs	r2, r2, #16
 800c01e:	fb09 1102 	mla	r1, r9, r2, r1
 800c022:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c026:	4567      	cmp	r7, ip
 800c028:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c02c:	d8e6      	bhi.n	800bffc <__multiply+0x10c>
 800c02e:	9a01      	ldr	r2, [sp, #4]
 800c030:	50a9      	str	r1, [r5, r2]
 800c032:	3504      	adds	r5, #4
 800c034:	e79a      	b.n	800bf6c <__multiply+0x7c>
 800c036:	3e01      	subs	r6, #1
 800c038:	e79c      	b.n	800bf74 <__multiply+0x84>
 800c03a:	bf00      	nop
 800c03c:	0800d4d7 	.word	0x0800d4d7
 800c040:	0800d548 	.word	0x0800d548

0800c044 <__pow5mult>:
 800c044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c048:	4615      	mov	r5, r2
 800c04a:	f012 0203 	ands.w	r2, r2, #3
 800c04e:	4606      	mov	r6, r0
 800c050:	460f      	mov	r7, r1
 800c052:	d007      	beq.n	800c064 <__pow5mult+0x20>
 800c054:	4c25      	ldr	r4, [pc, #148]	; (800c0ec <__pow5mult+0xa8>)
 800c056:	3a01      	subs	r2, #1
 800c058:	2300      	movs	r3, #0
 800c05a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c05e:	f7ff fe9b 	bl	800bd98 <__multadd>
 800c062:	4607      	mov	r7, r0
 800c064:	10ad      	asrs	r5, r5, #2
 800c066:	d03d      	beq.n	800c0e4 <__pow5mult+0xa0>
 800c068:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c06a:	b97c      	cbnz	r4, 800c08c <__pow5mult+0x48>
 800c06c:	2010      	movs	r0, #16
 800c06e:	f7ff fe1b 	bl	800bca8 <malloc>
 800c072:	4602      	mov	r2, r0
 800c074:	6270      	str	r0, [r6, #36]	; 0x24
 800c076:	b928      	cbnz	r0, 800c084 <__pow5mult+0x40>
 800c078:	4b1d      	ldr	r3, [pc, #116]	; (800c0f0 <__pow5mult+0xac>)
 800c07a:	481e      	ldr	r0, [pc, #120]	; (800c0f4 <__pow5mult+0xb0>)
 800c07c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c080:	f000 fe7e 	bl	800cd80 <__assert_func>
 800c084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c088:	6004      	str	r4, [r0, #0]
 800c08a:	60c4      	str	r4, [r0, #12]
 800c08c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c094:	b94c      	cbnz	r4, 800c0aa <__pow5mult+0x66>
 800c096:	f240 2171 	movw	r1, #625	; 0x271
 800c09a:	4630      	mov	r0, r6
 800c09c:	f7ff ff12 	bl	800bec4 <__i2b>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	6003      	str	r3, [r0, #0]
 800c0aa:	f04f 0900 	mov.w	r9, #0
 800c0ae:	07eb      	lsls	r3, r5, #31
 800c0b0:	d50a      	bpl.n	800c0c8 <__pow5mult+0x84>
 800c0b2:	4639      	mov	r1, r7
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	f7ff ff1a 	bl	800bef0 <__multiply>
 800c0bc:	4639      	mov	r1, r7
 800c0be:	4680      	mov	r8, r0
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f7ff fe47 	bl	800bd54 <_Bfree>
 800c0c6:	4647      	mov	r7, r8
 800c0c8:	106d      	asrs	r5, r5, #1
 800c0ca:	d00b      	beq.n	800c0e4 <__pow5mult+0xa0>
 800c0cc:	6820      	ldr	r0, [r4, #0]
 800c0ce:	b938      	cbnz	r0, 800c0e0 <__pow5mult+0x9c>
 800c0d0:	4622      	mov	r2, r4
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f7ff ff0b 	bl	800bef0 <__multiply>
 800c0da:	6020      	str	r0, [r4, #0]
 800c0dc:	f8c0 9000 	str.w	r9, [r0]
 800c0e0:	4604      	mov	r4, r0
 800c0e2:	e7e4      	b.n	800c0ae <__pow5mult+0x6a>
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ea:	bf00      	nop
 800c0ec:	0800d698 	.word	0x0800d698
 800c0f0:	0800d465 	.word	0x0800d465
 800c0f4:	0800d548 	.word	0x0800d548

0800c0f8 <__lshift>:
 800c0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	6849      	ldr	r1, [r1, #4]
 800c100:	6923      	ldr	r3, [r4, #16]
 800c102:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c106:	68a3      	ldr	r3, [r4, #8]
 800c108:	4607      	mov	r7, r0
 800c10a:	4691      	mov	r9, r2
 800c10c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c110:	f108 0601 	add.w	r6, r8, #1
 800c114:	42b3      	cmp	r3, r6
 800c116:	db0b      	blt.n	800c130 <__lshift+0x38>
 800c118:	4638      	mov	r0, r7
 800c11a:	f7ff fddb 	bl	800bcd4 <_Balloc>
 800c11e:	4605      	mov	r5, r0
 800c120:	b948      	cbnz	r0, 800c136 <__lshift+0x3e>
 800c122:	4602      	mov	r2, r0
 800c124:	4b2a      	ldr	r3, [pc, #168]	; (800c1d0 <__lshift+0xd8>)
 800c126:	482b      	ldr	r0, [pc, #172]	; (800c1d4 <__lshift+0xdc>)
 800c128:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c12c:	f000 fe28 	bl	800cd80 <__assert_func>
 800c130:	3101      	adds	r1, #1
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	e7ee      	b.n	800c114 <__lshift+0x1c>
 800c136:	2300      	movs	r3, #0
 800c138:	f100 0114 	add.w	r1, r0, #20
 800c13c:	f100 0210 	add.w	r2, r0, #16
 800c140:	4618      	mov	r0, r3
 800c142:	4553      	cmp	r3, sl
 800c144:	db37      	blt.n	800c1b6 <__lshift+0xbe>
 800c146:	6920      	ldr	r0, [r4, #16]
 800c148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c14c:	f104 0314 	add.w	r3, r4, #20
 800c150:	f019 091f 	ands.w	r9, r9, #31
 800c154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c158:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c15c:	d02f      	beq.n	800c1be <__lshift+0xc6>
 800c15e:	f1c9 0e20 	rsb	lr, r9, #32
 800c162:	468a      	mov	sl, r1
 800c164:	f04f 0c00 	mov.w	ip, #0
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	fa02 f209 	lsl.w	r2, r2, r9
 800c16e:	ea42 020c 	orr.w	r2, r2, ip
 800c172:	f84a 2b04 	str.w	r2, [sl], #4
 800c176:	f853 2b04 	ldr.w	r2, [r3], #4
 800c17a:	4298      	cmp	r0, r3
 800c17c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c180:	d8f2      	bhi.n	800c168 <__lshift+0x70>
 800c182:	1b03      	subs	r3, r0, r4
 800c184:	3b15      	subs	r3, #21
 800c186:	f023 0303 	bic.w	r3, r3, #3
 800c18a:	3304      	adds	r3, #4
 800c18c:	f104 0215 	add.w	r2, r4, #21
 800c190:	4290      	cmp	r0, r2
 800c192:	bf38      	it	cc
 800c194:	2304      	movcc	r3, #4
 800c196:	f841 c003 	str.w	ip, [r1, r3]
 800c19a:	f1bc 0f00 	cmp.w	ip, #0
 800c19e:	d001      	beq.n	800c1a4 <__lshift+0xac>
 800c1a0:	f108 0602 	add.w	r6, r8, #2
 800c1a4:	3e01      	subs	r6, #1
 800c1a6:	4638      	mov	r0, r7
 800c1a8:	612e      	str	r6, [r5, #16]
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	f7ff fdd2 	bl	800bd54 <_Bfree>
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	e7c1      	b.n	800c142 <__lshift+0x4a>
 800c1be:	3904      	subs	r1, #4
 800c1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1c8:	4298      	cmp	r0, r3
 800c1ca:	d8f9      	bhi.n	800c1c0 <__lshift+0xc8>
 800c1cc:	e7ea      	b.n	800c1a4 <__lshift+0xac>
 800c1ce:	bf00      	nop
 800c1d0:	0800d4d7 	.word	0x0800d4d7
 800c1d4:	0800d548 	.word	0x0800d548

0800c1d8 <__mcmp>:
 800c1d8:	b530      	push	{r4, r5, lr}
 800c1da:	6902      	ldr	r2, [r0, #16]
 800c1dc:	690c      	ldr	r4, [r1, #16]
 800c1de:	1b12      	subs	r2, r2, r4
 800c1e0:	d10e      	bne.n	800c200 <__mcmp+0x28>
 800c1e2:	f100 0314 	add.w	r3, r0, #20
 800c1e6:	3114      	adds	r1, #20
 800c1e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c1ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c1f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c1f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c1f8:	42a5      	cmp	r5, r4
 800c1fa:	d003      	beq.n	800c204 <__mcmp+0x2c>
 800c1fc:	d305      	bcc.n	800c20a <__mcmp+0x32>
 800c1fe:	2201      	movs	r2, #1
 800c200:	4610      	mov	r0, r2
 800c202:	bd30      	pop	{r4, r5, pc}
 800c204:	4283      	cmp	r3, r0
 800c206:	d3f3      	bcc.n	800c1f0 <__mcmp+0x18>
 800c208:	e7fa      	b.n	800c200 <__mcmp+0x28>
 800c20a:	f04f 32ff 	mov.w	r2, #4294967295
 800c20e:	e7f7      	b.n	800c200 <__mcmp+0x28>

0800c210 <__mdiff>:
 800c210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	460c      	mov	r4, r1
 800c216:	4606      	mov	r6, r0
 800c218:	4611      	mov	r1, r2
 800c21a:	4620      	mov	r0, r4
 800c21c:	4690      	mov	r8, r2
 800c21e:	f7ff ffdb 	bl	800c1d8 <__mcmp>
 800c222:	1e05      	subs	r5, r0, #0
 800c224:	d110      	bne.n	800c248 <__mdiff+0x38>
 800c226:	4629      	mov	r1, r5
 800c228:	4630      	mov	r0, r6
 800c22a:	f7ff fd53 	bl	800bcd4 <_Balloc>
 800c22e:	b930      	cbnz	r0, 800c23e <__mdiff+0x2e>
 800c230:	4b3a      	ldr	r3, [pc, #232]	; (800c31c <__mdiff+0x10c>)
 800c232:	4602      	mov	r2, r0
 800c234:	f240 2132 	movw	r1, #562	; 0x232
 800c238:	4839      	ldr	r0, [pc, #228]	; (800c320 <__mdiff+0x110>)
 800c23a:	f000 fda1 	bl	800cd80 <__assert_func>
 800c23e:	2301      	movs	r3, #1
 800c240:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c248:	bfa4      	itt	ge
 800c24a:	4643      	movge	r3, r8
 800c24c:	46a0      	movge	r8, r4
 800c24e:	4630      	mov	r0, r6
 800c250:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c254:	bfa6      	itte	ge
 800c256:	461c      	movge	r4, r3
 800c258:	2500      	movge	r5, #0
 800c25a:	2501      	movlt	r5, #1
 800c25c:	f7ff fd3a 	bl	800bcd4 <_Balloc>
 800c260:	b920      	cbnz	r0, 800c26c <__mdiff+0x5c>
 800c262:	4b2e      	ldr	r3, [pc, #184]	; (800c31c <__mdiff+0x10c>)
 800c264:	4602      	mov	r2, r0
 800c266:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c26a:	e7e5      	b.n	800c238 <__mdiff+0x28>
 800c26c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c270:	6926      	ldr	r6, [r4, #16]
 800c272:	60c5      	str	r5, [r0, #12]
 800c274:	f104 0914 	add.w	r9, r4, #20
 800c278:	f108 0514 	add.w	r5, r8, #20
 800c27c:	f100 0e14 	add.w	lr, r0, #20
 800c280:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c284:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c288:	f108 0210 	add.w	r2, r8, #16
 800c28c:	46f2      	mov	sl, lr
 800c28e:	2100      	movs	r1, #0
 800c290:	f859 3b04 	ldr.w	r3, [r9], #4
 800c294:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c298:	fa1f f883 	uxth.w	r8, r3
 800c29c:	fa11 f18b 	uxtah	r1, r1, fp
 800c2a0:	0c1b      	lsrs	r3, r3, #16
 800c2a2:	eba1 0808 	sub.w	r8, r1, r8
 800c2a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c2ae:	fa1f f888 	uxth.w	r8, r8
 800c2b2:	1419      	asrs	r1, r3, #16
 800c2b4:	454e      	cmp	r6, r9
 800c2b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c2ba:	f84a 3b04 	str.w	r3, [sl], #4
 800c2be:	d8e7      	bhi.n	800c290 <__mdiff+0x80>
 800c2c0:	1b33      	subs	r3, r6, r4
 800c2c2:	3b15      	subs	r3, #21
 800c2c4:	f023 0303 	bic.w	r3, r3, #3
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	3415      	adds	r4, #21
 800c2cc:	42a6      	cmp	r6, r4
 800c2ce:	bf38      	it	cc
 800c2d0:	2304      	movcc	r3, #4
 800c2d2:	441d      	add	r5, r3
 800c2d4:	4473      	add	r3, lr
 800c2d6:	469e      	mov	lr, r3
 800c2d8:	462e      	mov	r6, r5
 800c2da:	4566      	cmp	r6, ip
 800c2dc:	d30e      	bcc.n	800c2fc <__mdiff+0xec>
 800c2de:	f10c 0203 	add.w	r2, ip, #3
 800c2e2:	1b52      	subs	r2, r2, r5
 800c2e4:	f022 0203 	bic.w	r2, r2, #3
 800c2e8:	3d03      	subs	r5, #3
 800c2ea:	45ac      	cmp	ip, r5
 800c2ec:	bf38      	it	cc
 800c2ee:	2200      	movcc	r2, #0
 800c2f0:	441a      	add	r2, r3
 800c2f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c2f6:	b17b      	cbz	r3, 800c318 <__mdiff+0x108>
 800c2f8:	6107      	str	r7, [r0, #16]
 800c2fa:	e7a3      	b.n	800c244 <__mdiff+0x34>
 800c2fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c300:	fa11 f288 	uxtah	r2, r1, r8
 800c304:	1414      	asrs	r4, r2, #16
 800c306:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c30a:	b292      	uxth	r2, r2
 800c30c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c310:	f84e 2b04 	str.w	r2, [lr], #4
 800c314:	1421      	asrs	r1, r4, #16
 800c316:	e7e0      	b.n	800c2da <__mdiff+0xca>
 800c318:	3f01      	subs	r7, #1
 800c31a:	e7ea      	b.n	800c2f2 <__mdiff+0xe2>
 800c31c:	0800d4d7 	.word	0x0800d4d7
 800c320:	0800d548 	.word	0x0800d548

0800c324 <__d2b>:
 800c324:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c328:	4689      	mov	r9, r1
 800c32a:	2101      	movs	r1, #1
 800c32c:	ec57 6b10 	vmov	r6, r7, d0
 800c330:	4690      	mov	r8, r2
 800c332:	f7ff fccf 	bl	800bcd4 <_Balloc>
 800c336:	4604      	mov	r4, r0
 800c338:	b930      	cbnz	r0, 800c348 <__d2b+0x24>
 800c33a:	4602      	mov	r2, r0
 800c33c:	4b25      	ldr	r3, [pc, #148]	; (800c3d4 <__d2b+0xb0>)
 800c33e:	4826      	ldr	r0, [pc, #152]	; (800c3d8 <__d2b+0xb4>)
 800c340:	f240 310a 	movw	r1, #778	; 0x30a
 800c344:	f000 fd1c 	bl	800cd80 <__assert_func>
 800c348:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c34c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c350:	bb35      	cbnz	r5, 800c3a0 <__d2b+0x7c>
 800c352:	2e00      	cmp	r6, #0
 800c354:	9301      	str	r3, [sp, #4]
 800c356:	d028      	beq.n	800c3aa <__d2b+0x86>
 800c358:	4668      	mov	r0, sp
 800c35a:	9600      	str	r6, [sp, #0]
 800c35c:	f7ff fd82 	bl	800be64 <__lo0bits>
 800c360:	9900      	ldr	r1, [sp, #0]
 800c362:	b300      	cbz	r0, 800c3a6 <__d2b+0x82>
 800c364:	9a01      	ldr	r2, [sp, #4]
 800c366:	f1c0 0320 	rsb	r3, r0, #32
 800c36a:	fa02 f303 	lsl.w	r3, r2, r3
 800c36e:	430b      	orrs	r3, r1
 800c370:	40c2      	lsrs	r2, r0
 800c372:	6163      	str	r3, [r4, #20]
 800c374:	9201      	str	r2, [sp, #4]
 800c376:	9b01      	ldr	r3, [sp, #4]
 800c378:	61a3      	str	r3, [r4, #24]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	bf14      	ite	ne
 800c37e:	2202      	movne	r2, #2
 800c380:	2201      	moveq	r2, #1
 800c382:	6122      	str	r2, [r4, #16]
 800c384:	b1d5      	cbz	r5, 800c3bc <__d2b+0x98>
 800c386:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c38a:	4405      	add	r5, r0
 800c38c:	f8c9 5000 	str.w	r5, [r9]
 800c390:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c394:	f8c8 0000 	str.w	r0, [r8]
 800c398:	4620      	mov	r0, r4
 800c39a:	b003      	add	sp, #12
 800c39c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3a4:	e7d5      	b.n	800c352 <__d2b+0x2e>
 800c3a6:	6161      	str	r1, [r4, #20]
 800c3a8:	e7e5      	b.n	800c376 <__d2b+0x52>
 800c3aa:	a801      	add	r0, sp, #4
 800c3ac:	f7ff fd5a 	bl	800be64 <__lo0bits>
 800c3b0:	9b01      	ldr	r3, [sp, #4]
 800c3b2:	6163      	str	r3, [r4, #20]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	6122      	str	r2, [r4, #16]
 800c3b8:	3020      	adds	r0, #32
 800c3ba:	e7e3      	b.n	800c384 <__d2b+0x60>
 800c3bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3c4:	f8c9 0000 	str.w	r0, [r9]
 800c3c8:	6918      	ldr	r0, [r3, #16]
 800c3ca:	f7ff fd2b 	bl	800be24 <__hi0bits>
 800c3ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3d2:	e7df      	b.n	800c394 <__d2b+0x70>
 800c3d4:	0800d4d7 	.word	0x0800d4d7
 800c3d8:	0800d548 	.word	0x0800d548

0800c3dc <_calloc_r>:
 800c3dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3de:	fba1 2402 	umull	r2, r4, r1, r2
 800c3e2:	b94c      	cbnz	r4, 800c3f8 <_calloc_r+0x1c>
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	9201      	str	r2, [sp, #4]
 800c3e8:	f000 f87a 	bl	800c4e0 <_malloc_r>
 800c3ec:	9a01      	ldr	r2, [sp, #4]
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	b930      	cbnz	r0, 800c400 <_calloc_r+0x24>
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	b003      	add	sp, #12
 800c3f6:	bd30      	pop	{r4, r5, pc}
 800c3f8:	220c      	movs	r2, #12
 800c3fa:	6002      	str	r2, [r0, #0]
 800c3fc:	2500      	movs	r5, #0
 800c3fe:	e7f8      	b.n	800c3f2 <_calloc_r+0x16>
 800c400:	4621      	mov	r1, r4
 800c402:	f7fe f82f 	bl	800a464 <memset>
 800c406:	e7f4      	b.n	800c3f2 <_calloc_r+0x16>

0800c408 <_free_r>:
 800c408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c40a:	2900      	cmp	r1, #0
 800c40c:	d044      	beq.n	800c498 <_free_r+0x90>
 800c40e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c412:	9001      	str	r0, [sp, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	f1a1 0404 	sub.w	r4, r1, #4
 800c41a:	bfb8      	it	lt
 800c41c:	18e4      	addlt	r4, r4, r3
 800c41e:	f000 fe55 	bl	800d0cc <__malloc_lock>
 800c422:	4a1e      	ldr	r2, [pc, #120]	; (800c49c <_free_r+0x94>)
 800c424:	9801      	ldr	r0, [sp, #4]
 800c426:	6813      	ldr	r3, [r2, #0]
 800c428:	b933      	cbnz	r3, 800c438 <_free_r+0x30>
 800c42a:	6063      	str	r3, [r4, #4]
 800c42c:	6014      	str	r4, [r2, #0]
 800c42e:	b003      	add	sp, #12
 800c430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c434:	f000 be50 	b.w	800d0d8 <__malloc_unlock>
 800c438:	42a3      	cmp	r3, r4
 800c43a:	d908      	bls.n	800c44e <_free_r+0x46>
 800c43c:	6825      	ldr	r5, [r4, #0]
 800c43e:	1961      	adds	r1, r4, r5
 800c440:	428b      	cmp	r3, r1
 800c442:	bf01      	itttt	eq
 800c444:	6819      	ldreq	r1, [r3, #0]
 800c446:	685b      	ldreq	r3, [r3, #4]
 800c448:	1949      	addeq	r1, r1, r5
 800c44a:	6021      	streq	r1, [r4, #0]
 800c44c:	e7ed      	b.n	800c42a <_free_r+0x22>
 800c44e:	461a      	mov	r2, r3
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	b10b      	cbz	r3, 800c458 <_free_r+0x50>
 800c454:	42a3      	cmp	r3, r4
 800c456:	d9fa      	bls.n	800c44e <_free_r+0x46>
 800c458:	6811      	ldr	r1, [r2, #0]
 800c45a:	1855      	adds	r5, r2, r1
 800c45c:	42a5      	cmp	r5, r4
 800c45e:	d10b      	bne.n	800c478 <_free_r+0x70>
 800c460:	6824      	ldr	r4, [r4, #0]
 800c462:	4421      	add	r1, r4
 800c464:	1854      	adds	r4, r2, r1
 800c466:	42a3      	cmp	r3, r4
 800c468:	6011      	str	r1, [r2, #0]
 800c46a:	d1e0      	bne.n	800c42e <_free_r+0x26>
 800c46c:	681c      	ldr	r4, [r3, #0]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	6053      	str	r3, [r2, #4]
 800c472:	4421      	add	r1, r4
 800c474:	6011      	str	r1, [r2, #0]
 800c476:	e7da      	b.n	800c42e <_free_r+0x26>
 800c478:	d902      	bls.n	800c480 <_free_r+0x78>
 800c47a:	230c      	movs	r3, #12
 800c47c:	6003      	str	r3, [r0, #0]
 800c47e:	e7d6      	b.n	800c42e <_free_r+0x26>
 800c480:	6825      	ldr	r5, [r4, #0]
 800c482:	1961      	adds	r1, r4, r5
 800c484:	428b      	cmp	r3, r1
 800c486:	bf04      	itt	eq
 800c488:	6819      	ldreq	r1, [r3, #0]
 800c48a:	685b      	ldreq	r3, [r3, #4]
 800c48c:	6063      	str	r3, [r4, #4]
 800c48e:	bf04      	itt	eq
 800c490:	1949      	addeq	r1, r1, r5
 800c492:	6021      	streq	r1, [r4, #0]
 800c494:	6054      	str	r4, [r2, #4]
 800c496:	e7ca      	b.n	800c42e <_free_r+0x26>
 800c498:	b003      	add	sp, #12
 800c49a:	bd30      	pop	{r4, r5, pc}
 800c49c:	20000908 	.word	0x20000908

0800c4a0 <sbrk_aligned>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	4e0e      	ldr	r6, [pc, #56]	; (800c4dc <sbrk_aligned+0x3c>)
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	6831      	ldr	r1, [r6, #0]
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	b911      	cbnz	r1, 800c4b2 <sbrk_aligned+0x12>
 800c4ac:	f000 fb42 	bl	800cb34 <_sbrk_r>
 800c4b0:	6030      	str	r0, [r6, #0]
 800c4b2:	4621      	mov	r1, r4
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	f000 fb3d 	bl	800cb34 <_sbrk_r>
 800c4ba:	1c43      	adds	r3, r0, #1
 800c4bc:	d00a      	beq.n	800c4d4 <sbrk_aligned+0x34>
 800c4be:	1cc4      	adds	r4, r0, #3
 800c4c0:	f024 0403 	bic.w	r4, r4, #3
 800c4c4:	42a0      	cmp	r0, r4
 800c4c6:	d007      	beq.n	800c4d8 <sbrk_aligned+0x38>
 800c4c8:	1a21      	subs	r1, r4, r0
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f000 fb32 	bl	800cb34 <_sbrk_r>
 800c4d0:	3001      	adds	r0, #1
 800c4d2:	d101      	bne.n	800c4d8 <sbrk_aligned+0x38>
 800c4d4:	f04f 34ff 	mov.w	r4, #4294967295
 800c4d8:	4620      	mov	r0, r4
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
 800c4dc:	2000090c 	.word	0x2000090c

0800c4e0 <_malloc_r>:
 800c4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e4:	1ccd      	adds	r5, r1, #3
 800c4e6:	f025 0503 	bic.w	r5, r5, #3
 800c4ea:	3508      	adds	r5, #8
 800c4ec:	2d0c      	cmp	r5, #12
 800c4ee:	bf38      	it	cc
 800c4f0:	250c      	movcc	r5, #12
 800c4f2:	2d00      	cmp	r5, #0
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	db01      	blt.n	800c4fc <_malloc_r+0x1c>
 800c4f8:	42a9      	cmp	r1, r5
 800c4fa:	d905      	bls.n	800c508 <_malloc_r+0x28>
 800c4fc:	230c      	movs	r3, #12
 800c4fe:	603b      	str	r3, [r7, #0]
 800c500:	2600      	movs	r6, #0
 800c502:	4630      	mov	r0, r6
 800c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c508:	4e2e      	ldr	r6, [pc, #184]	; (800c5c4 <_malloc_r+0xe4>)
 800c50a:	f000 fddf 	bl	800d0cc <__malloc_lock>
 800c50e:	6833      	ldr	r3, [r6, #0]
 800c510:	461c      	mov	r4, r3
 800c512:	bb34      	cbnz	r4, 800c562 <_malloc_r+0x82>
 800c514:	4629      	mov	r1, r5
 800c516:	4638      	mov	r0, r7
 800c518:	f7ff ffc2 	bl	800c4a0 <sbrk_aligned>
 800c51c:	1c43      	adds	r3, r0, #1
 800c51e:	4604      	mov	r4, r0
 800c520:	d14d      	bne.n	800c5be <_malloc_r+0xde>
 800c522:	6834      	ldr	r4, [r6, #0]
 800c524:	4626      	mov	r6, r4
 800c526:	2e00      	cmp	r6, #0
 800c528:	d140      	bne.n	800c5ac <_malloc_r+0xcc>
 800c52a:	6823      	ldr	r3, [r4, #0]
 800c52c:	4631      	mov	r1, r6
 800c52e:	4638      	mov	r0, r7
 800c530:	eb04 0803 	add.w	r8, r4, r3
 800c534:	f000 fafe 	bl	800cb34 <_sbrk_r>
 800c538:	4580      	cmp	r8, r0
 800c53a:	d13a      	bne.n	800c5b2 <_malloc_r+0xd2>
 800c53c:	6821      	ldr	r1, [r4, #0]
 800c53e:	3503      	adds	r5, #3
 800c540:	1a6d      	subs	r5, r5, r1
 800c542:	f025 0503 	bic.w	r5, r5, #3
 800c546:	3508      	adds	r5, #8
 800c548:	2d0c      	cmp	r5, #12
 800c54a:	bf38      	it	cc
 800c54c:	250c      	movcc	r5, #12
 800c54e:	4629      	mov	r1, r5
 800c550:	4638      	mov	r0, r7
 800c552:	f7ff ffa5 	bl	800c4a0 <sbrk_aligned>
 800c556:	3001      	adds	r0, #1
 800c558:	d02b      	beq.n	800c5b2 <_malloc_r+0xd2>
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	442b      	add	r3, r5
 800c55e:	6023      	str	r3, [r4, #0]
 800c560:	e00e      	b.n	800c580 <_malloc_r+0xa0>
 800c562:	6822      	ldr	r2, [r4, #0]
 800c564:	1b52      	subs	r2, r2, r5
 800c566:	d41e      	bmi.n	800c5a6 <_malloc_r+0xc6>
 800c568:	2a0b      	cmp	r2, #11
 800c56a:	d916      	bls.n	800c59a <_malloc_r+0xba>
 800c56c:	1961      	adds	r1, r4, r5
 800c56e:	42a3      	cmp	r3, r4
 800c570:	6025      	str	r5, [r4, #0]
 800c572:	bf18      	it	ne
 800c574:	6059      	strne	r1, [r3, #4]
 800c576:	6863      	ldr	r3, [r4, #4]
 800c578:	bf08      	it	eq
 800c57a:	6031      	streq	r1, [r6, #0]
 800c57c:	5162      	str	r2, [r4, r5]
 800c57e:	604b      	str	r3, [r1, #4]
 800c580:	4638      	mov	r0, r7
 800c582:	f104 060b 	add.w	r6, r4, #11
 800c586:	f000 fda7 	bl	800d0d8 <__malloc_unlock>
 800c58a:	f026 0607 	bic.w	r6, r6, #7
 800c58e:	1d23      	adds	r3, r4, #4
 800c590:	1af2      	subs	r2, r6, r3
 800c592:	d0b6      	beq.n	800c502 <_malloc_r+0x22>
 800c594:	1b9b      	subs	r3, r3, r6
 800c596:	50a3      	str	r3, [r4, r2]
 800c598:	e7b3      	b.n	800c502 <_malloc_r+0x22>
 800c59a:	6862      	ldr	r2, [r4, #4]
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	bf0c      	ite	eq
 800c5a0:	6032      	streq	r2, [r6, #0]
 800c5a2:	605a      	strne	r2, [r3, #4]
 800c5a4:	e7ec      	b.n	800c580 <_malloc_r+0xa0>
 800c5a6:	4623      	mov	r3, r4
 800c5a8:	6864      	ldr	r4, [r4, #4]
 800c5aa:	e7b2      	b.n	800c512 <_malloc_r+0x32>
 800c5ac:	4634      	mov	r4, r6
 800c5ae:	6876      	ldr	r6, [r6, #4]
 800c5b0:	e7b9      	b.n	800c526 <_malloc_r+0x46>
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	603b      	str	r3, [r7, #0]
 800c5b6:	4638      	mov	r0, r7
 800c5b8:	f000 fd8e 	bl	800d0d8 <__malloc_unlock>
 800c5bc:	e7a1      	b.n	800c502 <_malloc_r+0x22>
 800c5be:	6025      	str	r5, [r4, #0]
 800c5c0:	e7de      	b.n	800c580 <_malloc_r+0xa0>
 800c5c2:	bf00      	nop
 800c5c4:	20000908 	.word	0x20000908

0800c5c8 <__ssputs_r>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	688e      	ldr	r6, [r1, #8]
 800c5ce:	429e      	cmp	r6, r3
 800c5d0:	4682      	mov	sl, r0
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	4690      	mov	r8, r2
 800c5d6:	461f      	mov	r7, r3
 800c5d8:	d838      	bhi.n	800c64c <__ssputs_r+0x84>
 800c5da:	898a      	ldrh	r2, [r1, #12]
 800c5dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5e0:	d032      	beq.n	800c648 <__ssputs_r+0x80>
 800c5e2:	6825      	ldr	r5, [r4, #0]
 800c5e4:	6909      	ldr	r1, [r1, #16]
 800c5e6:	eba5 0901 	sub.w	r9, r5, r1
 800c5ea:	6965      	ldr	r5, [r4, #20]
 800c5ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	444b      	add	r3, r9
 800c5f8:	106d      	asrs	r5, r5, #1
 800c5fa:	429d      	cmp	r5, r3
 800c5fc:	bf38      	it	cc
 800c5fe:	461d      	movcc	r5, r3
 800c600:	0553      	lsls	r3, r2, #21
 800c602:	d531      	bpl.n	800c668 <__ssputs_r+0xa0>
 800c604:	4629      	mov	r1, r5
 800c606:	f7ff ff6b 	bl	800c4e0 <_malloc_r>
 800c60a:	4606      	mov	r6, r0
 800c60c:	b950      	cbnz	r0, 800c624 <__ssputs_r+0x5c>
 800c60e:	230c      	movs	r3, #12
 800c610:	f8ca 3000 	str.w	r3, [sl]
 800c614:	89a3      	ldrh	r3, [r4, #12]
 800c616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c61a:	81a3      	strh	r3, [r4, #12]
 800c61c:	f04f 30ff 	mov.w	r0, #4294967295
 800c620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c624:	6921      	ldr	r1, [r4, #16]
 800c626:	464a      	mov	r2, r9
 800c628:	f7ff fb46 	bl	800bcb8 <memcpy>
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c636:	81a3      	strh	r3, [r4, #12]
 800c638:	6126      	str	r6, [r4, #16]
 800c63a:	6165      	str	r5, [r4, #20]
 800c63c:	444e      	add	r6, r9
 800c63e:	eba5 0509 	sub.w	r5, r5, r9
 800c642:	6026      	str	r6, [r4, #0]
 800c644:	60a5      	str	r5, [r4, #8]
 800c646:	463e      	mov	r6, r7
 800c648:	42be      	cmp	r6, r7
 800c64a:	d900      	bls.n	800c64e <__ssputs_r+0x86>
 800c64c:	463e      	mov	r6, r7
 800c64e:	6820      	ldr	r0, [r4, #0]
 800c650:	4632      	mov	r2, r6
 800c652:	4641      	mov	r1, r8
 800c654:	f000 fd20 	bl	800d098 <memmove>
 800c658:	68a3      	ldr	r3, [r4, #8]
 800c65a:	1b9b      	subs	r3, r3, r6
 800c65c:	60a3      	str	r3, [r4, #8]
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	4433      	add	r3, r6
 800c662:	6023      	str	r3, [r4, #0]
 800c664:	2000      	movs	r0, #0
 800c666:	e7db      	b.n	800c620 <__ssputs_r+0x58>
 800c668:	462a      	mov	r2, r5
 800c66a:	f000 fd3b 	bl	800d0e4 <_realloc_r>
 800c66e:	4606      	mov	r6, r0
 800c670:	2800      	cmp	r0, #0
 800c672:	d1e1      	bne.n	800c638 <__ssputs_r+0x70>
 800c674:	6921      	ldr	r1, [r4, #16]
 800c676:	4650      	mov	r0, sl
 800c678:	f7ff fec6 	bl	800c408 <_free_r>
 800c67c:	e7c7      	b.n	800c60e <__ssputs_r+0x46>
	...

0800c680 <_svfiprintf_r>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	4698      	mov	r8, r3
 800c686:	898b      	ldrh	r3, [r1, #12]
 800c688:	061b      	lsls	r3, r3, #24
 800c68a:	b09d      	sub	sp, #116	; 0x74
 800c68c:	4607      	mov	r7, r0
 800c68e:	460d      	mov	r5, r1
 800c690:	4614      	mov	r4, r2
 800c692:	d50e      	bpl.n	800c6b2 <_svfiprintf_r+0x32>
 800c694:	690b      	ldr	r3, [r1, #16]
 800c696:	b963      	cbnz	r3, 800c6b2 <_svfiprintf_r+0x32>
 800c698:	2140      	movs	r1, #64	; 0x40
 800c69a:	f7ff ff21 	bl	800c4e0 <_malloc_r>
 800c69e:	6028      	str	r0, [r5, #0]
 800c6a0:	6128      	str	r0, [r5, #16]
 800c6a2:	b920      	cbnz	r0, 800c6ae <_svfiprintf_r+0x2e>
 800c6a4:	230c      	movs	r3, #12
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ac:	e0d1      	b.n	800c852 <_svfiprintf_r+0x1d2>
 800c6ae:	2340      	movs	r3, #64	; 0x40
 800c6b0:	616b      	str	r3, [r5, #20]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6b6:	2320      	movs	r3, #32
 800c6b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c0:	2330      	movs	r3, #48	; 0x30
 800c6c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c86c <_svfiprintf_r+0x1ec>
 800c6c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ca:	f04f 0901 	mov.w	r9, #1
 800c6ce:	4623      	mov	r3, r4
 800c6d0:	469a      	mov	sl, r3
 800c6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6d6:	b10a      	cbz	r2, 800c6dc <_svfiprintf_r+0x5c>
 800c6d8:	2a25      	cmp	r2, #37	; 0x25
 800c6da:	d1f9      	bne.n	800c6d0 <_svfiprintf_r+0x50>
 800c6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e0:	d00b      	beq.n	800c6fa <_svfiprintf_r+0x7a>
 800c6e2:	465b      	mov	r3, fp
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	f7ff ff6d 	bl	800c5c8 <__ssputs_r>
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	f000 80aa 	beq.w	800c848 <_svfiprintf_r+0x1c8>
 800c6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f6:	445a      	add	r2, fp
 800c6f8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 80a2 	beq.w	800c848 <_svfiprintf_r+0x1c8>
 800c704:	2300      	movs	r3, #0
 800c706:	f04f 32ff 	mov.w	r2, #4294967295
 800c70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c70e:	f10a 0a01 	add.w	sl, sl, #1
 800c712:	9304      	str	r3, [sp, #16]
 800c714:	9307      	str	r3, [sp, #28]
 800c716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c71a:	931a      	str	r3, [sp, #104]	; 0x68
 800c71c:	4654      	mov	r4, sl
 800c71e:	2205      	movs	r2, #5
 800c720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c724:	4851      	ldr	r0, [pc, #324]	; (800c86c <_svfiprintf_r+0x1ec>)
 800c726:	f7f3 fd7b 	bl	8000220 <memchr>
 800c72a:	9a04      	ldr	r2, [sp, #16]
 800c72c:	b9d8      	cbnz	r0, 800c766 <_svfiprintf_r+0xe6>
 800c72e:	06d0      	lsls	r0, r2, #27
 800c730:	bf44      	itt	mi
 800c732:	2320      	movmi	r3, #32
 800c734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c738:	0711      	lsls	r1, r2, #28
 800c73a:	bf44      	itt	mi
 800c73c:	232b      	movmi	r3, #43	; 0x2b
 800c73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c742:	f89a 3000 	ldrb.w	r3, [sl]
 800c746:	2b2a      	cmp	r3, #42	; 0x2a
 800c748:	d015      	beq.n	800c776 <_svfiprintf_r+0xf6>
 800c74a:	9a07      	ldr	r2, [sp, #28]
 800c74c:	4654      	mov	r4, sl
 800c74e:	2000      	movs	r0, #0
 800c750:	f04f 0c0a 	mov.w	ip, #10
 800c754:	4621      	mov	r1, r4
 800c756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c75a:	3b30      	subs	r3, #48	; 0x30
 800c75c:	2b09      	cmp	r3, #9
 800c75e:	d94e      	bls.n	800c7fe <_svfiprintf_r+0x17e>
 800c760:	b1b0      	cbz	r0, 800c790 <_svfiprintf_r+0x110>
 800c762:	9207      	str	r2, [sp, #28]
 800c764:	e014      	b.n	800c790 <_svfiprintf_r+0x110>
 800c766:	eba0 0308 	sub.w	r3, r0, r8
 800c76a:	fa09 f303 	lsl.w	r3, r9, r3
 800c76e:	4313      	orrs	r3, r2
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	46a2      	mov	sl, r4
 800c774:	e7d2      	b.n	800c71c <_svfiprintf_r+0x9c>
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	1d19      	adds	r1, r3, #4
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	9103      	str	r1, [sp, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	bfbb      	ittet	lt
 800c782:	425b      	neglt	r3, r3
 800c784:	f042 0202 	orrlt.w	r2, r2, #2
 800c788:	9307      	strge	r3, [sp, #28]
 800c78a:	9307      	strlt	r3, [sp, #28]
 800c78c:	bfb8      	it	lt
 800c78e:	9204      	strlt	r2, [sp, #16]
 800c790:	7823      	ldrb	r3, [r4, #0]
 800c792:	2b2e      	cmp	r3, #46	; 0x2e
 800c794:	d10c      	bne.n	800c7b0 <_svfiprintf_r+0x130>
 800c796:	7863      	ldrb	r3, [r4, #1]
 800c798:	2b2a      	cmp	r3, #42	; 0x2a
 800c79a:	d135      	bne.n	800c808 <_svfiprintf_r+0x188>
 800c79c:	9b03      	ldr	r3, [sp, #12]
 800c79e:	1d1a      	adds	r2, r3, #4
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	9203      	str	r2, [sp, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	bfb8      	it	lt
 800c7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7ac:	3402      	adds	r4, #2
 800c7ae:	9305      	str	r3, [sp, #20]
 800c7b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c87c <_svfiprintf_r+0x1fc>
 800c7b4:	7821      	ldrb	r1, [r4, #0]
 800c7b6:	2203      	movs	r2, #3
 800c7b8:	4650      	mov	r0, sl
 800c7ba:	f7f3 fd31 	bl	8000220 <memchr>
 800c7be:	b140      	cbz	r0, 800c7d2 <_svfiprintf_r+0x152>
 800c7c0:	2340      	movs	r3, #64	; 0x40
 800c7c2:	eba0 000a 	sub.w	r0, r0, sl
 800c7c6:	fa03 f000 	lsl.w	r0, r3, r0
 800c7ca:	9b04      	ldr	r3, [sp, #16]
 800c7cc:	4303      	orrs	r3, r0
 800c7ce:	3401      	adds	r4, #1
 800c7d0:	9304      	str	r3, [sp, #16]
 800c7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d6:	4826      	ldr	r0, [pc, #152]	; (800c870 <_svfiprintf_r+0x1f0>)
 800c7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7dc:	2206      	movs	r2, #6
 800c7de:	f7f3 fd1f 	bl	8000220 <memchr>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d038      	beq.n	800c858 <_svfiprintf_r+0x1d8>
 800c7e6:	4b23      	ldr	r3, [pc, #140]	; (800c874 <_svfiprintf_r+0x1f4>)
 800c7e8:	bb1b      	cbnz	r3, 800c832 <_svfiprintf_r+0x1b2>
 800c7ea:	9b03      	ldr	r3, [sp, #12]
 800c7ec:	3307      	adds	r3, #7
 800c7ee:	f023 0307 	bic.w	r3, r3, #7
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	9303      	str	r3, [sp, #12]
 800c7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f8:	4433      	add	r3, r6
 800c7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c7fc:	e767      	b.n	800c6ce <_svfiprintf_r+0x4e>
 800c7fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800c802:	460c      	mov	r4, r1
 800c804:	2001      	movs	r0, #1
 800c806:	e7a5      	b.n	800c754 <_svfiprintf_r+0xd4>
 800c808:	2300      	movs	r3, #0
 800c80a:	3401      	adds	r4, #1
 800c80c:	9305      	str	r3, [sp, #20]
 800c80e:	4619      	mov	r1, r3
 800c810:	f04f 0c0a 	mov.w	ip, #10
 800c814:	4620      	mov	r0, r4
 800c816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c81a:	3a30      	subs	r2, #48	; 0x30
 800c81c:	2a09      	cmp	r2, #9
 800c81e:	d903      	bls.n	800c828 <_svfiprintf_r+0x1a8>
 800c820:	2b00      	cmp	r3, #0
 800c822:	d0c5      	beq.n	800c7b0 <_svfiprintf_r+0x130>
 800c824:	9105      	str	r1, [sp, #20]
 800c826:	e7c3      	b.n	800c7b0 <_svfiprintf_r+0x130>
 800c828:	fb0c 2101 	mla	r1, ip, r1, r2
 800c82c:	4604      	mov	r4, r0
 800c82e:	2301      	movs	r3, #1
 800c830:	e7f0      	b.n	800c814 <_svfiprintf_r+0x194>
 800c832:	ab03      	add	r3, sp, #12
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	462a      	mov	r2, r5
 800c838:	4b0f      	ldr	r3, [pc, #60]	; (800c878 <_svfiprintf_r+0x1f8>)
 800c83a:	a904      	add	r1, sp, #16
 800c83c:	4638      	mov	r0, r7
 800c83e:	f7fd feb9 	bl	800a5b4 <_printf_float>
 800c842:	1c42      	adds	r2, r0, #1
 800c844:	4606      	mov	r6, r0
 800c846:	d1d6      	bne.n	800c7f6 <_svfiprintf_r+0x176>
 800c848:	89ab      	ldrh	r3, [r5, #12]
 800c84a:	065b      	lsls	r3, r3, #25
 800c84c:	f53f af2c 	bmi.w	800c6a8 <_svfiprintf_r+0x28>
 800c850:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c852:	b01d      	add	sp, #116	; 0x74
 800c854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c858:	ab03      	add	r3, sp, #12
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	462a      	mov	r2, r5
 800c85e:	4b06      	ldr	r3, [pc, #24]	; (800c878 <_svfiprintf_r+0x1f8>)
 800c860:	a904      	add	r1, sp, #16
 800c862:	4638      	mov	r0, r7
 800c864:	f7fe f94a 	bl	800aafc <_printf_i>
 800c868:	e7eb      	b.n	800c842 <_svfiprintf_r+0x1c2>
 800c86a:	bf00      	nop
 800c86c:	0800d6a4 	.word	0x0800d6a4
 800c870:	0800d6ae 	.word	0x0800d6ae
 800c874:	0800a5b5 	.word	0x0800a5b5
 800c878:	0800c5c9 	.word	0x0800c5c9
 800c87c:	0800d6aa 	.word	0x0800d6aa

0800c880 <__sfputc_r>:
 800c880:	6893      	ldr	r3, [r2, #8]
 800c882:	3b01      	subs	r3, #1
 800c884:	2b00      	cmp	r3, #0
 800c886:	b410      	push	{r4}
 800c888:	6093      	str	r3, [r2, #8]
 800c88a:	da08      	bge.n	800c89e <__sfputc_r+0x1e>
 800c88c:	6994      	ldr	r4, [r2, #24]
 800c88e:	42a3      	cmp	r3, r4
 800c890:	db01      	blt.n	800c896 <__sfputc_r+0x16>
 800c892:	290a      	cmp	r1, #10
 800c894:	d103      	bne.n	800c89e <__sfputc_r+0x1e>
 800c896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c89a:	f000 b99f 	b.w	800cbdc <__swbuf_r>
 800c89e:	6813      	ldr	r3, [r2, #0]
 800c8a0:	1c58      	adds	r0, r3, #1
 800c8a2:	6010      	str	r0, [r2, #0]
 800c8a4:	7019      	strb	r1, [r3, #0]
 800c8a6:	4608      	mov	r0, r1
 800c8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <__sfputs_r>:
 800c8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b0:	4606      	mov	r6, r0
 800c8b2:	460f      	mov	r7, r1
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	18d5      	adds	r5, r2, r3
 800c8b8:	42ac      	cmp	r4, r5
 800c8ba:	d101      	bne.n	800c8c0 <__sfputs_r+0x12>
 800c8bc:	2000      	movs	r0, #0
 800c8be:	e007      	b.n	800c8d0 <__sfputs_r+0x22>
 800c8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c4:	463a      	mov	r2, r7
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	f7ff ffda 	bl	800c880 <__sfputc_r>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d1f3      	bne.n	800c8b8 <__sfputs_r+0xa>
 800c8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8d4 <_vfiprintf_r>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	460d      	mov	r5, r1
 800c8da:	b09d      	sub	sp, #116	; 0x74
 800c8dc:	4614      	mov	r4, r2
 800c8de:	4698      	mov	r8, r3
 800c8e0:	4606      	mov	r6, r0
 800c8e2:	b118      	cbz	r0, 800c8ec <_vfiprintf_r+0x18>
 800c8e4:	6983      	ldr	r3, [r0, #24]
 800c8e6:	b90b      	cbnz	r3, 800c8ec <_vfiprintf_r+0x18>
 800c8e8:	f7ff f938 	bl	800bb5c <__sinit>
 800c8ec:	4b89      	ldr	r3, [pc, #548]	; (800cb14 <_vfiprintf_r+0x240>)
 800c8ee:	429d      	cmp	r5, r3
 800c8f0:	d11b      	bne.n	800c92a <_vfiprintf_r+0x56>
 800c8f2:	6875      	ldr	r5, [r6, #4]
 800c8f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8f6:	07d9      	lsls	r1, r3, #31
 800c8f8:	d405      	bmi.n	800c906 <_vfiprintf_r+0x32>
 800c8fa:	89ab      	ldrh	r3, [r5, #12]
 800c8fc:	059a      	lsls	r2, r3, #22
 800c8fe:	d402      	bmi.n	800c906 <_vfiprintf_r+0x32>
 800c900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c902:	f7ff f9ce 	bl	800bca2 <__retarget_lock_acquire_recursive>
 800c906:	89ab      	ldrh	r3, [r5, #12]
 800c908:	071b      	lsls	r3, r3, #28
 800c90a:	d501      	bpl.n	800c910 <_vfiprintf_r+0x3c>
 800c90c:	692b      	ldr	r3, [r5, #16]
 800c90e:	b9eb      	cbnz	r3, 800c94c <_vfiprintf_r+0x78>
 800c910:	4629      	mov	r1, r5
 800c912:	4630      	mov	r0, r6
 800c914:	f000 f9c6 	bl	800cca4 <__swsetup_r>
 800c918:	b1c0      	cbz	r0, 800c94c <_vfiprintf_r+0x78>
 800c91a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c91c:	07dc      	lsls	r4, r3, #31
 800c91e:	d50e      	bpl.n	800c93e <_vfiprintf_r+0x6a>
 800c920:	f04f 30ff 	mov.w	r0, #4294967295
 800c924:	b01d      	add	sp, #116	; 0x74
 800c926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92a:	4b7b      	ldr	r3, [pc, #492]	; (800cb18 <_vfiprintf_r+0x244>)
 800c92c:	429d      	cmp	r5, r3
 800c92e:	d101      	bne.n	800c934 <_vfiprintf_r+0x60>
 800c930:	68b5      	ldr	r5, [r6, #8]
 800c932:	e7df      	b.n	800c8f4 <_vfiprintf_r+0x20>
 800c934:	4b79      	ldr	r3, [pc, #484]	; (800cb1c <_vfiprintf_r+0x248>)
 800c936:	429d      	cmp	r5, r3
 800c938:	bf08      	it	eq
 800c93a:	68f5      	ldreq	r5, [r6, #12]
 800c93c:	e7da      	b.n	800c8f4 <_vfiprintf_r+0x20>
 800c93e:	89ab      	ldrh	r3, [r5, #12]
 800c940:	0598      	lsls	r0, r3, #22
 800c942:	d4ed      	bmi.n	800c920 <_vfiprintf_r+0x4c>
 800c944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c946:	f7ff f9ad 	bl	800bca4 <__retarget_lock_release_recursive>
 800c94a:	e7e9      	b.n	800c920 <_vfiprintf_r+0x4c>
 800c94c:	2300      	movs	r3, #0
 800c94e:	9309      	str	r3, [sp, #36]	; 0x24
 800c950:	2320      	movs	r3, #32
 800c952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c956:	f8cd 800c 	str.w	r8, [sp, #12]
 800c95a:	2330      	movs	r3, #48	; 0x30
 800c95c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb20 <_vfiprintf_r+0x24c>
 800c960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c964:	f04f 0901 	mov.w	r9, #1
 800c968:	4623      	mov	r3, r4
 800c96a:	469a      	mov	sl, r3
 800c96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c970:	b10a      	cbz	r2, 800c976 <_vfiprintf_r+0xa2>
 800c972:	2a25      	cmp	r2, #37	; 0x25
 800c974:	d1f9      	bne.n	800c96a <_vfiprintf_r+0x96>
 800c976:	ebba 0b04 	subs.w	fp, sl, r4
 800c97a:	d00b      	beq.n	800c994 <_vfiprintf_r+0xc0>
 800c97c:	465b      	mov	r3, fp
 800c97e:	4622      	mov	r2, r4
 800c980:	4629      	mov	r1, r5
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff ff93 	bl	800c8ae <__sfputs_r>
 800c988:	3001      	adds	r0, #1
 800c98a:	f000 80aa 	beq.w	800cae2 <_vfiprintf_r+0x20e>
 800c98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c990:	445a      	add	r2, fp
 800c992:	9209      	str	r2, [sp, #36]	; 0x24
 800c994:	f89a 3000 	ldrb.w	r3, [sl]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 80a2 	beq.w	800cae2 <_vfiprintf_r+0x20e>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9a8:	f10a 0a01 	add.w	sl, sl, #1
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	9307      	str	r3, [sp, #28]
 800c9b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9b4:	931a      	str	r3, [sp, #104]	; 0x68
 800c9b6:	4654      	mov	r4, sl
 800c9b8:	2205      	movs	r2, #5
 800c9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9be:	4858      	ldr	r0, [pc, #352]	; (800cb20 <_vfiprintf_r+0x24c>)
 800c9c0:	f7f3 fc2e 	bl	8000220 <memchr>
 800c9c4:	9a04      	ldr	r2, [sp, #16]
 800c9c6:	b9d8      	cbnz	r0, 800ca00 <_vfiprintf_r+0x12c>
 800c9c8:	06d1      	lsls	r1, r2, #27
 800c9ca:	bf44      	itt	mi
 800c9cc:	2320      	movmi	r3, #32
 800c9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9d2:	0713      	lsls	r3, r2, #28
 800c9d4:	bf44      	itt	mi
 800c9d6:	232b      	movmi	r3, #43	; 0x2b
 800c9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9e2:	d015      	beq.n	800ca10 <_vfiprintf_r+0x13c>
 800c9e4:	9a07      	ldr	r2, [sp, #28]
 800c9e6:	4654      	mov	r4, sl
 800c9e8:	2000      	movs	r0, #0
 800c9ea:	f04f 0c0a 	mov.w	ip, #10
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9f4:	3b30      	subs	r3, #48	; 0x30
 800c9f6:	2b09      	cmp	r3, #9
 800c9f8:	d94e      	bls.n	800ca98 <_vfiprintf_r+0x1c4>
 800c9fa:	b1b0      	cbz	r0, 800ca2a <_vfiprintf_r+0x156>
 800c9fc:	9207      	str	r2, [sp, #28]
 800c9fe:	e014      	b.n	800ca2a <_vfiprintf_r+0x156>
 800ca00:	eba0 0308 	sub.w	r3, r0, r8
 800ca04:	fa09 f303 	lsl.w	r3, r9, r3
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	9304      	str	r3, [sp, #16]
 800ca0c:	46a2      	mov	sl, r4
 800ca0e:	e7d2      	b.n	800c9b6 <_vfiprintf_r+0xe2>
 800ca10:	9b03      	ldr	r3, [sp, #12]
 800ca12:	1d19      	adds	r1, r3, #4
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	9103      	str	r1, [sp, #12]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	bfbb      	ittet	lt
 800ca1c:	425b      	neglt	r3, r3
 800ca1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca22:	9307      	strge	r3, [sp, #28]
 800ca24:	9307      	strlt	r3, [sp, #28]
 800ca26:	bfb8      	it	lt
 800ca28:	9204      	strlt	r2, [sp, #16]
 800ca2a:	7823      	ldrb	r3, [r4, #0]
 800ca2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca2e:	d10c      	bne.n	800ca4a <_vfiprintf_r+0x176>
 800ca30:	7863      	ldrb	r3, [r4, #1]
 800ca32:	2b2a      	cmp	r3, #42	; 0x2a
 800ca34:	d135      	bne.n	800caa2 <_vfiprintf_r+0x1ce>
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	1d1a      	adds	r2, r3, #4
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	9203      	str	r2, [sp, #12]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	bfb8      	it	lt
 800ca42:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca46:	3402      	adds	r4, #2
 800ca48:	9305      	str	r3, [sp, #20]
 800ca4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb30 <_vfiprintf_r+0x25c>
 800ca4e:	7821      	ldrb	r1, [r4, #0]
 800ca50:	2203      	movs	r2, #3
 800ca52:	4650      	mov	r0, sl
 800ca54:	f7f3 fbe4 	bl	8000220 <memchr>
 800ca58:	b140      	cbz	r0, 800ca6c <_vfiprintf_r+0x198>
 800ca5a:	2340      	movs	r3, #64	; 0x40
 800ca5c:	eba0 000a 	sub.w	r0, r0, sl
 800ca60:	fa03 f000 	lsl.w	r0, r3, r0
 800ca64:	9b04      	ldr	r3, [sp, #16]
 800ca66:	4303      	orrs	r3, r0
 800ca68:	3401      	adds	r4, #1
 800ca6a:	9304      	str	r3, [sp, #16]
 800ca6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca70:	482c      	ldr	r0, [pc, #176]	; (800cb24 <_vfiprintf_r+0x250>)
 800ca72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca76:	2206      	movs	r2, #6
 800ca78:	f7f3 fbd2 	bl	8000220 <memchr>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	d03f      	beq.n	800cb00 <_vfiprintf_r+0x22c>
 800ca80:	4b29      	ldr	r3, [pc, #164]	; (800cb28 <_vfiprintf_r+0x254>)
 800ca82:	bb1b      	cbnz	r3, 800cacc <_vfiprintf_r+0x1f8>
 800ca84:	9b03      	ldr	r3, [sp, #12]
 800ca86:	3307      	adds	r3, #7
 800ca88:	f023 0307 	bic.w	r3, r3, #7
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	9303      	str	r3, [sp, #12]
 800ca90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca92:	443b      	add	r3, r7
 800ca94:	9309      	str	r3, [sp, #36]	; 0x24
 800ca96:	e767      	b.n	800c968 <_vfiprintf_r+0x94>
 800ca98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	2001      	movs	r0, #1
 800caa0:	e7a5      	b.n	800c9ee <_vfiprintf_r+0x11a>
 800caa2:	2300      	movs	r3, #0
 800caa4:	3401      	adds	r4, #1
 800caa6:	9305      	str	r3, [sp, #20]
 800caa8:	4619      	mov	r1, r3
 800caaa:	f04f 0c0a 	mov.w	ip, #10
 800caae:	4620      	mov	r0, r4
 800cab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cab4:	3a30      	subs	r2, #48	; 0x30
 800cab6:	2a09      	cmp	r2, #9
 800cab8:	d903      	bls.n	800cac2 <_vfiprintf_r+0x1ee>
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0c5      	beq.n	800ca4a <_vfiprintf_r+0x176>
 800cabe:	9105      	str	r1, [sp, #20]
 800cac0:	e7c3      	b.n	800ca4a <_vfiprintf_r+0x176>
 800cac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cac6:	4604      	mov	r4, r0
 800cac8:	2301      	movs	r3, #1
 800caca:	e7f0      	b.n	800caae <_vfiprintf_r+0x1da>
 800cacc:	ab03      	add	r3, sp, #12
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	462a      	mov	r2, r5
 800cad2:	4b16      	ldr	r3, [pc, #88]	; (800cb2c <_vfiprintf_r+0x258>)
 800cad4:	a904      	add	r1, sp, #16
 800cad6:	4630      	mov	r0, r6
 800cad8:	f7fd fd6c 	bl	800a5b4 <_printf_float>
 800cadc:	4607      	mov	r7, r0
 800cade:	1c78      	adds	r0, r7, #1
 800cae0:	d1d6      	bne.n	800ca90 <_vfiprintf_r+0x1bc>
 800cae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cae4:	07d9      	lsls	r1, r3, #31
 800cae6:	d405      	bmi.n	800caf4 <_vfiprintf_r+0x220>
 800cae8:	89ab      	ldrh	r3, [r5, #12]
 800caea:	059a      	lsls	r2, r3, #22
 800caec:	d402      	bmi.n	800caf4 <_vfiprintf_r+0x220>
 800caee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caf0:	f7ff f8d8 	bl	800bca4 <__retarget_lock_release_recursive>
 800caf4:	89ab      	ldrh	r3, [r5, #12]
 800caf6:	065b      	lsls	r3, r3, #25
 800caf8:	f53f af12 	bmi.w	800c920 <_vfiprintf_r+0x4c>
 800cafc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cafe:	e711      	b.n	800c924 <_vfiprintf_r+0x50>
 800cb00:	ab03      	add	r3, sp, #12
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	462a      	mov	r2, r5
 800cb06:	4b09      	ldr	r3, [pc, #36]	; (800cb2c <_vfiprintf_r+0x258>)
 800cb08:	a904      	add	r1, sp, #16
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7fd fff6 	bl	800aafc <_printf_i>
 800cb10:	e7e4      	b.n	800cadc <_vfiprintf_r+0x208>
 800cb12:	bf00      	nop
 800cb14:	0800d508 	.word	0x0800d508
 800cb18:	0800d528 	.word	0x0800d528
 800cb1c:	0800d4e8 	.word	0x0800d4e8
 800cb20:	0800d6a4 	.word	0x0800d6a4
 800cb24:	0800d6ae 	.word	0x0800d6ae
 800cb28:	0800a5b5 	.word	0x0800a5b5
 800cb2c:	0800c8af 	.word	0x0800c8af
 800cb30:	0800d6aa 	.word	0x0800d6aa

0800cb34 <_sbrk_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	4d06      	ldr	r5, [pc, #24]	; (800cb50 <_sbrk_r+0x1c>)
 800cb38:	2300      	movs	r3, #0
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	602b      	str	r3, [r5, #0]
 800cb40:	f7f4 ff16 	bl	8001970 <_sbrk>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_sbrk_r+0x1a>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_sbrk_r+0x1a>
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	20000910 	.word	0x20000910

0800cb54 <__sread>:
 800cb54:	b510      	push	{r4, lr}
 800cb56:	460c      	mov	r4, r1
 800cb58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb5c:	f000 faf2 	bl	800d144 <_read_r>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	bfab      	itete	ge
 800cb64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb66:	89a3      	ldrhlt	r3, [r4, #12]
 800cb68:	181b      	addge	r3, r3, r0
 800cb6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb6e:	bfac      	ite	ge
 800cb70:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb72:	81a3      	strhlt	r3, [r4, #12]
 800cb74:	bd10      	pop	{r4, pc}

0800cb76 <__swrite>:
 800cb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7a:	461f      	mov	r7, r3
 800cb7c:	898b      	ldrh	r3, [r1, #12]
 800cb7e:	05db      	lsls	r3, r3, #23
 800cb80:	4605      	mov	r5, r0
 800cb82:	460c      	mov	r4, r1
 800cb84:	4616      	mov	r6, r2
 800cb86:	d505      	bpl.n	800cb94 <__swrite+0x1e>
 800cb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f000 f9f8 	bl	800cf84 <_lseek_r>
 800cb94:	89a3      	ldrh	r3, [r4, #12]
 800cb96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb9e:	81a3      	strh	r3, [r4, #12]
 800cba0:	4632      	mov	r2, r6
 800cba2:	463b      	mov	r3, r7
 800cba4:	4628      	mov	r0, r5
 800cba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbaa:	f000 b869 	b.w	800cc80 <_write_r>

0800cbae <__sseek>:
 800cbae:	b510      	push	{r4, lr}
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb6:	f000 f9e5 	bl	800cf84 <_lseek_r>
 800cbba:	1c43      	adds	r3, r0, #1
 800cbbc:	89a3      	ldrh	r3, [r4, #12]
 800cbbe:	bf15      	itete	ne
 800cbc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbca:	81a3      	strheq	r3, [r4, #12]
 800cbcc:	bf18      	it	ne
 800cbce:	81a3      	strhne	r3, [r4, #12]
 800cbd0:	bd10      	pop	{r4, pc}

0800cbd2 <__sclose>:
 800cbd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbd6:	f000 b8f1 	b.w	800cdbc <_close_r>
	...

0800cbdc <__swbuf_r>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	460e      	mov	r6, r1
 800cbe0:	4614      	mov	r4, r2
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	b118      	cbz	r0, 800cbee <__swbuf_r+0x12>
 800cbe6:	6983      	ldr	r3, [r0, #24]
 800cbe8:	b90b      	cbnz	r3, 800cbee <__swbuf_r+0x12>
 800cbea:	f7fe ffb7 	bl	800bb5c <__sinit>
 800cbee:	4b21      	ldr	r3, [pc, #132]	; (800cc74 <__swbuf_r+0x98>)
 800cbf0:	429c      	cmp	r4, r3
 800cbf2:	d12b      	bne.n	800cc4c <__swbuf_r+0x70>
 800cbf4:	686c      	ldr	r4, [r5, #4]
 800cbf6:	69a3      	ldr	r3, [r4, #24]
 800cbf8:	60a3      	str	r3, [r4, #8]
 800cbfa:	89a3      	ldrh	r3, [r4, #12]
 800cbfc:	071a      	lsls	r2, r3, #28
 800cbfe:	d52f      	bpl.n	800cc60 <__swbuf_r+0x84>
 800cc00:	6923      	ldr	r3, [r4, #16]
 800cc02:	b36b      	cbz	r3, 800cc60 <__swbuf_r+0x84>
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	6820      	ldr	r0, [r4, #0]
 800cc08:	1ac0      	subs	r0, r0, r3
 800cc0a:	6963      	ldr	r3, [r4, #20]
 800cc0c:	b2f6      	uxtb	r6, r6
 800cc0e:	4283      	cmp	r3, r0
 800cc10:	4637      	mov	r7, r6
 800cc12:	dc04      	bgt.n	800cc1e <__swbuf_r+0x42>
 800cc14:	4621      	mov	r1, r4
 800cc16:	4628      	mov	r0, r5
 800cc18:	f000 f966 	bl	800cee8 <_fflush_r>
 800cc1c:	bb30      	cbnz	r0, 800cc6c <__swbuf_r+0x90>
 800cc1e:	68a3      	ldr	r3, [r4, #8]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	60a3      	str	r3, [r4, #8]
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	6022      	str	r2, [r4, #0]
 800cc2a:	701e      	strb	r6, [r3, #0]
 800cc2c:	6963      	ldr	r3, [r4, #20]
 800cc2e:	3001      	adds	r0, #1
 800cc30:	4283      	cmp	r3, r0
 800cc32:	d004      	beq.n	800cc3e <__swbuf_r+0x62>
 800cc34:	89a3      	ldrh	r3, [r4, #12]
 800cc36:	07db      	lsls	r3, r3, #31
 800cc38:	d506      	bpl.n	800cc48 <__swbuf_r+0x6c>
 800cc3a:	2e0a      	cmp	r6, #10
 800cc3c:	d104      	bne.n	800cc48 <__swbuf_r+0x6c>
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4628      	mov	r0, r5
 800cc42:	f000 f951 	bl	800cee8 <_fflush_r>
 800cc46:	b988      	cbnz	r0, 800cc6c <__swbuf_r+0x90>
 800cc48:	4638      	mov	r0, r7
 800cc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc4c:	4b0a      	ldr	r3, [pc, #40]	; (800cc78 <__swbuf_r+0x9c>)
 800cc4e:	429c      	cmp	r4, r3
 800cc50:	d101      	bne.n	800cc56 <__swbuf_r+0x7a>
 800cc52:	68ac      	ldr	r4, [r5, #8]
 800cc54:	e7cf      	b.n	800cbf6 <__swbuf_r+0x1a>
 800cc56:	4b09      	ldr	r3, [pc, #36]	; (800cc7c <__swbuf_r+0xa0>)
 800cc58:	429c      	cmp	r4, r3
 800cc5a:	bf08      	it	eq
 800cc5c:	68ec      	ldreq	r4, [r5, #12]
 800cc5e:	e7ca      	b.n	800cbf6 <__swbuf_r+0x1a>
 800cc60:	4621      	mov	r1, r4
 800cc62:	4628      	mov	r0, r5
 800cc64:	f000 f81e 	bl	800cca4 <__swsetup_r>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d0cb      	beq.n	800cc04 <__swbuf_r+0x28>
 800cc6c:	f04f 37ff 	mov.w	r7, #4294967295
 800cc70:	e7ea      	b.n	800cc48 <__swbuf_r+0x6c>
 800cc72:	bf00      	nop
 800cc74:	0800d508 	.word	0x0800d508
 800cc78:	0800d528 	.word	0x0800d528
 800cc7c:	0800d4e8 	.word	0x0800d4e8

0800cc80 <_write_r>:
 800cc80:	b538      	push	{r3, r4, r5, lr}
 800cc82:	4d07      	ldr	r5, [pc, #28]	; (800cca0 <_write_r+0x20>)
 800cc84:	4604      	mov	r4, r0
 800cc86:	4608      	mov	r0, r1
 800cc88:	4611      	mov	r1, r2
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	602a      	str	r2, [r5, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	f7f4 fb60 	bl	8001354 <_write>
 800cc94:	1c43      	adds	r3, r0, #1
 800cc96:	d102      	bne.n	800cc9e <_write_r+0x1e>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	b103      	cbz	r3, 800cc9e <_write_r+0x1e>
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	bd38      	pop	{r3, r4, r5, pc}
 800cca0:	20000910 	.word	0x20000910

0800cca4 <__swsetup_r>:
 800cca4:	4b32      	ldr	r3, [pc, #200]	; (800cd70 <__swsetup_r+0xcc>)
 800cca6:	b570      	push	{r4, r5, r6, lr}
 800cca8:	681d      	ldr	r5, [r3, #0]
 800ccaa:	4606      	mov	r6, r0
 800ccac:	460c      	mov	r4, r1
 800ccae:	b125      	cbz	r5, 800ccba <__swsetup_r+0x16>
 800ccb0:	69ab      	ldr	r3, [r5, #24]
 800ccb2:	b913      	cbnz	r3, 800ccba <__swsetup_r+0x16>
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	f7fe ff51 	bl	800bb5c <__sinit>
 800ccba:	4b2e      	ldr	r3, [pc, #184]	; (800cd74 <__swsetup_r+0xd0>)
 800ccbc:	429c      	cmp	r4, r3
 800ccbe:	d10f      	bne.n	800cce0 <__swsetup_r+0x3c>
 800ccc0:	686c      	ldr	r4, [r5, #4]
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccc8:	0719      	lsls	r1, r3, #28
 800ccca:	d42c      	bmi.n	800cd26 <__swsetup_r+0x82>
 800cccc:	06dd      	lsls	r5, r3, #27
 800ccce:	d411      	bmi.n	800ccf4 <__swsetup_r+0x50>
 800ccd0:	2309      	movs	r3, #9
 800ccd2:	6033      	str	r3, [r6, #0]
 800ccd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ccd8:	81a3      	strh	r3, [r4, #12]
 800ccda:	f04f 30ff 	mov.w	r0, #4294967295
 800ccde:	e03e      	b.n	800cd5e <__swsetup_r+0xba>
 800cce0:	4b25      	ldr	r3, [pc, #148]	; (800cd78 <__swsetup_r+0xd4>)
 800cce2:	429c      	cmp	r4, r3
 800cce4:	d101      	bne.n	800ccea <__swsetup_r+0x46>
 800cce6:	68ac      	ldr	r4, [r5, #8]
 800cce8:	e7eb      	b.n	800ccc2 <__swsetup_r+0x1e>
 800ccea:	4b24      	ldr	r3, [pc, #144]	; (800cd7c <__swsetup_r+0xd8>)
 800ccec:	429c      	cmp	r4, r3
 800ccee:	bf08      	it	eq
 800ccf0:	68ec      	ldreq	r4, [r5, #12]
 800ccf2:	e7e6      	b.n	800ccc2 <__swsetup_r+0x1e>
 800ccf4:	0758      	lsls	r0, r3, #29
 800ccf6:	d512      	bpl.n	800cd1e <__swsetup_r+0x7a>
 800ccf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccfa:	b141      	cbz	r1, 800cd0e <__swsetup_r+0x6a>
 800ccfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd00:	4299      	cmp	r1, r3
 800cd02:	d002      	beq.n	800cd0a <__swsetup_r+0x66>
 800cd04:	4630      	mov	r0, r6
 800cd06:	f7ff fb7f 	bl	800c408 <_free_r>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	2300      	movs	r3, #0
 800cd18:	6063      	str	r3, [r4, #4]
 800cd1a:	6923      	ldr	r3, [r4, #16]
 800cd1c:	6023      	str	r3, [r4, #0]
 800cd1e:	89a3      	ldrh	r3, [r4, #12]
 800cd20:	f043 0308 	orr.w	r3, r3, #8
 800cd24:	81a3      	strh	r3, [r4, #12]
 800cd26:	6923      	ldr	r3, [r4, #16]
 800cd28:	b94b      	cbnz	r3, 800cd3e <__swsetup_r+0x9a>
 800cd2a:	89a3      	ldrh	r3, [r4, #12]
 800cd2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd34:	d003      	beq.n	800cd3e <__swsetup_r+0x9a>
 800cd36:	4621      	mov	r1, r4
 800cd38:	4630      	mov	r0, r6
 800cd3a:	f000 f95b 	bl	800cff4 <__smakebuf_r>
 800cd3e:	89a0      	ldrh	r0, [r4, #12]
 800cd40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd44:	f010 0301 	ands.w	r3, r0, #1
 800cd48:	d00a      	beq.n	800cd60 <__swsetup_r+0xbc>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60a3      	str	r3, [r4, #8]
 800cd4e:	6963      	ldr	r3, [r4, #20]
 800cd50:	425b      	negs	r3, r3
 800cd52:	61a3      	str	r3, [r4, #24]
 800cd54:	6923      	ldr	r3, [r4, #16]
 800cd56:	b943      	cbnz	r3, 800cd6a <__swsetup_r+0xc6>
 800cd58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd5c:	d1ba      	bne.n	800ccd4 <__swsetup_r+0x30>
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}
 800cd60:	0781      	lsls	r1, r0, #30
 800cd62:	bf58      	it	pl
 800cd64:	6963      	ldrpl	r3, [r4, #20]
 800cd66:	60a3      	str	r3, [r4, #8]
 800cd68:	e7f4      	b.n	800cd54 <__swsetup_r+0xb0>
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	e7f7      	b.n	800cd5e <__swsetup_r+0xba>
 800cd6e:	bf00      	nop
 800cd70:	2000000c 	.word	0x2000000c
 800cd74:	0800d508 	.word	0x0800d508
 800cd78:	0800d528 	.word	0x0800d528
 800cd7c:	0800d4e8 	.word	0x0800d4e8

0800cd80 <__assert_func>:
 800cd80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd82:	4614      	mov	r4, r2
 800cd84:	461a      	mov	r2, r3
 800cd86:	4b09      	ldr	r3, [pc, #36]	; (800cdac <__assert_func+0x2c>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	68d8      	ldr	r0, [r3, #12]
 800cd8e:	b14c      	cbz	r4, 800cda4 <__assert_func+0x24>
 800cd90:	4b07      	ldr	r3, [pc, #28]	; (800cdb0 <__assert_func+0x30>)
 800cd92:	9100      	str	r1, [sp, #0]
 800cd94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd98:	4906      	ldr	r1, [pc, #24]	; (800cdb4 <__assert_func+0x34>)
 800cd9a:	462b      	mov	r3, r5
 800cd9c:	f000 f8e0 	bl	800cf60 <fiprintf>
 800cda0:	f000 f9ef 	bl	800d182 <abort>
 800cda4:	4b04      	ldr	r3, [pc, #16]	; (800cdb8 <__assert_func+0x38>)
 800cda6:	461c      	mov	r4, r3
 800cda8:	e7f3      	b.n	800cd92 <__assert_func+0x12>
 800cdaa:	bf00      	nop
 800cdac:	2000000c 	.word	0x2000000c
 800cdb0:	0800d6b5 	.word	0x0800d6b5
 800cdb4:	0800d6c2 	.word	0x0800d6c2
 800cdb8:	0800d6f0 	.word	0x0800d6f0

0800cdbc <_close_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4d06      	ldr	r5, [pc, #24]	; (800cdd8 <_close_r+0x1c>)
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	4608      	mov	r0, r1
 800cdc6:	602b      	str	r3, [r5, #0]
 800cdc8:	f7f4 fd9d 	bl	8001906 <_close>
 800cdcc:	1c43      	adds	r3, r0, #1
 800cdce:	d102      	bne.n	800cdd6 <_close_r+0x1a>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	b103      	cbz	r3, 800cdd6 <_close_r+0x1a>
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	bd38      	pop	{r3, r4, r5, pc}
 800cdd8:	20000910 	.word	0x20000910

0800cddc <__sflush_r>:
 800cddc:	898a      	ldrh	r2, [r1, #12]
 800cdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde2:	4605      	mov	r5, r0
 800cde4:	0710      	lsls	r0, r2, #28
 800cde6:	460c      	mov	r4, r1
 800cde8:	d458      	bmi.n	800ce9c <__sflush_r+0xc0>
 800cdea:	684b      	ldr	r3, [r1, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	dc05      	bgt.n	800cdfc <__sflush_r+0x20>
 800cdf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	dc02      	bgt.n	800cdfc <__sflush_r+0x20>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdfe:	2e00      	cmp	r6, #0
 800ce00:	d0f9      	beq.n	800cdf6 <__sflush_r+0x1a>
 800ce02:	2300      	movs	r3, #0
 800ce04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce08:	682f      	ldr	r7, [r5, #0]
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	d032      	beq.n	800ce74 <__sflush_r+0x98>
 800ce0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce10:	89a3      	ldrh	r3, [r4, #12]
 800ce12:	075a      	lsls	r2, r3, #29
 800ce14:	d505      	bpl.n	800ce22 <__sflush_r+0x46>
 800ce16:	6863      	ldr	r3, [r4, #4]
 800ce18:	1ac0      	subs	r0, r0, r3
 800ce1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce1c:	b10b      	cbz	r3, 800ce22 <__sflush_r+0x46>
 800ce1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce20:	1ac0      	subs	r0, r0, r3
 800ce22:	2300      	movs	r3, #0
 800ce24:	4602      	mov	r2, r0
 800ce26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce28:	6a21      	ldr	r1, [r4, #32]
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	47b0      	blx	r6
 800ce2e:	1c43      	adds	r3, r0, #1
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	d106      	bne.n	800ce42 <__sflush_r+0x66>
 800ce34:	6829      	ldr	r1, [r5, #0]
 800ce36:	291d      	cmp	r1, #29
 800ce38:	d82c      	bhi.n	800ce94 <__sflush_r+0xb8>
 800ce3a:	4a2a      	ldr	r2, [pc, #168]	; (800cee4 <__sflush_r+0x108>)
 800ce3c:	40ca      	lsrs	r2, r1
 800ce3e:	07d6      	lsls	r6, r2, #31
 800ce40:	d528      	bpl.n	800ce94 <__sflush_r+0xb8>
 800ce42:	2200      	movs	r2, #0
 800ce44:	6062      	str	r2, [r4, #4]
 800ce46:	04d9      	lsls	r1, r3, #19
 800ce48:	6922      	ldr	r2, [r4, #16]
 800ce4a:	6022      	str	r2, [r4, #0]
 800ce4c:	d504      	bpl.n	800ce58 <__sflush_r+0x7c>
 800ce4e:	1c42      	adds	r2, r0, #1
 800ce50:	d101      	bne.n	800ce56 <__sflush_r+0x7a>
 800ce52:	682b      	ldr	r3, [r5, #0]
 800ce54:	b903      	cbnz	r3, 800ce58 <__sflush_r+0x7c>
 800ce56:	6560      	str	r0, [r4, #84]	; 0x54
 800ce58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce5a:	602f      	str	r7, [r5, #0]
 800ce5c:	2900      	cmp	r1, #0
 800ce5e:	d0ca      	beq.n	800cdf6 <__sflush_r+0x1a>
 800ce60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce64:	4299      	cmp	r1, r3
 800ce66:	d002      	beq.n	800ce6e <__sflush_r+0x92>
 800ce68:	4628      	mov	r0, r5
 800ce6a:	f7ff facd 	bl	800c408 <_free_r>
 800ce6e:	2000      	movs	r0, #0
 800ce70:	6360      	str	r0, [r4, #52]	; 0x34
 800ce72:	e7c1      	b.n	800cdf8 <__sflush_r+0x1c>
 800ce74:	6a21      	ldr	r1, [r4, #32]
 800ce76:	2301      	movs	r3, #1
 800ce78:	4628      	mov	r0, r5
 800ce7a:	47b0      	blx	r6
 800ce7c:	1c41      	adds	r1, r0, #1
 800ce7e:	d1c7      	bne.n	800ce10 <__sflush_r+0x34>
 800ce80:	682b      	ldr	r3, [r5, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0c4      	beq.n	800ce10 <__sflush_r+0x34>
 800ce86:	2b1d      	cmp	r3, #29
 800ce88:	d001      	beq.n	800ce8e <__sflush_r+0xb2>
 800ce8a:	2b16      	cmp	r3, #22
 800ce8c:	d101      	bne.n	800ce92 <__sflush_r+0xb6>
 800ce8e:	602f      	str	r7, [r5, #0]
 800ce90:	e7b1      	b.n	800cdf6 <__sflush_r+0x1a>
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce98:	81a3      	strh	r3, [r4, #12]
 800ce9a:	e7ad      	b.n	800cdf8 <__sflush_r+0x1c>
 800ce9c:	690f      	ldr	r7, [r1, #16]
 800ce9e:	2f00      	cmp	r7, #0
 800cea0:	d0a9      	beq.n	800cdf6 <__sflush_r+0x1a>
 800cea2:	0793      	lsls	r3, r2, #30
 800cea4:	680e      	ldr	r6, [r1, #0]
 800cea6:	bf08      	it	eq
 800cea8:	694b      	ldreq	r3, [r1, #20]
 800ceaa:	600f      	str	r7, [r1, #0]
 800ceac:	bf18      	it	ne
 800ceae:	2300      	movne	r3, #0
 800ceb0:	eba6 0807 	sub.w	r8, r6, r7
 800ceb4:	608b      	str	r3, [r1, #8]
 800ceb6:	f1b8 0f00 	cmp.w	r8, #0
 800ceba:	dd9c      	ble.n	800cdf6 <__sflush_r+0x1a>
 800cebc:	6a21      	ldr	r1, [r4, #32]
 800cebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cec0:	4643      	mov	r3, r8
 800cec2:	463a      	mov	r2, r7
 800cec4:	4628      	mov	r0, r5
 800cec6:	47b0      	blx	r6
 800cec8:	2800      	cmp	r0, #0
 800ceca:	dc06      	bgt.n	800ceda <__sflush_r+0xfe>
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced2:	81a3      	strh	r3, [r4, #12]
 800ced4:	f04f 30ff 	mov.w	r0, #4294967295
 800ced8:	e78e      	b.n	800cdf8 <__sflush_r+0x1c>
 800ceda:	4407      	add	r7, r0
 800cedc:	eba8 0800 	sub.w	r8, r8, r0
 800cee0:	e7e9      	b.n	800ceb6 <__sflush_r+0xda>
 800cee2:	bf00      	nop
 800cee4:	20400001 	.word	0x20400001

0800cee8 <_fflush_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	690b      	ldr	r3, [r1, #16]
 800ceec:	4605      	mov	r5, r0
 800ceee:	460c      	mov	r4, r1
 800cef0:	b913      	cbnz	r3, 800cef8 <_fflush_r+0x10>
 800cef2:	2500      	movs	r5, #0
 800cef4:	4628      	mov	r0, r5
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	b118      	cbz	r0, 800cf02 <_fflush_r+0x1a>
 800cefa:	6983      	ldr	r3, [r0, #24]
 800cefc:	b90b      	cbnz	r3, 800cf02 <_fflush_r+0x1a>
 800cefe:	f7fe fe2d 	bl	800bb5c <__sinit>
 800cf02:	4b14      	ldr	r3, [pc, #80]	; (800cf54 <_fflush_r+0x6c>)
 800cf04:	429c      	cmp	r4, r3
 800cf06:	d11b      	bne.n	800cf40 <_fflush_r+0x58>
 800cf08:	686c      	ldr	r4, [r5, #4]
 800cf0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0ef      	beq.n	800cef2 <_fflush_r+0xa>
 800cf12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf14:	07d0      	lsls	r0, r2, #31
 800cf16:	d404      	bmi.n	800cf22 <_fflush_r+0x3a>
 800cf18:	0599      	lsls	r1, r3, #22
 800cf1a:	d402      	bmi.n	800cf22 <_fflush_r+0x3a>
 800cf1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf1e:	f7fe fec0 	bl	800bca2 <__retarget_lock_acquire_recursive>
 800cf22:	4628      	mov	r0, r5
 800cf24:	4621      	mov	r1, r4
 800cf26:	f7ff ff59 	bl	800cddc <__sflush_r>
 800cf2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf2c:	07da      	lsls	r2, r3, #31
 800cf2e:	4605      	mov	r5, r0
 800cf30:	d4e0      	bmi.n	800cef4 <_fflush_r+0xc>
 800cf32:	89a3      	ldrh	r3, [r4, #12]
 800cf34:	059b      	lsls	r3, r3, #22
 800cf36:	d4dd      	bmi.n	800cef4 <_fflush_r+0xc>
 800cf38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf3a:	f7fe feb3 	bl	800bca4 <__retarget_lock_release_recursive>
 800cf3e:	e7d9      	b.n	800cef4 <_fflush_r+0xc>
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <_fflush_r+0x70>)
 800cf42:	429c      	cmp	r4, r3
 800cf44:	d101      	bne.n	800cf4a <_fflush_r+0x62>
 800cf46:	68ac      	ldr	r4, [r5, #8]
 800cf48:	e7df      	b.n	800cf0a <_fflush_r+0x22>
 800cf4a:	4b04      	ldr	r3, [pc, #16]	; (800cf5c <_fflush_r+0x74>)
 800cf4c:	429c      	cmp	r4, r3
 800cf4e:	bf08      	it	eq
 800cf50:	68ec      	ldreq	r4, [r5, #12]
 800cf52:	e7da      	b.n	800cf0a <_fflush_r+0x22>
 800cf54:	0800d508 	.word	0x0800d508
 800cf58:	0800d528 	.word	0x0800d528
 800cf5c:	0800d4e8 	.word	0x0800d4e8

0800cf60 <fiprintf>:
 800cf60:	b40e      	push	{r1, r2, r3}
 800cf62:	b503      	push	{r0, r1, lr}
 800cf64:	4601      	mov	r1, r0
 800cf66:	ab03      	add	r3, sp, #12
 800cf68:	4805      	ldr	r0, [pc, #20]	; (800cf80 <fiprintf+0x20>)
 800cf6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf6e:	6800      	ldr	r0, [r0, #0]
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	f7ff fcaf 	bl	800c8d4 <_vfiprintf_r>
 800cf76:	b002      	add	sp, #8
 800cf78:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf7c:	b003      	add	sp, #12
 800cf7e:	4770      	bx	lr
 800cf80:	2000000c 	.word	0x2000000c

0800cf84 <_lseek_r>:
 800cf84:	b538      	push	{r3, r4, r5, lr}
 800cf86:	4d07      	ldr	r5, [pc, #28]	; (800cfa4 <_lseek_r+0x20>)
 800cf88:	4604      	mov	r4, r0
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	2200      	movs	r2, #0
 800cf90:	602a      	str	r2, [r5, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	f7f4 fcde 	bl	8001954 <_lseek>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d102      	bne.n	800cfa2 <_lseek_r+0x1e>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	b103      	cbz	r3, 800cfa2 <_lseek_r+0x1e>
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	20000910 	.word	0x20000910

0800cfa8 <__swhatbuf_r>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	460e      	mov	r6, r1
 800cfac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfb0:	2900      	cmp	r1, #0
 800cfb2:	b096      	sub	sp, #88	; 0x58
 800cfb4:	4614      	mov	r4, r2
 800cfb6:	461d      	mov	r5, r3
 800cfb8:	da08      	bge.n	800cfcc <__swhatbuf_r+0x24>
 800cfba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	602a      	str	r2, [r5, #0]
 800cfc2:	061a      	lsls	r2, r3, #24
 800cfc4:	d410      	bmi.n	800cfe8 <__swhatbuf_r+0x40>
 800cfc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfca:	e00e      	b.n	800cfea <__swhatbuf_r+0x42>
 800cfcc:	466a      	mov	r2, sp
 800cfce:	f000 f8df 	bl	800d190 <_fstat_r>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	dbf1      	blt.n	800cfba <__swhatbuf_r+0x12>
 800cfd6:	9a01      	ldr	r2, [sp, #4]
 800cfd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cfdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cfe0:	425a      	negs	r2, r3
 800cfe2:	415a      	adcs	r2, r3
 800cfe4:	602a      	str	r2, [r5, #0]
 800cfe6:	e7ee      	b.n	800cfc6 <__swhatbuf_r+0x1e>
 800cfe8:	2340      	movs	r3, #64	; 0x40
 800cfea:	2000      	movs	r0, #0
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	b016      	add	sp, #88	; 0x58
 800cff0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cff4 <__smakebuf_r>:
 800cff4:	898b      	ldrh	r3, [r1, #12]
 800cff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cff8:	079d      	lsls	r5, r3, #30
 800cffa:	4606      	mov	r6, r0
 800cffc:	460c      	mov	r4, r1
 800cffe:	d507      	bpl.n	800d010 <__smakebuf_r+0x1c>
 800d000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	6123      	str	r3, [r4, #16]
 800d008:	2301      	movs	r3, #1
 800d00a:	6163      	str	r3, [r4, #20]
 800d00c:	b002      	add	sp, #8
 800d00e:	bd70      	pop	{r4, r5, r6, pc}
 800d010:	ab01      	add	r3, sp, #4
 800d012:	466a      	mov	r2, sp
 800d014:	f7ff ffc8 	bl	800cfa8 <__swhatbuf_r>
 800d018:	9900      	ldr	r1, [sp, #0]
 800d01a:	4605      	mov	r5, r0
 800d01c:	4630      	mov	r0, r6
 800d01e:	f7ff fa5f 	bl	800c4e0 <_malloc_r>
 800d022:	b948      	cbnz	r0, 800d038 <__smakebuf_r+0x44>
 800d024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d028:	059a      	lsls	r2, r3, #22
 800d02a:	d4ef      	bmi.n	800d00c <__smakebuf_r+0x18>
 800d02c:	f023 0303 	bic.w	r3, r3, #3
 800d030:	f043 0302 	orr.w	r3, r3, #2
 800d034:	81a3      	strh	r3, [r4, #12]
 800d036:	e7e3      	b.n	800d000 <__smakebuf_r+0xc>
 800d038:	4b0d      	ldr	r3, [pc, #52]	; (800d070 <__smakebuf_r+0x7c>)
 800d03a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	6020      	str	r0, [r4, #0]
 800d040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d044:	81a3      	strh	r3, [r4, #12]
 800d046:	9b00      	ldr	r3, [sp, #0]
 800d048:	6163      	str	r3, [r4, #20]
 800d04a:	9b01      	ldr	r3, [sp, #4]
 800d04c:	6120      	str	r0, [r4, #16]
 800d04e:	b15b      	cbz	r3, 800d068 <__smakebuf_r+0x74>
 800d050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d054:	4630      	mov	r0, r6
 800d056:	f000 f8ad 	bl	800d1b4 <_isatty_r>
 800d05a:	b128      	cbz	r0, 800d068 <__smakebuf_r+0x74>
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	f023 0303 	bic.w	r3, r3, #3
 800d062:	f043 0301 	orr.w	r3, r3, #1
 800d066:	81a3      	strh	r3, [r4, #12]
 800d068:	89a0      	ldrh	r0, [r4, #12]
 800d06a:	4305      	orrs	r5, r0
 800d06c:	81a5      	strh	r5, [r4, #12]
 800d06e:	e7cd      	b.n	800d00c <__smakebuf_r+0x18>
 800d070:	0800baf5 	.word	0x0800baf5

0800d074 <__ascii_mbtowc>:
 800d074:	b082      	sub	sp, #8
 800d076:	b901      	cbnz	r1, 800d07a <__ascii_mbtowc+0x6>
 800d078:	a901      	add	r1, sp, #4
 800d07a:	b142      	cbz	r2, 800d08e <__ascii_mbtowc+0x1a>
 800d07c:	b14b      	cbz	r3, 800d092 <__ascii_mbtowc+0x1e>
 800d07e:	7813      	ldrb	r3, [r2, #0]
 800d080:	600b      	str	r3, [r1, #0]
 800d082:	7812      	ldrb	r2, [r2, #0]
 800d084:	1e10      	subs	r0, r2, #0
 800d086:	bf18      	it	ne
 800d088:	2001      	movne	r0, #1
 800d08a:	b002      	add	sp, #8
 800d08c:	4770      	bx	lr
 800d08e:	4610      	mov	r0, r2
 800d090:	e7fb      	b.n	800d08a <__ascii_mbtowc+0x16>
 800d092:	f06f 0001 	mvn.w	r0, #1
 800d096:	e7f8      	b.n	800d08a <__ascii_mbtowc+0x16>

0800d098 <memmove>:
 800d098:	4288      	cmp	r0, r1
 800d09a:	b510      	push	{r4, lr}
 800d09c:	eb01 0402 	add.w	r4, r1, r2
 800d0a0:	d902      	bls.n	800d0a8 <memmove+0x10>
 800d0a2:	4284      	cmp	r4, r0
 800d0a4:	4623      	mov	r3, r4
 800d0a6:	d807      	bhi.n	800d0b8 <memmove+0x20>
 800d0a8:	1e43      	subs	r3, r0, #1
 800d0aa:	42a1      	cmp	r1, r4
 800d0ac:	d008      	beq.n	800d0c0 <memmove+0x28>
 800d0ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0b6:	e7f8      	b.n	800d0aa <memmove+0x12>
 800d0b8:	4402      	add	r2, r0
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	428a      	cmp	r2, r1
 800d0be:	d100      	bne.n	800d0c2 <memmove+0x2a>
 800d0c0:	bd10      	pop	{r4, pc}
 800d0c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0ca:	e7f7      	b.n	800d0bc <memmove+0x24>

0800d0cc <__malloc_lock>:
 800d0cc:	4801      	ldr	r0, [pc, #4]	; (800d0d4 <__malloc_lock+0x8>)
 800d0ce:	f7fe bde8 	b.w	800bca2 <__retarget_lock_acquire_recursive>
 800d0d2:	bf00      	nop
 800d0d4:	20000904 	.word	0x20000904

0800d0d8 <__malloc_unlock>:
 800d0d8:	4801      	ldr	r0, [pc, #4]	; (800d0e0 <__malloc_unlock+0x8>)
 800d0da:	f7fe bde3 	b.w	800bca4 <__retarget_lock_release_recursive>
 800d0de:	bf00      	nop
 800d0e0:	20000904 	.word	0x20000904

0800d0e4 <_realloc_r>:
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	4680      	mov	r8, r0
 800d0ea:	4614      	mov	r4, r2
 800d0ec:	460e      	mov	r6, r1
 800d0ee:	b921      	cbnz	r1, 800d0fa <_realloc_r+0x16>
 800d0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	f7ff b9f3 	b.w	800c4e0 <_malloc_r>
 800d0fa:	b92a      	cbnz	r2, 800d108 <_realloc_r+0x24>
 800d0fc:	f7ff f984 	bl	800c408 <_free_r>
 800d100:	4625      	mov	r5, r4
 800d102:	4628      	mov	r0, r5
 800d104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d108:	f000 f864 	bl	800d1d4 <_malloc_usable_size_r>
 800d10c:	4284      	cmp	r4, r0
 800d10e:	4607      	mov	r7, r0
 800d110:	d802      	bhi.n	800d118 <_realloc_r+0x34>
 800d112:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d116:	d812      	bhi.n	800d13e <_realloc_r+0x5a>
 800d118:	4621      	mov	r1, r4
 800d11a:	4640      	mov	r0, r8
 800d11c:	f7ff f9e0 	bl	800c4e0 <_malloc_r>
 800d120:	4605      	mov	r5, r0
 800d122:	2800      	cmp	r0, #0
 800d124:	d0ed      	beq.n	800d102 <_realloc_r+0x1e>
 800d126:	42bc      	cmp	r4, r7
 800d128:	4622      	mov	r2, r4
 800d12a:	4631      	mov	r1, r6
 800d12c:	bf28      	it	cs
 800d12e:	463a      	movcs	r2, r7
 800d130:	f7fe fdc2 	bl	800bcb8 <memcpy>
 800d134:	4631      	mov	r1, r6
 800d136:	4640      	mov	r0, r8
 800d138:	f7ff f966 	bl	800c408 <_free_r>
 800d13c:	e7e1      	b.n	800d102 <_realloc_r+0x1e>
 800d13e:	4635      	mov	r5, r6
 800d140:	e7df      	b.n	800d102 <_realloc_r+0x1e>
	...

0800d144 <_read_r>:
 800d144:	b538      	push	{r3, r4, r5, lr}
 800d146:	4d07      	ldr	r5, [pc, #28]	; (800d164 <_read_r+0x20>)
 800d148:	4604      	mov	r4, r0
 800d14a:	4608      	mov	r0, r1
 800d14c:	4611      	mov	r1, r2
 800d14e:	2200      	movs	r2, #0
 800d150:	602a      	str	r2, [r5, #0]
 800d152:	461a      	mov	r2, r3
 800d154:	f7f4 fbba 	bl	80018cc <_read>
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	d102      	bne.n	800d162 <_read_r+0x1e>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	b103      	cbz	r3, 800d162 <_read_r+0x1e>
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	20000910 	.word	0x20000910

0800d168 <__ascii_wctomb>:
 800d168:	b149      	cbz	r1, 800d17e <__ascii_wctomb+0x16>
 800d16a:	2aff      	cmp	r2, #255	; 0xff
 800d16c:	bf85      	ittet	hi
 800d16e:	238a      	movhi	r3, #138	; 0x8a
 800d170:	6003      	strhi	r3, [r0, #0]
 800d172:	700a      	strbls	r2, [r1, #0]
 800d174:	f04f 30ff 	movhi.w	r0, #4294967295
 800d178:	bf98      	it	ls
 800d17a:	2001      	movls	r0, #1
 800d17c:	4770      	bx	lr
 800d17e:	4608      	mov	r0, r1
 800d180:	4770      	bx	lr

0800d182 <abort>:
 800d182:	b508      	push	{r3, lr}
 800d184:	2006      	movs	r0, #6
 800d186:	f000 f855 	bl	800d234 <raise>
 800d18a:	2001      	movs	r0, #1
 800d18c:	f7f4 fb94 	bl	80018b8 <_exit>

0800d190 <_fstat_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d07      	ldr	r5, [pc, #28]	; (800d1b0 <_fstat_r+0x20>)
 800d194:	2300      	movs	r3, #0
 800d196:	4604      	mov	r4, r0
 800d198:	4608      	mov	r0, r1
 800d19a:	4611      	mov	r1, r2
 800d19c:	602b      	str	r3, [r5, #0]
 800d19e:	f7f4 fbbe 	bl	800191e <_fstat>
 800d1a2:	1c43      	adds	r3, r0, #1
 800d1a4:	d102      	bne.n	800d1ac <_fstat_r+0x1c>
 800d1a6:	682b      	ldr	r3, [r5, #0]
 800d1a8:	b103      	cbz	r3, 800d1ac <_fstat_r+0x1c>
 800d1aa:	6023      	str	r3, [r4, #0]
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
 800d1ae:	bf00      	nop
 800d1b0:	20000910 	.word	0x20000910

0800d1b4 <_isatty_r>:
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4d06      	ldr	r5, [pc, #24]	; (800d1d0 <_isatty_r+0x1c>)
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	4608      	mov	r0, r1
 800d1be:	602b      	str	r3, [r5, #0]
 800d1c0:	f7f4 fbbd 	bl	800193e <_isatty>
 800d1c4:	1c43      	adds	r3, r0, #1
 800d1c6:	d102      	bne.n	800d1ce <_isatty_r+0x1a>
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	b103      	cbz	r3, 800d1ce <_isatty_r+0x1a>
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	20000910 	.word	0x20000910

0800d1d4 <_malloc_usable_size_r>:
 800d1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1d8:	1f18      	subs	r0, r3, #4
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	bfbc      	itt	lt
 800d1de:	580b      	ldrlt	r3, [r1, r0]
 800d1e0:	18c0      	addlt	r0, r0, r3
 800d1e2:	4770      	bx	lr

0800d1e4 <_raise_r>:
 800d1e4:	291f      	cmp	r1, #31
 800d1e6:	b538      	push	{r3, r4, r5, lr}
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	d904      	bls.n	800d1f8 <_raise_r+0x14>
 800d1ee:	2316      	movs	r3, #22
 800d1f0:	6003      	str	r3, [r0, #0]
 800d1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1fa:	b112      	cbz	r2, 800d202 <_raise_r+0x1e>
 800d1fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d200:	b94b      	cbnz	r3, 800d216 <_raise_r+0x32>
 800d202:	4620      	mov	r0, r4
 800d204:	f000 f830 	bl	800d268 <_getpid_r>
 800d208:	462a      	mov	r2, r5
 800d20a:	4601      	mov	r1, r0
 800d20c:	4620      	mov	r0, r4
 800d20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d212:	f000 b817 	b.w	800d244 <_kill_r>
 800d216:	2b01      	cmp	r3, #1
 800d218:	d00a      	beq.n	800d230 <_raise_r+0x4c>
 800d21a:	1c59      	adds	r1, r3, #1
 800d21c:	d103      	bne.n	800d226 <_raise_r+0x42>
 800d21e:	2316      	movs	r3, #22
 800d220:	6003      	str	r3, [r0, #0]
 800d222:	2001      	movs	r0, #1
 800d224:	e7e7      	b.n	800d1f6 <_raise_r+0x12>
 800d226:	2400      	movs	r4, #0
 800d228:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d22c:	4628      	mov	r0, r5
 800d22e:	4798      	blx	r3
 800d230:	2000      	movs	r0, #0
 800d232:	e7e0      	b.n	800d1f6 <_raise_r+0x12>

0800d234 <raise>:
 800d234:	4b02      	ldr	r3, [pc, #8]	; (800d240 <raise+0xc>)
 800d236:	4601      	mov	r1, r0
 800d238:	6818      	ldr	r0, [r3, #0]
 800d23a:	f7ff bfd3 	b.w	800d1e4 <_raise_r>
 800d23e:	bf00      	nop
 800d240:	2000000c 	.word	0x2000000c

0800d244 <_kill_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d07      	ldr	r5, [pc, #28]	; (800d264 <_kill_r+0x20>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	4611      	mov	r1, r2
 800d250:	602b      	str	r3, [r5, #0]
 800d252:	f7f4 fb21 	bl	8001898 <_kill>
 800d256:	1c43      	adds	r3, r0, #1
 800d258:	d102      	bne.n	800d260 <_kill_r+0x1c>
 800d25a:	682b      	ldr	r3, [r5, #0]
 800d25c:	b103      	cbz	r3, 800d260 <_kill_r+0x1c>
 800d25e:	6023      	str	r3, [r4, #0]
 800d260:	bd38      	pop	{r3, r4, r5, pc}
 800d262:	bf00      	nop
 800d264:	20000910 	.word	0x20000910

0800d268 <_getpid_r>:
 800d268:	f7f4 bb0e 	b.w	8001888 <_getpid>

0800d26c <_init>:
 800d26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26e:	bf00      	nop
 800d270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d272:	bc08      	pop	{r3}
 800d274:	469e      	mov	lr, r3
 800d276:	4770      	bx	lr

0800d278 <_fini>:
 800d278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27a:	bf00      	nop
 800d27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d27e:	bc08      	pop	{r3}
 800d280:	469e      	mov	lr, r3
 800d282:	4770      	bx	lr
