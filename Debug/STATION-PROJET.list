
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040ec  080040ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040f4  080040f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000070  0800416c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800416c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083d0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6a  00000000  00000000  00028470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  00029fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  0002a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f19  00000000  00000000  0002ad18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092af  00000000  00000000  00050c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e73f8  00000000  00000000  00059ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001412d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e4  00000000  00000000  00141328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004024 	.word	0x08004024

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004024 	.word	0x08004024

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b974 	b.w	8000efc <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468e      	mov	lr, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14d      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	d969      	bls.n	8000d14 <__udivmoddi4+0xe8>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b152      	cbz	r2, 8000c5c <__udivmoddi4+0x30>
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	f1c2 0120 	rsb	r1, r2, #32
 8000c4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c56:	ea41 0e03 	orr.w	lr, r1, r3
 8000c5a:	4094      	lsls	r4, r2
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	0c21      	lsrs	r1, r4, #16
 8000c62:	fbbe f6f8 	udiv	r6, lr, r8
 8000c66:	fa1f f78c 	uxth.w	r7, ip
 8000c6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c72:	fb06 f107 	mul.w	r1, r6, r7
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c82:	f080 811f 	bcs.w	8000ec4 <__udivmoddi4+0x298>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 811c 	bls.w	8000ec4 <__udivmoddi4+0x298>
 8000c8c:	3e02      	subs	r6, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c98:	fb08 3310 	mls	r3, r8, r0, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb00 f707 	mul.w	r7, r0, r7
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	d90a      	bls.n	8000cbe <__udivmoddi4+0x92>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb0:	f080 810a 	bcs.w	8000ec8 <__udivmoddi4+0x29c>
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	f240 8107 	bls.w	8000ec8 <__udivmoddi4+0x29c>
 8000cba:	4464      	add	r4, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc2:	1be4      	subs	r4, r4, r7
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	b11d      	cbz	r5, 8000cd0 <__udivmoddi4+0xa4>
 8000cc8:	40d4      	lsrs	r4, r2
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0xc2>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80ef 	beq.w	8000ebe <__udivmoddi4+0x292>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x160>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xd4>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80f9 	bhi.w	8000ef2 <__udivmoddi4+0x2c6>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0303 	sbc.w	r3, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	469e      	mov	lr, r3
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e0      	beq.n	8000cd0 <__udivmoddi4+0xa4>
 8000d0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d12:	e7dd      	b.n	8000cd0 <__udivmoddi4+0xa4>
 8000d14:	b902      	cbnz	r2, 8000d18 <__udivmoddi4+0xec>
 8000d16:	deff      	udf	#255	; 0xff
 8000d18:	fab2 f282 	clz	r2, r2
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	f040 8092 	bne.w	8000e46 <__udivmoddi4+0x21a>
 8000d22:	eba1 010c 	sub.w	r1, r1, ip
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f fe8c 	uxth.w	lr, ip
 8000d2e:	2601      	movs	r6, #1
 8000d30:	0c20      	lsrs	r0, r4, #16
 8000d32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d36:	fb07 1113 	mls	r1, r7, r3, r1
 8000d3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3e:	fb0e f003 	mul.w	r0, lr, r3
 8000d42:	4288      	cmp	r0, r1
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x12c>
 8000d46:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x12a>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f200 80cb 	bhi.w	8000eec <__udivmoddi4+0x2c0>
 8000d56:	4643      	mov	r3, r8
 8000d58:	1a09      	subs	r1, r1, r0
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d60:	fb07 1110 	mls	r1, r7, r0, r1
 8000d64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d68:	fb0e fe00 	mul.w	lr, lr, r0
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x156>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0x154>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f200 80bb 	bhi.w	8000ef6 <__udivmoddi4+0x2ca>
 8000d80:	4608      	mov	r0, r1
 8000d82:	eba4 040e 	sub.w	r4, r4, lr
 8000d86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d8a:	e79c      	b.n	8000cc6 <__udivmoddi4+0x9a>
 8000d8c:	f1c6 0720 	rsb	r7, r6, #32
 8000d90:	40b3      	lsls	r3, r6
 8000d92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	431c      	orrs	r4, r3
 8000da4:	40f9      	lsrs	r1, r7
 8000da6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000daa:	fa00 f306 	lsl.w	r3, r0, r6
 8000dae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000db2:	0c20      	lsrs	r0, r4, #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dca:	d90b      	bls.n	8000de4 <__udivmoddi4+0x1b8>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd4:	f080 8088 	bcs.w	8000ee8 <__udivmoddi4+0x2bc>
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	f240 8085 	bls.w	8000ee8 <__udivmoddi4+0x2bc>
 8000dde:	f1a8 0802 	sub.w	r8, r8, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dec:	fb09 1110 	mls	r1, r9, r0, r1
 8000df0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	458e      	cmp	lr, r1
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x1e2>
 8000dfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000e00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e04:	d26c      	bcs.n	8000ee0 <__udivmoddi4+0x2b4>
 8000e06:	458e      	cmp	lr, r1
 8000e08:	d96a      	bls.n	8000ee0 <__udivmoddi4+0x2b4>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	4461      	add	r1, ip
 8000e0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e12:	fba0 9402 	umull	r9, r4, r0, r2
 8000e16:	eba1 010e 	sub.w	r1, r1, lr
 8000e1a:	42a1      	cmp	r1, r4
 8000e1c:	46c8      	mov	r8, r9
 8000e1e:	46a6      	mov	lr, r4
 8000e20:	d356      	bcc.n	8000ed0 <__udivmoddi4+0x2a4>
 8000e22:	d053      	beq.n	8000ecc <__udivmoddi4+0x2a0>
 8000e24:	b15d      	cbz	r5, 8000e3e <__udivmoddi4+0x212>
 8000e26:	ebb3 0208 	subs.w	r2, r3, r8
 8000e2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e32:	fa22 f306 	lsr.w	r3, r2, r6
 8000e36:	40f1      	lsrs	r1, r6
 8000e38:	431f      	orrs	r7, r3
 8000e3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3e:	2600      	movs	r6, #0
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	f1c2 0320 	rsb	r3, r2, #32
 8000e4a:	40d8      	lsrs	r0, r3
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	fa21 f303 	lsr.w	r3, r1, r3
 8000e54:	4091      	lsls	r1, r2
 8000e56:	4301      	orrs	r1, r0
 8000e58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e64:	fb07 3610 	mls	r6, r7, r0, r3
 8000e68:	0c0b      	lsrs	r3, r1, #16
 8000e6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e72:	429e      	cmp	r6, r3
 8000e74:	fa04 f402 	lsl.w	r4, r4, r2
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x260>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e82:	d22f      	bcs.n	8000ee4 <__udivmoddi4+0x2b8>
 8000e84:	429e      	cmp	r6, r3
 8000e86:	d92d      	bls.n	8000ee4 <__udivmoddi4+0x2b8>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1b9b      	subs	r3, r3, r6
 8000e8e:	b289      	uxth	r1, r1
 8000e90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e94:	fb07 3316 	mls	r3, r7, r6, r3
 8000e98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x28a>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eac:	d216      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d914      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000eb2:	3e02      	subs	r6, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ebc:	e738      	b.n	8000d30 <__udivmoddi4+0x104>
 8000ebe:	462e      	mov	r6, r5
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e705      	b.n	8000cd0 <__udivmoddi4+0xa4>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	e6e3      	b.n	8000c90 <__udivmoddi4+0x64>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6f8      	b.n	8000cbe <__udivmoddi4+0x92>
 8000ecc:	454b      	cmp	r3, r9
 8000ece:	d2a9      	bcs.n	8000e24 <__udivmoddi4+0x1f8>
 8000ed0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed8:	3801      	subs	r0, #1
 8000eda:	e7a3      	b.n	8000e24 <__udivmoddi4+0x1f8>
 8000edc:	4646      	mov	r6, r8
 8000ede:	e7ea      	b.n	8000eb6 <__udivmoddi4+0x28a>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	e794      	b.n	8000e0e <__udivmoddi4+0x1e2>
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	e7d1      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ee8:	46d0      	mov	r8, sl
 8000eea:	e77b      	b.n	8000de4 <__udivmoddi4+0x1b8>
 8000eec:	3b02      	subs	r3, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	e732      	b.n	8000d58 <__udivmoddi4+0x12c>
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	e709      	b.n	8000d0a <__udivmoddi4+0xde>
 8000ef6:	4464      	add	r4, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e742      	b.n	8000d82 <__udivmoddi4+0x156>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <MX_ADC1_Init+0x9c>)
 8000f16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <MX_ADC1_Init+0xa0>)
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f62:	f000 fc93 	bl	800188c <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f6c:	f000 faf4 	bl	8001558 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f82:	f000 fed1 	bl	8001d28 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 fae4 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	0f000001 	.word	0x0f000001

08000fa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <HAL_ADC_MspInit+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d12b      	bne.n	800101e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_ADC_MspInit+0x8c>)
 800100a:	f001 f9f9 	bl	8002400 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2012      	movs	r0, #18
 8001014:	f001 f9bd 	bl	8002392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001018:	2012      	movs	r0, #18
 800101a:	f001 f9d6 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40012000 	.word	0x40012000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA9   ------> USART1_TX
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800104a:	4b93      	ldr	r3, [pc, #588]	; (8001298 <MX_GPIO_Init+0x264>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a92      	ldr	r2, [pc, #584]	; (8001298 <MX_GPIO_Init+0x264>)
 8001050:	f043 0310 	orr.w	r3, r3, #16
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b90      	ldr	r3, [pc, #576]	; (8001298 <MX_GPIO_Init+0x264>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001062:	4b8d      	ldr	r3, [pc, #564]	; (8001298 <MX_GPIO_Init+0x264>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a8c      	ldr	r2, [pc, #560]	; (8001298 <MX_GPIO_Init+0x264>)
 8001068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b8a      	ldr	r3, [pc, #552]	; (8001298 <MX_GPIO_Init+0x264>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b87      	ldr	r3, [pc, #540]	; (8001298 <MX_GPIO_Init+0x264>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a86      	ldr	r2, [pc, #536]	; (8001298 <MX_GPIO_Init+0x264>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b84      	ldr	r3, [pc, #528]	; (8001298 <MX_GPIO_Init+0x264>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	623b      	str	r3, [r7, #32]
 8001090:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b81      	ldr	r3, [pc, #516]	; (8001298 <MX_GPIO_Init+0x264>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a80      	ldr	r2, [pc, #512]	; (8001298 <MX_GPIO_Init+0x264>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b7e      	ldr	r3, [pc, #504]	; (8001298 <MX_GPIO_Init+0x264>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b7b      	ldr	r3, [pc, #492]	; (8001298 <MX_GPIO_Init+0x264>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a7a      	ldr	r2, [pc, #488]	; (8001298 <MX_GPIO_Init+0x264>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b78      	ldr	r3, [pc, #480]	; (8001298 <MX_GPIO_Init+0x264>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b75      	ldr	r3, [pc, #468]	; (8001298 <MX_GPIO_Init+0x264>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a74      	ldr	r2, [pc, #464]	; (8001298 <MX_GPIO_Init+0x264>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b72      	ldr	r3, [pc, #456]	; (8001298 <MX_GPIO_Init+0x264>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010da:	4b6f      	ldr	r3, [pc, #444]	; (8001298 <MX_GPIO_Init+0x264>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a6e      	ldr	r2, [pc, #440]	; (8001298 <MX_GPIO_Init+0x264>)
 80010e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b6c      	ldr	r3, [pc, #432]	; (8001298 <MX_GPIO_Init+0x264>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010f2:	4b69      	ldr	r3, [pc, #420]	; (8001298 <MX_GPIO_Init+0x264>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a68      	ldr	r2, [pc, #416]	; (8001298 <MX_GPIO_Init+0x264>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b66      	ldr	r3, [pc, #408]	; (8001298 <MX_GPIO_Init+0x264>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <MX_GPIO_Init+0x264>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a62      	ldr	r2, [pc, #392]	; (8001298 <MX_GPIO_Init+0x264>)
 8001110:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b60      	ldr	r3, [pc, #384]	; (8001298 <MX_GPIO_Init+0x264>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001122:	4b5d      	ldr	r3, [pc, #372]	; (8001298 <MX_GPIO_Init+0x264>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a5c      	ldr	r2, [pc, #368]	; (8001298 <MX_GPIO_Init+0x264>)
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b5a      	ldr	r3, [pc, #360]	; (8001298 <MX_GPIO_Init+0x264>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0320 	and.w	r3, r3, #32
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	4b57      	ldr	r3, [pc, #348]	; (8001298 <MX_GPIO_Init+0x264>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a56      	ldr	r2, [pc, #344]	; (8001298 <MX_GPIO_Init+0x264>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b54      	ldr	r3, [pc, #336]	; (8001298 <MX_GPIO_Init+0x264>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 8001152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001158:	2303      	movs	r3, #3
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001164:	4619      	mov	r1, r3
 8001166:	484d      	ldr	r0, [pc, #308]	; (800129c <MX_GPIO_Init+0x268>)
 8001168:	f001 f94a 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 800116c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001172:	2303      	movs	r3, #3
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117e:	4619      	mov	r1, r3
 8001180:	4847      	ldr	r0, [pc, #284]	; (80012a0 <MX_GPIO_Init+0x26c>)
 8001182:	f001 f93d 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB7 PB6 PB13
                           PB12 PB2 PB10 PB1
                           PB0 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001198:	4619      	mov	r1, r3
 800119a:	4842      	ldr	r0, [pc, #264]	; (80012a4 <MX_GPIO_Init+0x270>)
 800119c:	f001 f930 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD2
                           PD15 PD10 PD14 PD9
                           PD8 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 80011a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a6:	2303      	movs	r3, #3
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	483c      	ldr	r0, [pc, #240]	; (80012a8 <MX_GPIO_Init+0x274>)
 80011b6:	f001 f923 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 80011ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011cc:	4619      	mov	r1, r3
 80011ce:	4837      	ldr	r0, [pc, #220]	; (80012ac <MX_GPIO_Init+0x278>)
 80011d0:	f001 f916 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA4 PA2
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80011d4:	f649 53fe 	movw	r3, #40446	; 0x9dfe
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e6:	4619      	mov	r1, r3
 80011e8:	4831      	ldr	r0, [pc, #196]	; (80012b0 <MX_GPIO_Init+0x27c>)
 80011ea:	f001 f909 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80011ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001200:	4619      	mov	r1, r3
 8001202:	482c      	ldr	r0, [pc, #176]	; (80012b4 <MX_GPIO_Init+0x280>)
 8001204:	f001 f8fc 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121a:	4619      	mov	r1, r3
 800121c:	4826      	ldr	r0, [pc, #152]	; (80012b8 <MX_GPIO_Init+0x284>)
 800121e:	f001 f8ef 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001222:	23ff      	movs	r3, #255	; 0xff
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800122e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001232:	4619      	mov	r1, r3
 8001234:	4821      	ldr	r0, [pc, #132]	; (80012bc <MX_GPIO_Init+0x288>)
 8001236:	f001 f8e3 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800123a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124c:	4619      	mov	r1, r3
 800124e:	481c      	ldr	r0, [pc, #112]	; (80012c0 <MX_GPIO_Init+0x28c>)
 8001250:	f001 f8d6 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001254:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125a:	2303      	movs	r3, #3
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001266:	4619      	mov	r1, r3
 8001268:	4816      	ldr	r0, [pc, #88]	; (80012c4 <MX_GPIO_Init+0x290>)
 800126a:	f001 f8c9 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800126e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001280:	2307      	movs	r3, #7
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	4809      	ldr	r0, [pc, #36]	; (80012b0 <MX_GPIO_Init+0x27c>)
 800128c:	f001 f8b8 	bl	8002400 <HAL_GPIO_Init>

}
 8001290:	bf00      	nop
 8001292:	3740      	adds	r7, #64	; 0x40
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40023800 	.word	0x40023800
 800129c:	40021000 	.word	0x40021000
 80012a0:	40021800 	.word	0x40021800
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40022400 	.word	0x40022400
 80012b8:	40022000 	.word	0x40022000
 80012bc:	40022800 	.word	0x40022800
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40021c00 	.word	0x40021c00

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ce:	f000 fa80 	bl	80017d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d2:	f000 f8bd 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d6:	f7ff fead 	bl	8001034 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012da:	f7ff fe11 	bl	8000f00 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1); // to change it after merge to the IC IRQ
 80012de:	4858      	ldr	r0, [pc, #352]	; (8001440 <main+0x178>)
 80012e0:	f000 fb18 	bl	8001914 <HAL_ADC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UR=(float)(Wind_Dir_Voltage*3.3/4095);
 80012e4:	4b57      	ldr	r3, [pc, #348]	; (8001444 <main+0x17c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f923 	bl	8000534 <__aeabi_ui2d>
 80012ee:	a342      	add	r3, pc, #264	; (adr r3, 80013f8 <main+0x130>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f998 	bl	8000628 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	a33f      	add	r3, pc, #252	; (adr r3, 8001400 <main+0x138>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff fab9 	bl	800087c <__aeabi_ddiv>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc23 	bl	8000b5c <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	603b      	str	r3, [r7, #0]
	  HAL_ADC_Start_IT(&hadc1);
 800131a:	4849      	ldr	r0, [pc, #292]	; (8001440 <main+0x178>)
 800131c:	f000 fafa 	bl	8001914 <HAL_ADC_Start_IT>
	  if(Wind_Dir_Flag){
 8001320:	4b49      	ldr	r3, [pc, #292]	; (8001448 <main+0x180>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d060      	beq.n	80013ec <main+0x124>

		  if(UR>=2.6 && UR<=2.700)
 800132a:	6838      	ldr	r0, [r7, #0]
 800132c:	f7ff f924 	bl	8000578 <__aeabi_f2d>
 8001330:	a335      	add	r3, pc, #212	; (adr r3, 8001408 <main+0x140>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f7ff fbfd 	bl	8000b34 <__aeabi_dcmpge>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00d      	beq.n	800135c <main+0x94>
 8001340:	6838      	ldr	r0, [r7, #0]
 8001342:	f7ff f919 	bl	8000578 <__aeabi_f2d>
 8001346:	a332      	add	r3, pc, #200	; (adr r3, 8001410 <main+0x148>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7ff fbe8 	bl	8000b20 <__aeabi_dcmple>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <main+0x94>
		  	  dir = Nord;
 8001356:	2300      	movs	r3, #0
 8001358:	71fb      	strb	r3, [r7, #7]
 800135a:	e047      	b.n	80013ec <main+0x124>
		  else if( UR>=1.359 && UR <=1.365)
 800135c:	6838      	ldr	r0, [r7, #0]
 800135e:	f7ff f90b 	bl	8000578 <__aeabi_f2d>
 8001362:	a32d      	add	r3, pc, #180	; (adr r3, 8001418 <main+0x150>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff fbe4 	bl	8000b34 <__aeabi_dcmpge>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00d      	beq.n	800138e <main+0xc6>
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f7ff f900 	bl	8000578 <__aeabi_f2d>
 8001378:	a329      	add	r3, pc, #164	; (adr r3, 8001420 <main+0x158>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff fbcf 	bl	8000b20 <__aeabi_dcmple>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <main+0xc6>
		  	  dir= Sud;
 8001388:	2301      	movs	r3, #1
 800138a:	71fb      	strb	r3, [r7, #7]
 800138c:	e02e      	b.n	80013ec <main+0x124>
		  else if( UR>=3.000 && UR<= 3.040)
 800138e:	edd7 7a00 	vldr	s15, [r7]
 8001392:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	db0d      	blt.n	80013bc <main+0xf4>
 80013a0:	6838      	ldr	r0, [r7, #0]
 80013a2:	f7ff f8e9 	bl	8000578 <__aeabi_f2d>
 80013a6:	a320      	add	r3, pc, #128	; (adr r3, 8001428 <main+0x160>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fbb8 	bl	8000b20 <__aeabi_dcmple>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <main+0xf4>
		  	  dir=West;
 80013b6:	2302      	movs	r3, #2
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	e017      	b.n	80013ec <main+0x124>
		  else if( UR>=0.770  && UR<= 0.775)
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f7ff f8db 	bl	8000578 <__aeabi_f2d>
 80013c2:	a31b      	add	r3, pc, #108	; (adr r3, 8001430 <main+0x168>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	f7ff fbb4 	bl	8000b34 <__aeabi_dcmpge>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00c      	beq.n	80013ec <main+0x124>
 80013d2:	6838      	ldr	r0, [r7, #0]
 80013d4:	f7ff f8d0 	bl	8000578 <__aeabi_f2d>
 80013d8:	a317      	add	r3, pc, #92	; (adr r3, 8001438 <main+0x170>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff fb9f 	bl	8000b20 <__aeabi_dcmple>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <main+0x124>
		  	  dir=East;
 80013e8:	2303      	movs	r3, #3
 80013ea:	71fb      	strb	r3, [r7, #7]
		  }
	  printf("%d\n\r",dir);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4619      	mov	r1, r3
 80013f0:	4816      	ldr	r0, [pc, #88]	; (800144c <main+0x184>)
 80013f2:	f001 fe89 	bl	8003108 <iprintf>
	  UR=(float)(Wind_Dir_Voltage*3.3/4095);
 80013f6:	e775      	b.n	80012e4 <main+0x1c>
 80013f8:	66666666 	.word	0x66666666
 80013fc:	400a6666 	.word	0x400a6666
 8001400:	00000000 	.word	0x00000000
 8001404:	40affe00 	.word	0x40affe00
 8001408:	cccccccd 	.word	0xcccccccd
 800140c:	4004cccc 	.word	0x4004cccc
 8001410:	9999999a 	.word	0x9999999a
 8001414:	40059999 	.word	0x40059999
 8001418:	c8b43958 	.word	0xc8b43958
 800141c:	3ff5be76 	.word	0x3ff5be76
 8001420:	3d70a3d7 	.word	0x3d70a3d7
 8001424:	3ff5d70a 	.word	0x3ff5d70a
 8001428:	851eb852 	.word	0x851eb852
 800142c:	400851eb 	.word	0x400851eb
 8001430:	0a3d70a4 	.word	0x0a3d70a4
 8001434:	3fe8a3d7 	.word	0x3fe8a3d7
 8001438:	cccccccd 	.word	0xcccccccd
 800143c:	3fe8cccc 	.word	0x3fe8cccc
 8001440:	2000008c 	.word	0x2000008c
 8001444:	200000d4 	.word	0x200000d4
 8001448:	200000d8 	.word	0x200000d8
 800144c:	0800403c 	.word	0x0800403c

08001450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	; 0x50
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	2230      	movs	r2, #48	; 0x30
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f001 fe4a 	bl	80030f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001474:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <SystemClock_Config+0xd4>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a2a      	ldr	r2, [pc, #168]	; (8001524 <SystemClock_Config+0xd4>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b28      	ldr	r3, [pc, #160]	; (8001524 <SystemClock_Config+0xd4>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <SystemClock_Config+0xd8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001494:	4a24      	ldr	r2, [pc, #144]	; (8001528 <SystemClock_Config+0xd8>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b22      	ldr	r3, [pc, #136]	; (8001528 <SystemClock_Config+0xd8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80014bc:	230c      	movs	r3, #12
 80014be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80014c0:	2360      	movs	r3, #96	; 0x60
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 f991 	bl	80027f8 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80014dc:	f000 f83c 	bl	8001558 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014e0:	f001 f93a 	bl	8002758 <HAL_PWREx_EnableOverDrive>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014ea:	f000 f835 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ee:	230f      	movs	r3, #15
 80014f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f2:	2302      	movs	r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2103      	movs	r1, #3
 800150c:	4618      	mov	r0, r3
 800150e:	f001 fc17 	bl	8002d40 <HAL_RCC_ClockConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001518:	f000 f81e 	bl	8001558 <Error_Handler>
  }
}
 800151c:	bf00      	nop
 800151e:	3750      	adds	r7, #80	; 0x50
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000

0800152c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
Wind_Dir_Voltage= HAL_ADC_GetValue(hadc);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fbd5 	bl	8001ce4 <HAL_ADC_GetValue>
 800153a:	4603      	mov	r3, r0
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_ADC_ConvCpltCallback+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
Wind_Dir_Flag=1;
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <HAL_ADC_ConvCpltCallback+0x28>)
 8001542:	2201      	movs	r2, #1
 8001544:	701a      	strb	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200000d4 	.word	0x200000d4
 8001554:	200000d8 	.word	0x200000d8

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x44>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_MspInit+0x44>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x44>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_MspInit+0x44>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_MspInit+0x44>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_MspInit+0x44>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f8:	f000 f928 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <ADC_IRQHandler+0x10>)
 8001606:	f000 fa5d 	bl	8001ac4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000008c 	.word	0x2000008c

08001614 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e00a      	b.n	800163c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001626:	f3af 8000 	nop.w
 800162a:	4601      	mov	r1, r0
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	60ba      	str	r2, [r7, #8]
 8001632:	b2ca      	uxtb	r2, r1
 8001634:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	429a      	cmp	r2, r3
 8001642:	dbf0      	blt.n	8001626 <_read+0x12>
	}

return len;
 8001644:	687b      	ldr	r3, [r7, #4]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	e009      	b.n	8001674 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf1      	blt.n	8001660 <_write+0x12>
	}
	return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_close>:

int _close(int file)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
	return -1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ae:	605a      	str	r2, [r3, #4]
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_isatty>:

int _isatty(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	return 1;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <_sbrk+0x5c>)
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <_sbrk+0x60>)
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <_sbrk+0x64>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <_sbrk+0x68>)
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001720:	f001 fcc0 	bl	80030a4 <__errno>
 8001724:	4603      	mov	r3, r0
 8001726:	220c      	movs	r2, #12
 8001728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e009      	b.n	8001744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <_sbrk+0x64>)
 8001740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001742:	68fb      	ldr	r3, [r7, #12]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20050000 	.word	0x20050000
 8001750:	00000400 	.word	0x00000400
 8001754:	200000dc 	.word	0x200000dc
 8001758:	200000f8 	.word	0x200000f8

0800175c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001786:	490e      	ldr	r1, [pc, #56]	; (80017c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001788:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800178c:	e002      	b.n	8001794 <LoopCopyDataInit>

0800178e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001792:	3304      	adds	r3, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001798:	d3f9      	bcc.n	800178e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800179c:	4c0b      	ldr	r4, [pc, #44]	; (80017cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a0:	e001      	b.n	80017a6 <LoopFillZerobss>

080017a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a4:	3204      	adds	r2, #4

080017a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a8:	d3fb      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017aa:	f7ff ffd7 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ae:	f001 fc7f 	bl	80030b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b2:	f7ff fd89 	bl	80012c8 <main>
  bx  lr    
 80017b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017c4:	080040fc 	.word	0x080040fc
  ldr r2, =_sbss
 80017c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017cc:	200000f4 	.word	0x200000f4

080017d0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <CAN1_RX0_IRQHandler>

080017d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d6:	2003      	movs	r0, #3
 80017d8:	f000 fdd0 	bl	800237c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 f805 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e2:	f7ff febf 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_InitTick+0x54>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_InitTick+0x58>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	fbb3 f3f1 	udiv	r3, r3, r1
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fdeb 	bl	80023e6 <HAL_SYSTICK_Config>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e00e      	b.n	8001838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d80a      	bhi.n	8001836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001820:	2200      	movs	r2, #0
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f000 fdb3 	bl	8002392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <HAL_InitTick+0x5c>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e000      	b.n	8001838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000000 	.word	0x20000000
 8001844:	20000008 	.word	0x20000008
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	200000e0 	.word	0x200000e0

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	200000e0 	.word	0x200000e0

0800188c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e031      	b.n	8001906 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fb7a 	bl	8000fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d116      	bne.n	80018f8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_ADC_Init+0x84>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	f043 0202 	orr.w	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fb7a 	bl	8001fd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f023 0303 	bic.w	r3, r3, #3
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	; 0x40
 80018f6:	e001      	b.n	80018fc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	ffffeefd 	.word	0xffffeefd

08001914 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_ADC_Start_IT+0x1a>
 800192a:	2302      	movs	r3, #2
 800192c:	e0b5      	b.n	8001a9a <HAL_ADC_Start_IT+0x186>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d018      	beq.n	8001976 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001954:	4b54      	ldr	r3, [pc, #336]	; (8001aa8 <HAL_ADC_Start_IT+0x194>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a54      	ldr	r2, [pc, #336]	; (8001aac <HAL_ADC_Start_IT+0x198>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9a      	lsrs	r2, r3, #18
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001968:	e002      	b.n	8001970 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	3b01      	subs	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f9      	bne.n	800196a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d17d      	bne.n	8001a80 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <HAL_ADC_Start_IT+0x19c>)
 800198a:	4013      	ands	r3, r2
 800198c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019be:	d106      	bne.n	80019ce <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	f023 0206 	bic.w	r2, r3, #6
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019e4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <HAL_ADC_Start_IT+0x1a0>)
 80019f2:	430b      	orrs	r3, r1
 80019f4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <HAL_ADC_Start_IT+0x1a4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10f      	bne.n	8001a22 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d143      	bne.n	8001a98 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	e03a      	b.n	8001a98 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a25      	ldr	r2, [pc, #148]	; (8001abc <HAL_ADC_Start_IT+0x1a8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d10e      	bne.n	8001a4a <HAL_ADC_Start_IT+0x136>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d107      	bne.n	8001a4a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a48:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_ADC_Start_IT+0x1a4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d120      	bne.n	8001a98 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_ADC_Start_IT+0x1ac>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d11b      	bne.n	8001a98 <HAL_ADC_Start_IT+0x184>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d114      	bne.n	8001a98 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	e00b      	b.n	8001a98 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f043 0210 	orr.w	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	431bde83 	.word	0x431bde83
 8001ab0:	fffff8fe 	.word	0xfffff8fe
 8001ab4:	04000020 	.word	0x04000020
 8001ab8:	40012300 	.word	0x40012300
 8001abc:	40012000 	.word	0x40012000
 8001ac0:	40012200 	.word	0x40012200

08001ac4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d049      	beq.n	8001b8e <HAL_ADC_IRQHandler+0xca>
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d046      	beq.n	8001b8e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d12b      	bne.n	8001b7e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d127      	bne.n	8001b7e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0220 	bic.w	r2, r2, #32
 8001b58:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fcd4 	bl	800152c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0212 	mvn.w	r2, #18
 8001b8c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d057      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x190>
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d054      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d139      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d12b      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d124      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d11d      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d119      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fabf 	bl	80021c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f06f 020c 	mvn.w	r2, #12
 8001c52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c62:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d017      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x1d6>
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d014      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d10d      	bne.n	8001c9a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f837 	bl	8001cfe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0201 	mvn.w	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ca8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d015      	beq.n	8001cdc <HAL_ADC_IRQHandler+0x218>
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d012      	beq.n	8001cdc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f043 0202 	orr.w	r2, r3, #2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f06f 0220 	mvn.w	r2, #32
 8001cca:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f820 	bl	8001d12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f06f 0220 	mvn.w	r2, #32
 8001cda:	601a      	str	r2, [r3, #0]
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x1c>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e136      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x28a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d93a      	bls.n	8001dca <HAL_ADC_ConfigChannel+0xa2>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d5c:	d035      	beq.n	8001dca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68d9      	ldr	r1, [r3, #12]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	3b1e      	subs	r3, #30
 8001d74:	2207      	movs	r2, #7
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a8d      	ldr	r2, [pc, #564]	; (8001fc0 <HAL_ADC_ConfigChannel+0x298>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10a      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68d9      	ldr	r1, [r3, #12]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	061a      	lsls	r2, r3, #24
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da2:	e035      	b.n	8001e10 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68d9      	ldr	r1, [r3, #12]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4403      	add	r3, r0
 8001dbc:	3b1e      	subs	r3, #30
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dc8:	e022      	b.n	8001e10 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6919      	ldr	r1, [r3, #16]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	2207      	movs	r2, #7
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43da      	mvns	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	400a      	ands	r2, r1
 8001dec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6919      	ldr	r1, [r3, #16]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	4603      	mov	r3, r0
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4403      	add	r3, r0
 8001e06:	409a      	lsls	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b06      	cmp	r3, #6
 8001e16:	d824      	bhi.n	8001e62 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	3b05      	subs	r3, #5
 8001e2a:	221f      	movs	r2, #31
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43da      	mvns	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	400a      	ands	r2, r1
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b05      	subs	r3, #5
 8001e54:	fa00 f203 	lsl.w	r2, r0, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8001e60:	e04c      	b.n	8001efc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d824      	bhi.n	8001eb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b23      	subs	r3, #35	; 0x23
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	400a      	ands	r2, r1
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b23      	subs	r3, #35	; 0x23
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8001eb2:	e023      	b.n	8001efc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b41      	subs	r3, #65	; 0x41
 8001ec6:	221f      	movs	r2, #31
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43da      	mvns	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b41      	subs	r3, #65	; 0x41
 8001ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a30      	ldr	r2, [pc, #192]	; (8001fc4 <HAL_ADC_ConfigChannel+0x29c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10a      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1f4>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f0e:	d105      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f10:	4b2d      	ldr	r3, [pc, #180]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a2c      	ldr	r2, [pc, #176]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f16:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f1a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <HAL_ADC_ConfigChannel+0x29c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d10f      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x21e>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d10b      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f38:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f44:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_ADC_ConfigChannel+0x29c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d12b      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x280>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <HAL_ADC_ConfigChannel+0x298>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <HAL_ADC_ConfigChannel+0x23a>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b11      	cmp	r3, #17
 8001f60:	d122      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f6c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_ADC_ConfigChannel+0x298>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d111      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_ADC_ConfigChannel+0x2a4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0c9a      	lsrs	r2, r3, #18
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f9a:	e002      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f9      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	10000012 	.word	0x10000012
 8001fc4:	40012000 	.word	0x40012000
 8001fc8:	40012300 	.word	0x40012300
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001fdc:	4b78      	ldr	r3, [pc, #480]	; (80021c0 <ADC_Init+0x1ec>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a77      	ldr	r2, [pc, #476]	; (80021c0 <ADC_Init+0x1ec>)
 8001fe2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001fe6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001fe8:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <ADC_Init+0x1ec>)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4973      	ldr	r1, [pc, #460]	; (80021c0 <ADC_Init+0x1ec>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	021a      	lsls	r2, r3, #8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <ADC_Init+0x1f0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d022      	beq.n	80020ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e00f      	b.n	80020ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0202 	bic.w	r2, r2, #2
 80020dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6899      	ldr	r1, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	005a      	lsls	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800211a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	3b01      	subs	r3, #1
 8002128:	035a      	lsls	r2, r3, #13
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e007      	b.n	8002144 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	3b01      	subs	r3, #1
 8002160:	051a      	lsls	r2, r3, #20
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002186:	025a      	lsls	r2, r3, #9
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6899      	ldr	r1, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	029a      	lsls	r2, r3, #10
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40012300 	.word	0x40012300
 80021c4:	0f000001 	.word	0x0f000001

080021c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <__NVIC_SetPriorityGrouping+0x40>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	4313      	orrs	r3, r2
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	; (800221c <__NVIC_SetPriorityGrouping+0x40>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00
 8002220:	05fa0000 	.word	0x05fa0000

08002224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002228:	4b04      	ldr	r3, [pc, #16]	; (800223c <__NVIC_GetPriorityGrouping+0x18>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0307 	and.w	r3, r3, #7
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	2b00      	cmp	r3, #0
 8002250:	db0b      	blt.n	800226a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4907      	ldr	r1, [pc, #28]	; (8002278 <__NVIC_EnableIRQ+0x38>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2001      	movs	r0, #1
 8002262:	fa00 f202 	lsl.w	r2, r0, r2
 8002266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000e100 	.word	0xe000e100

0800227c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	2b00      	cmp	r3, #0
 800228e:	db0a      	blt.n	80022a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	b2da      	uxtb	r2, r3
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <__NVIC_SetPriority+0x4c>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	0112      	lsls	r2, r2, #4
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	440b      	add	r3, r1
 80022a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a4:	e00a      	b.n	80022bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4908      	ldr	r1, [pc, #32]	; (80022cc <__NVIC_SetPriority+0x50>)
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	3b04      	subs	r3, #4
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	440b      	add	r3, r1
 80022ba:	761a      	strb	r2, [r3, #24]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000e100 	.word	0xe000e100
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f1c3 0307 	rsb	r3, r3, #7
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	bf28      	it	cs
 80022ee:	2304      	movcs	r3, #4
 80022f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3304      	adds	r3, #4
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d902      	bls.n	8002300 <NVIC_EncodePriority+0x30>
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3b03      	subs	r3, #3
 80022fe:	e000      	b.n	8002302 <NVIC_EncodePriority+0x32>
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	f04f 32ff 	mov.w	r2, #4294967295
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	401a      	ands	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa01 f303 	lsl.w	r3, r1, r3
 8002322:	43d9      	mvns	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	4313      	orrs	r3, r2
         );
}
 800232a:	4618      	mov	r0, r3
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002348:	d301      	bcc.n	800234e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234a:	2301      	movs	r3, #1
 800234c:	e00f      	b.n	800236e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <SysTick_Config+0x40>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002356:	210f      	movs	r1, #15
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f7ff ff8e 	bl	800227c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <SysTick_Config+0x40>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <SysTick_Config+0x40>)
 8002368:	2207      	movs	r2, #7
 800236a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	e000e010 	.word	0xe000e010

0800237c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff29 	bl	80021dc <__NVIC_SetPriorityGrouping>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a4:	f7ff ff3e 	bl	8002224 <__NVIC_GetPriorityGrouping>
 80023a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff ff8e 	bl	80022d0 <NVIC_EncodePriority>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff5d 	bl	800227c <__NVIC_SetPriority>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff31 	bl	8002240 <__NVIC_EnableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e175      	b.n	800270c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8164 	bne.w	8002706 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x56>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80be 	beq.w	8002706 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	4b66      	ldr	r3, [pc, #408]	; (8002724 <HAL_GPIO_Init+0x324>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	4a65      	ldr	r2, [pc, #404]	; (8002724 <HAL_GPIO_Init+0x324>)
 8002590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002594:	6453      	str	r3, [r2, #68]	; 0x44
 8002596:	4b63      	ldr	r3, [pc, #396]	; (8002724 <HAL_GPIO_Init+0x324>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025a2:	4a61      	ldr	r2, [pc, #388]	; (8002728 <HAL_GPIO_Init+0x328>)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	3302      	adds	r3, #2
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	220f      	movs	r2, #15
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_GPIO_Init+0x32c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d037      	beq.n	800263e <HAL_GPIO_Init+0x23e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_GPIO_Init+0x330>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d031      	beq.n	800263a <HAL_GPIO_Init+0x23a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_GPIO_Init+0x334>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d02b      	beq.n	8002636 <HAL_GPIO_Init+0x236>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a55      	ldr	r2, [pc, #340]	; (8002738 <HAL_GPIO_Init+0x338>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d025      	beq.n	8002632 <HAL_GPIO_Init+0x232>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a54      	ldr	r2, [pc, #336]	; (800273c <HAL_GPIO_Init+0x33c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01f      	beq.n	800262e <HAL_GPIO_Init+0x22e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a53      	ldr	r2, [pc, #332]	; (8002740 <HAL_GPIO_Init+0x340>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d019      	beq.n	800262a <HAL_GPIO_Init+0x22a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_GPIO_Init+0x344>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0x226>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a51      	ldr	r2, [pc, #324]	; (8002748 <HAL_GPIO_Init+0x348>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00d      	beq.n	8002622 <HAL_GPIO_Init+0x222>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a50      	ldr	r2, [pc, #320]	; (800274c <HAL_GPIO_Init+0x34c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <HAL_GPIO_Init+0x21e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4f      	ldr	r2, [pc, #316]	; (8002750 <HAL_GPIO_Init+0x350>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_GPIO_Init+0x21a>
 8002616:	2309      	movs	r3, #9
 8002618:	e012      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800261a:	230a      	movs	r3, #10
 800261c:	e010      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800261e:	2308      	movs	r3, #8
 8002620:	e00e      	b.n	8002640 <HAL_GPIO_Init+0x240>
 8002622:	2307      	movs	r3, #7
 8002624:	e00c      	b.n	8002640 <HAL_GPIO_Init+0x240>
 8002626:	2306      	movs	r3, #6
 8002628:	e00a      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800262a:	2305      	movs	r3, #5
 800262c:	e008      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800262e:	2304      	movs	r3, #4
 8002630:	e006      	b.n	8002640 <HAL_GPIO_Init+0x240>
 8002632:	2303      	movs	r3, #3
 8002634:	e004      	b.n	8002640 <HAL_GPIO_Init+0x240>
 8002636:	2302      	movs	r3, #2
 8002638:	e002      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <HAL_GPIO_Init+0x240>
 800263e:	2300      	movs	r3, #0
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f002 0203 	and.w	r2, r2, #3
 8002646:	0092      	lsls	r2, r2, #2
 8002648:	4093      	lsls	r3, r2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002650:	4935      	ldr	r1, [pc, #212]	; (8002728 <HAL_GPIO_Init+0x328>)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <HAL_GPIO_Init+0x354>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a34      	ldr	r2, [pc, #208]	; (8002754 <HAL_GPIO_Init+0x354>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b32      	ldr	r3, [pc, #200]	; (8002754 <HAL_GPIO_Init+0x354>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a29      	ldr	r2, [pc, #164]	; (8002754 <HAL_GPIO_Init+0x354>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b2:	4b28      	ldr	r3, [pc, #160]	; (8002754 <HAL_GPIO_Init+0x354>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_GPIO_Init+0x354>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_GPIO_Init+0x354>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002700:	4a14      	ldr	r2, [pc, #80]	; (8002754 <HAL_GPIO_Init+0x354>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3301      	adds	r3, #1
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b0f      	cmp	r3, #15
 8002710:	f67f ae86 	bls.w	8002420 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40013800 	.word	0x40013800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400
 8002734:	40020800 	.word	0x40020800
 8002738:	40020c00 	.word	0x40020c00
 800273c:	40021000 	.word	0x40021000
 8002740:	40021400 	.word	0x40021400
 8002744:	40021800 	.word	0x40021800
 8002748:	40021c00 	.word	0x40021c00
 800274c:	40022000 	.word	0x40022000
 8002750:	40022400 	.word	0x40022400
 8002754:	40013c00 	.word	0x40013c00

08002758 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800277a:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002786:	f7ff f875 	bl	8001874 <HAL_GetTick>
 800278a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800278c:	e009      	b.n	80027a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800278e:	f7ff f871 	bl	8001874 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800279c:	d901      	bls.n	80027a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e022      	b.n	80027e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ae:	d1ee      	bne.n	800278e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027bc:	f7ff f85a 	bl	8001874 <HAL_GetTick>
 80027c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027c2:	e009      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027c4:	f7ff f856 	bl	8001874 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d2:	d901      	bls.n	80027d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e007      	b.n	80027e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e4:	d1ee      	bne.n	80027c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40007000 	.word	0x40007000

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e291      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8087 	beq.w	800292a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800281c:	4b96      	ldr	r3, [pc, #600]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b04      	cmp	r3, #4
 8002826:	d00c      	beq.n	8002842 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002828:	4b93      	ldr	r3, [pc, #588]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d112      	bne.n	800285a <HAL_RCC_OscConfig+0x62>
 8002834:	4b90      	ldr	r3, [pc, #576]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002840:	d10b      	bne.n	800285a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002842:	4b8d      	ldr	r3, [pc, #564]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d06c      	beq.n	8002928 <HAL_RCC_OscConfig+0x130>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d168      	bne.n	8002928 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e26b      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x7a>
 8002864:	4b84      	ldr	r3, [pc, #528]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a83      	ldr	r2, [pc, #524]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e02e      	b.n	80028d0 <HAL_RCC_OscConfig+0xd8>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x9c>
 800287a:	4b7f      	ldr	r3, [pc, #508]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7e      	ldr	r2, [pc, #504]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b7c      	ldr	r3, [pc, #496]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7b      	ldr	r2, [pc, #492]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 800288c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e01d      	b.n	80028d0 <HAL_RCC_OscConfig+0xd8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0xc0>
 800289e:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a75      	ldr	r2, [pc, #468]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a72      	ldr	r2, [pc, #456]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0xd8>
 80028b8:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6e      	ldr	r2, [pc, #440]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80028be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b6c      	ldr	r3, [pc, #432]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a6b      	ldr	r2, [pc, #428]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80028ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe ffcc 	bl	8001874 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e0:	f7fe ffc8 	bl	8001874 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	; 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e21f      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0xe8>
 80028fe:	e014      	b.n	800292a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe ffb8 	bl	8001874 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7fe ffb4 	bl	8001874 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e20b      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	4b57      	ldr	r3, [pc, #348]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x110>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d069      	beq.n	8002a0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002936:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b4d      	ldr	r3, [pc, #308]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b08      	cmp	r3, #8
 800294c:	d11c      	bne.n	8002988 <HAL_RCC_OscConfig+0x190>
 800294e:	4b4a      	ldr	r3, [pc, #296]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d116      	bne.n	8002988 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x17a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1df      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	493d      	ldr	r1, [pc, #244]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	e040      	b.n	8002a0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d023      	beq.n	80029d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002990:	4b39      	ldr	r3, [pc, #228]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a38      	ldr	r2, [pc, #224]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe ff6a 	bl	8001874 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe ff66 	bl	8001874 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1bd      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c2:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4929      	ldr	r1, [pc, #164]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
 80029d6:	e018      	b.n	8002a0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe ff46 	bl	8001874 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7fe ff42 	bl	8001874 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e199      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d038      	beq.n	8002a88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d019      	beq.n	8002a52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2a:	f7fe ff23 	bl	8001874 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a32:	f7fe ff1f 	bl	8001874 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e176      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x23a>
 8002a50:	e01a      	b.n	8002a88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a56:	4a08      	ldr	r2, [pc, #32]	; (8002a78 <HAL_RCC_OscConfig+0x280>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5e:	f7fe ff09 	bl	8001874 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a66:	f7fe ff05 	bl	8001874 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d903      	bls.n	8002a7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e15c      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
 8002a78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	4b91      	ldr	r3, [pc, #580]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ee      	bne.n	8002a66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80a4 	beq.w	8002bde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b8b      	ldr	r3, [pc, #556]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	4b88      	ldr	r3, [pc, #544]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a87      	ldr	r2, [pc, #540]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b85      	ldr	r3, [pc, #532]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abe:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002aca:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x4d0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7e      	ldr	r2, [pc, #504]	; (8002cc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fecd 	bl	8001874 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe fec9 	bl	8001874 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b64      	cmp	r3, #100	; 0x64
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e120      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af0:	4b75      	ldr	r3, [pc, #468]	; (8002cc8 <HAL_RCC_OscConfig+0x4d0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x31a>
 8002b04:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	e02d      	b.n	8002b6e <HAL_RCC_OscConfig+0x376>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x33c>
 8002b1a:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a66      	ldr	r2, [pc, #408]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	e01c      	b.n	8002b6e <HAL_RCC_OscConfig+0x376>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x35e>
 8002b3c:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	4a60      	ldr	r2, [pc, #384]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6713      	str	r3, [r2, #112]	; 0x70
 8002b48:	4b5e      	ldr	r3, [pc, #376]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	4a5d      	ldr	r2, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6713      	str	r3, [r2, #112]	; 0x70
 8002b54:	e00b      	b.n	8002b6e <HAL_RCC_OscConfig+0x376>
 8002b56:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a5a      	ldr	r2, [pc, #360]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
 8002b62:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d015      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	f7fe fe7d 	bl	8001874 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe fe79 	bl	8001874 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0ce      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	4b4b      	ldr	r3, [pc, #300]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RCC_OscConfig+0x386>
 8002ba0:	e014      	b.n	8002bcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fe67 	bl	8001874 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fe63 	bl	8001874 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0b8      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ee      	bne.n	8002baa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b3c      	ldr	r3, [pc, #240]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 80a4 	beq.w	8002d30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be8:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d06b      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d149      	bne.n	8002c90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfc:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a30      	ldr	r2, [pc, #192]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fe34 	bl	8001874 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe fe30 	bl	8001874 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e087      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c22:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	019b      	lsls	r3, r3, #6
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	3b01      	subs	r3, #1
 8002c48:	041b      	lsls	r3, r3, #16
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	4313      	orrs	r3, r2
 8002c54:	4a1b      	ldr	r2, [pc, #108]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fe04 	bl	8001874 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe fe00 	bl	8001874 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e057      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x478>
 8002c8e:	e04f      	b.n	8002d30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c90:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fdea 	bl	8001874 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe fde6 	bl	8001874 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e03d      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb6:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4ac>
 8002cc2:	e035      	b.n	8002d30 <HAL_RCC_OscConfig+0x538>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x544>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d028      	beq.n	8002d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d121      	bne.n	8002d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d11a      	bne.n	8002d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d111      	bne.n	8002d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	3b01      	subs	r3, #1
 8002d16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0d0      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d910      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b67      	ldr	r3, [pc, #412]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 020f 	bic.w	r2, r3, #15
 8002d6e:	4965      	ldr	r1, [pc, #404]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b8      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a58      	ldr	r2, [pc, #352]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002daa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc4:	4b50      	ldr	r3, [pc, #320]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	494d      	ldr	r1, [pc, #308]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d040      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d115      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e07f      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e02:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e073      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e06b      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 0203 	bic.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4936      	ldr	r1, [pc, #216]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e34:	f7fe fd1e 	bl	8001874 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7fe fd1a 	bl	8001874 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e053      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 020c 	and.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1eb      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d210      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 020f 	bic.w	r2, r3, #15
 8002e7a:	4922      	ldr	r1, [pc, #136]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e032      	b.n	8002efa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea0:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4916      	ldr	r1, [pc, #88]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d009      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	490e      	ldr	r1, [pc, #56]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ed2:	f000 f821 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	490a      	ldr	r1, [pc, #40]	; (8002f0c <HAL_RCC_ClockConfig+0x1cc>)
 8002ee4:	5ccb      	ldrb	r3, [r1, r3]
 8002ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eea:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <HAL_RCC_ClockConfig+0x1d0>)
 8002eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1d4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fc7a 	bl	80017ec <HAL_InitTick>

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	08004044 	.word	0x08004044
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000004 	.word	0x20000004

08002f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1c:	b090      	sub	sp, #64	; 0x40
 8002f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
 8002f24:	2300      	movs	r3, #0
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f28:	2300      	movs	r3, #0
 8002f2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f30:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d00d      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x40>
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	f200 80a1 	bhi.w	8003084 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x34>
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f4a:	e09b      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_GetSysClockFreq+0x184>)
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f50:	e09b      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f52:	4b53      	ldr	r3, [pc, #332]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f56:	e098      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f62:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d028      	beq.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6e:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	2200      	movs	r2, #0
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	627a      	str	r2, [r7, #36]	; 0x24
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f80:	2100      	movs	r1, #0
 8002f82:	4b47      	ldr	r3, [pc, #284]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f84:	fb03 f201 	mul.w	r2, r3, r1
 8002f88:	2300      	movs	r3, #0
 8002f8a:	fb00 f303 	mul.w	r3, r0, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a43      	ldr	r2, [pc, #268]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f92:	fba0 1202 	umull	r1, r2, r0, r2
 8002f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f98:	460a      	mov	r2, r1
 8002f9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9e:	4413      	add	r3, r2
 8002fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	61fa      	str	r2, [r7, #28]
 8002faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fb2:	f7fd fe23 	bl	8000bfc <__aeabi_uldivmod>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4613      	mov	r3, r2
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fbe:	e053      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	099b      	lsrs	r3, r3, #6
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	617a      	str	r2, [r7, #20]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002fd2:	f04f 0b00 	mov.w	fp, #0
 8002fd6:	4652      	mov	r2, sl
 8002fd8:	465b      	mov	r3, fp
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe8:	0150      	lsls	r0, r2, #5
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	ebb2 080a 	subs.w	r8, r2, sl
 8002ff2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003002:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003006:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800300a:	ebb2 0408 	subs.w	r4, r2, r8
 800300e:	eb63 0509 	sbc.w	r5, r3, r9
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	00eb      	lsls	r3, r5, #3
 800301c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003020:	00e2      	lsls	r2, r4, #3
 8003022:	4614      	mov	r4, r2
 8003024:	461d      	mov	r5, r3
 8003026:	eb14 030a 	adds.w	r3, r4, sl
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	eb45 030b 	adc.w	r3, r5, fp
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800303e:	4629      	mov	r1, r5
 8003040:	028b      	lsls	r3, r1, #10
 8003042:	4621      	mov	r1, r4
 8003044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003048:	4621      	mov	r1, r4
 800304a:	028a      	lsls	r2, r1, #10
 800304c:	4610      	mov	r0, r2
 800304e:	4619      	mov	r1, r3
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	2200      	movs	r2, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	60fa      	str	r2, [r7, #12]
 8003058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800305c:	f7fd fdce 	bl	8000bfc <__aeabi_uldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4613      	mov	r3, r2
 8003066:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_GetSysClockFreq+0x180>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	3301      	adds	r3, #1
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003082:	e002      	b.n	800308a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetSysClockFreq+0x184>)
 8003086:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800308c:	4618      	mov	r0, r3
 800308e:	3740      	adds	r7, #64	; 0x40
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	017d7840 	.word	0x017d7840

080030a4 <__errno>:
 80030a4:	4b01      	ldr	r3, [pc, #4]	; (80030ac <__errno+0x8>)
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	2000000c 	.word	0x2000000c

080030b0 <__libc_init_array>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	4d0d      	ldr	r5, [pc, #52]	; (80030e8 <__libc_init_array+0x38>)
 80030b4:	4c0d      	ldr	r4, [pc, #52]	; (80030ec <__libc_init_array+0x3c>)
 80030b6:	1b64      	subs	r4, r4, r5
 80030b8:	10a4      	asrs	r4, r4, #2
 80030ba:	2600      	movs	r6, #0
 80030bc:	42a6      	cmp	r6, r4
 80030be:	d109      	bne.n	80030d4 <__libc_init_array+0x24>
 80030c0:	4d0b      	ldr	r5, [pc, #44]	; (80030f0 <__libc_init_array+0x40>)
 80030c2:	4c0c      	ldr	r4, [pc, #48]	; (80030f4 <__libc_init_array+0x44>)
 80030c4:	f000 ffae 	bl	8004024 <_init>
 80030c8:	1b64      	subs	r4, r4, r5
 80030ca:	10a4      	asrs	r4, r4, #2
 80030cc:	2600      	movs	r6, #0
 80030ce:	42a6      	cmp	r6, r4
 80030d0:	d105      	bne.n	80030de <__libc_init_array+0x2e>
 80030d2:	bd70      	pop	{r4, r5, r6, pc}
 80030d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d8:	4798      	blx	r3
 80030da:	3601      	adds	r6, #1
 80030dc:	e7ee      	b.n	80030bc <__libc_init_array+0xc>
 80030de:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e2:	4798      	blx	r3
 80030e4:	3601      	adds	r6, #1
 80030e6:	e7f2      	b.n	80030ce <__libc_init_array+0x1e>
 80030e8:	080040f4 	.word	0x080040f4
 80030ec:	080040f4 	.word	0x080040f4
 80030f0:	080040f4 	.word	0x080040f4
 80030f4:	080040f8 	.word	0x080040f8

080030f8 <memset>:
 80030f8:	4402      	add	r2, r0
 80030fa:	4603      	mov	r3, r0
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d100      	bne.n	8003102 <memset+0xa>
 8003100:	4770      	bx	lr
 8003102:	f803 1b01 	strb.w	r1, [r3], #1
 8003106:	e7f9      	b.n	80030fc <memset+0x4>

08003108 <iprintf>:
 8003108:	b40f      	push	{r0, r1, r2, r3}
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <iprintf+0x2c>)
 800310c:	b513      	push	{r0, r1, r4, lr}
 800310e:	681c      	ldr	r4, [r3, #0]
 8003110:	b124      	cbz	r4, 800311c <iprintf+0x14>
 8003112:	69a3      	ldr	r3, [r4, #24]
 8003114:	b913      	cbnz	r3, 800311c <iprintf+0x14>
 8003116:	4620      	mov	r0, r4
 8003118:	f000 f866 	bl	80031e8 <__sinit>
 800311c:	ab05      	add	r3, sp, #20
 800311e:	9a04      	ldr	r2, [sp, #16]
 8003120:	68a1      	ldr	r1, [r4, #8]
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	4620      	mov	r0, r4
 8003126:	f000 f9bd 	bl	80034a4 <_vfiprintf_r>
 800312a:	b002      	add	sp, #8
 800312c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003130:	b004      	add	sp, #16
 8003132:	4770      	bx	lr
 8003134:	2000000c 	.word	0x2000000c

08003138 <std>:
 8003138:	2300      	movs	r3, #0
 800313a:	b510      	push	{r4, lr}
 800313c:	4604      	mov	r4, r0
 800313e:	e9c0 3300 	strd	r3, r3, [r0]
 8003142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003146:	6083      	str	r3, [r0, #8]
 8003148:	8181      	strh	r1, [r0, #12]
 800314a:	6643      	str	r3, [r0, #100]	; 0x64
 800314c:	81c2      	strh	r2, [r0, #14]
 800314e:	6183      	str	r3, [r0, #24]
 8003150:	4619      	mov	r1, r3
 8003152:	2208      	movs	r2, #8
 8003154:	305c      	adds	r0, #92	; 0x5c
 8003156:	f7ff ffcf 	bl	80030f8 <memset>
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <std+0x38>)
 800315c:	6263      	str	r3, [r4, #36]	; 0x24
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <std+0x3c>)
 8003160:	62a3      	str	r3, [r4, #40]	; 0x28
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <std+0x40>)
 8003164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <std+0x44>)
 8003168:	6224      	str	r4, [r4, #32]
 800316a:	6323      	str	r3, [r4, #48]	; 0x30
 800316c:	bd10      	pop	{r4, pc}
 800316e:	bf00      	nop
 8003170:	08003a4d 	.word	0x08003a4d
 8003174:	08003a6f 	.word	0x08003a6f
 8003178:	08003aa7 	.word	0x08003aa7
 800317c:	08003acb 	.word	0x08003acb

08003180 <_cleanup_r>:
 8003180:	4901      	ldr	r1, [pc, #4]	; (8003188 <_cleanup_r+0x8>)
 8003182:	f000 b8af 	b.w	80032e4 <_fwalk_reent>
 8003186:	bf00      	nop
 8003188:	08003da5 	.word	0x08003da5

0800318c <__sfmoreglue>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	2268      	movs	r2, #104	; 0x68
 8003190:	1e4d      	subs	r5, r1, #1
 8003192:	4355      	muls	r5, r2
 8003194:	460e      	mov	r6, r1
 8003196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800319a:	f000 f8e5 	bl	8003368 <_malloc_r>
 800319e:	4604      	mov	r4, r0
 80031a0:	b140      	cbz	r0, 80031b4 <__sfmoreglue+0x28>
 80031a2:	2100      	movs	r1, #0
 80031a4:	e9c0 1600 	strd	r1, r6, [r0]
 80031a8:	300c      	adds	r0, #12
 80031aa:	60a0      	str	r0, [r4, #8]
 80031ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80031b0:	f7ff ffa2 	bl	80030f8 <memset>
 80031b4:	4620      	mov	r0, r4
 80031b6:	bd70      	pop	{r4, r5, r6, pc}

080031b8 <__sfp_lock_acquire>:
 80031b8:	4801      	ldr	r0, [pc, #4]	; (80031c0 <__sfp_lock_acquire+0x8>)
 80031ba:	f000 b8b3 	b.w	8003324 <__retarget_lock_acquire_recursive>
 80031be:	bf00      	nop
 80031c0:	200000e5 	.word	0x200000e5

080031c4 <__sfp_lock_release>:
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <__sfp_lock_release+0x8>)
 80031c6:	f000 b8ae 	b.w	8003326 <__retarget_lock_release_recursive>
 80031ca:	bf00      	nop
 80031cc:	200000e5 	.word	0x200000e5

080031d0 <__sinit_lock_acquire>:
 80031d0:	4801      	ldr	r0, [pc, #4]	; (80031d8 <__sinit_lock_acquire+0x8>)
 80031d2:	f000 b8a7 	b.w	8003324 <__retarget_lock_acquire_recursive>
 80031d6:	bf00      	nop
 80031d8:	200000e6 	.word	0x200000e6

080031dc <__sinit_lock_release>:
 80031dc:	4801      	ldr	r0, [pc, #4]	; (80031e4 <__sinit_lock_release+0x8>)
 80031de:	f000 b8a2 	b.w	8003326 <__retarget_lock_release_recursive>
 80031e2:	bf00      	nop
 80031e4:	200000e6 	.word	0x200000e6

080031e8 <__sinit>:
 80031e8:	b510      	push	{r4, lr}
 80031ea:	4604      	mov	r4, r0
 80031ec:	f7ff fff0 	bl	80031d0 <__sinit_lock_acquire>
 80031f0:	69a3      	ldr	r3, [r4, #24]
 80031f2:	b11b      	cbz	r3, 80031fc <__sinit+0x14>
 80031f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f8:	f7ff bff0 	b.w	80031dc <__sinit_lock_release>
 80031fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003200:	6523      	str	r3, [r4, #80]	; 0x50
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <__sinit+0x68>)
 8003204:	4a13      	ldr	r2, [pc, #76]	; (8003254 <__sinit+0x6c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	62a2      	str	r2, [r4, #40]	; 0x28
 800320a:	42a3      	cmp	r3, r4
 800320c:	bf04      	itt	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	61a3      	streq	r3, [r4, #24]
 8003212:	4620      	mov	r0, r4
 8003214:	f000 f820 	bl	8003258 <__sfp>
 8003218:	6060      	str	r0, [r4, #4]
 800321a:	4620      	mov	r0, r4
 800321c:	f000 f81c 	bl	8003258 <__sfp>
 8003220:	60a0      	str	r0, [r4, #8]
 8003222:	4620      	mov	r0, r4
 8003224:	f000 f818 	bl	8003258 <__sfp>
 8003228:	2200      	movs	r2, #0
 800322a:	60e0      	str	r0, [r4, #12]
 800322c:	2104      	movs	r1, #4
 800322e:	6860      	ldr	r0, [r4, #4]
 8003230:	f7ff ff82 	bl	8003138 <std>
 8003234:	68a0      	ldr	r0, [r4, #8]
 8003236:	2201      	movs	r2, #1
 8003238:	2109      	movs	r1, #9
 800323a:	f7ff ff7d 	bl	8003138 <std>
 800323e:	68e0      	ldr	r0, [r4, #12]
 8003240:	2202      	movs	r2, #2
 8003242:	2112      	movs	r1, #18
 8003244:	f7ff ff78 	bl	8003138 <std>
 8003248:	2301      	movs	r3, #1
 800324a:	61a3      	str	r3, [r4, #24]
 800324c:	e7d2      	b.n	80031f4 <__sinit+0xc>
 800324e:	bf00      	nop
 8003250:	08004054 	.word	0x08004054
 8003254:	08003181 	.word	0x08003181

08003258 <__sfp>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	4607      	mov	r7, r0
 800325c:	f7ff ffac 	bl	80031b8 <__sfp_lock_acquire>
 8003260:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <__sfp+0x84>)
 8003262:	681e      	ldr	r6, [r3, #0]
 8003264:	69b3      	ldr	r3, [r6, #24]
 8003266:	b913      	cbnz	r3, 800326e <__sfp+0x16>
 8003268:	4630      	mov	r0, r6
 800326a:	f7ff ffbd 	bl	80031e8 <__sinit>
 800326e:	3648      	adds	r6, #72	; 0x48
 8003270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003274:	3b01      	subs	r3, #1
 8003276:	d503      	bpl.n	8003280 <__sfp+0x28>
 8003278:	6833      	ldr	r3, [r6, #0]
 800327a:	b30b      	cbz	r3, 80032c0 <__sfp+0x68>
 800327c:	6836      	ldr	r6, [r6, #0]
 800327e:	e7f7      	b.n	8003270 <__sfp+0x18>
 8003280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003284:	b9d5      	cbnz	r5, 80032bc <__sfp+0x64>
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <__sfp+0x88>)
 8003288:	60e3      	str	r3, [r4, #12]
 800328a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800328e:	6665      	str	r5, [r4, #100]	; 0x64
 8003290:	f000 f847 	bl	8003322 <__retarget_lock_init_recursive>
 8003294:	f7ff ff96 	bl	80031c4 <__sfp_lock_release>
 8003298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800329c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80032a0:	6025      	str	r5, [r4, #0]
 80032a2:	61a5      	str	r5, [r4, #24]
 80032a4:	2208      	movs	r2, #8
 80032a6:	4629      	mov	r1, r5
 80032a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80032ac:	f7ff ff24 	bl	80030f8 <memset>
 80032b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80032b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80032b8:	4620      	mov	r0, r4
 80032ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032bc:	3468      	adds	r4, #104	; 0x68
 80032be:	e7d9      	b.n	8003274 <__sfp+0x1c>
 80032c0:	2104      	movs	r1, #4
 80032c2:	4638      	mov	r0, r7
 80032c4:	f7ff ff62 	bl	800318c <__sfmoreglue>
 80032c8:	4604      	mov	r4, r0
 80032ca:	6030      	str	r0, [r6, #0]
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d1d5      	bne.n	800327c <__sfp+0x24>
 80032d0:	f7ff ff78 	bl	80031c4 <__sfp_lock_release>
 80032d4:	230c      	movs	r3, #12
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	e7ee      	b.n	80032b8 <__sfp+0x60>
 80032da:	bf00      	nop
 80032dc:	08004054 	.word	0x08004054
 80032e0:	ffff0001 	.word	0xffff0001

080032e4 <_fwalk_reent>:
 80032e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032e8:	4606      	mov	r6, r0
 80032ea:	4688      	mov	r8, r1
 80032ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80032f0:	2700      	movs	r7, #0
 80032f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032f6:	f1b9 0901 	subs.w	r9, r9, #1
 80032fa:	d505      	bpl.n	8003308 <_fwalk_reent+0x24>
 80032fc:	6824      	ldr	r4, [r4, #0]
 80032fe:	2c00      	cmp	r4, #0
 8003300:	d1f7      	bne.n	80032f2 <_fwalk_reent+0xe>
 8003302:	4638      	mov	r0, r7
 8003304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003308:	89ab      	ldrh	r3, [r5, #12]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d907      	bls.n	800331e <_fwalk_reent+0x3a>
 800330e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003312:	3301      	adds	r3, #1
 8003314:	d003      	beq.n	800331e <_fwalk_reent+0x3a>
 8003316:	4629      	mov	r1, r5
 8003318:	4630      	mov	r0, r6
 800331a:	47c0      	blx	r8
 800331c:	4307      	orrs	r7, r0
 800331e:	3568      	adds	r5, #104	; 0x68
 8003320:	e7e9      	b.n	80032f6 <_fwalk_reent+0x12>

08003322 <__retarget_lock_init_recursive>:
 8003322:	4770      	bx	lr

08003324 <__retarget_lock_acquire_recursive>:
 8003324:	4770      	bx	lr

08003326 <__retarget_lock_release_recursive>:
 8003326:	4770      	bx	lr

08003328 <sbrk_aligned>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	4e0e      	ldr	r6, [pc, #56]	; (8003364 <sbrk_aligned+0x3c>)
 800332c:	460c      	mov	r4, r1
 800332e:	6831      	ldr	r1, [r6, #0]
 8003330:	4605      	mov	r5, r0
 8003332:	b911      	cbnz	r1, 800333a <sbrk_aligned+0x12>
 8003334:	f000 fb7a 	bl	8003a2c <_sbrk_r>
 8003338:	6030      	str	r0, [r6, #0]
 800333a:	4621      	mov	r1, r4
 800333c:	4628      	mov	r0, r5
 800333e:	f000 fb75 	bl	8003a2c <_sbrk_r>
 8003342:	1c43      	adds	r3, r0, #1
 8003344:	d00a      	beq.n	800335c <sbrk_aligned+0x34>
 8003346:	1cc4      	adds	r4, r0, #3
 8003348:	f024 0403 	bic.w	r4, r4, #3
 800334c:	42a0      	cmp	r0, r4
 800334e:	d007      	beq.n	8003360 <sbrk_aligned+0x38>
 8003350:	1a21      	subs	r1, r4, r0
 8003352:	4628      	mov	r0, r5
 8003354:	f000 fb6a 	bl	8003a2c <_sbrk_r>
 8003358:	3001      	adds	r0, #1
 800335a:	d101      	bne.n	8003360 <sbrk_aligned+0x38>
 800335c:	f04f 34ff 	mov.w	r4, #4294967295
 8003360:	4620      	mov	r0, r4
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	200000ec 	.word	0x200000ec

08003368 <_malloc_r>:
 8003368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336c:	1ccd      	adds	r5, r1, #3
 800336e:	f025 0503 	bic.w	r5, r5, #3
 8003372:	3508      	adds	r5, #8
 8003374:	2d0c      	cmp	r5, #12
 8003376:	bf38      	it	cc
 8003378:	250c      	movcc	r5, #12
 800337a:	2d00      	cmp	r5, #0
 800337c:	4607      	mov	r7, r0
 800337e:	db01      	blt.n	8003384 <_malloc_r+0x1c>
 8003380:	42a9      	cmp	r1, r5
 8003382:	d905      	bls.n	8003390 <_malloc_r+0x28>
 8003384:	230c      	movs	r3, #12
 8003386:	603b      	str	r3, [r7, #0]
 8003388:	2600      	movs	r6, #0
 800338a:	4630      	mov	r0, r6
 800338c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003390:	4e2e      	ldr	r6, [pc, #184]	; (800344c <_malloc_r+0xe4>)
 8003392:	f000 fdbb 	bl	8003f0c <__malloc_lock>
 8003396:	6833      	ldr	r3, [r6, #0]
 8003398:	461c      	mov	r4, r3
 800339a:	bb34      	cbnz	r4, 80033ea <_malloc_r+0x82>
 800339c:	4629      	mov	r1, r5
 800339e:	4638      	mov	r0, r7
 80033a0:	f7ff ffc2 	bl	8003328 <sbrk_aligned>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	4604      	mov	r4, r0
 80033a8:	d14d      	bne.n	8003446 <_malloc_r+0xde>
 80033aa:	6834      	ldr	r4, [r6, #0]
 80033ac:	4626      	mov	r6, r4
 80033ae:	2e00      	cmp	r6, #0
 80033b0:	d140      	bne.n	8003434 <_malloc_r+0xcc>
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	4631      	mov	r1, r6
 80033b6:	4638      	mov	r0, r7
 80033b8:	eb04 0803 	add.w	r8, r4, r3
 80033bc:	f000 fb36 	bl	8003a2c <_sbrk_r>
 80033c0:	4580      	cmp	r8, r0
 80033c2:	d13a      	bne.n	800343a <_malloc_r+0xd2>
 80033c4:	6821      	ldr	r1, [r4, #0]
 80033c6:	3503      	adds	r5, #3
 80033c8:	1a6d      	subs	r5, r5, r1
 80033ca:	f025 0503 	bic.w	r5, r5, #3
 80033ce:	3508      	adds	r5, #8
 80033d0:	2d0c      	cmp	r5, #12
 80033d2:	bf38      	it	cc
 80033d4:	250c      	movcc	r5, #12
 80033d6:	4629      	mov	r1, r5
 80033d8:	4638      	mov	r0, r7
 80033da:	f7ff ffa5 	bl	8003328 <sbrk_aligned>
 80033de:	3001      	adds	r0, #1
 80033e0:	d02b      	beq.n	800343a <_malloc_r+0xd2>
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	442b      	add	r3, r5
 80033e6:	6023      	str	r3, [r4, #0]
 80033e8:	e00e      	b.n	8003408 <_malloc_r+0xa0>
 80033ea:	6822      	ldr	r2, [r4, #0]
 80033ec:	1b52      	subs	r2, r2, r5
 80033ee:	d41e      	bmi.n	800342e <_malloc_r+0xc6>
 80033f0:	2a0b      	cmp	r2, #11
 80033f2:	d916      	bls.n	8003422 <_malloc_r+0xba>
 80033f4:	1961      	adds	r1, r4, r5
 80033f6:	42a3      	cmp	r3, r4
 80033f8:	6025      	str	r5, [r4, #0]
 80033fa:	bf18      	it	ne
 80033fc:	6059      	strne	r1, [r3, #4]
 80033fe:	6863      	ldr	r3, [r4, #4]
 8003400:	bf08      	it	eq
 8003402:	6031      	streq	r1, [r6, #0]
 8003404:	5162      	str	r2, [r4, r5]
 8003406:	604b      	str	r3, [r1, #4]
 8003408:	4638      	mov	r0, r7
 800340a:	f104 060b 	add.w	r6, r4, #11
 800340e:	f000 fd83 	bl	8003f18 <__malloc_unlock>
 8003412:	f026 0607 	bic.w	r6, r6, #7
 8003416:	1d23      	adds	r3, r4, #4
 8003418:	1af2      	subs	r2, r6, r3
 800341a:	d0b6      	beq.n	800338a <_malloc_r+0x22>
 800341c:	1b9b      	subs	r3, r3, r6
 800341e:	50a3      	str	r3, [r4, r2]
 8003420:	e7b3      	b.n	800338a <_malloc_r+0x22>
 8003422:	6862      	ldr	r2, [r4, #4]
 8003424:	42a3      	cmp	r3, r4
 8003426:	bf0c      	ite	eq
 8003428:	6032      	streq	r2, [r6, #0]
 800342a:	605a      	strne	r2, [r3, #4]
 800342c:	e7ec      	b.n	8003408 <_malloc_r+0xa0>
 800342e:	4623      	mov	r3, r4
 8003430:	6864      	ldr	r4, [r4, #4]
 8003432:	e7b2      	b.n	800339a <_malloc_r+0x32>
 8003434:	4634      	mov	r4, r6
 8003436:	6876      	ldr	r6, [r6, #4]
 8003438:	e7b9      	b.n	80033ae <_malloc_r+0x46>
 800343a:	230c      	movs	r3, #12
 800343c:	603b      	str	r3, [r7, #0]
 800343e:	4638      	mov	r0, r7
 8003440:	f000 fd6a 	bl	8003f18 <__malloc_unlock>
 8003444:	e7a1      	b.n	800338a <_malloc_r+0x22>
 8003446:	6025      	str	r5, [r4, #0]
 8003448:	e7de      	b.n	8003408 <_malloc_r+0xa0>
 800344a:	bf00      	nop
 800344c:	200000e8 	.word	0x200000e8

08003450 <__sfputc_r>:
 8003450:	6893      	ldr	r3, [r2, #8]
 8003452:	3b01      	subs	r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	b410      	push	{r4}
 8003458:	6093      	str	r3, [r2, #8]
 800345a:	da08      	bge.n	800346e <__sfputc_r+0x1e>
 800345c:	6994      	ldr	r4, [r2, #24]
 800345e:	42a3      	cmp	r3, r4
 8003460:	db01      	blt.n	8003466 <__sfputc_r+0x16>
 8003462:	290a      	cmp	r1, #10
 8003464:	d103      	bne.n	800346e <__sfputc_r+0x1e>
 8003466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800346a:	f000 bb33 	b.w	8003ad4 <__swbuf_r>
 800346e:	6813      	ldr	r3, [r2, #0]
 8003470:	1c58      	adds	r0, r3, #1
 8003472:	6010      	str	r0, [r2, #0]
 8003474:	7019      	strb	r1, [r3, #0]
 8003476:	4608      	mov	r0, r1
 8003478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800347c:	4770      	bx	lr

0800347e <__sfputs_r>:
 800347e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003480:	4606      	mov	r6, r0
 8003482:	460f      	mov	r7, r1
 8003484:	4614      	mov	r4, r2
 8003486:	18d5      	adds	r5, r2, r3
 8003488:	42ac      	cmp	r4, r5
 800348a:	d101      	bne.n	8003490 <__sfputs_r+0x12>
 800348c:	2000      	movs	r0, #0
 800348e:	e007      	b.n	80034a0 <__sfputs_r+0x22>
 8003490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003494:	463a      	mov	r2, r7
 8003496:	4630      	mov	r0, r6
 8003498:	f7ff ffda 	bl	8003450 <__sfputc_r>
 800349c:	1c43      	adds	r3, r0, #1
 800349e:	d1f3      	bne.n	8003488 <__sfputs_r+0xa>
 80034a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034a4 <_vfiprintf_r>:
 80034a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a8:	460d      	mov	r5, r1
 80034aa:	b09d      	sub	sp, #116	; 0x74
 80034ac:	4614      	mov	r4, r2
 80034ae:	4698      	mov	r8, r3
 80034b0:	4606      	mov	r6, r0
 80034b2:	b118      	cbz	r0, 80034bc <_vfiprintf_r+0x18>
 80034b4:	6983      	ldr	r3, [r0, #24]
 80034b6:	b90b      	cbnz	r3, 80034bc <_vfiprintf_r+0x18>
 80034b8:	f7ff fe96 	bl	80031e8 <__sinit>
 80034bc:	4b89      	ldr	r3, [pc, #548]	; (80036e4 <_vfiprintf_r+0x240>)
 80034be:	429d      	cmp	r5, r3
 80034c0:	d11b      	bne.n	80034fa <_vfiprintf_r+0x56>
 80034c2:	6875      	ldr	r5, [r6, #4]
 80034c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034c6:	07d9      	lsls	r1, r3, #31
 80034c8:	d405      	bmi.n	80034d6 <_vfiprintf_r+0x32>
 80034ca:	89ab      	ldrh	r3, [r5, #12]
 80034cc:	059a      	lsls	r2, r3, #22
 80034ce:	d402      	bmi.n	80034d6 <_vfiprintf_r+0x32>
 80034d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034d2:	f7ff ff27 	bl	8003324 <__retarget_lock_acquire_recursive>
 80034d6:	89ab      	ldrh	r3, [r5, #12]
 80034d8:	071b      	lsls	r3, r3, #28
 80034da:	d501      	bpl.n	80034e0 <_vfiprintf_r+0x3c>
 80034dc:	692b      	ldr	r3, [r5, #16]
 80034de:	b9eb      	cbnz	r3, 800351c <_vfiprintf_r+0x78>
 80034e0:	4629      	mov	r1, r5
 80034e2:	4630      	mov	r0, r6
 80034e4:	f000 fb5a 	bl	8003b9c <__swsetup_r>
 80034e8:	b1c0      	cbz	r0, 800351c <_vfiprintf_r+0x78>
 80034ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034ec:	07dc      	lsls	r4, r3, #31
 80034ee:	d50e      	bpl.n	800350e <_vfiprintf_r+0x6a>
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	b01d      	add	sp, #116	; 0x74
 80034f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fa:	4b7b      	ldr	r3, [pc, #492]	; (80036e8 <_vfiprintf_r+0x244>)
 80034fc:	429d      	cmp	r5, r3
 80034fe:	d101      	bne.n	8003504 <_vfiprintf_r+0x60>
 8003500:	68b5      	ldr	r5, [r6, #8]
 8003502:	e7df      	b.n	80034c4 <_vfiprintf_r+0x20>
 8003504:	4b79      	ldr	r3, [pc, #484]	; (80036ec <_vfiprintf_r+0x248>)
 8003506:	429d      	cmp	r5, r3
 8003508:	bf08      	it	eq
 800350a:	68f5      	ldreq	r5, [r6, #12]
 800350c:	e7da      	b.n	80034c4 <_vfiprintf_r+0x20>
 800350e:	89ab      	ldrh	r3, [r5, #12]
 8003510:	0598      	lsls	r0, r3, #22
 8003512:	d4ed      	bmi.n	80034f0 <_vfiprintf_r+0x4c>
 8003514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003516:	f7ff ff06 	bl	8003326 <__retarget_lock_release_recursive>
 800351a:	e7e9      	b.n	80034f0 <_vfiprintf_r+0x4c>
 800351c:	2300      	movs	r3, #0
 800351e:	9309      	str	r3, [sp, #36]	; 0x24
 8003520:	2320      	movs	r3, #32
 8003522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003526:	f8cd 800c 	str.w	r8, [sp, #12]
 800352a:	2330      	movs	r3, #48	; 0x30
 800352c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80036f0 <_vfiprintf_r+0x24c>
 8003530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003534:	f04f 0901 	mov.w	r9, #1
 8003538:	4623      	mov	r3, r4
 800353a:	469a      	mov	sl, r3
 800353c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003540:	b10a      	cbz	r2, 8003546 <_vfiprintf_r+0xa2>
 8003542:	2a25      	cmp	r2, #37	; 0x25
 8003544:	d1f9      	bne.n	800353a <_vfiprintf_r+0x96>
 8003546:	ebba 0b04 	subs.w	fp, sl, r4
 800354a:	d00b      	beq.n	8003564 <_vfiprintf_r+0xc0>
 800354c:	465b      	mov	r3, fp
 800354e:	4622      	mov	r2, r4
 8003550:	4629      	mov	r1, r5
 8003552:	4630      	mov	r0, r6
 8003554:	f7ff ff93 	bl	800347e <__sfputs_r>
 8003558:	3001      	adds	r0, #1
 800355a:	f000 80aa 	beq.w	80036b2 <_vfiprintf_r+0x20e>
 800355e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003560:	445a      	add	r2, fp
 8003562:	9209      	str	r2, [sp, #36]	; 0x24
 8003564:	f89a 3000 	ldrb.w	r3, [sl]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80a2 	beq.w	80036b2 <_vfiprintf_r+0x20e>
 800356e:	2300      	movs	r3, #0
 8003570:	f04f 32ff 	mov.w	r2, #4294967295
 8003574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003578:	f10a 0a01 	add.w	sl, sl, #1
 800357c:	9304      	str	r3, [sp, #16]
 800357e:	9307      	str	r3, [sp, #28]
 8003580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003584:	931a      	str	r3, [sp, #104]	; 0x68
 8003586:	4654      	mov	r4, sl
 8003588:	2205      	movs	r2, #5
 800358a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800358e:	4858      	ldr	r0, [pc, #352]	; (80036f0 <_vfiprintf_r+0x24c>)
 8003590:	f7fc fe3e 	bl	8000210 <memchr>
 8003594:	9a04      	ldr	r2, [sp, #16]
 8003596:	b9d8      	cbnz	r0, 80035d0 <_vfiprintf_r+0x12c>
 8003598:	06d1      	lsls	r1, r2, #27
 800359a:	bf44      	itt	mi
 800359c:	2320      	movmi	r3, #32
 800359e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035a2:	0713      	lsls	r3, r2, #28
 80035a4:	bf44      	itt	mi
 80035a6:	232b      	movmi	r3, #43	; 0x2b
 80035a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ac:	f89a 3000 	ldrb.w	r3, [sl]
 80035b0:	2b2a      	cmp	r3, #42	; 0x2a
 80035b2:	d015      	beq.n	80035e0 <_vfiprintf_r+0x13c>
 80035b4:	9a07      	ldr	r2, [sp, #28]
 80035b6:	4654      	mov	r4, sl
 80035b8:	2000      	movs	r0, #0
 80035ba:	f04f 0c0a 	mov.w	ip, #10
 80035be:	4621      	mov	r1, r4
 80035c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035c4:	3b30      	subs	r3, #48	; 0x30
 80035c6:	2b09      	cmp	r3, #9
 80035c8:	d94e      	bls.n	8003668 <_vfiprintf_r+0x1c4>
 80035ca:	b1b0      	cbz	r0, 80035fa <_vfiprintf_r+0x156>
 80035cc:	9207      	str	r2, [sp, #28]
 80035ce:	e014      	b.n	80035fa <_vfiprintf_r+0x156>
 80035d0:	eba0 0308 	sub.w	r3, r0, r8
 80035d4:	fa09 f303 	lsl.w	r3, r9, r3
 80035d8:	4313      	orrs	r3, r2
 80035da:	9304      	str	r3, [sp, #16]
 80035dc:	46a2      	mov	sl, r4
 80035de:	e7d2      	b.n	8003586 <_vfiprintf_r+0xe2>
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	1d19      	adds	r1, r3, #4
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	9103      	str	r1, [sp, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bfbb      	ittet	lt
 80035ec:	425b      	neglt	r3, r3
 80035ee:	f042 0202 	orrlt.w	r2, r2, #2
 80035f2:	9307      	strge	r3, [sp, #28]
 80035f4:	9307      	strlt	r3, [sp, #28]
 80035f6:	bfb8      	it	lt
 80035f8:	9204      	strlt	r2, [sp, #16]
 80035fa:	7823      	ldrb	r3, [r4, #0]
 80035fc:	2b2e      	cmp	r3, #46	; 0x2e
 80035fe:	d10c      	bne.n	800361a <_vfiprintf_r+0x176>
 8003600:	7863      	ldrb	r3, [r4, #1]
 8003602:	2b2a      	cmp	r3, #42	; 0x2a
 8003604:	d135      	bne.n	8003672 <_vfiprintf_r+0x1ce>
 8003606:	9b03      	ldr	r3, [sp, #12]
 8003608:	1d1a      	adds	r2, r3, #4
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	9203      	str	r2, [sp, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	bfb8      	it	lt
 8003612:	f04f 33ff 	movlt.w	r3, #4294967295
 8003616:	3402      	adds	r4, #2
 8003618:	9305      	str	r3, [sp, #20]
 800361a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003700 <_vfiprintf_r+0x25c>
 800361e:	7821      	ldrb	r1, [r4, #0]
 8003620:	2203      	movs	r2, #3
 8003622:	4650      	mov	r0, sl
 8003624:	f7fc fdf4 	bl	8000210 <memchr>
 8003628:	b140      	cbz	r0, 800363c <_vfiprintf_r+0x198>
 800362a:	2340      	movs	r3, #64	; 0x40
 800362c:	eba0 000a 	sub.w	r0, r0, sl
 8003630:	fa03 f000 	lsl.w	r0, r3, r0
 8003634:	9b04      	ldr	r3, [sp, #16]
 8003636:	4303      	orrs	r3, r0
 8003638:	3401      	adds	r4, #1
 800363a:	9304      	str	r3, [sp, #16]
 800363c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003640:	482c      	ldr	r0, [pc, #176]	; (80036f4 <_vfiprintf_r+0x250>)
 8003642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003646:	2206      	movs	r2, #6
 8003648:	f7fc fde2 	bl	8000210 <memchr>
 800364c:	2800      	cmp	r0, #0
 800364e:	d03f      	beq.n	80036d0 <_vfiprintf_r+0x22c>
 8003650:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <_vfiprintf_r+0x254>)
 8003652:	bb1b      	cbnz	r3, 800369c <_vfiprintf_r+0x1f8>
 8003654:	9b03      	ldr	r3, [sp, #12]
 8003656:	3307      	adds	r3, #7
 8003658:	f023 0307 	bic.w	r3, r3, #7
 800365c:	3308      	adds	r3, #8
 800365e:	9303      	str	r3, [sp, #12]
 8003660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003662:	443b      	add	r3, r7
 8003664:	9309      	str	r3, [sp, #36]	; 0x24
 8003666:	e767      	b.n	8003538 <_vfiprintf_r+0x94>
 8003668:	fb0c 3202 	mla	r2, ip, r2, r3
 800366c:	460c      	mov	r4, r1
 800366e:	2001      	movs	r0, #1
 8003670:	e7a5      	b.n	80035be <_vfiprintf_r+0x11a>
 8003672:	2300      	movs	r3, #0
 8003674:	3401      	adds	r4, #1
 8003676:	9305      	str	r3, [sp, #20]
 8003678:	4619      	mov	r1, r3
 800367a:	f04f 0c0a 	mov.w	ip, #10
 800367e:	4620      	mov	r0, r4
 8003680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003684:	3a30      	subs	r2, #48	; 0x30
 8003686:	2a09      	cmp	r2, #9
 8003688:	d903      	bls.n	8003692 <_vfiprintf_r+0x1ee>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0c5      	beq.n	800361a <_vfiprintf_r+0x176>
 800368e:	9105      	str	r1, [sp, #20]
 8003690:	e7c3      	b.n	800361a <_vfiprintf_r+0x176>
 8003692:	fb0c 2101 	mla	r1, ip, r1, r2
 8003696:	4604      	mov	r4, r0
 8003698:	2301      	movs	r3, #1
 800369a:	e7f0      	b.n	800367e <_vfiprintf_r+0x1da>
 800369c:	ab03      	add	r3, sp, #12
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	462a      	mov	r2, r5
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <_vfiprintf_r+0x258>)
 80036a4:	a904      	add	r1, sp, #16
 80036a6:	4630      	mov	r0, r6
 80036a8:	f3af 8000 	nop.w
 80036ac:	4607      	mov	r7, r0
 80036ae:	1c78      	adds	r0, r7, #1
 80036b0:	d1d6      	bne.n	8003660 <_vfiprintf_r+0x1bc>
 80036b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036b4:	07d9      	lsls	r1, r3, #31
 80036b6:	d405      	bmi.n	80036c4 <_vfiprintf_r+0x220>
 80036b8:	89ab      	ldrh	r3, [r5, #12]
 80036ba:	059a      	lsls	r2, r3, #22
 80036bc:	d402      	bmi.n	80036c4 <_vfiprintf_r+0x220>
 80036be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036c0:	f7ff fe31 	bl	8003326 <__retarget_lock_release_recursive>
 80036c4:	89ab      	ldrh	r3, [r5, #12]
 80036c6:	065b      	lsls	r3, r3, #25
 80036c8:	f53f af12 	bmi.w	80034f0 <_vfiprintf_r+0x4c>
 80036cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ce:	e711      	b.n	80034f4 <_vfiprintf_r+0x50>
 80036d0:	ab03      	add	r3, sp, #12
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	462a      	mov	r2, r5
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <_vfiprintf_r+0x258>)
 80036d8:	a904      	add	r1, sp, #16
 80036da:	4630      	mov	r0, r6
 80036dc:	f000 f880 	bl	80037e0 <_printf_i>
 80036e0:	e7e4      	b.n	80036ac <_vfiprintf_r+0x208>
 80036e2:	bf00      	nop
 80036e4:	08004078 	.word	0x08004078
 80036e8:	08004098 	.word	0x08004098
 80036ec:	08004058 	.word	0x08004058
 80036f0:	080040b8 	.word	0x080040b8
 80036f4:	080040c2 	.word	0x080040c2
 80036f8:	00000000 	.word	0x00000000
 80036fc:	0800347f 	.word	0x0800347f
 8003700:	080040be 	.word	0x080040be

08003704 <_printf_common>:
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003708:	4616      	mov	r6, r2
 800370a:	4699      	mov	r9, r3
 800370c:	688a      	ldr	r2, [r1, #8]
 800370e:	690b      	ldr	r3, [r1, #16]
 8003710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003714:	4293      	cmp	r3, r2
 8003716:	bfb8      	it	lt
 8003718:	4613      	movlt	r3, r2
 800371a:	6033      	str	r3, [r6, #0]
 800371c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003720:	4607      	mov	r7, r0
 8003722:	460c      	mov	r4, r1
 8003724:	b10a      	cbz	r2, 800372a <_printf_common+0x26>
 8003726:	3301      	adds	r3, #1
 8003728:	6033      	str	r3, [r6, #0]
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	0699      	lsls	r1, r3, #26
 800372e:	bf42      	ittt	mi
 8003730:	6833      	ldrmi	r3, [r6, #0]
 8003732:	3302      	addmi	r3, #2
 8003734:	6033      	strmi	r3, [r6, #0]
 8003736:	6825      	ldr	r5, [r4, #0]
 8003738:	f015 0506 	ands.w	r5, r5, #6
 800373c:	d106      	bne.n	800374c <_printf_common+0x48>
 800373e:	f104 0a19 	add.w	sl, r4, #25
 8003742:	68e3      	ldr	r3, [r4, #12]
 8003744:	6832      	ldr	r2, [r6, #0]
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	42ab      	cmp	r3, r5
 800374a:	dc26      	bgt.n	800379a <_printf_common+0x96>
 800374c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003750:	1e13      	subs	r3, r2, #0
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	bf18      	it	ne
 8003756:	2301      	movne	r3, #1
 8003758:	0692      	lsls	r2, r2, #26
 800375a:	d42b      	bmi.n	80037b4 <_printf_common+0xb0>
 800375c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003760:	4649      	mov	r1, r9
 8003762:	4638      	mov	r0, r7
 8003764:	47c0      	blx	r8
 8003766:	3001      	adds	r0, #1
 8003768:	d01e      	beq.n	80037a8 <_printf_common+0xa4>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	68e5      	ldr	r5, [r4, #12]
 800376e:	6832      	ldr	r2, [r6, #0]
 8003770:	f003 0306 	and.w	r3, r3, #6
 8003774:	2b04      	cmp	r3, #4
 8003776:	bf08      	it	eq
 8003778:	1aad      	subeq	r5, r5, r2
 800377a:	68a3      	ldr	r3, [r4, #8]
 800377c:	6922      	ldr	r2, [r4, #16]
 800377e:	bf0c      	ite	eq
 8003780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003784:	2500      	movne	r5, #0
 8003786:	4293      	cmp	r3, r2
 8003788:	bfc4      	itt	gt
 800378a:	1a9b      	subgt	r3, r3, r2
 800378c:	18ed      	addgt	r5, r5, r3
 800378e:	2600      	movs	r6, #0
 8003790:	341a      	adds	r4, #26
 8003792:	42b5      	cmp	r5, r6
 8003794:	d11a      	bne.n	80037cc <_printf_common+0xc8>
 8003796:	2000      	movs	r0, #0
 8003798:	e008      	b.n	80037ac <_printf_common+0xa8>
 800379a:	2301      	movs	r3, #1
 800379c:	4652      	mov	r2, sl
 800379e:	4649      	mov	r1, r9
 80037a0:	4638      	mov	r0, r7
 80037a2:	47c0      	blx	r8
 80037a4:	3001      	adds	r0, #1
 80037a6:	d103      	bne.n	80037b0 <_printf_common+0xac>
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	3501      	adds	r5, #1
 80037b2:	e7c6      	b.n	8003742 <_printf_common+0x3e>
 80037b4:	18e1      	adds	r1, r4, r3
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	2030      	movs	r0, #48	; 0x30
 80037ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037be:	4422      	add	r2, r4
 80037c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c8:	3302      	adds	r3, #2
 80037ca:	e7c7      	b.n	800375c <_printf_common+0x58>
 80037cc:	2301      	movs	r3, #1
 80037ce:	4622      	mov	r2, r4
 80037d0:	4649      	mov	r1, r9
 80037d2:	4638      	mov	r0, r7
 80037d4:	47c0      	blx	r8
 80037d6:	3001      	adds	r0, #1
 80037d8:	d0e6      	beq.n	80037a8 <_printf_common+0xa4>
 80037da:	3601      	adds	r6, #1
 80037dc:	e7d9      	b.n	8003792 <_printf_common+0x8e>
	...

080037e0 <_printf_i>:
 80037e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037e4:	7e0f      	ldrb	r7, [r1, #24]
 80037e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037e8:	2f78      	cmp	r7, #120	; 0x78
 80037ea:	4691      	mov	r9, r2
 80037ec:	4680      	mov	r8, r0
 80037ee:	460c      	mov	r4, r1
 80037f0:	469a      	mov	sl, r3
 80037f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037f6:	d807      	bhi.n	8003808 <_printf_i+0x28>
 80037f8:	2f62      	cmp	r7, #98	; 0x62
 80037fa:	d80a      	bhi.n	8003812 <_printf_i+0x32>
 80037fc:	2f00      	cmp	r7, #0
 80037fe:	f000 80d8 	beq.w	80039b2 <_printf_i+0x1d2>
 8003802:	2f58      	cmp	r7, #88	; 0x58
 8003804:	f000 80a3 	beq.w	800394e <_printf_i+0x16e>
 8003808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800380c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003810:	e03a      	b.n	8003888 <_printf_i+0xa8>
 8003812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003816:	2b15      	cmp	r3, #21
 8003818:	d8f6      	bhi.n	8003808 <_printf_i+0x28>
 800381a:	a101      	add	r1, pc, #4	; (adr r1, 8003820 <_printf_i+0x40>)
 800381c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003820:	08003879 	.word	0x08003879
 8003824:	0800388d 	.word	0x0800388d
 8003828:	08003809 	.word	0x08003809
 800382c:	08003809 	.word	0x08003809
 8003830:	08003809 	.word	0x08003809
 8003834:	08003809 	.word	0x08003809
 8003838:	0800388d 	.word	0x0800388d
 800383c:	08003809 	.word	0x08003809
 8003840:	08003809 	.word	0x08003809
 8003844:	08003809 	.word	0x08003809
 8003848:	08003809 	.word	0x08003809
 800384c:	08003999 	.word	0x08003999
 8003850:	080038bd 	.word	0x080038bd
 8003854:	0800397b 	.word	0x0800397b
 8003858:	08003809 	.word	0x08003809
 800385c:	08003809 	.word	0x08003809
 8003860:	080039bb 	.word	0x080039bb
 8003864:	08003809 	.word	0x08003809
 8003868:	080038bd 	.word	0x080038bd
 800386c:	08003809 	.word	0x08003809
 8003870:	08003809 	.word	0x08003809
 8003874:	08003983 	.word	0x08003983
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	1d1a      	adds	r2, r3, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	602a      	str	r2, [r5, #0]
 8003880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003888:	2301      	movs	r3, #1
 800388a:	e0a3      	b.n	80039d4 <_printf_i+0x1f4>
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	6829      	ldr	r1, [r5, #0]
 8003890:	0606      	lsls	r6, r0, #24
 8003892:	f101 0304 	add.w	r3, r1, #4
 8003896:	d50a      	bpl.n	80038ae <_printf_i+0xce>
 8003898:	680e      	ldr	r6, [r1, #0]
 800389a:	602b      	str	r3, [r5, #0]
 800389c:	2e00      	cmp	r6, #0
 800389e:	da03      	bge.n	80038a8 <_printf_i+0xc8>
 80038a0:	232d      	movs	r3, #45	; 0x2d
 80038a2:	4276      	negs	r6, r6
 80038a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a8:	485e      	ldr	r0, [pc, #376]	; (8003a24 <_printf_i+0x244>)
 80038aa:	230a      	movs	r3, #10
 80038ac:	e019      	b.n	80038e2 <_printf_i+0x102>
 80038ae:	680e      	ldr	r6, [r1, #0]
 80038b0:	602b      	str	r3, [r5, #0]
 80038b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038b6:	bf18      	it	ne
 80038b8:	b236      	sxthne	r6, r6
 80038ba:	e7ef      	b.n	800389c <_printf_i+0xbc>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	6820      	ldr	r0, [r4, #0]
 80038c0:	1d19      	adds	r1, r3, #4
 80038c2:	6029      	str	r1, [r5, #0]
 80038c4:	0601      	lsls	r1, r0, #24
 80038c6:	d501      	bpl.n	80038cc <_printf_i+0xec>
 80038c8:	681e      	ldr	r6, [r3, #0]
 80038ca:	e002      	b.n	80038d2 <_printf_i+0xf2>
 80038cc:	0646      	lsls	r6, r0, #25
 80038ce:	d5fb      	bpl.n	80038c8 <_printf_i+0xe8>
 80038d0:	881e      	ldrh	r6, [r3, #0]
 80038d2:	4854      	ldr	r0, [pc, #336]	; (8003a24 <_printf_i+0x244>)
 80038d4:	2f6f      	cmp	r7, #111	; 0x6f
 80038d6:	bf0c      	ite	eq
 80038d8:	2308      	moveq	r3, #8
 80038da:	230a      	movne	r3, #10
 80038dc:	2100      	movs	r1, #0
 80038de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038e2:	6865      	ldr	r5, [r4, #4]
 80038e4:	60a5      	str	r5, [r4, #8]
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	bfa2      	ittt	ge
 80038ea:	6821      	ldrge	r1, [r4, #0]
 80038ec:	f021 0104 	bicge.w	r1, r1, #4
 80038f0:	6021      	strge	r1, [r4, #0]
 80038f2:	b90e      	cbnz	r6, 80038f8 <_printf_i+0x118>
 80038f4:	2d00      	cmp	r5, #0
 80038f6:	d04d      	beq.n	8003994 <_printf_i+0x1b4>
 80038f8:	4615      	mov	r5, r2
 80038fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80038fe:	fb03 6711 	mls	r7, r3, r1, r6
 8003902:	5dc7      	ldrb	r7, [r0, r7]
 8003904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003908:	4637      	mov	r7, r6
 800390a:	42bb      	cmp	r3, r7
 800390c:	460e      	mov	r6, r1
 800390e:	d9f4      	bls.n	80038fa <_printf_i+0x11a>
 8003910:	2b08      	cmp	r3, #8
 8003912:	d10b      	bne.n	800392c <_printf_i+0x14c>
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	07de      	lsls	r6, r3, #31
 8003918:	d508      	bpl.n	800392c <_printf_i+0x14c>
 800391a:	6923      	ldr	r3, [r4, #16]
 800391c:	6861      	ldr	r1, [r4, #4]
 800391e:	4299      	cmp	r1, r3
 8003920:	bfde      	ittt	le
 8003922:	2330      	movle	r3, #48	; 0x30
 8003924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003928:	f105 35ff 	addle.w	r5, r5, #4294967295
 800392c:	1b52      	subs	r2, r2, r5
 800392e:	6122      	str	r2, [r4, #16]
 8003930:	f8cd a000 	str.w	sl, [sp]
 8003934:	464b      	mov	r3, r9
 8003936:	aa03      	add	r2, sp, #12
 8003938:	4621      	mov	r1, r4
 800393a:	4640      	mov	r0, r8
 800393c:	f7ff fee2 	bl	8003704 <_printf_common>
 8003940:	3001      	adds	r0, #1
 8003942:	d14c      	bne.n	80039de <_printf_i+0x1fe>
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	b004      	add	sp, #16
 800394a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800394e:	4835      	ldr	r0, [pc, #212]	; (8003a24 <_printf_i+0x244>)
 8003950:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003954:	6829      	ldr	r1, [r5, #0]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	f851 6b04 	ldr.w	r6, [r1], #4
 800395c:	6029      	str	r1, [r5, #0]
 800395e:	061d      	lsls	r5, r3, #24
 8003960:	d514      	bpl.n	800398c <_printf_i+0x1ac>
 8003962:	07df      	lsls	r7, r3, #31
 8003964:	bf44      	itt	mi
 8003966:	f043 0320 	orrmi.w	r3, r3, #32
 800396a:	6023      	strmi	r3, [r4, #0]
 800396c:	b91e      	cbnz	r6, 8003976 <_printf_i+0x196>
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	f023 0320 	bic.w	r3, r3, #32
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	2310      	movs	r3, #16
 8003978:	e7b0      	b.n	80038dc <_printf_i+0xfc>
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	f043 0320 	orr.w	r3, r3, #32
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	2378      	movs	r3, #120	; 0x78
 8003984:	4828      	ldr	r0, [pc, #160]	; (8003a28 <_printf_i+0x248>)
 8003986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800398a:	e7e3      	b.n	8003954 <_printf_i+0x174>
 800398c:	0659      	lsls	r1, r3, #25
 800398e:	bf48      	it	mi
 8003990:	b2b6      	uxthmi	r6, r6
 8003992:	e7e6      	b.n	8003962 <_printf_i+0x182>
 8003994:	4615      	mov	r5, r2
 8003996:	e7bb      	b.n	8003910 <_printf_i+0x130>
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	6826      	ldr	r6, [r4, #0]
 800399c:	6961      	ldr	r1, [r4, #20]
 800399e:	1d18      	adds	r0, r3, #4
 80039a0:	6028      	str	r0, [r5, #0]
 80039a2:	0635      	lsls	r5, r6, #24
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	d501      	bpl.n	80039ac <_printf_i+0x1cc>
 80039a8:	6019      	str	r1, [r3, #0]
 80039aa:	e002      	b.n	80039b2 <_printf_i+0x1d2>
 80039ac:	0670      	lsls	r0, r6, #25
 80039ae:	d5fb      	bpl.n	80039a8 <_printf_i+0x1c8>
 80039b0:	8019      	strh	r1, [r3, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	6123      	str	r3, [r4, #16]
 80039b6:	4615      	mov	r5, r2
 80039b8:	e7ba      	b.n	8003930 <_printf_i+0x150>
 80039ba:	682b      	ldr	r3, [r5, #0]
 80039bc:	1d1a      	adds	r2, r3, #4
 80039be:	602a      	str	r2, [r5, #0]
 80039c0:	681d      	ldr	r5, [r3, #0]
 80039c2:	6862      	ldr	r2, [r4, #4]
 80039c4:	2100      	movs	r1, #0
 80039c6:	4628      	mov	r0, r5
 80039c8:	f7fc fc22 	bl	8000210 <memchr>
 80039cc:	b108      	cbz	r0, 80039d2 <_printf_i+0x1f2>
 80039ce:	1b40      	subs	r0, r0, r5
 80039d0:	6060      	str	r0, [r4, #4]
 80039d2:	6863      	ldr	r3, [r4, #4]
 80039d4:	6123      	str	r3, [r4, #16]
 80039d6:	2300      	movs	r3, #0
 80039d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039dc:	e7a8      	b.n	8003930 <_printf_i+0x150>
 80039de:	6923      	ldr	r3, [r4, #16]
 80039e0:	462a      	mov	r2, r5
 80039e2:	4649      	mov	r1, r9
 80039e4:	4640      	mov	r0, r8
 80039e6:	47d0      	blx	sl
 80039e8:	3001      	adds	r0, #1
 80039ea:	d0ab      	beq.n	8003944 <_printf_i+0x164>
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	079b      	lsls	r3, r3, #30
 80039f0:	d413      	bmi.n	8003a1a <_printf_i+0x23a>
 80039f2:	68e0      	ldr	r0, [r4, #12]
 80039f4:	9b03      	ldr	r3, [sp, #12]
 80039f6:	4298      	cmp	r0, r3
 80039f8:	bfb8      	it	lt
 80039fa:	4618      	movlt	r0, r3
 80039fc:	e7a4      	b.n	8003948 <_printf_i+0x168>
 80039fe:	2301      	movs	r3, #1
 8003a00:	4632      	mov	r2, r6
 8003a02:	4649      	mov	r1, r9
 8003a04:	4640      	mov	r0, r8
 8003a06:	47d0      	blx	sl
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d09b      	beq.n	8003944 <_printf_i+0x164>
 8003a0c:	3501      	adds	r5, #1
 8003a0e:	68e3      	ldr	r3, [r4, #12]
 8003a10:	9903      	ldr	r1, [sp, #12]
 8003a12:	1a5b      	subs	r3, r3, r1
 8003a14:	42ab      	cmp	r3, r5
 8003a16:	dcf2      	bgt.n	80039fe <_printf_i+0x21e>
 8003a18:	e7eb      	b.n	80039f2 <_printf_i+0x212>
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	f104 0619 	add.w	r6, r4, #25
 8003a20:	e7f5      	b.n	8003a0e <_printf_i+0x22e>
 8003a22:	bf00      	nop
 8003a24:	080040c9 	.word	0x080040c9
 8003a28:	080040da 	.word	0x080040da

08003a2c <_sbrk_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4d06      	ldr	r5, [pc, #24]	; (8003a48 <_sbrk_r+0x1c>)
 8003a30:	2300      	movs	r3, #0
 8003a32:	4604      	mov	r4, r0
 8003a34:	4608      	mov	r0, r1
 8003a36:	602b      	str	r3, [r5, #0]
 8003a38:	f7fd fe5a 	bl	80016f0 <_sbrk>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d102      	bne.n	8003a46 <_sbrk_r+0x1a>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	b103      	cbz	r3, 8003a46 <_sbrk_r+0x1a>
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	200000f0 	.word	0x200000f0

08003a4c <__sread>:
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	460c      	mov	r4, r1
 8003a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a54:	f000 fab2 	bl	8003fbc <_read_r>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	bfab      	itete	ge
 8003a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a60:	181b      	addge	r3, r3, r0
 8003a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a66:	bfac      	ite	ge
 8003a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a6a:	81a3      	strhlt	r3, [r4, #12]
 8003a6c:	bd10      	pop	{r4, pc}

08003a6e <__swrite>:
 8003a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a72:	461f      	mov	r7, r3
 8003a74:	898b      	ldrh	r3, [r1, #12]
 8003a76:	05db      	lsls	r3, r3, #23
 8003a78:	4605      	mov	r5, r0
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	4616      	mov	r6, r2
 8003a7e:	d505      	bpl.n	8003a8c <__swrite+0x1e>
 8003a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a84:	2302      	movs	r3, #2
 8003a86:	2200      	movs	r2, #0
 8003a88:	f000 f9c8 	bl	8003e1c <_lseek_r>
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a96:	81a3      	strh	r3, [r4, #12]
 8003a98:	4632      	mov	r2, r6
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa2:	f000 b869 	b.w	8003b78 <_write_r>

08003aa6 <__sseek>:
 8003aa6:	b510      	push	{r4, lr}
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aae:	f000 f9b5 	bl	8003e1c <_lseek_r>
 8003ab2:	1c43      	adds	r3, r0, #1
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	bf15      	itete	ne
 8003ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ac2:	81a3      	strheq	r3, [r4, #12]
 8003ac4:	bf18      	it	ne
 8003ac6:	81a3      	strhne	r3, [r4, #12]
 8003ac8:	bd10      	pop	{r4, pc}

08003aca <__sclose>:
 8003aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ace:	f000 b8d3 	b.w	8003c78 <_close_r>
	...

08003ad4 <__swbuf_r>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	460e      	mov	r6, r1
 8003ad8:	4614      	mov	r4, r2
 8003ada:	4605      	mov	r5, r0
 8003adc:	b118      	cbz	r0, 8003ae6 <__swbuf_r+0x12>
 8003ade:	6983      	ldr	r3, [r0, #24]
 8003ae0:	b90b      	cbnz	r3, 8003ae6 <__swbuf_r+0x12>
 8003ae2:	f7ff fb81 	bl	80031e8 <__sinit>
 8003ae6:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <__swbuf_r+0x98>)
 8003ae8:	429c      	cmp	r4, r3
 8003aea:	d12b      	bne.n	8003b44 <__swbuf_r+0x70>
 8003aec:	686c      	ldr	r4, [r5, #4]
 8003aee:	69a3      	ldr	r3, [r4, #24]
 8003af0:	60a3      	str	r3, [r4, #8]
 8003af2:	89a3      	ldrh	r3, [r4, #12]
 8003af4:	071a      	lsls	r2, r3, #28
 8003af6:	d52f      	bpl.n	8003b58 <__swbuf_r+0x84>
 8003af8:	6923      	ldr	r3, [r4, #16]
 8003afa:	b36b      	cbz	r3, 8003b58 <__swbuf_r+0x84>
 8003afc:	6923      	ldr	r3, [r4, #16]
 8003afe:	6820      	ldr	r0, [r4, #0]
 8003b00:	1ac0      	subs	r0, r0, r3
 8003b02:	6963      	ldr	r3, [r4, #20]
 8003b04:	b2f6      	uxtb	r6, r6
 8003b06:	4283      	cmp	r3, r0
 8003b08:	4637      	mov	r7, r6
 8003b0a:	dc04      	bgt.n	8003b16 <__swbuf_r+0x42>
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f000 f948 	bl	8003da4 <_fflush_r>
 8003b14:	bb30      	cbnz	r0, 8003b64 <__swbuf_r+0x90>
 8003b16:	68a3      	ldr	r3, [r4, #8]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	60a3      	str	r3, [r4, #8]
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	6022      	str	r2, [r4, #0]
 8003b22:	701e      	strb	r6, [r3, #0]
 8003b24:	6963      	ldr	r3, [r4, #20]
 8003b26:	3001      	adds	r0, #1
 8003b28:	4283      	cmp	r3, r0
 8003b2a:	d004      	beq.n	8003b36 <__swbuf_r+0x62>
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	07db      	lsls	r3, r3, #31
 8003b30:	d506      	bpl.n	8003b40 <__swbuf_r+0x6c>
 8003b32:	2e0a      	cmp	r6, #10
 8003b34:	d104      	bne.n	8003b40 <__swbuf_r+0x6c>
 8003b36:	4621      	mov	r1, r4
 8003b38:	4628      	mov	r0, r5
 8003b3a:	f000 f933 	bl	8003da4 <_fflush_r>
 8003b3e:	b988      	cbnz	r0, 8003b64 <__swbuf_r+0x90>
 8003b40:	4638      	mov	r0, r7
 8003b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <__swbuf_r+0x9c>)
 8003b46:	429c      	cmp	r4, r3
 8003b48:	d101      	bne.n	8003b4e <__swbuf_r+0x7a>
 8003b4a:	68ac      	ldr	r4, [r5, #8]
 8003b4c:	e7cf      	b.n	8003aee <__swbuf_r+0x1a>
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <__swbuf_r+0xa0>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	bf08      	it	eq
 8003b54:	68ec      	ldreq	r4, [r5, #12]
 8003b56:	e7ca      	b.n	8003aee <__swbuf_r+0x1a>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 f81e 	bl	8003b9c <__swsetup_r>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0cb      	beq.n	8003afc <__swbuf_r+0x28>
 8003b64:	f04f 37ff 	mov.w	r7, #4294967295
 8003b68:	e7ea      	b.n	8003b40 <__swbuf_r+0x6c>
 8003b6a:	bf00      	nop
 8003b6c:	08004078 	.word	0x08004078
 8003b70:	08004098 	.word	0x08004098
 8003b74:	08004058 	.word	0x08004058

08003b78 <_write_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4d07      	ldr	r5, [pc, #28]	; (8003b98 <_write_r+0x20>)
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	4608      	mov	r0, r1
 8003b80:	4611      	mov	r1, r2
 8003b82:	2200      	movs	r2, #0
 8003b84:	602a      	str	r2, [r5, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7fd fd61 	bl	800164e <_write>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d102      	bne.n	8003b96 <_write_r+0x1e>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	b103      	cbz	r3, 8003b96 <_write_r+0x1e>
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	200000f0 	.word	0x200000f0

08003b9c <__swsetup_r>:
 8003b9c:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <__swsetup_r+0xcc>)
 8003b9e:	b570      	push	{r4, r5, r6, lr}
 8003ba0:	681d      	ldr	r5, [r3, #0]
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	b125      	cbz	r5, 8003bb2 <__swsetup_r+0x16>
 8003ba8:	69ab      	ldr	r3, [r5, #24]
 8003baa:	b913      	cbnz	r3, 8003bb2 <__swsetup_r+0x16>
 8003bac:	4628      	mov	r0, r5
 8003bae:	f7ff fb1b 	bl	80031e8 <__sinit>
 8003bb2:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <__swsetup_r+0xd0>)
 8003bb4:	429c      	cmp	r4, r3
 8003bb6:	d10f      	bne.n	8003bd8 <__swsetup_r+0x3c>
 8003bb8:	686c      	ldr	r4, [r5, #4]
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bc0:	0719      	lsls	r1, r3, #28
 8003bc2:	d42c      	bmi.n	8003c1e <__swsetup_r+0x82>
 8003bc4:	06dd      	lsls	r5, r3, #27
 8003bc6:	d411      	bmi.n	8003bec <__swsetup_r+0x50>
 8003bc8:	2309      	movs	r3, #9
 8003bca:	6033      	str	r3, [r6, #0]
 8003bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003bd0:	81a3      	strh	r3, [r4, #12]
 8003bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd6:	e03e      	b.n	8003c56 <__swsetup_r+0xba>
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <__swsetup_r+0xd4>)
 8003bda:	429c      	cmp	r4, r3
 8003bdc:	d101      	bne.n	8003be2 <__swsetup_r+0x46>
 8003bde:	68ac      	ldr	r4, [r5, #8]
 8003be0:	e7eb      	b.n	8003bba <__swsetup_r+0x1e>
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <__swsetup_r+0xd8>)
 8003be4:	429c      	cmp	r4, r3
 8003be6:	bf08      	it	eq
 8003be8:	68ec      	ldreq	r4, [r5, #12]
 8003bea:	e7e6      	b.n	8003bba <__swsetup_r+0x1e>
 8003bec:	0758      	lsls	r0, r3, #29
 8003bee:	d512      	bpl.n	8003c16 <__swsetup_r+0x7a>
 8003bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bf2:	b141      	cbz	r1, 8003c06 <__swsetup_r+0x6a>
 8003bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bf8:	4299      	cmp	r1, r3
 8003bfa:	d002      	beq.n	8003c02 <__swsetup_r+0x66>
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	f000 f991 	bl	8003f24 <_free_r>
 8003c02:	2300      	movs	r3, #0
 8003c04:	6363      	str	r3, [r4, #52]	; 0x34
 8003c06:	89a3      	ldrh	r3, [r4, #12]
 8003c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c0c:	81a3      	strh	r3, [r4, #12]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	6063      	str	r3, [r4, #4]
 8003c12:	6923      	ldr	r3, [r4, #16]
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	89a3      	ldrh	r3, [r4, #12]
 8003c18:	f043 0308 	orr.w	r3, r3, #8
 8003c1c:	81a3      	strh	r3, [r4, #12]
 8003c1e:	6923      	ldr	r3, [r4, #16]
 8003c20:	b94b      	cbnz	r3, 8003c36 <__swsetup_r+0x9a>
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d003      	beq.n	8003c36 <__swsetup_r+0x9a>
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4630      	mov	r0, r6
 8003c32:	f000 f92b 	bl	8003e8c <__smakebuf_r>
 8003c36:	89a0      	ldrh	r0, [r4, #12]
 8003c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c3c:	f010 0301 	ands.w	r3, r0, #1
 8003c40:	d00a      	beq.n	8003c58 <__swsetup_r+0xbc>
 8003c42:	2300      	movs	r3, #0
 8003c44:	60a3      	str	r3, [r4, #8]
 8003c46:	6963      	ldr	r3, [r4, #20]
 8003c48:	425b      	negs	r3, r3
 8003c4a:	61a3      	str	r3, [r4, #24]
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	b943      	cbnz	r3, 8003c62 <__swsetup_r+0xc6>
 8003c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c54:	d1ba      	bne.n	8003bcc <__swsetup_r+0x30>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	0781      	lsls	r1, r0, #30
 8003c5a:	bf58      	it	pl
 8003c5c:	6963      	ldrpl	r3, [r4, #20]
 8003c5e:	60a3      	str	r3, [r4, #8]
 8003c60:	e7f4      	b.n	8003c4c <__swsetup_r+0xb0>
 8003c62:	2000      	movs	r0, #0
 8003c64:	e7f7      	b.n	8003c56 <__swsetup_r+0xba>
 8003c66:	bf00      	nop
 8003c68:	2000000c 	.word	0x2000000c
 8003c6c:	08004078 	.word	0x08004078
 8003c70:	08004098 	.word	0x08004098
 8003c74:	08004058 	.word	0x08004058

08003c78 <_close_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d06      	ldr	r5, [pc, #24]	; (8003c94 <_close_r+0x1c>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4604      	mov	r4, r0
 8003c80:	4608      	mov	r0, r1
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	f7fd fcff 	bl	8001686 <_close>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d102      	bne.n	8003c92 <_close_r+0x1a>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	b103      	cbz	r3, 8003c92 <_close_r+0x1a>
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	200000f0 	.word	0x200000f0

08003c98 <__sflush_r>:
 8003c98:	898a      	ldrh	r2, [r1, #12]
 8003c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	0710      	lsls	r0, r2, #28
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	d458      	bmi.n	8003d58 <__sflush_r+0xc0>
 8003ca6:	684b      	ldr	r3, [r1, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	dc05      	bgt.n	8003cb8 <__sflush_r+0x20>
 8003cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	dc02      	bgt.n	8003cb8 <__sflush_r+0x20>
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cba:	2e00      	cmp	r6, #0
 8003cbc:	d0f9      	beq.n	8003cb2 <__sflush_r+0x1a>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cc4:	682f      	ldr	r7, [r5, #0]
 8003cc6:	602b      	str	r3, [r5, #0]
 8003cc8:	d032      	beq.n	8003d30 <__sflush_r+0x98>
 8003cca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ccc:	89a3      	ldrh	r3, [r4, #12]
 8003cce:	075a      	lsls	r2, r3, #29
 8003cd0:	d505      	bpl.n	8003cde <__sflush_r+0x46>
 8003cd2:	6863      	ldr	r3, [r4, #4]
 8003cd4:	1ac0      	subs	r0, r0, r3
 8003cd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cd8:	b10b      	cbz	r3, 8003cde <__sflush_r+0x46>
 8003cda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cdc:	1ac0      	subs	r0, r0, r3
 8003cde:	2300      	movs	r3, #0
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ce4:	6a21      	ldr	r1, [r4, #32]
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	47b0      	blx	r6
 8003cea:	1c43      	adds	r3, r0, #1
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	d106      	bne.n	8003cfe <__sflush_r+0x66>
 8003cf0:	6829      	ldr	r1, [r5, #0]
 8003cf2:	291d      	cmp	r1, #29
 8003cf4:	d82c      	bhi.n	8003d50 <__sflush_r+0xb8>
 8003cf6:	4a2a      	ldr	r2, [pc, #168]	; (8003da0 <__sflush_r+0x108>)
 8003cf8:	40ca      	lsrs	r2, r1
 8003cfa:	07d6      	lsls	r6, r2, #31
 8003cfc:	d528      	bpl.n	8003d50 <__sflush_r+0xb8>
 8003cfe:	2200      	movs	r2, #0
 8003d00:	6062      	str	r2, [r4, #4]
 8003d02:	04d9      	lsls	r1, r3, #19
 8003d04:	6922      	ldr	r2, [r4, #16]
 8003d06:	6022      	str	r2, [r4, #0]
 8003d08:	d504      	bpl.n	8003d14 <__sflush_r+0x7c>
 8003d0a:	1c42      	adds	r2, r0, #1
 8003d0c:	d101      	bne.n	8003d12 <__sflush_r+0x7a>
 8003d0e:	682b      	ldr	r3, [r5, #0]
 8003d10:	b903      	cbnz	r3, 8003d14 <__sflush_r+0x7c>
 8003d12:	6560      	str	r0, [r4, #84]	; 0x54
 8003d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d16:	602f      	str	r7, [r5, #0]
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	d0ca      	beq.n	8003cb2 <__sflush_r+0x1a>
 8003d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d20:	4299      	cmp	r1, r3
 8003d22:	d002      	beq.n	8003d2a <__sflush_r+0x92>
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f8fd 	bl	8003f24 <_free_r>
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	6360      	str	r0, [r4, #52]	; 0x34
 8003d2e:	e7c1      	b.n	8003cb4 <__sflush_r+0x1c>
 8003d30:	6a21      	ldr	r1, [r4, #32]
 8003d32:	2301      	movs	r3, #1
 8003d34:	4628      	mov	r0, r5
 8003d36:	47b0      	blx	r6
 8003d38:	1c41      	adds	r1, r0, #1
 8003d3a:	d1c7      	bne.n	8003ccc <__sflush_r+0x34>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0c4      	beq.n	8003ccc <__sflush_r+0x34>
 8003d42:	2b1d      	cmp	r3, #29
 8003d44:	d001      	beq.n	8003d4a <__sflush_r+0xb2>
 8003d46:	2b16      	cmp	r3, #22
 8003d48:	d101      	bne.n	8003d4e <__sflush_r+0xb6>
 8003d4a:	602f      	str	r7, [r5, #0]
 8003d4c:	e7b1      	b.n	8003cb2 <__sflush_r+0x1a>
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d54:	81a3      	strh	r3, [r4, #12]
 8003d56:	e7ad      	b.n	8003cb4 <__sflush_r+0x1c>
 8003d58:	690f      	ldr	r7, [r1, #16]
 8003d5a:	2f00      	cmp	r7, #0
 8003d5c:	d0a9      	beq.n	8003cb2 <__sflush_r+0x1a>
 8003d5e:	0793      	lsls	r3, r2, #30
 8003d60:	680e      	ldr	r6, [r1, #0]
 8003d62:	bf08      	it	eq
 8003d64:	694b      	ldreq	r3, [r1, #20]
 8003d66:	600f      	str	r7, [r1, #0]
 8003d68:	bf18      	it	ne
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	eba6 0807 	sub.w	r8, r6, r7
 8003d70:	608b      	str	r3, [r1, #8]
 8003d72:	f1b8 0f00 	cmp.w	r8, #0
 8003d76:	dd9c      	ble.n	8003cb2 <__sflush_r+0x1a>
 8003d78:	6a21      	ldr	r1, [r4, #32]
 8003d7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d7c:	4643      	mov	r3, r8
 8003d7e:	463a      	mov	r2, r7
 8003d80:	4628      	mov	r0, r5
 8003d82:	47b0      	blx	r6
 8003d84:	2800      	cmp	r0, #0
 8003d86:	dc06      	bgt.n	8003d96 <__sflush_r+0xfe>
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	e78e      	b.n	8003cb4 <__sflush_r+0x1c>
 8003d96:	4407      	add	r7, r0
 8003d98:	eba8 0800 	sub.w	r8, r8, r0
 8003d9c:	e7e9      	b.n	8003d72 <__sflush_r+0xda>
 8003d9e:	bf00      	nop
 8003da0:	20400001 	.word	0x20400001

08003da4 <_fflush_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	690b      	ldr	r3, [r1, #16]
 8003da8:	4605      	mov	r5, r0
 8003daa:	460c      	mov	r4, r1
 8003dac:	b913      	cbnz	r3, 8003db4 <_fflush_r+0x10>
 8003dae:	2500      	movs	r5, #0
 8003db0:	4628      	mov	r0, r5
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
 8003db4:	b118      	cbz	r0, 8003dbe <_fflush_r+0x1a>
 8003db6:	6983      	ldr	r3, [r0, #24]
 8003db8:	b90b      	cbnz	r3, 8003dbe <_fflush_r+0x1a>
 8003dba:	f7ff fa15 	bl	80031e8 <__sinit>
 8003dbe:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <_fflush_r+0x6c>)
 8003dc0:	429c      	cmp	r4, r3
 8003dc2:	d11b      	bne.n	8003dfc <_fflush_r+0x58>
 8003dc4:	686c      	ldr	r4, [r5, #4]
 8003dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0ef      	beq.n	8003dae <_fflush_r+0xa>
 8003dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003dd0:	07d0      	lsls	r0, r2, #31
 8003dd2:	d404      	bmi.n	8003dde <_fflush_r+0x3a>
 8003dd4:	0599      	lsls	r1, r3, #22
 8003dd6:	d402      	bmi.n	8003dde <_fflush_r+0x3a>
 8003dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dda:	f7ff faa3 	bl	8003324 <__retarget_lock_acquire_recursive>
 8003dde:	4628      	mov	r0, r5
 8003de0:	4621      	mov	r1, r4
 8003de2:	f7ff ff59 	bl	8003c98 <__sflush_r>
 8003de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003de8:	07da      	lsls	r2, r3, #31
 8003dea:	4605      	mov	r5, r0
 8003dec:	d4e0      	bmi.n	8003db0 <_fflush_r+0xc>
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	059b      	lsls	r3, r3, #22
 8003df2:	d4dd      	bmi.n	8003db0 <_fflush_r+0xc>
 8003df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003df6:	f7ff fa96 	bl	8003326 <__retarget_lock_release_recursive>
 8003dfa:	e7d9      	b.n	8003db0 <_fflush_r+0xc>
 8003dfc:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <_fflush_r+0x70>)
 8003dfe:	429c      	cmp	r4, r3
 8003e00:	d101      	bne.n	8003e06 <_fflush_r+0x62>
 8003e02:	68ac      	ldr	r4, [r5, #8]
 8003e04:	e7df      	b.n	8003dc6 <_fflush_r+0x22>
 8003e06:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <_fflush_r+0x74>)
 8003e08:	429c      	cmp	r4, r3
 8003e0a:	bf08      	it	eq
 8003e0c:	68ec      	ldreq	r4, [r5, #12]
 8003e0e:	e7da      	b.n	8003dc6 <_fflush_r+0x22>
 8003e10:	08004078 	.word	0x08004078
 8003e14:	08004098 	.word	0x08004098
 8003e18:	08004058 	.word	0x08004058

08003e1c <_lseek_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4d07      	ldr	r5, [pc, #28]	; (8003e3c <_lseek_r+0x20>)
 8003e20:	4604      	mov	r4, r0
 8003e22:	4608      	mov	r0, r1
 8003e24:	4611      	mov	r1, r2
 8003e26:	2200      	movs	r2, #0
 8003e28:	602a      	str	r2, [r5, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f7fd fc52 	bl	80016d4 <_lseek>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d102      	bne.n	8003e3a <_lseek_r+0x1e>
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	b103      	cbz	r3, 8003e3a <_lseek_r+0x1e>
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	200000f0 	.word	0x200000f0

08003e40 <__swhatbuf_r>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	460e      	mov	r6, r1
 8003e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	b096      	sub	sp, #88	; 0x58
 8003e4c:	4614      	mov	r4, r2
 8003e4e:	461d      	mov	r5, r3
 8003e50:	da08      	bge.n	8003e64 <__swhatbuf_r+0x24>
 8003e52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	602a      	str	r2, [r5, #0]
 8003e5a:	061a      	lsls	r2, r3, #24
 8003e5c:	d410      	bmi.n	8003e80 <__swhatbuf_r+0x40>
 8003e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e62:	e00e      	b.n	8003e82 <__swhatbuf_r+0x42>
 8003e64:	466a      	mov	r2, sp
 8003e66:	f000 f8bb 	bl	8003fe0 <_fstat_r>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	dbf1      	blt.n	8003e52 <__swhatbuf_r+0x12>
 8003e6e:	9a01      	ldr	r2, [sp, #4]
 8003e70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e78:	425a      	negs	r2, r3
 8003e7a:	415a      	adcs	r2, r3
 8003e7c:	602a      	str	r2, [r5, #0]
 8003e7e:	e7ee      	b.n	8003e5e <__swhatbuf_r+0x1e>
 8003e80:	2340      	movs	r3, #64	; 0x40
 8003e82:	2000      	movs	r0, #0
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	b016      	add	sp, #88	; 0x58
 8003e88:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e8c <__smakebuf_r>:
 8003e8c:	898b      	ldrh	r3, [r1, #12]
 8003e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e90:	079d      	lsls	r5, r3, #30
 8003e92:	4606      	mov	r6, r0
 8003e94:	460c      	mov	r4, r1
 8003e96:	d507      	bpl.n	8003ea8 <__smakebuf_r+0x1c>
 8003e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	6123      	str	r3, [r4, #16]
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	6163      	str	r3, [r4, #20]
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	ab01      	add	r3, sp, #4
 8003eaa:	466a      	mov	r2, sp
 8003eac:	f7ff ffc8 	bl	8003e40 <__swhatbuf_r>
 8003eb0:	9900      	ldr	r1, [sp, #0]
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	4630      	mov	r0, r6
 8003eb6:	f7ff fa57 	bl	8003368 <_malloc_r>
 8003eba:	b948      	cbnz	r0, 8003ed0 <__smakebuf_r+0x44>
 8003ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec0:	059a      	lsls	r2, r3, #22
 8003ec2:	d4ef      	bmi.n	8003ea4 <__smakebuf_r+0x18>
 8003ec4:	f023 0303 	bic.w	r3, r3, #3
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	81a3      	strh	r3, [r4, #12]
 8003ece:	e7e3      	b.n	8003e98 <__smakebuf_r+0xc>
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <__smakebuf_r+0x7c>)
 8003ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	6020      	str	r0, [r4, #0]
 8003ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	9b00      	ldr	r3, [sp, #0]
 8003ee0:	6163      	str	r3, [r4, #20]
 8003ee2:	9b01      	ldr	r3, [sp, #4]
 8003ee4:	6120      	str	r0, [r4, #16]
 8003ee6:	b15b      	cbz	r3, 8003f00 <__smakebuf_r+0x74>
 8003ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eec:	4630      	mov	r0, r6
 8003eee:	f000 f889 	bl	8004004 <_isatty_r>
 8003ef2:	b128      	cbz	r0, 8003f00 <__smakebuf_r+0x74>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	f023 0303 	bic.w	r3, r3, #3
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	81a3      	strh	r3, [r4, #12]
 8003f00:	89a0      	ldrh	r0, [r4, #12]
 8003f02:	4305      	orrs	r5, r0
 8003f04:	81a5      	strh	r5, [r4, #12]
 8003f06:	e7cd      	b.n	8003ea4 <__smakebuf_r+0x18>
 8003f08:	08003181 	.word	0x08003181

08003f0c <__malloc_lock>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__malloc_lock+0x8>)
 8003f0e:	f7ff ba09 	b.w	8003324 <__retarget_lock_acquire_recursive>
 8003f12:	bf00      	nop
 8003f14:	200000e4 	.word	0x200000e4

08003f18 <__malloc_unlock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__malloc_unlock+0x8>)
 8003f1a:	f7ff ba04 	b.w	8003326 <__retarget_lock_release_recursive>
 8003f1e:	bf00      	nop
 8003f20:	200000e4 	.word	0x200000e4

08003f24 <_free_r>:
 8003f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f26:	2900      	cmp	r1, #0
 8003f28:	d044      	beq.n	8003fb4 <_free_r+0x90>
 8003f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f2e:	9001      	str	r0, [sp, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f1a1 0404 	sub.w	r4, r1, #4
 8003f36:	bfb8      	it	lt
 8003f38:	18e4      	addlt	r4, r4, r3
 8003f3a:	f7ff ffe7 	bl	8003f0c <__malloc_lock>
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <_free_r+0x94>)
 8003f40:	9801      	ldr	r0, [sp, #4]
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	b933      	cbnz	r3, 8003f54 <_free_r+0x30>
 8003f46:	6063      	str	r3, [r4, #4]
 8003f48:	6014      	str	r4, [r2, #0]
 8003f4a:	b003      	add	sp, #12
 8003f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f50:	f7ff bfe2 	b.w	8003f18 <__malloc_unlock>
 8003f54:	42a3      	cmp	r3, r4
 8003f56:	d908      	bls.n	8003f6a <_free_r+0x46>
 8003f58:	6825      	ldr	r5, [r4, #0]
 8003f5a:	1961      	adds	r1, r4, r5
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	bf01      	itttt	eq
 8003f60:	6819      	ldreq	r1, [r3, #0]
 8003f62:	685b      	ldreq	r3, [r3, #4]
 8003f64:	1949      	addeq	r1, r1, r5
 8003f66:	6021      	streq	r1, [r4, #0]
 8003f68:	e7ed      	b.n	8003f46 <_free_r+0x22>
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	b10b      	cbz	r3, 8003f74 <_free_r+0x50>
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	d9fa      	bls.n	8003f6a <_free_r+0x46>
 8003f74:	6811      	ldr	r1, [r2, #0]
 8003f76:	1855      	adds	r5, r2, r1
 8003f78:	42a5      	cmp	r5, r4
 8003f7a:	d10b      	bne.n	8003f94 <_free_r+0x70>
 8003f7c:	6824      	ldr	r4, [r4, #0]
 8003f7e:	4421      	add	r1, r4
 8003f80:	1854      	adds	r4, r2, r1
 8003f82:	42a3      	cmp	r3, r4
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	d1e0      	bne.n	8003f4a <_free_r+0x26>
 8003f88:	681c      	ldr	r4, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	6053      	str	r3, [r2, #4]
 8003f8e:	4421      	add	r1, r4
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	e7da      	b.n	8003f4a <_free_r+0x26>
 8003f94:	d902      	bls.n	8003f9c <_free_r+0x78>
 8003f96:	230c      	movs	r3, #12
 8003f98:	6003      	str	r3, [r0, #0]
 8003f9a:	e7d6      	b.n	8003f4a <_free_r+0x26>
 8003f9c:	6825      	ldr	r5, [r4, #0]
 8003f9e:	1961      	adds	r1, r4, r5
 8003fa0:	428b      	cmp	r3, r1
 8003fa2:	bf04      	itt	eq
 8003fa4:	6819      	ldreq	r1, [r3, #0]
 8003fa6:	685b      	ldreq	r3, [r3, #4]
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	bf04      	itt	eq
 8003fac:	1949      	addeq	r1, r1, r5
 8003fae:	6021      	streq	r1, [r4, #0]
 8003fb0:	6054      	str	r4, [r2, #4]
 8003fb2:	e7ca      	b.n	8003f4a <_free_r+0x26>
 8003fb4:	b003      	add	sp, #12
 8003fb6:	bd30      	pop	{r4, r5, pc}
 8003fb8:	200000e8 	.word	0x200000e8

08003fbc <_read_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	4d07      	ldr	r5, [pc, #28]	; (8003fdc <_read_r+0x20>)
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	4608      	mov	r0, r1
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	602a      	str	r2, [r5, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f7fd fb22 	bl	8001614 <_read>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_read_r+0x1e>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_read_r+0x1e>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	200000f0 	.word	0x200000f0

08003fe0 <_fstat_r>:
 8003fe0:	b538      	push	{r3, r4, r5, lr}
 8003fe2:	4d07      	ldr	r5, [pc, #28]	; (8004000 <_fstat_r+0x20>)
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	602b      	str	r3, [r5, #0]
 8003fee:	f7fd fb56 	bl	800169e <_fstat>
 8003ff2:	1c43      	adds	r3, r0, #1
 8003ff4:	d102      	bne.n	8003ffc <_fstat_r+0x1c>
 8003ff6:	682b      	ldr	r3, [r5, #0]
 8003ff8:	b103      	cbz	r3, 8003ffc <_fstat_r+0x1c>
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	bd38      	pop	{r3, r4, r5, pc}
 8003ffe:	bf00      	nop
 8004000:	200000f0 	.word	0x200000f0

08004004 <_isatty_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4d06      	ldr	r5, [pc, #24]	; (8004020 <_isatty_r+0x1c>)
 8004008:	2300      	movs	r3, #0
 800400a:	4604      	mov	r4, r0
 800400c:	4608      	mov	r0, r1
 800400e:	602b      	str	r3, [r5, #0]
 8004010:	f7fd fb55 	bl	80016be <_isatty>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d102      	bne.n	800401e <_isatty_r+0x1a>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	b103      	cbz	r3, 800401e <_isatty_r+0x1a>
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	200000f0 	.word	0x200000f0

08004024 <_init>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr

08004030 <_fini>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr
