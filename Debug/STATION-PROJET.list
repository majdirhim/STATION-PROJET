
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008748  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a84  08008a84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a8c  08008a8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a8c  08008a8c  00018a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000070  08008b04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08008b04  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f22b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c5b  00000000  00000000  0002f2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00031f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00032c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cdf  00000000  00000000  00033750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dd4  00000000  00000000  0005b42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7fae  00000000  00000000  0006e203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001561b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000354c  00000000  00000000  00156204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008900 	.word	0x08008900

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008900 	.word	0x08008900

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <WR_TO_Sd>:
 *  Created on: 24 oct. 2022
 *      Author: Majdi
 */
#include "Carte_Sd.h"

FRESULT WR_TO_Sd(const char *wtext, const char *file_name) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80005ca:	af02      	add	r7, sp, #8
 80005cc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80005d0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80005da:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80005de:	6019      	str	r1, [r3, #0]

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	uint8_t rtext[_MAX_SS];/* File read buffer */

	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 80005e0:	2200      	movs	r2, #0
 80005e2:	492a      	ldr	r1, [pc, #168]	; (800068c <WR_TO_Sd+0xc8>)
 80005e4:	482a      	ldr	r0, [pc, #168]	; (8000690 <WR_TO_Sd+0xcc>)
 80005e6:	f006 fc41 	bl	8006e6c <f_mount>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d002      	beq.n	80005f6 <WR_TO_Sd+0x32>
		Error_Handler(); // Alerts_Action(internal_soft);
 80005f0:	f000 fa56 	bl	8000aa0 <Error_Handler>
 80005f4:	e03d      	b.n	8000672 <WR_TO_Sd+0xae>
	} else {
		if (f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext)) //creates a FAT volume on the logical drive
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	2107      	movs	r1, #7
 8000604:	4821      	ldr	r0, [pc, #132]	; (800068c <WR_TO_Sd+0xc8>)
 8000606:	f007 f853 	bl	80076b0 <f_mkfs>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <WR_TO_Sd+0x52>
				!= FR_OK) {
			Error_Handler(); // error handler
 8000610:	f000 fa46 	bl	8000aa0 <Error_Handler>
 8000614:	e02d      	b.n	8000672 <WR_TO_Sd+0xae>
		} else {
			//Open file for writing (Create)
			if (f_open(&SDFile, "SWlog.TXT", FA_CREATE_ALWAYS | FA_WRITE)
 8000616:	220a      	movs	r2, #10
 8000618:	491e      	ldr	r1, [pc, #120]	; (8000694 <WR_TO_Sd+0xd0>)
 800061a:	481f      	ldr	r0, [pc, #124]	; (8000698 <WR_TO_Sd+0xd4>)
 800061c:	f006 fc6c 	bl	8006ef8 <f_open>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <WR_TO_Sd+0x68>
					!= FR_OK) {
				Error_Handler();
 8000626:	f000 fa3b 	bl	8000aa0 <Error_Handler>
 800062a:	e022      	b.n	8000672 <WR_TO_Sd+0xae>
			} else {
				//Write to the text file
				res = f_write(&SDFile, wtext, strlen(wtext),
 800062c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000630:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000634:	6818      	ldr	r0, [r3, #0]
 8000636:	f7ff fdeb 	bl	8000210 <strlen>
 800063a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800063e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8000642:	f5a2 7103 	sub.w	r1, r2, #524	; 0x20c
 8000646:	4602      	mov	r2, r0
 8000648:	6809      	ldr	r1, [r1, #0]
 800064a:	4813      	ldr	r0, [pc, #76]	; (8000698 <WR_TO_Sd+0xd4>)
 800064c:	f006 fe12 	bl	8007274 <f_write>
 8000650:	4603      	mov	r3, r0
 8000652:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
						(void*) &byteswritten);
				if ((byteswritten == 0) || (res != FR_OK)) {
 8000656:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <WR_TO_Sd+0xa2>
 800065e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <WR_TO_Sd+0xa8>
					Error_Handler();
 8000666:	f000 fa1b 	bl	8000aa0 <Error_Handler>
 800066a:	e002      	b.n	8000672 <WR_TO_Sd+0xae>
				} else {

					f_close(&SDFile); // Close file object
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <WR_TO_Sd+0xd4>)
 800066e:	f006 fff4 	bl	800765a <f_close>
				}
			}
		}
	}
	f_mount(&SDFatFS, (TCHAR const*) NULL, 0); //unmount file system object
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <WR_TO_Sd+0xcc>)
 8000678:	f006 fbf8 	bl	8006e6c <f_mount>
return res;
 800067c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8000680:	4618      	mov	r0, r3
 8000682:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200001dc 	.word	0x200001dc
 8000690:	200001e0 	.word	0x200001e0
 8000694:	08008918 	.word	0x08008918
 8000698:	20000410 	.word	0x20000410

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_DMA_Init+0x48>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <MX_DMA_Init+0x48>)
 80006a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_DMA_Init+0x48>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	203b      	movs	r0, #59	; 0x3b
 80006c0:	f000 fd5b 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006c4:	203b      	movs	r0, #59	; 0x3b
 80006c6:	f000 fd74 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2045      	movs	r0, #69	; 0x45
 80006d0:	f000 fd53 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006d4:	2045      	movs	r0, #69	; 0x45
 80006d6:	f000 fd6c 	bl	80011b2 <HAL_NVIC_EnableIRQ>

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b090      	sub	sp, #64	; 0x40
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	4b91      	ldr	r3, [pc, #580]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a90      	ldr	r2, [pc, #576]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b8e      	ldr	r3, [pc, #568]	; (8000944 <MX_GPIO_Init+0x25c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
 8000714:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000716:	4b8b      	ldr	r3, [pc, #556]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a8a      	ldr	r2, [pc, #552]	; (8000944 <MX_GPIO_Init+0x25c>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b88      	ldr	r3, [pc, #544]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b85      	ldr	r3, [pc, #532]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a84      	ldr	r2, [pc, #528]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b82      	ldr	r3, [pc, #520]	; (8000944 <MX_GPIO_Init+0x25c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	623b      	str	r3, [r7, #32]
 8000744:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	4b7f      	ldr	r3, [pc, #508]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a7e      	ldr	r2, [pc, #504]	; (8000944 <MX_GPIO_Init+0x25c>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b7c      	ldr	r3, [pc, #496]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b79      	ldr	r3, [pc, #484]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a78      	ldr	r2, [pc, #480]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b76      	ldr	r3, [pc, #472]	; (8000944 <MX_GPIO_Init+0x25c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b73      	ldr	r3, [pc, #460]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a72      	ldr	r2, [pc, #456]	; (8000944 <MX_GPIO_Init+0x25c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b70      	ldr	r3, [pc, #448]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800078e:	4b6d      	ldr	r3, [pc, #436]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6c      	ldr	r2, [pc, #432]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b6a      	ldr	r3, [pc, #424]	; (8000944 <MX_GPIO_Init+0x25c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007a6:	4b67      	ldr	r3, [pc, #412]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a66      	ldr	r2, [pc, #408]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b64      	ldr	r3, [pc, #400]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80007be:	4b61      	ldr	r3, [pc, #388]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a60      	ldr	r2, [pc, #384]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b5e      	ldr	r3, [pc, #376]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d6:	4b5b      	ldr	r3, [pc, #364]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a5a      	ldr	r2, [pc, #360]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b58      	ldr	r3, [pc, #352]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0320 	and.w	r3, r3, #32
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b55      	ldr	r3, [pc, #340]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a54      	ldr	r2, [pc, #336]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b52      	ldr	r3, [pc, #328]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 8000806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	4619      	mov	r1, r3
 800081a:	484b      	ldr	r0, [pc, #300]	; (8000948 <MX_GPIO_Init+0x260>)
 800081c:	f001 f88a 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 8000820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000826:	2303      	movs	r3, #3
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000832:	4619      	mov	r1, r3
 8000834:	4845      	ldr	r0, [pc, #276]	; (800094c <MX_GPIO_Init+0x264>)
 8000836:	f001 f87d 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB7 PB6 PB13
                           PB12 PB2 PB10 PB1
                           PB0 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800083a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000840:	2303      	movs	r3, #3
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084c:	4619      	mov	r1, r3
 800084e:	4840      	ldr	r0, [pc, #256]	; (8000950 <MX_GPIO_Init+0x268>)
 8000850:	f001 f870 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8000854:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000866:	4619      	mov	r1, r3
 8000868:	483a      	ldr	r0, [pc, #232]	; (8000954 <MX_GPIO_Init+0x26c>)
 800086a:	f001 f863 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA1 PA0
                           PA4 PA2 PA6 PA5
                           PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 800086e:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000874:	2303      	movs	r3, #3
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000880:	4619      	mov	r1, r3
 8000882:	4835      	ldr	r0, [pc, #212]	; (8000958 <MX_GPIO_Init+0x270>)
 8000884:	f001 f856 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8000888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089a:	4619      	mov	r1, r3
 800089c:	482f      	ldr	r0, [pc, #188]	; (800095c <MX_GPIO_Init+0x274>)
 800089e:	f001 f849 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 80008a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_GPIO_Init+0x278>)
 80008b8:	f001 f83c 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80008bc:	23ff      	movs	r3, #255	; 0xff
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	4825      	ldr	r0, [pc, #148]	; (8000964 <MX_GPIO_Init+0x27c>)
 80008d0:	f001 f830 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	481f      	ldr	r0, [pc, #124]	; (8000968 <MX_GPIO_Init+0x280>)
 80008ea:	f001 f823 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	2303      	movs	r3, #3
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000900:	4619      	mov	r1, r3
 8000902:	481a      	ldr	r0, [pc, #104]	; (800096c <MX_GPIO_Init+0x284>)
 8000904:	f001 f816 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8000908:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091a:	4619      	mov	r1, r3
 800091c:	4814      	ldr	r0, [pc, #80]	; (8000970 <MX_GPIO_Init+0x288>)
 800091e:	f001 f809 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC3 PC0 PC1 PC2
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 8000922:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000928:	2303      	movs	r3, #3
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000934:	4619      	mov	r1, r3
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_GPIO_Init+0x280>)
 8000938:	f000 fffc 	bl	8001934 <HAL_GPIO_Init>

}
 800093c:	bf00      	nop
 800093e:	3740      	adds	r7, #64	; 0x40
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40021000 	.word	0x40021000
 800094c:	40021800 	.word	0x40021800
 8000950:	40020400 	.word	0x40020400
 8000954:	40020c00 	.word	0x40020c00
 8000958:	40020000 	.word	0x40020000
 800095c:	40022400 	.word	0x40022400
 8000960:	40022000 	.word	0x40022000
 8000964:	40022800 	.word	0x40022800
 8000968:	40020800 	.word	0x40020800
 800096c:	40021400 	.word	0x40021400
 8000970:	40021c00 	.word	0x40021c00

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 faa2 	bl	8000ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f821 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f7ff feb1 	bl	80006e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000986:	f7ff fe89 	bl	800069c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800098a:	f000 f88f 	bl	8000aac <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800098e:	f004 facd 	bl	8004f2c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  char wtext[50];
  uint8_t i =0;
 8000992:	2300      	movs	r3, #0
 8000994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  sprintf(wtext,"testing %u \n\r",i++);
 8000998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 80009a2:	461a      	mov	r2, r3
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	4905      	ldr	r1, [pc, #20]	; (80009bc <main+0x48>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f007 fb3b 	bl	8008024 <siprintf>
  WR_TO_Sd(wtext, "test.txt");
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4903      	ldr	r1, [pc, #12]	; (80009c0 <main+0x4c>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe06 	bl	80005c4 <WR_TO_Sd>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x44>
 80009ba:	bf00      	nop
 80009bc:	08008924 	.word	0x08008924
 80009c0:	08008934 	.word	0x08008934

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2230      	movs	r2, #48	; 0x30
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f007 fb1e 	bl	8008014 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <SystemClock_Config+0xd4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a2a      	ldr	r2, [pc, #168]	; (8000a98 <SystemClock_Config+0xd4>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <SystemClock_Config+0xd4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a00:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <SystemClock_Config+0xd8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a08:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <SystemClock_Config+0xd8>)
 8000a0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <SystemClock_Config+0xd8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a26:	2302      	movs	r3, #2
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a30:	230c      	movs	r3, #12
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f989 	bl	8001d5c <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a50:	f000 f826 	bl	8000aa0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a54:	f001 f932 	bl	8001cbc <HAL_PWREx_EnableOverDrive>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a5e:	f000 f81f 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2302      	movs	r3, #2
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	2103      	movs	r1, #3
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fc0f 	bl	80022a4 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a8c:	f000 f808 	bl	8000aa0 <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3750      	adds	r7, #80	; 0x50
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_SDMMC1_SD_Init+0x38>)
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_SDMMC1_SD_Init+0x38>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_SDMMC1_SD_Init+0x38>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_SDMMC1_SD_Init+0x38>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_SDMMC1_SD_Init+0x38>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <MX_SDMMC1_SD_Init+0x38>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <MX_SDMMC1_SD_Init+0x38>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	2000008c 	.word	0x2000008c
 8000ae8:	40012c00 	.word	0x40012c00

08000aec <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0ac      	sub	sp, #176	; 0xb0
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	2284      	movs	r2, #132	; 0x84
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f007 fa81 	bl	8008014 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a74      	ldr	r2, [pc, #464]	; (8000ce8 <HAL_SD_MspInit+0x1fc>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	f040 80e0 	bne.w	8000cde <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000b1e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000b22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fd67 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8000b40:	f7ff ffae 	bl	8000aa0 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b44:	4b69      	ldr	r3, [pc, #420]	; (8000cec <HAL_SD_MspInit+0x200>)
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	4a68      	ldr	r2, [pc, #416]	; (8000cec <HAL_SD_MspInit+0x200>)
 8000b4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b50:	4b66      	ldr	r3, [pc, #408]	; (8000cec <HAL_SD_MspInit+0x200>)
 8000b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5c:	4b63      	ldr	r3, [pc, #396]	; (8000cec <HAL_SD_MspInit+0x200>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a62      	ldr	r2, [pc, #392]	; (8000cec <HAL_SD_MspInit+0x200>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b60      	ldr	r3, [pc, #384]	; (8000cec <HAL_SD_MspInit+0x200>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b74:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <HAL_SD_MspInit+0x200>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a5c      	ldr	r2, [pc, #368]	; (8000cec <HAL_SD_MspInit+0x200>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <HAL_SD_MspInit+0x200>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8000b8c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	484f      	ldr	r0, [pc, #316]	; (8000cf0 <HAL_SD_MspInit+0x204>)
 8000bb4:	f000 febe 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4845      	ldr	r0, [pc, #276]	; (8000cf4 <HAL_SD_MspInit+0x208>)
 8000bde:	f000 fea9 	bl	8001934 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000be2:	4b45      	ldr	r3, [pc, #276]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000be4:	4a45      	ldr	r2, [pc, #276]	; (8000cfc <HAL_SD_MspInit+0x210>)
 8000be6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000be8:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bee:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bf0:	4b41      	ldr	r3, [pc, #260]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf6:	4b40      	ldr	r3, [pc, #256]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c02:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c0a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c12:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c16:	2220      	movs	r2, #32
 8000c18:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c1a:	4b37      	ldr	r3, [pc, #220]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c20:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c22:	2204      	movs	r2, #4
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c26:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c28:	2203      	movs	r2, #3
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c34:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000c3c:	482e      	ldr	r0, [pc, #184]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c3e:	f000 fad3 	bl	80011e8 <HAL_DMA_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000c48:	f7ff ff2a 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a2a      	ldr	r2, [pc, #168]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c50:	641a      	str	r2, [r3, #64]	; 0x40
 8000c52:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <HAL_SD_MspInit+0x20c>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c5a:	4a2a      	ldr	r2, [pc, #168]	; (8000d04 <HAL_SD_MspInit+0x218>)
 8000c5c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000ca4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000cac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000cb2:	4813      	ldr	r0, [pc, #76]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000cb4:	f000 fa98 	bl	80011e8 <HAL_DMA_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000cbe:	f7ff feef 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000cc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_SD_MspInit+0x214>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2031      	movs	r0, #49	; 0x31
 8000cd4:	f000 fa51 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000cd8:	2031      	movs	r0, #49	; 0x31
 8000cda:	f000 fa6a 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000cde:	bf00      	nop
 8000ce0:	37b0      	adds	r7, #176	; 0xb0
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	20000110 	.word	0x20000110
 8000cfc:	40026458 	.word	0x40026458
 8000d00:	20000170 	.word	0x20000170
 8000d04:	400264a0 	.word	0x400264a0

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x44>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x44>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x44>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x44>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x44>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x44>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f8ce 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <SDMMC1_IRQHandler+0x10>)
 8000daa:	f002 fa9d 	bl	80032e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000008c 	.word	0x2000008c

08000db8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <DMA2_Stream3_IRQHandler+0x10>)
 8000dbe:	f000 fb43 	bl	8001448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000110 	.word	0x20000110

08000dcc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <DMA2_Stream6_IRQHandler+0x10>)
 8000dd2:	f000 fb39 	bl	8001448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000170 	.word	0x20000170

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f007 f8d6 	bl	8007fc0 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20050000 	.word	0x20050000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200001d0 	.word	0x200001d0
 8000e48:	20000690 	.word	0x20000690

08000e4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <SystemInit+0x20>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a05      	ldr	r2, [pc, #20]	; (8000e6c <SystemInit+0x20>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e76:	490e      	ldr	r1, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e78:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e8c:	4c0b      	ldr	r4, [pc, #44]	; (8000ebc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd7 	bl	8000e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f007 f895 	bl	8007fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fd67 	bl	8000974 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eb4:	08008a94 	.word	0x08008a94
  ldr r2, =_sbss
 8000eb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ebc:	2000068c 	.word	0x2000068c

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>

08000ec2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	f000 f94c 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 f805 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed2:	f7ff ff19 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f967 	bl	80011ce <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f92f 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	200001d4 	.word	0x200001d4

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200001d4 	.word	0x200001d4

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <__NVIC_SetPriorityGrouping+0x40>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00
 8001008:	05fa0000 	.word	0x05fa0000

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	; (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	; (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff29 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff3e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff31 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff feb6 	bl	8000f64 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e099      	b.n	8001338 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2202      	movs	r2, #2
 8001208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001224:	e00f      	b.n	8001246 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001226:	f7ff fe9d 	bl	8000f64 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b05      	cmp	r3, #5
 8001232:	d908      	bls.n	8001246 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2220      	movs	r2, #32
 8001238:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e078      	b.n	8001338 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1e8      	bne.n	8001226 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	4b38      	ldr	r3, [pc, #224]	; (8001340 <HAL_DMA_Init+0x158>)
 8001260:	4013      	ands	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001272:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4313      	orrs	r3, r2
 8001296:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2b04      	cmp	r3, #4
 800129e:	d107      	bne.n	80012b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4313      	orrs	r3, r2
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f023 0307 	bic.w	r3, r3, #7
 80012c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d117      	bne.n	800130a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00e      	beq.n	800130a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 faa5 	bl	800183c <DMA_CheckFifoParam>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2240      	movs	r2, #64	; 0x40
 80012fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001306:	2301      	movs	r3, #1
 8001308:	e016      	b.n	8001338 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fa5c 	bl	80017d0 <DMA_CalcBaseAndBitshift>
 8001318:	4603      	mov	r3, r0
 800131a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001320:	223f      	movs	r2, #63	; 0x3f
 8001322:	409a      	lsls	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	f010803f 	.word	0xf010803f

08001344 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_DMA_Start_IT+0x26>
 8001366:	2302      	movs	r3, #2
 8001368:	e048      	b.n	80013fc <HAL_DMA_Start_IT+0xb8>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d137      	bne.n	80013ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2202      	movs	r2, #2
 8001382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f9ee 	bl	8001774 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	223f      	movs	r2, #63	; 0x3f
 800139e:	409a      	lsls	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0216 	orr.w	r2, r2, #22
 80013b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695a      	ldr	r2, [r3, #20]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d007      	beq.n	80013dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0208 	orr.w	r2, r2, #8
 80013da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e005      	b.n	80013fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013f6:	2302      	movs	r3, #2
 80013f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d004      	beq.n	8001422 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00c      	b.n	800143c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2205      	movs	r2, #5
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001454:	4b8e      	ldr	r3, [pc, #568]	; (8001690 <HAL_DMA_IRQHandler+0x248>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a8e      	ldr	r2, [pc, #568]	; (8001694 <HAL_DMA_IRQHandler+0x24c>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0a9b      	lsrs	r3, r3, #10
 8001460:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	2208      	movs	r2, #8
 8001474:	409a      	lsls	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01a      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0204 	bic.w	r2, r2, #4
 800149a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	2208      	movs	r2, #8
 80014a2:	409a      	lsls	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ac:	f043 0201 	orr.w	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b8:	2201      	movs	r2, #1
 80014ba:	409a      	lsls	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d012      	beq.n	80014ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d6:	2201      	movs	r2, #1
 80014d8:	409a      	lsls	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f043 0202 	orr.w	r2, r3, #2
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ee:	2204      	movs	r2, #4
 80014f0:	409a      	lsls	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	2204      	movs	r2, #4
 800150e:	409a      	lsls	r2, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001518:	f043 0204 	orr.w	r2, r3, #4
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001524:	2210      	movs	r2, #16
 8001526:	409a      	lsls	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d043      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d03c      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	2210      	movs	r2, #16
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d018      	beq.n	800158a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d108      	bne.n	8001578 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d024      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
 8001576:	e01f      	b.n	80015b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01b      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	4798      	blx	r3
 8001588:	e016      	b.n	80015b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d107      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0208 	bic.w	r2, r2, #8
 80015a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	2220      	movs	r2, #32
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 808f 	beq.w	80016e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8087 	beq.w	80016e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2220      	movs	r2, #32
 80015e0:	409a      	lsls	r2, r3
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d136      	bne.n	8001660 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0216 	bic.w	r2, r2, #22
 8001600:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001610:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <HAL_DMA_IRQHandler+0x1da>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0208 	bic.w	r2, r2, #8
 8001630:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001636:	223f      	movs	r2, #63	; 0x3f
 8001638:	409a      	lsls	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001652:	2b00      	cmp	r3, #0
 8001654:	d07e      	beq.n	8001754 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
        }
        return;
 800165e:	e079      	b.n	8001754 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01d      	beq.n	80016aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10d      	bne.n	8001698 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	2b00      	cmp	r3, #0
 8001682:	d031      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	4798      	blx	r3
 800168c:	e02c      	b.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
 800168e:	bf00      	nop
 8001690:	20000000 	.word	0x20000000
 8001694:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
 80016a8:	e01e      	b.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10f      	bne.n	80016d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0210 	bic.w	r2, r2, #16
 80016c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d032      	beq.n	8001756 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d022      	beq.n	8001742 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2205      	movs	r2, #5
 8001700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	3301      	adds	r3, #1
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	429a      	cmp	r2, r3
 800171e:	d307      	bcc.n	8001730 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f2      	bne.n	8001714 <HAL_DMA_IRQHandler+0x2cc>
 800172e:	e000      	b.n	8001732 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001730:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
 8001752:	e000      	b.n	8001756 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001754:	bf00      	nop
    }
  }
}
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001790:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b40      	cmp	r3, #64	; 0x40
 80017a0:	d108      	bne.n	80017b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017b2:	e007      	b.n	80017c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	3b10      	subs	r3, #16
 80017e0:	4a13      	ldr	r2, [pc, #76]	; (8001830 <DMA_CalcBaseAndBitshift+0x60>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <DMA_CalcBaseAndBitshift+0x64>)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d908      	bls.n	8001810 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <DMA_CalcBaseAndBitshift+0x68>)
 8001806:	4013      	ands	r3, r2
 8001808:	1d1a      	adds	r2, r3, #4
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	659a      	str	r2, [r3, #88]	; 0x58
 800180e:	e006      	b.n	800181e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <DMA_CalcBaseAndBitshift+0x68>)
 8001818:	4013      	ands	r3, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	aaaaaaab 	.word	0xaaaaaaab
 8001834:	08008994 	.word	0x08008994
 8001838:	fffffc00 	.word	0xfffffc00

0800183c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d11f      	bne.n	8001896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d856      	bhi.n	800190a <DMA_CheckFifoParam+0xce>
 800185c:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <DMA_CheckFifoParam+0x28>)
 800185e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001862:	bf00      	nop
 8001864:	08001875 	.word	0x08001875
 8001868:	08001887 	.word	0x08001887
 800186c:	08001875 	.word	0x08001875
 8001870:	0800190b 	.word	0x0800190b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d046      	beq.n	800190e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001884:	e043      	b.n	800190e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800188e:	d140      	bne.n	8001912 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001894:	e03d      	b.n	8001912 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189e:	d121      	bne.n	80018e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d837      	bhi.n	8001916 <DMA_CheckFifoParam+0xda>
 80018a6:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <DMA_CheckFifoParam+0x70>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	080018bd 	.word	0x080018bd
 80018b0:	080018c3 	.word	0x080018c3
 80018b4:	080018bd 	.word	0x080018bd
 80018b8:	080018d5 	.word	0x080018d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
      break;
 80018c0:	e030      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d025      	beq.n	800191a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d2:	e022      	b.n	800191a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018dc:	d11f      	bne.n	800191e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018e2:	e01c      	b.n	800191e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d903      	bls.n	80018f2 <DMA_CheckFifoParam+0xb6>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d003      	beq.n	80018f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018f0:	e018      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
      break;
 80018f6:	e015      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00e      	beq.n	8001922 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
      break;
 8001908:	e00b      	b.n	8001922 <DMA_CheckFifoParam+0xe6>
      break;
 800190a:	bf00      	nop
 800190c:	e00a      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 800190e:	bf00      	nop
 8001910:	e008      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 8001912:	bf00      	nop
 8001914:	e006      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 8001916:	bf00      	nop
 8001918:	e004      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 800191a:	bf00      	nop
 800191c:	e002      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;   
 800191e:	bf00      	nop
 8001920:	e000      	b.n	8001924 <DMA_CheckFifoParam+0xe8>
      break;
 8001922:	bf00      	nop
    }
  } 
  
  return status; 
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e175      	b.n	8001c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8164 	bne.w	8001c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_GPIO_Init+0x56>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80be 	beq.w	8001c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <HAL_GPIO_Init+0x324>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a65      	ldr	r2, [pc, #404]	; (8001c58 <HAL_GPIO_Init+0x324>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_GPIO_Init+0x324>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ad6:	4a61      	ldr	r2, [pc, #388]	; (8001c5c <HAL_GPIO_Init+0x328>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_GPIO_Init+0x32c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d037      	beq.n	8001b72 <HAL_GPIO_Init+0x23e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a57      	ldr	r2, [pc, #348]	; (8001c64 <HAL_GPIO_Init+0x330>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d031      	beq.n	8001b6e <HAL_GPIO_Init+0x23a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a56      	ldr	r2, [pc, #344]	; (8001c68 <HAL_GPIO_Init+0x334>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d02b      	beq.n	8001b6a <HAL_GPIO_Init+0x236>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a55      	ldr	r2, [pc, #340]	; (8001c6c <HAL_GPIO_Init+0x338>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d025      	beq.n	8001b66 <HAL_GPIO_Init+0x232>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a54      	ldr	r2, [pc, #336]	; (8001c70 <HAL_GPIO_Init+0x33c>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d01f      	beq.n	8001b62 <HAL_GPIO_Init+0x22e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a53      	ldr	r2, [pc, #332]	; (8001c74 <HAL_GPIO_Init+0x340>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x22a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_GPIO_Init+0x344>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <HAL_GPIO_Init+0x348>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x222>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a50      	ldr	r2, [pc, #320]	; (8001c80 <HAL_GPIO_Init+0x34c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x21e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4f      	ldr	r2, [pc, #316]	; (8001c84 <HAL_GPIO_Init+0x350>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x21a>
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	e012      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b4e:	230a      	movs	r3, #10
 8001b50:	e010      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b52:	2308      	movs	r3, #8
 8001b54:	e00e      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b56:	2307      	movs	r3, #7
 8001b58:	e00c      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b5a:	2306      	movs	r3, #6
 8001b5c:	e00a      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x240>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b84:	4935      	ldr	r1, [pc, #212]	; (8001c5c <HAL_GPIO_Init+0x328>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b92:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb6:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be0:	4a29      	ldr	r2, [pc, #164]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <HAL_GPIO_Init+0x354>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f ae86 	bls.w	8001954 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40021400 	.word	0x40021400
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	40021c00 	.word	0x40021c00
 8001c80:	40022000 	.word	0x40022000
 8001c84:	40022400 	.word	0x40022400
 8001c88:	40013c00 	.word	0x40013c00

08001c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cea:	f7ff f93b 	bl	8000f64 <HAL_GetTick>
 8001cee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cf0:	e009      	b.n	8001d06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cf2:	f7ff f937 	bl	8000f64 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d00:	d901      	bls.n	8001d06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e022      	b.n	8001d4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d12:	d1ee      	bne.n	8001cf2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d20:	f7ff f920 	bl	8000f64 <HAL_GetTick>
 8001d24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d26:	e009      	b.n	8001d3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d28:	f7ff f91c 	bl	8000f64 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d36:	d901      	bls.n	8001d3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e007      	b.n	8001d4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d48:	d1ee      	bne.n	8001d28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000

08001d5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e291      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8087 	beq.w	8001e8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d80:	4b96      	ldr	r3, [pc, #600]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d00c      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8c:	4b93      	ldr	r3, [pc, #588]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d112      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62>
 8001d98:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da4:	d10b      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d06c      	beq.n	8001e8c <HAL_RCC_OscConfig+0x130>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d168      	bne.n	8001e8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e26b      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x7a>
 8001dc8:	4b84      	ldr	r3, [pc, #528]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e02e      	b.n	8001e34 <HAL_RCC_OscConfig+0xd8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x9c>
 8001dde:	4b7f      	ldr	r3, [pc, #508]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7e      	ldr	r2, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b7c      	ldr	r3, [pc, #496]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a7b      	ldr	r2, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e01d      	b.n	8001e34 <HAL_RCC_OscConfig+0xd8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0xc0>
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a75      	ldr	r2, [pc, #468]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a72      	ldr	r2, [pc, #456]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xd8>
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a6e      	ldr	r2, [pc, #440]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b6c      	ldr	r3, [pc, #432]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a6b      	ldr	r2, [pc, #428]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f892 	bl	8000f64 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff f88e 	bl	8000f64 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e21f      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xe8>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff f87e 	bl	8000f64 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff f87a 	bl	8000f64 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e20b      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x110>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d069      	beq.n	8001f6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9a:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea6:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d11c      	bne.n	8001eec <HAL_RCC_OscConfig+0x190>
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d116      	bne.n	8001eec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e1df      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	493d      	ldr	r1, [pc, #244]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	e040      	b.n	8001f6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d023      	beq.n	8001f3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff f830 	bl	8000f64 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff f82c 	bl	8000f64 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1bd      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1a:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4929      	ldr	r1, [pc, #164]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
 8001f3a:	e018      	b.n	8001f6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f80c 	bl	8000f64 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f50:	f7ff f808 	bl	8000f64 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e199      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d038      	beq.n	8001fec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d019      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7fe ffe9 	bl	8000f64 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7fe ffe5 	bl	8000f64 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e176      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x23a>
 8001fb4:	e01a      	b.n	8001fec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7fe ffcf 	bl	8000f64 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7fe ffcb 	bl	8000f64 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d903      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e15c      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
 8001fdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b91      	ldr	r3, [pc, #580]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a4 	beq.w	8002142 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b8b      	ldr	r3, [pc, #556]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10d      	bne.n	8002022 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b88      	ldr	r3, [pc, #544]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a87      	ldr	r2, [pc, #540]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b85      	ldr	r3, [pc, #532]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201e:	2301      	movs	r3, #1
 8002020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002022:	4b82      	ldr	r3, [pc, #520]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d118      	bne.n	8002060 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800202e:	4b7f      	ldr	r3, [pc, #508]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7e      	ldr	r2, [pc, #504]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7fe ff93 	bl	8000f64 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7fe ff8f 	bl	8000f64 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	; 0x64
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e120      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002054:	4b75      	ldr	r3, [pc, #468]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x31a>
 8002068:	4b6f      	ldr	r3, [pc, #444]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6713      	str	r3, [r2, #112]	; 0x70
 8002074:	e02d      	b.n	80020d2 <HAL_RCC_OscConfig+0x376>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x33c>
 800207e:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a69      	ldr	r2, [pc, #420]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a66      	ldr	r2, [pc, #408]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
 8002096:	e01c      	b.n	80020d2 <HAL_RCC_OscConfig+0x376>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x35e>
 80020a0:	4b61      	ldr	r3, [pc, #388]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a60      	ldr	r2, [pc, #384]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a5d      	ldr	r2, [pc, #372]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x376>
 80020ba:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a5a      	ldr	r2, [pc, #360]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	4b58      	ldr	r3, [pc, #352]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ca:	4a57      	ldr	r2, [pc, #348]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d015      	beq.n	8002106 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7fe ff43 	bl	8000f64 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe ff3f 	bl	8000f64 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0ce      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ee      	beq.n	80020e2 <HAL_RCC_OscConfig+0x386>
 8002104:	e014      	b.n	8002130 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7fe ff2d 	bl	8000f64 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe ff29 	bl	8000f64 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0b8      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	4b40      	ldr	r3, [pc, #256]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ee      	bne.n	800210e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80a4 	beq.w	8002294 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214c:	4b36      	ldr	r3, [pc, #216]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d06b      	beq.n	8002230 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d149      	bne.n	80021f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b31      	ldr	r3, [pc, #196]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a30      	ldr	r2, [pc, #192]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe fefa 	bl	8000f64 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7fe fef6 	bl	8000f64 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e087      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	019b      	lsls	r3, r3, #6
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	3b01      	subs	r3, #1
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	4313      	orrs	r3, r2
 80021b8:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80021ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe feca 	bl	8000f64 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fec6 	bl	8000f64 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e057      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x478>
 80021f2:	e04f      	b.n	8002294 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0b      	ldr	r2, [pc, #44]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe feb0 	bl	8000f64 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe feac 	bl	8000f64 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e03d      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCC_OscConfig+0x4cc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x4ac>
 8002226:	e035      	b.n	8002294 <HAL_RCC_OscConfig+0x538>
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x544>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d028      	beq.n	8002290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d121      	bne.n	8002290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d11a      	bne.n	8002290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002266:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002268:	4293      	cmp	r3, r2
 800226a:	d111      	bne.n	8002290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	3b01      	subs	r3, #1
 800227a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d107      	bne.n	8002290 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800

080022a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0d0      	b.n	800245e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b6a      	ldr	r3, [pc, #424]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 020f 	bic.w	r2, r3, #15
 80022d2:	4965      	ldr	r1, [pc, #404]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b63      	ldr	r3, [pc, #396]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0b8      	b.n	800245e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002304:	4b59      	ldr	r3, [pc, #356]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 800230a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800230e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	494d      	ldr	r1, [pc, #308]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d040      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e07f      	b.n	800245e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b41      	ldr	r3, [pc, #260]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e073      	b.n	800245e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06b      	b.n	800245e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 0203 	bic.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4936      	ldr	r1, [pc, #216]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002398:	f7fe fde4 	bl	8000f64 <HAL_GetTick>
 800239c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a0:	f7fe fde0 	bl	8000f64 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e053      	b.n	800245e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	4b2d      	ldr	r3, [pc, #180]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 020c 	and.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d1eb      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d210      	bcs.n	80023f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 020f 	bic.w	r2, r3, #15
 80023de:	4922      	ldr	r1, [pc, #136]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b20      	ldr	r3, [pc, #128]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e032      	b.n	800245e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4916      	ldr	r1, [pc, #88]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	490e      	ldr	r1, [pc, #56]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002436:	f000 f821 	bl	800247c <HAL_RCC_GetSysClockFreq>
 800243a:	4602      	mov	r2, r0
 800243c:	4b0b      	ldr	r3, [pc, #44]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	490a      	ldr	r1, [pc, #40]	; (8002470 <HAL_RCC_ClockConfig+0x1cc>)
 8002448:	5ccb      	ldrb	r3, [r1, r3]
 800244a:	fa22 f303 	lsr.w	r3, r2, r3
 800244e:	4a09      	ldr	r2, [pc, #36]	; (8002474 <HAL_RCC_ClockConfig+0x1d0>)
 8002450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1d4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fd40 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023c00 	.word	0x40023c00
 800246c:	40023800 	.word	0x40023800
 8002470:	08008984 	.word	0x08008984
 8002474:	20000000 	.word	0x20000000
 8002478:	20000004 	.word	0x20000004

0800247c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800247c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002480:	b090      	sub	sp, #64	; 0x40
 8002482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
 8002488:	2300      	movs	r3, #0
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248c:	2300      	movs	r3, #0
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002494:	4b59      	ldr	r3, [pc, #356]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d00d      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0x40>
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	f200 80a1 	bhi.w	80025e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x34>
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ae:	e09b      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b0:	4b53      	ldr	r3, [pc, #332]	; (8002600 <HAL_RCC_GetSysClockFreq+0x184>)
 80024b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024b4:	e09b      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024b6:	4b53      	ldr	r3, [pc, #332]	; (8002604 <HAL_RCC_GetSysClockFreq+0x188>)
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024ba:	e098      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024bc:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024c6:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d028      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d2:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	099b      	lsrs	r3, r3, #6
 80024d8:	2200      	movs	r2, #0
 80024da:	623b      	str	r3, [r7, #32]
 80024dc:	627a      	str	r2, [r7, #36]	; 0x24
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024e4:	2100      	movs	r1, #0
 80024e6:	4b47      	ldr	r3, [pc, #284]	; (8002604 <HAL_RCC_GetSysClockFreq+0x188>)
 80024e8:	fb03 f201 	mul.w	r2, r3, r1
 80024ec:	2300      	movs	r3, #0
 80024ee:	fb00 f303 	mul.w	r3, r0, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	4a43      	ldr	r2, [pc, #268]	; (8002604 <HAL_RCC_GetSysClockFreq+0x188>)
 80024f6:	fba0 1202 	umull	r1, r2, r0, r2
 80024fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024fc:	460a      	mov	r2, r1
 80024fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002502:	4413      	add	r3, r2
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002508:	2200      	movs	r2, #0
 800250a:	61bb      	str	r3, [r7, #24]
 800250c:	61fa      	str	r2, [r7, #28]
 800250e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002512:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002516:	f7fd fed3 	bl	80002c0 <__aeabi_uldivmod>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4613      	mov	r3, r2
 8002520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002522:	e053      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	2200      	movs	r2, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	617a      	str	r2, [r7, #20]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002536:	f04f 0b00 	mov.w	fp, #0
 800253a:	4652      	mov	r2, sl
 800253c:	465b      	mov	r3, fp
 800253e:	f04f 0000 	mov.w	r0, #0
 8002542:	f04f 0100 	mov.w	r1, #0
 8002546:	0159      	lsls	r1, r3, #5
 8002548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254c:	0150      	lsls	r0, r2, #5
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	ebb2 080a 	subs.w	r8, r2, sl
 8002556:	eb63 090b 	sbc.w	r9, r3, fp
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002566:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800256a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800256e:	ebb2 0408 	subs.w	r4, r2, r8
 8002572:	eb63 0509 	sbc.w	r5, r3, r9
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	00eb      	lsls	r3, r5, #3
 8002580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002584:	00e2      	lsls	r2, r4, #3
 8002586:	4614      	mov	r4, r2
 8002588:	461d      	mov	r5, r3
 800258a:	eb14 030a 	adds.w	r3, r4, sl
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	eb45 030b 	adc.w	r3, r5, fp
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025a2:	4629      	mov	r1, r5
 80025a4:	028b      	lsls	r3, r1, #10
 80025a6:	4621      	mov	r1, r4
 80025a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ac:	4621      	mov	r1, r4
 80025ae:	028a      	lsls	r2, r1, #10
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	2200      	movs	r2, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c0:	f7fd fe7e 	bl	80002c0 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4613      	mov	r3, r2
 80025ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	3301      	adds	r3, #1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80025dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025e6:	e002      	b.n	80025ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetSysClockFreq+0x184>)
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3740      	adds	r7, #64	; 0x40
 80025f4:	46bd      	mov	sp, r7
 80025f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	00f42400 	.word	0x00f42400
 8002604:	017d7840 	.word	0x017d7840

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002630:	4b69      	ldr	r3, [pc, #420]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a68      	ldr	r2, [pc, #416]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800263a:	6093      	str	r3, [r2, #8]
 800263c:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	4964      	ldr	r1, [pc, #400]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d017      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002662:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	4959      	ldr	r1, [pc, #356]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002680:	d101      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002682:	2301      	movs	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d017      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800269e:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	494a      	ldr	r1, [pc, #296]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026bc:	d101      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 808b 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	4a39      	ldr	r2, [pc, #228]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f6:	6413      	str	r3, [r2, #64]	; 0x40
 80026f8:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a34      	ldr	r2, [pc, #208]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002710:	f7fe fc28 	bl	8000f64 <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7fe fc24 	bl	8000f64 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e357      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002736:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d035      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d02e      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275e:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002774:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d114      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fbec 	bl	8000f64 <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fbe8 	bl	8000f64 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e319      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ee      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027be:	d111      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ce:	400b      	ands	r3, r1
 80027d0:	4901      	ldr	r1, [pc, #4]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000
 80027e0:	0ffffcff 	.word	0x0ffffcff
 80027e4:	4baa      	ldr	r3, [pc, #680]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4aa9      	ldr	r2, [pc, #676]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027ee:	6093      	str	r3, [r2, #8]
 80027f0:	4ba7      	ldr	r3, [pc, #668]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	49a4      	ldr	r1, [pc, #656]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d010      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800280e:	4ba0      	ldr	r3, [pc, #640]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002814:	4a9e      	ldr	r2, [pc, #632]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800281a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800281e:	4b9c      	ldr	r3, [pc, #624]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002820:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	4999      	ldr	r1, [pc, #612]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800283c:	4b94      	ldr	r3, [pc, #592]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284a:	4991      	ldr	r1, [pc, #580]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800285e:	4b8c      	ldr	r3, [pc, #560]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800286c:	4988      	ldr	r1, [pc, #544]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288e:	4980      	ldr	r1, [pc, #512]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028a2:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4977      	ldr	r1, [pc, #476]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c4:	4b72      	ldr	r3, [pc, #456]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	496f      	ldr	r1, [pc, #444]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028e6:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	f023 020c 	bic.w	r2, r3, #12
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	4966      	ldr	r1, [pc, #408]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002908:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	495e      	ldr	r1, [pc, #376]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800292a:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	4955      	ldr	r1, [pc, #340]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800296e:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002974:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4944      	ldr	r1, [pc, #272]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002996:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	493c      	ldr	r1, [pc, #240]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c0:	4933      	ldr	r1, [pc, #204]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e2:	492b      	ldr	r1, [pc, #172]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d011      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a04:	4922      	ldr	r1, [pc, #136]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a44:	4912      	ldr	r1, [pc, #72]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a68:	4909      	ldr	r1, [pc, #36]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d006      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80d9 	beq.w	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a84:	4b02      	ldr	r3, [pc, #8]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a01      	ldr	r2, [pc, #4]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a8e:	e001      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a96:	f7fe fa65 	bl	8000f64 <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a9e:	f7fe fa61 	bl	8000f64 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	; 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e194      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d021      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11d      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ad0:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad6:	0c1b      	lsrs	r3, r3, #16
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ade:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae4:	0e1b      	lsrs	r3, r3, #24
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	019a      	lsls	r2, r3, #6
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	071b      	lsls	r3, r3, #28
 8002b04:	4957      	ldr	r1, [pc, #348]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d02e      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b36:	d129      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b38:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4c:	0f1b      	lsrs	r3, r3, #28
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	019a      	lsls	r2, r3, #6
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	431a      	orrs	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	071b      	lsls	r3, r3, #28
 8002b6c:	493d      	ldr	r1, [pc, #244]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b74:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7a:	f023 021f 	bic.w	r2, r3, #31
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	3b01      	subs	r3, #1
 8002b84:	4937      	ldr	r1, [pc, #220]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01d      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9e:	0e1b      	lsrs	r3, r3, #24
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ba6:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bac:	0f1b      	lsrs	r3, r3, #28
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	019a      	lsls	r2, r3, #6
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	071b      	lsls	r3, r3, #28
 8002bcc:	4925      	ldr	r1, [pc, #148]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d011      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	019a      	lsls	r2, r3, #6
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	071b      	lsls	r3, r3, #28
 8002bfc:	4919      	ldr	r1, [pc, #100]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c10:	f7fe f9a8 	bl	8000f64 <HAL_GetTick>
 8002c14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c18:	f7fe f9a4 	bl	8000f64 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e0d7      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f040 80cd 	bne.w	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c4a:	f7fe f98b 	bl	8000f64 <HAL_GetTick>
 8002c4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c52:	f7fe f987 	bl	8000f64 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d903      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0ba      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c68:	4b5e      	ldr	r3, [pc, #376]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c74:	d0ed      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d02e      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d12a      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c9e:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cac:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	0f1b      	lsrs	r3, r3, #28
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	019a      	lsls	r2, r3, #6
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	071b      	lsls	r3, r3, #28
 8002cd2:	4944      	ldr	r1, [pc, #272]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cda:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	493d      	ldr	r1, [pc, #244]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d022      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d08:	d11d      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	0e1b      	lsrs	r3, r3, #24
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d18:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	0f1b      	lsrs	r3, r3, #28
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	019a      	lsls	r2, r3, #6
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	071b      	lsls	r3, r3, #28
 8002d3e:	4929      	ldr	r1, [pc, #164]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d028      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	0e1b      	lsrs	r3, r3, #24
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d60:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	019a      	lsls	r2, r3, #6
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	071b      	lsls	r3, r3, #28
 8002d86:	4917      	ldr	r1, [pc, #92]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	4911      	ldr	r1, [pc, #68]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fe f8d8 	bl	8000f64 <HAL_GetTick>
 8002db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002db8:	f7fe f8d4 	bl	8000f64 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e007      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd6:	d1ef      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e022      	b.n	8002e40 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fd fe6d 	bl	8000aec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f814 	bl	8002e48 <HAL_SD_InitCard>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00a      	b.n	8002e40 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e48:	b5b0      	push	{r4, r5, r7, lr}
 8002e4a:	b08e      	sub	sp, #56	; 0x38
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002e64:	2376      	movs	r3, #118	; 0x76
 8002e66:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681d      	ldr	r5, [r3, #0]
 8002e6c:	466c      	mov	r4, sp
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e80:	4628      	mov	r0, r5
 8002e82:	f001 fadd 	bl	8004440 <SDMMC_Init>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e059      	b.n	8002f4c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 fb11 	bl	80044d4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002ec2:	2002      	movs	r0, #2
 8002ec4:	f7fe f85a 	bl	8000f7c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fff3 	bl	8003eb4 <SD_PowerON>
 8002ece:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e02e      	b.n	8002f4c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 ff12 	bl	8003d18 <SD_InitCard>
 8002ef4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e01b      	b.n	8002f4c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 fb6b 	bl	80045f8 <SDMMC_CmdBlockLength>
 8002f22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00f      	beq.n	8002f4a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_SD_InitCard+0x10c>)
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3728      	adds	r7, #40	; 0x28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bdb0      	pop	{r4, r5, r7, pc}
 8002f54:	004005ff 	.word	0x004005ff

08002f58 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	; 0x30
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0c3      	b.n	8003108 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	f040 80bc 	bne.w	8003106 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	441a      	add	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d907      	bls.n	8002fb2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0aa      	b.n	8003108 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8002fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a4e      	ldr	r2, [pc, #312]	; (8003110 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a4d      	ldr	r2, [pc, #308]	; (8003114 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002fe0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3380      	adds	r3, #128	; 0x80
 8003018:	4619      	mov	r1, r3
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	025b      	lsls	r3, r3, #9
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	f7fe f98f 	bl	8001344 <HAL_DMA_Start_IT>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d017      	beq.n	800305c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800303a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a35      	ldr	r2, [pc, #212]	; (8003118 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e055      	b.n	8003108 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	2b01      	cmp	r3, #1
 8003072:	d002      	beq.n	800307a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	025b      	lsls	r3, r3, #9
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	025b      	lsls	r3, r3, #9
 8003084:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003086:	2390      	movs	r3, #144	; 0x90
 8003088:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800308a:	2302      	movs	r3, #2
 800308c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003092:	2301      	movs	r3, #1
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f107 0210 	add.w	r2, r7, #16
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 fa7d 	bl	80045a0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d90a      	bls.n	80030c2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2282      	movs	r2, #130	; 0x82
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 fae1 	bl	8004680 <SDMMC_CmdReadMultiBlock>
 80030be:	62f8      	str	r0, [r7, #44]	; 0x2c
 80030c0:	e009      	b.n	80030d6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2281      	movs	r2, #129	; 0x81
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 fab4 	bl	800463c <SDMMC_CmdReadSingleBlock>
 80030d4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e002      	b.n	8003108 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	4618      	mov	r0, r3
 800310a:	3730      	adds	r7, #48	; 0x30
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	08003b27 	.word	0x08003b27
 8003114:	08003b99 	.word	0x08003b99
 8003118:	004005ff 	.word	0x004005ff

0800311c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	; 0x30
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d107      	bne.n	8003144 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0c6      	b.n	80032d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	f040 80bf 	bne.w	80032d0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	441a      	add	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003162:	429a      	cmp	r2, r3
 8003164:	d907      	bls.n	8003176 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0ad      	b.n	80032d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2203      	movs	r2, #3
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2200      	movs	r2, #0
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 021a 	orr.w	r2, r2, #26
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	4a50      	ldr	r2, [pc, #320]	; (80032dc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800319c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	4a4f      	ldr	r2, [pc, #316]	; (80032e0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80031a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	2200      	movs	r2, #0
 80031ac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d002      	beq.n	80031bc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	025b      	lsls	r3, r3, #9
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d90a      	bls.n	80031d8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	22a0      	movs	r2, #160	; 0xa0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fa9a 	bl	8004708 <SDMMC_CmdWriteMultiBlock>
 80031d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80031d6:	e009      	b.n	80031ec <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2290      	movs	r2, #144	; 0x90
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 fa6d 	bl	80046c4 <SDMMC_CmdWriteSingleBlock>
 80031ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d012      	beq.n	8003218 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a3b      	ldr	r2, [pc, #236]	; (80032e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e05c      	b.n	80032d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	2240      	movs	r2, #64	; 0x40
 800322e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3380      	adds	r3, #128	; 0x80
 8003258:	461a      	mov	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	025b      	lsls	r3, r3, #9
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	f7fe f870 	bl	8001344 <HAL_DMA_Start_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01a      	beq.n	80032a0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 021a 	bic.w	r2, r2, #26
 8003278:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003280:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e018      	b.n	80032d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80032a0:	f04f 33ff 	mov.w	r3, #4294967295
 80032a4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	025b      	lsls	r3, r3, #9
 80032aa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80032ac:	2390      	movs	r3, #144	; 0x90
 80032ae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f107 0210 	add.w	r2, r7, #16
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 f96a 	bl	80045a0 <SDMMC_ConfigData>

      return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3730      	adds	r7, #48	; 0x30
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	08003afd 	.word	0x08003afd
 80032e0:	08003b99 	.word	0x08003b99
 80032e4:	004005ff 	.word	0x004005ff

080032e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_SD_IRQHandler+0x2e>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 ffef 	bl	80042f2 <SD_Read_IT>
 8003314:	e15a      	b.n	80035cc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 808d 	beq.w	8003440 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800332e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4b9a      	ldr	r3, [pc, #616]	; (80035a4 <HAL_SD_IRQHandler+0x2bc>)
 800333c:	400b      	ands	r3, r1
 800333e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0201 	bic.w	r2, r2, #1
 800334e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d039      	beq.n	80033ce <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <HAL_SD_IRQHandler+0x86>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d011      	beq.n	8003392 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f001 f9ea 	bl	800474c <SDMMC_CmdStopTransfer>
 8003378:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f921 	bl	80035d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f240 523a 	movw	r2, #1338	; 0x53a
 800339a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d104      	bne.n	80033be <HAL_SD_IRQHandler+0xd6>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f001 fe5a 	bl	8005078 <HAL_SD_RxCpltCallback>
 80033c4:	e102      	b.n	80035cc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f001 fe4c 	bl	8005064 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80033cc:	e0fe      	b.n	80035cc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80f9 	beq.w	80035cc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d011      	beq.n	8003408 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 f9af 	bl	800474c <SDMMC_CmdStopTransfer>
 80033ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8e6 	bl	80035d4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 80dc 	bne.w	80035cc <HAL_SD_IRQHandler+0x2e4>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 80d6 	bne.w	80035cc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0208 	bic.w	r2, r2, #8
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f001 fe13 	bl	8005064 <HAL_SD_TxCpltCallback>
}
 800343e:	e0c5      	b.n	80035cc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_SD_IRQHandler+0x178>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 ff9b 	bl	8004394 <SD_Write_IT>
 800345e:	e0b5      	b.n	80035cc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003466:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80ae 	beq.w	80035cc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	f043 0202 	orr.w	r2, r3, #2
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	f043 0208 	orr.w	r2, r3, #8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	f043 0220 	orr.w	r2, r3, #32
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	f043 0210 	orr.w	r2, r3, #16
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 f928 	bl	800474c <SDMMC_CmdStopTransfer>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f857 	bl	80035d4 <HAL_SD_ErrorCallback>
}
 8003526:	e051      	b.n	80035cc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b00      	cmp	r3, #0
 8003530:	d04c      	beq.n	80035cc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	d104      	bne.n	8003546 <HAL_SD_IRQHandler+0x25e>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b00      	cmp	r3, #0
 8003544:	d011      	beq.n	800356a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <HAL_SD_IRQHandler+0x2c0>)
 800354c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd ff56 	bl	8001404 <HAL_DMA_Abort_IT>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d036      	beq.n	80035cc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb6a 	bl	8003c3c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003568:	e030      	b.n	80035cc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <HAL_SD_IRQHandler+0x296>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d018      	beq.n	80035b0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <HAL_SD_IRQHandler+0x2c4>)
 8003584:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd ff3a 	bl	8001404 <HAL_DMA_Abort_IT>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01a      	beq.n	80035cc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fb85 	bl	8003caa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80035a0:	e014      	b.n	80035cc <HAL_SD_IRQHandler+0x2e4>
 80035a2:	bf00      	nop
 80035a4:	ffff3ec5 	.word	0xffff3ec5
 80035a8:	08003c3d 	.word	0x08003c3d
 80035ac:	08003cab 	.word	0x08003cab
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f001 fd43 	bl	8005050 <HAL_SD_AbortCallback>
}
 80035ca:	e7ff      	b.n	80035cc <HAL_SD_IRQHandler+0x2e4>
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f6:	0f9b      	lsrs	r3, r3, #30
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003602:	0e9b      	lsrs	r3, r3, #26
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	b2da      	uxtb	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003614:	0e1b      	lsrs	r3, r3, #24
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	b2da      	uxtb	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003626:	0c1b      	lsrs	r3, r3, #16
 8003628:	b2da      	uxtb	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003632:	0a1b      	lsrs	r3, r3, #8
 8003634:	b2da      	uxtb	r2, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363e:	b2da      	uxtb	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003648:	0d1b      	lsrs	r3, r3, #20
 800364a:	b29a      	uxth	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	b2da      	uxtb	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003666:	0bdb      	lsrs	r3, r3, #15
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003678:	0b9b      	lsrs	r3, r3, #14
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	b2da      	uxtb	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800368a:	0b5b      	lsrs	r3, r3, #13
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369c:	0b1b      	lsrs	r3, r3, #12
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2200      	movs	r2, #0
 80036ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d163      	bne.n	8003780 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036bc:	009a      	lsls	r2, r3, #2
 80036be:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036c2:	4013      	ands	r3, r2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80036c8:	0f92      	lsrs	r2, r2, #30
 80036ca:	431a      	orrs	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d4:	0edb      	lsrs	r3, r3, #27
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e6:	0e1b      	lsrs	r3, r3, #24
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	0d5b      	lsrs	r3, r3, #21
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	b2da      	uxtb	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800370a:	0c9b      	lsrs	r3, r3, #18
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	b2da      	uxtb	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371c:	0bdb      	lsrs	r3, r3, #15
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	b2da      	uxtb	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	7e1b      	ldrb	r3, [r3, #24]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	3302      	adds	r3, #2
 8003740:	2201      	movs	r2, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800374a:	fb03 f202 	mul.w	r2, r3, r2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	7a1b      	ldrb	r3, [r3, #8]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	2201      	movs	r2, #1
 800375e:	409a      	lsls	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800376c:	0a52      	lsrs	r2, r2, #9
 800376e:	fb03 f202 	mul.w	r2, r3, r2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377c:	661a      	str	r2, [r3, #96]	; 0x60
 800377e:	e031      	b.n	80037e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	2b01      	cmp	r3, #1
 8003786:	d11d      	bne.n	80037c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003796:	0c1b      	lsrs	r3, r3, #16
 8003798:	431a      	orrs	r2, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	3301      	adds	r3, #1
 80037a4:	029a      	lsls	r2, r3, #10
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	661a      	str	r2, [r3, #96]	; 0x60
 80037c2:	e00f      	b.n	80037e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_SD_GetCardCSD+0x344>)
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e09d      	b.n	8003920 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e8:	0b9b      	lsrs	r3, r3, #14
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037fa:	09db      	lsrs	r3, r3, #7
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003802:	b2da      	uxtb	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003812:	b2da      	uxtb	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	0fdb      	lsrs	r3, r3, #31
 800381e:	b2da      	uxtb	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	0f5b      	lsrs	r3, r3, #29
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	b2da      	uxtb	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	b2da      	uxtb	r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	0d9b      	lsrs	r3, r3, #22
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	b2da      	uxtb	r2, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	0d5b      	lsrs	r3, r3, #21
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	b2da      	uxtb	r2, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	b2da      	uxtb	r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	0bdb      	lsrs	r3, r3, #15
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	b2da      	uxtb	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	0b9b      	lsrs	r3, r3, #14
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	0b5b      	lsrs	r3, r3, #13
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	0b1b      	lsrs	r3, r3, #12
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	0a9b      	lsrs	r3, r3, #10
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	085b      	lsrs	r3, r3, #1
 8003908:	b2db      	uxtb	r3, r3
 800390a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800390e:	b2da      	uxtb	r2, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	004005ff 	.word	0x004005ff

08003930 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	b08e      	sub	sp, #56	; 0x38
 800398c:	af04      	add	r7, sp, #16
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d02e      	beq.n	8003a06 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d106      	bne.n	80039be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
 80039bc:	e029      	b.n	8003a12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c4:	d10a      	bne.n	80039dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fb2a 	bl	8004020 <SD_WideBus_Enable>
 80039cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
 80039da:	e01a      	b.n	8003a12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fb67 	bl	80040b6 <SD_WideBus_Disable>
 80039e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
 80039f6:	e00c      	b.n	8003a12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
 8003a04:	e005      	b.n	8003a12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a26      	ldr	r2, [pc, #152]	; (8003ab8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a30:	e01f      	b.n	8003a72 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681d      	ldr	r5, [r3, #0]
 8003a58:	466c      	mov	r4, sp
 8003a5a:	f107 0314 	add.w	r3, r7, #20
 8003a5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a66:	f107 0308 	add.w	r3, r7, #8
 8003a6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f000 fce7 	bl	8004440 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fdbc 	bl	80045f8 <SDMMC_CmdBlockLength>
 8003a80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00c      	beq.n	8003aa2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3728      	adds	r7, #40	; 0x28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	004005ff 	.word	0x004005ff

08003abc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003ac8:	f107 030c 	add.w	r3, r7, #12
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa7e 	bl	8003fd0 <SD_SendStatus>
 8003ad4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	0a5b      	lsrs	r3, r3, #9
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003af2:	693b      	ldr	r3, [r7, #16]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b38:	2b82      	cmp	r3, #130	; 0x82
 8003b3a:	d111      	bne.n	8003b60 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 fe03 	bl	800474c <SDMMC_CmdStopTransfer>
 8003b46:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fd3a 	bl	80035d4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0208 	bic.w	r2, r2, #8
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f001 fa75 	bl	8005078 <HAL_SD_RxCpltCallback>
#endif
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd fdd8 	bl	800175c <HAL_DMA_GetError>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d03e      	beq.n	8003c30 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d002      	beq.n	8003bce <SD_DMAError+0x36>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d12d      	bne.n	8003c2a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <SD_DMAError+0xa0>)
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003be4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff ff62 	bl	8003abc <HAL_SD_GetCardState>
 8003bf8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b06      	cmp	r3, #6
 8003bfe:	d002      	beq.n	8003c06 <SD_DMAError+0x6e>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d10a      	bne.n	8003c1c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fd9e 	bl	800474c <SDMMC_CmdStopTransfer>
 8003c10:	4602      	mov	r2, r0
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	431a      	orrs	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003c2a:	6978      	ldr	r0, [r7, #20]
 8003c2c:	f7ff fcd2 	bl	80035d4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003c30:	bf00      	nop
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	004005ff 	.word	0x004005ff

08003c3c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff ff31 	bl	8003abc <HAL_SD_GetCardState>
 8003c5a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d002      	beq.n	8003c76 <SD_DMATxAbort+0x3a>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b05      	cmp	r3, #5
 8003c74:	d10a      	bne.n	8003c8c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fd66 	bl	800474c <SDMMC_CmdStopTransfer>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	431a      	orrs	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f001 f9db 	bl	8005050 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003c9a:	e002      	b.n	8003ca2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff fc99 	bl	80035d4 <HAL_SD_ErrorCallback>
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7ff fefa 	bl	8003abc <HAL_SD_GetCardState>
 8003cc8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d002      	beq.n	8003ce4 <SD_DMARxAbort+0x3a>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	d10a      	bne.n	8003cfa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fd2f 	bl	800474c <SDMMC_CmdStopTransfer>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f001 f9a4 	bl	8005050 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003d08:	e002      	b.n	8003d10 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7ff fc62 	bl	80035d4 <HAL_SD_ErrorCallback>
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d18:	b5b0      	push	{r4, r5, r7, lr}
 8003d1a:	b094      	sub	sp, #80	; 0x50
 8003d1c:	af04      	add	r7, sp, #16
 8003d1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003d20:	2301      	movs	r3, #1
 8003d22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fbe1 	bl	80044f0 <SDMMC_GetPowerState>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d38:	e0b8      	b.n	8003eac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d02f      	beq.n	8003da2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fe0b 	bl	8004962 <SDMMC_CmdSendCID>
 8003d4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <SD_InitCard+0x40>
    {
      return errorstate;
 8003d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d56:	e0a9      	b.n	8003eac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fc0b 	bl	800457a <SDMMC_GetResponse>
 8003d64:	4602      	mov	r2, r0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2104      	movs	r1, #4
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fc02 	bl	800457a <SDMMC_GetResponse>
 8003d76:	4602      	mov	r2, r0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2108      	movs	r1, #8
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fbf9 	bl	800457a <SDMMC_GetResponse>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	210c      	movs	r1, #12
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fbf0 	bl	800457a <SDMMC_GetResponse>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d00d      	beq.n	8003dc6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f107 020e 	add.w	r2, r7, #14
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fe11 	bl	80049dc <SDMMC_CmdSetRelAdd>
 8003dba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <SD_InitCard+0xae>
    {
      return errorstate;
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	e072      	b.n	8003eac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d036      	beq.n	8003e3c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003dce:	89fb      	ldrh	r3, [r7, #14]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dde:	041b      	lsls	r3, r3, #16
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 fddb 	bl	800499e <SDMMC_CmdSendCSD>
 8003de8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df2:	e05b      	b.n	8003eac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fbbd 	bl	800457a <SDMMC_GetResponse>
 8003e00:	4602      	mov	r2, r0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2104      	movs	r1, #4
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fbb4 	bl	800457a <SDMMC_GetResponse>
 8003e12:	4602      	mov	r2, r0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2108      	movs	r1, #8
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fbab 	bl	800457a <SDMMC_GetResponse>
 8003e24:	4602      	mov	r2, r0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	210c      	movs	r1, #12
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fba2 	bl	800457a <SDMMC_GetResponse>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2104      	movs	r1, #4
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fb99 	bl	800457a <SDMMC_GetResponse>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	0d1a      	lsrs	r2, r3, #20
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003e50:	f107 0310 	add.w	r3, r7, #16
 8003e54:	4619      	mov	r1, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff fbc6 	bl	80035e8 <HAL_SD_GetCardCSD>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e66:	e021      	b.n	8003eac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6819      	ldr	r1, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	2200      	movs	r2, #0
 8003e74:	461c      	mov	r4, r3
 8003e76:	4615      	mov	r5, r2
 8003e78:	4622      	mov	r2, r4
 8003e7a:	462b      	mov	r3, r5
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	f000 fc87 	bl	8004790 <SDMMC_CmdSelDesel>
 8003e82:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <SD_InitCard+0x176>
  {
    return errorstate;
 8003e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8c:	e00e      	b.n	8003eac <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681d      	ldr	r5, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	466c      	mov	r4, sp
 8003e96:	f103 0210 	add.w	r2, r3, #16
 8003e9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f000 facb 	bl	8004440 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3740      	adds	r7, #64	; 0x40
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bdb0      	pop	{r4, r5, r7, pc}

08003eb4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fc82 	bl	80047d6 <SDMMC_CmdGoIdleState>
 8003ed2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <SD_PowerON+0x2a>
  {
    return errorstate;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	e072      	b.n	8003fc4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fc95 	bl	8004812 <SDMMC_CmdOperCond>
 8003ee8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00d      	beq.n	8003f0c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fc6b 	bl	80047d6 <SDMMC_CmdGoIdleState>
 8003f00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d004      	beq.n	8003f12 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	e05b      	b.n	8003fc4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d137      	bne.n	8003f8a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fc95 	bl	8004850 <SDMMC_CmdAppCommand>
 8003f26:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d02d      	beq.n	8003f8a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f32:	e047      	b.n	8003fc4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fc88 	bl	8004850 <SDMMC_CmdAppCommand>
 8003f40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <SD_PowerON+0x98>
    {
      return errorstate;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	e03b      	b.n	8003fc4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	491e      	ldr	r1, [pc, #120]	; (8003fcc <SD_PowerON+0x118>)
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fc9e 	bl	8004894 <SDMMC_CmdAppOperCommand>
 8003f58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f64:	e02e      	b.n	8003fc4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fb04 	bl	800457a <SDMMC_GetResponse>
 8003f72:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	0fdb      	lsrs	r3, r3, #31
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <SD_PowerON+0xcc>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <SD_PowerON+0xce>
 8003f80:	2300      	movs	r3, #0
 8003f82:	613b      	str	r3, [r7, #16]

    count++;
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3301      	adds	r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d802      	bhi.n	8003f9a <SD_PowerON+0xe6>
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0cc      	beq.n	8003f34 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d902      	bls.n	8003faa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fa8:	e00c      	b.n	8003fc4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
 8003fba:	e002      	b.n	8003fc2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	c1100000 	.word	0xc1100000

08003fd0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fe4:	e018      	b.n	8004018 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f000 fd13 	bl	8004a1e <SDMMC_CmdSendStatus>
 8003ff8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	e009      	b.n	8004018 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fab5 	bl	800457a <SDMMC_GetResponse>
 8004010:	4602      	mov	r2, r0
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	2300      	movs	r3, #0
 800402e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fa9f 	bl	800457a <SDMMC_GetResponse>
 800403c:	4603      	mov	r3, r0
 800403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004046:	d102      	bne.n	800404e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800404c:	e02f      	b.n	80040ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	4619      	mov	r1, r3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f879 	bl	800414c <SD_FindSCR>
 800405a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	e023      	b.n	80040ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01c      	beq.n	80040aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f000 fbe7 	bl	8004850 <SDMMC_CmdAppCommand>
 8004082:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	e00f      	b.n	80040ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2102      	movs	r1, #2
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fc21 	bl	80048dc <SDMMC_CmdBusWidth>
 800409a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	e003      	b.n	80040ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e001      	b.n	80040ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80040aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fa54 	bl	800457a <SDMMC_GetResponse>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040dc:	d102      	bne.n	80040e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80040de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040e2:	e02f      	b.n	8004144 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f82e 	bl	800414c <SD_FindSCR>
 80040f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	e023      	b.n	8004144 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01c      	beq.n	8004140 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f000 fb9c 	bl	8004850 <SDMMC_CmdAppCommand>
 8004118:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	e00f      	b.n	8004144 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fbd6 	bl	80048dc <SDMMC_CmdBusWidth>
 8004130:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	e003      	b.n	8004144 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800413c:	2300      	movs	r3, #0
 800413e:	e001      	b.n	8004144 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004140:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800414c:	b590      	push	{r4, r7, lr}
 800414e:	b08f      	sub	sp, #60	; 0x3c
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004156:	f7fc ff05 	bl	8000f64 <HAL_GetTick>
 800415a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004160:	2300      	movs	r3, #0
 8004162:	60bb      	str	r3, [r7, #8]
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2108      	movs	r1, #8
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fa40 	bl	80045f8 <SDMMC_CmdBlockLength>
 8004178:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	e0b2      	b.n	80042ea <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	041b      	lsls	r3, r3, #16
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f000 fb5d 	bl	8004850 <SDMMC_CmdAppCommand>
 8004196:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	e0a3      	b.n	80042ea <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80041a2:	f04f 33ff 	mov.w	r3, #4294967295
 80041a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80041a8:	2308      	movs	r3, #8
 80041aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80041ac:	2330      	movs	r3, #48	; 0x30
 80041ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80041b0:	2302      	movs	r3, #2
 80041b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80041b8:	2301      	movs	r3, #1
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f107 0210 	add.w	r2, r7, #16
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 f9ea 	bl	80045a0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fba5 	bl	8004920 <SDMMC_CmdSendSCR>
 80041d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d02a      	beq.n	8004234 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	e083      	b.n	80042ea <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00f      	beq.n	8004210 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	f107 0208 	add.w	r2, r7, #8
 80041fc:	18d4      	adds	r4, r2, r3
 80041fe:	4608      	mov	r0, r1
 8004200:	f000 f94a 	bl	8004498 <SDMMC_ReadFIFO>
 8004204:	4603      	mov	r3, r0
 8004206:	6023      	str	r3, [r4, #0]
      index++;
 8004208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420a:	3301      	adds	r3, #1
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
 800420e:	e006      	b.n	800421e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d012      	beq.n	8004244 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800421e:	f7fc fea1 	bl	8000f64 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d102      	bne.n	8004234 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800422e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004232:	e05a      	b.n	80042ea <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0cf      	beq.n	80041e2 <SD_FindSCR+0x96>
 8004242:	e000      	b.n	8004246 <SD_FindSCR+0xfa>
      break;
 8004244:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2208      	movs	r2, #8
 800425a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800425c:	2308      	movs	r3, #8
 800425e:	e044      	b.n	80042ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2202      	movs	r2, #2
 8004274:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004276:	2302      	movs	r3, #2
 8004278:	e037      	b.n	80042ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2220      	movs	r2, #32
 800428e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004290:	2320      	movs	r3, #32
 8004292:	e02a      	b.n	80042ea <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f240 523a 	movw	r2, #1338	; 0x53a
 800429c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	061a      	lsls	r2, r3, #24
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80042b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	0e1b      	lsrs	r3, r3, #24
 80042ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	601a      	str	r2, [r3, #0]
    scr++;
 80042c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c2:	3304      	adds	r3, #4
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	061a      	lsls	r2, r3, #24
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	0e1b      	lsrs	r3, r3, #24
 80042e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	373c      	adds	r7, #60	; 0x3c
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd90      	pop	{r4, r7, pc}

080042f2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d03f      	beq.n	800438c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	e033      	b.n	800437a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f8be 	bl	8004498 <SDMMC_ReadFIFO>
 800431c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3301      	adds	r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	3b01      	subs	r3, #1
 8004330:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3301      	adds	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3b01      	subs	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	b2da      	uxtb	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	3b01      	subs	r3, #1
 800435c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	0e1b      	lsrs	r3, r3, #24
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	3b01      	subs	r3, #1
 8004372:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3301      	adds	r3, #1
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2b07      	cmp	r3, #7
 800437e:	d9c8      	bls.n	8004312 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800438c:	bf00      	nop
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d043      	beq.n	8004436 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e037      	b.n	8004424 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3301      	adds	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	3b01      	subs	r3, #1
 80043dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	041a      	lsls	r2, r3, #16
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3301      	adds	r3, #1
 80043ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	061a      	lsls	r2, r3, #24
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	3b01      	subs	r3, #1
 800440c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f107 0208 	add.w	r2, r7, #8
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f84a 	bl	80044b2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3301      	adds	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b07      	cmp	r3, #7
 8004428:	d9c4      	bls.n	80043b4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004436:	bf00      	nop
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004440:	b084      	sub	sp, #16
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	f107 001c 	add.w	r0, r7, #28
 800444e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004456:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004458:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800445a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800445e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004462:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004466:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800446a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <SDMMC_Init+0x54>)
 8004478:	4013      	ands	r3, r2
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	b004      	add	sp, #16
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	ffff8100 	.word	0xffff8100

08004498 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
 80044ba:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2203      	movs	r2, #3
 80044e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0303 	and.w	r3, r3, #3
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800452a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004530:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004536:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <SDMMC_SendCommand+0x50>)
 8004544:	4013      	ands	r3, r2
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	fffff000 	.word	0xfffff000

08004560 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	b2db      	uxtb	r3, r3
}
 800456e:	4618      	mov	r0, r3
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3314      	adds	r3, #20
 8004588:	461a      	mov	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	4413      	add	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
}  
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045c6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80045cc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80045d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0

}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004606:	2310      	movs	r3, #16
 8004608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800460a:	2340      	movs	r3, #64	; 0x40
 800460c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004618:	f107 0308 	add.w	r3, r7, #8
 800461c:	4619      	mov	r1, r3
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff ff74 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	2110      	movs	r1, #16
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa1a 	bl	8004a64 <SDMMC_GetCmdResp1>
 8004630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004632:	69fb      	ldr	r3, [r7, #28]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3720      	adds	r7, #32
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800464a:	2311      	movs	r3, #17
 800464c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800464e:	2340      	movs	r3, #64	; 0x40
 8004650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800465c:	f107 0308 	add.w	r3, r7, #8
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff ff52 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004668:	f241 3288 	movw	r2, #5000	; 0x1388
 800466c:	2111      	movs	r1, #17
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9f8 	bl	8004a64 <SDMMC_GetCmdResp1>
 8004674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004676:	69fb      	ldr	r3, [r7, #28]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800468e:	2312      	movs	r3, #18
 8004690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004692:	2340      	movs	r3, #64	; 0x40
 8004694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800469a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800469e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046a0:	f107 0308 	add.w	r3, r7, #8
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff ff30 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	2112      	movs	r1, #18
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f9d6 	bl	8004a64 <SDMMC_GetCmdResp1>
 80046b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046ba:	69fb      	ldr	r3, [r7, #28]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b088      	sub	sp, #32
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80046d2:	2318      	movs	r3, #24
 80046d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80046d6:	2340      	movs	r3, #64	; 0x40
 80046d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046e4:	f107 0308 	add.w	r3, r7, #8
 80046e8:	4619      	mov	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ff0e 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80046f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f4:	2118      	movs	r1, #24
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9b4 	bl	8004a64 <SDMMC_GetCmdResp1>
 80046fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046fe:	69fb      	ldr	r3, [r7, #28]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004716:	2319      	movs	r3, #25
 8004718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800471a:	2340      	movs	r3, #64	; 0x40
 800471c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004726:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff feec 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	2119      	movs	r1, #25
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f992 	bl	8004a64 <SDMMC_GetCmdResp1>
 8004740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004742:	69fb      	ldr	r3, [r7, #28]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004758:	230c      	movs	r3, #12
 800475a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800475c:	2340      	movs	r3, #64	; 0x40
 800475e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004760:	2300      	movs	r3, #0
 8004762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004768:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff fecb 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004776:	4a05      	ldr	r2, [pc, #20]	; (800478c <SDMMC_CmdStopTransfer+0x40>)
 8004778:	210c      	movs	r1, #12
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f972 	bl	8004a64 <SDMMC_GetCmdResp1>
 8004780:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004782:	69fb      	ldr	r3, [r7, #28]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3720      	adds	r7, #32
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	05f5e100 	.word	0x05f5e100

08004790 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80047a0:	2307      	movs	r3, #7
 80047a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80047a4:	2340      	movs	r3, #64	; 0x40
 80047a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047b2:	f107 0310 	add.w	r3, r7, #16
 80047b6:	4619      	mov	r1, r3
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f7ff fea7 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	2107      	movs	r1, #7
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f94d 	bl	8004a64 <SDMMC_GetCmdResp1>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3728      	adds	r7, #40	; 0x28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b088      	sub	sp, #32
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047f4:	f107 0308 	add.w	r3, r7, #8
 80047f8:	4619      	mov	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fe86 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb67 	bl	8004ed4 <SDMMC_GetCmdError>
 8004806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004808:	69fb      	ldr	r3, [r7, #28]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b088      	sub	sp, #32
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800481a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800481e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004820:	2308      	movs	r3, #8
 8004822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004824:	2340      	movs	r3, #64	; 0x40
 8004826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800482c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004830:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff fe67 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fafa 	bl	8004e38 <SDMMC_GetCmdResp7>
 8004844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004846:	69fb      	ldr	r3, [r7, #28]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3720      	adds	r7, #32
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800485e:	2337      	movs	r3, #55	; 0x37
 8004860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004862:	2340      	movs	r3, #64	; 0x40
 8004864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800486a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800486e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004870:	f107 0308 	add.w	r3, r7, #8
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fe48 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	2137      	movs	r1, #55	; 0x37
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8ee 	bl	8004a64 <SDMMC_GetCmdResp1>
 8004888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800488a:	69fb      	ldr	r3, [r7, #28]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <SDMMC_CmdAppOperCommand+0x44>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80048a6:	2329      	movs	r3, #41	; 0x29
 80048a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048aa:	2340      	movs	r3, #64	; 0x40
 80048ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048b8:	f107 0308 	add.w	r3, r7, #8
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff fe24 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa03 	bl	8004cd0 <SDMMC_GetCmdResp3>
 80048ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048cc:	69fb      	ldr	r3, [r7, #28]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3720      	adds	r7, #32
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	80100000 	.word	0x80100000

080048dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80048ea:	2306      	movs	r3, #6
 80048ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048ee:	2340      	movs	r3, #64	; 0x40
 80048f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048fc:	f107 0308 	add.w	r3, r7, #8
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fe02 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	2106      	movs	r1, #6
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8a8 	bl	8004a64 <SDMMC_GetCmdResp1>
 8004914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004916:	69fb      	ldr	r3, [r7, #28]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800492c:	2333      	movs	r3, #51	; 0x33
 800492e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004930:	2340      	movs	r3, #64	; 0x40
 8004932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800493c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fde1 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800494a:	f241 3288 	movw	r2, #5000	; 0x1388
 800494e:	2133      	movs	r1, #51	; 0x33
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f887 	bl	8004a64 <SDMMC_GetCmdResp1>
 8004956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004958:	69fb      	ldr	r3, [r7, #28]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b088      	sub	sp, #32
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800496e:	2302      	movs	r3, #2
 8004970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004972:	23c0      	movs	r3, #192	; 0xc0
 8004974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800497a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800497e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004980:	f107 0308 	add.w	r3, r7, #8
 8004984:	4619      	mov	r1, r3
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fdc0 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 f957 	bl	8004c40 <SDMMC_GetCmdResp2>
 8004992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004994:	69fb      	ldr	r3, [r7, #28]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b088      	sub	sp, #32
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80049ac:	2309      	movs	r3, #9
 80049ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80049b0:	23c0      	movs	r3, #192	; 0xc0
 80049b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049be:	f107 0308 	add.w	r3, r7, #8
 80049c2:	4619      	mov	r1, r3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff fda1 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f938 	bl	8004c40 <SDMMC_GetCmdResp2>
 80049d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049d2:	69fb      	ldr	r3, [r7, #28]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80049ea:	2303      	movs	r3, #3
 80049ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049ee:	2340      	movs	r3, #64	; 0x40
 80049f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fd82 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	2103      	movs	r1, #3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f99d 	bl	8004d4c <SDMMC_GetCmdResp6>
 8004a12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a14:	69fb      	ldr	r3, [r7, #28]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004a2c:	230d      	movs	r3, #13
 8004a2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a3e:	f107 0308 	add.w	r3, r7, #8
 8004a42:	4619      	mov	r1, r3
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fd61 	bl	800450c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	210d      	movs	r1, #13
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f807 	bl	8004a64 <SDMMC_GetCmdResp1>
 8004a56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a58:	69fb      	ldr	r3, [r7, #28]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004a72:	4b70      	ldr	r3, [pc, #448]	; (8004c34 <SDMMC_GetCmdResp1+0x1d0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a70      	ldr	r2, [pc, #448]	; (8004c38 <SDMMC_GetCmdResp1+0x1d4>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	0a5a      	lsrs	r2, r3, #9
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	fb02 f303 	mul.w	r3, r2, r3
 8004a84:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	1e5a      	subs	r2, r3, #1
 8004a8a:	61fa      	str	r2, [r7, #28]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a94:	e0c9      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0ef      	beq.n	8004a86 <SDMMC_GetCmdResp1+0x22>
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ea      	bne.n	8004a86 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	e0b1      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0a6      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	22c5      	movs	r2, #197	; 0xc5
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f7ff fd3c 	bl	8004560 <SDMMC_GetCommandResponse>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	461a      	mov	r2, r3
 8004aec:	7afb      	ldrb	r3, [r7, #11]
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d001      	beq.n	8004af6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e099      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004af6:	2100      	movs	r1, #0
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f7ff fd3e 	bl	800457a <SDMMC_GetResponse>
 8004afe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4b4e      	ldr	r3, [pc, #312]	; (8004c3c <SDMMC_GetCmdResp1+0x1d8>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e08d      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	da02      	bge.n	8004b1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004b14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b18:	e087      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004b24:	2340      	movs	r3, #64	; 0x40
 8004b26:	e080      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	e079      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b44:	e071      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b54:	e069      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b64:	e061      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b74:	e059      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b84:	e051      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b94:	e049      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004ba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ba4:	e041      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bb4:	e039      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bc4:	e031      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004bd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bd4:	e029      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004be0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004be4:	e021      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004bf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bf4:	e019      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004c00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c04:	e011      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004c10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c14:	e009      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004c20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004c24:	e001      	b.n	8004c2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000000 	.word	0x20000000
 8004c38:	10624dd3 	.word	0x10624dd3
 8004c3c:	fdffe008 	.word	0xfdffe008

08004c40 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c48:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <SDMMC_GetCmdResp2+0x88>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <SDMMC_GetCmdResp2+0x8c>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	0a5b      	lsrs	r3, r3, #9
 8004c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1e5a      	subs	r2, r3, #1
 8004c62:	60fa      	str	r2, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c6c:	e026      	b.n	8004cbc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0ef      	beq.n	8004c5e <SDMMC_GetCmdResp2+0x1e>
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1ea      	bne.n	8004c5e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2204      	movs	r2, #4
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c9a:	2304      	movs	r3, #4
 8004c9c:	e00e      	b.n	8004cbc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d004      	beq.n	8004cb4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e003      	b.n	8004cbc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	22c5      	movs	r2, #197	; 0xc5
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	10624dd3 	.word	0x10624dd3

08004cd0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cd8:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <SDMMC_GetCmdResp3+0x74>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1a      	ldr	r2, [pc, #104]	; (8004d48 <SDMMC_GetCmdResp3+0x78>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	0a5b      	lsrs	r3, r3, #9
 8004ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce8:	fb02 f303 	mul.w	r3, r2, r3
 8004cec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1e5a      	subs	r2, r3, #1
 8004cf2:	60fa      	str	r2, [r7, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cfc:	e01b      	b.n	8004d36 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0ef      	beq.n	8004cee <SDMMC_GetCmdResp3+0x1e>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ea      	bne.n	8004cee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2204      	movs	r2, #4
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	e003      	b.n	8004d36 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	22c5      	movs	r2, #197	; 0xc5
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000000 	.word	0x20000000
 8004d48:	10624dd3 	.word	0x10624dd3

08004d4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	460b      	mov	r3, r1
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d5a:	4b35      	ldr	r3, [pc, #212]	; (8004e30 <SDMMC_GetCmdResp6+0xe4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a35      	ldr	r2, [pc, #212]	; (8004e34 <SDMMC_GetCmdResp6+0xe8>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	0a5b      	lsrs	r3, r3, #9
 8004d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
 8004d6e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	1e5a      	subs	r2, r3, #1
 8004d74:	61fa      	str	r2, [r7, #28]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d7e:	e052      	b.n	8004e26 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ef      	beq.n	8004d70 <SDMMC_GetCmdResp6+0x24>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ea      	bne.n	8004d70 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2204      	movs	r2, #4
 8004daa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004dac:	2304      	movs	r3, #4
 8004dae:	e03a      	b.n	8004e26 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e02f      	b.n	8004e26 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff fbca 	bl	8004560 <SDMMC_GetCommandResponse>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	461a      	mov	r2, r3
 8004dd0:	7afb      	ldrb	r3, [r7, #11]
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d001      	beq.n	8004dda <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e025      	b.n	8004e26 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22c5      	movs	r2, #197	; 0xc5
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004de0:	2100      	movs	r1, #0
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff fbc9 	bl	800457a <SDMMC_GetResponse>
 8004de8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e011      	b.n	8004e26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e10:	e009      	b.n	8004e26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e20:	e001      	b.n	8004e26 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000000 	.word	0x20000000
 8004e34:	10624dd3 	.word	0x10624dd3

08004e38 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e40:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <SDMMC_GetCmdResp7+0x94>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <SDMMC_GetCmdResp7+0x98>)
 8004e46:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4a:	0a5b      	lsrs	r3, r3, #9
 8004e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1e5a      	subs	r2, r3, #1
 8004e5a:	60fa      	str	r2, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d102      	bne.n	8004e66 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e64:	e02c      	b.n	8004ec0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0ef      	beq.n	8004e56 <SDMMC_GetCmdResp7+0x1e>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ea      	bne.n	8004e56 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d004      	beq.n	8004e96 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e92:	2304      	movs	r3, #4
 8004e94:	e014      	b.n	8004ec0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d004      	beq.n	8004eac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e009      	b.n	8004ec0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2240      	movs	r2, #64	; 0x40
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ebe:	2300      	movs	r3, #0
  
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	10624dd3 	.word	0x10624dd3

08004ed4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004edc:	4b11      	ldr	r3, [pc, #68]	; (8004f24 <SDMMC_GetCmdError+0x50>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <SDMMC_GetCmdError+0x54>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	0a5b      	lsrs	r3, r3, #9
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1e5a      	subs	r2, r3, #1
 8004ef6:	60fa      	str	r2, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004efc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f00:	e009      	b.n	8004f16 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f1      	beq.n	8004ef2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	22c5      	movs	r2, #197	; 0xc5
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000000 	.word	0x20000000
 8004f28:	10624dd3 	.word	0x10624dd3

08004f2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004f30:	4904      	ldr	r1, [pc, #16]	; (8004f44 <MX_FATFS_Init+0x18>)
 8004f32:	4805      	ldr	r0, [pc, #20]	; (8004f48 <MX_FATFS_Init+0x1c>)
 8004f34:	f003 f834 	bl	8007fa0 <FATFS_LinkDriver>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <MX_FATFS_Init+0x20>)
 8004f3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f40:	bf00      	nop
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	200001dc 	.word	0x200001dc
 8004f48:	0800899c 	.word	0x0800899c
 8004f4c:	200001d8 	.word	0x200001d8

08004f50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004f6a:	f000 f896 	bl	800509a <BSP_SD_IsDetected>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d001      	beq.n	8004f78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8004f74:	2302      	movs	r3, #2
 8004f76:	e012      	b.n	8004f9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8004f78:	480b      	ldr	r0, [pc, #44]	; (8004fa8 <BSP_SD_Init+0x48>)
 8004f7a:	f7fd ff35 	bl	8002de8 <HAL_SD_Init>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d109      	bne.n	8004f9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8004f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f8c:	4806      	ldr	r0, [pc, #24]	; (8004fa8 <BSP_SD_Init+0x48>)
 8004f8e:	f7fe fcfb 	bl	8003988 <HAL_SD_ConfigWideBusOperation>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2000008c 	.word	0x2000008c

08004fac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	68f9      	ldr	r1, [r7, #12]
 8004fc2:	4806      	ldr	r0, [pc, #24]	; (8004fdc <BSP_SD_ReadBlocks_DMA+0x30>)
 8004fc4:	f7fd ffc8 	bl	8002f58 <HAL_SD_ReadBlocks_DMA>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	2000008c 	.word	0x2000008c

08004fe0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	68f9      	ldr	r1, [r7, #12]
 8004ff6:	4806      	ldr	r0, [pc, #24]	; (8005010 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004ff8:	f7fe f890 	bl	800311c <HAL_SD_WriteBlocks_DMA>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	2000008c 	.word	0x2000008c

08005014 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005018:	4805      	ldr	r0, [pc, #20]	; (8005030 <BSP_SD_GetCardState+0x1c>)
 800501a:	f7fe fd4f 	bl	8003abc <HAL_SD_GetCardState>
 800501e:	4603      	mov	r3, r0
 8005020:	2b04      	cmp	r3, #4
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
}
 800502a:	4618      	mov	r0, r3
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	2000008c 	.word	0x2000008c

08005034 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4803      	ldr	r0, [pc, #12]	; (800504c <BSP_SD_GetCardInfo+0x18>)
 8005040:	f7fe fc76 	bl	8003930 <HAL_SD_GetCardInfo>
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	2000008c 	.word	0x2000008c

08005050 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005058:	f000 f818 	bl	800508c <BSP_SD_AbortCallback>
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800506c:	f000 f9a8 	bl	80053c0 <BSP_SD_WriteCpltCallback>
}
 8005070:	bf00      	nop
 8005072:	3708      	adds	r7, #8
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005080:	f000 f9aa 	bl	80053d8 <BSP_SD_ReadCpltCallback>
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0

}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80050a0:	2301      	movs	r3, #1
 80050a2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80050a4:	f000 f80c 	bl	80050c0 <BSP_PlatformIsDetected>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80050ae:	2300      	movs	r3, #0
 80050b0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	b2db      	uxtb	r3, r3
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80050c6:	2301      	movs	r3, #1
 80050c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80050ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050ce:	4806      	ldr	r0, [pc, #24]	; (80050e8 <BSP_PlatformIsDetected+0x28>)
 80050d0:	f7fc fddc 	bl	8001c8c <HAL_GPIO_ReadPin>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80050da:	2300      	movs	r3, #0
 80050dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80050de:	79fb      	ldrb	r3, [r7, #7]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40020800 	.word	0x40020800

080050ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80050f4:	f7fb ff36 	bl	8000f64 <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80050fa:	e006      	b.n	800510a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80050fc:	f7ff ff8a 	bl	8005014 <BSP_SD_GetCardState>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005106:	2300      	movs	r3, #0
 8005108:	e009      	b.n	800511e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800510a:	f7fb ff2b 	bl	8000f64 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d8f0      	bhi.n	80050fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800511a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <SD_CheckStatus+0x38>)
 8005134:	2201      	movs	r2, #1
 8005136:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005138:	f7ff ff6c 	bl	8005014 <BSP_SD_GetCardState>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <SD_CheckStatus+0x38>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4b04      	ldr	r3, [pc, #16]	; (8005160 <SD_CheckStatus+0x38>)
 8005150:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005152:	4b03      	ldr	r3, [pc, #12]	; (8005160 <SD_CheckStatus+0x38>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
}
 8005158:	4618      	mov	r0, r3
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20000009 	.word	0x20000009

08005164 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800516e:	f7ff fef7 	bl	8004f60 <BSP_SD_Init>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d107      	bne.n	8005188 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ffd4 	bl	8005128 <SD_CheckStatus>
 8005180:	4603      	mov	r3, r0
 8005182:	461a      	mov	r2, r3
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <SD_initialize+0x34>)
 8005186:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <SD_initialize+0x34>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	b2db      	uxtb	r3, r3
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000009 	.word	0x20000009

0800519c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ffbd 	bl	8005128 <SD_CheckStatus>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4603      	mov	r3, r0
 80051c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80051cc:	f247 5030 	movw	r0, #30000	; 0x7530
 80051d0:	f7ff ff8c 	bl	80050ec <SD_CheckStatusWithTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da01      	bge.n	80051de <SD_read+0x26>
  {
    return res;
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	e03b      	b.n	8005256 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	68b8      	ldr	r0, [r7, #8]
 80051e4:	f7ff fee2 	bl	8004fac <BSP_SD_ReadBlocks_DMA>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d132      	bne.n	8005254 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80051ee:	4b1c      	ldr	r3, [pc, #112]	; (8005260 <SD_read+0xa8>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80051f4:	f7fb feb6 	bl	8000f64 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80051fa:	bf00      	nop
 80051fc:	4b18      	ldr	r3, [pc, #96]	; (8005260 <SD_read+0xa8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <SD_read+0x5e>
 8005204:	f7fb feae 	bl	8000f64 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f247 522f 	movw	r2, #29999	; 0x752f
 8005212:	4293      	cmp	r3, r2
 8005214:	d9f2      	bls.n	80051fc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <SD_read+0xa8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d102      	bne.n	8005224 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	75fb      	strb	r3, [r7, #23]
 8005222:	e017      	b.n	8005254 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <SD_read+0xa8>)
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800522a:	f7fb fe9b 	bl	8000f64 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005230:	e007      	b.n	8005242 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005232:	f7ff feef 	bl	8005014 <BSP_SD_GetCardState>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <SD_read+0x8a>
          {
            res = RES_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005240:	e008      	b.n	8005254 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005242:	f7fb fe8f 	bl	8000f64 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	f247 522f 	movw	r2, #29999	; 0x752f
 8005250:	4293      	cmp	r3, r2
 8005252:	d9ee      	bls.n	8005232 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000644 	.word	0x20000644

08005264 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4603      	mov	r3, r0
 8005272:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005278:	4b24      	ldr	r3, [pc, #144]	; (800530c <SD_write+0xa8>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800527e:	f247 5030 	movw	r0, #30000	; 0x7530
 8005282:	f7ff ff33 	bl	80050ec <SD_CheckStatusWithTimeout>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	da01      	bge.n	8005290 <SD_write+0x2c>
  {
    return res;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	e038      	b.n	8005302 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	68b8      	ldr	r0, [r7, #8]
 8005296:	f7ff fea3 	bl	8004fe0 <BSP_SD_WriteBlocks_DMA>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d12f      	bne.n	8005300 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80052a0:	f7fb fe60 	bl	8000f64 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80052a6:	bf00      	nop
 80052a8:	4b18      	ldr	r3, [pc, #96]	; (800530c <SD_write+0xa8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d108      	bne.n	80052c2 <SD_write+0x5e>
 80052b0:	f7fb fe58 	bl	8000f64 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f247 522f 	movw	r2, #29999	; 0x752f
 80052be:	4293      	cmp	r3, r2
 80052c0:	d9f2      	bls.n	80052a8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <SD_write+0xa8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	75fb      	strb	r3, [r7, #23]
 80052ce:	e017      	b.n	8005300 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <SD_write+0xa8>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80052d6:	f7fb fe45 	bl	8000f64 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80052dc:	e007      	b.n	80052ee <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80052de:	f7ff fe99 	bl	8005014 <BSP_SD_GetCardState>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <SD_write+0x8a>
          {
            res = RES_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	75fb      	strb	r3, [r7, #23]
            break;
 80052ec:	e008      	b.n	8005300 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80052ee:	f7fb fe39 	bl	8000f64 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	f247 522f 	movw	r2, #29999	; 0x752f
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d9ee      	bls.n	80052de <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005300:	7dfb      	ldrb	r3, [r7, #23]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000640 	.word	0x20000640

08005310 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08c      	sub	sp, #48	; 0x30
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	603a      	str	r2, [r7, #0]
 800531a:	71fb      	strb	r3, [r7, #7]
 800531c:	460b      	mov	r3, r1
 800531e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005326:	4b25      	ldr	r3, [pc, #148]	; (80053bc <SD_ioctl+0xac>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <SD_ioctl+0x28>
 8005334:	2303      	movs	r3, #3
 8005336:	e03c      	b.n	80053b2 <SD_ioctl+0xa2>

  switch (cmd)
 8005338:	79bb      	ldrb	r3, [r7, #6]
 800533a:	2b03      	cmp	r3, #3
 800533c:	d834      	bhi.n	80053a8 <SD_ioctl+0x98>
 800533e:	a201      	add	r2, pc, #4	; (adr r2, 8005344 <SD_ioctl+0x34>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005355 	.word	0x08005355
 8005348:	0800535d 	.word	0x0800535d
 800534c:	08005375 	.word	0x08005375
 8005350:	0800538f 	.word	0x0800538f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800535a:	e028      	b.n	80053ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800535c:	f107 030c 	add.w	r3, r7, #12
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fe67 	bl	8005034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005372:	e01c      	b.n	80053ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fe5b 	bl	8005034 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	b29a      	uxth	r2, r3
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800538c:	e00f      	b.n	80053ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800538e:	f107 030c 	add.w	r3, r7, #12
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fe4e 	bl	8005034 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	0a5a      	lsrs	r2, r3, #9
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80053a6:	e002      	b.n	80053ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80053a8:	2304      	movs	r3, #4
 80053aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80053ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3730      	adds	r7, #48	; 0x30
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000009 	.word	0x20000009

080053c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <BSP_SD_WriteCpltCallback+0x14>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	20000640 	.word	0x20000640

080053d8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <BSP_SD_ReadCpltCallback+0x14>)
 80053de:	2201      	movs	r2, #1
 80053e0:	601a      	str	r2, [r3, #0]
}
 80053e2:	bf00      	nop
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	20000644 	.word	0x20000644

080053f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	4a08      	ldr	r2, [pc, #32]	; (8005420 <disk_status+0x30>)
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	79fa      	ldrb	r2, [r7, #7]
 8005408:	4905      	ldr	r1, [pc, #20]	; (8005420 <disk_status+0x30>)
 800540a:	440a      	add	r2, r1
 800540c:	7a12      	ldrb	r2, [r2, #8]
 800540e:	4610      	mov	r0, r2
 8005410:	4798      	blx	r3
 8005412:	4603      	mov	r3, r0
 8005414:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005416:	7bfb      	ldrb	r3, [r7, #15]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20000670 	.word	0x20000670

08005424 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	4a0d      	ldr	r2, [pc, #52]	; (800546c <disk_initialize+0x48>)
 8005436:	5cd3      	ldrb	r3, [r2, r3]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d111      	bne.n	8005460 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	4a0b      	ldr	r2, [pc, #44]	; (800546c <disk_initialize+0x48>)
 8005440:	2101      	movs	r1, #1
 8005442:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	4a09      	ldr	r2, [pc, #36]	; (800546c <disk_initialize+0x48>)
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	79fa      	ldrb	r2, [r7, #7]
 8005452:	4906      	ldr	r1, [pc, #24]	; (800546c <disk_initialize+0x48>)
 8005454:	440a      	add	r2, r1
 8005456:	7a12      	ldrb	r2, [r2, #8]
 8005458:	4610      	mov	r0, r2
 800545a:	4798      	blx	r3
 800545c:	4603      	mov	r3, r0
 800545e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000670 	.word	0x20000670

08005470 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4603      	mov	r3, r0
 800547e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <disk_read+0x3c>)
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	689c      	ldr	r4, [r3, #8]
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	4a07      	ldr	r2, [pc, #28]	; (80054ac <disk_read+0x3c>)
 8005490:	4413      	add	r3, r2
 8005492:	7a18      	ldrb	r0, [r3, #8]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	47a0      	blx	r4
 800549c:	4603      	mov	r3, r0
 800549e:	75fb      	strb	r3, [r7, #23]
  return res;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	371c      	adds	r7, #28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd90      	pop	{r4, r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000670 	.word	0x20000670

080054b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <disk_write+0x3c>)
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	68dc      	ldr	r4, [r3, #12]
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	4a07      	ldr	r2, [pc, #28]	; (80054ec <disk_write+0x3c>)
 80054d0:	4413      	add	r3, r2
 80054d2:	7a18      	ldrb	r0, [r3, #8]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	47a0      	blx	r4
 80054dc:	4603      	mov	r3, r0
 80054de:	75fb      	strb	r3, [r7, #23]
  return res;
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd90      	pop	{r4, r7, pc}
 80054ea:	bf00      	nop
 80054ec:	20000670 	.word	0x20000670

080054f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	603a      	str	r2, [r7, #0]
 80054fa:	71fb      	strb	r3, [r7, #7]
 80054fc:	460b      	mov	r3, r1
 80054fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	4a09      	ldr	r2, [pc, #36]	; (8005528 <disk_ioctl+0x38>)
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	79fa      	ldrb	r2, [r7, #7]
 800550e:	4906      	ldr	r1, [pc, #24]	; (8005528 <disk_ioctl+0x38>)
 8005510:	440a      	add	r2, r1
 8005512:	7a10      	ldrb	r0, [r2, #8]
 8005514:	79b9      	ldrb	r1, [r7, #6]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	4798      	blx	r3
 800551a:	4603      	mov	r3, r0
 800551c:	73fb      	strb	r3, [r7, #15]
  return res;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20000670 	.word	0x20000670

0800552c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3301      	adds	r3, #1
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800553c:	89fb      	ldrh	r3, [r7, #14]
 800553e:	021b      	lsls	r3, r3, #8
 8005540:	b21a      	sxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	b21b      	sxth	r3, r3
 8005548:	4313      	orrs	r3, r2
 800554a:	b21b      	sxth	r3, r3
 800554c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800554e:	89fb      	ldrh	r3, [r7, #14]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3303      	adds	r3, #3
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	3202      	adds	r2, #2
 8005574:	7812      	ldrb	r2, [r2, #0]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	3201      	adds	r2, #1
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	7812      	ldrb	r2, [r2, #0]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
	return rv;
 8005594:	68fb      	ldr	r3, [r7, #12]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	887a      	ldrh	r2, [r7, #2]
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	887b      	ldrh	r3, [r7, #2]
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	607a      	str	r2, [r7, #4]
 80055c6:	887a      	ldrh	r2, [r7, #2]
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	0a1b      	lsrs	r3, r3, #8
 8005604:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	0a1b      	lsrs	r3, r3, #8
 8005616:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	1c53      	adds	r3, r2, #1
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	6179      	str	r1, [r7, #20]
 8005656:	7812      	ldrb	r2, [r2, #0]
 8005658:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3b01      	subs	r3, #1
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f1      	bne.n	800564a <mem_cpy+0x1a>
	}
}
 8005666:	bf00      	nop
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005672:	b480      	push	{r7}
 8005674:	b087      	sub	sp, #28
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	617a      	str	r2, [r7, #20]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3b01      	subs	r3, #1
 8005692:	607b      	str	r3, [r7, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f3      	bne.n	8005682 <mem_set+0x10>
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80056a8:	b480      	push	{r7}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	61fa      	str	r2, [r7, #28]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	61ba      	str	r2, [r7, #24]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	1acb      	subs	r3, r1, r3
 80056d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3b01      	subs	r3, #1
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <mem_cmp+0x40>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0eb      	beq.n	80056c0 <mem_cmp+0x18>

	return r;
 80056e8:	697b      	ldr	r3, [r7, #20]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3724      	adds	r7, #36	; 0x24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005700:	e002      	b.n	8005708 <chk_chr+0x12>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3301      	adds	r3, #1
 8005706:	607b      	str	r3, [r7, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <chk_chr+0x26>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	4293      	cmp	r3, r2
 800571a:	d1f2      	bne.n	8005702 <chk_chr+0xc>
	return *str;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	781b      	ldrb	r3, [r3, #0]
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	e029      	b.n	8005794 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005740:	4a27      	ldr	r2, [pc, #156]	; (80057e0 <chk_lock+0xb4>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	4413      	add	r3, r2
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01d      	beq.n	800578a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800574e:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <chk_lock+0xb4>)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	4413      	add	r3, r2
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d116      	bne.n	800578e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005760:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <chk_lock+0xb4>)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	4413      	add	r3, r2
 8005768:	3304      	adds	r3, #4
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005770:	429a      	cmp	r2, r3
 8005772:	d10c      	bne.n	800578e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005774:	4a1a      	ldr	r2, [pc, #104]	; (80057e0 <chk_lock+0xb4>)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	4413      	add	r3, r2
 800577c:	3308      	adds	r3, #8
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005784:	429a      	cmp	r2, r3
 8005786:	d102      	bne.n	800578e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005788:	e007      	b.n	800579a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800578a:	2301      	movs	r3, #1
 800578c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3301      	adds	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d9d2      	bls.n	8005740 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d109      	bne.n	80057b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <chk_lock+0x80>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d101      	bne.n	80057b0 <chk_lock+0x84>
 80057ac:	2300      	movs	r3, #0
 80057ae:	e010      	b.n	80057d2 <chk_lock+0xa6>
 80057b0:	2312      	movs	r3, #18
 80057b2:	e00e      	b.n	80057d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d108      	bne.n	80057cc <chk_lock+0xa0>
 80057ba:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <chk_lock+0xb4>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	4413      	add	r3, r2
 80057c2:	330c      	adds	r3, #12
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ca:	d101      	bne.n	80057d0 <chk_lock+0xa4>
 80057cc:	2310      	movs	r3, #16
 80057ce:	e000      	b.n	80057d2 <chk_lock+0xa6>
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000650 	.word	0x20000650

080057e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057ea:	2300      	movs	r3, #0
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	e002      	b.n	80057f6 <enq_lock+0x12>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3301      	adds	r3, #1
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d806      	bhi.n	800580a <enq_lock+0x26>
 80057fc:	4a09      	ldr	r2, [pc, #36]	; (8005824 <enq_lock+0x40>)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	4413      	add	r3, r2
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f2      	bne.n	80057f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b02      	cmp	r3, #2
 800580e:	bf14      	ite	ne
 8005810:	2301      	movne	r3, #1
 8005812:	2300      	moveq	r3, #0
 8005814:	b2db      	uxtb	r3, r3
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000650 	.word	0x20000650

08005828 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e01f      	b.n	8005878 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005838:	4a41      	ldr	r2, [pc, #260]	; (8005940 <inc_lock+0x118>)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	4413      	add	r3, r2
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d113      	bne.n	8005872 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800584a:	4a3d      	ldr	r2, [pc, #244]	; (8005940 <inc_lock+0x118>)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	4413      	add	r3, r2
 8005852:	3304      	adds	r3, #4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800585a:	429a      	cmp	r2, r3
 800585c:	d109      	bne.n	8005872 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800585e:	4a38      	ldr	r2, [pc, #224]	; (8005940 <inc_lock+0x118>)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	4413      	add	r3, r2
 8005866:	3308      	adds	r3, #8
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800586e:	429a      	cmp	r2, r3
 8005870:	d006      	beq.n	8005880 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3301      	adds	r3, #1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d9dc      	bls.n	8005838 <inc_lock+0x10>
 800587e:	e000      	b.n	8005882 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005880:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d132      	bne.n	80058ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e002      	b.n	8005894 <inc_lock+0x6c>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d806      	bhi.n	80058a8 <inc_lock+0x80>
 800589a:	4a29      	ldr	r2, [pc, #164]	; (8005940 <inc_lock+0x118>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	4413      	add	r3, r2
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f2      	bne.n	800588e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d101      	bne.n	80058b2 <inc_lock+0x8a>
 80058ae:	2300      	movs	r3, #0
 80058b0:	e040      	b.n	8005934 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4922      	ldr	r1, [pc, #136]	; (8005940 <inc_lock+0x118>)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	440b      	add	r3, r1
 80058be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	491e      	ldr	r1, [pc, #120]	; (8005940 <inc_lock+0x118>)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	440b      	add	r3, r1
 80058cc:	3304      	adds	r3, #4
 80058ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	491a      	ldr	r1, [pc, #104]	; (8005940 <inc_lock+0x118>)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	440b      	add	r3, r1
 80058dc:	3308      	adds	r3, #8
 80058de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80058e0:	4a17      	ldr	r2, [pc, #92]	; (8005940 <inc_lock+0x118>)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	4413      	add	r3, r2
 80058e8:	330c      	adds	r3, #12
 80058ea:	2200      	movs	r2, #0
 80058ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d009      	beq.n	8005908 <inc_lock+0xe0>
 80058f4:	4a12      	ldr	r2, [pc, #72]	; (8005940 <inc_lock+0x118>)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	011b      	lsls	r3, r3, #4
 80058fa:	4413      	add	r3, r2
 80058fc:	330c      	adds	r3, #12
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <inc_lock+0xe0>
 8005904:	2300      	movs	r3, #0
 8005906:	e015      	b.n	8005934 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d108      	bne.n	8005920 <inc_lock+0xf8>
 800590e:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <inc_lock+0x118>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	4413      	add	r3, r2
 8005916:	330c      	adds	r3, #12
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	e001      	b.n	8005924 <inc_lock+0xfc>
 8005920:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005924:	4906      	ldr	r1, [pc, #24]	; (8005940 <inc_lock+0x118>)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	440b      	add	r3, r1
 800592c:	330c      	adds	r3, #12
 800592e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	20000650 	.word	0x20000650

08005944 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3b01      	subs	r3, #1
 8005950:	607b      	str	r3, [r7, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d825      	bhi.n	80059a4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <dec_lock+0x74>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	4413      	add	r3, r2
 8005960:	330c      	adds	r3, #12
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596c:	d101      	bne.n	8005972 <dec_lock+0x2e>
 800596e:	2300      	movs	r3, #0
 8005970:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005972:	89fb      	ldrh	r3, [r7, #14]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <dec_lock+0x3a>
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	3b01      	subs	r3, #1
 800597c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800597e:	4a0e      	ldr	r2, [pc, #56]	; (80059b8 <dec_lock+0x74>)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	4413      	add	r3, r2
 8005986:	330c      	adds	r3, #12
 8005988:	89fa      	ldrh	r2, [r7, #14]
 800598a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800598c:	89fb      	ldrh	r3, [r7, #14]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d105      	bne.n	800599e <dec_lock+0x5a>
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <dec_lock+0x74>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	4413      	add	r3, r2
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	737b      	strb	r3, [r7, #13]
 80059a2:	e001      	b.n	80059a8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80059a4:	2302      	movs	r3, #2
 80059a6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80059a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20000650 	.word	0x20000650

080059bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e010      	b.n	80059ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80059ca:	4a0d      	ldr	r2, [pc, #52]	; (8005a00 <clear_lock+0x44>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	4413      	add	r3, r2
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d105      	bne.n	80059e6 <clear_lock+0x2a>
 80059da:	4a09      	ldr	r2, [pc, #36]	; (8005a00 <clear_lock+0x44>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	4413      	add	r3, r2
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d9eb      	bls.n	80059ca <clear_lock+0xe>
	}
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	20000650 	.word	0x20000650

08005a04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	78db      	ldrb	r3, [r3, #3]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d034      	beq.n	8005a82 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	7858      	ldrb	r0, [r3, #1]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a28:	2301      	movs	r3, #1
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	f7ff fd40 	bl	80054b0 <disk_write>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
 8005a3a:	e022      	b.n	8005a82 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	1ad2      	subs	r2, r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d217      	bcs.n	8005a82 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	789b      	ldrb	r3, [r3, #2]
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	e010      	b.n	8005a7c <sync_window+0x78>
					wsect += fs->fsize;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4413      	add	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	7858      	ldrb	r0, [r3, #1]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a6e:	2301      	movs	r3, #1
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	f7ff fd1d 	bl	80054b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d8eb      	bhi.n	8005a5a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d01b      	beq.n	8005adc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ffad 	bl	8005a04 <sync_window>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d113      	bne.n	8005adc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	7858      	ldrb	r0, [r3, #1]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005abe:	2301      	movs	r3, #1
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	f7ff fcd5 	bl	8005470 <disk_read>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff ff87 	bl	8005a04 <sync_window>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d158      	bne.n	8005bb2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d148      	bne.n	8005b9a <sync_fs+0xb2>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	791b      	ldrb	r3, [r3, #4]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d144      	bne.n	8005b9a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3330      	adds	r3, #48	; 0x30
 8005b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fda9 	bl	8005672 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3330      	adds	r3, #48	; 0x30
 8005b24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fd38 	bl	80055a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3330      	adds	r3, #48	; 0x30
 8005b36:	4921      	ldr	r1, [pc, #132]	; (8005bbc <sync_fs+0xd4>)
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fd4d 	bl	80055d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3330      	adds	r3, #48	; 0x30
 8005b42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005b46:	491e      	ldr	r1, [pc, #120]	; (8005bc0 <sync_fs+0xd8>)
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fd45 	bl	80055d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3330      	adds	r3, #48	; 0x30
 8005b52:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4610      	mov	r0, r2
 8005b5e:	f7ff fd3b 	bl	80055d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3330      	adds	r3, #48	; 0x30
 8005b66:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f7ff fd31 	bl	80055d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7858      	ldrb	r0, [r3, #1]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f7ff fc8e 	bl	80054b0 <disk_write>
			fs->fsi_flag = 0;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	785b      	ldrb	r3, [r3, #1]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fca4 	bl	80054f0 <disk_ioctl>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <sync_fs+0xca>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	41615252 	.word	0x41615252
 8005bc0:	61417272 	.word	0x61417272

08005bc4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	3b02      	subs	r3, #2
 8005bd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	3b02      	subs	r3, #2
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d301      	bcc.n	8005be4 <clust2sect+0x20>
 8005be0:	2300      	movs	r3, #0
 8005be2:	e008      	b.n	8005bf6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	895b      	ldrh	r3, [r3, #10]
 8005be8:	461a      	mov	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	fb03 f202 	mul.w	r2, r3, r2
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	4413      	add	r3, r2
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b086      	sub	sp, #24
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d904      	bls.n	8005c22 <get_fat+0x20>
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005c22:	2301      	movs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	e08f      	b.n	8005d48 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d062      	beq.n	8005cfc <get_fat+0xfa>
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	dc7c      	bgt.n	8005d34 <get_fat+0x132>
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d002      	beq.n	8005c44 <get_fat+0x42>
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d042      	beq.n	8005cc8 <get_fat+0xc6>
 8005c42:	e077      	b.n	8005d34 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	085b      	lsrs	r3, r3, #1
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	6a1a      	ldr	r2, [r3, #32]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	0a5b      	lsrs	r3, r3, #9
 8005c5a:	4413      	add	r3, r2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6938      	ldr	r0, [r7, #16]
 8005c60:	f7ff ff14 	bl	8005a8c <move_window>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d167      	bne.n	8005d3a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	60fa      	str	r2, [r7, #12]
 8005c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	0a5b      	lsrs	r3, r3, #9
 8005c86:	4413      	add	r3, r2
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6938      	ldr	r0, [r7, #16]
 8005c8c:	f7ff fefe 	bl	8005a8c <move_window>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d153      	bne.n	8005d3e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <get_fat+0xbc>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	e002      	b.n	8005cc4 <get_fat+0xc2>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc4:	617b      	str	r3, [r7, #20]
			break;
 8005cc6:	e03f      	b.n	8005d48 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	6a1a      	ldr	r2, [r3, #32]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	4413      	add	r3, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6938      	ldr	r0, [r7, #16]
 8005cd6:	f7ff fed9 	bl	8005a8c <move_window>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d130      	bne.n	8005d42 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005cee:	4413      	add	r3, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fc1b 	bl	800552c <ld_word>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	617b      	str	r3, [r7, #20]
			break;
 8005cfa:	e025      	b.n	8005d48 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6a1a      	ldr	r2, [r3, #32]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	09db      	lsrs	r3, r3, #7
 8005d04:	4413      	add	r3, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	6938      	ldr	r0, [r7, #16]
 8005d0a:	f7ff febf 	bl	8005a8c <move_window>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d118      	bne.n	8005d46 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005d22:	4413      	add	r3, r2
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fc19 	bl	800555c <ld_dword>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d30:	617b      	str	r3, [r7, #20]
			break;
 8005d32:	e009      	b.n	8005d48 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005d34:	2301      	movs	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e006      	b.n	8005d48 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d3a:	bf00      	nop
 8005d3c:	e004      	b.n	8005d48 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d3e:	bf00      	nop
 8005d40:	e002      	b.n	8005d48 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d46:	bf00      	nop
		}
	}

	return val;
 8005d48:	697b      	ldr	r3, [r7, #20]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005d52:	b590      	push	{r4, r7, lr}
 8005d54:	b089      	sub	sp, #36	; 0x24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	f240 80d2 	bls.w	8005f0e <put_fat+0x1bc>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	f080 80cc 	bcs.w	8005f0e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	f000 8096 	beq.w	8005eac <put_fat+0x15a>
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	f300 80cd 	bgt.w	8005f20 <put_fat+0x1ce>
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d002      	beq.n	8005d90 <put_fat+0x3e>
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d06e      	beq.n	8005e6c <put_fat+0x11a>
 8005d8e:	e0c7      	b.n	8005f20 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	0a5b      	lsrs	r3, r3, #9
 8005da6:	4413      	add	r3, r2
 8005da8:	4619      	mov	r1, r3
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff fe6e 	bl	8005a8c <move_window>
 8005db0:	4603      	mov	r3, r0
 8005db2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005db4:	7ffb      	ldrb	r3, [r7, #31]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f040 80ab 	bne.w	8005f12 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	1c59      	adds	r1, r3, #1
 8005dc6:	61b9      	str	r1, [r7, #24]
 8005dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dcc:	4413      	add	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00d      	beq.n	8005df6 <put_fat+0xa4>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	b25b      	sxtb	r3, r3
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	b25a      	sxtb	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	b25b      	sxtb	r3, r3
 8005dee:	4313      	orrs	r3, r2
 8005df0:	b25b      	sxtb	r3, r3
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	e001      	b.n	8005dfa <put_fat+0xa8>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1a      	ldr	r2, [r3, #32]
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	0a5b      	lsrs	r3, r3, #9
 8005e0c:	4413      	add	r3, r2
 8005e0e:	4619      	mov	r1, r3
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f7ff fe3b 	bl	8005a8c <move_window>
 8005e16:	4603      	mov	r3, r0
 8005e18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e1a:	7ffb      	ldrb	r3, [r7, #31]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d17a      	bne.n	8005f16 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2c:	4413      	add	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <put_fat+0xf0>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	091b      	lsrs	r3, r3, #4
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	e00e      	b.n	8005e60 <put_fat+0x10e>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b25b      	sxtb	r3, r3
 8005e48:	f023 030f 	bic.w	r3, r3, #15
 8005e4c:	b25a      	sxtb	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	b25b      	sxtb	r3, r3
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	b25b      	sxtb	r3, r3
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	b25b      	sxtb	r3, r3
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	70da      	strb	r2, [r3, #3]
			break;
 8005e6a:	e059      	b.n	8005f20 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	4413      	add	r3, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff fe07 	bl	8005a8c <move_window>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e82:	7ffb      	ldrb	r3, [r7, #31]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d148      	bne.n	8005f1a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005e96:	4413      	add	r3, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff fb7f 	bl	80055a2 <st_word>
			fs->wflag = 1;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	70da      	strb	r2, [r3, #3]
			break;
 8005eaa:	e039      	b.n	8005f20 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	09db      	lsrs	r3, r3, #7
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff fde7 	bl	8005a8c <move_window>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ec2:	7ffb      	ldrb	r3, [r7, #31]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d12a      	bne.n	8005f1e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005edc:	4413      	add	r3, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff fb3c 	bl	800555c <ld_dword>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005eea:	4323      	orrs	r3, r4
 8005eec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005efc:	4413      	add	r3, r2
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fb69 	bl	80055d8 <st_dword>
			fs->wflag = 1;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	70da      	strb	r2, [r3, #3]
			break;
 8005f0c:	e008      	b.n	8005f20 <put_fat+0x1ce>
		}
	}
 8005f0e:	bf00      	nop
 8005f10:	e006      	b.n	8005f20 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005f12:	bf00      	nop
 8005f14:	e004      	b.n	8005f20 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005f16:	bf00      	nop
 8005f18:	e002      	b.n	8005f20 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005f1e:	bf00      	nop
	return res;
 8005f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3724      	adds	r7, #36	; 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd90      	pop	{r4, r7, pc}

08005f2a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b088      	sub	sp, #32
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d904      	bls.n	8005f50 <remove_chain+0x26>
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d301      	bcc.n	8005f54 <remove_chain+0x2a>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e04b      	b.n	8005fec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	69b8      	ldr	r0, [r7, #24]
 8005f62:	f7ff fef6 	bl	8005d52 <put_fat>
 8005f66:	4603      	mov	r3, r0
 8005f68:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005f6a:	7ffb      	ldrb	r3, [r7, #31]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <remove_chain+0x4a>
 8005f70:	7ffb      	ldrb	r3, [r7, #31]
 8005f72:	e03b      	b.n	8005fec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7ff fe43 	bl	8005c02 <get_fat>
 8005f7c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d031      	beq.n	8005fe8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <remove_chain+0x64>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e02e      	b.n	8005fec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f94:	d101      	bne.n	8005f9a <remove_chain+0x70>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e028      	b.n	8005fec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	69b8      	ldr	r0, [r7, #24]
 8005fa0:	f7ff fed7 	bl	8005d52 <put_fat>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005fa8:	7ffb      	ldrb	r3, [r7, #31]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <remove_chain+0x88>
 8005fae:	7ffb      	ldrb	r3, [r7, #31]
 8005fb0:	e01c      	b.n	8005fec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	3b02      	subs	r3, #2
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d20b      	bcs.n	8005fd8 <remove_chain+0xae>
			fs->free_clst++;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	791b      	ldrb	r3, [r3, #4]
 8005fce:	f043 0301 	orr.w	r3, r3, #1
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d3c6      	bcc.n	8005f74 <remove_chain+0x4a>
 8005fe6:	e000      	b.n	8005fea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005fe8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10d      	bne.n	8006026 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d004      	beq.n	8006020 <create_chain+0x2c>
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	429a      	cmp	r2, r3
 800601e:	d31b      	bcc.n	8006058 <create_chain+0x64>
 8006020:	2301      	movs	r3, #1
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	e018      	b.n	8006058 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff fdea 	bl	8005c02 <get_fat>
 800602e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d801      	bhi.n	800603a <create_chain+0x46>
 8006036:	2301      	movs	r3, #1
 8006038:	e070      	b.n	800611c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d101      	bne.n	8006046 <create_chain+0x52>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	e06a      	b.n	800611c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	429a      	cmp	r2, r3
 800604e:	d201      	bcs.n	8006054 <create_chain+0x60>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	e063      	b.n	800611c <create_chain+0x128>
		scl = clst;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	3301      	adds	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	429a      	cmp	r2, r3
 800606a:	d307      	bcc.n	800607c <create_chain+0x88>
				ncl = 2;
 800606c:	2302      	movs	r3, #2
 800606e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	429a      	cmp	r2, r3
 8006076:	d901      	bls.n	800607c <create_chain+0x88>
 8006078:	2300      	movs	r3, #0
 800607a:	e04f      	b.n	800611c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800607c:	69f9      	ldr	r1, [r7, #28]
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fdbf 	bl	8005c02 <get_fat>
 8006084:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00e      	beq.n	80060aa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d003      	beq.n	800609a <create_chain+0xa6>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d101      	bne.n	800609e <create_chain+0xaa>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	e03e      	b.n	800611c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d1da      	bne.n	800605c <create_chain+0x68>
 80060a6:	2300      	movs	r3, #0
 80060a8:	e038      	b.n	800611c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80060aa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295
 80060b0:	69f9      	ldr	r1, [r7, #28]
 80060b2:	6938      	ldr	r0, [r7, #16]
 80060b4:	f7ff fe4d 	bl	8005d52 <put_fat>
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <create_chain+0xe2>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d006      	beq.n	80060d6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	6839      	ldr	r1, [r7, #0]
 80060cc:	6938      	ldr	r0, [r7, #16]
 80060ce:	f7ff fe40 	bl	8005d52 <put_fat>
 80060d2:	4603      	mov	r3, r0
 80060d4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d116      	bne.n	800610a <create_chain+0x116>
		fs->last_clst = ncl;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	3b02      	subs	r3, #2
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d804      	bhi.n	80060fa <create_chain+0x106>
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	1e5a      	subs	r2, r3, #1
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	791b      	ldrb	r3, [r3, #4]
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	b2da      	uxtb	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	711a      	strb	r2, [r3, #4]
 8006108:	e007      	b.n	800611a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d102      	bne.n	8006116 <create_chain+0x122>
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	e000      	b.n	8006118 <create_chain+0x124>
 8006116:	2301      	movs	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800611a:	69fb      	ldr	r3, [r7, #28]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	3304      	adds	r3, #4
 800613a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	0a5b      	lsrs	r3, r3, #9
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	8952      	ldrh	r2, [r2, #10]
 8006144:	fbb3 f3f2 	udiv	r3, r3, r2
 8006148:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1d1a      	adds	r2, r3, #4
 800614e:	613a      	str	r2, [r7, #16]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <clmt_clust+0x3a>
 800615a:	2300      	movs	r3, #0
 800615c:	e010      	b.n	8006180 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	429a      	cmp	r2, r3
 8006164:	d307      	bcc.n	8006176 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	3304      	adds	r3, #4
 8006172:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006174:	e7e9      	b.n	800614a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006176:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
}
 8006180:	4618      	mov	r0, r3
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a2:	d204      	bcs.n	80061ae <dir_sdi+0x22>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80061ae:	2302      	movs	r3, #2
 80061b0:	e063      	b.n	800627a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <dir_sdi+0x46>
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d902      	bls.n	80061d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10c      	bne.n	80061f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	8912      	ldrh	r2, [r2, #8]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d301      	bcc.n	80061e8 <dir_sdi+0x5c>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e048      	b.n	800627a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	61da      	str	r2, [r3, #28]
 80061f0:	e029      	b.n	8006246 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	895b      	ldrh	r3, [r3, #10]
 80061f6:	025b      	lsls	r3, r3, #9
 80061f8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80061fa:	e019      	b.n	8006230 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6979      	ldr	r1, [r7, #20]
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff fcfe 	bl	8005c02 <get_fat>
 8006206:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d101      	bne.n	8006214 <dir_sdi+0x88>
 8006210:	2301      	movs	r3, #1
 8006212:	e032      	b.n	800627a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d904      	bls.n	8006224 <dir_sdi+0x98>
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	429a      	cmp	r2, r3
 8006222:	d301      	bcc.n	8006228 <dir_sdi+0x9c>
 8006224:	2302      	movs	r3, #2
 8006226:	e028      	b.n	800627a <dir_sdi+0xee>
			ofs -= csz;
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	429a      	cmp	r2, r3
 8006236:	d2e1      	bcs.n	80061fc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006238:	6979      	ldr	r1, [r7, #20]
 800623a:	6938      	ldr	r0, [r7, #16]
 800623c:	f7ff fcc2 	bl	8005bc4 <clust2sect>
 8006240:	4602      	mov	r2, r0
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <dir_sdi+0xcc>
 8006254:	2302      	movs	r3, #2
 8006256:	e010      	b.n	800627a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	0a5b      	lsrs	r3, r3, #9
 8006260:	441a      	add	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006272:	441a      	add	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b086      	sub	sp, #24
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	3320      	adds	r3, #32
 8006298:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <dir_next+0x28>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a8:	d301      	bcc.n	80062ae <dir_next+0x2c>
 80062aa:	2304      	movs	r3, #4
 80062ac:	e0aa      	b.n	8006404 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 8098 	bne.w	80063ea <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	8912      	ldrh	r2, [r2, #8]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	f0c0 8088 	bcc.w	80063ea <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	61da      	str	r2, [r3, #28]
 80062e0:	2304      	movs	r3, #4
 80062e2:	e08f      	b.n	8006404 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	0a5b      	lsrs	r3, r3, #9
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	8952      	ldrh	r2, [r2, #10]
 80062ec:	3a01      	subs	r2, #1
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d17a      	bne.n	80063ea <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f7ff fc80 	bl	8005c02 <get_fat>
 8006302:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d801      	bhi.n	800630e <dir_next+0x8c>
 800630a:	2302      	movs	r3, #2
 800630c:	e07a      	b.n	8006404 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d101      	bne.n	800631a <dir_next+0x98>
 8006316:	2301      	movs	r3, #1
 8006318:	e074      	b.n	8006404 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	429a      	cmp	r2, r3
 8006322:	d358      	bcc.n	80063d6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d104      	bne.n	8006334 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	61da      	str	r2, [r3, #28]
 8006330:	2304      	movs	r3, #4
 8006332:	e067      	b.n	8006404 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f7ff fe59 	bl	8005ff4 <create_chain>
 8006342:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <dir_next+0xcc>
 800634a:	2307      	movs	r3, #7
 800634c:	e05a      	b.n	8006404 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <dir_next+0xd6>
 8006354:	2302      	movs	r3, #2
 8006356:	e055      	b.n	8006404 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d101      	bne.n	8006364 <dir_next+0xe2>
 8006360:	2301      	movs	r3, #1
 8006362:	e04f      	b.n	8006404 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7ff fb4d 	bl	8005a04 <sync_window>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <dir_next+0xf2>
 8006370:	2301      	movs	r3, #1
 8006372:	e047      	b.n	8006404 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3330      	adds	r3, #48	; 0x30
 8006378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff f977 	bl	8005672 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	6979      	ldr	r1, [r7, #20]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7ff fc1a 	bl	8005bc4 <clust2sect>
 8006390:	4602      	mov	r2, r0
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	62da      	str	r2, [r3, #44]	; 0x2c
 8006396:	e012      	b.n	80063be <dir_next+0x13c>
						fs->wflag = 1;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff fb30 	bl	8005a04 <sync_window>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <dir_next+0x12c>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e02a      	b.n	8006404 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	3301      	adds	r3, #1
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	895b      	ldrh	r3, [r3, #10]
 80063c2:	461a      	mov	r2, r3
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d3e6      	bcc.n	8006398 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad2      	subs	r2, r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80063dc:	6979      	ldr	r1, [r7, #20]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff fbf0 	bl	8005bc4 <clust2sect>
 80063e4:	4602      	mov	r2, r0
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fc:	441a      	add	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800641c:	2100      	movs	r1, #0
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff feb4 	bl	800618c <dir_sdi>
 8006424:	4603      	mov	r3, r0
 8006426:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d12b      	bne.n	8006486 <dir_alloc+0x7a>
		n = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	4619      	mov	r1, r3
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff fb27 	bl	8005a8c <move_window>
 800643e:	4603      	mov	r3, r0
 8006440:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006442:	7dfb      	ldrb	r3, [r7, #23]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d11d      	bne.n	8006484 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2be5      	cmp	r3, #229	; 0xe5
 8006450:	d004      	beq.n	800645c <dir_alloc+0x50>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d107      	bne.n	800646c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	3301      	adds	r3, #1
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d102      	bne.n	8006470 <dir_alloc+0x64>
 800646a:	e00c      	b.n	8006486 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006470:	2101      	movs	r1, #1
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff ff05 	bl	8006282 <dir_next>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0d7      	beq.n	8006432 <dir_alloc+0x26>
 8006482:	e000      	b.n	8006486 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006484:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	2b04      	cmp	r3, #4
 800648a:	d101      	bne.n	8006490 <dir_alloc+0x84>
 800648c:	2307      	movs	r3, #7
 800648e:	75fb      	strb	r3, [r7, #23]
	return res;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	331a      	adds	r3, #26
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7ff f83f 	bl	800552c <ld_word>
 80064ae:	4603      	mov	r3, r0
 80064b0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d109      	bne.n	80064ce <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	3314      	adds	r3, #20
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff f834 	bl	800552c <ld_word>
 80064c4:	4603      	mov	r3, r0
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80064ce:	68fb      	ldr	r3, [r7, #12]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	331a      	adds	r3, #26
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	b292      	uxth	r2, r2
 80064ec:	4611      	mov	r1, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff f857 	bl	80055a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d109      	bne.n	8006510 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f103 0214 	add.w	r2, r3, #20
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	0c1b      	lsrs	r3, r3, #16
 8006506:	b29b      	uxth	r3, r3
 8006508:	4619      	mov	r1, r3
 800650a:	4610      	mov	r0, r2
 800650c:	f7ff f849 	bl	80055a2 <st_word>
	}
}
 8006510:	bf00      	nop
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006526:	2100      	movs	r1, #0
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff fe2f 	bl	800618c <dir_sdi>
 800652e:	4603      	mov	r3, r0
 8006530:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006532:	7dfb      	ldrb	r3, [r7, #23]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <dir_find+0x24>
 8006538:	7dfb      	ldrb	r3, [r7, #23]
 800653a:	e03e      	b.n	80065ba <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	4619      	mov	r1, r3
 8006542:	6938      	ldr	r0, [r7, #16]
 8006544:	f7ff faa2 	bl	8005a8c <move_window>
 8006548:	4603      	mov	r3, r0
 800654a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d12f      	bne.n	80065b2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <dir_find+0x4e>
 8006560:	2304      	movs	r3, #4
 8006562:	75fb      	strb	r3, [r7, #23]
 8006564:	e028      	b.n	80065b8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	330b      	adds	r3, #11
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006572:	b2da      	uxtb	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	330b      	adds	r3, #11
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10a      	bne.n	800659e <dir_find+0x86>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a18      	ldr	r0, [r3, #32]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3324      	adds	r3, #36	; 0x24
 8006590:	220b      	movs	r2, #11
 8006592:	4619      	mov	r1, r3
 8006594:	f7ff f888 	bl	80056a8 <mem_cmp>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800659e:	2100      	movs	r1, #0
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff fe6e 	bl	8006282 <dir_next>
 80065a6:	4603      	mov	r3, r0
 80065a8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0c5      	beq.n	800653c <dir_find+0x24>
 80065b0:	e002      	b.n	80065b8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80065b2:	bf00      	nop
 80065b4:	e000      	b.n	80065b8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80065b6:	bf00      	nop

	return res;
 80065b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80065d0:	2101      	movs	r1, #1
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff ff1a 	bl	800640c <dir_alloc>
 80065d8:	4603      	mov	r3, r0
 80065da:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d11c      	bne.n	800661c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	4619      	mov	r1, r3
 80065e8:	68b8      	ldr	r0, [r7, #8]
 80065ea:	f7ff fa4f 	bl	8005a8c <move_window>
 80065ee:	4603      	mov	r3, r0
 80065f0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d111      	bne.n	800661c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	2220      	movs	r2, #32
 80065fe:	2100      	movs	r1, #0
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff f836 	bl	8005672 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a18      	ldr	r0, [r3, #32]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3324      	adds	r3, #36	; 0x24
 800660e:	220b      	movs	r2, #11
 8006610:	4619      	mov	r1, r3
 8006612:	f7ff f80d 	bl	8005630 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2201      	movs	r2, #1
 800661a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b088      	sub	sp, #32
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3324      	adds	r3, #36	; 0x24
 800663c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800663e:	220b      	movs	r2, #11
 8006640:	2120      	movs	r1, #32
 8006642:	68b8      	ldr	r0, [r7, #8]
 8006644:	f7ff f815 	bl	8005672 <mem_set>
	si = i = 0; ni = 8;
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	61fb      	str	r3, [r7, #28]
 8006650:	2308      	movs	r3, #8
 8006652:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	61fa      	str	r2, [r7, #28]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4413      	add	r3, r2
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006662:	7efb      	ldrb	r3, [r7, #27]
 8006664:	2b20      	cmp	r3, #32
 8006666:	d94e      	bls.n	8006706 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006668:	7efb      	ldrb	r3, [r7, #27]
 800666a:	2b2f      	cmp	r3, #47	; 0x2f
 800666c:	d006      	beq.n	800667c <create_name+0x54>
 800666e:	7efb      	ldrb	r3, [r7, #27]
 8006670:	2b5c      	cmp	r3, #92	; 0x5c
 8006672:	d110      	bne.n	8006696 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006674:	e002      	b.n	800667c <create_name+0x54>
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	3301      	adds	r3, #1
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b2f      	cmp	r3, #47	; 0x2f
 8006686:	d0f6      	beq.n	8006676 <create_name+0x4e>
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b5c      	cmp	r3, #92	; 0x5c
 8006692:	d0f0      	beq.n	8006676 <create_name+0x4e>
			break;
 8006694:	e038      	b.n	8006708 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006696:	7efb      	ldrb	r3, [r7, #27]
 8006698:	2b2e      	cmp	r3, #46	; 0x2e
 800669a:	d003      	beq.n	80066a4 <create_name+0x7c>
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d30c      	bcc.n	80066be <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b0b      	cmp	r3, #11
 80066a8:	d002      	beq.n	80066b0 <create_name+0x88>
 80066aa:	7efb      	ldrb	r3, [r7, #27]
 80066ac:	2b2e      	cmp	r3, #46	; 0x2e
 80066ae:	d001      	beq.n	80066b4 <create_name+0x8c>
 80066b0:	2306      	movs	r3, #6
 80066b2:	e044      	b.n	800673e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80066b4:	2308      	movs	r3, #8
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	230b      	movs	r3, #11
 80066ba:	617b      	str	r3, [r7, #20]
			continue;
 80066bc:	e022      	b.n	8006704 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80066be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	da04      	bge.n	80066d0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80066c6:	7efb      	ldrb	r3, [r7, #27]
 80066c8:	3b80      	subs	r3, #128	; 0x80
 80066ca:	4a1f      	ldr	r2, [pc, #124]	; (8006748 <create_name+0x120>)
 80066cc:	5cd3      	ldrb	r3, [r2, r3]
 80066ce:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80066d0:	7efb      	ldrb	r3, [r7, #27]
 80066d2:	4619      	mov	r1, r3
 80066d4:	481d      	ldr	r0, [pc, #116]	; (800674c <create_name+0x124>)
 80066d6:	f7ff f80e 	bl	80056f6 <chk_chr>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <create_name+0xbc>
 80066e0:	2306      	movs	r3, #6
 80066e2:	e02c      	b.n	800673e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80066e4:	7efb      	ldrb	r3, [r7, #27]
 80066e6:	2b60      	cmp	r3, #96	; 0x60
 80066e8:	d905      	bls.n	80066f6 <create_name+0xce>
 80066ea:	7efb      	ldrb	r3, [r7, #27]
 80066ec:	2b7a      	cmp	r3, #122	; 0x7a
 80066ee:	d802      	bhi.n	80066f6 <create_name+0xce>
 80066f0:	7efb      	ldrb	r3, [r7, #27]
 80066f2:	3b20      	subs	r3, #32
 80066f4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	613a      	str	r2, [r7, #16]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	4413      	add	r3, r2
 8006700:	7efa      	ldrb	r2, [r7, #27]
 8006702:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006704:	e7a6      	b.n	8006654 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006706:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	441a      	add	r2, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <create_name+0xf4>
 8006718:	2306      	movs	r3, #6
 800671a:	e010      	b.n	800673e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2be5      	cmp	r3, #229	; 0xe5
 8006722:	d102      	bne.n	800672a <create_name+0x102>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2205      	movs	r2, #5
 8006728:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800672a:	7efb      	ldrb	r3, [r7, #27]
 800672c:	2b20      	cmp	r3, #32
 800672e:	d801      	bhi.n	8006734 <create_name+0x10c>
 8006730:	2204      	movs	r2, #4
 8006732:	e000      	b.n	8006736 <create_name+0x10e>
 8006734:	2200      	movs	r2, #0
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	330b      	adds	r3, #11
 800673a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800673c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800673e:	4618      	mov	r0, r3
 8006740:	3720      	adds	r7, #32
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	080089b0 	.word	0x080089b0
 800674c:	08008940 	.word	0x08008940

08006750 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006764:	e002      	b.n	800676c <follow_path+0x1c>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	3301      	adds	r3, #1
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b2f      	cmp	r3, #47	; 0x2f
 8006772:	d0f8      	beq.n	8006766 <follow_path+0x16>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b5c      	cmp	r3, #92	; 0x5c
 800677a:	d0f4      	beq.n	8006766 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2200      	movs	r2, #0
 8006780:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b1f      	cmp	r3, #31
 8006788:	d80a      	bhi.n	80067a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2280      	movs	r2, #128	; 0x80
 800678e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006792:	2100      	movs	r1, #0
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff fcf9 	bl	800618c <dir_sdi>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]
 800679e:	e043      	b.n	8006828 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067a0:	463b      	mov	r3, r7
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff ff3f 	bl	8006628 <create_name>
 80067aa:	4603      	mov	r3, r0
 80067ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d134      	bne.n	800681e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff feaf 	bl	8006518 <dir_find>
 80067ba:	4603      	mov	r3, r0
 80067bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80067c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d127      	bne.n	8006822 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d122      	bne.n	8006822 <follow_path+0xd2>
 80067dc:	2305      	movs	r3, #5
 80067de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80067e0:	e01f      	b.n	8006822 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067e2:	7afb      	ldrb	r3, [r7, #11]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d11c      	bne.n	8006826 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	799b      	ldrb	r3, [r3, #6]
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 80067f8:	2305      	movs	r3, #5
 80067fa:	75fb      	strb	r3, [r7, #23]
 80067fc:	e014      	b.n	8006828 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680c:	4413      	add	r3, r2
 800680e:	4619      	mov	r1, r3
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fe42 	bl	800649a <ld_clust>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800681c:	e7c0      	b.n	80067a0 <follow_path+0x50>
			if (res != FR_OK) break;
 800681e:	bf00      	nop
 8006820:	e002      	b.n	8006828 <follow_path+0xd8>
				break;
 8006822:	bf00      	nop
 8006824:	e000      	b.n	8006828 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006826:	bf00      	nop
			}
		}
	}

	return res;
 8006828:	7dfb      	ldrb	r3, [r7, #23]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006832:	b480      	push	{r7}
 8006834:	b087      	sub	sp, #28
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800683a:	f04f 33ff 	mov.w	r3, #4294967295
 800683e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d031      	beq.n	80068ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	e002      	b.n	8006856 <get_ldnumber+0x24>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	3301      	adds	r3, #1
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b20      	cmp	r3, #32
 800685c:	d903      	bls.n	8006866 <get_ldnumber+0x34>
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b3a      	cmp	r3, #58	; 0x3a
 8006864:	d1f4      	bne.n	8006850 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b3a      	cmp	r3, #58	; 0x3a
 800686c:	d11c      	bne.n	80068a8 <get_ldnumber+0x76>
			tp = *path;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	60fa      	str	r2, [r7, #12]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	3b30      	subs	r3, #48	; 0x30
 800687e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b09      	cmp	r3, #9
 8006884:	d80e      	bhi.n	80068a4 <get_ldnumber+0x72>
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	429a      	cmp	r2, r3
 800688c:	d10a      	bne.n	80068a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <get_ldnumber+0x72>
					vol = (int)i;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	3301      	adds	r3, #1
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	e002      	b.n	80068ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80068a8:	2300      	movs	r3, #0
 80068aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80068ac:	693b      	ldr	r3, [r7, #16]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	70da      	strb	r2, [r3, #3]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f04f 32ff 	mov.w	r2, #4294967295
 80068d2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff f8d8 	bl	8005a8c <move_window>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <check_fs+0x2a>
 80068e2:	2304      	movs	r3, #4
 80068e4:	e038      	b.n	8006958 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3330      	adds	r3, #48	; 0x30
 80068ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe fe1c 	bl	800552c <ld_word>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
 80068f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <check_fs+0x48>
 8006900:	2303      	movs	r3, #3
 8006902:	e029      	b.n	8006958 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800690a:	2be9      	cmp	r3, #233	; 0xe9
 800690c:	d009      	beq.n	8006922 <check_fs+0x66>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006914:	2beb      	cmp	r3, #235	; 0xeb
 8006916:	d11e      	bne.n	8006956 <check_fs+0x9a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800691e:	2b90      	cmp	r3, #144	; 0x90
 8006920:	d119      	bne.n	8006956 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3330      	adds	r3, #48	; 0x30
 8006926:	3336      	adds	r3, #54	; 0x36
 8006928:	4618      	mov	r0, r3
 800692a:	f7fe fe17 	bl	800555c <ld_dword>
 800692e:	4603      	mov	r3, r0
 8006930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006934:	4a0a      	ldr	r2, [pc, #40]	; (8006960 <check_fs+0xa4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d101      	bne.n	800693e <check_fs+0x82>
 800693a:	2300      	movs	r3, #0
 800693c:	e00c      	b.n	8006958 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3330      	adds	r3, #48	; 0x30
 8006942:	3352      	adds	r3, #82	; 0x52
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fe09 	bl	800555c <ld_dword>
 800694a:	4603      	mov	r3, r0
 800694c:	4a05      	ldr	r2, [pc, #20]	; (8006964 <check_fs+0xa8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d101      	bne.n	8006956 <check_fs+0x9a>
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006956:	2302      	movs	r3, #2
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	00544146 	.word	0x00544146
 8006964:	33544146 	.word	0x33544146

08006968 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b096      	sub	sp, #88	; 0x58
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f7ff ff58 	bl	8006832 <get_ldnumber>
 8006982:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006986:	2b00      	cmp	r3, #0
 8006988:	da01      	bge.n	800698e <find_volume+0x26>
 800698a:	230b      	movs	r3, #11
 800698c:	e22d      	b.n	8006dea <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800698e:	4aa1      	ldr	r2, [pc, #644]	; (8006c14 <find_volume+0x2ac>)
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006996:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <find_volume+0x3a>
 800699e:	230c      	movs	r3, #12
 80069a0:	e223      	b.n	8006dea <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01a      	beq.n	80069ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fe fd17 	bl	80053f0 <disk_status>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80069c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10c      	bne.n	80069ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <find_volume+0x82>
 80069da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80069e6:	230a      	movs	r3, #10
 80069e8:	e1ff      	b.n	8006dea <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80069ea:	2300      	movs	r3, #0
 80069ec:	e1fd      	b.n	8006dea <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fd0f 	bl	8005424 <disk_initialize>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e1e6      	b.n	8006dea <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <find_volume+0xca>
 8006a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006a26:	f003 0304 	and.w	r3, r3, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006a2e:	230a      	movs	r3, #10
 8006a30:	e1db      	b.n	8006dea <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006a36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a3a:	f7ff ff3f 	bl	80068bc <check_fs>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006a44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d149      	bne.n	8006ae0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a50:	e01e      	b.n	8006a90 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006a60:	4413      	add	r3, r2
 8006a62:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	3304      	adds	r3, #4
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d006      	beq.n	8006a7c <find_volume+0x114>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	3308      	adds	r3, #8
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fd72 	bl	800555c <ld_dword>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	e000      	b.n	8006a7e <find_volume+0x116>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	3358      	adds	r3, #88	; 0x58
 8006a84:	443b      	add	r3, r7
 8006a86:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d9dd      	bls.n	8006a52 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006a96:	2300      	movs	r3, #0
 8006a98:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <find_volume+0x13e>
 8006aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	3358      	adds	r3, #88	; 0x58
 8006aac:	443b      	add	r3, r7
 8006aae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ab2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d005      	beq.n	8006ac6 <find_volume+0x15e>
 8006aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006abe:	f7ff fefd 	bl	80068bc <check_fs>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	e000      	b.n	8006ac8 <find_volume+0x160>
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006acc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d905      	bls.n	8006ae0 <find_volume+0x178>
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8006ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d9e2      	bls.n	8006aa6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d101      	bne.n	8006aec <find_volume+0x184>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e17e      	b.n	8006dea <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006aec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d901      	bls.n	8006af8 <find_volume+0x190>
 8006af4:	230d      	movs	r3, #13
 8006af6:	e178      	b.n	8006dea <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	3330      	adds	r3, #48	; 0x30
 8006afc:	330b      	adds	r3, #11
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fd14 	bl	800552c <ld_word>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b0a:	d001      	beq.n	8006b10 <find_volume+0x1a8>
 8006b0c:	230d      	movs	r3, #13
 8006b0e:	e16c      	b.n	8006dea <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	3330      	adds	r3, #48	; 0x30
 8006b14:	3316      	adds	r3, #22
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fd08 	bl	800552c <ld_word>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d106      	bne.n	8006b34 <find_volume+0x1cc>
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	3330      	adds	r3, #48	; 0x30
 8006b2a:	3324      	adds	r3, #36	; 0x24
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fe fd15 	bl	800555c <ld_dword>
 8006b32:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b38:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	789b      	ldrb	r3, [r3, #2]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d005      	beq.n	8006b58 <find_volume+0x1f0>
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	789b      	ldrb	r3, [r3, #2]
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d001      	beq.n	8006b58 <find_volume+0x1f0>
 8006b54:	230d      	movs	r3, #13
 8006b56:	e148      	b.n	8006dea <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	789b      	ldrb	r3, [r3, #2]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b60:	fb02 f303 	mul.w	r3, r2, r3
 8006b64:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	895b      	ldrh	r3, [r3, #10]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <find_volume+0x224>
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	895b      	ldrh	r3, [r3, #10]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	895b      	ldrh	r3, [r3, #10]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	4013      	ands	r3, r2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <find_volume+0x228>
 8006b8c:	230d      	movs	r3, #13
 8006b8e:	e12c      	b.n	8006dea <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	3330      	adds	r3, #48	; 0x30
 8006b94:	3311      	adds	r3, #17
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe fcc8 	bl	800552c <ld_word>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	891b      	ldrh	r3, [r3, #8]
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <find_volume+0x24e>
 8006bb2:	230d      	movs	r3, #13
 8006bb4:	e119      	b.n	8006dea <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	3330      	adds	r3, #48	; 0x30
 8006bba:	3313      	adds	r3, #19
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fe fcb5 	bl	800552c <ld_word>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <find_volume+0x272>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	3330      	adds	r3, #48	; 0x30
 8006bd0:	3320      	adds	r3, #32
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fcc2 	bl	800555c <ld_dword>
 8006bd8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	3330      	adds	r3, #48	; 0x30
 8006bde:	330e      	adds	r3, #14
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fe fca3 	bl	800552c <ld_word>
 8006be6:	4603      	mov	r3, r0
 8006be8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006bea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <find_volume+0x28c>
 8006bf0:	230d      	movs	r3, #13
 8006bf2:	e0fa      	b.n	8006dea <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006bf4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf8:	4413      	add	r3, r2
 8006bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bfc:	8912      	ldrh	r2, [r2, #8]
 8006bfe:	0912      	lsrs	r2, r2, #4
 8006c00:	b292      	uxth	r2, r2
 8006c02:	4413      	add	r3, r2
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d204      	bcs.n	8006c18 <find_volume+0x2b0>
 8006c0e:	230d      	movs	r3, #13
 8006c10:	e0eb      	b.n	8006dea <find_volume+0x482>
 8006c12:	bf00      	nop
 8006c14:	20000648 	.word	0x20000648
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c20:	8952      	ldrh	r2, [r2, #10]
 8006c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <find_volume+0x2ca>
 8006c2e:	230d      	movs	r3, #13
 8006c30:	e0db      	b.n	8006dea <find_volume+0x482>
		fmt = FS_FAT32;
 8006c32:	2303      	movs	r3, #3
 8006c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d802      	bhi.n	8006c48 <find_volume+0x2e0>
 8006c42:	2302      	movs	r3, #2
 8006c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d802      	bhi.n	8006c58 <find_volume+0x2f0>
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	1c9a      	adds	r2, r3, #2
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c64:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006c66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6a:	441a      	add	r2, r3
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006c70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	441a      	add	r2, r3
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d11e      	bne.n	8006cc0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	3330      	adds	r3, #48	; 0x30
 8006c86:	332a      	adds	r3, #42	; 0x2a
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe fc4f 	bl	800552c <ld_word>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <find_volume+0x330>
 8006c94:	230d      	movs	r3, #13
 8006c96:	e0a8      	b.n	8006dea <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	891b      	ldrh	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <find_volume+0x33c>
 8006ca0:	230d      	movs	r3, #13
 8006ca2:	e0a2      	b.n	8006dea <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	3330      	adds	r3, #48	; 0x30
 8006ca8:	332c      	adds	r3, #44	; 0x2c
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fe fc56 	bl	800555c <ld_dword>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cbe:	e01f      	b.n	8006d00 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	891b      	ldrh	r3, [r3, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <find_volume+0x364>
 8006cc8:	230d      	movs	r3, #13
 8006cca:	e08e      	b.n	8006dea <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	6a1a      	ldr	r2, [r3, #32]
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd2:	441a      	add	r2, r3
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d103      	bne.n	8006ce8 <find_volume+0x380>
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	005b      	lsls	r3, r3, #1
 8006ce6:	e00a      	b.n	8006cfe <find_volume+0x396>
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	4613      	mov	r3, r2
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	4413      	add	r3, r2
 8006cf2:	085a      	lsrs	r2, r3, #1
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006cfe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	699a      	ldr	r2, [r3, #24]
 8006d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d06:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006d0a:	0a5b      	lsrs	r3, r3, #9
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d201      	bcs.n	8006d14 <find_volume+0x3ac>
 8006d10:	230d      	movs	r3, #13
 8006d12:	e06a      	b.n	8006dea <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d16:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1a:	611a      	str	r2, [r3, #16]
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d26:	2280      	movs	r2, #128	; 0x80
 8006d28:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d149      	bne.n	8006dc6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	3330      	adds	r3, #48	; 0x30
 8006d36:	3330      	adds	r3, #48	; 0x30
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fbf7 	bl	800552c <ld_word>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d140      	bne.n	8006dc6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d46:	3301      	adds	r3, #1
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d4c:	f7fe fe9e 	bl	8005a8c <move_window>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d137      	bne.n	8006dc6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	2200      	movs	r2, #0
 8006d5a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	3330      	adds	r3, #48	; 0x30
 8006d60:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fbe1 	bl	800552c <ld_word>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d127      	bne.n	8006dc6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	3330      	adds	r3, #48	; 0x30
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe fbee 	bl	800555c <ld_dword>
 8006d80:	4603      	mov	r3, r0
 8006d82:	4a1c      	ldr	r2, [pc, #112]	; (8006df4 <find_volume+0x48c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d11e      	bne.n	8006dc6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8a:	3330      	adds	r3, #48	; 0x30
 8006d8c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fe fbe3 	bl	800555c <ld_dword>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <find_volume+0x490>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d113      	bne.n	8006dc6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	3330      	adds	r3, #48	; 0x30
 8006da2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fe fbd8 	bl	800555c <ld_dword>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	3330      	adds	r3, #48	; 0x30
 8006db6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fe fbce 	bl	800555c <ld_dword>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006dcc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <find_volume+0x494>)
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <find_volume+0x494>)
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <find_volume+0x494>)
 8006ddc:	881a      	ldrh	r2, [r3, #0]
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006de2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006de4:	f7fe fdea 	bl	80059bc <clear_lock>
#endif
	return FR_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3758      	adds	r7, #88	; 0x58
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	41615252 	.word	0x41615252
 8006df8:	61417272 	.word	0x61417272
 8006dfc:	2000064c 	.word	0x2000064c

08006e00 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006e0a:	2309      	movs	r3, #9
 8006e0c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01c      	beq.n	8006e4e <validate+0x4e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d018      	beq.n	8006e4e <validate+0x4e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d013      	beq.n	8006e4e <validate+0x4e>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	889a      	ldrh	r2, [r3, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	88db      	ldrh	r3, [r3, #6]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d10c      	bne.n	8006e4e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe fad8 	bl	80053f0 <disk_status>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <validate+0x4e>
			res = FR_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d102      	bne.n	8006e5a <validate+0x5a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	e000      	b.n	8006e5c <validate+0x5c>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	6013      	str	r3, [r2, #0]
	return res;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	4613      	mov	r3, r2
 8006e78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e7e:	f107 0310 	add.w	r3, r7, #16
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff fcd5 	bl	8006832 <get_ldnumber>
 8006e88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	da01      	bge.n	8006e94 <f_mount+0x28>
 8006e90:	230b      	movs	r3, #11
 8006e92:	e02b      	b.n	8006eec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e94:	4a17      	ldr	r2, [pc, #92]	; (8006ef4 <f_mount+0x88>)
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006ea4:	69b8      	ldr	r0, [r7, #24]
 8006ea6:	f7fe fd89 	bl	80059bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	490d      	ldr	r1, [pc, #52]	; (8006ef4 <f_mount+0x88>)
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <f_mount+0x66>
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d001      	beq.n	8006ed6 <f_mount+0x6a>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e00a      	b.n	8006eec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ed6:	f107 010c 	add.w	r1, r7, #12
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fd41 	bl	8006968 <find_volume>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20000648 	.word	0x20000648

08006ef8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b098      	sub	sp, #96	; 0x60
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	4613      	mov	r3, r2
 8006f04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <f_open+0x18>
 8006f0c:	2309      	movs	r3, #9
 8006f0e:	e1ad      	b.n	800726c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006f18:	79fa      	ldrb	r2, [r7, #7]
 8006f1a:	f107 0110 	add.w	r1, r7, #16
 8006f1e:	f107 0308 	add.w	r3, r7, #8
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fd20 	bl	8006968 <find_volume>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006f2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 8191 	bne.w	800725a <f_open+0x362>
		dj.obj.fs = fs;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	f107 0314 	add.w	r3, r7, #20
 8006f42:	4611      	mov	r1, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff fc03 	bl	8006750 <follow_path>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006f50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d11a      	bne.n	8006f8e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006f58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f5c:	b25b      	sxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	da03      	bge.n	8006f6a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006f62:	2306      	movs	r3, #6
 8006f64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f68:	e011      	b.n	8006f8e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f107 0314 	add.w	r3, r7, #20
 8006f80:	4611      	mov	r1, r2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fbd2 	bl	800572c <chk_lock>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	f003 031c 	and.w	r3, r3, #28
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d07f      	beq.n	8007098 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006f98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d017      	beq.n	8006fd0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d10e      	bne.n	8006fc6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006fa8:	f7fe fc1c 	bl	80057e4 <enq_lock>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d006      	beq.n	8006fc0 <f_open+0xc8>
 8006fb2:	f107 0314 	add.w	r3, r7, #20
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7ff fb03 	bl	80065c2 <dir_register>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	e000      	b.n	8006fc2 <f_open+0xca>
 8006fc0:	2312      	movs	r3, #18
 8006fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	f043 0308 	orr.w	r3, r3, #8
 8006fcc:	71fb      	strb	r3, [r7, #7]
 8006fce:	e010      	b.n	8006ff2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006fd0:	7ebb      	ldrb	r3, [r7, #26]
 8006fd2:	f003 0311 	and.w	r3, r3, #17
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <f_open+0xea>
					res = FR_DENIED;
 8006fda:	2307      	movs	r3, #7
 8006fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006fe0:	e007      	b.n	8006ff2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <f_open+0xfa>
 8006fec:	2308      	movs	r3, #8
 8006fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d168      	bne.n	80070cc <f_open+0x1d4>
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d063      	beq.n	80070cc <f_open+0x1d4>
				dw = GET_FATTIME();
 8007004:	f7fd ffa4 	bl	8004f50 <get_fattime>
 8007008:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700c:	330e      	adds	r3, #14
 800700e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe fae1 	bl	80055d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	3316      	adds	r3, #22
 800701a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe fadb 	bl	80055d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	330b      	adds	r3, #11
 8007026:	2220      	movs	r2, #32
 8007028:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800702e:	4611      	mov	r1, r2
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff fa32 	bl	800649a <ld_clust>
 8007036:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800703c:	2200      	movs	r2, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff fa4a 	bl	80064d8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007046:	331c      	adds	r3, #28
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f7fe fac4 	bl	80055d8 <st_dword>
					fs->wflag = 1;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2201      	movs	r2, #1
 8007054:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d037      	beq.n	80070cc <f_open+0x1d4>
						dw = fs->winsect;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007062:	f107 0314 	add.w	r3, r7, #20
 8007066:	2200      	movs	r2, #0
 8007068:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe ff5d 	bl	8005f2a <remove_chain>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800707a:	2b00      	cmp	r3, #0
 800707c:	d126      	bne.n	80070cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007082:	4618      	mov	r0, r3
 8007084:	f7fe fd02 	bl	8005a8c <move_window>
 8007088:	4603      	mov	r3, r0
 800708a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007092:	3a01      	subs	r2, #1
 8007094:	60da      	str	r2, [r3, #12]
 8007096:	e019      	b.n	80070cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800709c:	2b00      	cmp	r3, #0
 800709e:	d115      	bne.n	80070cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80070a0:	7ebb      	ldrb	r3, [r7, #26]
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80070aa:	2304      	movs	r3, #4
 80070ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80070b0:	e00c      	b.n	80070cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d007      	beq.n	80070cc <f_open+0x1d4>
 80070bc:	7ebb      	ldrb	r3, [r7, #26]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <f_open+0x1d4>
						res = FR_DENIED;
 80070c6:	2307      	movs	r3, #7
 80070c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80070cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d128      	bne.n	8007126 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80070de:	79fb      	ldrb	r3, [r7, #7]
 80070e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80070ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80070f4:	79fb      	ldrb	r3, [r7, #7]
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bf14      	ite	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	2300      	moveq	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	f107 0314 	add.w	r3, r7, #20
 800710a:	4611      	mov	r1, r2
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fb8b 	bl	8005828 <inc_lock>
 8007112:	4602      	mov	r2, r0
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d102      	bne.n	8007126 <f_open+0x22e>
 8007120:	2302      	movs	r3, #2
 8007122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007126:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800712a:	2b00      	cmp	r3, #0
 800712c:	f040 8095 	bne.w	800725a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff f9af 	bl	800649a <ld_clust>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	331c      	adds	r3, #28
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fa08 	bl	800555c <ld_dword>
 800714c:	4602      	mov	r2, r0
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	88da      	ldrh	r2, [r3, #6]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	79fa      	ldrb	r2, [r7, #7]
 800716a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3330      	adds	r3, #48	; 0x30
 8007182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f7fe fa72 	bl	8005672 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800718e:	79fb      	ldrb	r3, [r7, #7]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b00      	cmp	r3, #0
 8007196:	d060      	beq.n	800725a <f_open+0x362>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d05c      	beq.n	800725a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	895b      	ldrh	r3, [r3, #10]
 80071ac:	025b      	lsls	r3, r3, #9
 80071ae:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	657b      	str	r3, [r7, #84]	; 0x54
 80071bc:	e016      	b.n	80071ec <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe fd1d 	bl	8005c02 <get_fat>
 80071c8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80071ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d802      	bhi.n	80071d6 <f_open+0x2de>
 80071d0:	2302      	movs	r3, #2
 80071d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80071d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d102      	bne.n	80071e4 <f_open+0x2ec>
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80071e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	657b      	str	r3, [r7, #84]	; 0x54
 80071ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d103      	bne.n	80071fc <f_open+0x304>
 80071f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d8e0      	bhi.n	80071be <f_open+0x2c6>
				}
				fp->clust = clst;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007200:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007202:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007206:	2b00      	cmp	r3, #0
 8007208:	d127      	bne.n	800725a <f_open+0x362>
 800720a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800720c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007210:	2b00      	cmp	r3, #0
 8007212:	d022      	beq.n	800725a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007218:	4618      	mov	r0, r3
 800721a:	f7fe fcd3 	bl	8005bc4 <clust2sect>
 800721e:	6478      	str	r0, [r7, #68]	; 0x44
 8007220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007222:	2b00      	cmp	r3, #0
 8007224:	d103      	bne.n	800722e <f_open+0x336>
						res = FR_INT_ERR;
 8007226:	2302      	movs	r3, #2
 8007228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800722c:	e015      	b.n	800725a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800722e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007230:	0a5a      	lsrs	r2, r3, #9
 8007232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007234:	441a      	add	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	7858      	ldrb	r0, [r3, #1]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a1a      	ldr	r2, [r3, #32]
 8007248:	2301      	movs	r3, #1
 800724a:	f7fe f911 	bl	8005470 <disk_read>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <f_open+0x362>
 8007254:	2301      	movs	r3, #1
 8007256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800725a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <f_open+0x370>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800726c:	4618      	mov	r0, r3
 800726e:	3760      	adds	r7, #96	; 0x60
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08c      	sub	sp, #48	; 0x30
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f107 0210 	add.w	r2, r7, #16
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fdb3 	bl	8006e00 <validate>
 800729a:	4603      	mov	r3, r0
 800729c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80072a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d107      	bne.n	80072b8 <f_write+0x44>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	7d5b      	ldrb	r3, [r3, #21]
 80072ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80072b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <f_write+0x4a>
 80072b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072bc:	e14b      	b.n	8007556 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	7d1b      	ldrb	r3, [r3, #20]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <f_write+0x5a>
 80072ca:	2307      	movs	r3, #7
 80072cc:	e143      	b.n	8007556 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	429a      	cmp	r2, r3
 80072dc:	f080 812d 	bcs.w	800753a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	43db      	mvns	r3, r3
 80072e6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80072e8:	e127      	b.n	800753a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f040 80e3 	bne.w	80074be <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	0a5b      	lsrs	r3, r3, #9
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	8952      	ldrh	r2, [r2, #10]
 8007302:	3a01      	subs	r2, #1
 8007304:	4013      	ands	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d143      	bne.n	8007396 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10c      	bne.n	8007330 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11a      	bne.n	8007358 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fe64 	bl	8005ff4 <create_chain>
 800732c:	62b8      	str	r0, [r7, #40]	; 0x28
 800732e:	e013      	b.n	8007358 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	2b00      	cmp	r3, #0
 8007336:	d007      	beq.n	8007348 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	4619      	mov	r1, r3
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7fe fef0 	bl	8006124 <clmt_clust>
 8007344:	62b8      	str	r0, [r7, #40]	; 0x28
 8007346:	e007      	b.n	8007358 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe fe4f 	bl	8005ff4 <create_chain>
 8007356:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 80f2 	beq.w	8007544 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	2b01      	cmp	r3, #1
 8007364:	d104      	bne.n	8007370 <f_write+0xfc>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2202      	movs	r2, #2
 800736a:	755a      	strb	r2, [r3, #21]
 800736c:	2302      	movs	r3, #2
 800736e:	e0f2      	b.n	8007556 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d104      	bne.n	8007382 <f_write+0x10e>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	755a      	strb	r2, [r3, #21]
 800737e:	2301      	movs	r3, #1
 8007380:	e0e9      	b.n	8007556 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007386:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <f_write+0x122>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007394:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	7d1b      	ldrb	r3, [r3, #20]
 800739a:	b25b      	sxtb	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	da18      	bge.n	80073d2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	7858      	ldrb	r0, [r3, #1]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1a      	ldr	r2, [r3, #32]
 80073ae:	2301      	movs	r3, #1
 80073b0:	f7fe f87e 	bl	80054b0 <disk_write>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d004      	beq.n	80073c4 <f_write+0x150>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2201      	movs	r2, #1
 80073be:	755a      	strb	r2, [r3, #21]
 80073c0:	2301      	movs	r3, #1
 80073c2:	e0c8      	b.n	8007556 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	7d1b      	ldrb	r3, [r3, #20]
 80073c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	4619      	mov	r1, r3
 80073da:	4610      	mov	r0, r2
 80073dc:	f7fe fbf2 	bl	8005bc4 <clust2sect>
 80073e0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <f_write+0x17e>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2202      	movs	r2, #2
 80073ec:	755a      	strb	r2, [r3, #21]
 80073ee:	2302      	movs	r3, #2
 80073f0:	e0b1      	b.n	8007556 <f_write+0x2e2>
			sect += csect;
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	4413      	add	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	0a5b      	lsrs	r3, r3, #9
 80073fe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d03c      	beq.n	8007480 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	4413      	add	r3, r2
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	8952      	ldrh	r2, [r2, #10]
 8007410:	4293      	cmp	r3, r2
 8007412:	d905      	bls.n	8007420 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	895b      	ldrh	r3, [r3, #10]
 8007418:	461a      	mov	r2, r3
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	7858      	ldrb	r0, [r3, #1]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	69f9      	ldr	r1, [r7, #28]
 800742a:	f7fe f841 	bl	80054b0 <disk_write>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <f_write+0x1ca>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	755a      	strb	r2, [r3, #21]
 800743a:	2301      	movs	r3, #1
 800743c:	e08b      	b.n	8007556 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1a      	ldr	r2, [r3, #32]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	6a3a      	ldr	r2, [r7, #32]
 8007448:	429a      	cmp	r2, r3
 800744a:	d915      	bls.n	8007478 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a1a      	ldr	r2, [r3, #32]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	025b      	lsls	r3, r3, #9
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007464:	4619      	mov	r1, r3
 8007466:	f7fe f8e3 	bl	8005630 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	7d1b      	ldrb	r3, [r3, #20]
 800746e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007472:	b2da      	uxtb	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	025b      	lsls	r3, r3, #9
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800747e:	e03f      	b.n	8007500 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	429a      	cmp	r2, r3
 8007488:	d016      	beq.n	80074b8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007492:	429a      	cmp	r2, r3
 8007494:	d210      	bcs.n	80074b8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	7858      	ldrb	r0, [r3, #1]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074a0:	2301      	movs	r3, #1
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	f7fd ffe4 	bl	8005470 <disk_read>
 80074a8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	755a      	strb	r2, [r3, #21]
 80074b4:	2301      	movs	r3, #1
 80074b6:	e04e      	b.n	8007556 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80074cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d901      	bls.n	80074d8 <f_write+0x264>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e6:	4413      	add	r3, r2
 80074e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ea:	69f9      	ldr	r1, [r7, #28]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fe f89f 	bl	8005630 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	7d1b      	ldrb	r3, [r3, #20]
 80074f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	4413      	add	r3, r2
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	441a      	add	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	619a      	str	r2, [r3, #24]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	68da      	ldr	r2, [r3, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	429a      	cmp	r2, r3
 800751e:	bf38      	it	cc
 8007520:	461a      	movcc	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	60da      	str	r2, [r3, #12]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	441a      	add	r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f47f aed4 	bne.w	80072ea <f_write+0x76>
 8007542:	e000      	b.n	8007546 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007544:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	7d1b      	ldrb	r3, [r3, #20]
 800754a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800754e:	b2da      	uxtb	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3730      	adds	r7, #48	; 0x30
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b086      	sub	sp, #24
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f107 0208 	add.w	r2, r7, #8
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f7ff fc46 	bl	8006e00 <validate>
 8007574:	4603      	mov	r3, r0
 8007576:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d168      	bne.n	8007650 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	7d1b      	ldrb	r3, [r3, #20]
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d062      	beq.n	8007650 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	7d1b      	ldrb	r3, [r3, #20]
 800758e:	b25b      	sxtb	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	da15      	bge.n	80075c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	7858      	ldrb	r0, [r3, #1]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1a      	ldr	r2, [r3, #32]
 80075a2:	2301      	movs	r3, #1
 80075a4:	f7fd ff84 	bl	80054b0 <disk_write>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <f_sync+0x54>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e04f      	b.n	8007652 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	7d1b      	ldrb	r3, [r3, #20]
 80075b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80075c0:	f7fd fcc6 	bl	8004f50 <get_fattime>
 80075c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	4619      	mov	r1, r3
 80075ce:	4610      	mov	r0, r2
 80075d0:	f7fe fa5c 	bl	8005a8c <move_window>
 80075d4:	4603      	mov	r3, r0
 80075d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d138      	bne.n	8007650 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	330b      	adds	r3, #11
 80075e8:	781a      	ldrb	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	330b      	adds	r3, #11
 80075ee:	f042 0220 	orr.w	r2, r2, #32
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	461a      	mov	r2, r3
 8007600:	68f9      	ldr	r1, [r7, #12]
 8007602:	f7fe ff69 	bl	80064d8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f103 021c 	add.w	r2, r3, #28
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f7fd ffe0 	bl	80055d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3316      	adds	r3, #22
 800761c:	6939      	ldr	r1, [r7, #16]
 800761e:	4618      	mov	r0, r3
 8007620:	f7fd ffda 	bl	80055d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3312      	adds	r3, #18
 8007628:	2100      	movs	r1, #0
 800762a:	4618      	mov	r0, r3
 800762c:	f7fd ffb9 	bl	80055a2 <st_word>
					fs->wflag = 1;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2201      	movs	r2, #1
 8007634:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	4618      	mov	r0, r3
 800763a:	f7fe fa55 	bl	8005ae8 <sync_fs>
 800763e:	4603      	mov	r3, r0
 8007640:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	7d1b      	ldrb	r3, [r3, #20]
 8007646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764a:	b2da      	uxtb	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007650:	7dfb      	ldrb	r3, [r7, #23]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff ff7b 	bl	800755e <f_sync>
 8007668:	4603      	mov	r3, r0
 800766a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800766c:	7bfb      	ldrb	r3, [r7, #15]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d118      	bne.n	80076a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f107 0208 	add.w	r2, r7, #8
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fbc0 	bl	8006e00 <validate>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10c      	bne.n	80076a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	4618      	mov	r0, r3
 8007690:	f7fe f958 	bl	8005944 <dec_lock>
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d102      	bne.n	80076a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b09d      	sub	sp, #116	; 0x74
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	460b      	mov	r3, r1
 80076be:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80076c0:	2301      	movs	r3, #1
 80076c2:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80076c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076c8:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80076ca:	f107 030c 	add.w	r3, r7, #12
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff f8af 	bl	8006832 <get_ldnumber>
 80076d4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80076d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	da02      	bge.n	80076e2 <f_mkfs+0x32>
 80076dc:	230b      	movs	r3, #11
 80076de:	f000 bc0d 	b.w	8007efc <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80076e2:	4a94      	ldr	r2, [pc, #592]	; (8007934 <f_mkfs+0x284>)
 80076e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <f_mkfs+0x4a>
 80076ee:	4a91      	ldr	r2, [pc, #580]	; (8007934 <f_mkfs+0x284>)
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8007700:	2300      	movs	r3, #0
 8007702:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8007706:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800770a:	4618      	mov	r0, r3
 800770c:	f7fd fe8a 	bl	8005424 <disk_initialize>
 8007710:	4603      	mov	r3, r0
 8007712:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8007716:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <f_mkfs+0x76>
 8007722:	2303      	movs	r3, #3
 8007724:	e3ea      	b.n	8007efc <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8007726:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800772a:	f003 0304 	and.w	r3, r3, #4
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <f_mkfs+0x86>
 8007732:	230a      	movs	r3, #10
 8007734:	e3e2      	b.n	8007efc <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8007736:	f107 0214 	add.w	r2, r7, #20
 800773a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800773e:	2103      	movs	r1, #3
 8007740:	4618      	mov	r0, r3
 8007742:	f7fd fed5 	bl	80054f0 <disk_ioctl>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <f_mkfs+0xb6>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <f_mkfs+0xb6>
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007758:	d805      	bhi.n	8007766 <f_mkfs+0xb6>
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	1e5a      	subs	r2, r3, #1
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	4013      	ands	r3, r2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <f_mkfs+0xba>
 8007766:	2301      	movs	r3, #1
 8007768:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800776a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800776e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <f_mkfs+0xce>
 8007776:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	429a      	cmp	r2, r3
 800777c:	d309      	bcc.n	8007792 <f_mkfs+0xe2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007784:	d805      	bhi.n	8007792 <f_mkfs+0xe2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	1e5a      	subs	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4013      	ands	r3, r2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <f_mkfs+0xe6>
 8007792:	2313      	movs	r3, #19
 8007794:	e3b2      	b.n	8007efc <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8007796:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	fbb2 f3f3 	udiv	r3, r2, r3
 800779e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80077a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80077a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80077b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	fb02 f303 	mul.w	r3, r2, r3
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <f_mkfs+0x114>
 80077c0:	230e      	movs	r3, #14
 80077c2:	e39b      	b.n	8007efc <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80077c4:	f107 0210 	add.w	r2, r7, #16
 80077c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80077cc:	2101      	movs	r1, #1
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fd fe8e 	bl	80054f0 <disk_ioctl>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <f_mkfs+0x12e>
 80077da:	2301      	movs	r3, #1
 80077dc:	e38e      	b.n	8007efc <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80077de:	7afb      	ldrb	r3, [r7, #11]
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <f_mkfs+0x13c>
 80077e8:	2300      	movs	r3, #0
 80077ea:	e000      	b.n	80077ee <f_mkfs+0x13e>
 80077ec:	233f      	movs	r3, #63	; 0x3f
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d901      	bls.n	80077fc <f_mkfs+0x14c>
 80077f8:	230e      	movs	r3, #14
 80077fa:	e37f      	b.n	8007efc <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b7f      	cmp	r3, #127	; 0x7f
 8007808:	d801      	bhi.n	800780e <f_mkfs+0x15e>
 800780a:	230e      	movs	r3, #14
 800780c:	e376      	b.n	8007efc <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b80      	cmp	r3, #128	; 0x80
 8007812:	d901      	bls.n	8007818 <f_mkfs+0x168>
 8007814:	2313      	movs	r3, #19
 8007816:	e371      	b.n	8007efc <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8007818:	7afb      	ldrb	r3, [r7, #11]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00d      	beq.n	800783e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	2b02      	cmp	r3, #2
 800782a:	d004      	beq.n	8007836 <f_mkfs+0x186>
 800782c:	7afb      	ldrb	r3, [r7, #11]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d103      	bne.n	800783e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8007836:	2303      	movs	r3, #3
 8007838:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800783c:	e009      	b.n	8007852 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <f_mkfs+0x19c>
 8007848:	2313      	movs	r3, #19
 800784a:	e357      	b.n	8007efc <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800784c:	2302      	movs	r3, #2
 800784e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8007856:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800785a:	2b03      	cmp	r3, #3
 800785c:	d13c      	bne.n	80078d8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800785e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007860:	2b00      	cmp	r3, #0
 8007862:	d11b      	bne.n	800789c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	0c5b      	lsrs	r3, r3, #17
 8007868:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800786a:	2300      	movs	r3, #0
 800786c:	64bb      	str	r3, [r7, #72]	; 0x48
 800786e:	2301      	movs	r3, #1
 8007870:	653b      	str	r3, [r7, #80]	; 0x50
 8007872:	e005      	b.n	8007880 <f_mkfs+0x1d0>
 8007874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007876:	3301      	adds	r3, #1
 8007878:	64bb      	str	r3, [r7, #72]	; 0x48
 800787a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	653b      	str	r3, [r7, #80]	; 0x50
 8007880:	4a2d      	ldr	r2, [pc, #180]	; (8007938 <f_mkfs+0x288>)
 8007882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <f_mkfs+0x1ec>
 800788c:	4a2a      	ldr	r2, [pc, #168]	; (8007938 <f_mkfs+0x288>)
 800788e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007894:	461a      	mov	r2, r3
 8007896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007898:	4293      	cmp	r3, r2
 800789a:	d2eb      	bcs.n	8007874 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	3302      	adds	r3, #2
 80078aa:	009a      	lsls	r2, r3, #2
 80078ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80078ae:	4413      	add	r3, r2
 80078b0:	1e5a      	subs	r2, r3, #1
 80078b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80078ba:	2320      	movs	r3, #32
 80078bc:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80078be:	2300      	movs	r3, #0
 80078c0:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d903      	bls.n	80078d4 <f_mkfs+0x224>
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	4a1b      	ldr	r2, [pc, #108]	; (800793c <f_mkfs+0x28c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d952      	bls.n	800797a <f_mkfs+0x2ca>
 80078d4:	230e      	movs	r3, #14
 80078d6:	e311      	b.n	8007efc <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80078d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d11b      	bne.n	8007916 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	0b1b      	lsrs	r3, r3, #12
 80078e2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80078e4:	2300      	movs	r3, #0
 80078e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80078e8:	2301      	movs	r3, #1
 80078ea:	653b      	str	r3, [r7, #80]	; 0x50
 80078ec:	e005      	b.n	80078fa <f_mkfs+0x24a>
 80078ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f0:	3301      	adds	r3, #1
 80078f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f6:	005b      	lsls	r3, r3, #1
 80078f8:	653b      	str	r3, [r7, #80]	; 0x50
 80078fa:	4a11      	ldr	r2, [pc, #68]	; (8007940 <f_mkfs+0x290>)
 80078fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d007      	beq.n	8007916 <f_mkfs+0x266>
 8007906:	4a0e      	ldr	r2, [pc, #56]	; (8007940 <f_mkfs+0x290>)
 8007908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800790a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800790e:	461a      	mov	r2, r3
 8007910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007912:	4293      	cmp	r3, r2
 8007914:	d2eb      	bcs.n	80078ee <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800791a:	fbb2 f3f3 	udiv	r3, r2, r3
 800791e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007926:	4293      	cmp	r3, r2
 8007928:	d90c      	bls.n	8007944 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	3302      	adds	r3, #2
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007932:	e012      	b.n	800795a <f_mkfs+0x2aa>
 8007934:	20000648 	.word	0x20000648
 8007938:	08008a30 	.word	0x08008a30
 800793c:	0ffffff5 	.word	0x0ffffff5
 8007940:	08008a40 	.word	0x08008a40
				} else {
					fmt = FS_FAT12;
 8007944:	2301      	movs	r3, #1
 8007946:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800794a:	6a3a      	ldr	r2, [r7, #32]
 800794c:	4613      	mov	r3, r2
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	4413      	add	r3, r2
 8007952:	3301      	adds	r3, #1
 8007954:	085b      	lsrs	r3, r3, #1
 8007956:	3303      	adds	r3, #3
 8007958:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800795a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800795c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800795e:	4413      	add	r3, r2
 8007960:	1e5a      	subs	r2, r3, #1
 8007962:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007964:	fbb2 f3f3 	udiv	r3, r2, r3
 8007968:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800796a:	2301      	movs	r3, #1
 800796c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800796e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007974:	fbb2 f3f3 	udiv	r3, r2, r3
 8007978:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800797a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797e:	4413      	add	r3, r2
 8007980:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8007982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007986:	fb03 f202 	mul.w	r2, r3, r2
 800798a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800798c:	4413      	add	r3, r2
 800798e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007990:	4413      	add	r3, r2
 8007992:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	4413      	add	r3, r2
 800799a:	1e5a      	subs	r2, r3, #1
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	425b      	negs	r3, r3
 80079a0:	401a      	ands	r2, r3
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80079a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d108      	bne.n	80079c2 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80079b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b4:	4413      	add	r3, r2
 80079b6:	657b      	str	r3, [r7, #84]	; 0x54
 80079b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079bc:	4413      	add	r3, r2
 80079be:	65bb      	str	r3, [r7, #88]	; 0x58
 80079c0:	e006      	b.n	80079d0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80079c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079cc:	4413      	add	r3, r2
 80079ce:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80079d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d2:	011a      	lsls	r2, r3, #4
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	441a      	add	r2, r3
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	1ad2      	subs	r2, r2, r3
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d901      	bls.n	80079e6 <f_mkfs+0x336>
 80079e2:	230e      	movs	r3, #14
 80079e4:	e28a      	b.n	8007efc <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ea:	1ad2      	subs	r2, r2, r3
 80079ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	1ad2      	subs	r2, r2, r3
 80079f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f8:	1ad2      	subs	r2, r2, r3
 80079fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a00:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8007a02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d10f      	bne.n	8007a2a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d80a      	bhi.n	8007a2a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d105      	bne.n	8007a26 <f_mkfs+0x376>
 8007a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a1c:	085b      	lsrs	r3, r3, #1
 8007a1e:	607b      	str	r3, [r7, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d144      	bne.n	8007ab0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8007a26:	230e      	movs	r3, #14
 8007a28:	e268      	b.n	8007efc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8007a2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d133      	bne.n	8007a9a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d91e      	bls.n	8007a7a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <f_mkfs+0x3a2>
 8007a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	2b40      	cmp	r3, #64	; 0x40
 8007a48:	d803      	bhi.n	8007a52 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	607b      	str	r3, [r7, #4]
 8007a50:	e033      	b.n	8007aba <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8007a52:	7afb      	ldrb	r3, [r7, #11]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007a62:	e02a      	b.n	8007aba <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d105      	bne.n	8007a76 <f_mkfs+0x3c6>
 8007a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a6c:	005b      	lsls	r3, r3, #1
 8007a6e:	607b      	str	r3, [r7, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d91e      	bls.n	8007ab4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8007a76:	230e      	movs	r3, #14
 8007a78:	e240      	b.n	8007efc <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d80a      	bhi.n	8007a9a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <f_mkfs+0x3e6>
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	607b      	str	r3, [r7, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b80      	cmp	r3, #128	; 0x80
 8007a94:	d910      	bls.n	8007ab8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8007a96:	230e      	movs	r3, #14
 8007a98:	e230      	b.n	8007efc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8007a9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d10c      	bne.n	8007abc <f_mkfs+0x40c>
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d907      	bls.n	8007abc <f_mkfs+0x40c>
 8007aac:	230e      	movs	r3, #14
 8007aae:	e225      	b.n	8007efc <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007ab0:	bf00      	nop
 8007ab2:	e6ce      	b.n	8007852 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007ab4:	bf00      	nop
 8007ab6:	e6cc      	b.n	8007852 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007ab8:	bf00      	nop
			pau = au;
 8007aba:	e6ca      	b.n	8007852 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8007abc:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8007abe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ac6:	f7fd fdd4 	bl	8005672 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8007aca:	220b      	movs	r2, #11
 8007acc:	49b2      	ldr	r1, [pc, #712]	; (8007d98 <f_mkfs+0x6e8>)
 8007ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ad0:	f7fd fdae 	bl	8005630 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	330b      	adds	r3, #11
 8007ad8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fd fd60 	bl	80055a2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	330d      	adds	r3, #13
 8007ae6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	330e      	adds	r3, #14
 8007af0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007af2:	b292      	uxth	r2, r2
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fd fd53 	bl	80055a2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	3310      	adds	r3, #16
 8007b00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	f103 0211 	add.w	r2, r3, #17
 8007b0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d002      	beq.n	8007b1a <f_mkfs+0x46a>
 8007b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	e000      	b.n	8007b1c <f_mkfs+0x46c>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	f7fd fd3f 	bl	80055a2 <st_word>
		if (sz_vol < 0x10000) {
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b2a:	d208      	bcs.n	8007b3e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	3313      	adds	r3, #19
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	b292      	uxth	r2, r2
 8007b34:	4611      	mov	r1, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fd fd33 	bl	80055a2 <st_word>
 8007b3c:	e006      	b.n	8007b4c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	3320      	adds	r3, #32
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4611      	mov	r1, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fd fd46 	bl	80055d8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	3315      	adds	r3, #21
 8007b50:	22f8      	movs	r2, #248	; 0xf8
 8007b52:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	3318      	adds	r3, #24
 8007b58:	213f      	movs	r1, #63	; 0x3f
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fd fd21 	bl	80055a2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8007b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b62:	331a      	adds	r3, #26
 8007b64:	21ff      	movs	r1, #255	; 0xff
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fd fd1b 	bl	80055a2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	331c      	adds	r3, #28
 8007b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fd fd30 	bl	80055d8 <st_dword>
		if (fmt == FS_FAT32) {
 8007b78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d131      	bne.n	8007be4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8007b86:	f7fd f9e3 	bl	8004f50 <get_fattime>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f7fd fd22 	bl	80055d8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8007b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b96:	3324      	adds	r3, #36	; 0x24
 8007b98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd fd1c 	bl	80055d8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	332c      	adds	r3, #44	; 0x2c
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fd fd16 	bl	80055d8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	3330      	adds	r3, #48	; 0x30
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fd fcf5 	bl	80055a2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	3332      	adds	r3, #50	; 0x32
 8007bbc:	2106      	movs	r1, #6
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fd fcef 	bl	80055a2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	3340      	adds	r3, #64	; 0x40
 8007bc8:	2280      	movs	r2, #128	; 0x80
 8007bca:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	3342      	adds	r3, #66	; 0x42
 8007bd0:	2229      	movs	r2, #41	; 0x29
 8007bd2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd6:	3347      	adds	r3, #71	; 0x47
 8007bd8:	2213      	movs	r2, #19
 8007bda:	4970      	ldr	r1, [pc, #448]	; (8007d9c <f_mkfs+0x6ec>)
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fd fd27 	bl	8005630 <mem_cpy>
 8007be2:	e020      	b.n	8007c26 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8007bea:	f7fd f9b1 	bl	8004f50 <get_fattime>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f7fd fcf0 	bl	80055d8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	3316      	adds	r3, #22
 8007bfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bfe:	b292      	uxth	r2, r2
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fd fccd 	bl	80055a2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	3324      	adds	r3, #36	; 0x24
 8007c0c:	2280      	movs	r2, #128	; 0x80
 8007c0e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	3326      	adds	r3, #38	; 0x26
 8007c14:	2229      	movs	r2, #41	; 0x29
 8007c16:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	332b      	adds	r3, #43	; 0x2b
 8007c1c:	2213      	movs	r2, #19
 8007c1e:	4960      	ldr	r1, [pc, #384]	; (8007da0 <f_mkfs+0x6f0>)
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fd fd05 	bl	8005630 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c2c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fd fcb6 	bl	80055a2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8007c36:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c40:	f7fd fc36 	bl	80054b0 <disk_write>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <f_mkfs+0x59e>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e156      	b.n	8007efc <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8007c4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d140      	bne.n	8007cd8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	1d9a      	adds	r2, r3, #6
 8007c5a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007c5e:	2301      	movs	r3, #1
 8007c60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c62:	f7fd fc25 	bl	80054b0 <disk_write>
			mem_set(buf, 0, ss);
 8007c66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c68:	461a      	mov	r2, r3
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c6e:	f7fd fd00 	bl	8005672 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8007c72:	494c      	ldr	r1, [pc, #304]	; (8007da4 <f_mkfs+0x6f4>)
 8007c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c76:	f7fd fcaf 	bl	80055d8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c80:	4949      	ldr	r1, [pc, #292]	; (8007da8 <f_mkfs+0x6f8>)
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fd fca8 	bl	80055d8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f7fd fc9f 	bl	80055d8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007ca0:	2102      	movs	r1, #2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fd fc98 	bl	80055d8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007cae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fd fc75 	bl	80055a2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	1dda      	adds	r2, r3, #7
 8007cbc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cc4:	f7fd fbf4 	bl	80054b0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cd4:	f7fd fbec 	bl	80054b0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8007cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cda:	2100      	movs	r1, #0
 8007cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cde:	f7fd fcc8 	bl	8005672 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8007ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ce4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cea:	e04b      	b.n	8007d84 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8007cec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d113      	bne.n	8007d1c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8007cf4:	f06f 0107 	mvn.w	r1, #7
 8007cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cfa:	f7fd fc6d 	bl	80055d8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	3304      	adds	r3, #4
 8007d02:	f04f 31ff 	mov.w	r1, #4294967295
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fd fc66 	bl	80055d8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	3308      	adds	r3, #8
 8007d10:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fd fc5f 	bl	80055d8 <st_dword>
 8007d1a:	e00b      	b.n	8007d34 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8007d1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <f_mkfs+0x678>
 8007d24:	4b21      	ldr	r3, [pc, #132]	; (8007dac <f_mkfs+0x6fc>)
 8007d26:	e001      	b.n	8007d2c <f_mkfs+0x67c>
 8007d28:	f06f 0307 	mvn.w	r3, #7
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d30:	f7fd fc52 	bl	80055d8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8007d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d36:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007d38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	bf28      	it	cs
 8007d40:	4613      	movcs	r3, r2
 8007d42:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007d44:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d4e:	f7fd fbaf 	bl	80054b0 <disk_write>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <f_mkfs+0x6ac>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e0cf      	b.n	8007efc <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8007d5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d5e:	461a      	mov	r2, r3
 8007d60:	2100      	movs	r1, #0
 8007d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d64:	f7fd fc85 	bl	8005672 <mem_set>
				sect += n; nsect -= n;
 8007d68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d6c:	4413      	add	r3, r2
 8007d6e:	667b      	str	r3, [r7, #100]	; 0x64
 8007d70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8007d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1dc      	bne.n	8007d38 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d80:	3301      	adds	r3, #1
 8007d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d3af      	bcc.n	8007cec <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8007d8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d10d      	bne.n	8007db0 <f_mkfs+0x700>
 8007d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d96:	e00c      	b.n	8007db2 <f_mkfs+0x702>
 8007d98:	08008950 	.word	0x08008950
 8007d9c:	0800895c 	.word	0x0800895c
 8007da0:	08008970 	.word	0x08008970
 8007da4:	41615252 	.word	0x41615252
 8007da8:	61417272 	.word	0x61417272
 8007dac:	00fffff8 	.word	0x00fffff8
 8007db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db2:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	4293      	cmp	r3, r2
 8007dba:	bf28      	it	cs
 8007dbc:	4613      	movcs	r3, r2
 8007dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007dc0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dca:	f7fd fb71 	bl	80054b0 <disk_write>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <f_mkfs+0x728>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e091      	b.n	8007efc <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8007dd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ddc:	4413      	add	r3, r2
 8007dde:	667b      	str	r3, [r7, #100]	; 0x64
 8007de0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8007de8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e2      	bne.n	8007db4 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8007dee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d103      	bne.n	8007dfe <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8007df6:	230c      	movs	r3, #12
 8007df8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007dfc:	e010      	b.n	8007e20 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e04:	d303      	bcc.n	8007e0e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8007e06:	2306      	movs	r3, #6
 8007e08:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007e0c:	e008      	b.n	8007e20 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8007e0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d101      	bne.n	8007e1a <f_mkfs+0x76a>
 8007e16:	2304      	movs	r3, #4
 8007e18:	e000      	b.n	8007e1c <f_mkfs+0x76c>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	f003 0308 	and.w	r3, r3, #8
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d15b      	bne.n	8007ee2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8007e2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	2100      	movs	r1, #0
 8007e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e32:	f7fd fc1e 	bl	8005672 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e3c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fd fbae 	bl	80055a2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e4c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2200      	movs	r2, #0
 8007e52:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	3301      	adds	r3, #1
 8007e58:	2201      	movs	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	3302      	adds	r3, #2
 8007e60:	2201      	movs	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	3303      	adds	r3, #3
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8007e74:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	441a      	add	r2, r3
 8007e7c:	4b21      	ldr	r3, [pc, #132]	; (8007f04 <f_mkfs+0x854>)
 8007e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8007e82:	1ad2      	subs	r2, r2, r3
 8007e84:	0852      	lsrs	r2, r2, #1
 8007e86:	4413      	add	r3, r2
 8007e88:	0b5b      	lsrs	r3, r3, #13
 8007e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	3305      	adds	r3, #5
 8007e90:	22fe      	movs	r2, #254	; 0xfe
 8007e92:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8007e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e96:	089b      	lsrs	r3, r3, #2
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	3306      	adds	r3, #6
 8007e9e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	3307      	adds	r3, #7
 8007eaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fd fb8e 	bl	80055d8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	330c      	adds	r3, #12
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fd fb87 	bl	80055d8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8007eca:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007ece:	2301      	movs	r3, #1
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ed4:	f7fd faec 	bl	80054b0 <disk_write>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <f_mkfs+0x832>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e00c      	b.n	8007efc <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8007ee2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fd fb00 	bl	80054f0 <disk_ioctl>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <f_mkfs+0x84a>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <f_mkfs+0x84c>

	return FR_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3774      	adds	r7, #116	; 0x74
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd90      	pop	{r4, r7, pc}
 8007f04:	0515565b 	.word	0x0515565b

08007f08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	4613      	mov	r3, r2
 8007f14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007f16:	2301      	movs	r3, #1
 8007f18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007f1e:	4b1f      	ldr	r3, [pc, #124]	; (8007f9c <FATFS_LinkDriverEx+0x94>)
 8007f20:	7a5b      	ldrb	r3, [r3, #9]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d131      	bne.n	8007f8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007f28:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <FATFS_LinkDriverEx+0x94>)
 8007f2a:	7a5b      	ldrb	r3, [r3, #9]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	461a      	mov	r2, r3
 8007f30:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <FATFS_LinkDriverEx+0x94>)
 8007f32:	2100      	movs	r1, #0
 8007f34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007f36:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <FATFS_LinkDriverEx+0x94>)
 8007f38:	7a5b      	ldrb	r3, [r3, #9]
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	4a17      	ldr	r2, [pc, #92]	; (8007f9c <FATFS_LinkDriverEx+0x94>)
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <FATFS_LinkDriverEx+0x94>)
 8007f48:	7a5b      	ldrb	r3, [r3, #9]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <FATFS_LinkDriverEx+0x94>)
 8007f50:	4413      	add	r3, r2
 8007f52:	79fa      	ldrb	r2, [r7, #7]
 8007f54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f56:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <FATFS_LinkDriverEx+0x94>)
 8007f58:	7a5b      	ldrb	r3, [r3, #9]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	b2d1      	uxtb	r1, r2
 8007f60:	4a0e      	ldr	r2, [pc, #56]	; (8007f9c <FATFS_LinkDriverEx+0x94>)
 8007f62:	7251      	strb	r1, [r2, #9]
 8007f64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f66:	7dbb      	ldrb	r3, [r7, #22]
 8007f68:	3330      	adds	r3, #48	; 0x30
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3301      	adds	r3, #1
 8007f74:	223a      	movs	r2, #58	; 0x3a
 8007f76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3302      	adds	r3, #2
 8007f7c:	222f      	movs	r2, #47	; 0x2f
 8007f7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	3303      	adds	r3, #3
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	371c      	adds	r7, #28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20000670 	.word	0x20000670

08007fa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007faa:	2200      	movs	r2, #0
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff ffaa 	bl	8007f08 <FATFS_LinkDriverEx>
 8007fb4:	4603      	mov	r3, r0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <__errno>:
 8007fc0:	4b01      	ldr	r3, [pc, #4]	; (8007fc8 <__errno+0x8>)
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	2000000c 	.word	0x2000000c

08007fcc <__libc_init_array>:
 8007fcc:	b570      	push	{r4, r5, r6, lr}
 8007fce:	4d0d      	ldr	r5, [pc, #52]	; (8008004 <__libc_init_array+0x38>)
 8007fd0:	4c0d      	ldr	r4, [pc, #52]	; (8008008 <__libc_init_array+0x3c>)
 8007fd2:	1b64      	subs	r4, r4, r5
 8007fd4:	10a4      	asrs	r4, r4, #2
 8007fd6:	2600      	movs	r6, #0
 8007fd8:	42a6      	cmp	r6, r4
 8007fda:	d109      	bne.n	8007ff0 <__libc_init_array+0x24>
 8007fdc:	4d0b      	ldr	r5, [pc, #44]	; (800800c <__libc_init_array+0x40>)
 8007fde:	4c0c      	ldr	r4, [pc, #48]	; (8008010 <__libc_init_array+0x44>)
 8007fe0:	f000 fc8e 	bl	8008900 <_init>
 8007fe4:	1b64      	subs	r4, r4, r5
 8007fe6:	10a4      	asrs	r4, r4, #2
 8007fe8:	2600      	movs	r6, #0
 8007fea:	42a6      	cmp	r6, r4
 8007fec:	d105      	bne.n	8007ffa <__libc_init_array+0x2e>
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff4:	4798      	blx	r3
 8007ff6:	3601      	adds	r6, #1
 8007ff8:	e7ee      	b.n	8007fd8 <__libc_init_array+0xc>
 8007ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffe:	4798      	blx	r3
 8008000:	3601      	adds	r6, #1
 8008002:	e7f2      	b.n	8007fea <__libc_init_array+0x1e>
 8008004:	08008a8c 	.word	0x08008a8c
 8008008:	08008a8c 	.word	0x08008a8c
 800800c:	08008a8c 	.word	0x08008a8c
 8008010:	08008a90 	.word	0x08008a90

08008014 <memset>:
 8008014:	4402      	add	r2, r0
 8008016:	4603      	mov	r3, r0
 8008018:	4293      	cmp	r3, r2
 800801a:	d100      	bne.n	800801e <memset+0xa>
 800801c:	4770      	bx	lr
 800801e:	f803 1b01 	strb.w	r1, [r3], #1
 8008022:	e7f9      	b.n	8008018 <memset+0x4>

08008024 <siprintf>:
 8008024:	b40e      	push	{r1, r2, r3}
 8008026:	b500      	push	{lr}
 8008028:	b09c      	sub	sp, #112	; 0x70
 800802a:	ab1d      	add	r3, sp, #116	; 0x74
 800802c:	9002      	str	r0, [sp, #8]
 800802e:	9006      	str	r0, [sp, #24]
 8008030:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008034:	4809      	ldr	r0, [pc, #36]	; (800805c <siprintf+0x38>)
 8008036:	9107      	str	r1, [sp, #28]
 8008038:	9104      	str	r1, [sp, #16]
 800803a:	4909      	ldr	r1, [pc, #36]	; (8008060 <siprintf+0x3c>)
 800803c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008040:	9105      	str	r1, [sp, #20]
 8008042:	6800      	ldr	r0, [r0, #0]
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	a902      	add	r1, sp, #8
 8008048:	f000 f868 	bl	800811c <_svfiprintf_r>
 800804c:	9b02      	ldr	r3, [sp, #8]
 800804e:	2200      	movs	r2, #0
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	b01c      	add	sp, #112	; 0x70
 8008054:	f85d eb04 	ldr.w	lr, [sp], #4
 8008058:	b003      	add	sp, #12
 800805a:	4770      	bx	lr
 800805c:	2000000c 	.word	0x2000000c
 8008060:	ffff0208 	.word	0xffff0208

08008064 <__ssputs_r>:
 8008064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	688e      	ldr	r6, [r1, #8]
 800806a:	429e      	cmp	r6, r3
 800806c:	4682      	mov	sl, r0
 800806e:	460c      	mov	r4, r1
 8008070:	4690      	mov	r8, r2
 8008072:	461f      	mov	r7, r3
 8008074:	d838      	bhi.n	80080e8 <__ssputs_r+0x84>
 8008076:	898a      	ldrh	r2, [r1, #12]
 8008078:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800807c:	d032      	beq.n	80080e4 <__ssputs_r+0x80>
 800807e:	6825      	ldr	r5, [r4, #0]
 8008080:	6909      	ldr	r1, [r1, #16]
 8008082:	eba5 0901 	sub.w	r9, r5, r1
 8008086:	6965      	ldr	r5, [r4, #20]
 8008088:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800808c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008090:	3301      	adds	r3, #1
 8008092:	444b      	add	r3, r9
 8008094:	106d      	asrs	r5, r5, #1
 8008096:	429d      	cmp	r5, r3
 8008098:	bf38      	it	cc
 800809a:	461d      	movcc	r5, r3
 800809c:	0553      	lsls	r3, r2, #21
 800809e:	d531      	bpl.n	8008104 <__ssputs_r+0xa0>
 80080a0:	4629      	mov	r1, r5
 80080a2:	f000 fb63 	bl	800876c <_malloc_r>
 80080a6:	4606      	mov	r6, r0
 80080a8:	b950      	cbnz	r0, 80080c0 <__ssputs_r+0x5c>
 80080aa:	230c      	movs	r3, #12
 80080ac:	f8ca 3000 	str.w	r3, [sl]
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b6:	81a3      	strh	r3, [r4, #12]
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295
 80080bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c0:	6921      	ldr	r1, [r4, #16]
 80080c2:	464a      	mov	r2, r9
 80080c4:	f000 fabe 	bl	8008644 <memcpy>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d2:	81a3      	strh	r3, [r4, #12]
 80080d4:	6126      	str	r6, [r4, #16]
 80080d6:	6165      	str	r5, [r4, #20]
 80080d8:	444e      	add	r6, r9
 80080da:	eba5 0509 	sub.w	r5, r5, r9
 80080de:	6026      	str	r6, [r4, #0]
 80080e0:	60a5      	str	r5, [r4, #8]
 80080e2:	463e      	mov	r6, r7
 80080e4:	42be      	cmp	r6, r7
 80080e6:	d900      	bls.n	80080ea <__ssputs_r+0x86>
 80080e8:	463e      	mov	r6, r7
 80080ea:	6820      	ldr	r0, [r4, #0]
 80080ec:	4632      	mov	r2, r6
 80080ee:	4641      	mov	r1, r8
 80080f0:	f000 fab6 	bl	8008660 <memmove>
 80080f4:	68a3      	ldr	r3, [r4, #8]
 80080f6:	1b9b      	subs	r3, r3, r6
 80080f8:	60a3      	str	r3, [r4, #8]
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	4433      	add	r3, r6
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	2000      	movs	r0, #0
 8008102:	e7db      	b.n	80080bc <__ssputs_r+0x58>
 8008104:	462a      	mov	r2, r5
 8008106:	f000 fba5 	bl	8008854 <_realloc_r>
 800810a:	4606      	mov	r6, r0
 800810c:	2800      	cmp	r0, #0
 800810e:	d1e1      	bne.n	80080d4 <__ssputs_r+0x70>
 8008110:	6921      	ldr	r1, [r4, #16]
 8008112:	4650      	mov	r0, sl
 8008114:	f000 fabe 	bl	8008694 <_free_r>
 8008118:	e7c7      	b.n	80080aa <__ssputs_r+0x46>
	...

0800811c <_svfiprintf_r>:
 800811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008120:	4698      	mov	r8, r3
 8008122:	898b      	ldrh	r3, [r1, #12]
 8008124:	061b      	lsls	r3, r3, #24
 8008126:	b09d      	sub	sp, #116	; 0x74
 8008128:	4607      	mov	r7, r0
 800812a:	460d      	mov	r5, r1
 800812c:	4614      	mov	r4, r2
 800812e:	d50e      	bpl.n	800814e <_svfiprintf_r+0x32>
 8008130:	690b      	ldr	r3, [r1, #16]
 8008132:	b963      	cbnz	r3, 800814e <_svfiprintf_r+0x32>
 8008134:	2140      	movs	r1, #64	; 0x40
 8008136:	f000 fb19 	bl	800876c <_malloc_r>
 800813a:	6028      	str	r0, [r5, #0]
 800813c:	6128      	str	r0, [r5, #16]
 800813e:	b920      	cbnz	r0, 800814a <_svfiprintf_r+0x2e>
 8008140:	230c      	movs	r3, #12
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
 8008148:	e0d1      	b.n	80082ee <_svfiprintf_r+0x1d2>
 800814a:	2340      	movs	r3, #64	; 0x40
 800814c:	616b      	str	r3, [r5, #20]
 800814e:	2300      	movs	r3, #0
 8008150:	9309      	str	r3, [sp, #36]	; 0x24
 8008152:	2320      	movs	r3, #32
 8008154:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008158:	f8cd 800c 	str.w	r8, [sp, #12]
 800815c:	2330      	movs	r3, #48	; 0x30
 800815e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008308 <_svfiprintf_r+0x1ec>
 8008162:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008166:	f04f 0901 	mov.w	r9, #1
 800816a:	4623      	mov	r3, r4
 800816c:	469a      	mov	sl, r3
 800816e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008172:	b10a      	cbz	r2, 8008178 <_svfiprintf_r+0x5c>
 8008174:	2a25      	cmp	r2, #37	; 0x25
 8008176:	d1f9      	bne.n	800816c <_svfiprintf_r+0x50>
 8008178:	ebba 0b04 	subs.w	fp, sl, r4
 800817c:	d00b      	beq.n	8008196 <_svfiprintf_r+0x7a>
 800817e:	465b      	mov	r3, fp
 8008180:	4622      	mov	r2, r4
 8008182:	4629      	mov	r1, r5
 8008184:	4638      	mov	r0, r7
 8008186:	f7ff ff6d 	bl	8008064 <__ssputs_r>
 800818a:	3001      	adds	r0, #1
 800818c:	f000 80aa 	beq.w	80082e4 <_svfiprintf_r+0x1c8>
 8008190:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008192:	445a      	add	r2, fp
 8008194:	9209      	str	r2, [sp, #36]	; 0x24
 8008196:	f89a 3000 	ldrb.w	r3, [sl]
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80a2 	beq.w	80082e4 <_svfiprintf_r+0x1c8>
 80081a0:	2300      	movs	r3, #0
 80081a2:	f04f 32ff 	mov.w	r2, #4294967295
 80081a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081aa:	f10a 0a01 	add.w	sl, sl, #1
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	9307      	str	r3, [sp, #28]
 80081b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081b6:	931a      	str	r3, [sp, #104]	; 0x68
 80081b8:	4654      	mov	r4, sl
 80081ba:	2205      	movs	r2, #5
 80081bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c0:	4851      	ldr	r0, [pc, #324]	; (8008308 <_svfiprintf_r+0x1ec>)
 80081c2:	f7f8 f82d 	bl	8000220 <memchr>
 80081c6:	9a04      	ldr	r2, [sp, #16]
 80081c8:	b9d8      	cbnz	r0, 8008202 <_svfiprintf_r+0xe6>
 80081ca:	06d0      	lsls	r0, r2, #27
 80081cc:	bf44      	itt	mi
 80081ce:	2320      	movmi	r3, #32
 80081d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d4:	0711      	lsls	r1, r2, #28
 80081d6:	bf44      	itt	mi
 80081d8:	232b      	movmi	r3, #43	; 0x2b
 80081da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081de:	f89a 3000 	ldrb.w	r3, [sl]
 80081e2:	2b2a      	cmp	r3, #42	; 0x2a
 80081e4:	d015      	beq.n	8008212 <_svfiprintf_r+0xf6>
 80081e6:	9a07      	ldr	r2, [sp, #28]
 80081e8:	4654      	mov	r4, sl
 80081ea:	2000      	movs	r0, #0
 80081ec:	f04f 0c0a 	mov.w	ip, #10
 80081f0:	4621      	mov	r1, r4
 80081f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081f6:	3b30      	subs	r3, #48	; 0x30
 80081f8:	2b09      	cmp	r3, #9
 80081fa:	d94e      	bls.n	800829a <_svfiprintf_r+0x17e>
 80081fc:	b1b0      	cbz	r0, 800822c <_svfiprintf_r+0x110>
 80081fe:	9207      	str	r2, [sp, #28]
 8008200:	e014      	b.n	800822c <_svfiprintf_r+0x110>
 8008202:	eba0 0308 	sub.w	r3, r0, r8
 8008206:	fa09 f303 	lsl.w	r3, r9, r3
 800820a:	4313      	orrs	r3, r2
 800820c:	9304      	str	r3, [sp, #16]
 800820e:	46a2      	mov	sl, r4
 8008210:	e7d2      	b.n	80081b8 <_svfiprintf_r+0x9c>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	1d19      	adds	r1, r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	9103      	str	r1, [sp, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	bfbb      	ittet	lt
 800821e:	425b      	neglt	r3, r3
 8008220:	f042 0202 	orrlt.w	r2, r2, #2
 8008224:	9307      	strge	r3, [sp, #28]
 8008226:	9307      	strlt	r3, [sp, #28]
 8008228:	bfb8      	it	lt
 800822a:	9204      	strlt	r2, [sp, #16]
 800822c:	7823      	ldrb	r3, [r4, #0]
 800822e:	2b2e      	cmp	r3, #46	; 0x2e
 8008230:	d10c      	bne.n	800824c <_svfiprintf_r+0x130>
 8008232:	7863      	ldrb	r3, [r4, #1]
 8008234:	2b2a      	cmp	r3, #42	; 0x2a
 8008236:	d135      	bne.n	80082a4 <_svfiprintf_r+0x188>
 8008238:	9b03      	ldr	r3, [sp, #12]
 800823a:	1d1a      	adds	r2, r3, #4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	9203      	str	r2, [sp, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	bfb8      	it	lt
 8008244:	f04f 33ff 	movlt.w	r3, #4294967295
 8008248:	3402      	adds	r4, #2
 800824a:	9305      	str	r3, [sp, #20]
 800824c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008318 <_svfiprintf_r+0x1fc>
 8008250:	7821      	ldrb	r1, [r4, #0]
 8008252:	2203      	movs	r2, #3
 8008254:	4650      	mov	r0, sl
 8008256:	f7f7 ffe3 	bl	8000220 <memchr>
 800825a:	b140      	cbz	r0, 800826e <_svfiprintf_r+0x152>
 800825c:	2340      	movs	r3, #64	; 0x40
 800825e:	eba0 000a 	sub.w	r0, r0, sl
 8008262:	fa03 f000 	lsl.w	r0, r3, r0
 8008266:	9b04      	ldr	r3, [sp, #16]
 8008268:	4303      	orrs	r3, r0
 800826a:	3401      	adds	r4, #1
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008272:	4826      	ldr	r0, [pc, #152]	; (800830c <_svfiprintf_r+0x1f0>)
 8008274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008278:	2206      	movs	r2, #6
 800827a:	f7f7 ffd1 	bl	8000220 <memchr>
 800827e:	2800      	cmp	r0, #0
 8008280:	d038      	beq.n	80082f4 <_svfiprintf_r+0x1d8>
 8008282:	4b23      	ldr	r3, [pc, #140]	; (8008310 <_svfiprintf_r+0x1f4>)
 8008284:	bb1b      	cbnz	r3, 80082ce <_svfiprintf_r+0x1b2>
 8008286:	9b03      	ldr	r3, [sp, #12]
 8008288:	3307      	adds	r3, #7
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	3308      	adds	r3, #8
 8008290:	9303      	str	r3, [sp, #12]
 8008292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008294:	4433      	add	r3, r6
 8008296:	9309      	str	r3, [sp, #36]	; 0x24
 8008298:	e767      	b.n	800816a <_svfiprintf_r+0x4e>
 800829a:	fb0c 3202 	mla	r2, ip, r2, r3
 800829e:	460c      	mov	r4, r1
 80082a0:	2001      	movs	r0, #1
 80082a2:	e7a5      	b.n	80081f0 <_svfiprintf_r+0xd4>
 80082a4:	2300      	movs	r3, #0
 80082a6:	3401      	adds	r4, #1
 80082a8:	9305      	str	r3, [sp, #20]
 80082aa:	4619      	mov	r1, r3
 80082ac:	f04f 0c0a 	mov.w	ip, #10
 80082b0:	4620      	mov	r0, r4
 80082b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b6:	3a30      	subs	r2, #48	; 0x30
 80082b8:	2a09      	cmp	r2, #9
 80082ba:	d903      	bls.n	80082c4 <_svfiprintf_r+0x1a8>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0c5      	beq.n	800824c <_svfiprintf_r+0x130>
 80082c0:	9105      	str	r1, [sp, #20]
 80082c2:	e7c3      	b.n	800824c <_svfiprintf_r+0x130>
 80082c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c8:	4604      	mov	r4, r0
 80082ca:	2301      	movs	r3, #1
 80082cc:	e7f0      	b.n	80082b0 <_svfiprintf_r+0x194>
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	462a      	mov	r2, r5
 80082d4:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <_svfiprintf_r+0x1f8>)
 80082d6:	a904      	add	r1, sp, #16
 80082d8:	4638      	mov	r0, r7
 80082da:	f3af 8000 	nop.w
 80082de:	1c42      	adds	r2, r0, #1
 80082e0:	4606      	mov	r6, r0
 80082e2:	d1d6      	bne.n	8008292 <_svfiprintf_r+0x176>
 80082e4:	89ab      	ldrh	r3, [r5, #12]
 80082e6:	065b      	lsls	r3, r3, #25
 80082e8:	f53f af2c 	bmi.w	8008144 <_svfiprintf_r+0x28>
 80082ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ee:	b01d      	add	sp, #116	; 0x74
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f4:	ab03      	add	r3, sp, #12
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	462a      	mov	r2, r5
 80082fa:	4b06      	ldr	r3, [pc, #24]	; (8008314 <_svfiprintf_r+0x1f8>)
 80082fc:	a904      	add	r1, sp, #16
 80082fe:	4638      	mov	r0, r7
 8008300:	f000 f87a 	bl	80083f8 <_printf_i>
 8008304:	e7eb      	b.n	80082de <_svfiprintf_r+0x1c2>
 8008306:	bf00      	nop
 8008308:	08008a4e 	.word	0x08008a4e
 800830c:	08008a58 	.word	0x08008a58
 8008310:	00000000 	.word	0x00000000
 8008314:	08008065 	.word	0x08008065
 8008318:	08008a54 	.word	0x08008a54

0800831c <_printf_common>:
 800831c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008320:	4616      	mov	r6, r2
 8008322:	4699      	mov	r9, r3
 8008324:	688a      	ldr	r2, [r1, #8]
 8008326:	690b      	ldr	r3, [r1, #16]
 8008328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800832c:	4293      	cmp	r3, r2
 800832e:	bfb8      	it	lt
 8008330:	4613      	movlt	r3, r2
 8008332:	6033      	str	r3, [r6, #0]
 8008334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008338:	4607      	mov	r7, r0
 800833a:	460c      	mov	r4, r1
 800833c:	b10a      	cbz	r2, 8008342 <_printf_common+0x26>
 800833e:	3301      	adds	r3, #1
 8008340:	6033      	str	r3, [r6, #0]
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	0699      	lsls	r1, r3, #26
 8008346:	bf42      	ittt	mi
 8008348:	6833      	ldrmi	r3, [r6, #0]
 800834a:	3302      	addmi	r3, #2
 800834c:	6033      	strmi	r3, [r6, #0]
 800834e:	6825      	ldr	r5, [r4, #0]
 8008350:	f015 0506 	ands.w	r5, r5, #6
 8008354:	d106      	bne.n	8008364 <_printf_common+0x48>
 8008356:	f104 0a19 	add.w	sl, r4, #25
 800835a:	68e3      	ldr	r3, [r4, #12]
 800835c:	6832      	ldr	r2, [r6, #0]
 800835e:	1a9b      	subs	r3, r3, r2
 8008360:	42ab      	cmp	r3, r5
 8008362:	dc26      	bgt.n	80083b2 <_printf_common+0x96>
 8008364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008368:	1e13      	subs	r3, r2, #0
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	bf18      	it	ne
 800836e:	2301      	movne	r3, #1
 8008370:	0692      	lsls	r2, r2, #26
 8008372:	d42b      	bmi.n	80083cc <_printf_common+0xb0>
 8008374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008378:	4649      	mov	r1, r9
 800837a:	4638      	mov	r0, r7
 800837c:	47c0      	blx	r8
 800837e:	3001      	adds	r0, #1
 8008380:	d01e      	beq.n	80083c0 <_printf_common+0xa4>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	68e5      	ldr	r5, [r4, #12]
 8008386:	6832      	ldr	r2, [r6, #0]
 8008388:	f003 0306 	and.w	r3, r3, #6
 800838c:	2b04      	cmp	r3, #4
 800838e:	bf08      	it	eq
 8008390:	1aad      	subeq	r5, r5, r2
 8008392:	68a3      	ldr	r3, [r4, #8]
 8008394:	6922      	ldr	r2, [r4, #16]
 8008396:	bf0c      	ite	eq
 8008398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800839c:	2500      	movne	r5, #0
 800839e:	4293      	cmp	r3, r2
 80083a0:	bfc4      	itt	gt
 80083a2:	1a9b      	subgt	r3, r3, r2
 80083a4:	18ed      	addgt	r5, r5, r3
 80083a6:	2600      	movs	r6, #0
 80083a8:	341a      	adds	r4, #26
 80083aa:	42b5      	cmp	r5, r6
 80083ac:	d11a      	bne.n	80083e4 <_printf_common+0xc8>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e008      	b.n	80083c4 <_printf_common+0xa8>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4652      	mov	r2, sl
 80083b6:	4649      	mov	r1, r9
 80083b8:	4638      	mov	r0, r7
 80083ba:	47c0      	blx	r8
 80083bc:	3001      	adds	r0, #1
 80083be:	d103      	bne.n	80083c8 <_printf_common+0xac>
 80083c0:	f04f 30ff 	mov.w	r0, #4294967295
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	3501      	adds	r5, #1
 80083ca:	e7c6      	b.n	800835a <_printf_common+0x3e>
 80083cc:	18e1      	adds	r1, r4, r3
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	2030      	movs	r0, #48	; 0x30
 80083d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083d6:	4422      	add	r2, r4
 80083d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083e0:	3302      	adds	r3, #2
 80083e2:	e7c7      	b.n	8008374 <_printf_common+0x58>
 80083e4:	2301      	movs	r3, #1
 80083e6:	4622      	mov	r2, r4
 80083e8:	4649      	mov	r1, r9
 80083ea:	4638      	mov	r0, r7
 80083ec:	47c0      	blx	r8
 80083ee:	3001      	adds	r0, #1
 80083f0:	d0e6      	beq.n	80083c0 <_printf_common+0xa4>
 80083f2:	3601      	adds	r6, #1
 80083f4:	e7d9      	b.n	80083aa <_printf_common+0x8e>
	...

080083f8 <_printf_i>:
 80083f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	7e0f      	ldrb	r7, [r1, #24]
 80083fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008400:	2f78      	cmp	r7, #120	; 0x78
 8008402:	4691      	mov	r9, r2
 8008404:	4680      	mov	r8, r0
 8008406:	460c      	mov	r4, r1
 8008408:	469a      	mov	sl, r3
 800840a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800840e:	d807      	bhi.n	8008420 <_printf_i+0x28>
 8008410:	2f62      	cmp	r7, #98	; 0x62
 8008412:	d80a      	bhi.n	800842a <_printf_i+0x32>
 8008414:	2f00      	cmp	r7, #0
 8008416:	f000 80d8 	beq.w	80085ca <_printf_i+0x1d2>
 800841a:	2f58      	cmp	r7, #88	; 0x58
 800841c:	f000 80a3 	beq.w	8008566 <_printf_i+0x16e>
 8008420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008428:	e03a      	b.n	80084a0 <_printf_i+0xa8>
 800842a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800842e:	2b15      	cmp	r3, #21
 8008430:	d8f6      	bhi.n	8008420 <_printf_i+0x28>
 8008432:	a101      	add	r1, pc, #4	; (adr r1, 8008438 <_printf_i+0x40>)
 8008434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008438:	08008491 	.word	0x08008491
 800843c:	080084a5 	.word	0x080084a5
 8008440:	08008421 	.word	0x08008421
 8008444:	08008421 	.word	0x08008421
 8008448:	08008421 	.word	0x08008421
 800844c:	08008421 	.word	0x08008421
 8008450:	080084a5 	.word	0x080084a5
 8008454:	08008421 	.word	0x08008421
 8008458:	08008421 	.word	0x08008421
 800845c:	08008421 	.word	0x08008421
 8008460:	08008421 	.word	0x08008421
 8008464:	080085b1 	.word	0x080085b1
 8008468:	080084d5 	.word	0x080084d5
 800846c:	08008593 	.word	0x08008593
 8008470:	08008421 	.word	0x08008421
 8008474:	08008421 	.word	0x08008421
 8008478:	080085d3 	.word	0x080085d3
 800847c:	08008421 	.word	0x08008421
 8008480:	080084d5 	.word	0x080084d5
 8008484:	08008421 	.word	0x08008421
 8008488:	08008421 	.word	0x08008421
 800848c:	0800859b 	.word	0x0800859b
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	1d1a      	adds	r2, r3, #4
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	602a      	str	r2, [r5, #0]
 8008498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800849c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084a0:	2301      	movs	r3, #1
 80084a2:	e0a3      	b.n	80085ec <_printf_i+0x1f4>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	6829      	ldr	r1, [r5, #0]
 80084a8:	0606      	lsls	r6, r0, #24
 80084aa:	f101 0304 	add.w	r3, r1, #4
 80084ae:	d50a      	bpl.n	80084c6 <_printf_i+0xce>
 80084b0:	680e      	ldr	r6, [r1, #0]
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	2e00      	cmp	r6, #0
 80084b6:	da03      	bge.n	80084c0 <_printf_i+0xc8>
 80084b8:	232d      	movs	r3, #45	; 0x2d
 80084ba:	4276      	negs	r6, r6
 80084bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084c0:	485e      	ldr	r0, [pc, #376]	; (800863c <_printf_i+0x244>)
 80084c2:	230a      	movs	r3, #10
 80084c4:	e019      	b.n	80084fa <_printf_i+0x102>
 80084c6:	680e      	ldr	r6, [r1, #0]
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084ce:	bf18      	it	ne
 80084d0:	b236      	sxthne	r6, r6
 80084d2:	e7ef      	b.n	80084b4 <_printf_i+0xbc>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	6820      	ldr	r0, [r4, #0]
 80084d8:	1d19      	adds	r1, r3, #4
 80084da:	6029      	str	r1, [r5, #0]
 80084dc:	0601      	lsls	r1, r0, #24
 80084de:	d501      	bpl.n	80084e4 <_printf_i+0xec>
 80084e0:	681e      	ldr	r6, [r3, #0]
 80084e2:	e002      	b.n	80084ea <_printf_i+0xf2>
 80084e4:	0646      	lsls	r6, r0, #25
 80084e6:	d5fb      	bpl.n	80084e0 <_printf_i+0xe8>
 80084e8:	881e      	ldrh	r6, [r3, #0]
 80084ea:	4854      	ldr	r0, [pc, #336]	; (800863c <_printf_i+0x244>)
 80084ec:	2f6f      	cmp	r7, #111	; 0x6f
 80084ee:	bf0c      	ite	eq
 80084f0:	2308      	moveq	r3, #8
 80084f2:	230a      	movne	r3, #10
 80084f4:	2100      	movs	r1, #0
 80084f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084fa:	6865      	ldr	r5, [r4, #4]
 80084fc:	60a5      	str	r5, [r4, #8]
 80084fe:	2d00      	cmp	r5, #0
 8008500:	bfa2      	ittt	ge
 8008502:	6821      	ldrge	r1, [r4, #0]
 8008504:	f021 0104 	bicge.w	r1, r1, #4
 8008508:	6021      	strge	r1, [r4, #0]
 800850a:	b90e      	cbnz	r6, 8008510 <_printf_i+0x118>
 800850c:	2d00      	cmp	r5, #0
 800850e:	d04d      	beq.n	80085ac <_printf_i+0x1b4>
 8008510:	4615      	mov	r5, r2
 8008512:	fbb6 f1f3 	udiv	r1, r6, r3
 8008516:	fb03 6711 	mls	r7, r3, r1, r6
 800851a:	5dc7      	ldrb	r7, [r0, r7]
 800851c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008520:	4637      	mov	r7, r6
 8008522:	42bb      	cmp	r3, r7
 8008524:	460e      	mov	r6, r1
 8008526:	d9f4      	bls.n	8008512 <_printf_i+0x11a>
 8008528:	2b08      	cmp	r3, #8
 800852a:	d10b      	bne.n	8008544 <_printf_i+0x14c>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	07de      	lsls	r6, r3, #31
 8008530:	d508      	bpl.n	8008544 <_printf_i+0x14c>
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	6861      	ldr	r1, [r4, #4]
 8008536:	4299      	cmp	r1, r3
 8008538:	bfde      	ittt	le
 800853a:	2330      	movle	r3, #48	; 0x30
 800853c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008540:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008544:	1b52      	subs	r2, r2, r5
 8008546:	6122      	str	r2, [r4, #16]
 8008548:	f8cd a000 	str.w	sl, [sp]
 800854c:	464b      	mov	r3, r9
 800854e:	aa03      	add	r2, sp, #12
 8008550:	4621      	mov	r1, r4
 8008552:	4640      	mov	r0, r8
 8008554:	f7ff fee2 	bl	800831c <_printf_common>
 8008558:	3001      	adds	r0, #1
 800855a:	d14c      	bne.n	80085f6 <_printf_i+0x1fe>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	b004      	add	sp, #16
 8008562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008566:	4835      	ldr	r0, [pc, #212]	; (800863c <_printf_i+0x244>)
 8008568:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800856c:	6829      	ldr	r1, [r5, #0]
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	f851 6b04 	ldr.w	r6, [r1], #4
 8008574:	6029      	str	r1, [r5, #0]
 8008576:	061d      	lsls	r5, r3, #24
 8008578:	d514      	bpl.n	80085a4 <_printf_i+0x1ac>
 800857a:	07df      	lsls	r7, r3, #31
 800857c:	bf44      	itt	mi
 800857e:	f043 0320 	orrmi.w	r3, r3, #32
 8008582:	6023      	strmi	r3, [r4, #0]
 8008584:	b91e      	cbnz	r6, 800858e <_printf_i+0x196>
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	f023 0320 	bic.w	r3, r3, #32
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	2310      	movs	r3, #16
 8008590:	e7b0      	b.n	80084f4 <_printf_i+0xfc>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	f043 0320 	orr.w	r3, r3, #32
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	2378      	movs	r3, #120	; 0x78
 800859c:	4828      	ldr	r0, [pc, #160]	; (8008640 <_printf_i+0x248>)
 800859e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085a2:	e7e3      	b.n	800856c <_printf_i+0x174>
 80085a4:	0659      	lsls	r1, r3, #25
 80085a6:	bf48      	it	mi
 80085a8:	b2b6      	uxthmi	r6, r6
 80085aa:	e7e6      	b.n	800857a <_printf_i+0x182>
 80085ac:	4615      	mov	r5, r2
 80085ae:	e7bb      	b.n	8008528 <_printf_i+0x130>
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	6826      	ldr	r6, [r4, #0]
 80085b4:	6961      	ldr	r1, [r4, #20]
 80085b6:	1d18      	adds	r0, r3, #4
 80085b8:	6028      	str	r0, [r5, #0]
 80085ba:	0635      	lsls	r5, r6, #24
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	d501      	bpl.n	80085c4 <_printf_i+0x1cc>
 80085c0:	6019      	str	r1, [r3, #0]
 80085c2:	e002      	b.n	80085ca <_printf_i+0x1d2>
 80085c4:	0670      	lsls	r0, r6, #25
 80085c6:	d5fb      	bpl.n	80085c0 <_printf_i+0x1c8>
 80085c8:	8019      	strh	r1, [r3, #0]
 80085ca:	2300      	movs	r3, #0
 80085cc:	6123      	str	r3, [r4, #16]
 80085ce:	4615      	mov	r5, r2
 80085d0:	e7ba      	b.n	8008548 <_printf_i+0x150>
 80085d2:	682b      	ldr	r3, [r5, #0]
 80085d4:	1d1a      	adds	r2, r3, #4
 80085d6:	602a      	str	r2, [r5, #0]
 80085d8:	681d      	ldr	r5, [r3, #0]
 80085da:	6862      	ldr	r2, [r4, #4]
 80085dc:	2100      	movs	r1, #0
 80085de:	4628      	mov	r0, r5
 80085e0:	f7f7 fe1e 	bl	8000220 <memchr>
 80085e4:	b108      	cbz	r0, 80085ea <_printf_i+0x1f2>
 80085e6:	1b40      	subs	r0, r0, r5
 80085e8:	6060      	str	r0, [r4, #4]
 80085ea:	6863      	ldr	r3, [r4, #4]
 80085ec:	6123      	str	r3, [r4, #16]
 80085ee:	2300      	movs	r3, #0
 80085f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f4:	e7a8      	b.n	8008548 <_printf_i+0x150>
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	462a      	mov	r2, r5
 80085fa:	4649      	mov	r1, r9
 80085fc:	4640      	mov	r0, r8
 80085fe:	47d0      	blx	sl
 8008600:	3001      	adds	r0, #1
 8008602:	d0ab      	beq.n	800855c <_printf_i+0x164>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	079b      	lsls	r3, r3, #30
 8008608:	d413      	bmi.n	8008632 <_printf_i+0x23a>
 800860a:	68e0      	ldr	r0, [r4, #12]
 800860c:	9b03      	ldr	r3, [sp, #12]
 800860e:	4298      	cmp	r0, r3
 8008610:	bfb8      	it	lt
 8008612:	4618      	movlt	r0, r3
 8008614:	e7a4      	b.n	8008560 <_printf_i+0x168>
 8008616:	2301      	movs	r3, #1
 8008618:	4632      	mov	r2, r6
 800861a:	4649      	mov	r1, r9
 800861c:	4640      	mov	r0, r8
 800861e:	47d0      	blx	sl
 8008620:	3001      	adds	r0, #1
 8008622:	d09b      	beq.n	800855c <_printf_i+0x164>
 8008624:	3501      	adds	r5, #1
 8008626:	68e3      	ldr	r3, [r4, #12]
 8008628:	9903      	ldr	r1, [sp, #12]
 800862a:	1a5b      	subs	r3, r3, r1
 800862c:	42ab      	cmp	r3, r5
 800862e:	dcf2      	bgt.n	8008616 <_printf_i+0x21e>
 8008630:	e7eb      	b.n	800860a <_printf_i+0x212>
 8008632:	2500      	movs	r5, #0
 8008634:	f104 0619 	add.w	r6, r4, #25
 8008638:	e7f5      	b.n	8008626 <_printf_i+0x22e>
 800863a:	bf00      	nop
 800863c:	08008a5f 	.word	0x08008a5f
 8008640:	08008a70 	.word	0x08008a70

08008644 <memcpy>:
 8008644:	440a      	add	r2, r1
 8008646:	4291      	cmp	r1, r2
 8008648:	f100 33ff 	add.w	r3, r0, #4294967295
 800864c:	d100      	bne.n	8008650 <memcpy+0xc>
 800864e:	4770      	bx	lr
 8008650:	b510      	push	{r4, lr}
 8008652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800865a:	4291      	cmp	r1, r2
 800865c:	d1f9      	bne.n	8008652 <memcpy+0xe>
 800865e:	bd10      	pop	{r4, pc}

08008660 <memmove>:
 8008660:	4288      	cmp	r0, r1
 8008662:	b510      	push	{r4, lr}
 8008664:	eb01 0402 	add.w	r4, r1, r2
 8008668:	d902      	bls.n	8008670 <memmove+0x10>
 800866a:	4284      	cmp	r4, r0
 800866c:	4623      	mov	r3, r4
 800866e:	d807      	bhi.n	8008680 <memmove+0x20>
 8008670:	1e43      	subs	r3, r0, #1
 8008672:	42a1      	cmp	r1, r4
 8008674:	d008      	beq.n	8008688 <memmove+0x28>
 8008676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800867a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800867e:	e7f8      	b.n	8008672 <memmove+0x12>
 8008680:	4402      	add	r2, r0
 8008682:	4601      	mov	r1, r0
 8008684:	428a      	cmp	r2, r1
 8008686:	d100      	bne.n	800868a <memmove+0x2a>
 8008688:	bd10      	pop	{r4, pc}
 800868a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800868e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008692:	e7f7      	b.n	8008684 <memmove+0x24>

08008694 <_free_r>:
 8008694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008696:	2900      	cmp	r1, #0
 8008698:	d044      	beq.n	8008724 <_free_r+0x90>
 800869a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800869e:	9001      	str	r0, [sp, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f1a1 0404 	sub.w	r4, r1, #4
 80086a6:	bfb8      	it	lt
 80086a8:	18e4      	addlt	r4, r4, r3
 80086aa:	f000 f913 	bl	80088d4 <__malloc_lock>
 80086ae:	4a1e      	ldr	r2, [pc, #120]	; (8008728 <_free_r+0x94>)
 80086b0:	9801      	ldr	r0, [sp, #4]
 80086b2:	6813      	ldr	r3, [r2, #0]
 80086b4:	b933      	cbnz	r3, 80086c4 <_free_r+0x30>
 80086b6:	6063      	str	r3, [r4, #4]
 80086b8:	6014      	str	r4, [r2, #0]
 80086ba:	b003      	add	sp, #12
 80086bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086c0:	f000 b90e 	b.w	80088e0 <__malloc_unlock>
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d908      	bls.n	80086da <_free_r+0x46>
 80086c8:	6825      	ldr	r5, [r4, #0]
 80086ca:	1961      	adds	r1, r4, r5
 80086cc:	428b      	cmp	r3, r1
 80086ce:	bf01      	itttt	eq
 80086d0:	6819      	ldreq	r1, [r3, #0]
 80086d2:	685b      	ldreq	r3, [r3, #4]
 80086d4:	1949      	addeq	r1, r1, r5
 80086d6:	6021      	streq	r1, [r4, #0]
 80086d8:	e7ed      	b.n	80086b6 <_free_r+0x22>
 80086da:	461a      	mov	r2, r3
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	b10b      	cbz	r3, 80086e4 <_free_r+0x50>
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	d9fa      	bls.n	80086da <_free_r+0x46>
 80086e4:	6811      	ldr	r1, [r2, #0]
 80086e6:	1855      	adds	r5, r2, r1
 80086e8:	42a5      	cmp	r5, r4
 80086ea:	d10b      	bne.n	8008704 <_free_r+0x70>
 80086ec:	6824      	ldr	r4, [r4, #0]
 80086ee:	4421      	add	r1, r4
 80086f0:	1854      	adds	r4, r2, r1
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	6011      	str	r1, [r2, #0]
 80086f6:	d1e0      	bne.n	80086ba <_free_r+0x26>
 80086f8:	681c      	ldr	r4, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	6053      	str	r3, [r2, #4]
 80086fe:	4421      	add	r1, r4
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	e7da      	b.n	80086ba <_free_r+0x26>
 8008704:	d902      	bls.n	800870c <_free_r+0x78>
 8008706:	230c      	movs	r3, #12
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	e7d6      	b.n	80086ba <_free_r+0x26>
 800870c:	6825      	ldr	r5, [r4, #0]
 800870e:	1961      	adds	r1, r4, r5
 8008710:	428b      	cmp	r3, r1
 8008712:	bf04      	itt	eq
 8008714:	6819      	ldreq	r1, [r3, #0]
 8008716:	685b      	ldreq	r3, [r3, #4]
 8008718:	6063      	str	r3, [r4, #4]
 800871a:	bf04      	itt	eq
 800871c:	1949      	addeq	r1, r1, r5
 800871e:	6021      	streq	r1, [r4, #0]
 8008720:	6054      	str	r4, [r2, #4]
 8008722:	e7ca      	b.n	80086ba <_free_r+0x26>
 8008724:	b003      	add	sp, #12
 8008726:	bd30      	pop	{r4, r5, pc}
 8008728:	2000067c 	.word	0x2000067c

0800872c <sbrk_aligned>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	4e0e      	ldr	r6, [pc, #56]	; (8008768 <sbrk_aligned+0x3c>)
 8008730:	460c      	mov	r4, r1
 8008732:	6831      	ldr	r1, [r6, #0]
 8008734:	4605      	mov	r5, r0
 8008736:	b911      	cbnz	r1, 800873e <sbrk_aligned+0x12>
 8008738:	f000 f8bc 	bl	80088b4 <_sbrk_r>
 800873c:	6030      	str	r0, [r6, #0]
 800873e:	4621      	mov	r1, r4
 8008740:	4628      	mov	r0, r5
 8008742:	f000 f8b7 	bl	80088b4 <_sbrk_r>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	d00a      	beq.n	8008760 <sbrk_aligned+0x34>
 800874a:	1cc4      	adds	r4, r0, #3
 800874c:	f024 0403 	bic.w	r4, r4, #3
 8008750:	42a0      	cmp	r0, r4
 8008752:	d007      	beq.n	8008764 <sbrk_aligned+0x38>
 8008754:	1a21      	subs	r1, r4, r0
 8008756:	4628      	mov	r0, r5
 8008758:	f000 f8ac 	bl	80088b4 <_sbrk_r>
 800875c:	3001      	adds	r0, #1
 800875e:	d101      	bne.n	8008764 <sbrk_aligned+0x38>
 8008760:	f04f 34ff 	mov.w	r4, #4294967295
 8008764:	4620      	mov	r0, r4
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	20000680 	.word	0x20000680

0800876c <_malloc_r>:
 800876c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008770:	1ccd      	adds	r5, r1, #3
 8008772:	f025 0503 	bic.w	r5, r5, #3
 8008776:	3508      	adds	r5, #8
 8008778:	2d0c      	cmp	r5, #12
 800877a:	bf38      	it	cc
 800877c:	250c      	movcc	r5, #12
 800877e:	2d00      	cmp	r5, #0
 8008780:	4607      	mov	r7, r0
 8008782:	db01      	blt.n	8008788 <_malloc_r+0x1c>
 8008784:	42a9      	cmp	r1, r5
 8008786:	d905      	bls.n	8008794 <_malloc_r+0x28>
 8008788:	230c      	movs	r3, #12
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	2600      	movs	r6, #0
 800878e:	4630      	mov	r0, r6
 8008790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008794:	4e2e      	ldr	r6, [pc, #184]	; (8008850 <_malloc_r+0xe4>)
 8008796:	f000 f89d 	bl	80088d4 <__malloc_lock>
 800879a:	6833      	ldr	r3, [r6, #0]
 800879c:	461c      	mov	r4, r3
 800879e:	bb34      	cbnz	r4, 80087ee <_malloc_r+0x82>
 80087a0:	4629      	mov	r1, r5
 80087a2:	4638      	mov	r0, r7
 80087a4:	f7ff ffc2 	bl	800872c <sbrk_aligned>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	4604      	mov	r4, r0
 80087ac:	d14d      	bne.n	800884a <_malloc_r+0xde>
 80087ae:	6834      	ldr	r4, [r6, #0]
 80087b0:	4626      	mov	r6, r4
 80087b2:	2e00      	cmp	r6, #0
 80087b4:	d140      	bne.n	8008838 <_malloc_r+0xcc>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	4631      	mov	r1, r6
 80087ba:	4638      	mov	r0, r7
 80087bc:	eb04 0803 	add.w	r8, r4, r3
 80087c0:	f000 f878 	bl	80088b4 <_sbrk_r>
 80087c4:	4580      	cmp	r8, r0
 80087c6:	d13a      	bne.n	800883e <_malloc_r+0xd2>
 80087c8:	6821      	ldr	r1, [r4, #0]
 80087ca:	3503      	adds	r5, #3
 80087cc:	1a6d      	subs	r5, r5, r1
 80087ce:	f025 0503 	bic.w	r5, r5, #3
 80087d2:	3508      	adds	r5, #8
 80087d4:	2d0c      	cmp	r5, #12
 80087d6:	bf38      	it	cc
 80087d8:	250c      	movcc	r5, #12
 80087da:	4629      	mov	r1, r5
 80087dc:	4638      	mov	r0, r7
 80087de:	f7ff ffa5 	bl	800872c <sbrk_aligned>
 80087e2:	3001      	adds	r0, #1
 80087e4:	d02b      	beq.n	800883e <_malloc_r+0xd2>
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	442b      	add	r3, r5
 80087ea:	6023      	str	r3, [r4, #0]
 80087ec:	e00e      	b.n	800880c <_malloc_r+0xa0>
 80087ee:	6822      	ldr	r2, [r4, #0]
 80087f0:	1b52      	subs	r2, r2, r5
 80087f2:	d41e      	bmi.n	8008832 <_malloc_r+0xc6>
 80087f4:	2a0b      	cmp	r2, #11
 80087f6:	d916      	bls.n	8008826 <_malloc_r+0xba>
 80087f8:	1961      	adds	r1, r4, r5
 80087fa:	42a3      	cmp	r3, r4
 80087fc:	6025      	str	r5, [r4, #0]
 80087fe:	bf18      	it	ne
 8008800:	6059      	strne	r1, [r3, #4]
 8008802:	6863      	ldr	r3, [r4, #4]
 8008804:	bf08      	it	eq
 8008806:	6031      	streq	r1, [r6, #0]
 8008808:	5162      	str	r2, [r4, r5]
 800880a:	604b      	str	r3, [r1, #4]
 800880c:	4638      	mov	r0, r7
 800880e:	f104 060b 	add.w	r6, r4, #11
 8008812:	f000 f865 	bl	80088e0 <__malloc_unlock>
 8008816:	f026 0607 	bic.w	r6, r6, #7
 800881a:	1d23      	adds	r3, r4, #4
 800881c:	1af2      	subs	r2, r6, r3
 800881e:	d0b6      	beq.n	800878e <_malloc_r+0x22>
 8008820:	1b9b      	subs	r3, r3, r6
 8008822:	50a3      	str	r3, [r4, r2]
 8008824:	e7b3      	b.n	800878e <_malloc_r+0x22>
 8008826:	6862      	ldr	r2, [r4, #4]
 8008828:	42a3      	cmp	r3, r4
 800882a:	bf0c      	ite	eq
 800882c:	6032      	streq	r2, [r6, #0]
 800882e:	605a      	strne	r2, [r3, #4]
 8008830:	e7ec      	b.n	800880c <_malloc_r+0xa0>
 8008832:	4623      	mov	r3, r4
 8008834:	6864      	ldr	r4, [r4, #4]
 8008836:	e7b2      	b.n	800879e <_malloc_r+0x32>
 8008838:	4634      	mov	r4, r6
 800883a:	6876      	ldr	r6, [r6, #4]
 800883c:	e7b9      	b.n	80087b2 <_malloc_r+0x46>
 800883e:	230c      	movs	r3, #12
 8008840:	603b      	str	r3, [r7, #0]
 8008842:	4638      	mov	r0, r7
 8008844:	f000 f84c 	bl	80088e0 <__malloc_unlock>
 8008848:	e7a1      	b.n	800878e <_malloc_r+0x22>
 800884a:	6025      	str	r5, [r4, #0]
 800884c:	e7de      	b.n	800880c <_malloc_r+0xa0>
 800884e:	bf00      	nop
 8008850:	2000067c 	.word	0x2000067c

08008854 <_realloc_r>:
 8008854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008858:	4680      	mov	r8, r0
 800885a:	4614      	mov	r4, r2
 800885c:	460e      	mov	r6, r1
 800885e:	b921      	cbnz	r1, 800886a <_realloc_r+0x16>
 8008860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008864:	4611      	mov	r1, r2
 8008866:	f7ff bf81 	b.w	800876c <_malloc_r>
 800886a:	b92a      	cbnz	r2, 8008878 <_realloc_r+0x24>
 800886c:	f7ff ff12 	bl	8008694 <_free_r>
 8008870:	4625      	mov	r5, r4
 8008872:	4628      	mov	r0, r5
 8008874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008878:	f000 f838 	bl	80088ec <_malloc_usable_size_r>
 800887c:	4284      	cmp	r4, r0
 800887e:	4607      	mov	r7, r0
 8008880:	d802      	bhi.n	8008888 <_realloc_r+0x34>
 8008882:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008886:	d812      	bhi.n	80088ae <_realloc_r+0x5a>
 8008888:	4621      	mov	r1, r4
 800888a:	4640      	mov	r0, r8
 800888c:	f7ff ff6e 	bl	800876c <_malloc_r>
 8008890:	4605      	mov	r5, r0
 8008892:	2800      	cmp	r0, #0
 8008894:	d0ed      	beq.n	8008872 <_realloc_r+0x1e>
 8008896:	42bc      	cmp	r4, r7
 8008898:	4622      	mov	r2, r4
 800889a:	4631      	mov	r1, r6
 800889c:	bf28      	it	cs
 800889e:	463a      	movcs	r2, r7
 80088a0:	f7ff fed0 	bl	8008644 <memcpy>
 80088a4:	4631      	mov	r1, r6
 80088a6:	4640      	mov	r0, r8
 80088a8:	f7ff fef4 	bl	8008694 <_free_r>
 80088ac:	e7e1      	b.n	8008872 <_realloc_r+0x1e>
 80088ae:	4635      	mov	r5, r6
 80088b0:	e7df      	b.n	8008872 <_realloc_r+0x1e>
	...

080088b4 <_sbrk_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d06      	ldr	r5, [pc, #24]	; (80088d0 <_sbrk_r+0x1c>)
 80088b8:	2300      	movs	r3, #0
 80088ba:	4604      	mov	r4, r0
 80088bc:	4608      	mov	r0, r1
 80088be:	602b      	str	r3, [r5, #0]
 80088c0:	f7f8 fa8e 	bl	8000de0 <_sbrk>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_sbrk_r+0x1a>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_sbrk_r+0x1a>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000684 	.word	0x20000684

080088d4 <__malloc_lock>:
 80088d4:	4801      	ldr	r0, [pc, #4]	; (80088dc <__malloc_lock+0x8>)
 80088d6:	f000 b811 	b.w	80088fc <__retarget_lock_acquire_recursive>
 80088da:	bf00      	nop
 80088dc:	20000688 	.word	0x20000688

080088e0 <__malloc_unlock>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__malloc_unlock+0x8>)
 80088e2:	f000 b80c 	b.w	80088fe <__retarget_lock_release_recursive>
 80088e6:	bf00      	nop
 80088e8:	20000688 	.word	0x20000688

080088ec <_malloc_usable_size_r>:
 80088ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f0:	1f18      	subs	r0, r3, #4
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bfbc      	itt	lt
 80088f6:	580b      	ldrlt	r3, [r1, r0]
 80088f8:	18c0      	addlt	r0, r0, r3
 80088fa:	4770      	bx	lr

080088fc <__retarget_lock_acquire_recursive>:
 80088fc:	4770      	bx	lr

080088fe <__retarget_lock_release_recursive>:
 80088fe:	4770      	bx	lr

08008900 <_init>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr

0800890c <_fini>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr
