
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007988  08007988  00017988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dbc  08007dbc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007dbc  08007dbc  00017dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dc4  08007dc4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dc4  08007dc4  00017dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e0  08007fac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08007fac  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010921  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002244  00000000  00000000  00030b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00032d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00033b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002710d  00000000  00000000  000347f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115a4  00000000  00000000  0005b8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f101b  00000000  00000000  0006cea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015debc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004954  00000000  00000000  0015df0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007970 	.word	0x08007970

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08007970 	.word	0x08007970

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa2:	4b8b      	ldr	r3, [pc, #556]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a8a      	ldr	r2, [pc, #552]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b88      	ldr	r3, [pc, #544]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fba:	4b85      	ldr	r3, [pc, #532]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a84      	ldr	r2, [pc, #528]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b82      	ldr	r3, [pc, #520]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b7f      	ldr	r3, [pc, #508]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a7e      	ldr	r2, [pc, #504]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b7c      	ldr	r3, [pc, #496]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	4b79      	ldr	r3, [pc, #484]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a78      	ldr	r2, [pc, #480]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b76      	ldr	r3, [pc, #472]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a72      	ldr	r2, [pc, #456]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b70      	ldr	r3, [pc, #448]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b6d      	ldr	r3, [pc, #436]	; (80011d0 <MX_GPIO_Init+0x244>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a6c      	ldr	r2, [pc, #432]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001032:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a66      	ldr	r2, [pc, #408]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b64      	ldr	r3, [pc, #400]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800104a:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <MX_GPIO_Init+0x244>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a60      	ldr	r2, [pc, #384]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b5e      	ldr	r3, [pc, #376]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001062:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107a:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <MX_GPIO_Init+0x244>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a54      	ldr	r2, [pc, #336]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001080:	f043 0320 	orr.w	r3, r3, #32
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a4e      	ldr	r2, [pc, #312]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <MX_GPIO_Init+0x244>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 80010aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b0:	2303      	movs	r3, #3
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	4845      	ldr	r0, [pc, #276]	; (80011d4 <MX_GPIO_Init+0x248>)
 80010c0:	f000 ff6e 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 80010c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ca:	2303      	movs	r3, #3
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d6:	4619      	mov	r1, r3
 80010d8:	483f      	ldr	r0, [pc, #252]	; (80011d8 <MX_GPIO_Init+0x24c>)
 80010da:	f000 ff61 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80010de:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	483a      	ldr	r0, [pc, #232]	; (80011dc <MX_GPIO_Init+0x250>)
 80010f4:	f000 ff54 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD2
                           PD15 PD10 PD14 PD9
                           PD8 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 80010f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	4834      	ldr	r0, [pc, #208]	; (80011e0 <MX_GPIO_Init+0x254>)
 800110e:	f000 ff47 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 8001112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001118:	2303      	movs	r3, #3
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001124:	4619      	mov	r1, r3
 8001126:	482f      	ldr	r0, [pc, #188]	; (80011e4 <MX_GPIO_Init+0x258>)
 8001128:	f000 ff3a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA1 PA0 PA4 PA2
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 800112c:	f649 43ff 	movw	r3, #40191	; 0x9cff
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001132:	2303      	movs	r3, #3
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113e:	4619      	mov	r1, r3
 8001140:	4829      	ldr	r0, [pc, #164]	; (80011e8 <MX_GPIO_Init+0x25c>)
 8001142:	f000 ff2d 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8001146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114c:	2303      	movs	r3, #3
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001158:	4619      	mov	r1, r3
 800115a:	4824      	ldr	r0, [pc, #144]	; (80011ec <MX_GPIO_Init+0x260>)
 800115c:	f000 ff20 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800116e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001172:	4619      	mov	r1, r3
 8001174:	481e      	ldr	r0, [pc, #120]	; (80011f0 <MX_GPIO_Init+0x264>)
 8001176:	f000 ff13 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800117a:	23ff      	movs	r3, #255	; 0xff
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	4819      	ldr	r0, [pc, #100]	; (80011f4 <MX_GPIO_Init+0x268>)
 800118e:	f000 ff07 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <MX_GPIO_Init+0x26c>)
 80011a8:	f000 fefa 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80011ac:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	480e      	ldr	r0, [pc, #56]	; (80011fc <MX_GPIO_Init+0x270>)
 80011c2:	f000 feed 	bl	8001fa0 <HAL_GPIO_Init>

}
 80011c6:	bf00      	nop
 80011c8:	3740      	adds	r7, #64	; 0x40
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40021800 	.word	0x40021800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40022400 	.word	0x40022400
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40022800 	.word	0x40022800
 80011f8:	40021400 	.word	0x40021400
 80011fc:	40021c00 	.word	0x40021c00

08001200 <_write>:
#define KMH_CONST 1.609 // 1 MPH = 1.609 KM/h
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file ,char*ptr,int len){
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	b29a      	uxth	r2, r3
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <_write+0x24>)
 8001216:	f003 f9b7 	bl	8004588 <HAL_UART_Transmit>
	return len;
 800121a:	687b      	ldr	r3, [r7, #4]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000258 	.word	0x20000258

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800122c:	b090      	sub	sp, #64	; 0x40
 800122e:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	uint8_t First_Speed = 1, Force = 0;
 8001230:	2301      	movs	r3, #1
 8001232:	77fb      	strb	r3, [r7, #31]
 8001234:	2300      	movs	r3, #0
 8001236:	70fb      	strb	r3, [r7, #3]
	float Wind_Speed = 0.0, Wind_Speed_KMH = 0.0, Max_Wind = 0.0,
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	f04f 0300 	mov.w	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
			Min_Wind = 0.0, Frequency = 0.0;
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001256:	f000 fd34 	bl	8001cc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125a:	f000 f8e1 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f7ff fe95 	bl	8000f8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001262:	f000 fc51 	bl	8001b08 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001266:	f000 fb83 	bl	8001970 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Tim1_Freq=HAL_RCC_GetPCLK2Freq()*2/TIM1->PSC; //APB2_PSC=2 et TIM_psc=5000-1
 800126a:	f001 fd0b 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 800126e:	4603      	mov	r3, r0
 8001270:	005a      	lsls	r2, r3, #1
 8001272:	4b65      	ldr	r3, [pc, #404]	; (8001408 <main+0x1e0>)
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001282:	edc7 7a01 	vstr	s15, [r7, #4]
  HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1);
 8001286:	2100      	movs	r1, #0
 8001288:	4860      	ldr	r0, [pc, #384]	; (800140c <main+0x1e4>)
 800128a:	f002 f9b7 	bl	80035fc <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TIM1_IC_IT_Flag){
 800128e:	4b60      	ldr	r3, [pc, #384]	; (8001410 <main+0x1e8>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0fa      	beq.n	800128e <main+0x66>
		  // Calcul de la fréquence dans les deux cas => Avant timer overflow : juste après timer le overflow
		  Frequency = ccr1>=ccr0?(float)Tim1_Freq/(ccr1-ccr0) : (float)Tim1_Freq/((TIM1->ARR+ccr1)-ccr0);
 8001298:	4b5e      	ldr	r3, [pc, #376]	; (8001414 <main+0x1ec>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b5e      	ldr	r3, [pc, #376]	; (8001418 <main+0x1f0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d30d      	bcc.n	80012c0 <main+0x98>
 80012a4:	4b5b      	ldr	r3, [pc, #364]	; (8001414 <main+0x1ec>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <main+0x1f0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80012ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012be:	e00f      	b.n	80012e0 <main+0xb8>
 80012c0:	4b51      	ldr	r3, [pc, #324]	; (8001408 <main+0x1e0>)
 80012c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c4:	4b53      	ldr	r3, [pc, #332]	; (8001414 <main+0x1ec>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	441a      	add	r2, r3
 80012ca:	4b53      	ldr	r3, [pc, #332]	; (8001418 <main+0x1f0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d8:	edd7 6a01 	vldr	s13, [r7, #4]
 80012dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e0:	edc7 7a02 	vstr	s15, [r7, #8]
		  // La vitesse du vent(en Mph) correspond à la fréqunce du signal capturée multipliée par une constante
		  Wind_Speed=MPH_CONST*Frequency;
 80012e4:	68b8      	ldr	r0, [r7, #8]
 80012e6:	f7ff f94f 	bl	8000588 <__aeabi_f2d>
 80012ea:	a341      	add	r3, pc, #260	; (adr r3, 80013f0 <main+0x1c8>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f9a2 	bl	8000638 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fc74 	bl	8000be8 <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	613b      	str	r3, [r7, #16]
		  if(First_Speed){
 8001304:	7ffb      	ldrb	r3, [r7, #31]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <main+0xee>
			  //Initialiser les Valeur Max et Min de la vitesse du vent(Mph)
			  Min_Wind=Wind_Speed; Max_Wind=Wind_Speed; First_Speed=0;
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	2300      	movs	r3, #0
 8001314:	77fb      	strb	r3, [r7, #31]
		  }
		  //CCR1 devient CCR0 pour la prochaine détection d'impulsion
		  ccr0=ccr1;
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <main+0x1ec>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a3f      	ldr	r2, [pc, #252]	; (8001418 <main+0x1f0>)
 800131c:	6013      	str	r3, [r2, #0]
		  //Si la vitesse est négligeable Wind_Speed = 0
		  Wind_Speed =Wind_Speed>NO_WIND?Wind_Speed:0.0;
 800131e:	6938      	ldr	r0, [r7, #16]
 8001320:	f7ff f932 	bl	8000588 <__aeabi_f2d>
 8001324:	a334      	add	r3, pc, #208	; (adr r3, 80013f8 <main+0x1d0>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff fc15 	bl	8000b58 <__aeabi_dcmpgt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <main+0x110>
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	e001      	b.n	800133c <main+0x114>
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
		  //Convertir la vitesse en Km/h
		  Wind_Speed_KMH = KMH_CONST*Wind_Speed;
 800133e:	6938      	ldr	r0, [r7, #16]
 8001340:	f7ff f922 	bl	8000588 <__aeabi_f2d>
 8001344:	a32e      	add	r3, pc, #184	; (adr r3, 8001400 <main+0x1d8>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f975 	bl	8000638 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fc47 	bl	8000be8 <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
 800135c:	60fb      	str	r3, [r7, #12]
		  // calcul de la maximum et la minimum de la vitesse du vent
		  if(Wind_Speed>Max_Wind)
 800135e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001362:	edd7 7a06 	vldr	s15, [r7, #24]
 8001366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	dd02      	ble.n	8001376 <main+0x14e>
			  Max_Wind=Wind_Speed;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	e011      	b.n	800139a <main+0x172>
		  else if (Wind_Speed<Min_Wind && Wind_Speed!=0)
 8001376:	ed97 7a04 	vldr	s14, [r7, #16]
 800137a:	edd7 7a05 	vldr	s15, [r7, #20]
 800137e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001386:	d508      	bpl.n	800139a <main+0x172>
 8001388:	edd7 7a04 	vldr	s15, [r7, #16]
 800138c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	d001      	beq.n	800139a <main+0x172>
			  Min_Wind=Wind_Speed;
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	617b      	str	r3, [r7, #20]
		  //Force du vent selon l'échelle de Beaufort(à interpréter par une disignation dans l'affichage)
		  WSpeed_To_WForce(Wind_Speed,&Force);
 800139a:	1cfb      	adds	r3, r7, #3
 800139c:	4618      	mov	r0, r3
 800139e:	ed97 0a04 	vldr	s0, [r7, #16]
 80013a2:	f000 f8d5 	bl	8001550 <WSpeed_To_WForce>
		  //Envoie à travers le Port Série la vitesse du vent actuelle
		  printf("Wind_Speed = %.3f Mph %.3f km/h Min=%.3f Max=%.3f Force =%u\n\r",Wind_Speed,Wind_Speed_KMH,Min_Wind,Max_Wind,Force);
 80013a6:	6938      	ldr	r0, [r7, #16]
 80013a8:	f7ff f8ee 	bl	8000588 <__aeabi_f2d>
 80013ac:	4682      	mov	sl, r0
 80013ae:	468b      	mov	fp, r1
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff f8e9 	bl	8000588 <__aeabi_f2d>
 80013b6:	4604      	mov	r4, r0
 80013b8:	460d      	mov	r5, r1
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff f8e4 	bl	8000588 <__aeabi_f2d>
 80013c0:	4680      	mov	r8, r0
 80013c2:	4689      	mov	r9, r1
 80013c4:	69b8      	ldr	r0, [r7, #24]
 80013c6:	f7ff f8df 	bl	8000588 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	78f9      	ldrb	r1, [r7, #3]
 80013d0:	9106      	str	r1, [sp, #24]
 80013d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013da:	e9cd 4500 	strd	r4, r5, [sp]
 80013de:	4652      	mov	r2, sl
 80013e0:	465b      	mov	r3, fp
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <main+0x1f4>)
 80013e4:	f004 f9fe 	bl	80057e4 <iprintf>
		  //Remettre à nouveau le Flag
		  TIM1_IC_IT_Flag=0;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <main+0x1e8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
	  if(TIM1_IC_IT_Flag){
 80013ee:	e74e      	b.n	800128e <main+0x66>
 80013f0:	645a1cac 	.word	0x645a1cac
 80013f4:	3ff7df3b 	.word	0x3ff7df3b
 80013f8:	33333333 	.word	0x33333333
 80013fc:	3fd33333 	.word	0x3fd33333
 8001400:	c8b43958 	.word	0xc8b43958
 8001404:	3ff9be76 	.word	0x3ff9be76
 8001408:	40010000 	.word	0x40010000
 800140c:	2000020c 	.word	0x2000020c
 8001410:	200001fc 	.word	0x200001fc
 8001414:	20000204 	.word	0x20000204
 8001418:	20000200 	.word	0x20000200
 800141c:	08007988 	.word	0x08007988

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	; 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	2230      	movs	r2, #48	; 0x30
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fd66 	bl	8004f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <SystemClock_Config+0xd4>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a2a      	ldr	r2, [pc, #168]	; (80014f4 <SystemClock_Config+0xd4>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <SystemClock_Config+0xd4>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800145c:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <SystemClock_Config+0xd8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001464:	4a24      	ldr	r2, [pc, #144]	; (80014f8 <SystemClock_Config+0xd8>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <SystemClock_Config+0xd8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800148c:	230c      	movs	r3, #12
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001490:	2360      	movs	r3, #96	; 0x60
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001494:	2302      	movs	r3, #2
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001498:	2302      	movs	r3, #2
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 ff79 	bl	8002398 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80014ac:	f000 f93c 	bl	8001728 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014b0:	f000 ff22 	bl	80022f8 <HAL_PWREx_EnableOverDrive>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014ba:	f000 f935 	bl	8001728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	230f      	movs	r3, #15
 80014c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c2:	2302      	movs	r3, #2
 80014c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	2103      	movs	r1, #3
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 f9ff 	bl	80028e0 <HAL_RCC_ClockConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80014e8:	f000 f91e 	bl	8001728 <Error_Handler>
  }
}
 80014ec:	bf00      	nop
 80014ee:	3750      	adds	r7, #80	; 0x50
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000

080014fc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	if(FIRST_IMP){
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00a      	beq.n	8001524 <HAL_TIM_IC_CaptureCallback+0x28>
		ccr0=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f002 fc49 	bl	8003da8 <HAL_TIM_ReadCapturedValue>
 8001516:	4603      	mov	r3, r0
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_TIM_IC_CaptureCallback+0x48>)
 800151a:	6013      	str	r3, [r2, #0]
		FIRST_IMP=0;
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_TIM_IC_CaptureCallback+0x44>)
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
	else{
		ccr1=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		TIM1_IC_IT_Flag=1;
	}

}
 8001522:	e009      	b.n	8001538 <HAL_TIM_IC_CaptureCallback+0x3c>
		ccr1=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001524:	2100      	movs	r1, #0
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f002 fc3e 	bl	8003da8 <HAL_TIM_ReadCapturedValue>
 800152c:	4603      	mov	r3, r0
 800152e:	4a06      	ldr	r2, [pc, #24]	; (8001548 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001530:	6013      	str	r3, [r2, #0]
		TIM1_IC_IT_Flag=1;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_TIM_IC_CaptureCallback+0x50>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	20000200 	.word	0x20000200
 8001548:	20000204 	.word	0x20000204
 800154c:	200001fc 	.word	0x200001fc

08001550 <WSpeed_To_WForce>:

void WSpeed_To_WForce(float Wind_Speed,uint8_t* Force){
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	ed87 0a01 	vstr	s0, [r7, #4]
 800155a:	6038      	str	r0, [r7, #0]
	switch ((int) Wind_Speed) {
 800155c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001564:	ee17 3a90 	vmov	r3, s15
 8001568:	2b49      	cmp	r3, #73	; 0x49
 800156a:	f300 809d 	bgt.w	80016a8 <WSpeed_To_WForce+0x158>
 800156e:	2b00      	cmp	r3, #0
 8001570:	f2c0 80d4 	blt.w	800171c <WSpeed_To_WForce+0x1cc>
 8001574:	2b49      	cmp	r3, #73	; 0x49
 8001576:	f200 80d1 	bhi.w	800171c <WSpeed_To_WForce+0x1cc>
 800157a:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <WSpeed_To_WForce+0x30>)
 800157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001580:	080016b5 	.word	0x080016b5
 8001584:	080016bd 	.word	0x080016bd
 8001588:	080016bd 	.word	0x080016bd
 800158c:	080016bd 	.word	0x080016bd
 8001590:	080016c5 	.word	0x080016c5
 8001594:	080016c5 	.word	0x080016c5
 8001598:	080016c5 	.word	0x080016c5
 800159c:	080016c5 	.word	0x080016c5
 80015a0:	080016cd 	.word	0x080016cd
 80015a4:	080016cd 	.word	0x080016cd
 80015a8:	080016cd 	.word	0x080016cd
 80015ac:	080016cd 	.word	0x080016cd
 80015b0:	080016cd 	.word	0x080016cd
 80015b4:	080016d5 	.word	0x080016d5
 80015b8:	080016d5 	.word	0x080016d5
 80015bc:	080016d5 	.word	0x080016d5
 80015c0:	080016d5 	.word	0x080016d5
 80015c4:	080016d5 	.word	0x080016d5
 80015c8:	080016dd 	.word	0x080016dd
 80015cc:	080016dd 	.word	0x080016dd
 80015d0:	080016dd 	.word	0x080016dd
 80015d4:	080016dd 	.word	0x080016dd
 80015d8:	080016dd 	.word	0x080016dd
 80015dc:	080016dd 	.word	0x080016dd
 80015e0:	080016dd 	.word	0x080016dd
 80015e4:	080016e5 	.word	0x080016e5
 80015e8:	080016e5 	.word	0x080016e5
 80015ec:	080016e5 	.word	0x080016e5
 80015f0:	080016e5 	.word	0x080016e5
 80015f4:	080016e5 	.word	0x080016e5
 80015f8:	080016e5 	.word	0x080016e5
 80015fc:	080016ed 	.word	0x080016ed
 8001600:	080016ed 	.word	0x080016ed
 8001604:	080016ed 	.word	0x080016ed
 8001608:	080016ed 	.word	0x080016ed
 800160c:	080016ed 	.word	0x080016ed
 8001610:	080016ed 	.word	0x080016ed
 8001614:	080016ed 	.word	0x080016ed
 8001618:	080016ed 	.word	0x080016ed
 800161c:	080016f5 	.word	0x080016f5
 8001620:	080016f5 	.word	0x080016f5
 8001624:	080016f5 	.word	0x080016f5
 8001628:	080016f5 	.word	0x080016f5
 800162c:	080016f5 	.word	0x080016f5
 8001630:	080016f5 	.word	0x080016f5
 8001634:	080016f5 	.word	0x080016f5
 8001638:	080016f5 	.word	0x080016f5
 800163c:	080016fd 	.word	0x080016fd
 8001640:	080016fd 	.word	0x080016fd
 8001644:	080016fd 	.word	0x080016fd
 8001648:	080016fd 	.word	0x080016fd
 800164c:	080016fd 	.word	0x080016fd
 8001650:	080016fd 	.word	0x080016fd
 8001654:	080016fd 	.word	0x080016fd
 8001658:	080016fd 	.word	0x080016fd
 800165c:	08001705 	.word	0x08001705
 8001660:	08001705 	.word	0x08001705
 8001664:	08001705 	.word	0x08001705
 8001668:	08001705 	.word	0x08001705
 800166c:	08001705 	.word	0x08001705
 8001670:	08001705 	.word	0x08001705
 8001674:	08001705 	.word	0x08001705
 8001678:	08001705 	.word	0x08001705
 800167c:	08001705 	.word	0x08001705
 8001680:	0800170d 	.word	0x0800170d
 8001684:	0800170d 	.word	0x0800170d
 8001688:	0800170d 	.word	0x0800170d
 800168c:	0800170d 	.word	0x0800170d
 8001690:	0800170d 	.word	0x0800170d
 8001694:	0800170d 	.word	0x0800170d
 8001698:	0800170d 	.word	0x0800170d
 800169c:	0800170d 	.word	0x0800170d
 80016a0:	0800170d 	.word	0x0800170d
 80016a4:	0800170d 	.word	0x0800170d
 80016a8:	3b4a      	subs	r3, #74	; 0x4a
 80016aa:	f240 329e 	movw	r2, #926	; 0x39e
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d834      	bhi.n	800171c <WSpeed_To_WForce+0x1cc>
 80016b2:	e02f      	b.n	8001714 <WSpeed_To_WForce+0x1c4>
	case 0:
		*Force = 0; //Air calme
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
		break;
 80016ba:	e02f      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 1 ... 3:
		*Force = 1; //Air léger
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
		break;
 80016c2:	e02b      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 4 ... 7:
		*Force = 2; // Légère brise
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2202      	movs	r2, #2
 80016c8:	701a      	strb	r2, [r3, #0]
		break;
 80016ca:	e027      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 8 ... 12:
		*Force = 3; // Brise légère
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2203      	movs	r2, #3
 80016d0:	701a      	strb	r2, [r3, #0]
		break;
 80016d2:	e023      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 13 ... 17:
		*Force = 4; // Vent modéré
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2204      	movs	r2, #4
 80016d8:	701a      	strb	r2, [r3, #0]
		break;
 80016da:	e01f      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 18 ... 24:
		*Force = 5; // La brise fraîche
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2205      	movs	r2, #5
 80016e0:	701a      	strb	r2, [r3, #0]
		break;
 80016e2:	e01b      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 25 ... 30:
		*Force = 6; //Forte brise
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	2206      	movs	r2, #6
 80016e8:	701a      	strb	r2, [r3, #0]
		break;
 80016ea:	e017      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 31 ... 38:
		*Force = 7; //Vent fort
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2207      	movs	r2, #7
 80016f0:	701a      	strb	r2, [r3, #0]
		break;
 80016f2:	e013      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 39 ... 46:
		*Force = 8; //Coup de vent
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2208      	movs	r2, #8
 80016f8:	701a      	strb	r2, [r3, #0]
		break;
 80016fa:	e00f      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 47 ... 54:
		*Force = 9; //Coup de vent de ficelle
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2209      	movs	r2, #9
 8001700:	701a      	strb	r2, [r3, #0]
		break;
 8001702:	e00b      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 55 ... 63:
		*Force = 10; //Tempête
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	220a      	movs	r2, #10
 8001708:	701a      	strb	r2, [r3, #0]
		break;
 800170a:	e007      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 64 ... 73:
		*Force = 11; //Tempête violente
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	220b      	movs	r2, #11
 8001710:	701a      	strb	r2, [r3, #0]
		break;
 8001712:	e003      	b.n	800171c <WSpeed_To_WForce+0x1cc>
	case 74 ... 1000:
		*Force = 12; //Ouragan
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	220c      	movs	r2, #12
 8001718:	701a      	strb	r2, [r3, #0]
		break;
 800171a:	bf00      	nop
	}
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001730:	e7fe      	b.n	8001730 <Error_Handler+0x8>
	...

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <HAL_MspInit+0x44>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_MspInit+0x44>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_MspInit+0x44>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_MspInit+0x44>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_MspInit+0x44>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_MspInit+0x44>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 fab8 	bl	8001d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017d6:	f002 f861 	bl	800389c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000020c 	.word	0x2000020c

080017e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TIM1_CC_IRQHandler+0x10>)
 80017ea:	f002 f857 	bl	800389c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000020c 	.word	0x2000020c

080017f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
	return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_kill>:

int _kill(int pid, int sig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001812:	f003 fb4b 	bl	8004eac <__errno>
 8001816:	4603      	mov	r3, r0
 8001818:	2216      	movs	r2, #22
 800181a:	601a      	str	r2, [r3, #0]
	return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_exit>:

void _exit (int status)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffe7 	bl	8001808 <_kill>
	while (1) {}		/* Make sure we hang here */
 800183a:	e7fe      	b.n	800183a <_exit+0x12>

0800183c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
	}

return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189e:	605a      	str	r2, [r3, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_isatty>:

int _isatty(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	return 1;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f003 facc 	bl	8004eac <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20050000 	.word	0x20050000
 8001940:	00000400 	.word	0x00000400
 8001944:	20000208 	.word	0x20000208
 8001948:	200002f0 	.word	0x200002f0

0800194c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <MX_TIM1_Init+0xe8>)
 800199e:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <MX_TIM1_Init+0xec>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60000-1;
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <MX_TIM1_Init+0xe8>)
 80019a4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80019a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <MX_TIM1_Init+0xe8>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80019b0:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <MX_TIM1_Init+0xe8>)
 80019b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80019b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <MX_TIM1_Init+0xe8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <MX_TIM1_Init+0xe8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <MX_TIM1_Init+0xe8>)
 80019c6:	2280      	movs	r2, #128	; 0x80
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019ca:	4823      	ldr	r0, [pc, #140]	; (8001a58 <MX_TIM1_Init+0xe8>)
 80019cc:	f001 fd5e 	bl	800348c <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80019d6:	f7ff fea7 	bl	8001728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	4619      	mov	r1, r3
 80019e6:	481c      	ldr	r0, [pc, #112]	; (8001a58 <MX_TIM1_Init+0xe8>)
 80019e8:	f002 f914 	bl	8003c14 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 80019f2:	f7ff fe99 	bl	8001728 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80019f6:	4818      	ldr	r0, [pc, #96]	; (8001a58 <MX_TIM1_Init+0xe8>)
 80019f8:	f001 fd9f 	bl	800353a <HAL_TIM_IC_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a02:	f7ff fe91 	bl	8001728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a06:	2320      	movs	r3, #32
 8001a08:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	480f      	ldr	r0, [pc, #60]	; (8001a58 <MX_TIM1_Init+0xe8>)
 8001a1a:	f002 fcbb 	bl	8004394 <HAL_TIMEx_MasterConfigSynchronization>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001a24:	f7ff fe80 	bl	8001728 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_TIM1_Init+0xe8>)
 8001a40:	f002 f84b 	bl	8003ada <HAL_TIM_IC_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001a4a:	f7ff fe6d 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3730      	adds	r7, #48	; 0x30
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000020c 	.word	0x2000020c
 8001a5c:	40010000 	.word	0x40010000

08001a60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_TIM_Base_MspInit+0x9c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d138      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <HAL_TIM_Base_MspInit+0xa0>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_TIM_Base_MspInit+0xa0>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <HAL_TIM_Base_MspInit+0xa0>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_TIM_Base_MspInit+0xa0>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <HAL_TIM_Base_MspInit+0xa0>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_TIM_Base_MspInit+0xa0>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <HAL_TIM_Base_MspInit+0xa4>)
 8001ad0:	f000 fa66 	bl	8001fa0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2019      	movs	r0, #25
 8001ada:	f000 fa2a 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ade:	2019      	movs	r0, #25
 8001ae0:	f000 fa43 	bl	8001f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	201b      	movs	r0, #27
 8001aea:	f000 fa22 	bl	8001f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001aee:	201b      	movs	r0, #27
 8001af0:	f000 fa3b 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001af4:	bf00      	nop
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000

08001b08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b0e:	4a16      	ldr	r2, [pc, #88]	; (8001b68 <MX_USART1_UART_Init+0x60>)
 8001b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b20:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_USART1_UART_Init+0x5c>)
 8001b50:	f002 fccc 	bl	80044ec <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001b5a:	f7ff fde5 	bl	8001728 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000258 	.word	0x20000258
 8001b68:	40011000 	.word	0x40011000

08001b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0ac      	sub	sp, #176	; 0xb0
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	2284      	movs	r2, #132	; 0x84
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 f9b7 	bl	8004f00 <memset>
  if(uartHandle->Instance==USART1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a32      	ldr	r2, [pc, #200]	; (8001c60 <HAL_UART_MspInit+0xf4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d15c      	bne.n	8001c56 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 f87f 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bb4:	f7ff fdb8 	bl	8001728 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_UART_MspInit+0xf8>)
 8001bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbc:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <HAL_UART_MspInit+0xf8>)
 8001bbe:	f043 0310 	orr.w	r3, r3, #16
 8001bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_UART_MspInit+0xf8>)
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_UART_MspInit+0xf8>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <HAL_UART_MspInit+0xf8>)
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	6313      	str	r3, [r2, #48]	; 0x30
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_UART_MspInit+0xf8>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_UART_MspInit+0xf8>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <HAL_UART_MspInit+0xf8>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_UART_MspInit+0xf8>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c22:	4619      	mov	r1, r3
 8001c24:	4810      	ldr	r0, [pc, #64]	; (8001c68 <HAL_UART_MspInit+0xfc>)
 8001c26:	f000 f9bb 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c44:	2307      	movs	r3, #7
 8001c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4806      	ldr	r0, [pc, #24]	; (8001c6c <HAL_UART_MspInit+0x100>)
 8001c52:	f000 f9a5 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c56:	bf00      	nop
 8001c58:	37b0      	adds	r7, #176	; 0xb0
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40011000 	.word	0x40011000
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40020000 	.word	0x40020000

08001c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c74:	480d      	ldr	r0, [pc, #52]	; (8001cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c76:	490e      	ldr	r1, [pc, #56]	; (8001cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c8c:	4c0b      	ldr	r4, [pc, #44]	; (8001cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c9a:	f7ff fe57 	bl	800194c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f003 f90b 	bl	8004eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7ff fac1 	bl	8001228 <main>
  bx  lr    
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001cb4:	08007dcc 	.word	0x08007dcc
  ldr r2, =_sbss
 8001cb8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001cbc:	200002f0 	.word	0x200002f0

08001cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC_IRQHandler>

08001cc2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	f000 f928 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f000 f805 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd2:	f7ff fd2f 	bl	8001734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x54>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x58>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f943 	bl	8001f86 <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00e      	b.n	8001d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d80a      	bhi.n	8001d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 f90b 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <HAL_InitTick+0x5c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000004 	.word	0x20000004
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	20000008 	.word	0x20000008

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	2000000c 	.word	0x2000000c
 8001d60:	200002dc 	.word	0x200002dc

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200002dc 	.word	0x200002dc

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <__NVIC_SetPriorityGrouping+0x40>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x40>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00
 8001dc0:	05fa0000 	.word	0x05fa0000

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db0b      	blt.n	8001e0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f003 021f 	and.w	r2, r3, #31
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <__NVIC_EnableIRQ+0x38>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	2001      	movs	r0, #1
 8001e02:	fa00 f202 	lsl.w	r2, r0, r2
 8001e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff29 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff3e 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff31 	bl	8001de0 <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa2 	bl	8001ed8 <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	e175      	b.n	80022ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 8164 	bne.w	80022a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d005      	beq.n	8001ff6 <HAL_GPIO_Init+0x56>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d130      	bne.n	8002058 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 0201 	and.w	r2, r3, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b03      	cmp	r3, #3
 8002062:	d017      	beq.n	8002094 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d123      	bne.n	80020e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	08da      	lsrs	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3208      	adds	r2, #8
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	2203      	movs	r2, #3
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80be 	beq.w	80022a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	4b66      	ldr	r3, [pc, #408]	; (80022c4 <HAL_GPIO_Init+0x324>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a65      	ldr	r2, [pc, #404]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b63      	ldr	r3, [pc, #396]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002142:	4a61      	ldr	r2, [pc, #388]	; (80022c8 <HAL_GPIO_Init+0x328>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_GPIO_Init+0x32c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d037      	beq.n	80021de <HAL_GPIO_Init+0x23e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <HAL_GPIO_Init+0x330>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d031      	beq.n	80021da <HAL_GPIO_Init+0x23a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a56      	ldr	r2, [pc, #344]	; (80022d4 <HAL_GPIO_Init+0x334>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02b      	beq.n	80021d6 <HAL_GPIO_Init+0x236>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a55      	ldr	r2, [pc, #340]	; (80022d8 <HAL_GPIO_Init+0x338>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d025      	beq.n	80021d2 <HAL_GPIO_Init+0x232>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a54      	ldr	r2, [pc, #336]	; (80022dc <HAL_GPIO_Init+0x33c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <HAL_GPIO_Init+0x22e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a53      	ldr	r2, [pc, #332]	; (80022e0 <HAL_GPIO_Init+0x340>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x22a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_GPIO_Init+0x344>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <HAL_GPIO_Init+0x348>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a50      	ldr	r2, [pc, #320]	; (80022ec <HAL_GPIO_Init+0x34c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <HAL_GPIO_Init+0x350>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x21a>
 80021b6:	2309      	movs	r3, #9
 80021b8:	e012      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021ba:	230a      	movs	r3, #10
 80021bc:	e010      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021be:	2308      	movs	r3, #8
 80021c0:	e00e      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e00c      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e00a      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021de:	2300      	movs	r3, #0
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021f0:	4935      	ldr	r1, [pc, #212]	; (80022c8 <HAL_GPIO_Init+0x328>)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b3d      	ldr	r3, [pc, #244]	; (80022f4 <HAL_GPIO_Init+0x354>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002222:	4a34      	ldr	r2, [pc, #208]	; (80022f4 <HAL_GPIO_Init+0x354>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <HAL_GPIO_Init+0x354>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800224c:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <HAL_GPIO_Init+0x354>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002252:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_GPIO_Init+0x354>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <HAL_GPIO_Init+0x354>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_GPIO_Init+0x354>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <HAL_GPIO_Init+0x354>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	f67f ae86 	bls.w	8001fc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40021400 	.word	0x40021400
 80022e4:	40021800 	.word	0x40021800
 80022e8:	40021c00 	.word	0x40021c00
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40022400 	.word	0x40022400
 80022f4:	40013c00 	.word	0x40013c00

080022f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	4b23      	ldr	r3, [pc, #140]	; (8002390 <HAL_PWREx_EnableOverDrive+0x98>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a22      	ldr	r2, [pc, #136]	; (8002390 <HAL_PWREx_EnableOverDrive+0x98>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <HAL_PWREx_EnableOverDrive+0x98>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_PWREx_EnableOverDrive+0x9c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002326:	f7ff fd1d 	bl	8001d64 <HAL_GetTick>
 800232a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800232c:	e009      	b.n	8002342 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800232e:	f7ff fd19 	bl	8001d64 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800233c:	d901      	bls.n	8002342 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e022      	b.n	8002388 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234e:	d1ee      	bne.n	800232e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0f      	ldr	r2, [pc, #60]	; (8002394 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800235a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235c:	f7ff fd02 	bl	8001d64 <HAL_GetTick>
 8002360:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002362:	e009      	b.n	8002378 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002364:	f7ff fcfe 	bl	8001d64 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002372:	d901      	bls.n	8002378 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e007      	b.n	8002388 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_PWREx_EnableOverDrive+0x9c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002384:	d1ee      	bne.n	8002364 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	40007000 	.word	0x40007000

08002398 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e291      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8087 	beq.w	80024ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023bc:	4b96      	ldr	r3, [pc, #600]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d00c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c8:	4b93      	ldr	r3, [pc, #588]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d112      	bne.n	80023fa <HAL_RCC_OscConfig+0x62>
 80023d4:	4b90      	ldr	r3, [pc, #576]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e0:	d10b      	bne.n	80023fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e2:	4b8d      	ldr	r3, [pc, #564]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d06c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x130>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d168      	bne.n	80024c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e26b      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x7a>
 8002404:	4b84      	ldr	r3, [pc, #528]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a83      	ldr	r2, [pc, #524]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e02e      	b.n	8002470 <HAL_RCC_OscConfig+0xd8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x9c>
 800241a:	4b7f      	ldr	r3, [pc, #508]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a7e      	ldr	r2, [pc, #504]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b7c      	ldr	r3, [pc, #496]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a7b      	ldr	r2, [pc, #492]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 800242c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e01d      	b.n	8002470 <HAL_RCC_OscConfig+0xd8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0xc0>
 800243e:	4b76      	ldr	r3, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a75      	ldr	r2, [pc, #468]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b73      	ldr	r3, [pc, #460]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a72      	ldr	r2, [pc, #456]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e00b      	b.n	8002470 <HAL_RCC_OscConfig+0xd8>
 8002458:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 800245e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a6b      	ldr	r2, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d013      	beq.n	80024a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7ff fc74 	bl	8001d64 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7ff fc70 	bl	8001d64 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e21f      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	4b61      	ldr	r3, [pc, #388]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0xe8>
 800249e:	e014      	b.n	80024ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7ff fc60 	bl	8001d64 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7ff fc5c 	bl	8001d64 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e20b      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	4b57      	ldr	r3, [pc, #348]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x110>
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d069      	beq.n	80025aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024d6:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00b      	beq.n	80024fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e2:	4b4d      	ldr	r3, [pc, #308]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11c      	bne.n	8002528 <HAL_RCC_OscConfig+0x190>
 80024ee:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d116      	bne.n	8002528 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_RCC_OscConfig+0x17a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1df      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	493d      	ldr	r1, [pc, #244]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002526:	e040      	b.n	80025aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d023      	beq.n	8002578 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a38      	ldr	r2, [pc, #224]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7ff fc12 	bl	8001d64 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002544:	f7ff fc0e 	bl	8001d64 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1bd      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4929      	ldr	r1, [pc, #164]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]
 8002576:	e018      	b.n	80025aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a26      	ldr	r2, [pc, #152]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7ff fbee 	bl	8001d64 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258c:	f7ff fbea 	bl	8001d64 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e199      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d038      	beq.n	8002628 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d019      	beq.n	80025f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025be:	4b16      	ldr	r3, [pc, #88]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80025c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c2:	4a15      	ldr	r2, [pc, #84]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7ff fbcb 	bl	8001d64 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d2:	f7ff fbc7 	bl	8001d64 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e176      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80025e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x23a>
 80025f0:	e01a      	b.n	8002628 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <HAL_RCC_OscConfig+0x280>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fe:	f7ff fbb1 	bl	8001d64 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	e00a      	b.n	800261c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002606:	f7ff fbad 	bl	8001d64 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d903      	bls.n	800261c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e15c      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
 8002618:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b91      	ldr	r3, [pc, #580]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ee      	bne.n	8002606 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a4 	beq.w	800277e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002636:	4b8b      	ldr	r3, [pc, #556]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002642:	4b88      	ldr	r3, [pc, #544]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a87      	ldr	r2, [pc, #540]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b85      	ldr	r3, [pc, #532]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265e:	4b82      	ldr	r3, [pc, #520]	; (8002868 <HAL_RCC_OscConfig+0x4d0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d118      	bne.n	800269c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800266a:	4b7f      	ldr	r3, [pc, #508]	; (8002868 <HAL_RCC_OscConfig+0x4d0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a7e      	ldr	r2, [pc, #504]	; (8002868 <HAL_RCC_OscConfig+0x4d0>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7ff fb75 	bl	8001d64 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800267e:	f7ff fb71 	bl	8001d64 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b64      	cmp	r3, #100	; 0x64
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e120      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002690:	4b75      	ldr	r3, [pc, #468]	; (8002868 <HAL_RCC_OscConfig+0x4d0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d106      	bne.n	80026b2 <HAL_RCC_OscConfig+0x31a>
 80026a4:	4b6f      	ldr	r3, [pc, #444]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a6e      	ldr	r2, [pc, #440]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	e02d      	b.n	800270e <HAL_RCC_OscConfig+0x376>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x33c>
 80026ba:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a69      	ldr	r2, [pc, #420]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a66      	ldr	r2, [pc, #408]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
 80026d2:	e01c      	b.n	800270e <HAL_RCC_OscConfig+0x376>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d10c      	bne.n	80026f6 <HAL_RCC_OscConfig+0x35e>
 80026dc:	4b61      	ldr	r3, [pc, #388]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a60      	ldr	r2, [pc, #384]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	4b5e      	ldr	r3, [pc, #376]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a5d      	ldr	r2, [pc, #372]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
 80026f4:	e00b      	b.n	800270e <HAL_RCC_OscConfig+0x376>
 80026f6:	4b5b      	ldr	r3, [pc, #364]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fa:	4a5a      	ldr	r2, [pc, #360]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	f023 0301 	bic.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	; 0x70
 8002702:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002708:	f023 0304 	bic.w	r3, r3, #4
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d015      	beq.n	8002742 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7ff fb25 	bl	8001d64 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271e:	f7ff fb21 	bl	8001d64 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	f241 3288 	movw	r2, #5000	; 0x1388
 800272c:	4293      	cmp	r3, r2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0ce      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002734:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ee      	beq.n	800271e <HAL_RCC_OscConfig+0x386>
 8002740:	e014      	b.n	800276c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7ff fb0f 	bl	8001d64 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002748:	e00a      	b.n	8002760 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800274a:	f7ff fb0b 	bl	8001d64 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f241 3288 	movw	r2, #5000	; 0x1388
 8002758:	4293      	cmp	r3, r2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e0b8      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	4b40      	ldr	r3, [pc, #256]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ee      	bne.n	800274a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800276c:	7dfb      	ldrb	r3, [r7, #23]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002772:	4b3c      	ldr	r3, [pc, #240]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a3b      	ldr	r2, [pc, #236]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 80a4 	beq.w	80028d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002788:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b08      	cmp	r3, #8
 8002792:	d06b      	beq.n	800286c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d149      	bne.n	8002830 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a30      	ldr	r2, [pc, #192]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80027a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff fadc 	bl	8001d64 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff fad8 	bl	8001d64 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e087      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	019b      	lsls	r3, r3, #6
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	041b      	lsls	r3, r3, #16
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	4313      	orrs	r3, r2
 80027f4:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80027f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fc:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a18      	ldr	r2, [pc, #96]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7ff faac 	bl	8001d64 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7ff faa8 	bl	8001d64 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e057      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x478>
 800282e:	e04f      	b.n	80028d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800283a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff fa92 	bl	8001d64 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002844:	f7ff fa8e 	bl	8001d64 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e03d      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_RCC_OscConfig+0x4cc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x4ac>
 8002862:	e035      	b.n	80028d0 <HAL_RCC_OscConfig+0x538>
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x544>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d028      	beq.n	80028cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d121      	bne.n	80028cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d11a      	bne.n	80028cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d111      	bne.n	80028cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	3b01      	subs	r3, #1
 80028b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800

080028e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0d0      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b67      	ldr	r3, [pc, #412]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 020f 	bic.w	r2, r3, #15
 800290e:	4965      	ldr	r1, [pc, #404]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0b8      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002940:	4b59      	ldr	r3, [pc, #356]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800294a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002958:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 800295e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002962:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	494d      	ldr	r1, [pc, #308]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d040      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d115      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e07f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e073      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e06b      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4936      	ldr	r1, [pc, #216]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7ff f9c6 	bl	8001d64 <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7ff f9c2 	bl	8001d64 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e053      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d210      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 020f 	bic.w	r2, r3, #15
 8002a1a:	4922      	ldr	r1, [pc, #136]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e032      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4916      	ldr	r1, [pc, #88]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	490e      	ldr	r1, [pc, #56]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a72:	f000 f821 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	490a      	ldr	r1, [pc, #40]	; (8002aac <HAL_RCC_ClockConfig+0x1cc>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_ClockConfig+0x1d4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff f922 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	080079c8 	.word	0x080079c8
 8002ab0:	20000004 	.word	0x20000004
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002abc:	b090      	sub	sp, #64	; 0x40
 8002abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac8:	2300      	movs	r3, #0
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d00d      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x40>
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	f200 80a1 	bhi.w	8002c24 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x34>
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aea:	e09b      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002af0:	e09b      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af2:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002af4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002af6:	e098      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af8:	4b4f      	ldr	r3, [pc, #316]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b02:	4b4d      	ldr	r3, [pc, #308]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d028      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	099b      	lsrs	r3, r3, #6
 8002b14:	2200      	movs	r2, #0
 8002b16:	623b      	str	r3, [r7, #32]
 8002b18:	627a      	str	r2, [r7, #36]	; 0x24
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b20:	2100      	movs	r1, #0
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b24:	fb03 f201 	mul.w	r2, r3, r1
 8002b28:	2300      	movs	r3, #0
 8002b2a:	fb00 f303 	mul.w	r3, r0, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a43      	ldr	r2, [pc, #268]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b32:	fba0 1202 	umull	r1, r2, r0, r2
 8002b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b38:	460a      	mov	r2, r1
 8002b3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3e:	4413      	add	r3, r2
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	2200      	movs	r2, #0
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	61fa      	str	r2, [r7, #28]
 8002b4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b52:	f7fe f899 	bl	8000c88 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b5e:	e053      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b60:	4b35      	ldr	r3, [pc, #212]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	2200      	movs	r2, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	617a      	str	r2, [r7, #20]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b72:	f04f 0b00 	mov.w	fp, #0
 8002b76:	4652      	mov	r2, sl
 8002b78:	465b      	mov	r3, fp
 8002b7a:	f04f 0000 	mov.w	r0, #0
 8002b7e:	f04f 0100 	mov.w	r1, #0
 8002b82:	0159      	lsls	r1, r3, #5
 8002b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b88:	0150      	lsls	r0, r2, #5
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	ebb2 080a 	subs.w	r8, r2, sl
 8002b92:	eb63 090b 	sbc.w	r9, r3, fp
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ba2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ba6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002baa:	ebb2 0408 	subs.w	r4, r2, r8
 8002bae:	eb63 0509 	sbc.w	r5, r3, r9
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	00eb      	lsls	r3, r5, #3
 8002bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc0:	00e2      	lsls	r2, r4, #3
 8002bc2:	4614      	mov	r4, r2
 8002bc4:	461d      	mov	r5, r3
 8002bc6:	eb14 030a 	adds.w	r3, r4, sl
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	eb45 030b 	adc.w	r3, r5, fp
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bde:	4629      	mov	r1, r5
 8002be0:	028b      	lsls	r3, r1, #10
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be8:	4621      	mov	r1, r4
 8002bea:	028a      	lsls	r2, r1, #10
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	60fa      	str	r2, [r7, #12]
 8002bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bfc:	f7fe f844 	bl	8000c88 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4613      	mov	r3, r2
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	3301      	adds	r3, #1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c22:	e002      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3740      	adds	r7, #64	; 0x40
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	017d7840 	.word	0x017d7840

08002c44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000004 	.word	0x20000004

08002c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c60:	f7ff fff0 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0a9b      	lsrs	r3, r3, #10
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4903      	ldr	r1, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	080079d8 	.word	0x080079d8

08002c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c88:	f7ff ffdc 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	0b5b      	lsrs	r3, r3, #13
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	4903      	ldr	r1, [pc, #12]	; (8002ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c9a:	5ccb      	ldrb	r3, [r1, r3]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	080079d8 	.word	0x080079d8

08002cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002cd4:	4b69      	ldr	r3, [pc, #420]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4a68      	ldr	r2, [pc, #416]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002cde:	6093      	str	r3, [r2, #8]
 8002ce0:	4b66      	ldr	r3, [pc, #408]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	4964      	ldr	r1, [pc, #400]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d017      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d06:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	4959      	ldr	r1, [pc, #356]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d24:	d101      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d26:	2301      	movs	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002d32:	2301      	movs	r3, #1
 8002d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d017      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	494a      	ldr	r1, [pc, #296]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d60:	d101      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002d62:	2301      	movs	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 808b 	beq.w	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	4a39      	ldr	r2, [pc, #228]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9c:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db4:	f7fe ffd6 	bl	8001d64 <HAL_GetTick>
 8002db8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7fe ffd2 	bl	8001d64 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e357      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d035      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d02e      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e1a:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d114      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe ff9a 	bl	8001d64 <HAL_GetTick>
 8002e30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fe ff96 	bl	8001d64 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e319      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ee      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e62:	d111      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e72:	400b      	ands	r3, r1
 8002e74:	4901      	ldr	r1, [pc, #4]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40007000 	.word	0x40007000
 8002e84:	0ffffcff 	.word	0x0ffffcff
 8002e88:	4baa      	ldr	r3, [pc, #680]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4aa9      	ldr	r2, [pc, #676]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e92:	6093      	str	r3, [r2, #8]
 8002e94:	4ba7      	ldr	r3, [pc, #668]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	49a4      	ldr	r1, [pc, #656]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eb2:	4ba0      	ldr	r3, [pc, #640]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb8:	4a9e      	ldr	r2, [pc, #632]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ebe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ec2:	4b9c      	ldr	r3, [pc, #624]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	4999      	ldr	r1, [pc, #612]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee0:	4b94      	ldr	r3, [pc, #592]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eee:	4991      	ldr	r1, [pc, #580]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f02:	4b8c      	ldr	r3, [pc, #560]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f10:	4988      	ldr	r1, [pc, #544]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00a      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f24:	4b83      	ldr	r3, [pc, #524]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f32:	4980      	ldr	r1, [pc, #512]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f46:	4b7b      	ldr	r3, [pc, #492]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4977      	ldr	r1, [pc, #476]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f68:	4b72      	ldr	r3, [pc, #456]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	496f      	ldr	r1, [pc, #444]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f8a:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f90:	f023 020c 	bic.w	r2, r3, #12
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	4966      	ldr	r1, [pc, #408]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fac:	4b61      	ldr	r3, [pc, #388]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	495e      	ldr	r1, [pc, #376]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fce:	4b59      	ldr	r3, [pc, #356]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fdc:	4955      	ldr	r1, [pc, #340]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ff0:	4b50      	ldr	r3, [pc, #320]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	494d      	ldr	r1, [pc, #308]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003012:	4b48      	ldr	r3, [pc, #288]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	4944      	ldr	r1, [pc, #272]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003034:	4b3f      	ldr	r3, [pc, #252]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	493c      	ldr	r1, [pc, #240]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003056:	4b37      	ldr	r3, [pc, #220]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003064:	4933      	ldr	r1, [pc, #204]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003078:	4b2e      	ldr	r3, [pc, #184]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003086:	492b      	ldr	r1, [pc, #172]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d011      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030a8:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b8:	d101      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80030ca:	2301      	movs	r3, #1
 80030cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e8:	4912      	ldr	r1, [pc, #72]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030fc:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310c:	4909      	ldr	r1, [pc, #36]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d006      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 80d9 	beq.w	80032da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003128:	4b02      	ldr	r3, [pc, #8]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a01      	ldr	r2, [pc, #4]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003132:	e001      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003134:	40023800 	.word	0x40023800
 8003138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313a:	f7fe fe13 	bl	8001d64 <HAL_GetTick>
 800313e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003142:	f7fe fe0f 	bl	8001d64 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b64      	cmp	r3, #100	; 0x64
 800314e:	d901      	bls.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e194      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003154:	4b6c      	ldr	r3, [pc, #432]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d021      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11d      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003174:	4b64      	ldr	r3, [pc, #400]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317a:	0c1b      	lsrs	r3, r3, #16
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003182:	4b61      	ldr	r3, [pc, #388]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003188:	0e1b      	lsrs	r3, r3, #24
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	019a      	lsls	r2, r3, #6
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	431a      	orrs	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	061b      	lsls	r3, r3, #24
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	071b      	lsls	r3, r3, #28
 80031a8:	4957      	ldr	r1, [pc, #348]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c4:	d00a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d02e      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031da:	d129      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031dc:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e2:	0c1b      	lsrs	r3, r3, #16
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f0:	0f1b      	lsrs	r3, r3, #28
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	019a      	lsls	r2, r3, #6
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	431a      	orrs	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	071b      	lsls	r3, r3, #28
 8003210:	493d      	ldr	r1, [pc, #244]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003218:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800321a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800321e:	f023 021f 	bic.w	r2, r3, #31
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	3b01      	subs	r3, #1
 8003228:	4937      	ldr	r1, [pc, #220]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d01d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800323c:	4b32      	ldr	r3, [pc, #200]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800323e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003242:	0e1b      	lsrs	r3, r3, #24
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800324a:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800324c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003250:	0f1b      	lsrs	r3, r3, #28
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	019a      	lsls	r2, r3, #6
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	431a      	orrs	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	061b      	lsls	r3, r3, #24
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	071b      	lsls	r3, r3, #28
 8003270:	4925      	ldr	r1, [pc, #148]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d011      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	019a      	lsls	r2, r3, #6
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	041b      	lsls	r3, r3, #16
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	061b      	lsls	r3, r3, #24
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	071b      	lsls	r3, r3, #28
 80032a0:	4919      	ldr	r1, [pc, #100]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032a8:	4b17      	ldr	r3, [pc, #92]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a16      	ldr	r2, [pc, #88]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b4:	f7fe fd56 	bl	8001d64 <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032bc:	f7fe fd52 	bl	8001d64 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0d7      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	f040 80cd 	bne.w	800347c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a08      	ldr	r2, [pc, #32]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ee:	f7fe fd39 	bl	8001d64 <HAL_GetTick>
 80032f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032f6:	f7fe fd35 	bl	8001d64 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b64      	cmp	r3, #100	; 0x64
 8003302:	d903      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0ba      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003308:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800330c:	4b5e      	ldr	r3, [pc, #376]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003318:	d0ed      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d12a      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003342:	4b51      	ldr	r3, [pc, #324]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	0c1b      	lsrs	r3, r3, #16
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003350:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	0f1b      	lsrs	r3, r3, #28
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	019a      	lsls	r2, r3, #6
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	041b      	lsls	r3, r3, #16
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	061b      	lsls	r3, r3, #24
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	071b      	lsls	r3, r3, #28
 8003376:	4944      	ldr	r1, [pc, #272]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800337e:	4b42      	ldr	r3, [pc, #264]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003384:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	3b01      	subs	r3, #1
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	493d      	ldr	r1, [pc, #244]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d022      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ac:	d11d      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ae:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	0e1b      	lsrs	r3, r3, #24
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033bc:	4b32      	ldr	r3, [pc, #200]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	0f1b      	lsrs	r3, r3, #28
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	019a      	lsls	r2, r3, #6
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	061b      	lsls	r3, r3, #24
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	071b      	lsls	r3, r3, #28
 80033e2:	4929      	ldr	r1, [pc, #164]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d028      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	0e1b      	lsrs	r3, r3, #24
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	0c1b      	lsrs	r3, r3, #16
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	019a      	lsls	r2, r3, #6
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	431a      	orrs	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	071b      	lsls	r3, r3, #28
 800342a:	4917      	ldr	r1, [pc, #92]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	4911      	ldr	r1, [pc, #68]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003454:	f7fe fc86 	bl	8001d64 <HAL_GetTick>
 8003458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800345c:	f7fe fc82 	bl	8001d64 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e007      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800347a:	d1ef      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800

0800348c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e049      	b.n	8003532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe fad4 	bl	8001a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4619      	mov	r1, r3
 80034ca:	4610      	mov	r0, r2
 80034cc:	f000 fcd8 	bl	8003e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e049      	b.n	80035e0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f841 	bl	80035e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f000 fc81 	bl	8003e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <HAL_TIM_IC_Start_IT+0x1e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003616:	b2db      	uxtb	r3, r3
 8003618:	e023      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x66>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d104      	bne.n	800362a <HAL_TIM_IC_Start_IT+0x2e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003626:	b2db      	uxtb	r3, r3
 8003628:	e01b      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x66>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d104      	bne.n	800363a <HAL_TIM_IC_Start_IT+0x3e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003636:	b2db      	uxtb	r3, r3
 8003638:	e013      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x66>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d104      	bne.n	800364a <HAL_TIM_IC_Start_IT+0x4e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003646:	b2db      	uxtb	r3, r3
 8003648:	e00b      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x66>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b10      	cmp	r3, #16
 800364e:	d104      	bne.n	800365a <HAL_TIM_IC_Start_IT+0x5e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e003      	b.n	8003662 <HAL_TIM_IC_Start_IT+0x66>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003660:	b2db      	uxtb	r3, r3
 8003662:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d104      	bne.n	8003674 <HAL_TIM_IC_Start_IT+0x78>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e013      	b.n	800369c <HAL_TIM_IC_Start_IT+0xa0>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b04      	cmp	r3, #4
 8003678:	d104      	bne.n	8003684 <HAL_TIM_IC_Start_IT+0x88>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e00b      	b.n	800369c <HAL_TIM_IC_Start_IT+0xa0>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b08      	cmp	r3, #8
 8003688:	d104      	bne.n	8003694 <HAL_TIM_IC_Start_IT+0x98>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e003      	b.n	800369c <HAL_TIM_IC_Start_IT+0xa0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800369a:	b2db      	uxtb	r3, r3
 800369c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800369e:	7bbb      	ldrb	r3, [r7, #14]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036a4:	7b7b      	ldrb	r3, [r7, #13]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0e2      	b.n	8003874 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_TIM_IC_Start_IT+0xc2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	e023      	b.n	8003706 <HAL_TIM_IC_Start_IT+0x10a>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_IC_Start_IT+0xd2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	e01b      	b.n	8003706 <HAL_TIM_IC_Start_IT+0x10a>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <HAL_TIM_IC_Start_IT+0xe2>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036dc:	e013      	b.n	8003706 <HAL_TIM_IC_Start_IT+0x10a>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_IC_Start_IT+0xf2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ec:	e00b      	b.n	8003706 <HAL_TIM_IC_Start_IT+0x10a>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_IC_Start_IT+0x102>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fc:	e003      	b.n	8003706 <HAL_TIM_IC_Start_IT+0x10a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <HAL_TIM_IC_Start_IT+0x11a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003714:	e013      	b.n	800373e <HAL_TIM_IC_Start_IT+0x142>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d104      	bne.n	8003726 <HAL_TIM_IC_Start_IT+0x12a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003724:	e00b      	b.n	800373e <HAL_TIM_IC_Start_IT+0x142>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d104      	bne.n	8003736 <HAL_TIM_IC_Start_IT+0x13a>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003734:	e003      	b.n	800373e <HAL_TIM_IC_Start_IT+0x142>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d841      	bhi.n	80037c8 <HAL_TIM_IC_Start_IT+0x1cc>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_TIM_IC_Start_IT+0x150>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003781 	.word	0x08003781
 8003750:	080037c9 	.word	0x080037c9
 8003754:	080037c9 	.word	0x080037c9
 8003758:	080037c9 	.word	0x080037c9
 800375c:	08003793 	.word	0x08003793
 8003760:	080037c9 	.word	0x080037c9
 8003764:	080037c9 	.word	0x080037c9
 8003768:	080037c9 	.word	0x080037c9
 800376c:	080037a5 	.word	0x080037a5
 8003770:	080037c9 	.word	0x080037c9
 8003774:	080037c9 	.word	0x080037c9
 8003778:	080037c9 	.word	0x080037c9
 800377c:	080037b7 	.word	0x080037b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0202 	orr.w	r2, r2, #2
 800378e:	60da      	str	r2, [r3, #12]
      break;
 8003790:	e01d      	b.n	80037ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0204 	orr.w	r2, r2, #4
 80037a0:	60da      	str	r2, [r3, #12]
      break;
 80037a2:	e014      	b.n	80037ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0208 	orr.w	r2, r2, #8
 80037b2:	60da      	str	r2, [r3, #12]
      break;
 80037b4:	e00b      	b.n	80037ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0210 	orr.w	r2, r2, #16
 80037c4:	60da      	str	r2, [r3, #12]
      break;
 80037c6:	e002      	b.n	80037ce <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d14e      	bne.n	8003872 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	6839      	ldr	r1, [r7, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fdb3 	bl	8004348 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a25      	ldr	r2, [pc, #148]	; (800387c <HAL_TIM_IC_Start_IT+0x280>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d022      	beq.n	8003832 <HAL_TIM_IC_Start_IT+0x236>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d01d      	beq.n	8003832 <HAL_TIM_IC_Start_IT+0x236>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a21      	ldr	r2, [pc, #132]	; (8003880 <HAL_TIM_IC_Start_IT+0x284>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d018      	beq.n	8003832 <HAL_TIM_IC_Start_IT+0x236>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1f      	ldr	r2, [pc, #124]	; (8003884 <HAL_TIM_IC_Start_IT+0x288>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d013      	beq.n	8003832 <HAL_TIM_IC_Start_IT+0x236>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <HAL_TIM_IC_Start_IT+0x28c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00e      	beq.n	8003832 <HAL_TIM_IC_Start_IT+0x236>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1c      	ldr	r2, [pc, #112]	; (800388c <HAL_TIM_IC_Start_IT+0x290>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_TIM_IC_Start_IT+0x236>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <HAL_TIM_IC_Start_IT+0x294>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d004      	beq.n	8003832 <HAL_TIM_IC_Start_IT+0x236>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_TIM_IC_Start_IT+0x298>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d115      	bne.n	800385e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_TIM_IC_Start_IT+0x29c>)
 800383a:	4013      	ands	r3, r2
 800383c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b06      	cmp	r3, #6
 8003842:	d015      	beq.n	8003870 <HAL_TIM_IC_Start_IT+0x274>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384a:	d011      	beq.n	8003870 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800385c:	e008      	b.n	8003870 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	e000      	b.n	8003872 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003870:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40010000 	.word	0x40010000
 8003880:	40000400 	.word	0x40000400
 8003884:	40000800 	.word	0x40000800
 8003888:	40000c00 	.word	0x40000c00
 800388c:	40010400 	.word	0x40010400
 8003890:	40014000 	.word	0x40014000
 8003894:	40001800 	.word	0x40001800
 8003898:	00010007 	.word	0x00010007

0800389c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d122      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d11b      	bne.n	80038f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0202 	mvn.w	r2, #2
 80038c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fe0c 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 faac 	bl	8003e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fab3 	bl	8003e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d122      	bne.n	800394c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d11b      	bne.n	800394c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0204 	mvn.w	r2, #4
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd fde2 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fa82 	bl	8003e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fa89 	bl	8003e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b08      	cmp	r3, #8
 8003958:	d122      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b08      	cmp	r3, #8
 8003966:	d11b      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0208 	mvn.w	r2, #8
 8003970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2204      	movs	r2, #4
 8003976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fd fdb8 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 800398c:	e005      	b.n	800399a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fa58 	bl	8003e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fa5f 	bl	8003e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d122      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d11b      	bne.n	80039f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0210 	mvn.w	r2, #16
 80039c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2208      	movs	r2, #8
 80039ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd fd8e 	bl	80014fc <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fa2e 	bl	8003e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fa35 	bl	8003e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d10e      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d107      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0201 	mvn.w	r2, #1
 8003a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fa08 	bl	8003e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b80      	cmp	r3, #128	; 0x80
 8003a2c:	d10e      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d107      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fd3c 	bl	80044c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5a:	d10e      	bne.n	8003a7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b80      	cmp	r3, #128	; 0x80
 8003a68:	d107      	bne.n	8003a7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fd2f 	bl	80044d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d10e      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d107      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f9e3 	bl	8003e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d10e      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d107      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0220 	mvn.w	r2, #32
 8003aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fcef 	bl	80044b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e088      	b.n	8003c0a <HAL_TIM_IC_ConfigChannel+0x130>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11b      	bne.n	8003b3e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6819      	ldr	r1, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f000 fa53 	bl	8003fc0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 020c 	bic.w	r2, r2, #12
 8003b28:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6999      	ldr	r1, [r3, #24]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	619a      	str	r2, [r3, #24]
 8003b3c:	e060      	b.n	8003c00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d11c      	bne.n	8003b7e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	6819      	ldr	r1, [r3, #0]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f000 fad7 	bl	8004106 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b66:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6999      	ldr	r1, [r3, #24]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	021a      	lsls	r2, r3, #8
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	619a      	str	r2, [r3, #24]
 8003b7c:	e040      	b.n	8003c00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f000 fb24 	bl	80041e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 020c 	bic.w	r2, r2, #12
 8003ba6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69d9      	ldr	r1, [r3, #28]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	61da      	str	r2, [r3, #28]
 8003bba:	e021      	b.n	8003c00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d11c      	bne.n	8003bfc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6819      	ldr	r1, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f000 fb41 	bl	8004258 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003be4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	021a      	lsls	r2, r3, #8
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	61da      	str	r2, [r3, #28]
 8003bfa:	e001      	b.n	8003c00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIM_ConfigClockSource+0x1c>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0b4      	b.n	8003d9a <HAL_TIM_ConfigClockSource+0x186>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	4b56      	ldr	r3, [pc, #344]	; (8003da4 <HAL_TIM_ConfigClockSource+0x190>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c68:	d03e      	beq.n	8003ce8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6e:	f200 8087 	bhi.w	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	f000 8086 	beq.w	8003d86 <HAL_TIM_ConfigClockSource+0x172>
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d87f      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b70      	cmp	r3, #112	; 0x70
 8003c82:	d01a      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0xa6>
 8003c84:	2b70      	cmp	r3, #112	; 0x70
 8003c86:	d87b      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b60      	cmp	r3, #96	; 0x60
 8003c8a:	d050      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x11a>
 8003c8c:	2b60      	cmp	r3, #96	; 0x60
 8003c8e:	d877      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b50      	cmp	r3, #80	; 0x50
 8003c92:	d03c      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0xfa>
 8003c94:	2b50      	cmp	r3, #80	; 0x50
 8003c96:	d873      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d058      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x13a>
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d86f      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b30      	cmp	r3, #48	; 0x30
 8003ca2:	d064      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003ca4:	2b30      	cmp	r3, #48	; 0x30
 8003ca6:	d86b      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d060      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d867      	bhi.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d05c      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d05a      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x15a>
 8003cb8:	e062      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6899      	ldr	r1, [r3, #8]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f000 fb1d 	bl	8004308 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	609a      	str	r2, [r3, #8]
      break;
 8003ce6:	e04f      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6899      	ldr	r1, [r3, #8]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f000 fb06 	bl	8004308 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d0a:	609a      	str	r2, [r3, #8]
      break;
 8003d0c:	e03c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 f9c4 	bl	80040a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2150      	movs	r1, #80	; 0x50
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fad3 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e02c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 fa20 	bl	8004180 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2160      	movs	r1, #96	; 0x60
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fac3 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e01c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 f9a4 	bl	80040a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2140      	movs	r1, #64	; 0x40
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fab3 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e00c      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f000 faaa 	bl	80042d2 <TIM_ITRx_SetConfig>
      break;
 8003d7e:	e003      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      break;
 8003d84:	e000      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	fffeff88 	.word	0xfffeff88

08003da8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d831      	bhi.n	8003e20 <HAL_TIM_ReadCapturedValue+0x78>
 8003dbc:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003df9 	.word	0x08003df9
 8003dc8:	08003e21 	.word	0x08003e21
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003e21 	.word	0x08003e21
 8003dd4:	08003e03 	.word	0x08003e03
 8003dd8:	08003e21 	.word	0x08003e21
 8003ddc:	08003e21 	.word	0x08003e21
 8003de0:	08003e21 	.word	0x08003e21
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e21 	.word	0x08003e21
 8003df0:	08003e21 	.word	0x08003e21
 8003df4:	08003e17 	.word	0x08003e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	60fb      	str	r3, [r7, #12]

      break;
 8003e00:	e00f      	b.n	8003e22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	60fb      	str	r3, [r7, #12]

      break;
 8003e0a:	e00a      	b.n	8003e22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	60fb      	str	r3, [r7, #12]

      break;
 8003e14:	e005      	b.n	8003e22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	60fb      	str	r3, [r7, #12]

      break;
 8003e1e:	e000      	b.n	8003e22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e20:	bf00      	nop
  }

  return tmpreg;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3714      	adds	r7, #20
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a40      	ldr	r2, [pc, #256]	; (8003f94 <TIM_Base_SetConfig+0x114>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d013      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9e:	d00f      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3d      	ldr	r2, [pc, #244]	; (8003f98 <TIM_Base_SetConfig+0x118>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00b      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3c      	ldr	r2, [pc, #240]	; (8003f9c <TIM_Base_SetConfig+0x11c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d007      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3b      	ldr	r2, [pc, #236]	; (8003fa0 <TIM_Base_SetConfig+0x120>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3a      	ldr	r2, [pc, #232]	; (8003fa4 <TIM_Base_SetConfig+0x124>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d108      	bne.n	8003ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2f      	ldr	r2, [pc, #188]	; (8003f94 <TIM_Base_SetConfig+0x114>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d02b      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d027      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <TIM_Base_SetConfig+0x118>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d023      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <TIM_Base_SetConfig+0x11c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01f      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <TIM_Base_SetConfig+0x120>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01b      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <TIM_Base_SetConfig+0x124>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d017      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <TIM_Base_SetConfig+0x128>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a27      	ldr	r2, [pc, #156]	; (8003fac <TIM_Base_SetConfig+0x12c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00f      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <TIM_Base_SetConfig+0x130>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00b      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <TIM_Base_SetConfig+0x134>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a24      	ldr	r2, [pc, #144]	; (8003fb8 <TIM_Base_SetConfig+0x138>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <TIM_Base_SetConfig+0x13c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d108      	bne.n	8003f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <TIM_Base_SetConfig+0x114>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_Base_SetConfig+0xf8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <TIM_Base_SetConfig+0x124>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d103      	bne.n	8003f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	615a      	str	r2, [r3, #20]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40010400 	.word	0x40010400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	40001800 	.word	0x40001800
 8003fb8:	40001c00 	.word	0x40001c00
 8003fbc:	40002000 	.word	0x40002000

08003fc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	f023 0201 	bic.w	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a28      	ldr	r2, [pc, #160]	; (800408c <TIM_TI1_SetConfig+0xcc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01b      	beq.n	8004026 <TIM_TI1_SetConfig+0x66>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d017      	beq.n	8004026 <TIM_TI1_SetConfig+0x66>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a25      	ldr	r2, [pc, #148]	; (8004090 <TIM_TI1_SetConfig+0xd0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <TIM_TI1_SetConfig+0x66>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4a24      	ldr	r2, [pc, #144]	; (8004094 <TIM_TI1_SetConfig+0xd4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00f      	beq.n	8004026 <TIM_TI1_SetConfig+0x66>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4a23      	ldr	r2, [pc, #140]	; (8004098 <TIM_TI1_SetConfig+0xd8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00b      	beq.n	8004026 <TIM_TI1_SetConfig+0x66>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <TIM_TI1_SetConfig+0xdc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <TIM_TI1_SetConfig+0x66>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <TIM_TI1_SetConfig+0xe0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d003      	beq.n	8004026 <TIM_TI1_SetConfig+0x66>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <TIM_TI1_SetConfig+0xe4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <TIM_TI1_SetConfig+0x6a>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <TIM_TI1_SetConfig+0x6c>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e003      	b.n	800404a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	b2db      	uxtb	r3, r3
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f023 030a 	bic.w	r3, r3, #10
 8004064:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f003 030a 	and.w	r3, r3, #10
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40010400 	.word	0x40010400
 80040a0:	40014000 	.word	0x40014000
 80040a4:	40001800 	.word	0x40001800

080040a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 030a 	bic.w	r3, r3, #10
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004106:	b480      	push	{r7}
 8004108:	b087      	sub	sp, #28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 0210 	bic.w	r2, r3, #16
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	031b      	lsls	r3, r3, #12
 800414a:	b29b      	uxth	r3, r3
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004158:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	621a      	str	r2, [r3, #32]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f023 0210 	bic.w	r2, r3, #16
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	031b      	lsls	r3, r3, #12
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 0303 	bic.w	r3, r3, #3
 800420c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	b2db      	uxtb	r3, r3
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004230:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	621a      	str	r2, [r3, #32]
}
 800424c:	bf00      	nop
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004284:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004296:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	031b      	lsls	r3, r3, #12
 800429c:	b29b      	uxth	r3, r3
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	031b      	lsls	r3, r3, #12
 80042b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f043 0307 	orr.w	r3, r3, #7
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	021a      	lsls	r2, r3, #8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	431a      	orrs	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 031f 	and.w	r3, r3, #31
 800435a:	2201      	movs	r2, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	43db      	mvns	r3, r3
 800436a:	401a      	ands	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a1a      	ldr	r2, [r3, #32]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	fa01 f303 	lsl.w	r3, r1, r3
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e06d      	b.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a30      	ldr	r2, [pc, #192]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d108      	bne.n	80043f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a20      	ldr	r2, [pc, #128]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441e:	d01d      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1d      	ldr	r2, [pc, #116]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a15      	ldr	r2, [pc, #84]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d10c      	bne.n	8004476 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004462:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	4313      	orrs	r3, r2
 800446c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	40010000 	.word	0x40010000
 8004498:	40010400 	.word	0x40010400
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40001800 	.word	0x40001800

080044b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e040      	b.n	8004580 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fd fb2c 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8c0 	bl	80046b0 <UART_SetConfig>
 8004530:	4603      	mov	r3, r0
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e022      	b.n	8004580 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fb18 	bl	8004b78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fb9f 	bl	8004cbc <UART_CheckIdleState>
 800457e:	4603      	mov	r3, r0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	4613      	mov	r3, r2
 8004596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459c:	2b20      	cmp	r3, #32
 800459e:	f040 8081 	bne.w	80046a4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_UART_Transmit+0x26>
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e079      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_UART_Transmit+0x38>
 80045bc:	2302      	movs	r3, #2
 80045be:	e072      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2221      	movs	r2, #33	; 0x21
 80045d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d6:	f7fd fbc5 	bl	8001d64 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f4:	d108      	bne.n	8004608 <HAL_UART_Transmit+0x80>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	e003      	b.n	8004610 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004618:	e02c      	b.n	8004674 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2200      	movs	r2, #0
 8004622:	2180      	movs	r1, #128	; 0x80
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fb7c 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e038      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10b      	bne.n	8004652 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	881b      	ldrh	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004648:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	3302      	adds	r3, #2
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	e007      	b.n	8004662 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	3301      	adds	r3, #1
 8004660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1cc      	bne.n	800461a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	2200      	movs	r2, #0
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fb49 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e005      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4ba6      	ldr	r3, [pc, #664]	; (8004974 <UART_SetConfig+0x2c4>)
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	6979      	ldr	r1, [r7, #20]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	430a      	orrs	r2, r1
 8004720:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a94      	ldr	r2, [pc, #592]	; (8004978 <UART_SetConfig+0x2c8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d120      	bne.n	800476e <UART_SetConfig+0xbe>
 800472c:	4b93      	ldr	r3, [pc, #588]	; (800497c <UART_SetConfig+0x2cc>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b03      	cmp	r3, #3
 8004738:	d816      	bhi.n	8004768 <UART_SetConfig+0xb8>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <UART_SetConfig+0x90>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004751 	.word	0x08004751
 8004744:	0800475d 	.word	0x0800475d
 8004748:	08004757 	.word	0x08004757
 800474c:	08004763 	.word	0x08004763
 8004750:	2301      	movs	r3, #1
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e150      	b.n	80049f8 <UART_SetConfig+0x348>
 8004756:	2302      	movs	r3, #2
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e14d      	b.n	80049f8 <UART_SetConfig+0x348>
 800475c:	2304      	movs	r3, #4
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e14a      	b.n	80049f8 <UART_SetConfig+0x348>
 8004762:	2308      	movs	r3, #8
 8004764:	77fb      	strb	r3, [r7, #31]
 8004766:	e147      	b.n	80049f8 <UART_SetConfig+0x348>
 8004768:	2310      	movs	r3, #16
 800476a:	77fb      	strb	r3, [r7, #31]
 800476c:	e144      	b.n	80049f8 <UART_SetConfig+0x348>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a83      	ldr	r2, [pc, #524]	; (8004980 <UART_SetConfig+0x2d0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d132      	bne.n	80047de <UART_SetConfig+0x12e>
 8004778:	4b80      	ldr	r3, [pc, #512]	; (800497c <UART_SetConfig+0x2cc>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d828      	bhi.n	80047d8 <UART_SetConfig+0x128>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0xdc>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047d9 	.word	0x080047d9
 8004794:	080047d9 	.word	0x080047d9
 8004798:	080047d9 	.word	0x080047d9
 800479c:	080047cd 	.word	0x080047cd
 80047a0:	080047d9 	.word	0x080047d9
 80047a4:	080047d9 	.word	0x080047d9
 80047a8:	080047d9 	.word	0x080047d9
 80047ac:	080047c7 	.word	0x080047c7
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047d9 	.word	0x080047d9
 80047bc:	080047d3 	.word	0x080047d3
 80047c0:	2300      	movs	r3, #0
 80047c2:	77fb      	strb	r3, [r7, #31]
 80047c4:	e118      	b.n	80049f8 <UART_SetConfig+0x348>
 80047c6:	2302      	movs	r3, #2
 80047c8:	77fb      	strb	r3, [r7, #31]
 80047ca:	e115      	b.n	80049f8 <UART_SetConfig+0x348>
 80047cc:	2304      	movs	r3, #4
 80047ce:	77fb      	strb	r3, [r7, #31]
 80047d0:	e112      	b.n	80049f8 <UART_SetConfig+0x348>
 80047d2:	2308      	movs	r3, #8
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e10f      	b.n	80049f8 <UART_SetConfig+0x348>
 80047d8:	2310      	movs	r3, #16
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e10c      	b.n	80049f8 <UART_SetConfig+0x348>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a68      	ldr	r2, [pc, #416]	; (8004984 <UART_SetConfig+0x2d4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d120      	bne.n	800482a <UART_SetConfig+0x17a>
 80047e8:	4b64      	ldr	r3, [pc, #400]	; (800497c <UART_SetConfig+0x2cc>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047f2:	2b30      	cmp	r3, #48	; 0x30
 80047f4:	d013      	beq.n	800481e <UART_SetConfig+0x16e>
 80047f6:	2b30      	cmp	r3, #48	; 0x30
 80047f8:	d814      	bhi.n	8004824 <UART_SetConfig+0x174>
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d009      	beq.n	8004812 <UART_SetConfig+0x162>
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d810      	bhi.n	8004824 <UART_SetConfig+0x174>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <UART_SetConfig+0x15c>
 8004806:	2b10      	cmp	r3, #16
 8004808:	d006      	beq.n	8004818 <UART_SetConfig+0x168>
 800480a:	e00b      	b.n	8004824 <UART_SetConfig+0x174>
 800480c:	2300      	movs	r3, #0
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e0f2      	b.n	80049f8 <UART_SetConfig+0x348>
 8004812:	2302      	movs	r3, #2
 8004814:	77fb      	strb	r3, [r7, #31]
 8004816:	e0ef      	b.n	80049f8 <UART_SetConfig+0x348>
 8004818:	2304      	movs	r3, #4
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e0ec      	b.n	80049f8 <UART_SetConfig+0x348>
 800481e:	2308      	movs	r3, #8
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e0e9      	b.n	80049f8 <UART_SetConfig+0x348>
 8004824:	2310      	movs	r3, #16
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e0e6      	b.n	80049f8 <UART_SetConfig+0x348>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a56      	ldr	r2, [pc, #344]	; (8004988 <UART_SetConfig+0x2d8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d120      	bne.n	8004876 <UART_SetConfig+0x1c6>
 8004834:	4b51      	ldr	r3, [pc, #324]	; (800497c <UART_SetConfig+0x2cc>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800483e:	2bc0      	cmp	r3, #192	; 0xc0
 8004840:	d013      	beq.n	800486a <UART_SetConfig+0x1ba>
 8004842:	2bc0      	cmp	r3, #192	; 0xc0
 8004844:	d814      	bhi.n	8004870 <UART_SetConfig+0x1c0>
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d009      	beq.n	800485e <UART_SetConfig+0x1ae>
 800484a:	2b80      	cmp	r3, #128	; 0x80
 800484c:	d810      	bhi.n	8004870 <UART_SetConfig+0x1c0>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <UART_SetConfig+0x1a8>
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d006      	beq.n	8004864 <UART_SetConfig+0x1b4>
 8004856:	e00b      	b.n	8004870 <UART_SetConfig+0x1c0>
 8004858:	2300      	movs	r3, #0
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e0cc      	b.n	80049f8 <UART_SetConfig+0x348>
 800485e:	2302      	movs	r3, #2
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e0c9      	b.n	80049f8 <UART_SetConfig+0x348>
 8004864:	2304      	movs	r3, #4
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e0c6      	b.n	80049f8 <UART_SetConfig+0x348>
 800486a:	2308      	movs	r3, #8
 800486c:	77fb      	strb	r3, [r7, #31]
 800486e:	e0c3      	b.n	80049f8 <UART_SetConfig+0x348>
 8004870:	2310      	movs	r3, #16
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e0c0      	b.n	80049f8 <UART_SetConfig+0x348>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a44      	ldr	r2, [pc, #272]	; (800498c <UART_SetConfig+0x2dc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d125      	bne.n	80048cc <UART_SetConfig+0x21c>
 8004880:	4b3e      	ldr	r3, [pc, #248]	; (800497c <UART_SetConfig+0x2cc>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800488e:	d017      	beq.n	80048c0 <UART_SetConfig+0x210>
 8004890:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004894:	d817      	bhi.n	80048c6 <UART_SetConfig+0x216>
 8004896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489a:	d00b      	beq.n	80048b4 <UART_SetConfig+0x204>
 800489c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a0:	d811      	bhi.n	80048c6 <UART_SetConfig+0x216>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <UART_SetConfig+0x1fe>
 80048a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048aa:	d006      	beq.n	80048ba <UART_SetConfig+0x20a>
 80048ac:	e00b      	b.n	80048c6 <UART_SetConfig+0x216>
 80048ae:	2300      	movs	r3, #0
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0a1      	b.n	80049f8 <UART_SetConfig+0x348>
 80048b4:	2302      	movs	r3, #2
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e09e      	b.n	80049f8 <UART_SetConfig+0x348>
 80048ba:	2304      	movs	r3, #4
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e09b      	b.n	80049f8 <UART_SetConfig+0x348>
 80048c0:	2308      	movs	r3, #8
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e098      	b.n	80049f8 <UART_SetConfig+0x348>
 80048c6:	2310      	movs	r3, #16
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e095      	b.n	80049f8 <UART_SetConfig+0x348>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <UART_SetConfig+0x2e0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d125      	bne.n	8004922 <UART_SetConfig+0x272>
 80048d6:	4b29      	ldr	r3, [pc, #164]	; (800497c <UART_SetConfig+0x2cc>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048e4:	d017      	beq.n	8004916 <UART_SetConfig+0x266>
 80048e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048ea:	d817      	bhi.n	800491c <UART_SetConfig+0x26c>
 80048ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f0:	d00b      	beq.n	800490a <UART_SetConfig+0x25a>
 80048f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f6:	d811      	bhi.n	800491c <UART_SetConfig+0x26c>
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <UART_SetConfig+0x254>
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004900:	d006      	beq.n	8004910 <UART_SetConfig+0x260>
 8004902:	e00b      	b.n	800491c <UART_SetConfig+0x26c>
 8004904:	2301      	movs	r3, #1
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e076      	b.n	80049f8 <UART_SetConfig+0x348>
 800490a:	2302      	movs	r3, #2
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e073      	b.n	80049f8 <UART_SetConfig+0x348>
 8004910:	2304      	movs	r3, #4
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e070      	b.n	80049f8 <UART_SetConfig+0x348>
 8004916:	2308      	movs	r3, #8
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e06d      	b.n	80049f8 <UART_SetConfig+0x348>
 800491c:	2310      	movs	r3, #16
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e06a      	b.n	80049f8 <UART_SetConfig+0x348>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <UART_SetConfig+0x2e4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d138      	bne.n	800499e <UART_SetConfig+0x2ee>
 800492c:	4b13      	ldr	r3, [pc, #76]	; (800497c <UART_SetConfig+0x2cc>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800493a:	d017      	beq.n	800496c <UART_SetConfig+0x2bc>
 800493c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004940:	d82a      	bhi.n	8004998 <UART_SetConfig+0x2e8>
 8004942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004946:	d00b      	beq.n	8004960 <UART_SetConfig+0x2b0>
 8004948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494c:	d824      	bhi.n	8004998 <UART_SetConfig+0x2e8>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <UART_SetConfig+0x2aa>
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d006      	beq.n	8004966 <UART_SetConfig+0x2b6>
 8004958:	e01e      	b.n	8004998 <UART_SetConfig+0x2e8>
 800495a:	2300      	movs	r3, #0
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e04b      	b.n	80049f8 <UART_SetConfig+0x348>
 8004960:	2302      	movs	r3, #2
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e048      	b.n	80049f8 <UART_SetConfig+0x348>
 8004966:	2304      	movs	r3, #4
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e045      	b.n	80049f8 <UART_SetConfig+0x348>
 800496c:	2308      	movs	r3, #8
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e042      	b.n	80049f8 <UART_SetConfig+0x348>
 8004972:	bf00      	nop
 8004974:	efff69f3 	.word	0xefff69f3
 8004978:	40011000 	.word	0x40011000
 800497c:	40023800 	.word	0x40023800
 8004980:	40004400 	.word	0x40004400
 8004984:	40004800 	.word	0x40004800
 8004988:	40004c00 	.word	0x40004c00
 800498c:	40005000 	.word	0x40005000
 8004990:	40011400 	.word	0x40011400
 8004994:	40007800 	.word	0x40007800
 8004998:	2310      	movs	r3, #16
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e02c      	b.n	80049f8 <UART_SetConfig+0x348>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a72      	ldr	r2, [pc, #456]	; (8004b6c <UART_SetConfig+0x4bc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d125      	bne.n	80049f4 <UART_SetConfig+0x344>
 80049a8:	4b71      	ldr	r3, [pc, #452]	; (8004b70 <UART_SetConfig+0x4c0>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049b6:	d017      	beq.n	80049e8 <UART_SetConfig+0x338>
 80049b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049bc:	d817      	bhi.n	80049ee <UART_SetConfig+0x33e>
 80049be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c2:	d00b      	beq.n	80049dc <UART_SetConfig+0x32c>
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c8:	d811      	bhi.n	80049ee <UART_SetConfig+0x33e>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <UART_SetConfig+0x326>
 80049ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049d2:	d006      	beq.n	80049e2 <UART_SetConfig+0x332>
 80049d4:	e00b      	b.n	80049ee <UART_SetConfig+0x33e>
 80049d6:	2300      	movs	r3, #0
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e00d      	b.n	80049f8 <UART_SetConfig+0x348>
 80049dc:	2302      	movs	r3, #2
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e00a      	b.n	80049f8 <UART_SetConfig+0x348>
 80049e2:	2304      	movs	r3, #4
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e007      	b.n	80049f8 <UART_SetConfig+0x348>
 80049e8:	2308      	movs	r3, #8
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e004      	b.n	80049f8 <UART_SetConfig+0x348>
 80049ee:	2310      	movs	r3, #16
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e001      	b.n	80049f8 <UART_SetConfig+0x348>
 80049f4:	2310      	movs	r3, #16
 80049f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a00:	d15b      	bne.n	8004aba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a02:	7ffb      	ldrb	r3, [r7, #31]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d828      	bhi.n	8004a5a <UART_SetConfig+0x3aa>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <UART_SetConfig+0x360>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a3d 	.word	0x08004a3d
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004a5b 	.word	0x08004a5b
 8004a20:	08004a4b 	.word	0x08004a4b
 8004a24:	08004a5b 	.word	0x08004a5b
 8004a28:	08004a5b 	.word	0x08004a5b
 8004a2c:	08004a5b 	.word	0x08004a5b
 8004a30:	08004a53 	.word	0x08004a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a34:	f7fe f912 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 8004a38:	61b8      	str	r0, [r7, #24]
        break;
 8004a3a:	e013      	b.n	8004a64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a3c:	f7fe f922 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 8004a40:	61b8      	str	r0, [r7, #24]
        break;
 8004a42:	e00f      	b.n	8004a64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a44:	4b4b      	ldr	r3, [pc, #300]	; (8004b74 <UART_SetConfig+0x4c4>)
 8004a46:	61bb      	str	r3, [r7, #24]
        break;
 8004a48:	e00c      	b.n	8004a64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4a:	f7fe f835 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8004a4e:	61b8      	str	r0, [r7, #24]
        break;
 8004a50:	e008      	b.n	8004a64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a56:	61bb      	str	r3, [r7, #24]
        break;
 8004a58:	e004      	b.n	8004a64 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	77bb      	strb	r3, [r7, #30]
        break;
 8004a62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d074      	beq.n	8004b54 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	005a      	lsls	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	085b      	lsrs	r3, r3, #1
 8004a74:	441a      	add	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b0f      	cmp	r3, #15
 8004a84:	d916      	bls.n	8004ab4 <UART_SetConfig+0x404>
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8c:	d212      	bcs.n	8004ab4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f023 030f 	bic.w	r3, r3, #15
 8004a96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	89fb      	ldrh	r3, [r7, #14]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	89fa      	ldrh	r2, [r7, #14]
 8004ab0:	60da      	str	r2, [r3, #12]
 8004ab2:	e04f      	b.n	8004b54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	77bb      	strb	r3, [r7, #30]
 8004ab8:	e04c      	b.n	8004b54 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aba:	7ffb      	ldrb	r3, [r7, #31]
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d828      	bhi.n	8004b12 <UART_SetConfig+0x462>
 8004ac0:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x418>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004af5 	.word	0x08004af5
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	08004b13 	.word	0x08004b13
 8004ad8:	08004b03 	.word	0x08004b03
 8004adc:	08004b13 	.word	0x08004b13
 8004ae0:	08004b13 	.word	0x08004b13
 8004ae4:	08004b13 	.word	0x08004b13
 8004ae8:	08004b0b 	.word	0x08004b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aec:	f7fe f8b6 	bl	8002c5c <HAL_RCC_GetPCLK1Freq>
 8004af0:	61b8      	str	r0, [r7, #24]
        break;
 8004af2:	e013      	b.n	8004b1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004af4:	f7fe f8c6 	bl	8002c84 <HAL_RCC_GetPCLK2Freq>
 8004af8:	61b8      	str	r0, [r7, #24]
        break;
 8004afa:	e00f      	b.n	8004b1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004afc:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <UART_SetConfig+0x4c4>)
 8004afe:	61bb      	str	r3, [r7, #24]
        break;
 8004b00:	e00c      	b.n	8004b1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b02:	f7fd ffd9 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8004b06:	61b8      	str	r0, [r7, #24]
        break;
 8004b08:	e008      	b.n	8004b1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0e:	61bb      	str	r3, [r7, #24]
        break;
 8004b10:	e004      	b.n	8004b1c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	77bb      	strb	r3, [r7, #30]
        break;
 8004b1a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d018      	beq.n	8004b54 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	085a      	lsrs	r2, r3, #1
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	441a      	add	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b0f      	cmp	r3, #15
 8004b3a:	d909      	bls.n	8004b50 <UART_SetConfig+0x4a0>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b42:	d205      	bcs.n	8004b50 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	e001      	b.n	8004b54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b60:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40007c00 	.word	0x40007c00
 8004b70:	40023800 	.word	0x40023800
 8004b74:	00f42400 	.word	0x00f42400

08004b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01a      	beq.n	8004c8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c76:	d10a      	bne.n	8004c8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	605a      	str	r2, [r3, #4]
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ccc:	f7fd f84a 	bl	8001d64 <HAL_GetTick>
 8004cd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d10e      	bne.n	8004cfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f817 	bl	8004d22 <UART_WaitOnFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e00d      	b.n	8004d1a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b09c      	sub	sp, #112	; 0x70
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	603b      	str	r3, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d32:	e0a5      	b.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	f000 80a1 	beq.w	8004e80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3e:	f7fd f811 	bl	8001d64 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d13e      	bne.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d68:	667b      	str	r3, [r7, #100]	; 0x64
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e6      	bne.n	8004d54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3308      	adds	r3, #8
 8004da4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004da6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004da8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e5      	bne.n	8004d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e067      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d04f      	beq.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dee:	d147      	bne.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e6      	bne.n	8004dfa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3308      	adds	r3, #8
 8004e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e4c:	623a      	str	r2, [r7, #32]
 8004e4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	69f9      	ldr	r1, [r7, #28]
 8004e52:	6a3a      	ldr	r2, [r7, #32]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e010      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	bf0c      	ite	eq
 8004e90:	2301      	moveq	r3, #1
 8004e92:	2300      	movne	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	f43f af4a 	beq.w	8004d34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3770      	adds	r7, #112	; 0x70
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <__errno>:
 8004eac:	4b01      	ldr	r3, [pc, #4]	; (8004eb4 <__errno+0x8>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20000010 	.word	0x20000010

08004eb8 <__libc_init_array>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	4d0d      	ldr	r5, [pc, #52]	; (8004ef0 <__libc_init_array+0x38>)
 8004ebc:	4c0d      	ldr	r4, [pc, #52]	; (8004ef4 <__libc_init_array+0x3c>)
 8004ebe:	1b64      	subs	r4, r4, r5
 8004ec0:	10a4      	asrs	r4, r4, #2
 8004ec2:	2600      	movs	r6, #0
 8004ec4:	42a6      	cmp	r6, r4
 8004ec6:	d109      	bne.n	8004edc <__libc_init_array+0x24>
 8004ec8:	4d0b      	ldr	r5, [pc, #44]	; (8004ef8 <__libc_init_array+0x40>)
 8004eca:	4c0c      	ldr	r4, [pc, #48]	; (8004efc <__libc_init_array+0x44>)
 8004ecc:	f002 fd50 	bl	8007970 <_init>
 8004ed0:	1b64      	subs	r4, r4, r5
 8004ed2:	10a4      	asrs	r4, r4, #2
 8004ed4:	2600      	movs	r6, #0
 8004ed6:	42a6      	cmp	r6, r4
 8004ed8:	d105      	bne.n	8004ee6 <__libc_init_array+0x2e>
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
 8004edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee0:	4798      	blx	r3
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7ee      	b.n	8004ec4 <__libc_init_array+0xc>
 8004ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eea:	4798      	blx	r3
 8004eec:	3601      	adds	r6, #1
 8004eee:	e7f2      	b.n	8004ed6 <__libc_init_array+0x1e>
 8004ef0:	08007dc4 	.word	0x08007dc4
 8004ef4:	08007dc4 	.word	0x08007dc4
 8004ef8:	08007dc4 	.word	0x08007dc4
 8004efc:	08007dc8 	.word	0x08007dc8

08004f00 <memset>:
 8004f00:	4402      	add	r2, r0
 8004f02:	4603      	mov	r3, r0
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d100      	bne.n	8004f0a <memset+0xa>
 8004f08:	4770      	bx	lr
 8004f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f0e:	e7f9      	b.n	8004f04 <memset+0x4>

08004f10 <__cvt>:
 8004f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	ec55 4b10 	vmov	r4, r5, d0
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	460e      	mov	r6, r1
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	462b      	mov	r3, r5
 8004f20:	bfbb      	ittet	lt
 8004f22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f26:	461d      	movlt	r5, r3
 8004f28:	2300      	movge	r3, #0
 8004f2a:	232d      	movlt	r3, #45	; 0x2d
 8004f2c:	700b      	strb	r3, [r1, #0]
 8004f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f34:	4691      	mov	r9, r2
 8004f36:	f023 0820 	bic.w	r8, r3, #32
 8004f3a:	bfbc      	itt	lt
 8004f3c:	4622      	movlt	r2, r4
 8004f3e:	4614      	movlt	r4, r2
 8004f40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f44:	d005      	beq.n	8004f52 <__cvt+0x42>
 8004f46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f4a:	d100      	bne.n	8004f4e <__cvt+0x3e>
 8004f4c:	3601      	adds	r6, #1
 8004f4e:	2102      	movs	r1, #2
 8004f50:	e000      	b.n	8004f54 <__cvt+0x44>
 8004f52:	2103      	movs	r1, #3
 8004f54:	ab03      	add	r3, sp, #12
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	ab02      	add	r3, sp, #8
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	ec45 4b10 	vmov	d0, r4, r5
 8004f60:	4653      	mov	r3, sl
 8004f62:	4632      	mov	r2, r6
 8004f64:	f000 fce4 	bl	8005930 <_dtoa_r>
 8004f68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	d102      	bne.n	8004f76 <__cvt+0x66>
 8004f70:	f019 0f01 	tst.w	r9, #1
 8004f74:	d022      	beq.n	8004fbc <__cvt+0xac>
 8004f76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f7a:	eb07 0906 	add.w	r9, r7, r6
 8004f7e:	d110      	bne.n	8004fa2 <__cvt+0x92>
 8004f80:	783b      	ldrb	r3, [r7, #0]
 8004f82:	2b30      	cmp	r3, #48	; 0x30
 8004f84:	d10a      	bne.n	8004f9c <__cvt+0x8c>
 8004f86:	2200      	movs	r2, #0
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	f7fb fdbb 	bl	8000b08 <__aeabi_dcmpeq>
 8004f92:	b918      	cbnz	r0, 8004f9c <__cvt+0x8c>
 8004f94:	f1c6 0601 	rsb	r6, r6, #1
 8004f98:	f8ca 6000 	str.w	r6, [sl]
 8004f9c:	f8da 3000 	ldr.w	r3, [sl]
 8004fa0:	4499      	add	r9, r3
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb fdad 	bl	8000b08 <__aeabi_dcmpeq>
 8004fae:	b108      	cbz	r0, 8004fb4 <__cvt+0xa4>
 8004fb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fb4:	2230      	movs	r2, #48	; 0x30
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	454b      	cmp	r3, r9
 8004fba:	d307      	bcc.n	8004fcc <__cvt+0xbc>
 8004fbc:	9b03      	ldr	r3, [sp, #12]
 8004fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fc0:	1bdb      	subs	r3, r3, r7
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	b004      	add	sp, #16
 8004fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fcc:	1c59      	adds	r1, r3, #1
 8004fce:	9103      	str	r1, [sp, #12]
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e7f0      	b.n	8004fb6 <__cvt+0xa6>

08004fd4 <__exponent>:
 8004fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2900      	cmp	r1, #0
 8004fda:	bfb8      	it	lt
 8004fdc:	4249      	neglt	r1, r1
 8004fde:	f803 2b02 	strb.w	r2, [r3], #2
 8004fe2:	bfb4      	ite	lt
 8004fe4:	222d      	movlt	r2, #45	; 0x2d
 8004fe6:	222b      	movge	r2, #43	; 0x2b
 8004fe8:	2909      	cmp	r1, #9
 8004fea:	7042      	strb	r2, [r0, #1]
 8004fec:	dd2a      	ble.n	8005044 <__exponent+0x70>
 8004fee:	f10d 0407 	add.w	r4, sp, #7
 8004ff2:	46a4      	mov	ip, r4
 8004ff4:	270a      	movs	r7, #10
 8004ff6:	46a6      	mov	lr, r4
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ffe:	fb07 1516 	mls	r5, r7, r6, r1
 8005002:	3530      	adds	r5, #48	; 0x30
 8005004:	2a63      	cmp	r2, #99	; 0x63
 8005006:	f104 34ff 	add.w	r4, r4, #4294967295
 800500a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800500e:	4631      	mov	r1, r6
 8005010:	dcf1      	bgt.n	8004ff6 <__exponent+0x22>
 8005012:	3130      	adds	r1, #48	; 0x30
 8005014:	f1ae 0502 	sub.w	r5, lr, #2
 8005018:	f804 1c01 	strb.w	r1, [r4, #-1]
 800501c:	1c44      	adds	r4, r0, #1
 800501e:	4629      	mov	r1, r5
 8005020:	4561      	cmp	r1, ip
 8005022:	d30a      	bcc.n	800503a <__exponent+0x66>
 8005024:	f10d 0209 	add.w	r2, sp, #9
 8005028:	eba2 020e 	sub.w	r2, r2, lr
 800502c:	4565      	cmp	r5, ip
 800502e:	bf88      	it	hi
 8005030:	2200      	movhi	r2, #0
 8005032:	4413      	add	r3, r2
 8005034:	1a18      	subs	r0, r3, r0
 8005036:	b003      	add	sp, #12
 8005038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800503e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005042:	e7ed      	b.n	8005020 <__exponent+0x4c>
 8005044:	2330      	movs	r3, #48	; 0x30
 8005046:	3130      	adds	r1, #48	; 0x30
 8005048:	7083      	strb	r3, [r0, #2]
 800504a:	70c1      	strb	r1, [r0, #3]
 800504c:	1d03      	adds	r3, r0, #4
 800504e:	e7f1      	b.n	8005034 <__exponent+0x60>

08005050 <_printf_float>:
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	ed2d 8b02 	vpush	{d8}
 8005058:	b08d      	sub	sp, #52	; 0x34
 800505a:	460c      	mov	r4, r1
 800505c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005060:	4616      	mov	r6, r2
 8005062:	461f      	mov	r7, r3
 8005064:	4605      	mov	r5, r0
 8005066:	f001 fb47 	bl	80066f8 <_localeconv_r>
 800506a:	f8d0 a000 	ldr.w	sl, [r0]
 800506e:	4650      	mov	r0, sl
 8005070:	f7fb f8ce 	bl	8000210 <strlen>
 8005074:	2300      	movs	r3, #0
 8005076:	930a      	str	r3, [sp, #40]	; 0x28
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	9305      	str	r3, [sp, #20]
 800507c:	f8d8 3000 	ldr.w	r3, [r8]
 8005080:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005084:	3307      	adds	r3, #7
 8005086:	f023 0307 	bic.w	r3, r3, #7
 800508a:	f103 0208 	add.w	r2, r3, #8
 800508e:	f8c8 2000 	str.w	r2, [r8]
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800509a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800509e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050a2:	9307      	str	r3, [sp, #28]
 80050a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80050a8:	ee08 0a10 	vmov	s16, r0
 80050ac:	4b9f      	ldr	r3, [pc, #636]	; (800532c <_printf_float+0x2dc>)
 80050ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050b2:	f04f 32ff 	mov.w	r2, #4294967295
 80050b6:	f7fb fd59 	bl	8000b6c <__aeabi_dcmpun>
 80050ba:	bb88      	cbnz	r0, 8005120 <_printf_float+0xd0>
 80050bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050c0:	4b9a      	ldr	r3, [pc, #616]	; (800532c <_printf_float+0x2dc>)
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295
 80050c6:	f7fb fd33 	bl	8000b30 <__aeabi_dcmple>
 80050ca:	bb48      	cbnz	r0, 8005120 <_printf_float+0xd0>
 80050cc:	2200      	movs	r2, #0
 80050ce:	2300      	movs	r3, #0
 80050d0:	4640      	mov	r0, r8
 80050d2:	4649      	mov	r1, r9
 80050d4:	f7fb fd22 	bl	8000b1c <__aeabi_dcmplt>
 80050d8:	b110      	cbz	r0, 80050e0 <_printf_float+0x90>
 80050da:	232d      	movs	r3, #45	; 0x2d
 80050dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050e0:	4b93      	ldr	r3, [pc, #588]	; (8005330 <_printf_float+0x2e0>)
 80050e2:	4894      	ldr	r0, [pc, #592]	; (8005334 <_printf_float+0x2e4>)
 80050e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050e8:	bf94      	ite	ls
 80050ea:	4698      	movls	r8, r3
 80050ec:	4680      	movhi	r8, r0
 80050ee:	2303      	movs	r3, #3
 80050f0:	6123      	str	r3, [r4, #16]
 80050f2:	9b05      	ldr	r3, [sp, #20]
 80050f4:	f023 0204 	bic.w	r2, r3, #4
 80050f8:	6022      	str	r2, [r4, #0]
 80050fa:	f04f 0900 	mov.w	r9, #0
 80050fe:	9700      	str	r7, [sp, #0]
 8005100:	4633      	mov	r3, r6
 8005102:	aa0b      	add	r2, sp, #44	; 0x2c
 8005104:	4621      	mov	r1, r4
 8005106:	4628      	mov	r0, r5
 8005108:	f000 f9d8 	bl	80054bc <_printf_common>
 800510c:	3001      	adds	r0, #1
 800510e:	f040 8090 	bne.w	8005232 <_printf_float+0x1e2>
 8005112:	f04f 30ff 	mov.w	r0, #4294967295
 8005116:	b00d      	add	sp, #52	; 0x34
 8005118:	ecbd 8b02 	vpop	{d8}
 800511c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005120:	4642      	mov	r2, r8
 8005122:	464b      	mov	r3, r9
 8005124:	4640      	mov	r0, r8
 8005126:	4649      	mov	r1, r9
 8005128:	f7fb fd20 	bl	8000b6c <__aeabi_dcmpun>
 800512c:	b140      	cbz	r0, 8005140 <_printf_float+0xf0>
 800512e:	464b      	mov	r3, r9
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfbc      	itt	lt
 8005134:	232d      	movlt	r3, #45	; 0x2d
 8005136:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800513a:	487f      	ldr	r0, [pc, #508]	; (8005338 <_printf_float+0x2e8>)
 800513c:	4b7f      	ldr	r3, [pc, #508]	; (800533c <_printf_float+0x2ec>)
 800513e:	e7d1      	b.n	80050e4 <_printf_float+0x94>
 8005140:	6863      	ldr	r3, [r4, #4]
 8005142:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005146:	9206      	str	r2, [sp, #24]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	d13f      	bne.n	80051cc <_printf_float+0x17c>
 800514c:	2306      	movs	r3, #6
 800514e:	6063      	str	r3, [r4, #4]
 8005150:	9b05      	ldr	r3, [sp, #20]
 8005152:	6861      	ldr	r1, [r4, #4]
 8005154:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005158:	2300      	movs	r3, #0
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	ab0a      	add	r3, sp, #40	; 0x28
 800515e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005162:	ab09      	add	r3, sp, #36	; 0x24
 8005164:	ec49 8b10 	vmov	d0, r8, r9
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	6022      	str	r2, [r4, #0]
 800516c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005170:	4628      	mov	r0, r5
 8005172:	f7ff fecd 	bl	8004f10 <__cvt>
 8005176:	9b06      	ldr	r3, [sp, #24]
 8005178:	9909      	ldr	r1, [sp, #36]	; 0x24
 800517a:	2b47      	cmp	r3, #71	; 0x47
 800517c:	4680      	mov	r8, r0
 800517e:	d108      	bne.n	8005192 <_printf_float+0x142>
 8005180:	1cc8      	adds	r0, r1, #3
 8005182:	db02      	blt.n	800518a <_printf_float+0x13a>
 8005184:	6863      	ldr	r3, [r4, #4]
 8005186:	4299      	cmp	r1, r3
 8005188:	dd41      	ble.n	800520e <_printf_float+0x1be>
 800518a:	f1ab 0b02 	sub.w	fp, fp, #2
 800518e:	fa5f fb8b 	uxtb.w	fp, fp
 8005192:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005196:	d820      	bhi.n	80051da <_printf_float+0x18a>
 8005198:	3901      	subs	r1, #1
 800519a:	465a      	mov	r2, fp
 800519c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051a0:	9109      	str	r1, [sp, #36]	; 0x24
 80051a2:	f7ff ff17 	bl	8004fd4 <__exponent>
 80051a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051a8:	1813      	adds	r3, r2, r0
 80051aa:	2a01      	cmp	r2, #1
 80051ac:	4681      	mov	r9, r0
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	dc02      	bgt.n	80051b8 <_printf_float+0x168>
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	07d2      	lsls	r2, r2, #31
 80051b6:	d501      	bpl.n	80051bc <_printf_float+0x16c>
 80051b8:	3301      	adds	r3, #1
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d09c      	beq.n	80050fe <_printf_float+0xae>
 80051c4:	232d      	movs	r3, #45	; 0x2d
 80051c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ca:	e798      	b.n	80050fe <_printf_float+0xae>
 80051cc:	9a06      	ldr	r2, [sp, #24]
 80051ce:	2a47      	cmp	r2, #71	; 0x47
 80051d0:	d1be      	bne.n	8005150 <_printf_float+0x100>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1bc      	bne.n	8005150 <_printf_float+0x100>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e7b9      	b.n	800514e <_printf_float+0xfe>
 80051da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80051de:	d118      	bne.n	8005212 <_printf_float+0x1c2>
 80051e0:	2900      	cmp	r1, #0
 80051e2:	6863      	ldr	r3, [r4, #4]
 80051e4:	dd0b      	ble.n	80051fe <_printf_float+0x1ae>
 80051e6:	6121      	str	r1, [r4, #16]
 80051e8:	b913      	cbnz	r3, 80051f0 <_printf_float+0x1a0>
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	07d0      	lsls	r0, r2, #31
 80051ee:	d502      	bpl.n	80051f6 <_printf_float+0x1a6>
 80051f0:	3301      	adds	r3, #1
 80051f2:	440b      	add	r3, r1
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80051f8:	f04f 0900 	mov.w	r9, #0
 80051fc:	e7de      	b.n	80051bc <_printf_float+0x16c>
 80051fe:	b913      	cbnz	r3, 8005206 <_printf_float+0x1b6>
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	07d2      	lsls	r2, r2, #31
 8005204:	d501      	bpl.n	800520a <_printf_float+0x1ba>
 8005206:	3302      	adds	r3, #2
 8005208:	e7f4      	b.n	80051f4 <_printf_float+0x1a4>
 800520a:	2301      	movs	r3, #1
 800520c:	e7f2      	b.n	80051f4 <_printf_float+0x1a4>
 800520e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005214:	4299      	cmp	r1, r3
 8005216:	db05      	blt.n	8005224 <_printf_float+0x1d4>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	6121      	str	r1, [r4, #16]
 800521c:	07d8      	lsls	r0, r3, #31
 800521e:	d5ea      	bpl.n	80051f6 <_printf_float+0x1a6>
 8005220:	1c4b      	adds	r3, r1, #1
 8005222:	e7e7      	b.n	80051f4 <_printf_float+0x1a4>
 8005224:	2900      	cmp	r1, #0
 8005226:	bfd4      	ite	le
 8005228:	f1c1 0202 	rsble	r2, r1, #2
 800522c:	2201      	movgt	r2, #1
 800522e:	4413      	add	r3, r2
 8005230:	e7e0      	b.n	80051f4 <_printf_float+0x1a4>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	055a      	lsls	r2, r3, #21
 8005236:	d407      	bmi.n	8005248 <_printf_float+0x1f8>
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	4642      	mov	r2, r8
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	d12c      	bne.n	80052a0 <_printf_float+0x250>
 8005246:	e764      	b.n	8005112 <_printf_float+0xc2>
 8005248:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800524c:	f240 80e0 	bls.w	8005410 <_printf_float+0x3c0>
 8005250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005254:	2200      	movs	r2, #0
 8005256:	2300      	movs	r3, #0
 8005258:	f7fb fc56 	bl	8000b08 <__aeabi_dcmpeq>
 800525c:	2800      	cmp	r0, #0
 800525e:	d034      	beq.n	80052ca <_printf_float+0x27a>
 8005260:	4a37      	ldr	r2, [pc, #220]	; (8005340 <_printf_float+0x2f0>)
 8005262:	2301      	movs	r3, #1
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f af51 	beq.w	8005112 <_printf_float+0xc2>
 8005270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005274:	429a      	cmp	r2, r3
 8005276:	db02      	blt.n	800527e <_printf_float+0x22e>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	07d8      	lsls	r0, r3, #31
 800527c:	d510      	bpl.n	80052a0 <_printf_float+0x250>
 800527e:	ee18 3a10 	vmov	r3, s16
 8005282:	4652      	mov	r2, sl
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f af41 	beq.w	8005112 <_printf_float+0xc2>
 8005290:	f04f 0800 	mov.w	r8, #0
 8005294:	f104 091a 	add.w	r9, r4, #26
 8005298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800529a:	3b01      	subs	r3, #1
 800529c:	4543      	cmp	r3, r8
 800529e:	dc09      	bgt.n	80052b4 <_printf_float+0x264>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	079b      	lsls	r3, r3, #30
 80052a4:	f100 8105 	bmi.w	80054b2 <_printf_float+0x462>
 80052a8:	68e0      	ldr	r0, [r4, #12]
 80052aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ac:	4298      	cmp	r0, r3
 80052ae:	bfb8      	it	lt
 80052b0:	4618      	movlt	r0, r3
 80052b2:	e730      	b.n	8005116 <_printf_float+0xc6>
 80052b4:	2301      	movs	r3, #1
 80052b6:	464a      	mov	r2, r9
 80052b8:	4631      	mov	r1, r6
 80052ba:	4628      	mov	r0, r5
 80052bc:	47b8      	blx	r7
 80052be:	3001      	adds	r0, #1
 80052c0:	f43f af27 	beq.w	8005112 <_printf_float+0xc2>
 80052c4:	f108 0801 	add.w	r8, r8, #1
 80052c8:	e7e6      	b.n	8005298 <_printf_float+0x248>
 80052ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dc39      	bgt.n	8005344 <_printf_float+0x2f4>
 80052d0:	4a1b      	ldr	r2, [pc, #108]	; (8005340 <_printf_float+0x2f0>)
 80052d2:	2301      	movs	r3, #1
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b8      	blx	r7
 80052da:	3001      	adds	r0, #1
 80052dc:	f43f af19 	beq.w	8005112 <_printf_float+0xc2>
 80052e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e4:	4313      	orrs	r3, r2
 80052e6:	d102      	bne.n	80052ee <_printf_float+0x29e>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	07d9      	lsls	r1, r3, #31
 80052ec:	d5d8      	bpl.n	80052a0 <_printf_float+0x250>
 80052ee:	ee18 3a10 	vmov	r3, s16
 80052f2:	4652      	mov	r2, sl
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f af09 	beq.w	8005112 <_printf_float+0xc2>
 8005300:	f04f 0900 	mov.w	r9, #0
 8005304:	f104 0a1a 	add.w	sl, r4, #26
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	425b      	negs	r3, r3
 800530c:	454b      	cmp	r3, r9
 800530e:	dc01      	bgt.n	8005314 <_printf_float+0x2c4>
 8005310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005312:	e792      	b.n	800523a <_printf_float+0x1ea>
 8005314:	2301      	movs	r3, #1
 8005316:	4652      	mov	r2, sl
 8005318:	4631      	mov	r1, r6
 800531a:	4628      	mov	r0, r5
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	f43f aef7 	beq.w	8005112 <_printf_float+0xc2>
 8005324:	f109 0901 	add.w	r9, r9, #1
 8005328:	e7ee      	b.n	8005308 <_printf_float+0x2b8>
 800532a:	bf00      	nop
 800532c:	7fefffff 	.word	0x7fefffff
 8005330:	080079e4 	.word	0x080079e4
 8005334:	080079e8 	.word	0x080079e8
 8005338:	080079f0 	.word	0x080079f0
 800533c:	080079ec 	.word	0x080079ec
 8005340:	080079f4 	.word	0x080079f4
 8005344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005348:	429a      	cmp	r2, r3
 800534a:	bfa8      	it	ge
 800534c:	461a      	movge	r2, r3
 800534e:	2a00      	cmp	r2, #0
 8005350:	4691      	mov	r9, r2
 8005352:	dc37      	bgt.n	80053c4 <_printf_float+0x374>
 8005354:	f04f 0b00 	mov.w	fp, #0
 8005358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800535c:	f104 021a 	add.w	r2, r4, #26
 8005360:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005362:	9305      	str	r3, [sp, #20]
 8005364:	eba3 0309 	sub.w	r3, r3, r9
 8005368:	455b      	cmp	r3, fp
 800536a:	dc33      	bgt.n	80053d4 <_printf_float+0x384>
 800536c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005370:	429a      	cmp	r2, r3
 8005372:	db3b      	blt.n	80053ec <_printf_float+0x39c>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	07da      	lsls	r2, r3, #31
 8005378:	d438      	bmi.n	80053ec <_printf_float+0x39c>
 800537a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537c:	9a05      	ldr	r2, [sp, #20]
 800537e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005380:	1a9a      	subs	r2, r3, r2
 8005382:	eba3 0901 	sub.w	r9, r3, r1
 8005386:	4591      	cmp	r9, r2
 8005388:	bfa8      	it	ge
 800538a:	4691      	movge	r9, r2
 800538c:	f1b9 0f00 	cmp.w	r9, #0
 8005390:	dc35      	bgt.n	80053fe <_printf_float+0x3ae>
 8005392:	f04f 0800 	mov.w	r8, #0
 8005396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800539a:	f104 0a1a 	add.w	sl, r4, #26
 800539e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	eba3 0309 	sub.w	r3, r3, r9
 80053a8:	4543      	cmp	r3, r8
 80053aa:	f77f af79 	ble.w	80052a0 <_printf_float+0x250>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4652      	mov	r2, sl
 80053b2:	4631      	mov	r1, r6
 80053b4:	4628      	mov	r0, r5
 80053b6:	47b8      	blx	r7
 80053b8:	3001      	adds	r0, #1
 80053ba:	f43f aeaa 	beq.w	8005112 <_printf_float+0xc2>
 80053be:	f108 0801 	add.w	r8, r8, #1
 80053c2:	e7ec      	b.n	800539e <_printf_float+0x34e>
 80053c4:	4613      	mov	r3, r2
 80053c6:	4631      	mov	r1, r6
 80053c8:	4642      	mov	r2, r8
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	d1c0      	bne.n	8005354 <_printf_float+0x304>
 80053d2:	e69e      	b.n	8005112 <_printf_float+0xc2>
 80053d4:	2301      	movs	r3, #1
 80053d6:	4631      	mov	r1, r6
 80053d8:	4628      	mov	r0, r5
 80053da:	9205      	str	r2, [sp, #20]
 80053dc:	47b8      	blx	r7
 80053de:	3001      	adds	r0, #1
 80053e0:	f43f ae97 	beq.w	8005112 <_printf_float+0xc2>
 80053e4:	9a05      	ldr	r2, [sp, #20]
 80053e6:	f10b 0b01 	add.w	fp, fp, #1
 80053ea:	e7b9      	b.n	8005360 <_printf_float+0x310>
 80053ec:	ee18 3a10 	vmov	r3, s16
 80053f0:	4652      	mov	r2, sl
 80053f2:	4631      	mov	r1, r6
 80053f4:	4628      	mov	r0, r5
 80053f6:	47b8      	blx	r7
 80053f8:	3001      	adds	r0, #1
 80053fa:	d1be      	bne.n	800537a <_printf_float+0x32a>
 80053fc:	e689      	b.n	8005112 <_printf_float+0xc2>
 80053fe:	9a05      	ldr	r2, [sp, #20]
 8005400:	464b      	mov	r3, r9
 8005402:	4442      	add	r2, r8
 8005404:	4631      	mov	r1, r6
 8005406:	4628      	mov	r0, r5
 8005408:	47b8      	blx	r7
 800540a:	3001      	adds	r0, #1
 800540c:	d1c1      	bne.n	8005392 <_printf_float+0x342>
 800540e:	e680      	b.n	8005112 <_printf_float+0xc2>
 8005410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005412:	2a01      	cmp	r2, #1
 8005414:	dc01      	bgt.n	800541a <_printf_float+0x3ca>
 8005416:	07db      	lsls	r3, r3, #31
 8005418:	d538      	bpl.n	800548c <_printf_float+0x43c>
 800541a:	2301      	movs	r3, #1
 800541c:	4642      	mov	r2, r8
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae74 	beq.w	8005112 <_printf_float+0xc2>
 800542a:	ee18 3a10 	vmov	r3, s16
 800542e:	4652      	mov	r2, sl
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	f43f ae6b 	beq.w	8005112 <_printf_float+0xc2>
 800543c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005440:	2200      	movs	r2, #0
 8005442:	2300      	movs	r3, #0
 8005444:	f7fb fb60 	bl	8000b08 <__aeabi_dcmpeq>
 8005448:	b9d8      	cbnz	r0, 8005482 <_printf_float+0x432>
 800544a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800544c:	f108 0201 	add.w	r2, r8, #1
 8005450:	3b01      	subs	r3, #1
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	d10e      	bne.n	800547a <_printf_float+0x42a>
 800545c:	e659      	b.n	8005112 <_printf_float+0xc2>
 800545e:	2301      	movs	r3, #1
 8005460:	4652      	mov	r2, sl
 8005462:	4631      	mov	r1, r6
 8005464:	4628      	mov	r0, r5
 8005466:	47b8      	blx	r7
 8005468:	3001      	adds	r0, #1
 800546a:	f43f ae52 	beq.w	8005112 <_printf_float+0xc2>
 800546e:	f108 0801 	add.w	r8, r8, #1
 8005472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005474:	3b01      	subs	r3, #1
 8005476:	4543      	cmp	r3, r8
 8005478:	dcf1      	bgt.n	800545e <_printf_float+0x40e>
 800547a:	464b      	mov	r3, r9
 800547c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005480:	e6dc      	b.n	800523c <_printf_float+0x1ec>
 8005482:	f04f 0800 	mov.w	r8, #0
 8005486:	f104 0a1a 	add.w	sl, r4, #26
 800548a:	e7f2      	b.n	8005472 <_printf_float+0x422>
 800548c:	2301      	movs	r3, #1
 800548e:	4642      	mov	r2, r8
 8005490:	e7df      	b.n	8005452 <_printf_float+0x402>
 8005492:	2301      	movs	r3, #1
 8005494:	464a      	mov	r2, r9
 8005496:	4631      	mov	r1, r6
 8005498:	4628      	mov	r0, r5
 800549a:	47b8      	blx	r7
 800549c:	3001      	adds	r0, #1
 800549e:	f43f ae38 	beq.w	8005112 <_printf_float+0xc2>
 80054a2:	f108 0801 	add.w	r8, r8, #1
 80054a6:	68e3      	ldr	r3, [r4, #12]
 80054a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054aa:	1a5b      	subs	r3, r3, r1
 80054ac:	4543      	cmp	r3, r8
 80054ae:	dcf0      	bgt.n	8005492 <_printf_float+0x442>
 80054b0:	e6fa      	b.n	80052a8 <_printf_float+0x258>
 80054b2:	f04f 0800 	mov.w	r8, #0
 80054b6:	f104 0919 	add.w	r9, r4, #25
 80054ba:	e7f4      	b.n	80054a6 <_printf_float+0x456>

080054bc <_printf_common>:
 80054bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c0:	4616      	mov	r6, r2
 80054c2:	4699      	mov	r9, r3
 80054c4:	688a      	ldr	r2, [r1, #8]
 80054c6:	690b      	ldr	r3, [r1, #16]
 80054c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054cc:	4293      	cmp	r3, r2
 80054ce:	bfb8      	it	lt
 80054d0:	4613      	movlt	r3, r2
 80054d2:	6033      	str	r3, [r6, #0]
 80054d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054d8:	4607      	mov	r7, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	b10a      	cbz	r2, 80054e2 <_printf_common+0x26>
 80054de:	3301      	adds	r3, #1
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	0699      	lsls	r1, r3, #26
 80054e6:	bf42      	ittt	mi
 80054e8:	6833      	ldrmi	r3, [r6, #0]
 80054ea:	3302      	addmi	r3, #2
 80054ec:	6033      	strmi	r3, [r6, #0]
 80054ee:	6825      	ldr	r5, [r4, #0]
 80054f0:	f015 0506 	ands.w	r5, r5, #6
 80054f4:	d106      	bne.n	8005504 <_printf_common+0x48>
 80054f6:	f104 0a19 	add.w	sl, r4, #25
 80054fa:	68e3      	ldr	r3, [r4, #12]
 80054fc:	6832      	ldr	r2, [r6, #0]
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	42ab      	cmp	r3, r5
 8005502:	dc26      	bgt.n	8005552 <_printf_common+0x96>
 8005504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005508:	1e13      	subs	r3, r2, #0
 800550a:	6822      	ldr	r2, [r4, #0]
 800550c:	bf18      	it	ne
 800550e:	2301      	movne	r3, #1
 8005510:	0692      	lsls	r2, r2, #26
 8005512:	d42b      	bmi.n	800556c <_printf_common+0xb0>
 8005514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005518:	4649      	mov	r1, r9
 800551a:	4638      	mov	r0, r7
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d01e      	beq.n	8005560 <_printf_common+0xa4>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	68e5      	ldr	r5, [r4, #12]
 8005526:	6832      	ldr	r2, [r6, #0]
 8005528:	f003 0306 	and.w	r3, r3, #6
 800552c:	2b04      	cmp	r3, #4
 800552e:	bf08      	it	eq
 8005530:	1aad      	subeq	r5, r5, r2
 8005532:	68a3      	ldr	r3, [r4, #8]
 8005534:	6922      	ldr	r2, [r4, #16]
 8005536:	bf0c      	ite	eq
 8005538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800553c:	2500      	movne	r5, #0
 800553e:	4293      	cmp	r3, r2
 8005540:	bfc4      	itt	gt
 8005542:	1a9b      	subgt	r3, r3, r2
 8005544:	18ed      	addgt	r5, r5, r3
 8005546:	2600      	movs	r6, #0
 8005548:	341a      	adds	r4, #26
 800554a:	42b5      	cmp	r5, r6
 800554c:	d11a      	bne.n	8005584 <_printf_common+0xc8>
 800554e:	2000      	movs	r0, #0
 8005550:	e008      	b.n	8005564 <_printf_common+0xa8>
 8005552:	2301      	movs	r3, #1
 8005554:	4652      	mov	r2, sl
 8005556:	4649      	mov	r1, r9
 8005558:	4638      	mov	r0, r7
 800555a:	47c0      	blx	r8
 800555c:	3001      	adds	r0, #1
 800555e:	d103      	bne.n	8005568 <_printf_common+0xac>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005568:	3501      	adds	r5, #1
 800556a:	e7c6      	b.n	80054fa <_printf_common+0x3e>
 800556c:	18e1      	adds	r1, r4, r3
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	2030      	movs	r0, #48	; 0x30
 8005572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005576:	4422      	add	r2, r4
 8005578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800557c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005580:	3302      	adds	r3, #2
 8005582:	e7c7      	b.n	8005514 <_printf_common+0x58>
 8005584:	2301      	movs	r3, #1
 8005586:	4622      	mov	r2, r4
 8005588:	4649      	mov	r1, r9
 800558a:	4638      	mov	r0, r7
 800558c:	47c0      	blx	r8
 800558e:	3001      	adds	r0, #1
 8005590:	d0e6      	beq.n	8005560 <_printf_common+0xa4>
 8005592:	3601      	adds	r6, #1
 8005594:	e7d9      	b.n	800554a <_printf_common+0x8e>
	...

08005598 <_printf_i>:
 8005598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	7e0f      	ldrb	r7, [r1, #24]
 800559e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80055a0:	2f78      	cmp	r7, #120	; 0x78
 80055a2:	4691      	mov	r9, r2
 80055a4:	4680      	mov	r8, r0
 80055a6:	460c      	mov	r4, r1
 80055a8:	469a      	mov	sl, r3
 80055aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80055ae:	d807      	bhi.n	80055c0 <_printf_i+0x28>
 80055b0:	2f62      	cmp	r7, #98	; 0x62
 80055b2:	d80a      	bhi.n	80055ca <_printf_i+0x32>
 80055b4:	2f00      	cmp	r7, #0
 80055b6:	f000 80d8 	beq.w	800576a <_printf_i+0x1d2>
 80055ba:	2f58      	cmp	r7, #88	; 0x58
 80055bc:	f000 80a3 	beq.w	8005706 <_printf_i+0x16e>
 80055c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055c8:	e03a      	b.n	8005640 <_printf_i+0xa8>
 80055ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ce:	2b15      	cmp	r3, #21
 80055d0:	d8f6      	bhi.n	80055c0 <_printf_i+0x28>
 80055d2:	a101      	add	r1, pc, #4	; (adr r1, 80055d8 <_printf_i+0x40>)
 80055d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055d8:	08005631 	.word	0x08005631
 80055dc:	08005645 	.word	0x08005645
 80055e0:	080055c1 	.word	0x080055c1
 80055e4:	080055c1 	.word	0x080055c1
 80055e8:	080055c1 	.word	0x080055c1
 80055ec:	080055c1 	.word	0x080055c1
 80055f0:	08005645 	.word	0x08005645
 80055f4:	080055c1 	.word	0x080055c1
 80055f8:	080055c1 	.word	0x080055c1
 80055fc:	080055c1 	.word	0x080055c1
 8005600:	080055c1 	.word	0x080055c1
 8005604:	08005751 	.word	0x08005751
 8005608:	08005675 	.word	0x08005675
 800560c:	08005733 	.word	0x08005733
 8005610:	080055c1 	.word	0x080055c1
 8005614:	080055c1 	.word	0x080055c1
 8005618:	08005773 	.word	0x08005773
 800561c:	080055c1 	.word	0x080055c1
 8005620:	08005675 	.word	0x08005675
 8005624:	080055c1 	.word	0x080055c1
 8005628:	080055c1 	.word	0x080055c1
 800562c:	0800573b 	.word	0x0800573b
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	602a      	str	r2, [r5, #0]
 8005638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005640:	2301      	movs	r3, #1
 8005642:	e0a3      	b.n	800578c <_printf_i+0x1f4>
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	6829      	ldr	r1, [r5, #0]
 8005648:	0606      	lsls	r6, r0, #24
 800564a:	f101 0304 	add.w	r3, r1, #4
 800564e:	d50a      	bpl.n	8005666 <_printf_i+0xce>
 8005650:	680e      	ldr	r6, [r1, #0]
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	2e00      	cmp	r6, #0
 8005656:	da03      	bge.n	8005660 <_printf_i+0xc8>
 8005658:	232d      	movs	r3, #45	; 0x2d
 800565a:	4276      	negs	r6, r6
 800565c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005660:	485e      	ldr	r0, [pc, #376]	; (80057dc <_printf_i+0x244>)
 8005662:	230a      	movs	r3, #10
 8005664:	e019      	b.n	800569a <_printf_i+0x102>
 8005666:	680e      	ldr	r6, [r1, #0]
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800566e:	bf18      	it	ne
 8005670:	b236      	sxthne	r6, r6
 8005672:	e7ef      	b.n	8005654 <_printf_i+0xbc>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	1d19      	adds	r1, r3, #4
 800567a:	6029      	str	r1, [r5, #0]
 800567c:	0601      	lsls	r1, r0, #24
 800567e:	d501      	bpl.n	8005684 <_printf_i+0xec>
 8005680:	681e      	ldr	r6, [r3, #0]
 8005682:	e002      	b.n	800568a <_printf_i+0xf2>
 8005684:	0646      	lsls	r6, r0, #25
 8005686:	d5fb      	bpl.n	8005680 <_printf_i+0xe8>
 8005688:	881e      	ldrh	r6, [r3, #0]
 800568a:	4854      	ldr	r0, [pc, #336]	; (80057dc <_printf_i+0x244>)
 800568c:	2f6f      	cmp	r7, #111	; 0x6f
 800568e:	bf0c      	ite	eq
 8005690:	2308      	moveq	r3, #8
 8005692:	230a      	movne	r3, #10
 8005694:	2100      	movs	r1, #0
 8005696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800569a:	6865      	ldr	r5, [r4, #4]
 800569c:	60a5      	str	r5, [r4, #8]
 800569e:	2d00      	cmp	r5, #0
 80056a0:	bfa2      	ittt	ge
 80056a2:	6821      	ldrge	r1, [r4, #0]
 80056a4:	f021 0104 	bicge.w	r1, r1, #4
 80056a8:	6021      	strge	r1, [r4, #0]
 80056aa:	b90e      	cbnz	r6, 80056b0 <_printf_i+0x118>
 80056ac:	2d00      	cmp	r5, #0
 80056ae:	d04d      	beq.n	800574c <_printf_i+0x1b4>
 80056b0:	4615      	mov	r5, r2
 80056b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80056b6:	fb03 6711 	mls	r7, r3, r1, r6
 80056ba:	5dc7      	ldrb	r7, [r0, r7]
 80056bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80056c0:	4637      	mov	r7, r6
 80056c2:	42bb      	cmp	r3, r7
 80056c4:	460e      	mov	r6, r1
 80056c6:	d9f4      	bls.n	80056b2 <_printf_i+0x11a>
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d10b      	bne.n	80056e4 <_printf_i+0x14c>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	07de      	lsls	r6, r3, #31
 80056d0:	d508      	bpl.n	80056e4 <_printf_i+0x14c>
 80056d2:	6923      	ldr	r3, [r4, #16]
 80056d4:	6861      	ldr	r1, [r4, #4]
 80056d6:	4299      	cmp	r1, r3
 80056d8:	bfde      	ittt	le
 80056da:	2330      	movle	r3, #48	; 0x30
 80056dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80056e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80056e4:	1b52      	subs	r2, r2, r5
 80056e6:	6122      	str	r2, [r4, #16]
 80056e8:	f8cd a000 	str.w	sl, [sp]
 80056ec:	464b      	mov	r3, r9
 80056ee:	aa03      	add	r2, sp, #12
 80056f0:	4621      	mov	r1, r4
 80056f2:	4640      	mov	r0, r8
 80056f4:	f7ff fee2 	bl	80054bc <_printf_common>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d14c      	bne.n	8005796 <_printf_i+0x1fe>
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	b004      	add	sp, #16
 8005702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005706:	4835      	ldr	r0, [pc, #212]	; (80057dc <_printf_i+0x244>)
 8005708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800570c:	6829      	ldr	r1, [r5, #0]
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f851 6b04 	ldr.w	r6, [r1], #4
 8005714:	6029      	str	r1, [r5, #0]
 8005716:	061d      	lsls	r5, r3, #24
 8005718:	d514      	bpl.n	8005744 <_printf_i+0x1ac>
 800571a:	07df      	lsls	r7, r3, #31
 800571c:	bf44      	itt	mi
 800571e:	f043 0320 	orrmi.w	r3, r3, #32
 8005722:	6023      	strmi	r3, [r4, #0]
 8005724:	b91e      	cbnz	r6, 800572e <_printf_i+0x196>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f023 0320 	bic.w	r3, r3, #32
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	2310      	movs	r3, #16
 8005730:	e7b0      	b.n	8005694 <_printf_i+0xfc>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f043 0320 	orr.w	r3, r3, #32
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	2378      	movs	r3, #120	; 0x78
 800573c:	4828      	ldr	r0, [pc, #160]	; (80057e0 <_printf_i+0x248>)
 800573e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005742:	e7e3      	b.n	800570c <_printf_i+0x174>
 8005744:	0659      	lsls	r1, r3, #25
 8005746:	bf48      	it	mi
 8005748:	b2b6      	uxthmi	r6, r6
 800574a:	e7e6      	b.n	800571a <_printf_i+0x182>
 800574c:	4615      	mov	r5, r2
 800574e:	e7bb      	b.n	80056c8 <_printf_i+0x130>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	6826      	ldr	r6, [r4, #0]
 8005754:	6961      	ldr	r1, [r4, #20]
 8005756:	1d18      	adds	r0, r3, #4
 8005758:	6028      	str	r0, [r5, #0]
 800575a:	0635      	lsls	r5, r6, #24
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	d501      	bpl.n	8005764 <_printf_i+0x1cc>
 8005760:	6019      	str	r1, [r3, #0]
 8005762:	e002      	b.n	800576a <_printf_i+0x1d2>
 8005764:	0670      	lsls	r0, r6, #25
 8005766:	d5fb      	bpl.n	8005760 <_printf_i+0x1c8>
 8005768:	8019      	strh	r1, [r3, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	6123      	str	r3, [r4, #16]
 800576e:	4615      	mov	r5, r2
 8005770:	e7ba      	b.n	80056e8 <_printf_i+0x150>
 8005772:	682b      	ldr	r3, [r5, #0]
 8005774:	1d1a      	adds	r2, r3, #4
 8005776:	602a      	str	r2, [r5, #0]
 8005778:	681d      	ldr	r5, [r3, #0]
 800577a:	6862      	ldr	r2, [r4, #4]
 800577c:	2100      	movs	r1, #0
 800577e:	4628      	mov	r0, r5
 8005780:	f7fa fd4e 	bl	8000220 <memchr>
 8005784:	b108      	cbz	r0, 800578a <_printf_i+0x1f2>
 8005786:	1b40      	subs	r0, r0, r5
 8005788:	6060      	str	r0, [r4, #4]
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	6123      	str	r3, [r4, #16]
 800578e:	2300      	movs	r3, #0
 8005790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005794:	e7a8      	b.n	80056e8 <_printf_i+0x150>
 8005796:	6923      	ldr	r3, [r4, #16]
 8005798:	462a      	mov	r2, r5
 800579a:	4649      	mov	r1, r9
 800579c:	4640      	mov	r0, r8
 800579e:	47d0      	blx	sl
 80057a0:	3001      	adds	r0, #1
 80057a2:	d0ab      	beq.n	80056fc <_printf_i+0x164>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	079b      	lsls	r3, r3, #30
 80057a8:	d413      	bmi.n	80057d2 <_printf_i+0x23a>
 80057aa:	68e0      	ldr	r0, [r4, #12]
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	4298      	cmp	r0, r3
 80057b0:	bfb8      	it	lt
 80057b2:	4618      	movlt	r0, r3
 80057b4:	e7a4      	b.n	8005700 <_printf_i+0x168>
 80057b6:	2301      	movs	r3, #1
 80057b8:	4632      	mov	r2, r6
 80057ba:	4649      	mov	r1, r9
 80057bc:	4640      	mov	r0, r8
 80057be:	47d0      	blx	sl
 80057c0:	3001      	adds	r0, #1
 80057c2:	d09b      	beq.n	80056fc <_printf_i+0x164>
 80057c4:	3501      	adds	r5, #1
 80057c6:	68e3      	ldr	r3, [r4, #12]
 80057c8:	9903      	ldr	r1, [sp, #12]
 80057ca:	1a5b      	subs	r3, r3, r1
 80057cc:	42ab      	cmp	r3, r5
 80057ce:	dcf2      	bgt.n	80057b6 <_printf_i+0x21e>
 80057d0:	e7eb      	b.n	80057aa <_printf_i+0x212>
 80057d2:	2500      	movs	r5, #0
 80057d4:	f104 0619 	add.w	r6, r4, #25
 80057d8:	e7f5      	b.n	80057c6 <_printf_i+0x22e>
 80057da:	bf00      	nop
 80057dc:	080079f6 	.word	0x080079f6
 80057e0:	08007a07 	.word	0x08007a07

080057e4 <iprintf>:
 80057e4:	b40f      	push	{r0, r1, r2, r3}
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <iprintf+0x2c>)
 80057e8:	b513      	push	{r0, r1, r4, lr}
 80057ea:	681c      	ldr	r4, [r3, #0]
 80057ec:	b124      	cbz	r4, 80057f8 <iprintf+0x14>
 80057ee:	69a3      	ldr	r3, [r4, #24]
 80057f0:	b913      	cbnz	r3, 80057f8 <iprintf+0x14>
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 fee2 	bl	80065bc <__sinit>
 80057f8:	ab05      	add	r3, sp, #20
 80057fa:	9a04      	ldr	r2, [sp, #16]
 80057fc:	68a1      	ldr	r1, [r4, #8]
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	4620      	mov	r0, r4
 8005802:	f001 fc3b 	bl	800707c <_vfiprintf_r>
 8005806:	b002      	add	sp, #8
 8005808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800580c:	b004      	add	sp, #16
 800580e:	4770      	bx	lr
 8005810:	20000010 	.word	0x20000010

08005814 <quorem>:
 8005814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	6903      	ldr	r3, [r0, #16]
 800581a:	690c      	ldr	r4, [r1, #16]
 800581c:	42a3      	cmp	r3, r4
 800581e:	4607      	mov	r7, r0
 8005820:	f2c0 8081 	blt.w	8005926 <quorem+0x112>
 8005824:	3c01      	subs	r4, #1
 8005826:	f101 0814 	add.w	r8, r1, #20
 800582a:	f100 0514 	add.w	r5, r0, #20
 800582e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800583c:	3301      	adds	r3, #1
 800583e:	429a      	cmp	r2, r3
 8005840:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005848:	fbb2 f6f3 	udiv	r6, r2, r3
 800584c:	d331      	bcc.n	80058b2 <quorem+0x9e>
 800584e:	f04f 0e00 	mov.w	lr, #0
 8005852:	4640      	mov	r0, r8
 8005854:	46ac      	mov	ip, r5
 8005856:	46f2      	mov	sl, lr
 8005858:	f850 2b04 	ldr.w	r2, [r0], #4
 800585c:	b293      	uxth	r3, r2
 800585e:	fb06 e303 	mla	r3, r6, r3, lr
 8005862:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005866:	b29b      	uxth	r3, r3
 8005868:	ebaa 0303 	sub.w	r3, sl, r3
 800586c:	f8dc a000 	ldr.w	sl, [ip]
 8005870:	0c12      	lsrs	r2, r2, #16
 8005872:	fa13 f38a 	uxtah	r3, r3, sl
 8005876:	fb06 e202 	mla	r2, r6, r2, lr
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	9b00      	ldr	r3, [sp, #0]
 800587e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005882:	b292      	uxth	r2, r2
 8005884:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005888:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800588c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005890:	4581      	cmp	r9, r0
 8005892:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005896:	f84c 3b04 	str.w	r3, [ip], #4
 800589a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800589e:	d2db      	bcs.n	8005858 <quorem+0x44>
 80058a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80058a4:	b92b      	cbnz	r3, 80058b2 <quorem+0x9e>
 80058a6:	9b01      	ldr	r3, [sp, #4]
 80058a8:	3b04      	subs	r3, #4
 80058aa:	429d      	cmp	r5, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	d32e      	bcc.n	800590e <quorem+0xfa>
 80058b0:	613c      	str	r4, [r7, #16]
 80058b2:	4638      	mov	r0, r7
 80058b4:	f001 f9c0 	bl	8006c38 <__mcmp>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	db24      	blt.n	8005906 <quorem+0xf2>
 80058bc:	3601      	adds	r6, #1
 80058be:	4628      	mov	r0, r5
 80058c0:	f04f 0c00 	mov.w	ip, #0
 80058c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80058c8:	f8d0 e000 	ldr.w	lr, [r0]
 80058cc:	b293      	uxth	r3, r2
 80058ce:	ebac 0303 	sub.w	r3, ip, r3
 80058d2:	0c12      	lsrs	r2, r2, #16
 80058d4:	fa13 f38e 	uxtah	r3, r3, lr
 80058d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80058dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058e6:	45c1      	cmp	r9, r8
 80058e8:	f840 3b04 	str.w	r3, [r0], #4
 80058ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058f0:	d2e8      	bcs.n	80058c4 <quorem+0xb0>
 80058f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058fa:	b922      	cbnz	r2, 8005906 <quorem+0xf2>
 80058fc:	3b04      	subs	r3, #4
 80058fe:	429d      	cmp	r5, r3
 8005900:	461a      	mov	r2, r3
 8005902:	d30a      	bcc.n	800591a <quorem+0x106>
 8005904:	613c      	str	r4, [r7, #16]
 8005906:	4630      	mov	r0, r6
 8005908:	b003      	add	sp, #12
 800590a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	3b04      	subs	r3, #4
 8005912:	2a00      	cmp	r2, #0
 8005914:	d1cc      	bne.n	80058b0 <quorem+0x9c>
 8005916:	3c01      	subs	r4, #1
 8005918:	e7c7      	b.n	80058aa <quorem+0x96>
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	3b04      	subs	r3, #4
 800591e:	2a00      	cmp	r2, #0
 8005920:	d1f0      	bne.n	8005904 <quorem+0xf0>
 8005922:	3c01      	subs	r4, #1
 8005924:	e7eb      	b.n	80058fe <quorem+0xea>
 8005926:	2000      	movs	r0, #0
 8005928:	e7ee      	b.n	8005908 <quorem+0xf4>
 800592a:	0000      	movs	r0, r0
 800592c:	0000      	movs	r0, r0
	...

08005930 <_dtoa_r>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	ed2d 8b04 	vpush	{d8-d9}
 8005938:	ec57 6b10 	vmov	r6, r7, d0
 800593c:	b093      	sub	sp, #76	; 0x4c
 800593e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005940:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005944:	9106      	str	r1, [sp, #24]
 8005946:	ee10 aa10 	vmov	sl, s0
 800594a:	4604      	mov	r4, r0
 800594c:	9209      	str	r2, [sp, #36]	; 0x24
 800594e:	930c      	str	r3, [sp, #48]	; 0x30
 8005950:	46bb      	mov	fp, r7
 8005952:	b975      	cbnz	r5, 8005972 <_dtoa_r+0x42>
 8005954:	2010      	movs	r0, #16
 8005956:	f000 fed7 	bl	8006708 <malloc>
 800595a:	4602      	mov	r2, r0
 800595c:	6260      	str	r0, [r4, #36]	; 0x24
 800595e:	b920      	cbnz	r0, 800596a <_dtoa_r+0x3a>
 8005960:	4ba7      	ldr	r3, [pc, #668]	; (8005c00 <_dtoa_r+0x2d0>)
 8005962:	21ea      	movs	r1, #234	; 0xea
 8005964:	48a7      	ldr	r0, [pc, #668]	; (8005c04 <_dtoa_r+0x2d4>)
 8005966:	f001 fddf 	bl	8007528 <__assert_func>
 800596a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800596e:	6005      	str	r5, [r0, #0]
 8005970:	60c5      	str	r5, [r0, #12]
 8005972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	b151      	cbz	r1, 800598e <_dtoa_r+0x5e>
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	604a      	str	r2, [r1, #4]
 800597c:	2301      	movs	r3, #1
 800597e:	4093      	lsls	r3, r2
 8005980:	608b      	str	r3, [r1, #8]
 8005982:	4620      	mov	r0, r4
 8005984:	f000 ff16 	bl	80067b4 <_Bfree>
 8005988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	1e3b      	subs	r3, r7, #0
 8005990:	bfaa      	itet	ge
 8005992:	2300      	movge	r3, #0
 8005994:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005998:	f8c8 3000 	strge.w	r3, [r8]
 800599c:	4b9a      	ldr	r3, [pc, #616]	; (8005c08 <_dtoa_r+0x2d8>)
 800599e:	bfbc      	itt	lt
 80059a0:	2201      	movlt	r2, #1
 80059a2:	f8c8 2000 	strlt.w	r2, [r8]
 80059a6:	ea33 030b 	bics.w	r3, r3, fp
 80059aa:	d11b      	bne.n	80059e4 <_dtoa_r+0xb4>
 80059ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059b8:	4333      	orrs	r3, r6
 80059ba:	f000 8592 	beq.w	80064e2 <_dtoa_r+0xbb2>
 80059be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059c0:	b963      	cbnz	r3, 80059dc <_dtoa_r+0xac>
 80059c2:	4b92      	ldr	r3, [pc, #584]	; (8005c0c <_dtoa_r+0x2dc>)
 80059c4:	e022      	b.n	8005a0c <_dtoa_r+0xdc>
 80059c6:	4b92      	ldr	r3, [pc, #584]	; (8005c10 <_dtoa_r+0x2e0>)
 80059c8:	9301      	str	r3, [sp, #4]
 80059ca:	3308      	adds	r3, #8
 80059cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	9801      	ldr	r0, [sp, #4]
 80059d2:	b013      	add	sp, #76	; 0x4c
 80059d4:	ecbd 8b04 	vpop	{d8-d9}
 80059d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059dc:	4b8b      	ldr	r3, [pc, #556]	; (8005c0c <_dtoa_r+0x2dc>)
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	3303      	adds	r3, #3
 80059e2:	e7f3      	b.n	80059cc <_dtoa_r+0x9c>
 80059e4:	2200      	movs	r2, #0
 80059e6:	2300      	movs	r3, #0
 80059e8:	4650      	mov	r0, sl
 80059ea:	4659      	mov	r1, fp
 80059ec:	f7fb f88c 	bl	8000b08 <__aeabi_dcmpeq>
 80059f0:	ec4b ab19 	vmov	d9, sl, fp
 80059f4:	4680      	mov	r8, r0
 80059f6:	b158      	cbz	r0, 8005a10 <_dtoa_r+0xe0>
 80059f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059fa:	2301      	movs	r3, #1
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 856b 	beq.w	80064dc <_dtoa_r+0xbac>
 8005a06:	4883      	ldr	r0, [pc, #524]	; (8005c14 <_dtoa_r+0x2e4>)
 8005a08:	6018      	str	r0, [r3, #0]
 8005a0a:	1e43      	subs	r3, r0, #1
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	e7df      	b.n	80059d0 <_dtoa_r+0xa0>
 8005a10:	ec4b ab10 	vmov	d0, sl, fp
 8005a14:	aa10      	add	r2, sp, #64	; 0x40
 8005a16:	a911      	add	r1, sp, #68	; 0x44
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f001 f9b3 	bl	8006d84 <__d2b>
 8005a1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005a22:	ee08 0a10 	vmov	s16, r0
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	f000 8084 	beq.w	8005b34 <_dtoa_r+0x204>
 8005a2c:	ee19 3a90 	vmov	r3, s19
 8005a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005a38:	4656      	mov	r6, sl
 8005a3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005a46:	4b74      	ldr	r3, [pc, #464]	; (8005c18 <_dtoa_r+0x2e8>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7fa fc3b 	bl	80002c8 <__aeabi_dsub>
 8005a52:	a365      	add	r3, pc, #404	; (adr r3, 8005be8 <_dtoa_r+0x2b8>)
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f7fa fdee 	bl	8000638 <__aeabi_dmul>
 8005a5c:	a364      	add	r3, pc, #400	; (adr r3, 8005bf0 <_dtoa_r+0x2c0>)
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f7fa fc33 	bl	80002cc <__adddf3>
 8005a66:	4606      	mov	r6, r0
 8005a68:	4628      	mov	r0, r5
 8005a6a:	460f      	mov	r7, r1
 8005a6c:	f7fa fd7a 	bl	8000564 <__aeabi_i2d>
 8005a70:	a361      	add	r3, pc, #388	; (adr r3, 8005bf8 <_dtoa_r+0x2c8>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f7fa fddf 	bl	8000638 <__aeabi_dmul>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4630      	mov	r0, r6
 8005a80:	4639      	mov	r1, r7
 8005a82:	f7fa fc23 	bl	80002cc <__adddf3>
 8005a86:	4606      	mov	r6, r0
 8005a88:	460f      	mov	r7, r1
 8005a8a:	f7fb f885 	bl	8000b98 <__aeabi_d2iz>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	9000      	str	r0, [sp, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fb f840 	bl	8000b1c <__aeabi_dcmplt>
 8005a9c:	b150      	cbz	r0, 8005ab4 <_dtoa_r+0x184>
 8005a9e:	9800      	ldr	r0, [sp, #0]
 8005aa0:	f7fa fd60 	bl	8000564 <__aeabi_i2d>
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	f7fb f82e 	bl	8000b08 <__aeabi_dcmpeq>
 8005aac:	b910      	cbnz	r0, 8005ab4 <_dtoa_r+0x184>
 8005aae:	9b00      	ldr	r3, [sp, #0]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	9b00      	ldr	r3, [sp, #0]
 8005ab6:	2b16      	cmp	r3, #22
 8005ab8:	d85a      	bhi.n	8005b70 <_dtoa_r+0x240>
 8005aba:	9a00      	ldr	r2, [sp, #0]
 8005abc:	4b57      	ldr	r3, [pc, #348]	; (8005c1c <_dtoa_r+0x2ec>)
 8005abe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac6:	ec51 0b19 	vmov	r0, r1, d9
 8005aca:	f7fb f827 	bl	8000b1c <__aeabi_dcmplt>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d050      	beq.n	8005b74 <_dtoa_r+0x244>
 8005ad2:	9b00      	ldr	r3, [sp, #0]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8005adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ade:	1b5d      	subs	r5, r3, r5
 8005ae0:	1e6b      	subs	r3, r5, #1
 8005ae2:	9305      	str	r3, [sp, #20]
 8005ae4:	bf45      	ittet	mi
 8005ae6:	f1c5 0301 	rsbmi	r3, r5, #1
 8005aea:	9304      	strmi	r3, [sp, #16]
 8005aec:	2300      	movpl	r3, #0
 8005aee:	2300      	movmi	r3, #0
 8005af0:	bf4c      	ite	mi
 8005af2:	9305      	strmi	r3, [sp, #20]
 8005af4:	9304      	strpl	r3, [sp, #16]
 8005af6:	9b00      	ldr	r3, [sp, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db3d      	blt.n	8005b78 <_dtoa_r+0x248>
 8005afc:	9b05      	ldr	r3, [sp, #20]
 8005afe:	9a00      	ldr	r2, [sp, #0]
 8005b00:	920a      	str	r2, [sp, #40]	; 0x28
 8005b02:	4413      	add	r3, r2
 8005b04:	9305      	str	r3, [sp, #20]
 8005b06:	2300      	movs	r3, #0
 8005b08:	9307      	str	r3, [sp, #28]
 8005b0a:	9b06      	ldr	r3, [sp, #24]
 8005b0c:	2b09      	cmp	r3, #9
 8005b0e:	f200 8089 	bhi.w	8005c24 <_dtoa_r+0x2f4>
 8005b12:	2b05      	cmp	r3, #5
 8005b14:	bfc4      	itt	gt
 8005b16:	3b04      	subgt	r3, #4
 8005b18:	9306      	strgt	r3, [sp, #24]
 8005b1a:	9b06      	ldr	r3, [sp, #24]
 8005b1c:	f1a3 0302 	sub.w	r3, r3, #2
 8005b20:	bfcc      	ite	gt
 8005b22:	2500      	movgt	r5, #0
 8005b24:	2501      	movle	r5, #1
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	f200 8087 	bhi.w	8005c3a <_dtoa_r+0x30a>
 8005b2c:	e8df f003 	tbb	[pc, r3]
 8005b30:	59383a2d 	.word	0x59383a2d
 8005b34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b38:	441d      	add	r5, r3
 8005b3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	bfc1      	itttt	gt
 8005b42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005b4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8005b4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b52:	bfda      	itte	le
 8005b54:	f1c3 0320 	rsble	r3, r3, #32
 8005b58:	fa06 f003 	lslle.w	r0, r6, r3
 8005b5c:	4318      	orrgt	r0, r3
 8005b5e:	f7fa fcf1 	bl	8000544 <__aeabi_ui2d>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4606      	mov	r6, r0
 8005b66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b6a:	3d01      	subs	r5, #1
 8005b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8005b6e:	e76a      	b.n	8005a46 <_dtoa_r+0x116>
 8005b70:	2301      	movs	r3, #1
 8005b72:	e7b2      	b.n	8005ada <_dtoa_r+0x1aa>
 8005b74:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b76:	e7b1      	b.n	8005adc <_dtoa_r+0x1ac>
 8005b78:	9b04      	ldr	r3, [sp, #16]
 8005b7a:	9a00      	ldr	r2, [sp, #0]
 8005b7c:	1a9b      	subs	r3, r3, r2
 8005b7e:	9304      	str	r3, [sp, #16]
 8005b80:	4253      	negs	r3, r2
 8005b82:	9307      	str	r3, [sp, #28]
 8005b84:	2300      	movs	r3, #0
 8005b86:	930a      	str	r3, [sp, #40]	; 0x28
 8005b88:	e7bf      	b.n	8005b0a <_dtoa_r+0x1da>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9308      	str	r3, [sp, #32]
 8005b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	dc55      	bgt.n	8005c40 <_dtoa_r+0x310>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005b9e:	e00c      	b.n	8005bba <_dtoa_r+0x28a>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e7f3      	b.n	8005b8c <_dtoa_r+0x25c>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba8:	9308      	str	r3, [sp, #32]
 8005baa:	9b00      	ldr	r3, [sp, #0]
 8005bac:	4413      	add	r3, r2
 8005bae:	9302      	str	r3, [sp, #8]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	9303      	str	r3, [sp, #12]
 8005bb6:	bfb8      	it	lt
 8005bb8:	2301      	movlt	r3, #1
 8005bba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	6042      	str	r2, [r0, #4]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	f102 0614 	add.w	r6, r2, #20
 8005bc6:	429e      	cmp	r6, r3
 8005bc8:	6841      	ldr	r1, [r0, #4]
 8005bca:	d93d      	bls.n	8005c48 <_dtoa_r+0x318>
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f000 fdb1 	bl	8006734 <_Balloc>
 8005bd2:	9001      	str	r0, [sp, #4]
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d13b      	bne.n	8005c50 <_dtoa_r+0x320>
 8005bd8:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <_dtoa_r+0x2f0>)
 8005bda:	4602      	mov	r2, r0
 8005bdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005be0:	e6c0      	b.n	8005964 <_dtoa_r+0x34>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e7df      	b.n	8005ba6 <_dtoa_r+0x276>
 8005be6:	bf00      	nop
 8005be8:	636f4361 	.word	0x636f4361
 8005bec:	3fd287a7 	.word	0x3fd287a7
 8005bf0:	8b60c8b3 	.word	0x8b60c8b3
 8005bf4:	3fc68a28 	.word	0x3fc68a28
 8005bf8:	509f79fb 	.word	0x509f79fb
 8005bfc:	3fd34413 	.word	0x3fd34413
 8005c00:	08007a25 	.word	0x08007a25
 8005c04:	08007a3c 	.word	0x08007a3c
 8005c08:	7ff00000 	.word	0x7ff00000
 8005c0c:	08007a21 	.word	0x08007a21
 8005c10:	08007a18 	.word	0x08007a18
 8005c14:	080079f5 	.word	0x080079f5
 8005c18:	3ff80000 	.word	0x3ff80000
 8005c1c:	08007b90 	.word	0x08007b90
 8005c20:	08007a97 	.word	0x08007a97
 8005c24:	2501      	movs	r5, #1
 8005c26:	2300      	movs	r3, #0
 8005c28:	9306      	str	r3, [sp, #24]
 8005c2a:	9508      	str	r5, [sp, #32]
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c34:	2200      	movs	r2, #0
 8005c36:	2312      	movs	r3, #18
 8005c38:	e7b0      	b.n	8005b9c <_dtoa_r+0x26c>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	9308      	str	r3, [sp, #32]
 8005c3e:	e7f5      	b.n	8005c2c <_dtoa_r+0x2fc>
 8005c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c46:	e7b8      	b.n	8005bba <_dtoa_r+0x28a>
 8005c48:	3101      	adds	r1, #1
 8005c4a:	6041      	str	r1, [r0, #4]
 8005c4c:	0052      	lsls	r2, r2, #1
 8005c4e:	e7b8      	b.n	8005bc2 <_dtoa_r+0x292>
 8005c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c52:	9a01      	ldr	r2, [sp, #4]
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	2b0e      	cmp	r3, #14
 8005c5a:	f200 809d 	bhi.w	8005d98 <_dtoa_r+0x468>
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	f000 809a 	beq.w	8005d98 <_dtoa_r+0x468>
 8005c64:	9b00      	ldr	r3, [sp, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	dd32      	ble.n	8005cd0 <_dtoa_r+0x3a0>
 8005c6a:	4ab7      	ldr	r2, [pc, #732]	; (8005f48 <_dtoa_r+0x618>)
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c78:	9b00      	ldr	r3, [sp, #0]
 8005c7a:	05d8      	lsls	r0, r3, #23
 8005c7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005c80:	d516      	bpl.n	8005cb0 <_dtoa_r+0x380>
 8005c82:	4bb2      	ldr	r3, [pc, #712]	; (8005f4c <_dtoa_r+0x61c>)
 8005c84:	ec51 0b19 	vmov	r0, r1, d9
 8005c88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c8c:	f7fa fdfe 	bl	800088c <__aeabi_ddiv>
 8005c90:	f007 070f 	and.w	r7, r7, #15
 8005c94:	4682      	mov	sl, r0
 8005c96:	468b      	mov	fp, r1
 8005c98:	2503      	movs	r5, #3
 8005c9a:	4eac      	ldr	r6, [pc, #688]	; (8005f4c <_dtoa_r+0x61c>)
 8005c9c:	b957      	cbnz	r7, 8005cb4 <_dtoa_r+0x384>
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	f7fa fdf1 	bl	800088c <__aeabi_ddiv>
 8005caa:	4682      	mov	sl, r0
 8005cac:	468b      	mov	fp, r1
 8005cae:	e028      	b.n	8005d02 <_dtoa_r+0x3d2>
 8005cb0:	2502      	movs	r5, #2
 8005cb2:	e7f2      	b.n	8005c9a <_dtoa_r+0x36a>
 8005cb4:	07f9      	lsls	r1, r7, #31
 8005cb6:	d508      	bpl.n	8005cca <_dtoa_r+0x39a>
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cc0:	f7fa fcba 	bl	8000638 <__aeabi_dmul>
 8005cc4:	3501      	adds	r5, #1
 8005cc6:	4680      	mov	r8, r0
 8005cc8:	4689      	mov	r9, r1
 8005cca:	107f      	asrs	r7, r7, #1
 8005ccc:	3608      	adds	r6, #8
 8005cce:	e7e5      	b.n	8005c9c <_dtoa_r+0x36c>
 8005cd0:	f000 809b 	beq.w	8005e0a <_dtoa_r+0x4da>
 8005cd4:	9b00      	ldr	r3, [sp, #0]
 8005cd6:	4f9d      	ldr	r7, [pc, #628]	; (8005f4c <_dtoa_r+0x61c>)
 8005cd8:	425e      	negs	r6, r3
 8005cda:	4b9b      	ldr	r3, [pc, #620]	; (8005f48 <_dtoa_r+0x618>)
 8005cdc:	f006 020f 	and.w	r2, r6, #15
 8005ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	ec51 0b19 	vmov	r0, r1, d9
 8005cec:	f7fa fca4 	bl	8000638 <__aeabi_dmul>
 8005cf0:	1136      	asrs	r6, r6, #4
 8005cf2:	4682      	mov	sl, r0
 8005cf4:	468b      	mov	fp, r1
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2502      	movs	r5, #2
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	d17a      	bne.n	8005df4 <_dtoa_r+0x4c4>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1d3      	bne.n	8005caa <_dtoa_r+0x37a>
 8005d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8082 	beq.w	8005e0e <_dtoa_r+0x4de>
 8005d0a:	4b91      	ldr	r3, [pc, #580]	; (8005f50 <_dtoa_r+0x620>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4650      	mov	r0, sl
 8005d10:	4659      	mov	r1, fp
 8005d12:	f7fa ff03 	bl	8000b1c <__aeabi_dcmplt>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d079      	beq.n	8005e0e <_dtoa_r+0x4de>
 8005d1a:	9b03      	ldr	r3, [sp, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d076      	beq.n	8005e0e <_dtoa_r+0x4de>
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd36      	ble.n	8005d94 <_dtoa_r+0x464>
 8005d26:	9b00      	ldr	r3, [sp, #0]
 8005d28:	4650      	mov	r0, sl
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	1e5f      	subs	r7, r3, #1
 8005d2e:	2200      	movs	r2, #0
 8005d30:	4b88      	ldr	r3, [pc, #544]	; (8005f54 <_dtoa_r+0x624>)
 8005d32:	f7fa fc81 	bl	8000638 <__aeabi_dmul>
 8005d36:	9e02      	ldr	r6, [sp, #8]
 8005d38:	4682      	mov	sl, r0
 8005d3a:	468b      	mov	fp, r1
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f7fa fc10 	bl	8000564 <__aeabi_i2d>
 8005d44:	4652      	mov	r2, sl
 8005d46:	465b      	mov	r3, fp
 8005d48:	f7fa fc76 	bl	8000638 <__aeabi_dmul>
 8005d4c:	4b82      	ldr	r3, [pc, #520]	; (8005f58 <_dtoa_r+0x628>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f7fa fabc 	bl	80002cc <__adddf3>
 8005d54:	46d0      	mov	r8, sl
 8005d56:	46d9      	mov	r9, fp
 8005d58:	4682      	mov	sl, r0
 8005d5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	d158      	bne.n	8005e14 <_dtoa_r+0x4e4>
 8005d62:	4b7e      	ldr	r3, [pc, #504]	; (8005f5c <_dtoa_r+0x62c>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	4640      	mov	r0, r8
 8005d68:	4649      	mov	r1, r9
 8005d6a:	f7fa faad 	bl	80002c8 <__aeabi_dsub>
 8005d6e:	4652      	mov	r2, sl
 8005d70:	465b      	mov	r3, fp
 8005d72:	4680      	mov	r8, r0
 8005d74:	4689      	mov	r9, r1
 8005d76:	f7fa feef 	bl	8000b58 <__aeabi_dcmpgt>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f040 8295 	bne.w	80062aa <_dtoa_r+0x97a>
 8005d80:	4652      	mov	r2, sl
 8005d82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d86:	4640      	mov	r0, r8
 8005d88:	4649      	mov	r1, r9
 8005d8a:	f7fa fec7 	bl	8000b1c <__aeabi_dcmplt>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	f040 8289 	bne.w	80062a6 <_dtoa_r+0x976>
 8005d94:	ec5b ab19 	vmov	sl, fp, d9
 8005d98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f2c0 8148 	blt.w	8006030 <_dtoa_r+0x700>
 8005da0:	9a00      	ldr	r2, [sp, #0]
 8005da2:	2a0e      	cmp	r2, #14
 8005da4:	f300 8144 	bgt.w	8006030 <_dtoa_r+0x700>
 8005da8:	4b67      	ldr	r3, [pc, #412]	; (8005f48 <_dtoa_r+0x618>)
 8005daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f280 80d5 	bge.w	8005f64 <_dtoa_r+0x634>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f300 80d1 	bgt.w	8005f64 <_dtoa_r+0x634>
 8005dc2:	f040 826f 	bne.w	80062a4 <_dtoa_r+0x974>
 8005dc6:	4b65      	ldr	r3, [pc, #404]	; (8005f5c <_dtoa_r+0x62c>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4649      	mov	r1, r9
 8005dce:	f7fa fc33 	bl	8000638 <__aeabi_dmul>
 8005dd2:	4652      	mov	r2, sl
 8005dd4:	465b      	mov	r3, fp
 8005dd6:	f7fa feb5 	bl	8000b44 <__aeabi_dcmpge>
 8005dda:	9e03      	ldr	r6, [sp, #12]
 8005ddc:	4637      	mov	r7, r6
 8005dde:	2800      	cmp	r0, #0
 8005de0:	f040 8245 	bne.w	800626e <_dtoa_r+0x93e>
 8005de4:	9d01      	ldr	r5, [sp, #4]
 8005de6:	2331      	movs	r3, #49	; 0x31
 8005de8:	f805 3b01 	strb.w	r3, [r5], #1
 8005dec:	9b00      	ldr	r3, [sp, #0]
 8005dee:	3301      	adds	r3, #1
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	e240      	b.n	8006276 <_dtoa_r+0x946>
 8005df4:	07f2      	lsls	r2, r6, #31
 8005df6:	d505      	bpl.n	8005e04 <_dtoa_r+0x4d4>
 8005df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfc:	f7fa fc1c 	bl	8000638 <__aeabi_dmul>
 8005e00:	3501      	adds	r5, #1
 8005e02:	2301      	movs	r3, #1
 8005e04:	1076      	asrs	r6, r6, #1
 8005e06:	3708      	adds	r7, #8
 8005e08:	e777      	b.n	8005cfa <_dtoa_r+0x3ca>
 8005e0a:	2502      	movs	r5, #2
 8005e0c:	e779      	b.n	8005d02 <_dtoa_r+0x3d2>
 8005e0e:	9f00      	ldr	r7, [sp, #0]
 8005e10:	9e03      	ldr	r6, [sp, #12]
 8005e12:	e794      	b.n	8005d3e <_dtoa_r+0x40e>
 8005e14:	9901      	ldr	r1, [sp, #4]
 8005e16:	4b4c      	ldr	r3, [pc, #304]	; (8005f48 <_dtoa_r+0x618>)
 8005e18:	4431      	add	r1, r6
 8005e1a:	910d      	str	r1, [sp, #52]	; 0x34
 8005e1c:	9908      	ldr	r1, [sp, #32]
 8005e1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e26:	2900      	cmp	r1, #0
 8005e28:	d043      	beq.n	8005eb2 <_dtoa_r+0x582>
 8005e2a:	494d      	ldr	r1, [pc, #308]	; (8005f60 <_dtoa_r+0x630>)
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f7fa fd2d 	bl	800088c <__aeabi_ddiv>
 8005e32:	4652      	mov	r2, sl
 8005e34:	465b      	mov	r3, fp
 8005e36:	f7fa fa47 	bl	80002c8 <__aeabi_dsub>
 8005e3a:	9d01      	ldr	r5, [sp, #4]
 8005e3c:	4682      	mov	sl, r0
 8005e3e:	468b      	mov	fp, r1
 8005e40:	4649      	mov	r1, r9
 8005e42:	4640      	mov	r0, r8
 8005e44:	f7fa fea8 	bl	8000b98 <__aeabi_d2iz>
 8005e48:	4606      	mov	r6, r0
 8005e4a:	f7fa fb8b 	bl	8000564 <__aeabi_i2d>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4640      	mov	r0, r8
 8005e54:	4649      	mov	r1, r9
 8005e56:	f7fa fa37 	bl	80002c8 <__aeabi_dsub>
 8005e5a:	3630      	adds	r6, #48	; 0x30
 8005e5c:	f805 6b01 	strb.w	r6, [r5], #1
 8005e60:	4652      	mov	r2, sl
 8005e62:	465b      	mov	r3, fp
 8005e64:	4680      	mov	r8, r0
 8005e66:	4689      	mov	r9, r1
 8005e68:	f7fa fe58 	bl	8000b1c <__aeabi_dcmplt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d163      	bne.n	8005f38 <_dtoa_r+0x608>
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	4936      	ldr	r1, [pc, #216]	; (8005f50 <_dtoa_r+0x620>)
 8005e76:	2000      	movs	r0, #0
 8005e78:	f7fa fa26 	bl	80002c8 <__aeabi_dsub>
 8005e7c:	4652      	mov	r2, sl
 8005e7e:	465b      	mov	r3, fp
 8005e80:	f7fa fe4c 	bl	8000b1c <__aeabi_dcmplt>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	f040 80b5 	bne.w	8005ff4 <_dtoa_r+0x6c4>
 8005e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e8c:	429d      	cmp	r5, r3
 8005e8e:	d081      	beq.n	8005d94 <_dtoa_r+0x464>
 8005e90:	4b30      	ldr	r3, [pc, #192]	; (8005f54 <_dtoa_r+0x624>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	4650      	mov	r0, sl
 8005e96:	4659      	mov	r1, fp
 8005e98:	f7fa fbce 	bl	8000638 <__aeabi_dmul>
 8005e9c:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <_dtoa_r+0x624>)
 8005e9e:	4682      	mov	sl, r0
 8005ea0:	468b      	mov	fp, r1
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f7fa fbc6 	bl	8000638 <__aeabi_dmul>
 8005eac:	4680      	mov	r8, r0
 8005eae:	4689      	mov	r9, r1
 8005eb0:	e7c6      	b.n	8005e40 <_dtoa_r+0x510>
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	f7fa fbbf 	bl	8000638 <__aeabi_dmul>
 8005eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ebc:	9d01      	ldr	r5, [sp, #4]
 8005ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ec0:	4682      	mov	sl, r0
 8005ec2:	468b      	mov	fp, r1
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	f7fa fe66 	bl	8000b98 <__aeabi_d2iz>
 8005ecc:	4606      	mov	r6, r0
 8005ece:	f7fa fb49 	bl	8000564 <__aeabi_i2d>
 8005ed2:	3630      	adds	r6, #48	; 0x30
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4649      	mov	r1, r9
 8005edc:	f7fa f9f4 	bl	80002c8 <__aeabi_dsub>
 8005ee0:	f805 6b01 	strb.w	r6, [r5], #1
 8005ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ee6:	429d      	cmp	r5, r3
 8005ee8:	4680      	mov	r8, r0
 8005eea:	4689      	mov	r9, r1
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	d124      	bne.n	8005f3c <_dtoa_r+0x60c>
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <_dtoa_r+0x630>)
 8005ef4:	4650      	mov	r0, sl
 8005ef6:	4659      	mov	r1, fp
 8005ef8:	f7fa f9e8 	bl	80002cc <__adddf3>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4640      	mov	r0, r8
 8005f02:	4649      	mov	r1, r9
 8005f04:	f7fa fe28 	bl	8000b58 <__aeabi_dcmpgt>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d173      	bne.n	8005ff4 <_dtoa_r+0x6c4>
 8005f0c:	4652      	mov	r2, sl
 8005f0e:	465b      	mov	r3, fp
 8005f10:	4913      	ldr	r1, [pc, #76]	; (8005f60 <_dtoa_r+0x630>)
 8005f12:	2000      	movs	r0, #0
 8005f14:	f7fa f9d8 	bl	80002c8 <__aeabi_dsub>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	4649      	mov	r1, r9
 8005f20:	f7fa fdfc 	bl	8000b1c <__aeabi_dcmplt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	f43f af35 	beq.w	8005d94 <_dtoa_r+0x464>
 8005f2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f2c:	1e6b      	subs	r3, r5, #1
 8005f2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f34:	2b30      	cmp	r3, #48	; 0x30
 8005f36:	d0f8      	beq.n	8005f2a <_dtoa_r+0x5fa>
 8005f38:	9700      	str	r7, [sp, #0]
 8005f3a:	e049      	b.n	8005fd0 <_dtoa_r+0x6a0>
 8005f3c:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <_dtoa_r+0x624>)
 8005f3e:	f7fa fb7b 	bl	8000638 <__aeabi_dmul>
 8005f42:	4680      	mov	r8, r0
 8005f44:	4689      	mov	r9, r1
 8005f46:	e7bd      	b.n	8005ec4 <_dtoa_r+0x594>
 8005f48:	08007b90 	.word	0x08007b90
 8005f4c:	08007b68 	.word	0x08007b68
 8005f50:	3ff00000 	.word	0x3ff00000
 8005f54:	40240000 	.word	0x40240000
 8005f58:	401c0000 	.word	0x401c0000
 8005f5c:	40140000 	.word	0x40140000
 8005f60:	3fe00000 	.word	0x3fe00000
 8005f64:	9d01      	ldr	r5, [sp, #4]
 8005f66:	4656      	mov	r6, sl
 8005f68:	465f      	mov	r7, fp
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	4630      	mov	r0, r6
 8005f70:	4639      	mov	r1, r7
 8005f72:	f7fa fc8b 	bl	800088c <__aeabi_ddiv>
 8005f76:	f7fa fe0f 	bl	8000b98 <__aeabi_d2iz>
 8005f7a:	4682      	mov	sl, r0
 8005f7c:	f7fa faf2 	bl	8000564 <__aeabi_i2d>
 8005f80:	4642      	mov	r2, r8
 8005f82:	464b      	mov	r3, r9
 8005f84:	f7fa fb58 	bl	8000638 <__aeabi_dmul>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	4639      	mov	r1, r7
 8005f90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f94:	f7fa f998 	bl	80002c8 <__aeabi_dsub>
 8005f98:	f805 6b01 	strb.w	r6, [r5], #1
 8005f9c:	9e01      	ldr	r6, [sp, #4]
 8005f9e:	9f03      	ldr	r7, [sp, #12]
 8005fa0:	1bae      	subs	r6, r5, r6
 8005fa2:	42b7      	cmp	r7, r6
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	d135      	bne.n	8006016 <_dtoa_r+0x6e6>
 8005faa:	f7fa f98f 	bl	80002cc <__adddf3>
 8005fae:	4642      	mov	r2, r8
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	460f      	mov	r7, r1
 8005fb6:	f7fa fdcf 	bl	8000b58 <__aeabi_dcmpgt>
 8005fba:	b9d0      	cbnz	r0, 8005ff2 <_dtoa_r+0x6c2>
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa fda0 	bl	8000b08 <__aeabi_dcmpeq>
 8005fc8:	b110      	cbz	r0, 8005fd0 <_dtoa_r+0x6a0>
 8005fca:	f01a 0f01 	tst.w	sl, #1
 8005fce:	d110      	bne.n	8005ff2 <_dtoa_r+0x6c2>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	ee18 1a10 	vmov	r1, s16
 8005fd6:	f000 fbed 	bl	80067b4 <_Bfree>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9800      	ldr	r0, [sp, #0]
 8005fde:	702b      	strb	r3, [r5, #0]
 8005fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	6018      	str	r0, [r3, #0]
 8005fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f43f acf1 	beq.w	80059d0 <_dtoa_r+0xa0>
 8005fee:	601d      	str	r5, [r3, #0]
 8005ff0:	e4ee      	b.n	80059d0 <_dtoa_r+0xa0>
 8005ff2:	9f00      	ldr	r7, [sp, #0]
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ffc:	2a39      	cmp	r2, #57	; 0x39
 8005ffe:	d106      	bne.n	800600e <_dtoa_r+0x6de>
 8006000:	9a01      	ldr	r2, [sp, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d1f7      	bne.n	8005ff6 <_dtoa_r+0x6c6>
 8006006:	9901      	ldr	r1, [sp, #4]
 8006008:	2230      	movs	r2, #48	; 0x30
 800600a:	3701      	adds	r7, #1
 800600c:	700a      	strb	r2, [r1, #0]
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	3201      	adds	r2, #1
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	e790      	b.n	8005f38 <_dtoa_r+0x608>
 8006016:	4ba6      	ldr	r3, [pc, #664]	; (80062b0 <_dtoa_r+0x980>)
 8006018:	2200      	movs	r2, #0
 800601a:	f7fa fb0d 	bl	8000638 <__aeabi_dmul>
 800601e:	2200      	movs	r2, #0
 8006020:	2300      	movs	r3, #0
 8006022:	4606      	mov	r6, r0
 8006024:	460f      	mov	r7, r1
 8006026:	f7fa fd6f 	bl	8000b08 <__aeabi_dcmpeq>
 800602a:	2800      	cmp	r0, #0
 800602c:	d09d      	beq.n	8005f6a <_dtoa_r+0x63a>
 800602e:	e7cf      	b.n	8005fd0 <_dtoa_r+0x6a0>
 8006030:	9a08      	ldr	r2, [sp, #32]
 8006032:	2a00      	cmp	r2, #0
 8006034:	f000 80d7 	beq.w	80061e6 <_dtoa_r+0x8b6>
 8006038:	9a06      	ldr	r2, [sp, #24]
 800603a:	2a01      	cmp	r2, #1
 800603c:	f300 80ba 	bgt.w	80061b4 <_dtoa_r+0x884>
 8006040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006042:	2a00      	cmp	r2, #0
 8006044:	f000 80b2 	beq.w	80061ac <_dtoa_r+0x87c>
 8006048:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800604c:	9e07      	ldr	r6, [sp, #28]
 800604e:	9d04      	ldr	r5, [sp, #16]
 8006050:	9a04      	ldr	r2, [sp, #16]
 8006052:	441a      	add	r2, r3
 8006054:	9204      	str	r2, [sp, #16]
 8006056:	9a05      	ldr	r2, [sp, #20]
 8006058:	2101      	movs	r1, #1
 800605a:	441a      	add	r2, r3
 800605c:	4620      	mov	r0, r4
 800605e:	9205      	str	r2, [sp, #20]
 8006060:	f000 fc60 	bl	8006924 <__i2b>
 8006064:	4607      	mov	r7, r0
 8006066:	2d00      	cmp	r5, #0
 8006068:	dd0c      	ble.n	8006084 <_dtoa_r+0x754>
 800606a:	9b05      	ldr	r3, [sp, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	dd09      	ble.n	8006084 <_dtoa_r+0x754>
 8006070:	42ab      	cmp	r3, r5
 8006072:	9a04      	ldr	r2, [sp, #16]
 8006074:	bfa8      	it	ge
 8006076:	462b      	movge	r3, r5
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	9204      	str	r2, [sp, #16]
 800607c:	9a05      	ldr	r2, [sp, #20]
 800607e:	1aed      	subs	r5, r5, r3
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	9305      	str	r3, [sp, #20]
 8006084:	9b07      	ldr	r3, [sp, #28]
 8006086:	b31b      	cbz	r3, 80060d0 <_dtoa_r+0x7a0>
 8006088:	9b08      	ldr	r3, [sp, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80af 	beq.w	80061ee <_dtoa_r+0x8be>
 8006090:	2e00      	cmp	r6, #0
 8006092:	dd13      	ble.n	80060bc <_dtoa_r+0x78c>
 8006094:	4639      	mov	r1, r7
 8006096:	4632      	mov	r2, r6
 8006098:	4620      	mov	r0, r4
 800609a:	f000 fd03 	bl	8006aa4 <__pow5mult>
 800609e:	ee18 2a10 	vmov	r2, s16
 80060a2:	4601      	mov	r1, r0
 80060a4:	4607      	mov	r7, r0
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 fc52 	bl	8006950 <__multiply>
 80060ac:	ee18 1a10 	vmov	r1, s16
 80060b0:	4680      	mov	r8, r0
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 fb7e 	bl	80067b4 <_Bfree>
 80060b8:	ee08 8a10 	vmov	s16, r8
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	1b9a      	subs	r2, r3, r6
 80060c0:	d006      	beq.n	80060d0 <_dtoa_r+0x7a0>
 80060c2:	ee18 1a10 	vmov	r1, s16
 80060c6:	4620      	mov	r0, r4
 80060c8:	f000 fcec 	bl	8006aa4 <__pow5mult>
 80060cc:	ee08 0a10 	vmov	s16, r0
 80060d0:	2101      	movs	r1, #1
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 fc26 	bl	8006924 <__i2b>
 80060d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	4606      	mov	r6, r0
 80060de:	f340 8088 	ble.w	80061f2 <_dtoa_r+0x8c2>
 80060e2:	461a      	mov	r2, r3
 80060e4:	4601      	mov	r1, r0
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 fcdc 	bl	8006aa4 <__pow5mult>
 80060ec:	9b06      	ldr	r3, [sp, #24]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	4606      	mov	r6, r0
 80060f2:	f340 8081 	ble.w	80061f8 <_dtoa_r+0x8c8>
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	6933      	ldr	r3, [r6, #16]
 80060fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006100:	6918      	ldr	r0, [r3, #16]
 8006102:	f000 fbbf 	bl	8006884 <__hi0bits>
 8006106:	f1c0 0020 	rsb	r0, r0, #32
 800610a:	9b05      	ldr	r3, [sp, #20]
 800610c:	4418      	add	r0, r3
 800610e:	f010 001f 	ands.w	r0, r0, #31
 8006112:	f000 8092 	beq.w	800623a <_dtoa_r+0x90a>
 8006116:	f1c0 0320 	rsb	r3, r0, #32
 800611a:	2b04      	cmp	r3, #4
 800611c:	f340 808a 	ble.w	8006234 <_dtoa_r+0x904>
 8006120:	f1c0 001c 	rsb	r0, r0, #28
 8006124:	9b04      	ldr	r3, [sp, #16]
 8006126:	4403      	add	r3, r0
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	9b05      	ldr	r3, [sp, #20]
 800612c:	4403      	add	r3, r0
 800612e:	4405      	add	r5, r0
 8006130:	9305      	str	r3, [sp, #20]
 8006132:	9b04      	ldr	r3, [sp, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dd07      	ble.n	8006148 <_dtoa_r+0x818>
 8006138:	ee18 1a10 	vmov	r1, s16
 800613c:	461a      	mov	r2, r3
 800613e:	4620      	mov	r0, r4
 8006140:	f000 fd0a 	bl	8006b58 <__lshift>
 8006144:	ee08 0a10 	vmov	s16, r0
 8006148:	9b05      	ldr	r3, [sp, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	dd05      	ble.n	800615a <_dtoa_r+0x82a>
 800614e:	4631      	mov	r1, r6
 8006150:	461a      	mov	r2, r3
 8006152:	4620      	mov	r0, r4
 8006154:	f000 fd00 	bl	8006b58 <__lshift>
 8006158:	4606      	mov	r6, r0
 800615a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d06e      	beq.n	800623e <_dtoa_r+0x90e>
 8006160:	ee18 0a10 	vmov	r0, s16
 8006164:	4631      	mov	r1, r6
 8006166:	f000 fd67 	bl	8006c38 <__mcmp>
 800616a:	2800      	cmp	r0, #0
 800616c:	da67      	bge.n	800623e <_dtoa_r+0x90e>
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	3b01      	subs	r3, #1
 8006172:	ee18 1a10 	vmov	r1, s16
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	220a      	movs	r2, #10
 800617a:	2300      	movs	r3, #0
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fb3b 	bl	80067f8 <__multadd>
 8006182:	9b08      	ldr	r3, [sp, #32]
 8006184:	ee08 0a10 	vmov	s16, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 81b1 	beq.w	80064f0 <_dtoa_r+0xbc0>
 800618e:	2300      	movs	r3, #0
 8006190:	4639      	mov	r1, r7
 8006192:	220a      	movs	r2, #10
 8006194:	4620      	mov	r0, r4
 8006196:	f000 fb2f 	bl	80067f8 <__multadd>
 800619a:	9b02      	ldr	r3, [sp, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	4607      	mov	r7, r0
 80061a0:	f300 808e 	bgt.w	80062c0 <_dtoa_r+0x990>
 80061a4:	9b06      	ldr	r3, [sp, #24]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	dc51      	bgt.n	800624e <_dtoa_r+0x91e>
 80061aa:	e089      	b.n	80062c0 <_dtoa_r+0x990>
 80061ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061b2:	e74b      	b.n	800604c <_dtoa_r+0x71c>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	1e5e      	subs	r6, r3, #1
 80061b8:	9b07      	ldr	r3, [sp, #28]
 80061ba:	42b3      	cmp	r3, r6
 80061bc:	bfbf      	itttt	lt
 80061be:	9b07      	ldrlt	r3, [sp, #28]
 80061c0:	9607      	strlt	r6, [sp, #28]
 80061c2:	1af2      	sublt	r2, r6, r3
 80061c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80061c6:	bfb6      	itet	lt
 80061c8:	189b      	addlt	r3, r3, r2
 80061ca:	1b9e      	subge	r6, r3, r6
 80061cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	bfb8      	it	lt
 80061d2:	2600      	movlt	r6, #0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bfb7      	itett	lt
 80061d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80061dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80061e0:	1a9d      	sublt	r5, r3, r2
 80061e2:	2300      	movlt	r3, #0
 80061e4:	e734      	b.n	8006050 <_dtoa_r+0x720>
 80061e6:	9e07      	ldr	r6, [sp, #28]
 80061e8:	9d04      	ldr	r5, [sp, #16]
 80061ea:	9f08      	ldr	r7, [sp, #32]
 80061ec:	e73b      	b.n	8006066 <_dtoa_r+0x736>
 80061ee:	9a07      	ldr	r2, [sp, #28]
 80061f0:	e767      	b.n	80060c2 <_dtoa_r+0x792>
 80061f2:	9b06      	ldr	r3, [sp, #24]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	dc18      	bgt.n	800622a <_dtoa_r+0x8fa>
 80061f8:	f1ba 0f00 	cmp.w	sl, #0
 80061fc:	d115      	bne.n	800622a <_dtoa_r+0x8fa>
 80061fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006202:	b993      	cbnz	r3, 800622a <_dtoa_r+0x8fa>
 8006204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006208:	0d1b      	lsrs	r3, r3, #20
 800620a:	051b      	lsls	r3, r3, #20
 800620c:	b183      	cbz	r3, 8006230 <_dtoa_r+0x900>
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	3301      	adds	r3, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	9b05      	ldr	r3, [sp, #20]
 8006216:	3301      	adds	r3, #1
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	f04f 0801 	mov.w	r8, #1
 800621e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	f47f af6a 	bne.w	80060fa <_dtoa_r+0x7ca>
 8006226:	2001      	movs	r0, #1
 8006228:	e76f      	b.n	800610a <_dtoa_r+0x7da>
 800622a:	f04f 0800 	mov.w	r8, #0
 800622e:	e7f6      	b.n	800621e <_dtoa_r+0x8ee>
 8006230:	4698      	mov	r8, r3
 8006232:	e7f4      	b.n	800621e <_dtoa_r+0x8ee>
 8006234:	f43f af7d 	beq.w	8006132 <_dtoa_r+0x802>
 8006238:	4618      	mov	r0, r3
 800623a:	301c      	adds	r0, #28
 800623c:	e772      	b.n	8006124 <_dtoa_r+0x7f4>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	dc37      	bgt.n	80062b4 <_dtoa_r+0x984>
 8006244:	9b06      	ldr	r3, [sp, #24]
 8006246:	2b02      	cmp	r3, #2
 8006248:	dd34      	ble.n	80062b4 <_dtoa_r+0x984>
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	9302      	str	r3, [sp, #8]
 800624e:	9b02      	ldr	r3, [sp, #8]
 8006250:	b96b      	cbnz	r3, 800626e <_dtoa_r+0x93e>
 8006252:	4631      	mov	r1, r6
 8006254:	2205      	movs	r2, #5
 8006256:	4620      	mov	r0, r4
 8006258:	f000 face 	bl	80067f8 <__multadd>
 800625c:	4601      	mov	r1, r0
 800625e:	4606      	mov	r6, r0
 8006260:	ee18 0a10 	vmov	r0, s16
 8006264:	f000 fce8 	bl	8006c38 <__mcmp>
 8006268:	2800      	cmp	r0, #0
 800626a:	f73f adbb 	bgt.w	8005de4 <_dtoa_r+0x4b4>
 800626e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006270:	9d01      	ldr	r5, [sp, #4]
 8006272:	43db      	mvns	r3, r3
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	f04f 0800 	mov.w	r8, #0
 800627a:	4631      	mov	r1, r6
 800627c:	4620      	mov	r0, r4
 800627e:	f000 fa99 	bl	80067b4 <_Bfree>
 8006282:	2f00      	cmp	r7, #0
 8006284:	f43f aea4 	beq.w	8005fd0 <_dtoa_r+0x6a0>
 8006288:	f1b8 0f00 	cmp.w	r8, #0
 800628c:	d005      	beq.n	800629a <_dtoa_r+0x96a>
 800628e:	45b8      	cmp	r8, r7
 8006290:	d003      	beq.n	800629a <_dtoa_r+0x96a>
 8006292:	4641      	mov	r1, r8
 8006294:	4620      	mov	r0, r4
 8006296:	f000 fa8d 	bl	80067b4 <_Bfree>
 800629a:	4639      	mov	r1, r7
 800629c:	4620      	mov	r0, r4
 800629e:	f000 fa89 	bl	80067b4 <_Bfree>
 80062a2:	e695      	b.n	8005fd0 <_dtoa_r+0x6a0>
 80062a4:	2600      	movs	r6, #0
 80062a6:	4637      	mov	r7, r6
 80062a8:	e7e1      	b.n	800626e <_dtoa_r+0x93e>
 80062aa:	9700      	str	r7, [sp, #0]
 80062ac:	4637      	mov	r7, r6
 80062ae:	e599      	b.n	8005de4 <_dtoa_r+0x4b4>
 80062b0:	40240000 	.word	0x40240000
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80ca 	beq.w	8006450 <_dtoa_r+0xb20>
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	9302      	str	r3, [sp, #8]
 80062c0:	2d00      	cmp	r5, #0
 80062c2:	dd05      	ble.n	80062d0 <_dtoa_r+0x9a0>
 80062c4:	4639      	mov	r1, r7
 80062c6:	462a      	mov	r2, r5
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fc45 	bl	8006b58 <__lshift>
 80062ce:	4607      	mov	r7, r0
 80062d0:	f1b8 0f00 	cmp.w	r8, #0
 80062d4:	d05b      	beq.n	800638e <_dtoa_r+0xa5e>
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fa2b 	bl	8006734 <_Balloc>
 80062de:	4605      	mov	r5, r0
 80062e0:	b928      	cbnz	r0, 80062ee <_dtoa_r+0x9be>
 80062e2:	4b87      	ldr	r3, [pc, #540]	; (8006500 <_dtoa_r+0xbd0>)
 80062e4:	4602      	mov	r2, r0
 80062e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062ea:	f7ff bb3b 	b.w	8005964 <_dtoa_r+0x34>
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	3202      	adds	r2, #2
 80062f2:	0092      	lsls	r2, r2, #2
 80062f4:	f107 010c 	add.w	r1, r7, #12
 80062f8:	300c      	adds	r0, #12
 80062fa:	f000 fa0d 	bl	8006718 <memcpy>
 80062fe:	2201      	movs	r2, #1
 8006300:	4629      	mov	r1, r5
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fc28 	bl	8006b58 <__lshift>
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	f103 0901 	add.w	r9, r3, #1
 800630e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006312:	4413      	add	r3, r2
 8006314:	9305      	str	r3, [sp, #20]
 8006316:	f00a 0301 	and.w	r3, sl, #1
 800631a:	46b8      	mov	r8, r7
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	4607      	mov	r7, r0
 8006320:	4631      	mov	r1, r6
 8006322:	ee18 0a10 	vmov	r0, s16
 8006326:	f7ff fa75 	bl	8005814 <quorem>
 800632a:	4641      	mov	r1, r8
 800632c:	9002      	str	r0, [sp, #8]
 800632e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006332:	ee18 0a10 	vmov	r0, s16
 8006336:	f000 fc7f 	bl	8006c38 <__mcmp>
 800633a:	463a      	mov	r2, r7
 800633c:	9003      	str	r0, [sp, #12]
 800633e:	4631      	mov	r1, r6
 8006340:	4620      	mov	r0, r4
 8006342:	f000 fc95 	bl	8006c70 <__mdiff>
 8006346:	68c2      	ldr	r2, [r0, #12]
 8006348:	f109 3bff 	add.w	fp, r9, #4294967295
 800634c:	4605      	mov	r5, r0
 800634e:	bb02      	cbnz	r2, 8006392 <_dtoa_r+0xa62>
 8006350:	4601      	mov	r1, r0
 8006352:	ee18 0a10 	vmov	r0, s16
 8006356:	f000 fc6f 	bl	8006c38 <__mcmp>
 800635a:	4602      	mov	r2, r0
 800635c:	4629      	mov	r1, r5
 800635e:	4620      	mov	r0, r4
 8006360:	9207      	str	r2, [sp, #28]
 8006362:	f000 fa27 	bl	80067b4 <_Bfree>
 8006366:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800636a:	ea43 0102 	orr.w	r1, r3, r2
 800636e:	9b04      	ldr	r3, [sp, #16]
 8006370:	430b      	orrs	r3, r1
 8006372:	464d      	mov	r5, r9
 8006374:	d10f      	bne.n	8006396 <_dtoa_r+0xa66>
 8006376:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800637a:	d02a      	beq.n	80063d2 <_dtoa_r+0xaa2>
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	dd02      	ble.n	8006388 <_dtoa_r+0xa58>
 8006382:	9b02      	ldr	r3, [sp, #8]
 8006384:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006388:	f88b a000 	strb.w	sl, [fp]
 800638c:	e775      	b.n	800627a <_dtoa_r+0x94a>
 800638e:	4638      	mov	r0, r7
 8006390:	e7ba      	b.n	8006308 <_dtoa_r+0x9d8>
 8006392:	2201      	movs	r2, #1
 8006394:	e7e2      	b.n	800635c <_dtoa_r+0xa2c>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	db04      	blt.n	80063a6 <_dtoa_r+0xa76>
 800639c:	9906      	ldr	r1, [sp, #24]
 800639e:	430b      	orrs	r3, r1
 80063a0:	9904      	ldr	r1, [sp, #16]
 80063a2:	430b      	orrs	r3, r1
 80063a4:	d122      	bne.n	80063ec <_dtoa_r+0xabc>
 80063a6:	2a00      	cmp	r2, #0
 80063a8:	ddee      	ble.n	8006388 <_dtoa_r+0xa58>
 80063aa:	ee18 1a10 	vmov	r1, s16
 80063ae:	2201      	movs	r2, #1
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fbd1 	bl	8006b58 <__lshift>
 80063b6:	4631      	mov	r1, r6
 80063b8:	ee08 0a10 	vmov	s16, r0
 80063bc:	f000 fc3c 	bl	8006c38 <__mcmp>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	dc03      	bgt.n	80063cc <_dtoa_r+0xa9c>
 80063c4:	d1e0      	bne.n	8006388 <_dtoa_r+0xa58>
 80063c6:	f01a 0f01 	tst.w	sl, #1
 80063ca:	d0dd      	beq.n	8006388 <_dtoa_r+0xa58>
 80063cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063d0:	d1d7      	bne.n	8006382 <_dtoa_r+0xa52>
 80063d2:	2339      	movs	r3, #57	; 0x39
 80063d4:	f88b 3000 	strb.w	r3, [fp]
 80063d8:	462b      	mov	r3, r5
 80063da:	461d      	mov	r5, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063e2:	2a39      	cmp	r2, #57	; 0x39
 80063e4:	d071      	beq.n	80064ca <_dtoa_r+0xb9a>
 80063e6:	3201      	adds	r2, #1
 80063e8:	701a      	strb	r2, [r3, #0]
 80063ea:	e746      	b.n	800627a <_dtoa_r+0x94a>
 80063ec:	2a00      	cmp	r2, #0
 80063ee:	dd07      	ble.n	8006400 <_dtoa_r+0xad0>
 80063f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80063f4:	d0ed      	beq.n	80063d2 <_dtoa_r+0xaa2>
 80063f6:	f10a 0301 	add.w	r3, sl, #1
 80063fa:	f88b 3000 	strb.w	r3, [fp]
 80063fe:	e73c      	b.n	800627a <_dtoa_r+0x94a>
 8006400:	9b05      	ldr	r3, [sp, #20]
 8006402:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006406:	4599      	cmp	r9, r3
 8006408:	d047      	beq.n	800649a <_dtoa_r+0xb6a>
 800640a:	ee18 1a10 	vmov	r1, s16
 800640e:	2300      	movs	r3, #0
 8006410:	220a      	movs	r2, #10
 8006412:	4620      	mov	r0, r4
 8006414:	f000 f9f0 	bl	80067f8 <__multadd>
 8006418:	45b8      	cmp	r8, r7
 800641a:	ee08 0a10 	vmov	s16, r0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	f04f 020a 	mov.w	r2, #10
 8006426:	4641      	mov	r1, r8
 8006428:	4620      	mov	r0, r4
 800642a:	d106      	bne.n	800643a <_dtoa_r+0xb0a>
 800642c:	f000 f9e4 	bl	80067f8 <__multadd>
 8006430:	4680      	mov	r8, r0
 8006432:	4607      	mov	r7, r0
 8006434:	f109 0901 	add.w	r9, r9, #1
 8006438:	e772      	b.n	8006320 <_dtoa_r+0x9f0>
 800643a:	f000 f9dd 	bl	80067f8 <__multadd>
 800643e:	4639      	mov	r1, r7
 8006440:	4680      	mov	r8, r0
 8006442:	2300      	movs	r3, #0
 8006444:	220a      	movs	r2, #10
 8006446:	4620      	mov	r0, r4
 8006448:	f000 f9d6 	bl	80067f8 <__multadd>
 800644c:	4607      	mov	r7, r0
 800644e:	e7f1      	b.n	8006434 <_dtoa_r+0xb04>
 8006450:	9b03      	ldr	r3, [sp, #12]
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	9d01      	ldr	r5, [sp, #4]
 8006456:	ee18 0a10 	vmov	r0, s16
 800645a:	4631      	mov	r1, r6
 800645c:	f7ff f9da 	bl	8005814 <quorem>
 8006460:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006464:	9b01      	ldr	r3, [sp, #4]
 8006466:	f805 ab01 	strb.w	sl, [r5], #1
 800646a:	1aea      	subs	r2, r5, r3
 800646c:	9b02      	ldr	r3, [sp, #8]
 800646e:	4293      	cmp	r3, r2
 8006470:	dd09      	ble.n	8006486 <_dtoa_r+0xb56>
 8006472:	ee18 1a10 	vmov	r1, s16
 8006476:	2300      	movs	r3, #0
 8006478:	220a      	movs	r2, #10
 800647a:	4620      	mov	r0, r4
 800647c:	f000 f9bc 	bl	80067f8 <__multadd>
 8006480:	ee08 0a10 	vmov	s16, r0
 8006484:	e7e7      	b.n	8006456 <_dtoa_r+0xb26>
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	2b00      	cmp	r3, #0
 800648a:	bfc8      	it	gt
 800648c:	461d      	movgt	r5, r3
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	bfd8      	it	le
 8006492:	2501      	movle	r5, #1
 8006494:	441d      	add	r5, r3
 8006496:	f04f 0800 	mov.w	r8, #0
 800649a:	ee18 1a10 	vmov	r1, s16
 800649e:	2201      	movs	r2, #1
 80064a0:	4620      	mov	r0, r4
 80064a2:	f000 fb59 	bl	8006b58 <__lshift>
 80064a6:	4631      	mov	r1, r6
 80064a8:	ee08 0a10 	vmov	s16, r0
 80064ac:	f000 fbc4 	bl	8006c38 <__mcmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	dc91      	bgt.n	80063d8 <_dtoa_r+0xaa8>
 80064b4:	d102      	bne.n	80064bc <_dtoa_r+0xb8c>
 80064b6:	f01a 0f01 	tst.w	sl, #1
 80064ba:	d18d      	bne.n	80063d8 <_dtoa_r+0xaa8>
 80064bc:	462b      	mov	r3, r5
 80064be:	461d      	mov	r5, r3
 80064c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064c4:	2a30      	cmp	r2, #48	; 0x30
 80064c6:	d0fa      	beq.n	80064be <_dtoa_r+0xb8e>
 80064c8:	e6d7      	b.n	800627a <_dtoa_r+0x94a>
 80064ca:	9a01      	ldr	r2, [sp, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d184      	bne.n	80063da <_dtoa_r+0xaaa>
 80064d0:	9b00      	ldr	r3, [sp, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	2331      	movs	r3, #49	; 0x31
 80064d8:	7013      	strb	r3, [r2, #0]
 80064da:	e6ce      	b.n	800627a <_dtoa_r+0x94a>
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <_dtoa_r+0xbd4>)
 80064de:	f7ff ba95 	b.w	8005a0c <_dtoa_r+0xdc>
 80064e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f aa6e 	bne.w	80059c6 <_dtoa_r+0x96>
 80064ea:	4b07      	ldr	r3, [pc, #28]	; (8006508 <_dtoa_r+0xbd8>)
 80064ec:	f7ff ba8e 	b.w	8005a0c <_dtoa_r+0xdc>
 80064f0:	9b02      	ldr	r3, [sp, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	dcae      	bgt.n	8006454 <_dtoa_r+0xb24>
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	f73f aea8 	bgt.w	800624e <_dtoa_r+0x91e>
 80064fe:	e7a9      	b.n	8006454 <_dtoa_r+0xb24>
 8006500:	08007a97 	.word	0x08007a97
 8006504:	080079f4 	.word	0x080079f4
 8006508:	08007a18 	.word	0x08007a18

0800650c <std>:
 800650c:	2300      	movs	r3, #0
 800650e:	b510      	push	{r4, lr}
 8006510:	4604      	mov	r4, r0
 8006512:	e9c0 3300 	strd	r3, r3, [r0]
 8006516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800651a:	6083      	str	r3, [r0, #8]
 800651c:	8181      	strh	r1, [r0, #12]
 800651e:	6643      	str	r3, [r0, #100]	; 0x64
 8006520:	81c2      	strh	r2, [r0, #14]
 8006522:	6183      	str	r3, [r0, #24]
 8006524:	4619      	mov	r1, r3
 8006526:	2208      	movs	r2, #8
 8006528:	305c      	adds	r0, #92	; 0x5c
 800652a:	f7fe fce9 	bl	8004f00 <memset>
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <std+0x38>)
 8006530:	6263      	str	r3, [r4, #36]	; 0x24
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <std+0x3c>)
 8006534:	62a3      	str	r3, [r4, #40]	; 0x28
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <std+0x40>)
 8006538:	62e3      	str	r3, [r4, #44]	; 0x2c
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <std+0x44>)
 800653c:	6224      	str	r4, [r4, #32]
 800653e:	6323      	str	r3, [r4, #48]	; 0x30
 8006540:	bd10      	pop	{r4, pc}
 8006542:	bf00      	nop
 8006544:	080072fd 	.word	0x080072fd
 8006548:	0800731f 	.word	0x0800731f
 800654c:	08007357 	.word	0x08007357
 8006550:	0800737b 	.word	0x0800737b

08006554 <_cleanup_r>:
 8006554:	4901      	ldr	r1, [pc, #4]	; (800655c <_cleanup_r+0x8>)
 8006556:	f000 b8af 	b.w	80066b8 <_fwalk_reent>
 800655a:	bf00      	nop
 800655c:	08007691 	.word	0x08007691

08006560 <__sfmoreglue>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	2268      	movs	r2, #104	; 0x68
 8006564:	1e4d      	subs	r5, r1, #1
 8006566:	4355      	muls	r5, r2
 8006568:	460e      	mov	r6, r1
 800656a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800656e:	f000 fce7 	bl	8006f40 <_malloc_r>
 8006572:	4604      	mov	r4, r0
 8006574:	b140      	cbz	r0, 8006588 <__sfmoreglue+0x28>
 8006576:	2100      	movs	r1, #0
 8006578:	e9c0 1600 	strd	r1, r6, [r0]
 800657c:	300c      	adds	r0, #12
 800657e:	60a0      	str	r0, [r4, #8]
 8006580:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006584:	f7fe fcbc 	bl	8004f00 <memset>
 8006588:	4620      	mov	r0, r4
 800658a:	bd70      	pop	{r4, r5, r6, pc}

0800658c <__sfp_lock_acquire>:
 800658c:	4801      	ldr	r0, [pc, #4]	; (8006594 <__sfp_lock_acquire+0x8>)
 800658e:	f000 b8b8 	b.w	8006702 <__retarget_lock_acquire_recursive>
 8006592:	bf00      	nop
 8006594:	200002e1 	.word	0x200002e1

08006598 <__sfp_lock_release>:
 8006598:	4801      	ldr	r0, [pc, #4]	; (80065a0 <__sfp_lock_release+0x8>)
 800659a:	f000 b8b3 	b.w	8006704 <__retarget_lock_release_recursive>
 800659e:	bf00      	nop
 80065a0:	200002e1 	.word	0x200002e1

080065a4 <__sinit_lock_acquire>:
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <__sinit_lock_acquire+0x8>)
 80065a6:	f000 b8ac 	b.w	8006702 <__retarget_lock_acquire_recursive>
 80065aa:	bf00      	nop
 80065ac:	200002e2 	.word	0x200002e2

080065b0 <__sinit_lock_release>:
 80065b0:	4801      	ldr	r0, [pc, #4]	; (80065b8 <__sinit_lock_release+0x8>)
 80065b2:	f000 b8a7 	b.w	8006704 <__retarget_lock_release_recursive>
 80065b6:	bf00      	nop
 80065b8:	200002e2 	.word	0x200002e2

080065bc <__sinit>:
 80065bc:	b510      	push	{r4, lr}
 80065be:	4604      	mov	r4, r0
 80065c0:	f7ff fff0 	bl	80065a4 <__sinit_lock_acquire>
 80065c4:	69a3      	ldr	r3, [r4, #24]
 80065c6:	b11b      	cbz	r3, 80065d0 <__sinit+0x14>
 80065c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065cc:	f7ff bff0 	b.w	80065b0 <__sinit_lock_release>
 80065d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065d4:	6523      	str	r3, [r4, #80]	; 0x50
 80065d6:	4b13      	ldr	r3, [pc, #76]	; (8006624 <__sinit+0x68>)
 80065d8:	4a13      	ldr	r2, [pc, #76]	; (8006628 <__sinit+0x6c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80065de:	42a3      	cmp	r3, r4
 80065e0:	bf04      	itt	eq
 80065e2:	2301      	moveq	r3, #1
 80065e4:	61a3      	streq	r3, [r4, #24]
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 f820 	bl	800662c <__sfp>
 80065ec:	6060      	str	r0, [r4, #4]
 80065ee:	4620      	mov	r0, r4
 80065f0:	f000 f81c 	bl	800662c <__sfp>
 80065f4:	60a0      	str	r0, [r4, #8]
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 f818 	bl	800662c <__sfp>
 80065fc:	2200      	movs	r2, #0
 80065fe:	60e0      	str	r0, [r4, #12]
 8006600:	2104      	movs	r1, #4
 8006602:	6860      	ldr	r0, [r4, #4]
 8006604:	f7ff ff82 	bl	800650c <std>
 8006608:	68a0      	ldr	r0, [r4, #8]
 800660a:	2201      	movs	r2, #1
 800660c:	2109      	movs	r1, #9
 800660e:	f7ff ff7d 	bl	800650c <std>
 8006612:	68e0      	ldr	r0, [r4, #12]
 8006614:	2202      	movs	r2, #2
 8006616:	2112      	movs	r1, #18
 8006618:	f7ff ff78 	bl	800650c <std>
 800661c:	2301      	movs	r3, #1
 800661e:	61a3      	str	r3, [r4, #24]
 8006620:	e7d2      	b.n	80065c8 <__sinit+0xc>
 8006622:	bf00      	nop
 8006624:	080079e0 	.word	0x080079e0
 8006628:	08006555 	.word	0x08006555

0800662c <__sfp>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	4607      	mov	r7, r0
 8006630:	f7ff ffac 	bl	800658c <__sfp_lock_acquire>
 8006634:	4b1e      	ldr	r3, [pc, #120]	; (80066b0 <__sfp+0x84>)
 8006636:	681e      	ldr	r6, [r3, #0]
 8006638:	69b3      	ldr	r3, [r6, #24]
 800663a:	b913      	cbnz	r3, 8006642 <__sfp+0x16>
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff ffbd 	bl	80065bc <__sinit>
 8006642:	3648      	adds	r6, #72	; 0x48
 8006644:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006648:	3b01      	subs	r3, #1
 800664a:	d503      	bpl.n	8006654 <__sfp+0x28>
 800664c:	6833      	ldr	r3, [r6, #0]
 800664e:	b30b      	cbz	r3, 8006694 <__sfp+0x68>
 8006650:	6836      	ldr	r6, [r6, #0]
 8006652:	e7f7      	b.n	8006644 <__sfp+0x18>
 8006654:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006658:	b9d5      	cbnz	r5, 8006690 <__sfp+0x64>
 800665a:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <__sfp+0x88>)
 800665c:	60e3      	str	r3, [r4, #12]
 800665e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006662:	6665      	str	r5, [r4, #100]	; 0x64
 8006664:	f000 f84c 	bl	8006700 <__retarget_lock_init_recursive>
 8006668:	f7ff ff96 	bl	8006598 <__sfp_lock_release>
 800666c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006670:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006674:	6025      	str	r5, [r4, #0]
 8006676:	61a5      	str	r5, [r4, #24]
 8006678:	2208      	movs	r2, #8
 800667a:	4629      	mov	r1, r5
 800667c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006680:	f7fe fc3e 	bl	8004f00 <memset>
 8006684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800668c:	4620      	mov	r0, r4
 800668e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006690:	3468      	adds	r4, #104	; 0x68
 8006692:	e7d9      	b.n	8006648 <__sfp+0x1c>
 8006694:	2104      	movs	r1, #4
 8006696:	4638      	mov	r0, r7
 8006698:	f7ff ff62 	bl	8006560 <__sfmoreglue>
 800669c:	4604      	mov	r4, r0
 800669e:	6030      	str	r0, [r6, #0]
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d1d5      	bne.n	8006650 <__sfp+0x24>
 80066a4:	f7ff ff78 	bl	8006598 <__sfp_lock_release>
 80066a8:	230c      	movs	r3, #12
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	e7ee      	b.n	800668c <__sfp+0x60>
 80066ae:	bf00      	nop
 80066b0:	080079e0 	.word	0x080079e0
 80066b4:	ffff0001 	.word	0xffff0001

080066b8 <_fwalk_reent>:
 80066b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066bc:	4606      	mov	r6, r0
 80066be:	4688      	mov	r8, r1
 80066c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80066c4:	2700      	movs	r7, #0
 80066c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066ca:	f1b9 0901 	subs.w	r9, r9, #1
 80066ce:	d505      	bpl.n	80066dc <_fwalk_reent+0x24>
 80066d0:	6824      	ldr	r4, [r4, #0]
 80066d2:	2c00      	cmp	r4, #0
 80066d4:	d1f7      	bne.n	80066c6 <_fwalk_reent+0xe>
 80066d6:	4638      	mov	r0, r7
 80066d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066dc:	89ab      	ldrh	r3, [r5, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d907      	bls.n	80066f2 <_fwalk_reent+0x3a>
 80066e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066e6:	3301      	adds	r3, #1
 80066e8:	d003      	beq.n	80066f2 <_fwalk_reent+0x3a>
 80066ea:	4629      	mov	r1, r5
 80066ec:	4630      	mov	r0, r6
 80066ee:	47c0      	blx	r8
 80066f0:	4307      	orrs	r7, r0
 80066f2:	3568      	adds	r5, #104	; 0x68
 80066f4:	e7e9      	b.n	80066ca <_fwalk_reent+0x12>
	...

080066f8 <_localeconv_r>:
 80066f8:	4800      	ldr	r0, [pc, #0]	; (80066fc <_localeconv_r+0x4>)
 80066fa:	4770      	bx	lr
 80066fc:	20000164 	.word	0x20000164

08006700 <__retarget_lock_init_recursive>:
 8006700:	4770      	bx	lr

08006702 <__retarget_lock_acquire_recursive>:
 8006702:	4770      	bx	lr

08006704 <__retarget_lock_release_recursive>:
 8006704:	4770      	bx	lr
	...

08006708 <malloc>:
 8006708:	4b02      	ldr	r3, [pc, #8]	; (8006714 <malloc+0xc>)
 800670a:	4601      	mov	r1, r0
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	f000 bc17 	b.w	8006f40 <_malloc_r>
 8006712:	bf00      	nop
 8006714:	20000010 	.word	0x20000010

08006718 <memcpy>:
 8006718:	440a      	add	r2, r1
 800671a:	4291      	cmp	r1, r2
 800671c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006720:	d100      	bne.n	8006724 <memcpy+0xc>
 8006722:	4770      	bx	lr
 8006724:	b510      	push	{r4, lr}
 8006726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800672e:	4291      	cmp	r1, r2
 8006730:	d1f9      	bne.n	8006726 <memcpy+0xe>
 8006732:	bd10      	pop	{r4, pc}

08006734 <_Balloc>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006738:	4604      	mov	r4, r0
 800673a:	460d      	mov	r5, r1
 800673c:	b976      	cbnz	r6, 800675c <_Balloc+0x28>
 800673e:	2010      	movs	r0, #16
 8006740:	f7ff ffe2 	bl	8006708 <malloc>
 8006744:	4602      	mov	r2, r0
 8006746:	6260      	str	r0, [r4, #36]	; 0x24
 8006748:	b920      	cbnz	r0, 8006754 <_Balloc+0x20>
 800674a:	4b18      	ldr	r3, [pc, #96]	; (80067ac <_Balloc+0x78>)
 800674c:	4818      	ldr	r0, [pc, #96]	; (80067b0 <_Balloc+0x7c>)
 800674e:	2166      	movs	r1, #102	; 0x66
 8006750:	f000 feea 	bl	8007528 <__assert_func>
 8006754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006758:	6006      	str	r6, [r0, #0]
 800675a:	60c6      	str	r6, [r0, #12]
 800675c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800675e:	68f3      	ldr	r3, [r6, #12]
 8006760:	b183      	cbz	r3, 8006784 <_Balloc+0x50>
 8006762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800676a:	b9b8      	cbnz	r0, 800679c <_Balloc+0x68>
 800676c:	2101      	movs	r1, #1
 800676e:	fa01 f605 	lsl.w	r6, r1, r5
 8006772:	1d72      	adds	r2, r6, #5
 8006774:	0092      	lsls	r2, r2, #2
 8006776:	4620      	mov	r0, r4
 8006778:	f000 fb60 	bl	8006e3c <_calloc_r>
 800677c:	b160      	cbz	r0, 8006798 <_Balloc+0x64>
 800677e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006782:	e00e      	b.n	80067a2 <_Balloc+0x6e>
 8006784:	2221      	movs	r2, #33	; 0x21
 8006786:	2104      	movs	r1, #4
 8006788:	4620      	mov	r0, r4
 800678a:	f000 fb57 	bl	8006e3c <_calloc_r>
 800678e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006790:	60f0      	str	r0, [r6, #12]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1e4      	bne.n	8006762 <_Balloc+0x2e>
 8006798:	2000      	movs	r0, #0
 800679a:	bd70      	pop	{r4, r5, r6, pc}
 800679c:	6802      	ldr	r2, [r0, #0]
 800679e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80067a2:	2300      	movs	r3, #0
 80067a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067a8:	e7f7      	b.n	800679a <_Balloc+0x66>
 80067aa:	bf00      	nop
 80067ac:	08007a25 	.word	0x08007a25
 80067b0:	08007b08 	.word	0x08007b08

080067b4 <_Bfree>:
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067b8:	4605      	mov	r5, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	b976      	cbnz	r6, 80067dc <_Bfree+0x28>
 80067be:	2010      	movs	r0, #16
 80067c0:	f7ff ffa2 	bl	8006708 <malloc>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6268      	str	r0, [r5, #36]	; 0x24
 80067c8:	b920      	cbnz	r0, 80067d4 <_Bfree+0x20>
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <_Bfree+0x3c>)
 80067cc:	4809      	ldr	r0, [pc, #36]	; (80067f4 <_Bfree+0x40>)
 80067ce:	218a      	movs	r1, #138	; 0x8a
 80067d0:	f000 feaa 	bl	8007528 <__assert_func>
 80067d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067d8:	6006      	str	r6, [r0, #0]
 80067da:	60c6      	str	r6, [r0, #12]
 80067dc:	b13c      	cbz	r4, 80067ee <_Bfree+0x3a>
 80067de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067e0:	6862      	ldr	r2, [r4, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067e8:	6021      	str	r1, [r4, #0]
 80067ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	08007a25 	.word	0x08007a25
 80067f4:	08007b08 	.word	0x08007b08

080067f8 <__multadd>:
 80067f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fc:	690d      	ldr	r5, [r1, #16]
 80067fe:	4607      	mov	r7, r0
 8006800:	460c      	mov	r4, r1
 8006802:	461e      	mov	r6, r3
 8006804:	f101 0c14 	add.w	ip, r1, #20
 8006808:	2000      	movs	r0, #0
 800680a:	f8dc 3000 	ldr.w	r3, [ip]
 800680e:	b299      	uxth	r1, r3
 8006810:	fb02 6101 	mla	r1, r2, r1, r6
 8006814:	0c1e      	lsrs	r6, r3, #16
 8006816:	0c0b      	lsrs	r3, r1, #16
 8006818:	fb02 3306 	mla	r3, r2, r6, r3
 800681c:	b289      	uxth	r1, r1
 800681e:	3001      	adds	r0, #1
 8006820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006824:	4285      	cmp	r5, r0
 8006826:	f84c 1b04 	str.w	r1, [ip], #4
 800682a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800682e:	dcec      	bgt.n	800680a <__multadd+0x12>
 8006830:	b30e      	cbz	r6, 8006876 <__multadd+0x7e>
 8006832:	68a3      	ldr	r3, [r4, #8]
 8006834:	42ab      	cmp	r3, r5
 8006836:	dc19      	bgt.n	800686c <__multadd+0x74>
 8006838:	6861      	ldr	r1, [r4, #4]
 800683a:	4638      	mov	r0, r7
 800683c:	3101      	adds	r1, #1
 800683e:	f7ff ff79 	bl	8006734 <_Balloc>
 8006842:	4680      	mov	r8, r0
 8006844:	b928      	cbnz	r0, 8006852 <__multadd+0x5a>
 8006846:	4602      	mov	r2, r0
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <__multadd+0x84>)
 800684a:	480d      	ldr	r0, [pc, #52]	; (8006880 <__multadd+0x88>)
 800684c:	21b5      	movs	r1, #181	; 0xb5
 800684e:	f000 fe6b 	bl	8007528 <__assert_func>
 8006852:	6922      	ldr	r2, [r4, #16]
 8006854:	3202      	adds	r2, #2
 8006856:	f104 010c 	add.w	r1, r4, #12
 800685a:	0092      	lsls	r2, r2, #2
 800685c:	300c      	adds	r0, #12
 800685e:	f7ff ff5b 	bl	8006718 <memcpy>
 8006862:	4621      	mov	r1, r4
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff ffa5 	bl	80067b4 <_Bfree>
 800686a:	4644      	mov	r4, r8
 800686c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006870:	3501      	adds	r5, #1
 8006872:	615e      	str	r6, [r3, #20]
 8006874:	6125      	str	r5, [r4, #16]
 8006876:	4620      	mov	r0, r4
 8006878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800687c:	08007a97 	.word	0x08007a97
 8006880:	08007b08 	.word	0x08007b08

08006884 <__hi0bits>:
 8006884:	0c03      	lsrs	r3, r0, #16
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	b9d3      	cbnz	r3, 80068c0 <__hi0bits+0x3c>
 800688a:	0400      	lsls	r0, r0, #16
 800688c:	2310      	movs	r3, #16
 800688e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006892:	bf04      	itt	eq
 8006894:	0200      	lsleq	r0, r0, #8
 8006896:	3308      	addeq	r3, #8
 8006898:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800689c:	bf04      	itt	eq
 800689e:	0100      	lsleq	r0, r0, #4
 80068a0:	3304      	addeq	r3, #4
 80068a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068a6:	bf04      	itt	eq
 80068a8:	0080      	lsleq	r0, r0, #2
 80068aa:	3302      	addeq	r3, #2
 80068ac:	2800      	cmp	r0, #0
 80068ae:	db05      	blt.n	80068bc <__hi0bits+0x38>
 80068b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80068b4:	f103 0301 	add.w	r3, r3, #1
 80068b8:	bf08      	it	eq
 80068ba:	2320      	moveq	r3, #32
 80068bc:	4618      	mov	r0, r3
 80068be:	4770      	bx	lr
 80068c0:	2300      	movs	r3, #0
 80068c2:	e7e4      	b.n	800688e <__hi0bits+0xa>

080068c4 <__lo0bits>:
 80068c4:	6803      	ldr	r3, [r0, #0]
 80068c6:	f013 0207 	ands.w	r2, r3, #7
 80068ca:	4601      	mov	r1, r0
 80068cc:	d00b      	beq.n	80068e6 <__lo0bits+0x22>
 80068ce:	07da      	lsls	r2, r3, #31
 80068d0:	d423      	bmi.n	800691a <__lo0bits+0x56>
 80068d2:	0798      	lsls	r0, r3, #30
 80068d4:	bf49      	itett	mi
 80068d6:	085b      	lsrmi	r3, r3, #1
 80068d8:	089b      	lsrpl	r3, r3, #2
 80068da:	2001      	movmi	r0, #1
 80068dc:	600b      	strmi	r3, [r1, #0]
 80068de:	bf5c      	itt	pl
 80068e0:	600b      	strpl	r3, [r1, #0]
 80068e2:	2002      	movpl	r0, #2
 80068e4:	4770      	bx	lr
 80068e6:	b298      	uxth	r0, r3
 80068e8:	b9a8      	cbnz	r0, 8006916 <__lo0bits+0x52>
 80068ea:	0c1b      	lsrs	r3, r3, #16
 80068ec:	2010      	movs	r0, #16
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	b90a      	cbnz	r2, 80068f6 <__lo0bits+0x32>
 80068f2:	3008      	adds	r0, #8
 80068f4:	0a1b      	lsrs	r3, r3, #8
 80068f6:	071a      	lsls	r2, r3, #28
 80068f8:	bf04      	itt	eq
 80068fa:	091b      	lsreq	r3, r3, #4
 80068fc:	3004      	addeq	r0, #4
 80068fe:	079a      	lsls	r2, r3, #30
 8006900:	bf04      	itt	eq
 8006902:	089b      	lsreq	r3, r3, #2
 8006904:	3002      	addeq	r0, #2
 8006906:	07da      	lsls	r2, r3, #31
 8006908:	d403      	bmi.n	8006912 <__lo0bits+0x4e>
 800690a:	085b      	lsrs	r3, r3, #1
 800690c:	f100 0001 	add.w	r0, r0, #1
 8006910:	d005      	beq.n	800691e <__lo0bits+0x5a>
 8006912:	600b      	str	r3, [r1, #0]
 8006914:	4770      	bx	lr
 8006916:	4610      	mov	r0, r2
 8006918:	e7e9      	b.n	80068ee <__lo0bits+0x2a>
 800691a:	2000      	movs	r0, #0
 800691c:	4770      	bx	lr
 800691e:	2020      	movs	r0, #32
 8006920:	4770      	bx	lr
	...

08006924 <__i2b>:
 8006924:	b510      	push	{r4, lr}
 8006926:	460c      	mov	r4, r1
 8006928:	2101      	movs	r1, #1
 800692a:	f7ff ff03 	bl	8006734 <_Balloc>
 800692e:	4602      	mov	r2, r0
 8006930:	b928      	cbnz	r0, 800693e <__i2b+0x1a>
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <__i2b+0x24>)
 8006934:	4805      	ldr	r0, [pc, #20]	; (800694c <__i2b+0x28>)
 8006936:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800693a:	f000 fdf5 	bl	8007528 <__assert_func>
 800693e:	2301      	movs	r3, #1
 8006940:	6144      	str	r4, [r0, #20]
 8006942:	6103      	str	r3, [r0, #16]
 8006944:	bd10      	pop	{r4, pc}
 8006946:	bf00      	nop
 8006948:	08007a97 	.word	0x08007a97
 800694c:	08007b08 	.word	0x08007b08

08006950 <__multiply>:
 8006950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006954:	4691      	mov	r9, r2
 8006956:	690a      	ldr	r2, [r1, #16]
 8006958:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800695c:	429a      	cmp	r2, r3
 800695e:	bfb8      	it	lt
 8006960:	460b      	movlt	r3, r1
 8006962:	460c      	mov	r4, r1
 8006964:	bfbc      	itt	lt
 8006966:	464c      	movlt	r4, r9
 8006968:	4699      	movlt	r9, r3
 800696a:	6927      	ldr	r7, [r4, #16]
 800696c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006970:	68a3      	ldr	r3, [r4, #8]
 8006972:	6861      	ldr	r1, [r4, #4]
 8006974:	eb07 060a 	add.w	r6, r7, sl
 8006978:	42b3      	cmp	r3, r6
 800697a:	b085      	sub	sp, #20
 800697c:	bfb8      	it	lt
 800697e:	3101      	addlt	r1, #1
 8006980:	f7ff fed8 	bl	8006734 <_Balloc>
 8006984:	b930      	cbnz	r0, 8006994 <__multiply+0x44>
 8006986:	4602      	mov	r2, r0
 8006988:	4b44      	ldr	r3, [pc, #272]	; (8006a9c <__multiply+0x14c>)
 800698a:	4845      	ldr	r0, [pc, #276]	; (8006aa0 <__multiply+0x150>)
 800698c:	f240 115d 	movw	r1, #349	; 0x15d
 8006990:	f000 fdca 	bl	8007528 <__assert_func>
 8006994:	f100 0514 	add.w	r5, r0, #20
 8006998:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800699c:	462b      	mov	r3, r5
 800699e:	2200      	movs	r2, #0
 80069a0:	4543      	cmp	r3, r8
 80069a2:	d321      	bcc.n	80069e8 <__multiply+0x98>
 80069a4:	f104 0314 	add.w	r3, r4, #20
 80069a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80069ac:	f109 0314 	add.w	r3, r9, #20
 80069b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80069b4:	9202      	str	r2, [sp, #8]
 80069b6:	1b3a      	subs	r2, r7, r4
 80069b8:	3a15      	subs	r2, #21
 80069ba:	f022 0203 	bic.w	r2, r2, #3
 80069be:	3204      	adds	r2, #4
 80069c0:	f104 0115 	add.w	r1, r4, #21
 80069c4:	428f      	cmp	r7, r1
 80069c6:	bf38      	it	cc
 80069c8:	2204      	movcc	r2, #4
 80069ca:	9201      	str	r2, [sp, #4]
 80069cc:	9a02      	ldr	r2, [sp, #8]
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d80c      	bhi.n	80069ee <__multiply+0x9e>
 80069d4:	2e00      	cmp	r6, #0
 80069d6:	dd03      	ble.n	80069e0 <__multiply+0x90>
 80069d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d05a      	beq.n	8006a96 <__multiply+0x146>
 80069e0:	6106      	str	r6, [r0, #16]
 80069e2:	b005      	add	sp, #20
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	f843 2b04 	str.w	r2, [r3], #4
 80069ec:	e7d8      	b.n	80069a0 <__multiply+0x50>
 80069ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80069f2:	f1ba 0f00 	cmp.w	sl, #0
 80069f6:	d024      	beq.n	8006a42 <__multiply+0xf2>
 80069f8:	f104 0e14 	add.w	lr, r4, #20
 80069fc:	46a9      	mov	r9, r5
 80069fe:	f04f 0c00 	mov.w	ip, #0
 8006a02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a06:	f8d9 1000 	ldr.w	r1, [r9]
 8006a0a:	fa1f fb82 	uxth.w	fp, r2
 8006a0e:	b289      	uxth	r1, r1
 8006a10:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a18:	f8d9 2000 	ldr.w	r2, [r9]
 8006a1c:	4461      	add	r1, ip
 8006a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a22:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a2a:	b289      	uxth	r1, r1
 8006a2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a30:	4577      	cmp	r7, lr
 8006a32:	f849 1b04 	str.w	r1, [r9], #4
 8006a36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a3a:	d8e2      	bhi.n	8006a02 <__multiply+0xb2>
 8006a3c:	9a01      	ldr	r2, [sp, #4]
 8006a3e:	f845 c002 	str.w	ip, [r5, r2]
 8006a42:	9a03      	ldr	r2, [sp, #12]
 8006a44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	f1b9 0f00 	cmp.w	r9, #0
 8006a4e:	d020      	beq.n	8006a92 <__multiply+0x142>
 8006a50:	6829      	ldr	r1, [r5, #0]
 8006a52:	f104 0c14 	add.w	ip, r4, #20
 8006a56:	46ae      	mov	lr, r5
 8006a58:	f04f 0a00 	mov.w	sl, #0
 8006a5c:	f8bc b000 	ldrh.w	fp, [ip]
 8006a60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a64:	fb09 220b 	mla	r2, r9, fp, r2
 8006a68:	4492      	add	sl, r2
 8006a6a:	b289      	uxth	r1, r1
 8006a6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a70:	f84e 1b04 	str.w	r1, [lr], #4
 8006a74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a78:	f8be 1000 	ldrh.w	r1, [lr]
 8006a7c:	0c12      	lsrs	r2, r2, #16
 8006a7e:	fb09 1102 	mla	r1, r9, r2, r1
 8006a82:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a86:	4567      	cmp	r7, ip
 8006a88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a8c:	d8e6      	bhi.n	8006a5c <__multiply+0x10c>
 8006a8e:	9a01      	ldr	r2, [sp, #4]
 8006a90:	50a9      	str	r1, [r5, r2]
 8006a92:	3504      	adds	r5, #4
 8006a94:	e79a      	b.n	80069cc <__multiply+0x7c>
 8006a96:	3e01      	subs	r6, #1
 8006a98:	e79c      	b.n	80069d4 <__multiply+0x84>
 8006a9a:	bf00      	nop
 8006a9c:	08007a97 	.word	0x08007a97
 8006aa0:	08007b08 	.word	0x08007b08

08006aa4 <__pow5mult>:
 8006aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa8:	4615      	mov	r5, r2
 8006aaa:	f012 0203 	ands.w	r2, r2, #3
 8006aae:	4606      	mov	r6, r0
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	d007      	beq.n	8006ac4 <__pow5mult+0x20>
 8006ab4:	4c25      	ldr	r4, [pc, #148]	; (8006b4c <__pow5mult+0xa8>)
 8006ab6:	3a01      	subs	r2, #1
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006abe:	f7ff fe9b 	bl	80067f8 <__multadd>
 8006ac2:	4607      	mov	r7, r0
 8006ac4:	10ad      	asrs	r5, r5, #2
 8006ac6:	d03d      	beq.n	8006b44 <__pow5mult+0xa0>
 8006ac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006aca:	b97c      	cbnz	r4, 8006aec <__pow5mult+0x48>
 8006acc:	2010      	movs	r0, #16
 8006ace:	f7ff fe1b 	bl	8006708 <malloc>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	6270      	str	r0, [r6, #36]	; 0x24
 8006ad6:	b928      	cbnz	r0, 8006ae4 <__pow5mult+0x40>
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <__pow5mult+0xac>)
 8006ada:	481e      	ldr	r0, [pc, #120]	; (8006b54 <__pow5mult+0xb0>)
 8006adc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ae0:	f000 fd22 	bl	8007528 <__assert_func>
 8006ae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ae8:	6004      	str	r4, [r0, #0]
 8006aea:	60c4      	str	r4, [r0, #12]
 8006aec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006af0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006af4:	b94c      	cbnz	r4, 8006b0a <__pow5mult+0x66>
 8006af6:	f240 2171 	movw	r1, #625	; 0x271
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7ff ff12 	bl	8006924 <__i2b>
 8006b00:	2300      	movs	r3, #0
 8006b02:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b06:	4604      	mov	r4, r0
 8006b08:	6003      	str	r3, [r0, #0]
 8006b0a:	f04f 0900 	mov.w	r9, #0
 8006b0e:	07eb      	lsls	r3, r5, #31
 8006b10:	d50a      	bpl.n	8006b28 <__pow5mult+0x84>
 8006b12:	4639      	mov	r1, r7
 8006b14:	4622      	mov	r2, r4
 8006b16:	4630      	mov	r0, r6
 8006b18:	f7ff ff1a 	bl	8006950 <__multiply>
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	4680      	mov	r8, r0
 8006b20:	4630      	mov	r0, r6
 8006b22:	f7ff fe47 	bl	80067b4 <_Bfree>
 8006b26:	4647      	mov	r7, r8
 8006b28:	106d      	asrs	r5, r5, #1
 8006b2a:	d00b      	beq.n	8006b44 <__pow5mult+0xa0>
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	b938      	cbnz	r0, 8006b40 <__pow5mult+0x9c>
 8006b30:	4622      	mov	r2, r4
 8006b32:	4621      	mov	r1, r4
 8006b34:	4630      	mov	r0, r6
 8006b36:	f7ff ff0b 	bl	8006950 <__multiply>
 8006b3a:	6020      	str	r0, [r4, #0]
 8006b3c:	f8c0 9000 	str.w	r9, [r0]
 8006b40:	4604      	mov	r4, r0
 8006b42:	e7e4      	b.n	8006b0e <__pow5mult+0x6a>
 8006b44:	4638      	mov	r0, r7
 8006b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4a:	bf00      	nop
 8006b4c:	08007c58 	.word	0x08007c58
 8006b50:	08007a25 	.word	0x08007a25
 8006b54:	08007b08 	.word	0x08007b08

08006b58 <__lshift>:
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	6849      	ldr	r1, [r1, #4]
 8006b60:	6923      	ldr	r3, [r4, #16]
 8006b62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b66:	68a3      	ldr	r3, [r4, #8]
 8006b68:	4607      	mov	r7, r0
 8006b6a:	4691      	mov	r9, r2
 8006b6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b70:	f108 0601 	add.w	r6, r8, #1
 8006b74:	42b3      	cmp	r3, r6
 8006b76:	db0b      	blt.n	8006b90 <__lshift+0x38>
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f7ff fddb 	bl	8006734 <_Balloc>
 8006b7e:	4605      	mov	r5, r0
 8006b80:	b948      	cbnz	r0, 8006b96 <__lshift+0x3e>
 8006b82:	4602      	mov	r2, r0
 8006b84:	4b2a      	ldr	r3, [pc, #168]	; (8006c30 <__lshift+0xd8>)
 8006b86:	482b      	ldr	r0, [pc, #172]	; (8006c34 <__lshift+0xdc>)
 8006b88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b8c:	f000 fccc 	bl	8007528 <__assert_func>
 8006b90:	3101      	adds	r1, #1
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	e7ee      	b.n	8006b74 <__lshift+0x1c>
 8006b96:	2300      	movs	r3, #0
 8006b98:	f100 0114 	add.w	r1, r0, #20
 8006b9c:	f100 0210 	add.w	r2, r0, #16
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	4553      	cmp	r3, sl
 8006ba4:	db37      	blt.n	8006c16 <__lshift+0xbe>
 8006ba6:	6920      	ldr	r0, [r4, #16]
 8006ba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bac:	f104 0314 	add.w	r3, r4, #20
 8006bb0:	f019 091f 	ands.w	r9, r9, #31
 8006bb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006bbc:	d02f      	beq.n	8006c1e <__lshift+0xc6>
 8006bbe:	f1c9 0e20 	rsb	lr, r9, #32
 8006bc2:	468a      	mov	sl, r1
 8006bc4:	f04f 0c00 	mov.w	ip, #0
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	fa02 f209 	lsl.w	r2, r2, r9
 8006bce:	ea42 020c 	orr.w	r2, r2, ip
 8006bd2:	f84a 2b04 	str.w	r2, [sl], #4
 8006bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bda:	4298      	cmp	r0, r3
 8006bdc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006be0:	d8f2      	bhi.n	8006bc8 <__lshift+0x70>
 8006be2:	1b03      	subs	r3, r0, r4
 8006be4:	3b15      	subs	r3, #21
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	3304      	adds	r3, #4
 8006bec:	f104 0215 	add.w	r2, r4, #21
 8006bf0:	4290      	cmp	r0, r2
 8006bf2:	bf38      	it	cc
 8006bf4:	2304      	movcc	r3, #4
 8006bf6:	f841 c003 	str.w	ip, [r1, r3]
 8006bfa:	f1bc 0f00 	cmp.w	ip, #0
 8006bfe:	d001      	beq.n	8006c04 <__lshift+0xac>
 8006c00:	f108 0602 	add.w	r6, r8, #2
 8006c04:	3e01      	subs	r6, #1
 8006c06:	4638      	mov	r0, r7
 8006c08:	612e      	str	r6, [r5, #16]
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	f7ff fdd2 	bl	80067b4 <_Bfree>
 8006c10:	4628      	mov	r0, r5
 8006c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c16:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	e7c1      	b.n	8006ba2 <__lshift+0x4a>
 8006c1e:	3904      	subs	r1, #4
 8006c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c24:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c28:	4298      	cmp	r0, r3
 8006c2a:	d8f9      	bhi.n	8006c20 <__lshift+0xc8>
 8006c2c:	e7ea      	b.n	8006c04 <__lshift+0xac>
 8006c2e:	bf00      	nop
 8006c30:	08007a97 	.word	0x08007a97
 8006c34:	08007b08 	.word	0x08007b08

08006c38 <__mcmp>:
 8006c38:	b530      	push	{r4, r5, lr}
 8006c3a:	6902      	ldr	r2, [r0, #16]
 8006c3c:	690c      	ldr	r4, [r1, #16]
 8006c3e:	1b12      	subs	r2, r2, r4
 8006c40:	d10e      	bne.n	8006c60 <__mcmp+0x28>
 8006c42:	f100 0314 	add.w	r3, r0, #20
 8006c46:	3114      	adds	r1, #20
 8006c48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c58:	42a5      	cmp	r5, r4
 8006c5a:	d003      	beq.n	8006c64 <__mcmp+0x2c>
 8006c5c:	d305      	bcc.n	8006c6a <__mcmp+0x32>
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4610      	mov	r0, r2
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	4283      	cmp	r3, r0
 8006c66:	d3f3      	bcc.n	8006c50 <__mcmp+0x18>
 8006c68:	e7fa      	b.n	8006c60 <__mcmp+0x28>
 8006c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6e:	e7f7      	b.n	8006c60 <__mcmp+0x28>

08006c70 <__mdiff>:
 8006c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	460c      	mov	r4, r1
 8006c76:	4606      	mov	r6, r0
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4690      	mov	r8, r2
 8006c7e:	f7ff ffdb 	bl	8006c38 <__mcmp>
 8006c82:	1e05      	subs	r5, r0, #0
 8006c84:	d110      	bne.n	8006ca8 <__mdiff+0x38>
 8006c86:	4629      	mov	r1, r5
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7ff fd53 	bl	8006734 <_Balloc>
 8006c8e:	b930      	cbnz	r0, 8006c9e <__mdiff+0x2e>
 8006c90:	4b3a      	ldr	r3, [pc, #232]	; (8006d7c <__mdiff+0x10c>)
 8006c92:	4602      	mov	r2, r0
 8006c94:	f240 2132 	movw	r1, #562	; 0x232
 8006c98:	4839      	ldr	r0, [pc, #228]	; (8006d80 <__mdiff+0x110>)
 8006c9a:	f000 fc45 	bl	8007528 <__assert_func>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca8:	bfa4      	itt	ge
 8006caa:	4643      	movge	r3, r8
 8006cac:	46a0      	movge	r8, r4
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006cb4:	bfa6      	itte	ge
 8006cb6:	461c      	movge	r4, r3
 8006cb8:	2500      	movge	r5, #0
 8006cba:	2501      	movlt	r5, #1
 8006cbc:	f7ff fd3a 	bl	8006734 <_Balloc>
 8006cc0:	b920      	cbnz	r0, 8006ccc <__mdiff+0x5c>
 8006cc2:	4b2e      	ldr	r3, [pc, #184]	; (8006d7c <__mdiff+0x10c>)
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cca:	e7e5      	b.n	8006c98 <__mdiff+0x28>
 8006ccc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cd0:	6926      	ldr	r6, [r4, #16]
 8006cd2:	60c5      	str	r5, [r0, #12]
 8006cd4:	f104 0914 	add.w	r9, r4, #20
 8006cd8:	f108 0514 	add.w	r5, r8, #20
 8006cdc:	f100 0e14 	add.w	lr, r0, #20
 8006ce0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ce4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ce8:	f108 0210 	add.w	r2, r8, #16
 8006cec:	46f2      	mov	sl, lr
 8006cee:	2100      	movs	r1, #0
 8006cf0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006cf8:	fa1f f883 	uxth.w	r8, r3
 8006cfc:	fa11 f18b 	uxtah	r1, r1, fp
 8006d00:	0c1b      	lsrs	r3, r3, #16
 8006d02:	eba1 0808 	sub.w	r8, r1, r8
 8006d06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d0e:	fa1f f888 	uxth.w	r8, r8
 8006d12:	1419      	asrs	r1, r3, #16
 8006d14:	454e      	cmp	r6, r9
 8006d16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d1a:	f84a 3b04 	str.w	r3, [sl], #4
 8006d1e:	d8e7      	bhi.n	8006cf0 <__mdiff+0x80>
 8006d20:	1b33      	subs	r3, r6, r4
 8006d22:	3b15      	subs	r3, #21
 8006d24:	f023 0303 	bic.w	r3, r3, #3
 8006d28:	3304      	adds	r3, #4
 8006d2a:	3415      	adds	r4, #21
 8006d2c:	42a6      	cmp	r6, r4
 8006d2e:	bf38      	it	cc
 8006d30:	2304      	movcc	r3, #4
 8006d32:	441d      	add	r5, r3
 8006d34:	4473      	add	r3, lr
 8006d36:	469e      	mov	lr, r3
 8006d38:	462e      	mov	r6, r5
 8006d3a:	4566      	cmp	r6, ip
 8006d3c:	d30e      	bcc.n	8006d5c <__mdiff+0xec>
 8006d3e:	f10c 0203 	add.w	r2, ip, #3
 8006d42:	1b52      	subs	r2, r2, r5
 8006d44:	f022 0203 	bic.w	r2, r2, #3
 8006d48:	3d03      	subs	r5, #3
 8006d4a:	45ac      	cmp	ip, r5
 8006d4c:	bf38      	it	cc
 8006d4e:	2200      	movcc	r2, #0
 8006d50:	441a      	add	r2, r3
 8006d52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006d56:	b17b      	cbz	r3, 8006d78 <__mdiff+0x108>
 8006d58:	6107      	str	r7, [r0, #16]
 8006d5a:	e7a3      	b.n	8006ca4 <__mdiff+0x34>
 8006d5c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d60:	fa11 f288 	uxtah	r2, r1, r8
 8006d64:	1414      	asrs	r4, r2, #16
 8006d66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d6a:	b292      	uxth	r2, r2
 8006d6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d70:	f84e 2b04 	str.w	r2, [lr], #4
 8006d74:	1421      	asrs	r1, r4, #16
 8006d76:	e7e0      	b.n	8006d3a <__mdiff+0xca>
 8006d78:	3f01      	subs	r7, #1
 8006d7a:	e7ea      	b.n	8006d52 <__mdiff+0xe2>
 8006d7c:	08007a97 	.word	0x08007a97
 8006d80:	08007b08 	.word	0x08007b08

08006d84 <__d2b>:
 8006d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d88:	4689      	mov	r9, r1
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	ec57 6b10 	vmov	r6, r7, d0
 8006d90:	4690      	mov	r8, r2
 8006d92:	f7ff fccf 	bl	8006734 <_Balloc>
 8006d96:	4604      	mov	r4, r0
 8006d98:	b930      	cbnz	r0, 8006da8 <__d2b+0x24>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b25      	ldr	r3, [pc, #148]	; (8006e34 <__d2b+0xb0>)
 8006d9e:	4826      	ldr	r0, [pc, #152]	; (8006e38 <__d2b+0xb4>)
 8006da0:	f240 310a 	movw	r1, #778	; 0x30a
 8006da4:	f000 fbc0 	bl	8007528 <__assert_func>
 8006da8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006dac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006db0:	bb35      	cbnz	r5, 8006e00 <__d2b+0x7c>
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	d028      	beq.n	8006e0a <__d2b+0x86>
 8006db8:	4668      	mov	r0, sp
 8006dba:	9600      	str	r6, [sp, #0]
 8006dbc:	f7ff fd82 	bl	80068c4 <__lo0bits>
 8006dc0:	9900      	ldr	r1, [sp, #0]
 8006dc2:	b300      	cbz	r0, 8006e06 <__d2b+0x82>
 8006dc4:	9a01      	ldr	r2, [sp, #4]
 8006dc6:	f1c0 0320 	rsb	r3, r0, #32
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	40c2      	lsrs	r2, r0
 8006dd2:	6163      	str	r3, [r4, #20]
 8006dd4:	9201      	str	r2, [sp, #4]
 8006dd6:	9b01      	ldr	r3, [sp, #4]
 8006dd8:	61a3      	str	r3, [r4, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	bf14      	ite	ne
 8006dde:	2202      	movne	r2, #2
 8006de0:	2201      	moveq	r2, #1
 8006de2:	6122      	str	r2, [r4, #16]
 8006de4:	b1d5      	cbz	r5, 8006e1c <__d2b+0x98>
 8006de6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dea:	4405      	add	r5, r0
 8006dec:	f8c9 5000 	str.w	r5, [r9]
 8006df0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006df4:	f8c8 0000 	str.w	r0, [r8]
 8006df8:	4620      	mov	r0, r4
 8006dfa:	b003      	add	sp, #12
 8006dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e04:	e7d5      	b.n	8006db2 <__d2b+0x2e>
 8006e06:	6161      	str	r1, [r4, #20]
 8006e08:	e7e5      	b.n	8006dd6 <__d2b+0x52>
 8006e0a:	a801      	add	r0, sp, #4
 8006e0c:	f7ff fd5a 	bl	80068c4 <__lo0bits>
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	6163      	str	r3, [r4, #20]
 8006e14:	2201      	movs	r2, #1
 8006e16:	6122      	str	r2, [r4, #16]
 8006e18:	3020      	adds	r0, #32
 8006e1a:	e7e3      	b.n	8006de4 <__d2b+0x60>
 8006e1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e24:	f8c9 0000 	str.w	r0, [r9]
 8006e28:	6918      	ldr	r0, [r3, #16]
 8006e2a:	f7ff fd2b 	bl	8006884 <__hi0bits>
 8006e2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e32:	e7df      	b.n	8006df4 <__d2b+0x70>
 8006e34:	08007a97 	.word	0x08007a97
 8006e38:	08007b08 	.word	0x08007b08

08006e3c <_calloc_r>:
 8006e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e3e:	fba1 2402 	umull	r2, r4, r1, r2
 8006e42:	b94c      	cbnz	r4, 8006e58 <_calloc_r+0x1c>
 8006e44:	4611      	mov	r1, r2
 8006e46:	9201      	str	r2, [sp, #4]
 8006e48:	f000 f87a 	bl	8006f40 <_malloc_r>
 8006e4c:	9a01      	ldr	r2, [sp, #4]
 8006e4e:	4605      	mov	r5, r0
 8006e50:	b930      	cbnz	r0, 8006e60 <_calloc_r+0x24>
 8006e52:	4628      	mov	r0, r5
 8006e54:	b003      	add	sp, #12
 8006e56:	bd30      	pop	{r4, r5, pc}
 8006e58:	220c      	movs	r2, #12
 8006e5a:	6002      	str	r2, [r0, #0]
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	e7f8      	b.n	8006e52 <_calloc_r+0x16>
 8006e60:	4621      	mov	r1, r4
 8006e62:	f7fe f84d 	bl	8004f00 <memset>
 8006e66:	e7f4      	b.n	8006e52 <_calloc_r+0x16>

08006e68 <_free_r>:
 8006e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e6a:	2900      	cmp	r1, #0
 8006e6c:	d044      	beq.n	8006ef8 <_free_r+0x90>
 8006e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e72:	9001      	str	r0, [sp, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f1a1 0404 	sub.w	r4, r1, #4
 8006e7a:	bfb8      	it	lt
 8006e7c:	18e4      	addlt	r4, r4, r3
 8006e7e:	f000 fcdf 	bl	8007840 <__malloc_lock>
 8006e82:	4a1e      	ldr	r2, [pc, #120]	; (8006efc <_free_r+0x94>)
 8006e84:	9801      	ldr	r0, [sp, #4]
 8006e86:	6813      	ldr	r3, [r2, #0]
 8006e88:	b933      	cbnz	r3, 8006e98 <_free_r+0x30>
 8006e8a:	6063      	str	r3, [r4, #4]
 8006e8c:	6014      	str	r4, [r2, #0]
 8006e8e:	b003      	add	sp, #12
 8006e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e94:	f000 bcda 	b.w	800784c <__malloc_unlock>
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	d908      	bls.n	8006eae <_free_r+0x46>
 8006e9c:	6825      	ldr	r5, [r4, #0]
 8006e9e:	1961      	adds	r1, r4, r5
 8006ea0:	428b      	cmp	r3, r1
 8006ea2:	bf01      	itttt	eq
 8006ea4:	6819      	ldreq	r1, [r3, #0]
 8006ea6:	685b      	ldreq	r3, [r3, #4]
 8006ea8:	1949      	addeq	r1, r1, r5
 8006eaa:	6021      	streq	r1, [r4, #0]
 8006eac:	e7ed      	b.n	8006e8a <_free_r+0x22>
 8006eae:	461a      	mov	r2, r3
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	b10b      	cbz	r3, 8006eb8 <_free_r+0x50>
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	d9fa      	bls.n	8006eae <_free_r+0x46>
 8006eb8:	6811      	ldr	r1, [r2, #0]
 8006eba:	1855      	adds	r5, r2, r1
 8006ebc:	42a5      	cmp	r5, r4
 8006ebe:	d10b      	bne.n	8006ed8 <_free_r+0x70>
 8006ec0:	6824      	ldr	r4, [r4, #0]
 8006ec2:	4421      	add	r1, r4
 8006ec4:	1854      	adds	r4, r2, r1
 8006ec6:	42a3      	cmp	r3, r4
 8006ec8:	6011      	str	r1, [r2, #0]
 8006eca:	d1e0      	bne.n	8006e8e <_free_r+0x26>
 8006ecc:	681c      	ldr	r4, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	6053      	str	r3, [r2, #4]
 8006ed2:	4421      	add	r1, r4
 8006ed4:	6011      	str	r1, [r2, #0]
 8006ed6:	e7da      	b.n	8006e8e <_free_r+0x26>
 8006ed8:	d902      	bls.n	8006ee0 <_free_r+0x78>
 8006eda:	230c      	movs	r3, #12
 8006edc:	6003      	str	r3, [r0, #0]
 8006ede:	e7d6      	b.n	8006e8e <_free_r+0x26>
 8006ee0:	6825      	ldr	r5, [r4, #0]
 8006ee2:	1961      	adds	r1, r4, r5
 8006ee4:	428b      	cmp	r3, r1
 8006ee6:	bf04      	itt	eq
 8006ee8:	6819      	ldreq	r1, [r3, #0]
 8006eea:	685b      	ldreq	r3, [r3, #4]
 8006eec:	6063      	str	r3, [r4, #4]
 8006eee:	bf04      	itt	eq
 8006ef0:	1949      	addeq	r1, r1, r5
 8006ef2:	6021      	streq	r1, [r4, #0]
 8006ef4:	6054      	str	r4, [r2, #4]
 8006ef6:	e7ca      	b.n	8006e8e <_free_r+0x26>
 8006ef8:	b003      	add	sp, #12
 8006efa:	bd30      	pop	{r4, r5, pc}
 8006efc:	200002e4 	.word	0x200002e4

08006f00 <sbrk_aligned>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	4e0e      	ldr	r6, [pc, #56]	; (8006f3c <sbrk_aligned+0x3c>)
 8006f04:	460c      	mov	r4, r1
 8006f06:	6831      	ldr	r1, [r6, #0]
 8006f08:	4605      	mov	r5, r0
 8006f0a:	b911      	cbnz	r1, 8006f12 <sbrk_aligned+0x12>
 8006f0c:	f000 f9e6 	bl	80072dc <_sbrk_r>
 8006f10:	6030      	str	r0, [r6, #0]
 8006f12:	4621      	mov	r1, r4
 8006f14:	4628      	mov	r0, r5
 8006f16:	f000 f9e1 	bl	80072dc <_sbrk_r>
 8006f1a:	1c43      	adds	r3, r0, #1
 8006f1c:	d00a      	beq.n	8006f34 <sbrk_aligned+0x34>
 8006f1e:	1cc4      	adds	r4, r0, #3
 8006f20:	f024 0403 	bic.w	r4, r4, #3
 8006f24:	42a0      	cmp	r0, r4
 8006f26:	d007      	beq.n	8006f38 <sbrk_aligned+0x38>
 8006f28:	1a21      	subs	r1, r4, r0
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 f9d6 	bl	80072dc <_sbrk_r>
 8006f30:	3001      	adds	r0, #1
 8006f32:	d101      	bne.n	8006f38 <sbrk_aligned+0x38>
 8006f34:	f04f 34ff 	mov.w	r4, #4294967295
 8006f38:	4620      	mov	r0, r4
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	200002e8 	.word	0x200002e8

08006f40 <_malloc_r>:
 8006f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f44:	1ccd      	adds	r5, r1, #3
 8006f46:	f025 0503 	bic.w	r5, r5, #3
 8006f4a:	3508      	adds	r5, #8
 8006f4c:	2d0c      	cmp	r5, #12
 8006f4e:	bf38      	it	cc
 8006f50:	250c      	movcc	r5, #12
 8006f52:	2d00      	cmp	r5, #0
 8006f54:	4607      	mov	r7, r0
 8006f56:	db01      	blt.n	8006f5c <_malloc_r+0x1c>
 8006f58:	42a9      	cmp	r1, r5
 8006f5a:	d905      	bls.n	8006f68 <_malloc_r+0x28>
 8006f5c:	230c      	movs	r3, #12
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	2600      	movs	r6, #0
 8006f62:	4630      	mov	r0, r6
 8006f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f68:	4e2e      	ldr	r6, [pc, #184]	; (8007024 <_malloc_r+0xe4>)
 8006f6a:	f000 fc69 	bl	8007840 <__malloc_lock>
 8006f6e:	6833      	ldr	r3, [r6, #0]
 8006f70:	461c      	mov	r4, r3
 8006f72:	bb34      	cbnz	r4, 8006fc2 <_malloc_r+0x82>
 8006f74:	4629      	mov	r1, r5
 8006f76:	4638      	mov	r0, r7
 8006f78:	f7ff ffc2 	bl	8006f00 <sbrk_aligned>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	4604      	mov	r4, r0
 8006f80:	d14d      	bne.n	800701e <_malloc_r+0xde>
 8006f82:	6834      	ldr	r4, [r6, #0]
 8006f84:	4626      	mov	r6, r4
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	d140      	bne.n	800700c <_malloc_r+0xcc>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4638      	mov	r0, r7
 8006f90:	eb04 0803 	add.w	r8, r4, r3
 8006f94:	f000 f9a2 	bl	80072dc <_sbrk_r>
 8006f98:	4580      	cmp	r8, r0
 8006f9a:	d13a      	bne.n	8007012 <_malloc_r+0xd2>
 8006f9c:	6821      	ldr	r1, [r4, #0]
 8006f9e:	3503      	adds	r5, #3
 8006fa0:	1a6d      	subs	r5, r5, r1
 8006fa2:	f025 0503 	bic.w	r5, r5, #3
 8006fa6:	3508      	adds	r5, #8
 8006fa8:	2d0c      	cmp	r5, #12
 8006faa:	bf38      	it	cc
 8006fac:	250c      	movcc	r5, #12
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f7ff ffa5 	bl	8006f00 <sbrk_aligned>
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d02b      	beq.n	8007012 <_malloc_r+0xd2>
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	442b      	add	r3, r5
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	e00e      	b.n	8006fe0 <_malloc_r+0xa0>
 8006fc2:	6822      	ldr	r2, [r4, #0]
 8006fc4:	1b52      	subs	r2, r2, r5
 8006fc6:	d41e      	bmi.n	8007006 <_malloc_r+0xc6>
 8006fc8:	2a0b      	cmp	r2, #11
 8006fca:	d916      	bls.n	8006ffa <_malloc_r+0xba>
 8006fcc:	1961      	adds	r1, r4, r5
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	6025      	str	r5, [r4, #0]
 8006fd2:	bf18      	it	ne
 8006fd4:	6059      	strne	r1, [r3, #4]
 8006fd6:	6863      	ldr	r3, [r4, #4]
 8006fd8:	bf08      	it	eq
 8006fda:	6031      	streq	r1, [r6, #0]
 8006fdc:	5162      	str	r2, [r4, r5]
 8006fde:	604b      	str	r3, [r1, #4]
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	f104 060b 	add.w	r6, r4, #11
 8006fe6:	f000 fc31 	bl	800784c <__malloc_unlock>
 8006fea:	f026 0607 	bic.w	r6, r6, #7
 8006fee:	1d23      	adds	r3, r4, #4
 8006ff0:	1af2      	subs	r2, r6, r3
 8006ff2:	d0b6      	beq.n	8006f62 <_malloc_r+0x22>
 8006ff4:	1b9b      	subs	r3, r3, r6
 8006ff6:	50a3      	str	r3, [r4, r2]
 8006ff8:	e7b3      	b.n	8006f62 <_malloc_r+0x22>
 8006ffa:	6862      	ldr	r2, [r4, #4]
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	bf0c      	ite	eq
 8007000:	6032      	streq	r2, [r6, #0]
 8007002:	605a      	strne	r2, [r3, #4]
 8007004:	e7ec      	b.n	8006fe0 <_malloc_r+0xa0>
 8007006:	4623      	mov	r3, r4
 8007008:	6864      	ldr	r4, [r4, #4]
 800700a:	e7b2      	b.n	8006f72 <_malloc_r+0x32>
 800700c:	4634      	mov	r4, r6
 800700e:	6876      	ldr	r6, [r6, #4]
 8007010:	e7b9      	b.n	8006f86 <_malloc_r+0x46>
 8007012:	230c      	movs	r3, #12
 8007014:	603b      	str	r3, [r7, #0]
 8007016:	4638      	mov	r0, r7
 8007018:	f000 fc18 	bl	800784c <__malloc_unlock>
 800701c:	e7a1      	b.n	8006f62 <_malloc_r+0x22>
 800701e:	6025      	str	r5, [r4, #0]
 8007020:	e7de      	b.n	8006fe0 <_malloc_r+0xa0>
 8007022:	bf00      	nop
 8007024:	200002e4 	.word	0x200002e4

08007028 <__sfputc_r>:
 8007028:	6893      	ldr	r3, [r2, #8]
 800702a:	3b01      	subs	r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	b410      	push	{r4}
 8007030:	6093      	str	r3, [r2, #8]
 8007032:	da08      	bge.n	8007046 <__sfputc_r+0x1e>
 8007034:	6994      	ldr	r4, [r2, #24]
 8007036:	42a3      	cmp	r3, r4
 8007038:	db01      	blt.n	800703e <__sfputc_r+0x16>
 800703a:	290a      	cmp	r1, #10
 800703c:	d103      	bne.n	8007046 <__sfputc_r+0x1e>
 800703e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007042:	f000 b99f 	b.w	8007384 <__swbuf_r>
 8007046:	6813      	ldr	r3, [r2, #0]
 8007048:	1c58      	adds	r0, r3, #1
 800704a:	6010      	str	r0, [r2, #0]
 800704c:	7019      	strb	r1, [r3, #0]
 800704e:	4608      	mov	r0, r1
 8007050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007054:	4770      	bx	lr

08007056 <__sfputs_r>:
 8007056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007058:	4606      	mov	r6, r0
 800705a:	460f      	mov	r7, r1
 800705c:	4614      	mov	r4, r2
 800705e:	18d5      	adds	r5, r2, r3
 8007060:	42ac      	cmp	r4, r5
 8007062:	d101      	bne.n	8007068 <__sfputs_r+0x12>
 8007064:	2000      	movs	r0, #0
 8007066:	e007      	b.n	8007078 <__sfputs_r+0x22>
 8007068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706c:	463a      	mov	r2, r7
 800706e:	4630      	mov	r0, r6
 8007070:	f7ff ffda 	bl	8007028 <__sfputc_r>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d1f3      	bne.n	8007060 <__sfputs_r+0xa>
 8007078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800707c <_vfiprintf_r>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	460d      	mov	r5, r1
 8007082:	b09d      	sub	sp, #116	; 0x74
 8007084:	4614      	mov	r4, r2
 8007086:	4698      	mov	r8, r3
 8007088:	4606      	mov	r6, r0
 800708a:	b118      	cbz	r0, 8007094 <_vfiprintf_r+0x18>
 800708c:	6983      	ldr	r3, [r0, #24]
 800708e:	b90b      	cbnz	r3, 8007094 <_vfiprintf_r+0x18>
 8007090:	f7ff fa94 	bl	80065bc <__sinit>
 8007094:	4b89      	ldr	r3, [pc, #548]	; (80072bc <_vfiprintf_r+0x240>)
 8007096:	429d      	cmp	r5, r3
 8007098:	d11b      	bne.n	80070d2 <_vfiprintf_r+0x56>
 800709a:	6875      	ldr	r5, [r6, #4]
 800709c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800709e:	07d9      	lsls	r1, r3, #31
 80070a0:	d405      	bmi.n	80070ae <_vfiprintf_r+0x32>
 80070a2:	89ab      	ldrh	r3, [r5, #12]
 80070a4:	059a      	lsls	r2, r3, #22
 80070a6:	d402      	bmi.n	80070ae <_vfiprintf_r+0x32>
 80070a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070aa:	f7ff fb2a 	bl	8006702 <__retarget_lock_acquire_recursive>
 80070ae:	89ab      	ldrh	r3, [r5, #12]
 80070b0:	071b      	lsls	r3, r3, #28
 80070b2:	d501      	bpl.n	80070b8 <_vfiprintf_r+0x3c>
 80070b4:	692b      	ldr	r3, [r5, #16]
 80070b6:	b9eb      	cbnz	r3, 80070f4 <_vfiprintf_r+0x78>
 80070b8:	4629      	mov	r1, r5
 80070ba:	4630      	mov	r0, r6
 80070bc:	f000 f9c6 	bl	800744c <__swsetup_r>
 80070c0:	b1c0      	cbz	r0, 80070f4 <_vfiprintf_r+0x78>
 80070c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070c4:	07dc      	lsls	r4, r3, #31
 80070c6:	d50e      	bpl.n	80070e6 <_vfiprintf_r+0x6a>
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	b01d      	add	sp, #116	; 0x74
 80070ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d2:	4b7b      	ldr	r3, [pc, #492]	; (80072c0 <_vfiprintf_r+0x244>)
 80070d4:	429d      	cmp	r5, r3
 80070d6:	d101      	bne.n	80070dc <_vfiprintf_r+0x60>
 80070d8:	68b5      	ldr	r5, [r6, #8]
 80070da:	e7df      	b.n	800709c <_vfiprintf_r+0x20>
 80070dc:	4b79      	ldr	r3, [pc, #484]	; (80072c4 <_vfiprintf_r+0x248>)
 80070de:	429d      	cmp	r5, r3
 80070e0:	bf08      	it	eq
 80070e2:	68f5      	ldreq	r5, [r6, #12]
 80070e4:	e7da      	b.n	800709c <_vfiprintf_r+0x20>
 80070e6:	89ab      	ldrh	r3, [r5, #12]
 80070e8:	0598      	lsls	r0, r3, #22
 80070ea:	d4ed      	bmi.n	80070c8 <_vfiprintf_r+0x4c>
 80070ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070ee:	f7ff fb09 	bl	8006704 <__retarget_lock_release_recursive>
 80070f2:	e7e9      	b.n	80070c8 <_vfiprintf_r+0x4c>
 80070f4:	2300      	movs	r3, #0
 80070f6:	9309      	str	r3, [sp, #36]	; 0x24
 80070f8:	2320      	movs	r3, #32
 80070fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007102:	2330      	movs	r3, #48	; 0x30
 8007104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072c8 <_vfiprintf_r+0x24c>
 8007108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800710c:	f04f 0901 	mov.w	r9, #1
 8007110:	4623      	mov	r3, r4
 8007112:	469a      	mov	sl, r3
 8007114:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007118:	b10a      	cbz	r2, 800711e <_vfiprintf_r+0xa2>
 800711a:	2a25      	cmp	r2, #37	; 0x25
 800711c:	d1f9      	bne.n	8007112 <_vfiprintf_r+0x96>
 800711e:	ebba 0b04 	subs.w	fp, sl, r4
 8007122:	d00b      	beq.n	800713c <_vfiprintf_r+0xc0>
 8007124:	465b      	mov	r3, fp
 8007126:	4622      	mov	r2, r4
 8007128:	4629      	mov	r1, r5
 800712a:	4630      	mov	r0, r6
 800712c:	f7ff ff93 	bl	8007056 <__sfputs_r>
 8007130:	3001      	adds	r0, #1
 8007132:	f000 80aa 	beq.w	800728a <_vfiprintf_r+0x20e>
 8007136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007138:	445a      	add	r2, fp
 800713a:	9209      	str	r2, [sp, #36]	; 0x24
 800713c:	f89a 3000 	ldrb.w	r3, [sl]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80a2 	beq.w	800728a <_vfiprintf_r+0x20e>
 8007146:	2300      	movs	r3, #0
 8007148:	f04f 32ff 	mov.w	r2, #4294967295
 800714c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007150:	f10a 0a01 	add.w	sl, sl, #1
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	9307      	str	r3, [sp, #28]
 8007158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800715c:	931a      	str	r3, [sp, #104]	; 0x68
 800715e:	4654      	mov	r4, sl
 8007160:	2205      	movs	r2, #5
 8007162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007166:	4858      	ldr	r0, [pc, #352]	; (80072c8 <_vfiprintf_r+0x24c>)
 8007168:	f7f9 f85a 	bl	8000220 <memchr>
 800716c:	9a04      	ldr	r2, [sp, #16]
 800716e:	b9d8      	cbnz	r0, 80071a8 <_vfiprintf_r+0x12c>
 8007170:	06d1      	lsls	r1, r2, #27
 8007172:	bf44      	itt	mi
 8007174:	2320      	movmi	r3, #32
 8007176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800717a:	0713      	lsls	r3, r2, #28
 800717c:	bf44      	itt	mi
 800717e:	232b      	movmi	r3, #43	; 0x2b
 8007180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007184:	f89a 3000 	ldrb.w	r3, [sl]
 8007188:	2b2a      	cmp	r3, #42	; 0x2a
 800718a:	d015      	beq.n	80071b8 <_vfiprintf_r+0x13c>
 800718c:	9a07      	ldr	r2, [sp, #28]
 800718e:	4654      	mov	r4, sl
 8007190:	2000      	movs	r0, #0
 8007192:	f04f 0c0a 	mov.w	ip, #10
 8007196:	4621      	mov	r1, r4
 8007198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800719c:	3b30      	subs	r3, #48	; 0x30
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d94e      	bls.n	8007240 <_vfiprintf_r+0x1c4>
 80071a2:	b1b0      	cbz	r0, 80071d2 <_vfiprintf_r+0x156>
 80071a4:	9207      	str	r2, [sp, #28]
 80071a6:	e014      	b.n	80071d2 <_vfiprintf_r+0x156>
 80071a8:	eba0 0308 	sub.w	r3, r0, r8
 80071ac:	fa09 f303 	lsl.w	r3, r9, r3
 80071b0:	4313      	orrs	r3, r2
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	46a2      	mov	sl, r4
 80071b6:	e7d2      	b.n	800715e <_vfiprintf_r+0xe2>
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	1d19      	adds	r1, r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	9103      	str	r1, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfbb      	ittet	lt
 80071c4:	425b      	neglt	r3, r3
 80071c6:	f042 0202 	orrlt.w	r2, r2, #2
 80071ca:	9307      	strge	r3, [sp, #28]
 80071cc:	9307      	strlt	r3, [sp, #28]
 80071ce:	bfb8      	it	lt
 80071d0:	9204      	strlt	r2, [sp, #16]
 80071d2:	7823      	ldrb	r3, [r4, #0]
 80071d4:	2b2e      	cmp	r3, #46	; 0x2e
 80071d6:	d10c      	bne.n	80071f2 <_vfiprintf_r+0x176>
 80071d8:	7863      	ldrb	r3, [r4, #1]
 80071da:	2b2a      	cmp	r3, #42	; 0x2a
 80071dc:	d135      	bne.n	800724a <_vfiprintf_r+0x1ce>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	1d1a      	adds	r2, r3, #4
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	9203      	str	r2, [sp, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	bfb8      	it	lt
 80071ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80071ee:	3402      	adds	r4, #2
 80071f0:	9305      	str	r3, [sp, #20]
 80071f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072d8 <_vfiprintf_r+0x25c>
 80071f6:	7821      	ldrb	r1, [r4, #0]
 80071f8:	2203      	movs	r2, #3
 80071fa:	4650      	mov	r0, sl
 80071fc:	f7f9 f810 	bl	8000220 <memchr>
 8007200:	b140      	cbz	r0, 8007214 <_vfiprintf_r+0x198>
 8007202:	2340      	movs	r3, #64	; 0x40
 8007204:	eba0 000a 	sub.w	r0, r0, sl
 8007208:	fa03 f000 	lsl.w	r0, r3, r0
 800720c:	9b04      	ldr	r3, [sp, #16]
 800720e:	4303      	orrs	r3, r0
 8007210:	3401      	adds	r4, #1
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007218:	482c      	ldr	r0, [pc, #176]	; (80072cc <_vfiprintf_r+0x250>)
 800721a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800721e:	2206      	movs	r2, #6
 8007220:	f7f8 fffe 	bl	8000220 <memchr>
 8007224:	2800      	cmp	r0, #0
 8007226:	d03f      	beq.n	80072a8 <_vfiprintf_r+0x22c>
 8007228:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <_vfiprintf_r+0x254>)
 800722a:	bb1b      	cbnz	r3, 8007274 <_vfiprintf_r+0x1f8>
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	3307      	adds	r3, #7
 8007230:	f023 0307 	bic.w	r3, r3, #7
 8007234:	3308      	adds	r3, #8
 8007236:	9303      	str	r3, [sp, #12]
 8007238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723a:	443b      	add	r3, r7
 800723c:	9309      	str	r3, [sp, #36]	; 0x24
 800723e:	e767      	b.n	8007110 <_vfiprintf_r+0x94>
 8007240:	fb0c 3202 	mla	r2, ip, r2, r3
 8007244:	460c      	mov	r4, r1
 8007246:	2001      	movs	r0, #1
 8007248:	e7a5      	b.n	8007196 <_vfiprintf_r+0x11a>
 800724a:	2300      	movs	r3, #0
 800724c:	3401      	adds	r4, #1
 800724e:	9305      	str	r3, [sp, #20]
 8007250:	4619      	mov	r1, r3
 8007252:	f04f 0c0a 	mov.w	ip, #10
 8007256:	4620      	mov	r0, r4
 8007258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800725c:	3a30      	subs	r2, #48	; 0x30
 800725e:	2a09      	cmp	r2, #9
 8007260:	d903      	bls.n	800726a <_vfiprintf_r+0x1ee>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0c5      	beq.n	80071f2 <_vfiprintf_r+0x176>
 8007266:	9105      	str	r1, [sp, #20]
 8007268:	e7c3      	b.n	80071f2 <_vfiprintf_r+0x176>
 800726a:	fb0c 2101 	mla	r1, ip, r1, r2
 800726e:	4604      	mov	r4, r0
 8007270:	2301      	movs	r3, #1
 8007272:	e7f0      	b.n	8007256 <_vfiprintf_r+0x1da>
 8007274:	ab03      	add	r3, sp, #12
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	462a      	mov	r2, r5
 800727a:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <_vfiprintf_r+0x258>)
 800727c:	a904      	add	r1, sp, #16
 800727e:	4630      	mov	r0, r6
 8007280:	f7fd fee6 	bl	8005050 <_printf_float>
 8007284:	4607      	mov	r7, r0
 8007286:	1c78      	adds	r0, r7, #1
 8007288:	d1d6      	bne.n	8007238 <_vfiprintf_r+0x1bc>
 800728a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800728c:	07d9      	lsls	r1, r3, #31
 800728e:	d405      	bmi.n	800729c <_vfiprintf_r+0x220>
 8007290:	89ab      	ldrh	r3, [r5, #12]
 8007292:	059a      	lsls	r2, r3, #22
 8007294:	d402      	bmi.n	800729c <_vfiprintf_r+0x220>
 8007296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007298:	f7ff fa34 	bl	8006704 <__retarget_lock_release_recursive>
 800729c:	89ab      	ldrh	r3, [r5, #12]
 800729e:	065b      	lsls	r3, r3, #25
 80072a0:	f53f af12 	bmi.w	80070c8 <_vfiprintf_r+0x4c>
 80072a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072a6:	e711      	b.n	80070cc <_vfiprintf_r+0x50>
 80072a8:	ab03      	add	r3, sp, #12
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	462a      	mov	r2, r5
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <_vfiprintf_r+0x258>)
 80072b0:	a904      	add	r1, sp, #16
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7fe f970 	bl	8005598 <_printf_i>
 80072b8:	e7e4      	b.n	8007284 <_vfiprintf_r+0x208>
 80072ba:	bf00      	nop
 80072bc:	08007ac8 	.word	0x08007ac8
 80072c0:	08007ae8 	.word	0x08007ae8
 80072c4:	08007aa8 	.word	0x08007aa8
 80072c8:	08007c64 	.word	0x08007c64
 80072cc:	08007c6e 	.word	0x08007c6e
 80072d0:	08005051 	.word	0x08005051
 80072d4:	08007057 	.word	0x08007057
 80072d8:	08007c6a 	.word	0x08007c6a

080072dc <_sbrk_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d06      	ldr	r5, [pc, #24]	; (80072f8 <_sbrk_r+0x1c>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fa fafa 	bl	80018e0 <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_sbrk_r+0x1a>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_sbrk_r+0x1a>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	200002ec 	.word	0x200002ec

080072fc <__sread>:
 80072fc:	b510      	push	{r4, lr}
 80072fe:	460c      	mov	r4, r1
 8007300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007304:	f000 faa8 	bl	8007858 <_read_r>
 8007308:	2800      	cmp	r0, #0
 800730a:	bfab      	itete	ge
 800730c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800730e:	89a3      	ldrhlt	r3, [r4, #12]
 8007310:	181b      	addge	r3, r3, r0
 8007312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007316:	bfac      	ite	ge
 8007318:	6563      	strge	r3, [r4, #84]	; 0x54
 800731a:	81a3      	strhlt	r3, [r4, #12]
 800731c:	bd10      	pop	{r4, pc}

0800731e <__swrite>:
 800731e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007322:	461f      	mov	r7, r3
 8007324:	898b      	ldrh	r3, [r1, #12]
 8007326:	05db      	lsls	r3, r3, #23
 8007328:	4605      	mov	r5, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4616      	mov	r6, r2
 800732e:	d505      	bpl.n	800733c <__swrite+0x1e>
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	2302      	movs	r3, #2
 8007336:	2200      	movs	r2, #0
 8007338:	f000 f9f8 	bl	800772c <_lseek_r>
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	4632      	mov	r2, r6
 800734a:	463b      	mov	r3, r7
 800734c:	4628      	mov	r0, r5
 800734e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007352:	f000 b869 	b.w	8007428 <_write_r>

08007356 <__sseek>:
 8007356:	b510      	push	{r4, lr}
 8007358:	460c      	mov	r4, r1
 800735a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800735e:	f000 f9e5 	bl	800772c <_lseek_r>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	bf15      	itete	ne
 8007368:	6560      	strne	r0, [r4, #84]	; 0x54
 800736a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800736e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007372:	81a3      	strheq	r3, [r4, #12]
 8007374:	bf18      	it	ne
 8007376:	81a3      	strhne	r3, [r4, #12]
 8007378:	bd10      	pop	{r4, pc}

0800737a <__sclose>:
 800737a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737e:	f000 b8f1 	b.w	8007564 <_close_r>
	...

08007384 <__swbuf_r>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	460e      	mov	r6, r1
 8007388:	4614      	mov	r4, r2
 800738a:	4605      	mov	r5, r0
 800738c:	b118      	cbz	r0, 8007396 <__swbuf_r+0x12>
 800738e:	6983      	ldr	r3, [r0, #24]
 8007390:	b90b      	cbnz	r3, 8007396 <__swbuf_r+0x12>
 8007392:	f7ff f913 	bl	80065bc <__sinit>
 8007396:	4b21      	ldr	r3, [pc, #132]	; (800741c <__swbuf_r+0x98>)
 8007398:	429c      	cmp	r4, r3
 800739a:	d12b      	bne.n	80073f4 <__swbuf_r+0x70>
 800739c:	686c      	ldr	r4, [r5, #4]
 800739e:	69a3      	ldr	r3, [r4, #24]
 80073a0:	60a3      	str	r3, [r4, #8]
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	071a      	lsls	r2, r3, #28
 80073a6:	d52f      	bpl.n	8007408 <__swbuf_r+0x84>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	b36b      	cbz	r3, 8007408 <__swbuf_r+0x84>
 80073ac:	6923      	ldr	r3, [r4, #16]
 80073ae:	6820      	ldr	r0, [r4, #0]
 80073b0:	1ac0      	subs	r0, r0, r3
 80073b2:	6963      	ldr	r3, [r4, #20]
 80073b4:	b2f6      	uxtb	r6, r6
 80073b6:	4283      	cmp	r3, r0
 80073b8:	4637      	mov	r7, r6
 80073ba:	dc04      	bgt.n	80073c6 <__swbuf_r+0x42>
 80073bc:	4621      	mov	r1, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 f966 	bl	8007690 <_fflush_r>
 80073c4:	bb30      	cbnz	r0, 8007414 <__swbuf_r+0x90>
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	60a3      	str	r3, [r4, #8]
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	6022      	str	r2, [r4, #0]
 80073d2:	701e      	strb	r6, [r3, #0]
 80073d4:	6963      	ldr	r3, [r4, #20]
 80073d6:	3001      	adds	r0, #1
 80073d8:	4283      	cmp	r3, r0
 80073da:	d004      	beq.n	80073e6 <__swbuf_r+0x62>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	07db      	lsls	r3, r3, #31
 80073e0:	d506      	bpl.n	80073f0 <__swbuf_r+0x6c>
 80073e2:	2e0a      	cmp	r6, #10
 80073e4:	d104      	bne.n	80073f0 <__swbuf_r+0x6c>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 f951 	bl	8007690 <_fflush_r>
 80073ee:	b988      	cbnz	r0, 8007414 <__swbuf_r+0x90>
 80073f0:	4638      	mov	r0, r7
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f4:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <__swbuf_r+0x9c>)
 80073f6:	429c      	cmp	r4, r3
 80073f8:	d101      	bne.n	80073fe <__swbuf_r+0x7a>
 80073fa:	68ac      	ldr	r4, [r5, #8]
 80073fc:	e7cf      	b.n	800739e <__swbuf_r+0x1a>
 80073fe:	4b09      	ldr	r3, [pc, #36]	; (8007424 <__swbuf_r+0xa0>)
 8007400:	429c      	cmp	r4, r3
 8007402:	bf08      	it	eq
 8007404:	68ec      	ldreq	r4, [r5, #12]
 8007406:	e7ca      	b.n	800739e <__swbuf_r+0x1a>
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	f000 f81e 	bl	800744c <__swsetup_r>
 8007410:	2800      	cmp	r0, #0
 8007412:	d0cb      	beq.n	80073ac <__swbuf_r+0x28>
 8007414:	f04f 37ff 	mov.w	r7, #4294967295
 8007418:	e7ea      	b.n	80073f0 <__swbuf_r+0x6c>
 800741a:	bf00      	nop
 800741c:	08007ac8 	.word	0x08007ac8
 8007420:	08007ae8 	.word	0x08007ae8
 8007424:	08007aa8 	.word	0x08007aa8

08007428 <_write_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d07      	ldr	r5, [pc, #28]	; (8007448 <_write_r+0x20>)
 800742c:	4604      	mov	r4, r0
 800742e:	4608      	mov	r0, r1
 8007430:	4611      	mov	r1, r2
 8007432:	2200      	movs	r2, #0
 8007434:	602a      	str	r2, [r5, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f7f9 fee2 	bl	8001200 <_write>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_write_r+0x1e>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_write_r+0x1e>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	200002ec 	.word	0x200002ec

0800744c <__swsetup_r>:
 800744c:	4b32      	ldr	r3, [pc, #200]	; (8007518 <__swsetup_r+0xcc>)
 800744e:	b570      	push	{r4, r5, r6, lr}
 8007450:	681d      	ldr	r5, [r3, #0]
 8007452:	4606      	mov	r6, r0
 8007454:	460c      	mov	r4, r1
 8007456:	b125      	cbz	r5, 8007462 <__swsetup_r+0x16>
 8007458:	69ab      	ldr	r3, [r5, #24]
 800745a:	b913      	cbnz	r3, 8007462 <__swsetup_r+0x16>
 800745c:	4628      	mov	r0, r5
 800745e:	f7ff f8ad 	bl	80065bc <__sinit>
 8007462:	4b2e      	ldr	r3, [pc, #184]	; (800751c <__swsetup_r+0xd0>)
 8007464:	429c      	cmp	r4, r3
 8007466:	d10f      	bne.n	8007488 <__swsetup_r+0x3c>
 8007468:	686c      	ldr	r4, [r5, #4]
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007470:	0719      	lsls	r1, r3, #28
 8007472:	d42c      	bmi.n	80074ce <__swsetup_r+0x82>
 8007474:	06dd      	lsls	r5, r3, #27
 8007476:	d411      	bmi.n	800749c <__swsetup_r+0x50>
 8007478:	2309      	movs	r3, #9
 800747a:	6033      	str	r3, [r6, #0]
 800747c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	f04f 30ff 	mov.w	r0, #4294967295
 8007486:	e03e      	b.n	8007506 <__swsetup_r+0xba>
 8007488:	4b25      	ldr	r3, [pc, #148]	; (8007520 <__swsetup_r+0xd4>)
 800748a:	429c      	cmp	r4, r3
 800748c:	d101      	bne.n	8007492 <__swsetup_r+0x46>
 800748e:	68ac      	ldr	r4, [r5, #8]
 8007490:	e7eb      	b.n	800746a <__swsetup_r+0x1e>
 8007492:	4b24      	ldr	r3, [pc, #144]	; (8007524 <__swsetup_r+0xd8>)
 8007494:	429c      	cmp	r4, r3
 8007496:	bf08      	it	eq
 8007498:	68ec      	ldreq	r4, [r5, #12]
 800749a:	e7e6      	b.n	800746a <__swsetup_r+0x1e>
 800749c:	0758      	lsls	r0, r3, #29
 800749e:	d512      	bpl.n	80074c6 <__swsetup_r+0x7a>
 80074a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a2:	b141      	cbz	r1, 80074b6 <__swsetup_r+0x6a>
 80074a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a8:	4299      	cmp	r1, r3
 80074aa:	d002      	beq.n	80074b2 <__swsetup_r+0x66>
 80074ac:	4630      	mov	r0, r6
 80074ae:	f7ff fcdb 	bl	8006e68 <_free_r>
 80074b2:	2300      	movs	r3, #0
 80074b4:	6363      	str	r3, [r4, #52]	; 0x34
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074bc:	81a3      	strh	r3, [r4, #12]
 80074be:	2300      	movs	r3, #0
 80074c0:	6063      	str	r3, [r4, #4]
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f043 0308 	orr.w	r3, r3, #8
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	6923      	ldr	r3, [r4, #16]
 80074d0:	b94b      	cbnz	r3, 80074e6 <__swsetup_r+0x9a>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074dc:	d003      	beq.n	80074e6 <__swsetup_r+0x9a>
 80074de:	4621      	mov	r1, r4
 80074e0:	4630      	mov	r0, r6
 80074e2:	f000 f95b 	bl	800779c <__smakebuf_r>
 80074e6:	89a0      	ldrh	r0, [r4, #12]
 80074e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074ec:	f010 0301 	ands.w	r3, r0, #1
 80074f0:	d00a      	beq.n	8007508 <__swsetup_r+0xbc>
 80074f2:	2300      	movs	r3, #0
 80074f4:	60a3      	str	r3, [r4, #8]
 80074f6:	6963      	ldr	r3, [r4, #20]
 80074f8:	425b      	negs	r3, r3
 80074fa:	61a3      	str	r3, [r4, #24]
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	b943      	cbnz	r3, 8007512 <__swsetup_r+0xc6>
 8007500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007504:	d1ba      	bne.n	800747c <__swsetup_r+0x30>
 8007506:	bd70      	pop	{r4, r5, r6, pc}
 8007508:	0781      	lsls	r1, r0, #30
 800750a:	bf58      	it	pl
 800750c:	6963      	ldrpl	r3, [r4, #20]
 800750e:	60a3      	str	r3, [r4, #8]
 8007510:	e7f4      	b.n	80074fc <__swsetup_r+0xb0>
 8007512:	2000      	movs	r0, #0
 8007514:	e7f7      	b.n	8007506 <__swsetup_r+0xba>
 8007516:	bf00      	nop
 8007518:	20000010 	.word	0x20000010
 800751c:	08007ac8 	.word	0x08007ac8
 8007520:	08007ae8 	.word	0x08007ae8
 8007524:	08007aa8 	.word	0x08007aa8

08007528 <__assert_func>:
 8007528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800752a:	4614      	mov	r4, r2
 800752c:	461a      	mov	r2, r3
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <__assert_func+0x2c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4605      	mov	r5, r0
 8007534:	68d8      	ldr	r0, [r3, #12]
 8007536:	b14c      	cbz	r4, 800754c <__assert_func+0x24>
 8007538:	4b07      	ldr	r3, [pc, #28]	; (8007558 <__assert_func+0x30>)
 800753a:	9100      	str	r1, [sp, #0]
 800753c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007540:	4906      	ldr	r1, [pc, #24]	; (800755c <__assert_func+0x34>)
 8007542:	462b      	mov	r3, r5
 8007544:	f000 f8e0 	bl	8007708 <fiprintf>
 8007548:	f000 f9a5 	bl	8007896 <abort>
 800754c:	4b04      	ldr	r3, [pc, #16]	; (8007560 <__assert_func+0x38>)
 800754e:	461c      	mov	r4, r3
 8007550:	e7f3      	b.n	800753a <__assert_func+0x12>
 8007552:	bf00      	nop
 8007554:	20000010 	.word	0x20000010
 8007558:	08007c75 	.word	0x08007c75
 800755c:	08007c82 	.word	0x08007c82
 8007560:	08007cb0 	.word	0x08007cb0

08007564 <_close_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	; (8007580 <_close_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fa f981 	bl	8001876 <_close>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_close_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_close_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	200002ec 	.word	0x200002ec

08007584 <__sflush_r>:
 8007584:	898a      	ldrh	r2, [r1, #12]
 8007586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	4605      	mov	r5, r0
 800758c:	0710      	lsls	r0, r2, #28
 800758e:	460c      	mov	r4, r1
 8007590:	d458      	bmi.n	8007644 <__sflush_r+0xc0>
 8007592:	684b      	ldr	r3, [r1, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dc05      	bgt.n	80075a4 <__sflush_r+0x20>
 8007598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	dc02      	bgt.n	80075a4 <__sflush_r+0x20>
 800759e:	2000      	movs	r0, #0
 80075a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075a6:	2e00      	cmp	r6, #0
 80075a8:	d0f9      	beq.n	800759e <__sflush_r+0x1a>
 80075aa:	2300      	movs	r3, #0
 80075ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075b0:	682f      	ldr	r7, [r5, #0]
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	d032      	beq.n	800761c <__sflush_r+0x98>
 80075b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	075a      	lsls	r2, r3, #29
 80075bc:	d505      	bpl.n	80075ca <__sflush_r+0x46>
 80075be:	6863      	ldr	r3, [r4, #4]
 80075c0:	1ac0      	subs	r0, r0, r3
 80075c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075c4:	b10b      	cbz	r3, 80075ca <__sflush_r+0x46>
 80075c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075c8:	1ac0      	subs	r0, r0, r3
 80075ca:	2300      	movs	r3, #0
 80075cc:	4602      	mov	r2, r0
 80075ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075d0:	6a21      	ldr	r1, [r4, #32]
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b0      	blx	r6
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	d106      	bne.n	80075ea <__sflush_r+0x66>
 80075dc:	6829      	ldr	r1, [r5, #0]
 80075de:	291d      	cmp	r1, #29
 80075e0:	d82c      	bhi.n	800763c <__sflush_r+0xb8>
 80075e2:	4a2a      	ldr	r2, [pc, #168]	; (800768c <__sflush_r+0x108>)
 80075e4:	40ca      	lsrs	r2, r1
 80075e6:	07d6      	lsls	r6, r2, #31
 80075e8:	d528      	bpl.n	800763c <__sflush_r+0xb8>
 80075ea:	2200      	movs	r2, #0
 80075ec:	6062      	str	r2, [r4, #4]
 80075ee:	04d9      	lsls	r1, r3, #19
 80075f0:	6922      	ldr	r2, [r4, #16]
 80075f2:	6022      	str	r2, [r4, #0]
 80075f4:	d504      	bpl.n	8007600 <__sflush_r+0x7c>
 80075f6:	1c42      	adds	r2, r0, #1
 80075f8:	d101      	bne.n	80075fe <__sflush_r+0x7a>
 80075fa:	682b      	ldr	r3, [r5, #0]
 80075fc:	b903      	cbnz	r3, 8007600 <__sflush_r+0x7c>
 80075fe:	6560      	str	r0, [r4, #84]	; 0x54
 8007600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007602:	602f      	str	r7, [r5, #0]
 8007604:	2900      	cmp	r1, #0
 8007606:	d0ca      	beq.n	800759e <__sflush_r+0x1a>
 8007608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <__sflush_r+0x92>
 8007610:	4628      	mov	r0, r5
 8007612:	f7ff fc29 	bl	8006e68 <_free_r>
 8007616:	2000      	movs	r0, #0
 8007618:	6360      	str	r0, [r4, #52]	; 0x34
 800761a:	e7c1      	b.n	80075a0 <__sflush_r+0x1c>
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	2301      	movs	r3, #1
 8007620:	4628      	mov	r0, r5
 8007622:	47b0      	blx	r6
 8007624:	1c41      	adds	r1, r0, #1
 8007626:	d1c7      	bne.n	80075b8 <__sflush_r+0x34>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0c4      	beq.n	80075b8 <__sflush_r+0x34>
 800762e:	2b1d      	cmp	r3, #29
 8007630:	d001      	beq.n	8007636 <__sflush_r+0xb2>
 8007632:	2b16      	cmp	r3, #22
 8007634:	d101      	bne.n	800763a <__sflush_r+0xb6>
 8007636:	602f      	str	r7, [r5, #0]
 8007638:	e7b1      	b.n	800759e <__sflush_r+0x1a>
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007640:	81a3      	strh	r3, [r4, #12]
 8007642:	e7ad      	b.n	80075a0 <__sflush_r+0x1c>
 8007644:	690f      	ldr	r7, [r1, #16]
 8007646:	2f00      	cmp	r7, #0
 8007648:	d0a9      	beq.n	800759e <__sflush_r+0x1a>
 800764a:	0793      	lsls	r3, r2, #30
 800764c:	680e      	ldr	r6, [r1, #0]
 800764e:	bf08      	it	eq
 8007650:	694b      	ldreq	r3, [r1, #20]
 8007652:	600f      	str	r7, [r1, #0]
 8007654:	bf18      	it	ne
 8007656:	2300      	movne	r3, #0
 8007658:	eba6 0807 	sub.w	r8, r6, r7
 800765c:	608b      	str	r3, [r1, #8]
 800765e:	f1b8 0f00 	cmp.w	r8, #0
 8007662:	dd9c      	ble.n	800759e <__sflush_r+0x1a>
 8007664:	6a21      	ldr	r1, [r4, #32]
 8007666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007668:	4643      	mov	r3, r8
 800766a:	463a      	mov	r2, r7
 800766c:	4628      	mov	r0, r5
 800766e:	47b0      	blx	r6
 8007670:	2800      	cmp	r0, #0
 8007672:	dc06      	bgt.n	8007682 <__sflush_r+0xfe>
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767a:	81a3      	strh	r3, [r4, #12]
 800767c:	f04f 30ff 	mov.w	r0, #4294967295
 8007680:	e78e      	b.n	80075a0 <__sflush_r+0x1c>
 8007682:	4407      	add	r7, r0
 8007684:	eba8 0800 	sub.w	r8, r8, r0
 8007688:	e7e9      	b.n	800765e <__sflush_r+0xda>
 800768a:	bf00      	nop
 800768c:	20400001 	.word	0x20400001

08007690 <_fflush_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	690b      	ldr	r3, [r1, #16]
 8007694:	4605      	mov	r5, r0
 8007696:	460c      	mov	r4, r1
 8007698:	b913      	cbnz	r3, 80076a0 <_fflush_r+0x10>
 800769a:	2500      	movs	r5, #0
 800769c:	4628      	mov	r0, r5
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	b118      	cbz	r0, 80076aa <_fflush_r+0x1a>
 80076a2:	6983      	ldr	r3, [r0, #24]
 80076a4:	b90b      	cbnz	r3, 80076aa <_fflush_r+0x1a>
 80076a6:	f7fe ff89 	bl	80065bc <__sinit>
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <_fflush_r+0x6c>)
 80076ac:	429c      	cmp	r4, r3
 80076ae:	d11b      	bne.n	80076e8 <_fflush_r+0x58>
 80076b0:	686c      	ldr	r4, [r5, #4]
 80076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0ef      	beq.n	800769a <_fflush_r+0xa>
 80076ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076bc:	07d0      	lsls	r0, r2, #31
 80076be:	d404      	bmi.n	80076ca <_fflush_r+0x3a>
 80076c0:	0599      	lsls	r1, r3, #22
 80076c2:	d402      	bmi.n	80076ca <_fflush_r+0x3a>
 80076c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076c6:	f7ff f81c 	bl	8006702 <__retarget_lock_acquire_recursive>
 80076ca:	4628      	mov	r0, r5
 80076cc:	4621      	mov	r1, r4
 80076ce:	f7ff ff59 	bl	8007584 <__sflush_r>
 80076d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076d4:	07da      	lsls	r2, r3, #31
 80076d6:	4605      	mov	r5, r0
 80076d8:	d4e0      	bmi.n	800769c <_fflush_r+0xc>
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	059b      	lsls	r3, r3, #22
 80076de:	d4dd      	bmi.n	800769c <_fflush_r+0xc>
 80076e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076e2:	f7ff f80f 	bl	8006704 <__retarget_lock_release_recursive>
 80076e6:	e7d9      	b.n	800769c <_fflush_r+0xc>
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <_fflush_r+0x70>)
 80076ea:	429c      	cmp	r4, r3
 80076ec:	d101      	bne.n	80076f2 <_fflush_r+0x62>
 80076ee:	68ac      	ldr	r4, [r5, #8]
 80076f0:	e7df      	b.n	80076b2 <_fflush_r+0x22>
 80076f2:	4b04      	ldr	r3, [pc, #16]	; (8007704 <_fflush_r+0x74>)
 80076f4:	429c      	cmp	r4, r3
 80076f6:	bf08      	it	eq
 80076f8:	68ec      	ldreq	r4, [r5, #12]
 80076fa:	e7da      	b.n	80076b2 <_fflush_r+0x22>
 80076fc:	08007ac8 	.word	0x08007ac8
 8007700:	08007ae8 	.word	0x08007ae8
 8007704:	08007aa8 	.word	0x08007aa8

08007708 <fiprintf>:
 8007708:	b40e      	push	{r1, r2, r3}
 800770a:	b503      	push	{r0, r1, lr}
 800770c:	4601      	mov	r1, r0
 800770e:	ab03      	add	r3, sp, #12
 8007710:	4805      	ldr	r0, [pc, #20]	; (8007728 <fiprintf+0x20>)
 8007712:	f853 2b04 	ldr.w	r2, [r3], #4
 8007716:	6800      	ldr	r0, [r0, #0]
 8007718:	9301      	str	r3, [sp, #4]
 800771a:	f7ff fcaf 	bl	800707c <_vfiprintf_r>
 800771e:	b002      	add	sp, #8
 8007720:	f85d eb04 	ldr.w	lr, [sp], #4
 8007724:	b003      	add	sp, #12
 8007726:	4770      	bx	lr
 8007728:	20000010 	.word	0x20000010

0800772c <_lseek_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4d07      	ldr	r5, [pc, #28]	; (800774c <_lseek_r+0x20>)
 8007730:	4604      	mov	r4, r0
 8007732:	4608      	mov	r0, r1
 8007734:	4611      	mov	r1, r2
 8007736:	2200      	movs	r2, #0
 8007738:	602a      	str	r2, [r5, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	f7fa f8c2 	bl	80018c4 <_lseek>
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	d102      	bne.n	800774a <_lseek_r+0x1e>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	b103      	cbz	r3, 800774a <_lseek_r+0x1e>
 8007748:	6023      	str	r3, [r4, #0]
 800774a:	bd38      	pop	{r3, r4, r5, pc}
 800774c:	200002ec 	.word	0x200002ec

08007750 <__swhatbuf_r>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	460e      	mov	r6, r1
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	2900      	cmp	r1, #0
 800775a:	b096      	sub	sp, #88	; 0x58
 800775c:	4614      	mov	r4, r2
 800775e:	461d      	mov	r5, r3
 8007760:	da08      	bge.n	8007774 <__swhatbuf_r+0x24>
 8007762:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	061a      	lsls	r2, r3, #24
 800776c:	d410      	bmi.n	8007790 <__swhatbuf_r+0x40>
 800776e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007772:	e00e      	b.n	8007792 <__swhatbuf_r+0x42>
 8007774:	466a      	mov	r2, sp
 8007776:	f000 f895 	bl	80078a4 <_fstat_r>
 800777a:	2800      	cmp	r0, #0
 800777c:	dbf1      	blt.n	8007762 <__swhatbuf_r+0x12>
 800777e:	9a01      	ldr	r2, [sp, #4]
 8007780:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007784:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007788:	425a      	negs	r2, r3
 800778a:	415a      	adcs	r2, r3
 800778c:	602a      	str	r2, [r5, #0]
 800778e:	e7ee      	b.n	800776e <__swhatbuf_r+0x1e>
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	2000      	movs	r0, #0
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	b016      	add	sp, #88	; 0x58
 8007798:	bd70      	pop	{r4, r5, r6, pc}
	...

0800779c <__smakebuf_r>:
 800779c:	898b      	ldrh	r3, [r1, #12]
 800779e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077a0:	079d      	lsls	r5, r3, #30
 80077a2:	4606      	mov	r6, r0
 80077a4:	460c      	mov	r4, r1
 80077a6:	d507      	bpl.n	80077b8 <__smakebuf_r+0x1c>
 80077a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	2301      	movs	r3, #1
 80077b2:	6163      	str	r3, [r4, #20]
 80077b4:	b002      	add	sp, #8
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	ab01      	add	r3, sp, #4
 80077ba:	466a      	mov	r2, sp
 80077bc:	f7ff ffc8 	bl	8007750 <__swhatbuf_r>
 80077c0:	9900      	ldr	r1, [sp, #0]
 80077c2:	4605      	mov	r5, r0
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff fbbb 	bl	8006f40 <_malloc_r>
 80077ca:	b948      	cbnz	r0, 80077e0 <__smakebuf_r+0x44>
 80077cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d0:	059a      	lsls	r2, r3, #22
 80077d2:	d4ef      	bmi.n	80077b4 <__smakebuf_r+0x18>
 80077d4:	f023 0303 	bic.w	r3, r3, #3
 80077d8:	f043 0302 	orr.w	r3, r3, #2
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	e7e3      	b.n	80077a8 <__smakebuf_r+0xc>
 80077e0:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <__smakebuf_r+0x7c>)
 80077e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	6020      	str	r0, [r4, #0]
 80077e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	9b00      	ldr	r3, [sp, #0]
 80077f0:	6163      	str	r3, [r4, #20]
 80077f2:	9b01      	ldr	r3, [sp, #4]
 80077f4:	6120      	str	r0, [r4, #16]
 80077f6:	b15b      	cbz	r3, 8007810 <__smakebuf_r+0x74>
 80077f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077fc:	4630      	mov	r0, r6
 80077fe:	f000 f863 	bl	80078c8 <_isatty_r>
 8007802:	b128      	cbz	r0, 8007810 <__smakebuf_r+0x74>
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	f023 0303 	bic.w	r3, r3, #3
 800780a:	f043 0301 	orr.w	r3, r3, #1
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	89a0      	ldrh	r0, [r4, #12]
 8007812:	4305      	orrs	r5, r0
 8007814:	81a5      	strh	r5, [r4, #12]
 8007816:	e7cd      	b.n	80077b4 <__smakebuf_r+0x18>
 8007818:	08006555 	.word	0x08006555

0800781c <__ascii_mbtowc>:
 800781c:	b082      	sub	sp, #8
 800781e:	b901      	cbnz	r1, 8007822 <__ascii_mbtowc+0x6>
 8007820:	a901      	add	r1, sp, #4
 8007822:	b142      	cbz	r2, 8007836 <__ascii_mbtowc+0x1a>
 8007824:	b14b      	cbz	r3, 800783a <__ascii_mbtowc+0x1e>
 8007826:	7813      	ldrb	r3, [r2, #0]
 8007828:	600b      	str	r3, [r1, #0]
 800782a:	7812      	ldrb	r2, [r2, #0]
 800782c:	1e10      	subs	r0, r2, #0
 800782e:	bf18      	it	ne
 8007830:	2001      	movne	r0, #1
 8007832:	b002      	add	sp, #8
 8007834:	4770      	bx	lr
 8007836:	4610      	mov	r0, r2
 8007838:	e7fb      	b.n	8007832 <__ascii_mbtowc+0x16>
 800783a:	f06f 0001 	mvn.w	r0, #1
 800783e:	e7f8      	b.n	8007832 <__ascii_mbtowc+0x16>

08007840 <__malloc_lock>:
 8007840:	4801      	ldr	r0, [pc, #4]	; (8007848 <__malloc_lock+0x8>)
 8007842:	f7fe bf5e 	b.w	8006702 <__retarget_lock_acquire_recursive>
 8007846:	bf00      	nop
 8007848:	200002e0 	.word	0x200002e0

0800784c <__malloc_unlock>:
 800784c:	4801      	ldr	r0, [pc, #4]	; (8007854 <__malloc_unlock+0x8>)
 800784e:	f7fe bf59 	b.w	8006704 <__retarget_lock_release_recursive>
 8007852:	bf00      	nop
 8007854:	200002e0 	.word	0x200002e0

08007858 <_read_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d07      	ldr	r5, [pc, #28]	; (8007878 <_read_r+0x20>)
 800785c:	4604      	mov	r4, r0
 800785e:	4608      	mov	r0, r1
 8007860:	4611      	mov	r1, r2
 8007862:	2200      	movs	r2, #0
 8007864:	602a      	str	r2, [r5, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	f7f9 ffe8 	bl	800183c <_read>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_read_r+0x1e>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b103      	cbz	r3, 8007876 <_read_r+0x1e>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	200002ec 	.word	0x200002ec

0800787c <__ascii_wctomb>:
 800787c:	b149      	cbz	r1, 8007892 <__ascii_wctomb+0x16>
 800787e:	2aff      	cmp	r2, #255	; 0xff
 8007880:	bf85      	ittet	hi
 8007882:	238a      	movhi	r3, #138	; 0x8a
 8007884:	6003      	strhi	r3, [r0, #0]
 8007886:	700a      	strbls	r2, [r1, #0]
 8007888:	f04f 30ff 	movhi.w	r0, #4294967295
 800788c:	bf98      	it	ls
 800788e:	2001      	movls	r0, #1
 8007890:	4770      	bx	lr
 8007892:	4608      	mov	r0, r1
 8007894:	4770      	bx	lr

08007896 <abort>:
 8007896:	b508      	push	{r3, lr}
 8007898:	2006      	movs	r0, #6
 800789a:	f000 f84d 	bl	8007938 <raise>
 800789e:	2001      	movs	r0, #1
 80078a0:	f7f9 ffc2 	bl	8001828 <_exit>

080078a4 <_fstat_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	; (80078c4 <_fstat_r+0x20>)
 80078a8:	2300      	movs	r3, #0
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	f7f9 ffec 	bl	800188e <_fstat>
 80078b6:	1c43      	adds	r3, r0, #1
 80078b8:	d102      	bne.n	80078c0 <_fstat_r+0x1c>
 80078ba:	682b      	ldr	r3, [r5, #0]
 80078bc:	b103      	cbz	r3, 80078c0 <_fstat_r+0x1c>
 80078be:	6023      	str	r3, [r4, #0]
 80078c0:	bd38      	pop	{r3, r4, r5, pc}
 80078c2:	bf00      	nop
 80078c4:	200002ec 	.word	0x200002ec

080078c8 <_isatty_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d06      	ldr	r5, [pc, #24]	; (80078e4 <_isatty_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7f9 ffeb 	bl	80018ae <_isatty>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_isatty_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_isatty_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	200002ec 	.word	0x200002ec

080078e8 <_raise_r>:
 80078e8:	291f      	cmp	r1, #31
 80078ea:	b538      	push	{r3, r4, r5, lr}
 80078ec:	4604      	mov	r4, r0
 80078ee:	460d      	mov	r5, r1
 80078f0:	d904      	bls.n	80078fc <_raise_r+0x14>
 80078f2:	2316      	movs	r3, #22
 80078f4:	6003      	str	r3, [r0, #0]
 80078f6:	f04f 30ff 	mov.w	r0, #4294967295
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078fe:	b112      	cbz	r2, 8007906 <_raise_r+0x1e>
 8007900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007904:	b94b      	cbnz	r3, 800791a <_raise_r+0x32>
 8007906:	4620      	mov	r0, r4
 8007908:	f000 f830 	bl	800796c <_getpid_r>
 800790c:	462a      	mov	r2, r5
 800790e:	4601      	mov	r1, r0
 8007910:	4620      	mov	r0, r4
 8007912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007916:	f000 b817 	b.w	8007948 <_kill_r>
 800791a:	2b01      	cmp	r3, #1
 800791c:	d00a      	beq.n	8007934 <_raise_r+0x4c>
 800791e:	1c59      	adds	r1, r3, #1
 8007920:	d103      	bne.n	800792a <_raise_r+0x42>
 8007922:	2316      	movs	r3, #22
 8007924:	6003      	str	r3, [r0, #0]
 8007926:	2001      	movs	r0, #1
 8007928:	e7e7      	b.n	80078fa <_raise_r+0x12>
 800792a:	2400      	movs	r4, #0
 800792c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007930:	4628      	mov	r0, r5
 8007932:	4798      	blx	r3
 8007934:	2000      	movs	r0, #0
 8007936:	e7e0      	b.n	80078fa <_raise_r+0x12>

08007938 <raise>:
 8007938:	4b02      	ldr	r3, [pc, #8]	; (8007944 <raise+0xc>)
 800793a:	4601      	mov	r1, r0
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	f7ff bfd3 	b.w	80078e8 <_raise_r>
 8007942:	bf00      	nop
 8007944:	20000010 	.word	0x20000010

08007948 <_kill_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4d07      	ldr	r5, [pc, #28]	; (8007968 <_kill_r+0x20>)
 800794c:	2300      	movs	r3, #0
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	602b      	str	r3, [r5, #0]
 8007956:	f7f9 ff57 	bl	8001808 <_kill>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	d102      	bne.n	8007964 <_kill_r+0x1c>
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	b103      	cbz	r3, 8007964 <_kill_r+0x1c>
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	bd38      	pop	{r3, r4, r5, pc}
 8007966:	bf00      	nop
 8007968:	200002ec 	.word	0x200002ec

0800796c <_getpid_r>:
 800796c:	f7f9 bf44 	b.w	80017f8 <_getpid>

08007970 <_init>:
 8007970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007972:	bf00      	nop
 8007974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007976:	bc08      	pop	{r3}
 8007978:	469e      	mov	lr, r3
 800797a:	4770      	bx	lr

0800797c <_fini>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	bf00      	nop
 8007980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007982:	bc08      	pop	{r3}
 8007984:	469e      	mov	lr, r3
 8007986:	4770      	bx	lr
