
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800ab78  0800ab78  0001ab78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad48  0800ad48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad48  0800ad48  0001ad48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad50  0800ad50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad50  0800ad50  0001ad50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad54  0800ad54  0001ad54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ad58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  20000070  0800adc8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  0800adc8  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a447  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6e  00000000  00000000  0003a4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003df58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003f500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a523  00000000  00000000  000408e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d848  00000000  00000000  0006ae03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f80dd  00000000  00000000  0008864b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f4  00000000  00000000  00180778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ab60 	.word	0x0800ab60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800ab60 	.word	0x0800ab60

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <WR_TO_Sd>:
/**
 * @brief Ecriture dans le fichier
 * @param : file_name : nom du fichier
 * @param : Wtext : data à transmettre
 */
FRESULT WR_TO_Sd(const char *wtext, const char *file_name) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */

	//Open file for writing (Create)
	if (f_open(&SDFile, file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 80005ce:	2232      	movs	r2, #50	; 0x32
 80005d0:	6839      	ldr	r1, [r7, #0]
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <WR_TO_Sd+0x58>)
 80005d4:	f008 f8c4 	bl	8008760 <f_open>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <WR_TO_Sd+0x1e>
		Error_Handler();
 80005de:	f000 fa81 	bl	8000ae4 <Error_Handler>
	}
	//Write to the text file
	res = f_write(&SDFile, wtext, strlen(wtext), (void*) &byteswritten);
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff fe14 	bl	8000210 <strlen>
 80005e8:	4602      	mov	r2, r0
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <WR_TO_Sd+0x58>)
 80005f2:	f008 fa73 	bl	8008adc <f_write>
 80005f6:	4603      	mov	r3, r0
 80005f8:	73fb      	strb	r3, [r7, #15]
	if ((byteswritten == 0) || (res != FR_OK)) {
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <WR_TO_Sd+0x42>
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <WR_TO_Sd+0x48>
		Error_Handler();
 8000606:	f000 fa6d 	bl	8000ae4 <Error_Handler>
 800060a:	e002      	b.n	8000612 <WR_TO_Sd+0x4e>
	} else {

		f_close(&SDFile); // Close file object
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <WR_TO_Sd+0x58>)
 800060e:	f008 fc58 	bl	8008ec2 <f_close>
	}
	//f_mount(&SDFatFS, (TCHAR const*) NULL, 0); //unmount file system object
	return res;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000052c 	.word	0x2000052c

08000620 <Fat_Init>:

/**
 * @brief : Initialiser un espace de travail dans la carte Sd
 */

void Fat_Init() {
 8000620:	b580      	push	{r7, lr}
 8000622:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000626:	af02      	add	r7, sp, #8

	uint8_t rtext[_MAX_SS];/* File read buffer */
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8000628:	2200      	movs	r2, #0
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <Fat_Init+0x4c>)
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <Fat_Init+0x50>)
 800062e:	f008 f851 	bl	80086d4 <f_mount>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <Fat_Init+0x1e>
		Error_Handler();
 8000638:	f000 fa54 	bl	8000ae4 <Error_Handler>
		FRESULT res = f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext));
		if (res!= FR_OK){ //creates a FAT volume on the logical drive)
			Error_Handler(); // error handler
		}
	}
}
 800063c:	e011      	b.n	8000662 <Fat_Init+0x42>
		FRESULT res = f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	2200      	movs	r2, #0
 8000648:	2107      	movs	r1, #7
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <Fat_Init+0x4c>)
 800064c:	f008 fc64 	bl	8008f18 <f_mkfs>
 8000650:	4603      	mov	r3, r0
 8000652:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (res!= FR_OK){ //creates a FAT volume on the logical drive)
 8000656:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <Fat_Init+0x42>
			Error_Handler(); // error handler
 800065e:	f000 fa41 	bl	8000ae4 <Error_Handler>
}
 8000662:	bf00      	nop
 8000664:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200002f8 	.word	0x200002f8
 8000670:	200002fc 	.word	0x200002fc

08000674 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_DMA_Init+0x48>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <MX_DMA_Init+0x48>)
 8000680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_DMA_Init+0x48>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	203b      	movs	r0, #59	; 0x3b
 8000698:	f000 ff89 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800069c:	203b      	movs	r0, #59	; 0x3b
 800069e:	f000 ffa2 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2045      	movs	r0, #69	; 0x45
 80006a8:	f000 ff81 	bl	80015ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006ac:	2045      	movs	r0, #69	; 0x45
 80006ae:	f000 ff9a 	bl	80015e6 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b090      	sub	sp, #64	; 0x40
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d6:	4b91      	ldr	r3, [pc, #580]	; (800091c <MX_GPIO_Init+0x25c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a90      	ldr	r2, [pc, #576]	; (800091c <MX_GPIO_Init+0x25c>)
 80006dc:	f043 0310 	orr.w	r3, r3, #16
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b8e      	ldr	r3, [pc, #568]	; (800091c <MX_GPIO_Init+0x25c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80006ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ee:	4b8b      	ldr	r3, [pc, #556]	; (800091c <MX_GPIO_Init+0x25c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a8a      	ldr	r2, [pc, #552]	; (800091c <MX_GPIO_Init+0x25c>)
 80006f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b88      	ldr	r3, [pc, #544]	; (800091c <MX_GPIO_Init+0x25c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b85      	ldr	r3, [pc, #532]	; (800091c <MX_GPIO_Init+0x25c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a84      	ldr	r2, [pc, #528]	; (800091c <MX_GPIO_Init+0x25c>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b82      	ldr	r3, [pc, #520]	; (800091c <MX_GPIO_Init+0x25c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	623b      	str	r3, [r7, #32]
 800071c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071e:	4b7f      	ldr	r3, [pc, #508]	; (800091c <MX_GPIO_Init+0x25c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a7e      	ldr	r2, [pc, #504]	; (800091c <MX_GPIO_Init+0x25c>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b7c      	ldr	r3, [pc, #496]	; (800091c <MX_GPIO_Init+0x25c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	61fb      	str	r3, [r7, #28]
 8000734:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b79      	ldr	r3, [pc, #484]	; (800091c <MX_GPIO_Init+0x25c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a78      	ldr	r2, [pc, #480]	; (800091c <MX_GPIO_Init+0x25c>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b76      	ldr	r3, [pc, #472]	; (800091c <MX_GPIO_Init+0x25c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b73      	ldr	r3, [pc, #460]	; (800091c <MX_GPIO_Init+0x25c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a72      	ldr	r2, [pc, #456]	; (800091c <MX_GPIO_Init+0x25c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b70      	ldr	r3, [pc, #448]	; (800091c <MX_GPIO_Init+0x25c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000766:	4b6d      	ldr	r3, [pc, #436]	; (800091c <MX_GPIO_Init+0x25c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a6c      	ldr	r2, [pc, #432]	; (800091c <MX_GPIO_Init+0x25c>)
 800076c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b6a      	ldr	r3, [pc, #424]	; (800091c <MX_GPIO_Init+0x25c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800077e:	4b67      	ldr	r3, [pc, #412]	; (800091c <MX_GPIO_Init+0x25c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a66      	ldr	r2, [pc, #408]	; (800091c <MX_GPIO_Init+0x25c>)
 8000784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b64      	ldr	r3, [pc, #400]	; (800091c <MX_GPIO_Init+0x25c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000796:	4b61      	ldr	r3, [pc, #388]	; (800091c <MX_GPIO_Init+0x25c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a60      	ldr	r2, [pc, #384]	; (800091c <MX_GPIO_Init+0x25c>)
 800079c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b5e      	ldr	r3, [pc, #376]	; (800091c <MX_GPIO_Init+0x25c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b5b      	ldr	r3, [pc, #364]	; (800091c <MX_GPIO_Init+0x25c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a5a      	ldr	r2, [pc, #360]	; (800091c <MX_GPIO_Init+0x25c>)
 80007b4:	f043 0320 	orr.w	r3, r3, #32
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b58      	ldr	r3, [pc, #352]	; (800091c <MX_GPIO_Init+0x25c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0320 	and.w	r3, r3, #32
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	4b55      	ldr	r3, [pc, #340]	; (800091c <MX_GPIO_Init+0x25c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a54      	ldr	r2, [pc, #336]	; (800091c <MX_GPIO_Init+0x25c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b52      	ldr	r3, [pc, #328]	; (800091c <MX_GPIO_Init+0x25c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 80007de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e4:	2303      	movs	r3, #3
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f0:	4619      	mov	r1, r3
 80007f2:	484b      	ldr	r0, [pc, #300]	; (8000920 <MX_GPIO_Init+0x260>)
 80007f4:	f001 fab8 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 80007f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fe:	2303      	movs	r3, #3
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080a:	4619      	mov	r1, r3
 800080c:	4845      	ldr	r0, [pc, #276]	; (8000924 <MX_GPIO_Init+0x264>)
 800080e:	f001 faab 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB13 PB12 PB2
                           PB10 PB1 PB0 PB11
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8000812:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2
                          |GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000818:	2303      	movs	r3, #3
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000824:	4619      	mov	r1, r3
 8000826:	4840      	ldr	r0, [pc, #256]	; (8000928 <MX_GPIO_Init+0x268>)
 8000828:	f001 fa9e 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 800082c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000832:	2303      	movs	r3, #3
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083e:	4619      	mov	r1, r3
 8000840:	483a      	ldr	r0, [pc, #232]	; (800092c <MX_GPIO_Init+0x26c>)
 8000842:	f001 fa91 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8000846:	f649 63ff 	movw	r3, #40703	; 0x9eff
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084c:	2303      	movs	r3, #3
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000858:	4619      	mov	r1, r3
 800085a:	4835      	ldr	r0, [pc, #212]	; (8000930 <MX_GPIO_Init+0x270>)
 800085c:	f001 fa84 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8000860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000866:	2303      	movs	r3, #3
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800086e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000872:	4619      	mov	r1, r3
 8000874:	482f      	ldr	r0, [pc, #188]	; (8000934 <MX_GPIO_Init+0x274>)
 8000876:	f001 fa77 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 800087a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	2303      	movs	r3, #3
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000888:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088c:	4619      	mov	r1, r3
 800088e:	482a      	ldr	r0, [pc, #168]	; (8000938 <MX_GPIO_Init+0x278>)
 8000890:	f001 fa6a 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000894:	23ff      	movs	r3, #255	; 0xff
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4825      	ldr	r0, [pc, #148]	; (800093c <MX_GPIO_Init+0x27c>)
 80008a8:	f001 fa5e 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	481f      	ldr	r0, [pc, #124]	; (8000940 <MX_GPIO_Init+0x280>)
 80008c2:	f001 fa51 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008cc:	2303      	movs	r3, #3
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d8:	4619      	mov	r1, r3
 80008da:	481a      	ldr	r0, [pc, #104]	; (8000944 <MX_GPIO_Init+0x284>)
 80008dc:	f001 fa44 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80008e0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f2:	4619      	mov	r1, r3
 80008f4:	4814      	ldr	r0, [pc, #80]	; (8000948 <MX_GPIO_Init+0x288>)
 80008f6:	f001 fa37 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC3 PC0 PC1 PC2
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 80008fa:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000900:	2303      	movs	r3, #3
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000908:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090c:	4619      	mov	r1, r3
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_GPIO_Init+0x280>)
 8000910:	f001 fa2a 	bl	8001d68 <HAL_GPIO_Init>

}
 8000914:	bf00      	nop
 8000916:	3740      	adds	r7, #64	; 0x40
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40021000 	.word	0x40021000
 8000924:	40021800 	.word	0x40021800
 8000928:	40020400 	.word	0x40020400
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40020000 	.word	0x40020000
 8000934:	40022400 	.word	0x40022400
 8000938:	40022000 	.word	0x40022000
 800093c:	40022800 	.word	0x40022800
 8000940:	40020800 	.word	0x40020800
 8000944:	40021400 	.word	0x40021400
 8000948:	40021c00 	.word	0x40021c00

0800094c <_write>:
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char *ptr, int len) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 100);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	b29a      	uxth	r2, r3
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	68b9      	ldr	r1, [r7, #8]
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <_write+0x24>)
 8000962:	f004 fd0f 	bl	8005384 <HAL_UART_Transmit>
	return len;
 8000966:	687b      	ldr	r3, [r7, #4]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000026c 	.word	0x2000026c

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 fcbc 	bl	80012f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f835 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f7ff fe9d 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000986:	f7ff fe75 	bl	8000674 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800098a:	f000 f8b1 	bl	8000af0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800098e:	f005 ff01 	bl	8006794 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000992:	f000 fbf9 	bl	8001188 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000996:	f000 fb4d 	bl	8001034 <MX_TIM6_Init>
  MX_TIM1_Init();
 800099a:	f000 faf1 	bl	8000f80 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Fat_Init();
 800099e:	f7ff fe3f 	bl	8000620 <Fat_Init>
  char wtext[50]=""; //Buffer pour le texte à Ecrir dans le fichier
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	222e      	movs	r2, #46	; 0x2e
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f008 ff64 	bl	800987c <memset>
  uint8_t i=0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(wtext,"test3 %d\n\r",i++);
 80009ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 80009c4:	461a      	mov	r2, r3
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4906      	ldr	r1, [pc, #24]	; (80009e4 <main+0x70>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f008 ff76 	bl	80098bc <siprintf>
	  WR_TO_Sd(wtext, "test.txt");
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4905      	ldr	r1, [pc, #20]	; (80009e8 <main+0x74>)
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fdf5 	bl	80005c4 <WR_TO_Sd>
	  HAL_Delay(1000);
 80009da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009de:	f000 fce7 	bl	80013b0 <HAL_Delay>
	  sprintf(wtext,"test3 %d\n\r",i++);
 80009e2:	e7ea      	b.n	80009ba <main+0x46>
 80009e4:	0800ab78 	.word	0x0800ab78
 80009e8:	0800ab84 	.word	0x0800ab84

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	; 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	2230      	movs	r2, #48	; 0x30
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f008 ff3e 	bl	800987c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a2a      	ldr	r2, [pc, #168]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <SystemClock_Config+0xd8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a30:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <SystemClock_Config+0xd8>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <SystemClock_Config+0xd8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a44:	2301      	movs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a5c:	2360      	movs	r3, #96	; 0x60
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fb8f 	bl	8002190 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a78:	f000 f834 	bl	8000ae4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a7c:	f001 fb38 	bl	80020f0 <HAL_PWREx_EnableOverDrive>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a86:	f000 f82d 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fe15 	bl	80026d8 <HAL_RCC_ClockConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ab4:	f000 f816 	bl	8000ae4 <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3750      	adds	r7, #80	; 0x50
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	printf("hey\n\r");
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ad2:	f008 fedb 	bl	800988c <iprintf>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	0800ab90 	.word	0x0800ab90

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000af6:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <MX_SDMMC1_SD_Init+0x3c>)
 8000af8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <MX_SDMMC1_SD_Init+0x38>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	2000008c 	.word	0x2000008c
 8000b2c:	40012c00 	.word	0x40012c00

08000b30 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0ac      	sub	sp, #176	; 0xb0
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b48:	f107 0318 	add.w	r3, r7, #24
 8000b4c:	2284      	movs	r2, #132	; 0x84
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f008 fe93 	bl	800987c <memset>
  if(sdHandle->Instance==SDMMC1)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a74      	ldr	r2, [pc, #464]	; (8000d2c <HAL_SD_MspInit+0x1fc>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	f040 80e0 	bne.w	8000d22 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000b62:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000b66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 ff93 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8000b84:	f7ff ffae 	bl	8000ae4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b88:	4b69      	ldr	r3, [pc, #420]	; (8000d30 <HAL_SD_MspInit+0x200>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	4a68      	ldr	r2, [pc, #416]	; (8000d30 <HAL_SD_MspInit+0x200>)
 8000b8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b92:	6453      	str	r3, [r2, #68]	; 0x44
 8000b94:	4b66      	ldr	r3, [pc, #408]	; (8000d30 <HAL_SD_MspInit+0x200>)
 8000b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba0:	4b63      	ldr	r3, [pc, #396]	; (8000d30 <HAL_SD_MspInit+0x200>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	4a62      	ldr	r2, [pc, #392]	; (8000d30 <HAL_SD_MspInit+0x200>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bac:	4b60      	ldr	r3, [pc, #384]	; (8000d30 <HAL_SD_MspInit+0x200>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb8:	4b5d      	ldr	r3, [pc, #372]	; (8000d30 <HAL_SD_MspInit+0x200>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a5c      	ldr	r2, [pc, #368]	; (8000d30 <HAL_SD_MspInit+0x200>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b5a      	ldr	r3, [pc, #360]	; (8000d30 <HAL_SD_MspInit+0x200>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0308 	and.w	r3, r3, #8
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8000bd0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bea:	230c      	movs	r3, #12
 8000bec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	484f      	ldr	r0, [pc, #316]	; (8000d34 <HAL_SD_MspInit+0x204>)
 8000bf8:	f001 f8b6 	bl	8001d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c14:	230c      	movs	r3, #12
 8000c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4845      	ldr	r0, [pc, #276]	; (8000d38 <HAL_SD_MspInit+0x208>)
 8000c22:	f001 f8a1 	bl	8001d68 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000c26:	4b45      	ldr	r3, [pc, #276]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c28:	4a45      	ldr	r2, [pc, #276]	; (8000d40 <HAL_SD_MspInit+0x210>)
 8000c2a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c2c:	4b43      	ldr	r3, [pc, #268]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c32:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c34:	4b41      	ldr	r3, [pc, #260]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3a:	4b40      	ldr	r3, [pc, #256]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c40:	4b3e      	ldr	r3, [pc, #248]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c46:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c48:	4b3c      	ldr	r3, [pc, #240]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c4e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c50:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c56:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000c58:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c76:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c78:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c7e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000c80:	482e      	ldr	r0, [pc, #184]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c82:	f000 fccb 	bl	800161c <HAL_DMA_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000c8c:	f7ff ff2a 	bl	8000ae4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a2a      	ldr	r2, [pc, #168]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c94:	641a      	str	r2, [r3, #64]	; 0x40
 8000c96:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <HAL_SD_MspInit+0x20c>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000c9e:	4a2a      	ldr	r2, [pc, #168]	; (8000d48 <HAL_SD_MspInit+0x218>)
 8000ca0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000ca4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cac:	2240      	movs	r2, #64	; 0x40
 8000cae:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cbc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ccc:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cdc:	2204      	movs	r2, #4
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ce0:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000ce8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cf0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000cf4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000cf6:	4813      	ldr	r0, [pc, #76]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000cf8:	f000 fc90 	bl	800161c <HAL_DMA_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000d02:	f7ff feef 	bl	8000ae4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000d0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_SD_MspInit+0x214>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	2031      	movs	r0, #49	; 0x31
 8000d18:	f000 fc49 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000d1c:	2031      	movs	r0, #49	; 0x31
 8000d1e:	f000 fc62 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000d22:	bf00      	nop
 8000d24:	37b0      	adds	r7, #176	; 0xb0
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40012c00 	.word	0x40012c00
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	20000110 	.word	0x20000110
 8000d40:	40026458 	.word	0x40026458
 8000d44:	20000170 	.word	0x20000170
 8000d48:	400264a0 	.word	0x400264a0

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x44>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_MspInit+0x44>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_MspInit+0x44>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x44>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x44>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 fac6 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <TIM1_CC_IRQHandler+0x10>)
 8000dee:	f003 fe22 	bl	8004a36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001d4 	.word	0x200001d4

08000dfc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <SDMMC1_IRQHandler+0x10>)
 8000e02:	f002 fcbf 	bl	8003784 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000008c 	.word	0x2000008c

08000e10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <TIM6_DAC_IRQHandler+0x10>)
 8000e16:	f003 fe0e 	bl	8004a36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000220 	.word	0x20000220

08000e24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <DMA2_Stream3_IRQHandler+0x10>)
 8000e2a:	f000 fd27 	bl	800187c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000110 	.word	0x20000110

08000e38 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <DMA2_Stream6_IRQHandler+0x10>)
 8000e3e:	f000 fd1d 	bl	800187c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000170 	.word	0x20000170

08000e4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
	}

return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eae:	605a      	str	r2, [r3, #4]
	return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_isatty>:

int _isatty(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f008 fc82 	bl	8009828 <__errno>
 8000f24:	4603      	mov	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20050000 	.word	0x20050000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	200001d0 	.word	0x200001d0
 8000f58:	200007a8 	.word	0x200007a8

08000f5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <MX_TIM1_Init+0xac>)
 8000fa0:	4a23      	ldr	r2, [pc, #140]	; (8001030 <MX_TIM1_Init+0xb0>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_TIM1_Init+0xac>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <MX_TIM1_Init+0xac>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_TIM1_Init+0xac>)
 8000fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_TIM1_Init+0xac>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <MX_TIM1_Init+0xac>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_TIM1_Init+0xac>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000fca:	4818      	ldr	r0, [pc, #96]	; (800102c <MX_TIM1_Init+0xac>)
 8000fcc:	f003 fcdc 	bl	8004988 <HAL_TIM_IC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fd6:	f7ff fd85 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480f      	ldr	r0, [pc, #60]	; (800102c <MX_TIM1_Init+0xac>)
 8000fee:	f004 f8cf 	bl	8005190 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ff8:	f7ff fd74 	bl	8000ae4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001000:	2301      	movs	r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <MX_TIM1_Init+0xac>)
 8001014:	f003 fe2e 	bl	8004c74 <HAL_TIM_IC_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800101e:	f7ff fd61 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	3720      	adds	r7, #32
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001d4 	.word	0x200001d4
 8001030:	40010000 	.word	0x40010000

08001034 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_TIM6_Init+0x68>)
 8001046:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <MX_TIM6_Init+0x6c>)
 8001048:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_TIM6_Init+0x68>)
 800104c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001050:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_TIM6_Init+0x68>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_TIM6_Init+0x68>)
 800105a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800105e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_TIM6_Init+0x68>)
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_TIM6_Init+0x68>)
 8001068:	f003 fc37 	bl	80048da <HAL_TIM_Base_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001072:	f7ff fd37 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_TIM6_Init+0x68>)
 8001084:	f004 f884 	bl	8005190 <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800108e:	f7ff fd29 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000220 	.word	0x20000220
 80010a0:	40001000 	.word	0x40001000

080010a4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_TIM_IC_MspInit+0x8c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d130      	bne.n	8001128 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_TIM_IC_MspInit+0x90>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <HAL_TIM_IC_MspInit+0x90>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_TIM_IC_MspInit+0x90>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_TIM_IC_MspInit+0x90>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <HAL_TIM_IC_MspInit+0x90>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_TIM_IC_MspInit+0x90>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001108:	2301      	movs	r3, #1
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <HAL_TIM_IC_MspInit+0x94>)
 8001114:	f000 fe28 	bl	8001d68 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	201b      	movs	r0, #27
 800111e:	f000 fa46 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001122:	201b      	movs	r0, #27
 8001124:	f000 fa5f 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	; 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40010000 	.word	0x40010000
 8001134:	40023800 	.word	0x40023800
 8001138:	40020000 	.word	0x40020000

0800113c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_TIM_Base_MspInit+0x44>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d113      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_TIM_Base_MspInit+0x48>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <HAL_TIM_Base_MspInit+0x48>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_Base_MspInit+0x48>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2036      	movs	r0, #54	; 0x36
 800116c:	f000 fa1f 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001170:	2036      	movs	r0, #54	; 0x36
 8001172:	f000 fa38 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40001000 	.word	0x40001000
 8001184:	40023800 	.word	0x40023800

08001188 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <MX_USART1_UART_Init+0x5c>)
 8001190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 8001194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART1_UART_Init+0x58>)
 80011cc:	f004 f88c 	bl	80052e8 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011d6:	f7ff fc85 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000026c 	.word	0x2000026c
 80011e4:	40011000 	.word	0x40011000

080011e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0aa      	sub	sp, #168	; 0xa8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	2284      	movs	r2, #132	; 0x84
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f008 fb37 	bl	800987c <memset>
  if(uartHandle->Instance==USART1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a21      	ldr	r2, [pc, #132]	; (8001298 <HAL_UART_MspInit+0xb0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d13a      	bne.n	800128e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001218:	2340      	movs	r3, #64	; 0x40
 800121a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800121c:	2300      	movs	r3, #0
 800121e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fc3d 	bl	8002aa4 <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001230:	f7ff fc58 	bl	8000ae4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_UART_MspInit+0xb4>)
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	4a18      	ldr	r2, [pc, #96]	; (800129c <HAL_UART_MspInit+0xb4>)
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	6453      	str	r3, [r2, #68]	; 0x44
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_UART_MspInit+0xb4>)
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_UART_MspInit+0xb4>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	4a12      	ldr	r2, [pc, #72]	; (800129c <HAL_UART_MspInit+0xb4>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	6313      	str	r3, [r2, #48]	; 0x30
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_UART_MspInit+0xb4>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001264:	23c0      	movs	r3, #192	; 0xc0
 8001266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800127c:	2307      	movs	r3, #7
 800127e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_UART_MspInit+0xb8>)
 800128a:	f000 fd6d 	bl	8001d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800128e:	bf00      	nop
 8001290:	37a8      	adds	r7, #168	; 0xa8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40011000 	.word	0x40011000
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020400 	.word	0x40020400

080012a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ce:	f7ff fe45 	bl	8000f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f008 faaf 	bl	8009834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff fb4d 	bl	8000974 <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012e8:	0800ad58 	.word	0x0800ad58
  ldr r2, =_sbss
 80012ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012f0:	200007a8 	.word	0x200007a8

080012f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC_IRQHandler>

080012f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 f94c 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001300:	2000      	movs	r0, #0
 8001302:	f000 f805 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001306:	f7ff fd21 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f967 	bl	8001602 <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f92f 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000008 	.word	0x20000008
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008
 8001394:	200002f0 	.word	0x200002f0

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	200002f0 	.word	0x200002f0

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	4313      	orrs	r3, r2
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x40>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00
 800143c:	05fa0000 	.word	0x05fa0000

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff29 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff3e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff31 	bl	800145c <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff feb6 	bl	8001398 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e099      	b.n	800176c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001658:	e00f      	b.n	800167a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165a:	f7ff fe9d 	bl	8001398 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b05      	cmp	r3, #5
 8001666:	d908      	bls.n	800167a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2203      	movs	r2, #3
 8001672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e078      	b.n	800176c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1e8      	bne.n	800165a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4b38      	ldr	r3, [pc, #224]	; (8001774 <HAL_DMA_Init+0x158>)
 8001694:	4013      	ands	r3, r2
 8001696:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d107      	bne.n	80016e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	4313      	orrs	r3, r2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f023 0307 	bic.w	r3, r3, #7
 80016fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	2b04      	cmp	r3, #4
 800170c:	d117      	bne.n	800173e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00e      	beq.n	800173e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 faa5 	bl	8001c70 <DMA_CheckFifoParam>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800173a:	2301      	movs	r3, #1
 800173c:	e016      	b.n	800176c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fa5c 	bl	8001c04 <DMA_CalcBaseAndBitshift>
 800174c:	4603      	mov	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	223f      	movs	r2, #63	; 0x3f
 8001756:	409a      	lsls	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	f010803f 	.word	0xf010803f

08001778 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_DMA_Start_IT+0x26>
 800179a:	2302      	movs	r3, #2
 800179c:	e048      	b.n	8001830 <HAL_DMA_Start_IT+0xb8>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d137      	bne.n	8001822 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2202      	movs	r2, #2
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9ee 	bl	8001ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	223f      	movs	r2, #63	; 0x3f
 80017d2:	409a      	lsls	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0216 	orr.w	r2, r2, #22
 80017e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017f6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0208 	orr.w	r2, r2, #8
 800180e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e005      	b.n	800182e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800182a:	2302      	movs	r3, #2
 800182c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800182e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d004      	beq.n	8001856 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00c      	b.n	8001870 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2205      	movs	r2, #5
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001888:	4b8e      	ldr	r3, [pc, #568]	; (8001ac4 <HAL_DMA_IRQHandler+0x248>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a8e      	ldr	r2, [pc, #568]	; (8001ac8 <HAL_DMA_IRQHandler+0x24c>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0a9b      	lsrs	r3, r3, #10
 8001894:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a6:	2208      	movs	r2, #8
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01a      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d013      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0204 	bic.w	r2, r2, #4
 80018ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	2208      	movs	r2, #8
 80018d6:	409a      	lsls	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	2201      	movs	r2, #1
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d012      	beq.n	800191e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	2201      	movs	r2, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001916:	f043 0202 	orr.w	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2204      	movs	r2, #4
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d012      	beq.n	8001954 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00b      	beq.n	8001954 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	2204      	movs	r2, #4
 8001942:	409a      	lsls	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194c:	f043 0204 	orr.w	r2, r3, #4
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001958:	2210      	movs	r2, #16
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d043      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03c      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	2210      	movs	r2, #16
 8001978:	409a      	lsls	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d018      	beq.n	80019be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d024      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	4798      	blx	r3
 80019aa:	e01f      	b.n	80019ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01b      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
 80019bc:	e016      	b.n	80019ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d107      	bne.n	80019dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0208 	bic.w	r2, r2, #8
 80019da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	2220      	movs	r2, #32
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 808f 	beq.w	8001b1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 8087 	beq.w	8001b1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2220      	movs	r2, #32
 8001a14:	409a      	lsls	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d136      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0216 	bic.w	r2, r2, #22
 8001a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <HAL_DMA_IRQHandler+0x1da>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6a:	223f      	movs	r2, #63	; 0x3f
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d07e      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
        }
        return;
 8001a92:	e079      	b.n	8001b88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01d      	beq.n	8001ade <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10d      	bne.n	8001acc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d031      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
 8001ac0:	e02c      	b.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d023      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
 8001adc:	e01e      	b.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10f      	bne.n	8001b0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0210 	bic.w	r2, r2, #16
 8001afa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d032      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d022      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2205      	movs	r2, #5
 8001b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d307      	bcc.n	8001b64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f2      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x2cc>
 8001b62:	e000      	b.n	8001b66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
 8001b86:	e000      	b.n	8001b8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b88:	bf00      	nop
    }
  }
}
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b40      	cmp	r3, #64	; 0x40
 8001bd4:	d108      	bne.n	8001be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001be6:	e007      	b.n	8001bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	60da      	str	r2, [r3, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3b10      	subs	r3, #16
 8001c14:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <DMA_CalcBaseAndBitshift+0x60>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <DMA_CalcBaseAndBitshift+0x64>)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d908      	bls.n	8001c44 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <DMA_CalcBaseAndBitshift+0x68>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	1d1a      	adds	r2, r3, #4
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	659a      	str	r2, [r3, #88]	; 0x58
 8001c42:	e006      	b.n	8001c52 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <DMA_CalcBaseAndBitshift+0x68>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	aaaaaaab 	.word	0xaaaaaaab
 8001c68:	0800abf4 	.word	0x0800abf4
 8001c6c:	fffffc00 	.word	0xfffffc00

08001c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11f      	bne.n	8001cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d856      	bhi.n	8001d3e <DMA_CheckFifoParam+0xce>
 8001c90:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <DMA_CheckFifoParam+0x28>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001cbb 	.word	0x08001cbb
 8001ca0:	08001ca9 	.word	0x08001ca9
 8001ca4:	08001d3f 	.word	0x08001d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d046      	beq.n	8001d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb8:	e043      	b.n	8001d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cc2:	d140      	bne.n	8001d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc8:	e03d      	b.n	8001d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cd2:	d121      	bne.n	8001d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d837      	bhi.n	8001d4a <DMA_CheckFifoParam+0xda>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <DMA_CheckFifoParam+0x70>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001cf7 	.word	0x08001cf7
 8001ce8:	08001cf1 	.word	0x08001cf1
 8001cec:	08001d09 	.word	0x08001d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf4:	e030      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d025      	beq.n	8001d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d06:	e022      	b.n	8001d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d10:	d11f      	bne.n	8001d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d16:	e01c      	b.n	8001d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d903      	bls.n	8001d26 <DMA_CheckFifoParam+0xb6>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d003      	beq.n	8001d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d24:	e018      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
      break;
 8001d2a:	e015      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00e      	beq.n	8001d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d3c:	e00b      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      break;
 8001d3e:	bf00      	nop
 8001d40:	e00a      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d42:	bf00      	nop
 8001d44:	e008      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d46:	bf00      	nop
 8001d48:	e006      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e004      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4e:	bf00      	nop
 8001d50:	e002      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d52:	bf00      	nop
 8001d54:	e000      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d56:	bf00      	nop
    }
  } 
  
  return status; 
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	e175      	b.n	8002074 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d88:	2201      	movs	r2, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	f040 8164 	bne.w	800206e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d005      	beq.n	8001dbe <HAL_GPIO_Init+0x56>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d130      	bne.n	8001e20 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	2203      	movs	r2, #3
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df4:	2201      	movs	r2, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 0201 	and.w	r2, r3, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d017      	beq.n	8001e5c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d123      	bne.n	8001eb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	69b9      	ldr	r1, [r7, #24]
 8001eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0203 	and.w	r2, r3, #3
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80be 	beq.w	800206e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	4b66      	ldr	r3, [pc, #408]	; (800208c <HAL_GPIO_Init+0x324>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a65      	ldr	r2, [pc, #404]	; (800208c <HAL_GPIO_Init+0x324>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b63      	ldr	r3, [pc, #396]	; (800208c <HAL_GPIO_Init+0x324>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f0a:	4a61      	ldr	r2, [pc, #388]	; (8002090 <HAL_GPIO_Init+0x328>)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_GPIO_Init+0x32c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d037      	beq.n	8001fa6 <HAL_GPIO_Init+0x23e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a57      	ldr	r2, [pc, #348]	; (8002098 <HAL_GPIO_Init+0x330>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d031      	beq.n	8001fa2 <HAL_GPIO_Init+0x23a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a56      	ldr	r2, [pc, #344]	; (800209c <HAL_GPIO_Init+0x334>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d02b      	beq.n	8001f9e <HAL_GPIO_Init+0x236>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a55      	ldr	r2, [pc, #340]	; (80020a0 <HAL_GPIO_Init+0x338>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d025      	beq.n	8001f9a <HAL_GPIO_Init+0x232>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a54      	ldr	r2, [pc, #336]	; (80020a4 <HAL_GPIO_Init+0x33c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01f      	beq.n	8001f96 <HAL_GPIO_Init+0x22e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a53      	ldr	r2, [pc, #332]	; (80020a8 <HAL_GPIO_Init+0x340>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d019      	beq.n	8001f92 <HAL_GPIO_Init+0x22a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a52      	ldr	r2, [pc, #328]	; (80020ac <HAL_GPIO_Init+0x344>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_GPIO_Init+0x226>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <HAL_GPIO_Init+0x348>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00d      	beq.n	8001f8a <HAL_GPIO_Init+0x222>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a50      	ldr	r2, [pc, #320]	; (80020b4 <HAL_GPIO_Init+0x34c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <HAL_GPIO_Init+0x21e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4f      	ldr	r2, [pc, #316]	; (80020b8 <HAL_GPIO_Init+0x350>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_GPIO_Init+0x21a>
 8001f7e:	2309      	movs	r3, #9
 8001f80:	e012      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001f82:	230a      	movs	r3, #10
 8001f84:	e010      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001f86:	2308      	movs	r3, #8
 8001f88:	e00e      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	e00c      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001f8e:	2306      	movs	r3, #6
 8001f90:	e00a      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001f92:	2305      	movs	r3, #5
 8001f94:	e008      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001f96:	2304      	movs	r3, #4
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e004      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e002      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_GPIO_Init+0x240>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f002 0203 	and.w	r2, r2, #3
 8001fae:	0092      	lsls	r2, r2, #2
 8001fb0:	4093      	lsls	r3, r2
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fb8:	4935      	ldr	r1, [pc, #212]	; (8002090 <HAL_GPIO_Init+0x328>)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_GPIO_Init+0x354>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fea:	4a34      	ldr	r2, [pc, #208]	; (80020bc <HAL_GPIO_Init+0x354>)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <HAL_GPIO_Init+0x354>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002014:	4a29      	ldr	r2, [pc, #164]	; (80020bc <HAL_GPIO_Init+0x354>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800201a:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_GPIO_Init+0x354>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800203e:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_GPIO_Init+0x354>)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_GPIO_Init+0x354>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_GPIO_Init+0x354>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3301      	adds	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b0f      	cmp	r3, #15
 8002078:	f67f ae86 	bls.w	8001d88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40013800 	.word	0x40013800
 8002094:	40020000 	.word	0x40020000
 8002098:	40020400 	.word	0x40020400
 800209c:	40020800 	.word	0x40020800
 80020a0:	40020c00 	.word	0x40020c00
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40021400 	.word	0x40021400
 80020ac:	40021800 	.word	0x40021800
 80020b0:	40021c00 	.word	0x40021c00
 80020b4:	40022000 	.word	0x40022000
 80020b8:	40022400 	.word	0x40022400
 80020bc:	40013c00 	.word	0x40013c00

080020c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e001      	b.n	80020e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b23      	ldr	r3, [pc, #140]	; (8002188 <HAL_PWREx_EnableOverDrive+0x98>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_PWREx_EnableOverDrive+0x98>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_PWREx_EnableOverDrive+0x98>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211e:	f7ff f93b 	bl	8001398 <HAL_GetTick>
 8002122:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002124:	e009      	b.n	800213a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002126:	f7ff f937 	bl	8001398 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002134:	d901      	bls.n	800213a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e022      	b.n	8002180 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_PWREx_EnableOverDrive+0x9c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002146:	d1ee      	bne.n	8002126 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_PWREx_EnableOverDrive+0x9c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0f      	ldr	r2, [pc, #60]	; (800218c <HAL_PWREx_EnableOverDrive+0x9c>)
 800214e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002152:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002154:	f7ff f920 	bl	8001398 <HAL_GetTick>
 8002158:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800215a:	e009      	b.n	8002170 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800215c:	f7ff f91c 	bl	8001398 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800216a:	d901      	bls.n	8002170 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e007      	b.n	8002180 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800217c:	d1ee      	bne.n	800215c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002198:	2300      	movs	r3, #0
 800219a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e291      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8087 	beq.w	80022c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021b4:	4b96      	ldr	r3, [pc, #600]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d00c      	beq.n	80021da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c0:	4b93      	ldr	r3, [pc, #588]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d112      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62>
 80021cc:	4b90      	ldr	r3, [pc, #576]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d8:	d10b      	bne.n	80021f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021da:	4b8d      	ldr	r3, [pc, #564]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d06c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x130>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d168      	bne.n	80022c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e26b      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x7a>
 80021fc:	4b84      	ldr	r3, [pc, #528]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a83      	ldr	r2, [pc, #524]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	e02e      	b.n	8002268 <HAL_RCC_OscConfig+0xd8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x9c>
 8002212:	4b7f      	ldr	r3, [pc, #508]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7e      	ldr	r2, [pc, #504]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a7b      	ldr	r2, [pc, #492]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e01d      	b.n	8002268 <HAL_RCC_OscConfig+0xd8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0xc0>
 8002236:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a75      	ldr	r2, [pc, #468]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b73      	ldr	r3, [pc, #460]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a72      	ldr	r2, [pc, #456]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0xd8>
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a6e      	ldr	r2, [pc, #440]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b6c      	ldr	r3, [pc, #432]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a6b      	ldr	r2, [pc, #428]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff f892 	bl	8001398 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff f88e 	bl	8001398 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e21f      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b61      	ldr	r3, [pc, #388]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0xe8>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff f87e 	bl	8001398 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f87a 	bl	8001398 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e20b      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	4b57      	ldr	r3, [pc, #348]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x110>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d069      	beq.n	80023a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ce:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022da:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d11c      	bne.n	8002320 <HAL_RCC_OscConfig+0x190>
 80022e6:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d116      	bne.n	8002320 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x17a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d001      	beq.n	800230a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e1df      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	493d      	ldr	r1, [pc, #244]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	e040      	b.n	80023a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d023      	beq.n	8002370 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a38      	ldr	r2, [pc, #224]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff f830 	bl	8001398 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff f82c 	bl	8001398 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1bd      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4929      	ldr	r1, [pc, #164]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
 800236e:	e018      	b.n	80023a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff f80c 	bl	8001398 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff f808 	bl	8001398 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e199      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d038      	beq.n	8002420 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d019      	beq.n	80023ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe ffe9 	bl	8001398 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ca:	f7fe ffe5 	bl	8001398 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e176      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x23a>
 80023e8:	e01a      	b.n	8002420 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	4a08      	ldr	r2, [pc, #32]	; (8002410 <HAL_RCC_OscConfig+0x280>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe ffcf 	bl	8001398 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fe:	f7fe ffcb 	bl	8001398 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d903      	bls.n	8002414 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e15c      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
 8002410:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	4b91      	ldr	r3, [pc, #580]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1ee      	bne.n	80023fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a4 	beq.w	8002576 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242e:	4b8b      	ldr	r3, [pc, #556]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	4b88      	ldr	r3, [pc, #544]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a87      	ldr	r2, [pc, #540]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b85      	ldr	r3, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002456:	4b82      	ldr	r3, [pc, #520]	; (8002660 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d118      	bne.n	8002494 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002462:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <HAL_RCC_OscConfig+0x4d0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7e      	ldr	r2, [pc, #504]	; (8002660 <HAL_RCC_OscConfig+0x4d0>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246e:	f7fe ff93 	bl	8001398 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002476:	f7fe ff8f 	bl	8001398 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b64      	cmp	r3, #100	; 0x64
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e120      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002488:	4b75      	ldr	r3, [pc, #468]	; (8002660 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x31a>
 800249c:	4b6f      	ldr	r3, [pc, #444]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
 80024a8:	e02d      	b.n	8002506 <HAL_RCC_OscConfig+0x376>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x33c>
 80024b2:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a69      	ldr	r2, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
 80024be:	4b67      	ldr	r3, [pc, #412]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	4a66      	ldr	r2, [pc, #408]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024c4:	f023 0304 	bic.w	r3, r3, #4
 80024c8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ca:	e01c      	b.n	8002506 <HAL_RCC_OscConfig+0x376>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b05      	cmp	r3, #5
 80024d2:	d10c      	bne.n	80024ee <HAL_RCC_OscConfig+0x35e>
 80024d4:	4b61      	ldr	r3, [pc, #388]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a60      	ldr	r2, [pc, #384]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
 80024e0:	4b5e      	ldr	r3, [pc, #376]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e4:	4a5d      	ldr	r2, [pc, #372]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6713      	str	r3, [r2, #112]	; 0x70
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0x376>
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a5a      	ldr	r2, [pc, #360]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002500:	f023 0304 	bic.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d015      	beq.n	800253a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250e:	f7fe ff43 	bl	8001398 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe ff3f 	bl	8001398 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e0ce      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ee      	beq.n	8002516 <HAL_RCC_OscConfig+0x386>
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe ff2d 	bl	8001398 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe ff29 	bl	8001398 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0b8      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002558:	4b40      	ldr	r3, [pc, #256]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ee      	bne.n	8002542 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002564:	7dfb      	ldrb	r3, [r7, #23]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d105      	bne.n	8002576 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256a:	4b3c      	ldr	r3, [pc, #240]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a3b      	ldr	r2, [pc, #236]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80a4 	beq.w	80026c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002580:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d06b      	beq.n	8002664 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d149      	bne.n	8002628 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002594:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a30      	ldr	r2, [pc, #192]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800259a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800259e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7fe fefa 	bl	8001398 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fef6 	bl	8001398 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e087      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	3b01      	subs	r3, #1
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	4313      	orrs	r3, r2
 80025ec:	4a1b      	ldr	r2, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe feca 	bl	8001398 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fec6 	bl	8001398 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e057      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0x478>
 8002626:	e04f      	b.n	80026c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0b      	ldr	r2, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 800262e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe feb0 	bl	8001398 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe feac 	bl	8001398 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e03d      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCC_OscConfig+0x4cc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x4ac>
 800265a:	e035      	b.n	80026c8 <HAL_RCC_OscConfig+0x538>
 800265c:	40023800 	.word	0x40023800
 8002660:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x544>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d028      	beq.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d121      	bne.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d11a      	bne.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800269a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800269c:	4293      	cmp	r3, r2
 800269e:	d111      	bne.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0d0      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b67      	ldr	r3, [pc, #412]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 020f 	bic.w	r2, r3, #15
 8002706:	4965      	ldr	r1, [pc, #404]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002742:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800275a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d040      	beq.n	80027fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e073      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06b      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4936      	ldr	r1, [pc, #216]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027cc:	f7fe fde4 	bl	8001398 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe fde0 	bl	8001398 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e053      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d210      	bcs.n	800282c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 020f 	bic.w	r2, r3, #15
 8002812:	4922      	ldr	r1, [pc, #136]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f821 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1cc>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1d4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fd40 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	40023800 	.word	0x40023800
 80028a4:	0800abdc 	.word	0x0800abdc
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b4:	b090      	sub	sp, #64	; 0x40
 80028b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
 80028bc:	2300      	movs	r3, #0
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c0:	2300      	movs	r3, #0
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c8:	4b59      	ldr	r3, [pc, #356]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d00d      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x40>
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	f200 80a1 	bhi.w	8002a1c <HAL_RCC_GetSysClockFreq+0x16c>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x34>
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d003      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0x3a>
 80028e2:	e09b      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x184>)
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e8:	e09b      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ea:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x188>)
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028ee:	e098      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f0:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028fa:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d028      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002906:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	2200      	movs	r2, #0
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	627a      	str	r2, [r7, #36]	; 0x24
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002918:	2100      	movs	r1, #0
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800291c:	fb03 f201 	mul.w	r2, r3, r1
 8002920:	2300      	movs	r3, #0
 8002922:	fb00 f303 	mul.w	r3, r0, r3
 8002926:	4413      	add	r3, r2
 8002928:	4a43      	ldr	r2, [pc, #268]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800292a:	fba0 1202 	umull	r1, r2, r0, r2
 800292e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002930:	460a      	mov	r2, r1
 8002932:	62ba      	str	r2, [r7, #40]	; 0x28
 8002934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002936:	4413      	add	r3, r2
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293c:	2200      	movs	r2, #0
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	61fa      	str	r2, [r7, #28]
 8002942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002946:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800294a:	f7fd fcb9 	bl	80002c0 <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4613      	mov	r3, r2
 8002954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002956:	e053      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	2200      	movs	r2, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	617a      	str	r2, [r7, #20]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800296a:	f04f 0b00 	mov.w	fp, #0
 800296e:	4652      	mov	r2, sl
 8002970:	465b      	mov	r3, fp
 8002972:	f04f 0000 	mov.w	r0, #0
 8002976:	f04f 0100 	mov.w	r1, #0
 800297a:	0159      	lsls	r1, r3, #5
 800297c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002980:	0150      	lsls	r0, r2, #5
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	ebb2 080a 	subs.w	r8, r2, sl
 800298a:	eb63 090b 	sbc.w	r9, r3, fp
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800299a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800299e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029a2:	ebb2 0408 	subs.w	r4, r2, r8
 80029a6:	eb63 0509 	sbc.w	r5, r3, r9
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	00eb      	lsls	r3, r5, #3
 80029b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b8:	00e2      	lsls	r2, r4, #3
 80029ba:	4614      	mov	r4, r2
 80029bc:	461d      	mov	r5, r3
 80029be:	eb14 030a 	adds.w	r3, r4, sl
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	eb45 030b 	adc.w	r3, r5, fp
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029d6:	4629      	mov	r1, r5
 80029d8:	028b      	lsls	r3, r1, #10
 80029da:	4621      	mov	r1, r4
 80029dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e0:	4621      	mov	r1, r4
 80029e2:	028a      	lsls	r2, r1, #10
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ea:	2200      	movs	r2, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	60fa      	str	r2, [r7, #12]
 80029f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029f4:	f7fd fc64 	bl	80002c0 <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3740      	adds	r7, #64	; 0x40
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	017d7840 	.word	0x017d7840

08002a3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a58:	f7ff fff0 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	0a9b      	lsrs	r3, r3, #10
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	0800abec 	.word	0x0800abec

08002a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a80:	f7ff ffdc 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0b5b      	lsrs	r3, r3, #13
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	0800abec 	.word	0x0800abec

08002aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002acc:	4b69      	ldr	r3, [pc, #420]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a68      	ldr	r2, [pc, #416]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	4b66      	ldr	r3, [pc, #408]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	4964      	ldr	r1, [pc, #400]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d017      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	4959      	ldr	r1, [pc, #356]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d017      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b3a:	4b4e      	ldr	r3, [pc, #312]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	494a      	ldr	r1, [pc, #296]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d101      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 808b 	beq.w	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b3a      	ldr	r3, [pc, #232]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a39      	ldr	r2, [pc, #228]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7fe fbf4 	bl	8001398 <HAL_GetTick>
 8002bb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb4:	f7fe fbf0 	bl	8001398 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e357      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bd2:	4b28      	ldr	r3, [pc, #160]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d035      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d02e      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf0:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d114      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe fbb8 	bl	8001398 <HAL_GetTick>
 8002c28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fbb4 	bl	8001398 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e319      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0ee      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c5a:	d111      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c6a:	400b      	ands	r3, r1
 8002c6c:	4901      	ldr	r1, [pc, #4]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	0ffffcff 	.word	0x0ffffcff
 8002c80:	4baa      	ldr	r3, [pc, #680]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	4aa9      	ldr	r2, [pc, #676]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c8a:	6093      	str	r3, [r2, #8]
 8002c8c:	4ba7      	ldr	r3, [pc, #668]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c98:	49a4      	ldr	r1, [pc, #656]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002caa:	4ba0      	ldr	r3, [pc, #640]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cb0:	4a9e      	ldr	r2, [pc, #632]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cba:	4b9c      	ldr	r3, [pc, #624]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	4999      	ldr	r1, [pc, #612]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd8:	4b94      	ldr	r3, [pc, #592]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce6:	4991      	ldr	r1, [pc, #580]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cfa:	4b8c      	ldr	r3, [pc, #560]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d08:	4988      	ldr	r1, [pc, #544]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d1c:	4b83      	ldr	r3, [pc, #524]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2a:	4980      	ldr	r1, [pc, #512]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d3e:	4b7b      	ldr	r3, [pc, #492]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4977      	ldr	r1, [pc, #476]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d60:	4b72      	ldr	r3, [pc, #456]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	496f      	ldr	r1, [pc, #444]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d82:	4b6a      	ldr	r3, [pc, #424]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f023 020c 	bic.w	r2, r3, #12
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d90:	4966      	ldr	r1, [pc, #408]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002da4:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	495e      	ldr	r1, [pc, #376]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dc6:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd4:	4955      	ldr	r1, [pc, #340]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002de8:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df6:	494d      	ldr	r1, [pc, #308]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e0a:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	4944      	ldr	r1, [pc, #272]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	493c      	ldr	r1, [pc, #240]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e4e:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5c:	4933      	ldr	r1, [pc, #204]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e70:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7e:	492b      	ldr	r1, [pc, #172]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d011      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea0:	4922      	ldr	r1, [pc, #136]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee0:	4912      	ldr	r1, [pc, #72]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f04:	4909      	ldr	r1, [pc, #36]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d006      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80d9 	beq.w	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a01      	ldr	r2, [pc, #4]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f2a:	e001      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f32:	f7fe fa31 	bl	8001398 <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f3a:	f7fe fa2d 	bl	8001398 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b64      	cmp	r3, #100	; 0x64
 8002f46:	d901      	bls.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e194      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f4c:	4b6c      	ldr	r3, [pc, #432]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d021      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11d      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f6c:	4b64      	ldr	r3, [pc, #400]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f7a:	4b61      	ldr	r3, [pc, #388]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f80:	0e1b      	lsrs	r3, r3, #24
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	019a      	lsls	r2, r3, #6
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	041b      	lsls	r3, r3, #16
 8002f92:	431a      	orrs	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	071b      	lsls	r3, r3, #28
 8002fa0:	4957      	ldr	r1, [pc, #348]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02e      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd2:	d129      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fd4:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fda:	0c1b      	lsrs	r3, r3, #16
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fe2:	4b47      	ldr	r3, [pc, #284]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe8:	0f1b      	lsrs	r3, r3, #28
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	019a      	lsls	r2, r3, #6
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	431a      	orrs	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	071b      	lsls	r3, r3, #28
 8003008:	493d      	ldr	r1, [pc, #244]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003010:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003016:	f023 021f 	bic.w	r2, r3, #31
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	3b01      	subs	r3, #1
 8003020:	4937      	ldr	r1, [pc, #220]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01d      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003034:	4b32      	ldr	r3, [pc, #200]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303a:	0e1b      	lsrs	r3, r3, #24
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003042:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003048:	0f1b      	lsrs	r3, r3, #28
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	019a      	lsls	r2, r3, #6
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	431a      	orrs	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	431a      	orrs	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	071b      	lsls	r3, r3, #28
 8003068:	4925      	ldr	r1, [pc, #148]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d011      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	019a      	lsls	r2, r3, #6
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	041b      	lsls	r3, r3, #16
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	071b      	lsls	r3, r3, #28
 8003098:	4919      	ldr	r1, [pc, #100]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030a0:	4b17      	ldr	r3, [pc, #92]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a16      	ldr	r2, [pc, #88]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fe f974 	bl	8001398 <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030b4:	f7fe f970 	bl	8001398 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0d7      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f040 80cd 	bne.w	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e6:	f7fe f957 	bl	8001398 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030ee:	f7fe f953 	bl	8001398 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b64      	cmp	r3, #100	; 0x64
 80030fa:	d903      	bls.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e0ba      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003100:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003104:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800310c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003110:	d0ed      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800312e:	2b00      	cmp	r3, #0
 8003130:	d02e      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d12a      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800313a:	4b51      	ldr	r3, [pc, #324]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	0f1b      	lsrs	r3, r3, #28
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	019a      	lsls	r2, r3, #6
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	041b      	lsls	r3, r3, #16
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	431a      	orrs	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	071b      	lsls	r3, r3, #28
 800316e:	4944      	ldr	r1, [pc, #272]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003176:	4b42      	ldr	r3, [pc, #264]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800317c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	493d      	ldr	r1, [pc, #244]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d022      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a4:	d11d      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	0e1b      	lsrs	r3, r3, #24
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031b4:	4b32      	ldr	r3, [pc, #200]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	0f1b      	lsrs	r3, r3, #28
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	019a      	lsls	r2, r3, #6
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	041b      	lsls	r3, r3, #16
 80031ce:	431a      	orrs	r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	071b      	lsls	r3, r3, #28
 80031da:	4929      	ldr	r1, [pc, #164]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d028      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	0e1b      	lsrs	r3, r3, #24
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	019a      	lsls	r2, r3, #6
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	431a      	orrs	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	4917      	ldr	r1, [pc, #92]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800322c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003230:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	4911      	ldr	r1, [pc, #68]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324c:	f7fe f8a4 	bl	8001398 <HAL_GetTick>
 8003250:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003254:	f7fe f8a0 	bl	8001398 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e007      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800326e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003272:	d1ef      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e022      	b.n	80032dc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d105      	bne.n	80032ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7fd fc41 	bl	8000b30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f814 	bl	80032e4 <HAL_SD_InitCard>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00a      	b.n	80032dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b08e      	sub	sp, #56	; 0x38
 80032e8:	af04      	add	r7, sp, #16
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003300:	2376      	movs	r3, #118	; 0x76
 8003302:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681d      	ldr	r5, [r3, #0]
 8003308:	466c      	mov	r4, sp
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003316:	f107 0308 	add.w	r3, r7, #8
 800331a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800331c:	4628      	mov	r0, r5
 800331e:	f002 fcc3 	bl	8005ca8 <SDMMC_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e059      	b.n	80033e8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003342:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f002 fcf7 	bl	8005d3c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800335c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800335e:	2002      	movs	r0, #2
 8003360:	f7fe f826 	bl	80013b0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fff3 	bl	8004350 <SD_PowerON>
 800336a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e02e      	b.n	80033e8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 ff12 	bl	80041b4 <SD_InitCard>
 8003390:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e01b      	b.n	80033e8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033b8:	4618      	mov	r0, r3
 80033ba:	f002 fd51 	bl	8005e60 <SDMMC_CmdBlockLength>
 80033be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00f      	beq.n	80033e6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <HAL_SD_InitCard+0x10c>)
 80033cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bdb0      	pop	{r4, r5, r7, pc}
 80033f0:	004005ff 	.word	0x004005ff

080033f4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0c3      	b.n	80035a4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	f040 80bc 	bne.w	80035a2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	429a      	cmp	r2, r3
 800343c:	d907      	bls.n	800344e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0aa      	b.n	80035a4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2203      	movs	r2, #3
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2200      	movs	r2, #0
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800346c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	4a4e      	ldr	r2, [pc, #312]	; (80035ac <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003474:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a4d      	ldr	r2, [pc, #308]	; (80035b0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800347c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2200      	movs	r2, #0
 8003484:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3380      	adds	r3, #128	; 0x80
 80034b4:	4619      	mov	r1, r3
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	025b      	lsls	r3, r3, #9
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	f7fe f95b 	bl	8001778 <HAL_DMA_Start_IT>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d017      	beq.n	80034f8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a35      	ldr	r2, [pc, #212]	; (80035b4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e055      	b.n	80035a4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0208 	orr.w	r2, r2, #8
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	2b01      	cmp	r3, #1
 800350e:	d002      	beq.n	8003516 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	025b      	lsls	r3, r3, #9
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	025b      	lsls	r3, r3, #9
 8003520:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003522:	2390      	movs	r3, #144	; 0x90
 8003524:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003526:	2302      	movs	r3, #2
 8003528:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800352a:	2300      	movs	r3, #0
 800352c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800352e:	2301      	movs	r3, #1
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f107 0210 	add.w	r2, r7, #16
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f002 fc63 	bl	8005e08 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d90a      	bls.n	800355e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2282      	movs	r2, #130	; 0x82
 800354c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003554:	4618      	mov	r0, r3
 8003556:	f002 fcc7 	bl	8005ee8 <SDMMC_CmdReadMultiBlock>
 800355a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800355c:	e009      	b.n	8003572 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2281      	movs	r2, #129	; 0x81
 8003562:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800356a:	4618      	mov	r0, r3
 800356c:	f002 fc9a 	bl	8005ea4 <SDMMC_CmdReadSingleBlock>
 8003570:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d012      	beq.n	800359e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0d      	ldr	r2, [pc, #52]	; (80035b4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e002      	b.n	80035a4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3730      	adds	r7, #48	; 0x30
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	08003fc3 	.word	0x08003fc3
 80035b0:	08004035 	.word	0x08004035
 80035b4:	004005ff 	.word	0x004005ff

080035b8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d107      	bne.n	80035e0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0c6      	b.n	800376e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	f040 80bf 	bne.w	800376c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80035f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	441a      	add	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	429a      	cmp	r2, r3
 8003600:	d907      	bls.n	8003612 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0ad      	b.n	800376e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2203      	movs	r2, #3
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2200      	movs	r2, #0
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 021a 	orr.w	r2, r2, #26
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	4a50      	ldr	r2, [pc, #320]	; (8003778 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	4a4f      	ldr	r2, [pc, #316]	; (800377c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003640:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	2200      	movs	r2, #0
 8003648:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	2b01      	cmp	r3, #1
 8003650:	d002      	beq.n	8003658 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8003652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003654:	025b      	lsls	r3, r3, #9
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d90a      	bls.n	8003674 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	22a0      	movs	r2, #160	; 0xa0
 8003662:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800366a:	4618      	mov	r0, r3
 800366c:	f002 fc80 	bl	8005f70 <SDMMC_CmdWriteMultiBlock>
 8003670:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003672:	e009      	b.n	8003688 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2290      	movs	r2, #144	; 0x90
 8003678:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003680:	4618      	mov	r0, r3
 8003682:	f002 fc53 	bl	8005f2c <SDMMC_CmdWriteSingleBlock>
 8003686:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a3b      	ldr	r2, [pc, #236]	; (8003780 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	431a      	orrs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e05c      	b.n	800376e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0208 	orr.w	r2, r2, #8
 80036c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	2240      	movs	r2, #64	; 0x40
 80036ca:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3380      	adds	r3, #128	; 0x80
 80036f4:	461a      	mov	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	025b      	lsls	r3, r3, #9
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	f7fe f83c 	bl	8001778 <HAL_DMA_Start_IT>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01a      	beq.n	800373c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 021a 	bic.w	r2, r2, #26
 8003714:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a19      	ldr	r2, [pc, #100]	; (8003780 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e018      	b.n	800376e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
 8003740:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	025b      	lsls	r3, r3, #9
 8003746:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003748:	2390      	movs	r3, #144	; 0x90
 800374a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800374c:	2300      	movs	r3, #0
 800374e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003750:	2300      	movs	r3, #0
 8003752:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003754:	2301      	movs	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f107 0210 	add.w	r2, r7, #16
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f002 fb50 	bl	8005e08 <SDMMC_ConfigData>

      return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800376c:	2302      	movs	r3, #2
  }
}
 800376e:	4618      	mov	r0, r3
 8003770:	3730      	adds	r7, #48	; 0x30
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	08003f99 	.word	0x08003f99
 800377c:	08004035 	.word	0x08004035
 8003780:	004005ff 	.word	0x004005ff

08003784 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_SD_IRQHandler+0x2e>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 ffef 	bl	800478e <SD_Read_IT>
 80037b0:	e15a      	b.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 808d 	beq.w	80038dc <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b9a      	ldr	r3, [pc, #616]	; (8003a40 <HAL_SD_IRQHandler+0x2bc>)
 80037d8:	400b      	ands	r3, r1
 80037da:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d039      	beq.n	800386a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_SD_IRQHandler+0x86>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d011      	beq.n	800382e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f002 fbd0 	bl	8005fb4 <SDMMC_CmdStopTransfer>
 8003814:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f921 	bl	8003a70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f240 523a 	movw	r2, #1338	; 0x53a
 8003836:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_SD_IRQHandler+0xd6>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f003 f840 	bl	80068e0 <HAL_SD_RxCpltCallback>
 8003860:	e102      	b.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f003 f832 	bl	80068cc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003868:	e0fe      	b.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80f9 	beq.w	8003a68 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d011      	beq.n	80038a4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f002 fb95 	bl	8005fb4 <SDMMC_CmdStopTransfer>
 800388a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8e6 	bl	8003a70 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 80dc 	bne.w	8003a68 <HAL_SD_IRQHandler+0x2e4>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 80d6 	bne.w	8003a68 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0208 	bic.w	r2, r2, #8
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f002 fff9 	bl	80068cc <HAL_SD_TxCpltCallback>
}
 80038da:	e0c5      	b.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_SD_IRQHandler+0x178>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 ff9b 	bl	8004830 <SD_Write_IT>
 80038fa:	e0b5      	b.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80ae 	beq.w	8003a68 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	f043 0202 	orr.w	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392c:	f003 0308 	and.w	r3, r3, #8
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	f043 0208 	orr.w	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	f043 0220 	orr.w	r2, r3, #32
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	f043 0210 	orr.w	r2, r3, #16
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f240 523a 	movw	r2, #1338	; 0x53a
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f002 fb0e 	bl	8005fb4 <SDMMC_CmdStopTransfer>
 8003998:	4602      	mov	r2, r0
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f857 	bl	8003a70 <HAL_SD_ErrorCallback>
}
 80039c2:	e051      	b.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04c      	beq.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_SD_IRQHandler+0x25e>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d011      	beq.n	8003a06 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	4a17      	ldr	r2, [pc, #92]	; (8003a44 <HAL_SD_IRQHandler+0x2c0>)
 80039e8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd ff22 	bl	8001838 <HAL_DMA_Abort_IT>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d036      	beq.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fb6a 	bl	80040d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a04:	e030      	b.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <HAL_SD_IRQHandler+0x296>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d018      	beq.n	8003a4c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <HAL_SD_IRQHandler+0x2c4>)
 8003a20:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd ff06 	bl	8001838 <HAL_DMA_Abort_IT>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d01a      	beq.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fb85 	bl	8004146 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a3c:	e014      	b.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
 8003a3e:	bf00      	nop
 8003a40:	ffff3ec5 	.word	0xffff3ec5
 8003a44:	080040d9 	.word	0x080040d9
 8003a48:	08004147 	.word	0x08004147
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f002 ff29 	bl	80068b8 <HAL_SD_AbortCallback>
}
 8003a66:	e7ff      	b.n	8003a68 <HAL_SD_IRQHandler+0x2e4>
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a92:	0f9b      	lsrs	r3, r3, #30
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9e:	0e9b      	lsrs	r3, r3, #26
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab0:	0e1b      	lsrs	r3, r3, #24
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae4:	0d1b      	lsrs	r3, r3, #20
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b02:	0bdb      	lsrs	r3, r3, #15
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b14:	0b9b      	lsrs	r3, r3, #14
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b26:	0b5b      	lsrs	r3, r3, #13
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b38:	0b1b      	lsrs	r3, r3, #12
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d163      	bne.n	8003c1c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b58:	009a      	lsls	r2, r3, #2
 8003b5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b5e:	4013      	ands	r3, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b64:	0f92      	lsrs	r2, r2, #30
 8003b66:	431a      	orrs	r2, r3
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b70:	0edb      	lsrs	r3, r3, #27
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b82:	0e1b      	lsrs	r3, r3, #24
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b94:	0d5b      	lsrs	r3, r3, #21
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba6:	0c9b      	lsrs	r3, r3, #18
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb8:	0bdb      	lsrs	r3, r3, #15
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	7e1b      	ldrb	r3, [r3, #24]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	3302      	adds	r3, #2
 8003bdc:	2201      	movs	r2, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003be6:	fb03 f202 	mul.w	r2, r3, r2
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	7a1b      	ldrb	r3, [r3, #8]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c08:	0a52      	lsrs	r2, r2, #9
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c18:	661a      	str	r2, [r3, #96]	; 0x60
 8003c1a:	e031      	b.n	8003c80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d11d      	bne.n	8003c60 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	431a      	orrs	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	029a      	lsls	r2, r3, #10
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c54:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	661a      	str	r2, [r3, #96]	; 0x60
 8003c5e:	e00f      	b.n	8003c80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a58      	ldr	r2, [pc, #352]	; (8003dc8 <HAL_SD_GetCardCSD+0x344>)
 8003c66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e09d      	b.n	8003dbc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c84:	0b9b      	lsrs	r3, r3, #14
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c96:	09db      	lsrs	r3, r3, #7
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	0fdb      	lsrs	r3, r3, #31
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	0f5b      	lsrs	r3, r3, #29
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	0e9b      	lsrs	r3, r3, #26
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	0d9b      	lsrs	r3, r3, #22
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	0d5b      	lsrs	r3, r3, #21
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	0bdb      	lsrs	r3, r3, #15
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	0b9b      	lsrs	r3, r3, #14
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	0b5b      	lsrs	r3, r3, #13
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	0b1b      	lsrs	r3, r3, #12
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	0a9b      	lsrs	r3, r3, #10
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	085b      	lsrs	r3, r3, #1
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	004005ff 	.word	0x004005ff

08003dcc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003e24:	b5b0      	push	{r4, r5, r7, lr}
 8003e26:	b08e      	sub	sp, #56	; 0x38
 8003e28:	af04      	add	r7, sp, #16
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2203      	movs	r2, #3
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d02e      	beq.n	8003ea2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4a:	d106      	bne.n	8003e5a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
 8003e58:	e029      	b.n	8003eae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e60:	d10a      	bne.n	8003e78 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fb2a 	bl	80044bc <SD_WideBus_Enable>
 8003e68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
 8003e76:	e01a      	b.n	8003eae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fb67 	bl	8004552 <SD_WideBus_Disable>
 8003e84:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
 8003e92:	e00c      	b.n	8003eae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
 8003ea0:	e005      	b.n	8003eae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ecc:	e01f      	b.n	8003f0e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681d      	ldr	r5, [r3, #0]
 8003ef4:	466c      	mov	r4, sp
 8003ef6:	f107 0314 	add.w	r3, r7, #20
 8003efa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003efe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f001 fecd 	bl	8005ca8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 ffa2 	bl	8005e60 <SDMMC_CmdBlockLength>
 8003f1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00c      	beq.n	8003f3e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3728      	adds	r7, #40	; 0x28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bdb0      	pop	{r4, r5, r7, pc}
 8003f52:	bf00      	nop
 8003f54:	004005ff 	.word	0x004005ff

08003f58 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003f64:	f107 030c 	add.w	r3, r7, #12
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fa7e 	bl	800446c <SD_SendStatus>
 8003f70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	0a5b      	lsrs	r3, r3, #9
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003f8e:	693b      	ldr	r3, [r7, #16]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	2b82      	cmp	r3, #130	; 0x82
 8003fd6:	d111      	bne.n	8003ffc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f001 ffe9 	bl	8005fb4 <SDMMC_CmdStopTransfer>
 8003fe2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fd3a 	bl	8003a70 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0208 	bic.w	r2, r2, #8
 800400a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f240 523a 	movw	r2, #1338	; 0x53a
 8004014:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f002 fc5b 	bl	80068e0 <HAL_SD_RxCpltCallback>
#endif
}
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd fda4 	bl	8001b90 <HAL_DMA_GetError>
 8004048:	4603      	mov	r3, r0
 800404a:	2b02      	cmp	r3, #2
 800404c:	d03e      	beq.n	80040cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004054:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d002      	beq.n	800406a <SD_DMAError+0x36>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d12d      	bne.n	80040c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <SD_DMAError+0xa0>)
 8004070:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004080:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800408e:	6978      	ldr	r0, [r7, #20]
 8004090:	f7ff ff62 	bl	8003f58 <HAL_SD_GetCardState>
 8004094:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b06      	cmp	r3, #6
 800409a:	d002      	beq.n	80040a2 <SD_DMAError+0x6e>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d10a      	bne.n	80040b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 ff84 	bl	8005fb4 <SDMMC_CmdStopTransfer>
 80040ac:	4602      	mov	r2, r0
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	431a      	orrs	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80040c6:	6978      	ldr	r0, [r7, #20]
 80040c8:	f7ff fcd2 	bl	8003a70 <HAL_SD_ErrorCallback>
#endif
  }
}
 80040cc:	bf00      	nop
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	004005ff 	.word	0x004005ff

080040d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff ff31 	bl	8003f58 <HAL_SD_GetCardState>
 80040f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b06      	cmp	r3, #6
 800410a:	d002      	beq.n	8004112 <SD_DMATxAbort+0x3a>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b05      	cmp	r3, #5
 8004110:	d10a      	bne.n	8004128 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f001 ff4c 	bl	8005fb4 <SDMMC_CmdStopTransfer>
 800411c:	4602      	mov	r2, r0
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004122:	431a      	orrs	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f002 fbc1 	bl	80068b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004136:	e002      	b.n	800413e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff fc99 	bl	8003a70 <HAL_SD_ErrorCallback>
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f240 523a 	movw	r2, #1338	; 0x53a
 800415c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff fefa 	bl	8003f58 <HAL_SD_GetCardState>
 8004164:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b06      	cmp	r3, #6
 8004178:	d002      	beq.n	8004180 <SD_DMARxAbort+0x3a>
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b05      	cmp	r3, #5
 800417e:	d10a      	bne.n	8004196 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f001 ff15 	bl	8005fb4 <SDMMC_CmdStopTransfer>
 800418a:	4602      	mov	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	431a      	orrs	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f002 fb8a 	bl	80068b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80041a4:	e002      	b.n	80041ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff fc62 	bl	8003a70 <HAL_SD_ErrorCallback>
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80041b4:	b5b0      	push	{r4, r5, r7, lr}
 80041b6:	b094      	sub	sp, #80	; 0x50
 80041b8:	af04      	add	r7, sp, #16
 80041ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80041bc:	2301      	movs	r3, #1
 80041be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 fdc7 	bl	8005d58 <SDMMC_GetPowerState>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041d4:	e0b8      	b.n	8004348 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d02f      	beq.n	800423e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 fff1 	bl	80061ca <SDMMC_CmdSendCID>
 80041e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80041ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80041f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f2:	e0a9      	b.n	8004348 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 fdf1 	bl	8005de2 <SDMMC_GetResponse>
 8004200:	4602      	mov	r2, r0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2104      	movs	r1, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f001 fde8 	bl	8005de2 <SDMMC_GetResponse>
 8004212:	4602      	mov	r2, r0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2108      	movs	r1, #8
 800421e:	4618      	mov	r0, r3
 8004220:	f001 fddf 	bl	8005de2 <SDMMC_GetResponse>
 8004224:	4602      	mov	r2, r0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	210c      	movs	r1, #12
 8004230:	4618      	mov	r0, r3
 8004232:	f001 fdd6 	bl	8005de2 <SDMMC_GetResponse>
 8004236:	4602      	mov	r2, r0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	2b03      	cmp	r3, #3
 8004244:	d00d      	beq.n	8004262 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f107 020e 	add.w	r2, r7, #14
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f001 fff7 	bl	8006244 <SDMMC_CmdSetRelAdd>
 8004256:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <SD_InitCard+0xae>
    {
      return errorstate;
 800425e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004260:	e072      	b.n	8004348 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	2b03      	cmp	r3, #3
 8004268:	d036      	beq.n	80042d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800426a:	89fb      	ldrh	r3, [r7, #14]
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427a:	041b      	lsls	r3, r3, #16
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f001 ffc1 	bl	8006206 <SDMMC_CmdSendCSD>
 8004284:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <SD_InitCard+0xdc>
    {
      return errorstate;
 800428c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428e:	e05b      	b.n	8004348 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f001 fda3 	bl	8005de2 <SDMMC_GetResponse>
 800429c:	4602      	mov	r2, r0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2104      	movs	r1, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 fd9a 	bl	8005de2 <SDMMC_GetResponse>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2108      	movs	r1, #8
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 fd91 	bl	8005de2 <SDMMC_GetResponse>
 80042c0:	4602      	mov	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	210c      	movs	r1, #12
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 fd88 	bl	8005de2 <SDMMC_GetResponse>
 80042d2:	4602      	mov	r2, r0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2104      	movs	r1, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 fd7f 	bl	8005de2 <SDMMC_GetResponse>
 80042e4:	4603      	mov	r3, r0
 80042e6:	0d1a      	lsrs	r2, r3, #20
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80042ec:	f107 0310 	add.w	r3, r7, #16
 80042f0:	4619      	mov	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fbc6 	bl	8003a84 <HAL_SD_GetCardCSD>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004302:	e021      	b.n	8004348 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6819      	ldr	r1, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	2200      	movs	r2, #0
 8004310:	461c      	mov	r4, r3
 8004312:	4615      	mov	r5, r2
 8004314:	4622      	mov	r2, r4
 8004316:	462b      	mov	r3, r5
 8004318:	4608      	mov	r0, r1
 800431a:	f001 fe6d 	bl	8005ff8 <SDMMC_CmdSelDesel>
 800431e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <SD_InitCard+0x176>
  {
    return errorstate;
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	e00e      	b.n	8004348 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681d      	ldr	r5, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	466c      	mov	r4, sp
 8004332:	f103 0210 	add.w	r2, r3, #16
 8004336:	ca07      	ldmia	r2, {r0, r1, r2}
 8004338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800433c:	3304      	adds	r3, #4
 800433e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004340:	4628      	mov	r0, r5
 8004342:	f001 fcb1 	bl	8005ca8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3740      	adds	r7, #64	; 0x40
 800434c:	46bd      	mov	sp, r7
 800434e:	bdb0      	pop	{r4, r5, r7, pc}

08004350 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f001 fe68 	bl	800603e <SDMMC_CmdGoIdleState>
 800436e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	e072      	b.n	8004460 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fe7b 	bl	800607a <SDMMC_CmdOperCond>
 8004384:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00d      	beq.n	80043a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f001 fe51 	bl	800603e <SDMMC_CmdGoIdleState>
 800439c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d004      	beq.n	80043ae <SD_PowerON+0x5e>
    {
      return errorstate;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	e05b      	b.n	8004460 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d137      	bne.n	8004426 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2100      	movs	r1, #0
 80043bc:	4618      	mov	r0, r3
 80043be:	f001 fe7b 	bl	80060b8 <SDMMC_CmdAppCommand>
 80043c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d02d      	beq.n	8004426 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043ce:	e047      	b.n	8004460 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 fe6e 	bl	80060b8 <SDMMC_CmdAppCommand>
 80043dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <SD_PowerON+0x98>
    {
      return errorstate;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	e03b      	b.n	8004460 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	491e      	ldr	r1, [pc, #120]	; (8004468 <SD_PowerON+0x118>)
 80043ee:	4618      	mov	r0, r3
 80043f0:	f001 fe84 	bl	80060fc <SDMMC_CmdAppOperCommand>
 80043f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004400:	e02e      	b.n	8004460 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f001 fcea 	bl	8005de2 <SDMMC_GetResponse>
 800440e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	0fdb      	lsrs	r3, r3, #31
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <SD_PowerON+0xcc>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <SD_PowerON+0xce>
 800441c:	2300      	movs	r3, #0
 800441e:	613b      	str	r3, [r7, #16]

    count++;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	3301      	adds	r3, #1
 8004424:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800442c:	4293      	cmp	r3, r2
 800442e:	d802      	bhi.n	8004436 <SD_PowerON+0xe6>
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0cc      	beq.n	80043d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800443c:	4293      	cmp	r3, r2
 800443e:	d902      	bls.n	8004446 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004444:	e00c      	b.n	8004460 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	645a      	str	r2, [r3, #68]	; 0x44
 8004456:	e002      	b.n	800445e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	c1100000 	.word	0xc1100000

0800446c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800447c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004480:	e018      	b.n	80044b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f001 fef9 	bl	8006286 <SDMMC_CmdSendStatus>
 8004494:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	e009      	b.n	80044b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 fc9b 	bl	8005de2 <SDMMC_GetResponse>
 80044ac:	4602      	mov	r2, r0
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 fc85 	bl	8005de2 <SDMMC_GetResponse>
 80044d8:	4603      	mov	r3, r0
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044e2:	d102      	bne.n	80044ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80044e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044e8:	e02f      	b.n	800454a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f879 	bl	80045e8 <SD_FindSCR>
 80044f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	e023      	b.n	800454a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01c      	beq.n	8004546 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f001 fdcd 	bl	80060b8 <SDMMC_CmdAppCommand>
 800451e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	e00f      	b.n	800454a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2102      	movs	r1, #2
 8004530:	4618      	mov	r0, r3
 8004532:	f001 fe07 	bl	8006144 <SDMMC_CmdBusWidth>
 8004536:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	e003      	b.n	800454a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004542:	2300      	movs	r3, #0
 8004544:	e001      	b.n	800454a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004546:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f001 fc3a 	bl	8005de2 <SDMMC_GetResponse>
 800456e:	4603      	mov	r3, r0
 8004570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004578:	d102      	bne.n	8004580 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800457a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800457e:	e02f      	b.n	80045e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	4619      	mov	r1, r3
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f82e 	bl	80045e8 <SD_FindSCR>
 800458c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	e023      	b.n	80045e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01c      	beq.n	80045dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045aa:	041b      	lsls	r3, r3, #16
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f001 fd82 	bl	80060b8 <SDMMC_CmdAppCommand>
 80045b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	e00f      	b.n	80045e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 fdbc 	bl	8006144 <SDMMC_CmdBusWidth>
 80045cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	e003      	b.n	80045e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80045d8:	2300      	movs	r3, #0
 80045da:	e001      	b.n	80045e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b08f      	sub	sp, #60	; 0x3c
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80045f2:	f7fc fed1 	bl	8001398 <HAL_GetTick>
 80045f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80045fc:	2300      	movs	r3, #0
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2108      	movs	r1, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f001 fc26 	bl	8005e60 <SDMMC_CmdBlockLength>
 8004614:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <SD_FindSCR+0x38>
  {
    return errorstate;
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	e0b2      	b.n	8004786 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f001 fd43 	bl	80060b8 <SDMMC_CmdAppCommand>
 8004632:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <SD_FindSCR+0x56>
  {
    return errorstate;
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	e0a3      	b.n	8004786 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004644:	2308      	movs	r3, #8
 8004646:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004648:	2330      	movs	r3, #48	; 0x30
 800464a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800464c:	2302      	movs	r3, #2
 800464e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004650:	2300      	movs	r3, #0
 8004652:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004654:	2301      	movs	r3, #1
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f107 0210 	add.w	r2, r7, #16
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f001 fbd0 	bl	8005e08 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f001 fd8b 	bl	8006188 <SDMMC_CmdSendSCR>
 8004672:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d02a      	beq.n	80046d0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	e083      	b.n	8004786 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00f      	beq.n	80046ac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6819      	ldr	r1, [r3, #0]
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	f107 0208 	add.w	r2, r7, #8
 8004698:	18d4      	adds	r4, r2, r3
 800469a:	4608      	mov	r0, r1
 800469c:	f001 fb30 	bl	8005d00 <SDMMC_ReadFIFO>
 80046a0:	4603      	mov	r3, r0
 80046a2:	6023      	str	r3, [r4, #0]
      index++;
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a6:	3301      	adds	r3, #1
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
 80046aa:	e006      	b.n	80046ba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d012      	beq.n	80046e0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80046ba:	f7fc fe6d 	bl	8001398 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d102      	bne.n	80046d0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80046ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046ce:	e05a      	b.n	8004786 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0cf      	beq.n	800467e <SD_FindSCR+0x96>
 80046de:	e000      	b.n	80046e2 <SD_FindSCR+0xfa>
      break;
 80046e0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2208      	movs	r2, #8
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80046f8:	2308      	movs	r3, #8
 80046fa:	e044      	b.n	8004786 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2202      	movs	r2, #2
 8004710:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004712:	2302      	movs	r3, #2
 8004714:	e037      	b.n	8004786 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2220      	movs	r2, #32
 800472a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800472c:	2320      	movs	r3, #32
 800472e:	e02a      	b.n	8004786 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f240 523a 	movw	r2, #1338	; 0x53a
 8004738:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	061a      	lsls	r2, r3, #24
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004746:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004750:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	0e1b      	lsrs	r3, r3, #24
 8004756:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475a:	601a      	str	r2, [r3, #0]
    scr++;
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	3304      	adds	r3, #4
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	061a      	lsls	r2, r3, #24
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800476e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004778:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	0e1b      	lsrs	r3, r3, #24
 800477e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	373c      	adds	r7, #60	; 0x3c
 800478a:	46bd      	mov	sp, r7
 800478c:	bd90      	pop	{r4, r7, pc}

0800478e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d03f      	beq.n	8004828 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80047a8:	2300      	movs	r3, #0
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e033      	b.n	8004816 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f001 faa4 	bl	8005d00 <SDMMC_ReadFIFO>
 80047b8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	0c1b      	lsrs	r3, r3, #16
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	0e1b      	lsrs	r3, r3, #24
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3b01      	subs	r3, #1
 800480e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	3301      	adds	r3, #1
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b07      	cmp	r3, #7
 800481a:	d9c8      	bls.n	80047ae <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004828:	bf00      	nop
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d043      	beq.n	80048d2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e037      	b.n	80048c0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	3b01      	subs	r3, #1
 8004860:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	021a      	lsls	r2, r3, #8
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3301      	adds	r3, #1
 8004872:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3b01      	subs	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	041a      	lsls	r2, r3, #16
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4313      	orrs	r3, r2
 8004884:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	3b01      	subs	r3, #1
 8004890:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	061a      	lsls	r2, r3, #24
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4313      	orrs	r3, r2
 800489c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	3301      	adds	r3, #1
 80048a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f107 0208 	add.w	r2, r7, #8
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 fa30 	bl	8005d1a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	3301      	adds	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b07      	cmp	r3, #7
 80048c4:	d9c4      	bls.n	8004850 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e049      	b.n	8004980 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fc fc1b 	bl	800113c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2202      	movs	r2, #2
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f000 fa6f 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e049      	b.n	8004a2e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fb78 	bl	80010a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f000 fa18 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d122      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d11b      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f06f 0202 	mvn.w	r2, #2
 8004a62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f9a1 	bl	8004dc0 <HAL_TIM_IC_CaptureCallback>
 8004a7e:	e005      	b.n	8004a8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f993 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9a4 	bl	8004dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d122      	bne.n	8004ae6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d11b      	bne.n	8004ae6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f06f 0204 	mvn.w	r2, #4
 8004ab6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f977 	bl	8004dc0 <HAL_TIM_IC_CaptureCallback>
 8004ad2:	e005      	b.n	8004ae0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f969 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f97a 	bl	8004dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d122      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d11b      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f06f 0208 	mvn.w	r2, #8
 8004b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f94d 	bl	8004dc0 <HAL_TIM_IC_CaptureCallback>
 8004b26:	e005      	b.n	8004b34 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f93f 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f950 	bl	8004dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d122      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d11b      	bne.n	8004b8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f06f 0210 	mvn.w	r2, #16
 8004b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2208      	movs	r2, #8
 8004b64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f923 	bl	8004dc0 <HAL_TIM_IC_CaptureCallback>
 8004b7a:	e005      	b.n	8004b88 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f915 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f926 	bl	8004dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10e      	bne.n	8004bba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f06f 0201 	mvn.w	r2, #1
 8004bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fb ff87 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b80      	cmp	r3, #128	; 0x80
 8004bc6:	d10e      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d107      	bne.n	8004be6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fb6d 	bl	80052c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf4:	d10e      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c00:	2b80      	cmp	r3, #128	; 0x80
 8004c02:	d107      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fb60 	bl	80052d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d10e      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d107      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8d4 	bl	8004de8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d10e      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0220 	mvn.w	r2, #32
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fb20 	bl	80052ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e088      	b.n	8004da4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6819      	ldr	r1, [r3, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f000 f944 	bl	8004f3c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 020c 	bic.w	r2, r2, #12
 8004cc2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6999      	ldr	r1, [r3, #24]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]
 8004cd6:	e060      	b.n	8004d9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d11c      	bne.n	8004d18 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	6819      	ldr	r1, [r3, #0]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f000 f999 	bl	8005024 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d00:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6999      	ldr	r1, [r3, #24]
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	021a      	lsls	r2, r3, #8
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	619a      	str	r2, [r3, #24]
 8004d16:	e040      	b.n	8004d9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d11b      	bne.n	8004d56 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	6819      	ldr	r1, [r3, #0]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f000 f9b6 	bl	800509e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 020c 	bic.w	r2, r2, #12
 8004d40:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69d9      	ldr	r1, [r3, #28]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	61da      	str	r2, [r3, #28]
 8004d54:	e021      	b.n	8004d9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	d11c      	bne.n	8004d96 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f000 f9d3 	bl	8005116 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d7e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69d9      	ldr	r1, [r3, #28]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	021a      	lsls	r2, r3, #8
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	61da      	str	r2, [r3, #28]
 8004d94:	e001      	b.n	8004d9a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a40      	ldr	r2, [pc, #256]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1a:	d00f      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3d      	ldr	r2, [pc, #244]	; (8004f14 <TIM_Base_SetConfig+0x118>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3c      	ldr	r2, [pc, #240]	; (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3b      	ldr	r2, [pc, #236]	; (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3a      	ldr	r2, [pc, #232]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d108      	bne.n	8004e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d02b      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d027      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2c      	ldr	r2, [pc, #176]	; (8004f14 <TIM_Base_SetConfig+0x118>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d023      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2b      	ldr	r2, [pc, #172]	; (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01f      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01b      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d017      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <TIM_Base_SetConfig+0x128>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <TIM_Base_SetConfig+0x12c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00f      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <TIM_Base_SetConfig+0x130>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00b      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <TIM_Base_SetConfig+0x134>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <TIM_Base_SetConfig+0x138>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d003      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <TIM_Base_SetConfig+0x13c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d108      	bne.n	8004ec0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0xf8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d103      	bne.n	8004efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	615a      	str	r2, [r3, #20]
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40010400 	.word	0x40010400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800
 8004f30:	40001800 	.word	0x40001800
 8004f34:	40001c00 	.word	0x40001c00
 8004f38:	40002000 	.word	0x40002000

08004f3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f023 0201 	bic.w	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4a28      	ldr	r2, [pc, #160]	; (8005008 <TIM_TI1_SetConfig+0xcc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01b      	beq.n	8004fa2 <TIM_TI1_SetConfig+0x66>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d017      	beq.n	8004fa2 <TIM_TI1_SetConfig+0x66>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4a25      	ldr	r2, [pc, #148]	; (800500c <TIM_TI1_SetConfig+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <TIM_TI1_SetConfig+0x66>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a24      	ldr	r2, [pc, #144]	; (8005010 <TIM_TI1_SetConfig+0xd4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00f      	beq.n	8004fa2 <TIM_TI1_SetConfig+0x66>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4a23      	ldr	r2, [pc, #140]	; (8005014 <TIM_TI1_SetConfig+0xd8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00b      	beq.n	8004fa2 <TIM_TI1_SetConfig+0x66>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4a22      	ldr	r2, [pc, #136]	; (8005018 <TIM_TI1_SetConfig+0xdc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d007      	beq.n	8004fa2 <TIM_TI1_SetConfig+0x66>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a21      	ldr	r2, [pc, #132]	; (800501c <TIM_TI1_SetConfig+0xe0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d003      	beq.n	8004fa2 <TIM_TI1_SetConfig+0x66>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4a20      	ldr	r2, [pc, #128]	; (8005020 <TIM_TI1_SetConfig+0xe4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d101      	bne.n	8004fa6 <TIM_TI1_SetConfig+0x6a>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <TIM_TI1_SetConfig+0x6c>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	e003      	b.n	8004fc6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f023 030a 	bic.w	r3, r3, #10
 8004fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f003 030a 	and.w	r3, r3, #10
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	621a      	str	r2, [r3, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010000 	.word	0x40010000
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	40010400 	.word	0x40010400
 800501c:	40014000 	.word	0x40014000
 8005020:	40001800 	.word	0x40001800

08005024 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0210 	bic.w	r2, r3, #16
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005062:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	031b      	lsls	r3, r3, #12
 8005068:	b29b      	uxth	r3, r3
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005076:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800509e:	b480      	push	{r7}
 80050a0:	b087      	sub	sp, #28
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0303 	bic.w	r3, r3, #3
 80050ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80050ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005116:	b480      	push	{r7}
 8005118:	b087      	sub	sp, #28
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005142:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005154:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	031b      	lsls	r3, r3, #12
 800515a:	b29b      	uxth	r3, r3
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005168:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	031b      	lsls	r3, r3, #12
 800516e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	621a      	str	r2, [r3, #32]
}
 8005184:	bf00      	nop
 8005186:	371c      	adds	r7, #28
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e06d      	b.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a30      	ldr	r2, [pc, #192]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2f      	ldr	r2, [pc, #188]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d108      	bne.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a20      	ldr	r2, [pc, #128]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d022      	beq.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d01d      	beq.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d018      	beq.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00e      	beq.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a15      	ldr	r2, [pc, #84]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d009      	beq.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d004      	beq.n	8005258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d10c      	bne.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	4313      	orrs	r3, r2
 8005268:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	40010000 	.word	0x40010000
 8005294:	40010400 	.word	0x40010400
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40000c00 	.word	0x40000c00
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40001800 	.word	0x40001800

080052ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e040      	b.n	800537c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fb ff6c 	bl	80011e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2224      	movs	r2, #36	; 0x24
 8005314:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0201 	bic.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f8c0 	bl	80054ac <UART_SetConfig>
 800532c:	4603      	mov	r3, r0
 800532e:	2b01      	cmp	r3, #1
 8005330:	d101      	bne.n	8005336 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e022      	b.n	800537c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fb18 	bl	8005974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0201 	orr.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fb9f 	bl	8005ab8 <UART_CheckIdleState>
 800537a:	4603      	mov	r3, r0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	4613      	mov	r3, r2
 8005392:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005398:	2b20      	cmp	r3, #32
 800539a:	f040 8081 	bne.w	80054a0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_UART_Transmit+0x26>
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e079      	b.n	80054a2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_UART_Transmit+0x38>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e072      	b.n	80054a2 <HAL_UART_Transmit+0x11e>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2221      	movs	r2, #33	; 0x21
 80053d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053d2:	f7fb ffe1 	bl	8001398 <HAL_GetTick>
 80053d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	88fa      	ldrh	r2, [r7, #6]
 80053dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	88fa      	ldrh	r2, [r7, #6]
 80053e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f0:	d108      	bne.n	8005404 <HAL_UART_Transmit+0x80>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d104      	bne.n	8005404 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	61bb      	str	r3, [r7, #24]
 8005402:	e003      	b.n	800540c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005414:	e02c      	b.n	8005470 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2200      	movs	r2, #0
 800541e:	2180      	movs	r1, #128	; 0x80
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fb7c 	bl	8005b1e <UART_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e038      	b.n	80054a2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005444:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	3302      	adds	r3, #2
 800544a:	61bb      	str	r3, [r7, #24]
 800544c:	e007      	b.n	800545e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	781a      	ldrb	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	3301      	adds	r3, #1
 800545c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1cc      	bne.n	8005416 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2200      	movs	r2, #0
 8005484:	2140      	movs	r1, #64	; 0x40
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fb49 	bl	8005b1e <UART_WaitOnFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e005      	b.n	80054a2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800549c:	2300      	movs	r3, #0
 800549e:	e000      	b.n	80054a2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80054a0:	2302      	movs	r3, #2
  }
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	4ba6      	ldr	r3, [pc, #664]	; (8005770 <UART_SetConfig+0x2c4>)
 80054d8:	4013      	ands	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	6979      	ldr	r1, [r7, #20]
 80054e0:	430b      	orrs	r3, r1
 80054e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	430a      	orrs	r2, r1
 800551c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a94      	ldr	r2, [pc, #592]	; (8005774 <UART_SetConfig+0x2c8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d120      	bne.n	800556a <UART_SetConfig+0xbe>
 8005528:	4b93      	ldr	r3, [pc, #588]	; (8005778 <UART_SetConfig+0x2cc>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b03      	cmp	r3, #3
 8005534:	d816      	bhi.n	8005564 <UART_SetConfig+0xb8>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <UART_SetConfig+0x90>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	0800554d 	.word	0x0800554d
 8005540:	08005559 	.word	0x08005559
 8005544:	08005553 	.word	0x08005553
 8005548:	0800555f 	.word	0x0800555f
 800554c:	2301      	movs	r3, #1
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e150      	b.n	80057f4 <UART_SetConfig+0x348>
 8005552:	2302      	movs	r3, #2
 8005554:	77fb      	strb	r3, [r7, #31]
 8005556:	e14d      	b.n	80057f4 <UART_SetConfig+0x348>
 8005558:	2304      	movs	r3, #4
 800555a:	77fb      	strb	r3, [r7, #31]
 800555c:	e14a      	b.n	80057f4 <UART_SetConfig+0x348>
 800555e:	2308      	movs	r3, #8
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e147      	b.n	80057f4 <UART_SetConfig+0x348>
 8005564:	2310      	movs	r3, #16
 8005566:	77fb      	strb	r3, [r7, #31]
 8005568:	e144      	b.n	80057f4 <UART_SetConfig+0x348>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a83      	ldr	r2, [pc, #524]	; (800577c <UART_SetConfig+0x2d0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d132      	bne.n	80055da <UART_SetConfig+0x12e>
 8005574:	4b80      	ldr	r3, [pc, #512]	; (8005778 <UART_SetConfig+0x2cc>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d828      	bhi.n	80055d4 <UART_SetConfig+0x128>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0xdc>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055bd 	.word	0x080055bd
 800558c:	080055d5 	.word	0x080055d5
 8005590:	080055d5 	.word	0x080055d5
 8005594:	080055d5 	.word	0x080055d5
 8005598:	080055c9 	.word	0x080055c9
 800559c:	080055d5 	.word	0x080055d5
 80055a0:	080055d5 	.word	0x080055d5
 80055a4:	080055d5 	.word	0x080055d5
 80055a8:	080055c3 	.word	0x080055c3
 80055ac:	080055d5 	.word	0x080055d5
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	080055d5 	.word	0x080055d5
 80055b8:	080055cf 	.word	0x080055cf
 80055bc:	2300      	movs	r3, #0
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e118      	b.n	80057f4 <UART_SetConfig+0x348>
 80055c2:	2302      	movs	r3, #2
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e115      	b.n	80057f4 <UART_SetConfig+0x348>
 80055c8:	2304      	movs	r3, #4
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e112      	b.n	80057f4 <UART_SetConfig+0x348>
 80055ce:	2308      	movs	r3, #8
 80055d0:	77fb      	strb	r3, [r7, #31]
 80055d2:	e10f      	b.n	80057f4 <UART_SetConfig+0x348>
 80055d4:	2310      	movs	r3, #16
 80055d6:	77fb      	strb	r3, [r7, #31]
 80055d8:	e10c      	b.n	80057f4 <UART_SetConfig+0x348>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a68      	ldr	r2, [pc, #416]	; (8005780 <UART_SetConfig+0x2d4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d120      	bne.n	8005626 <UART_SetConfig+0x17a>
 80055e4:	4b64      	ldr	r3, [pc, #400]	; (8005778 <UART_SetConfig+0x2cc>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055ee:	2b30      	cmp	r3, #48	; 0x30
 80055f0:	d013      	beq.n	800561a <UART_SetConfig+0x16e>
 80055f2:	2b30      	cmp	r3, #48	; 0x30
 80055f4:	d814      	bhi.n	8005620 <UART_SetConfig+0x174>
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d009      	beq.n	800560e <UART_SetConfig+0x162>
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d810      	bhi.n	8005620 <UART_SetConfig+0x174>
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <UART_SetConfig+0x15c>
 8005602:	2b10      	cmp	r3, #16
 8005604:	d006      	beq.n	8005614 <UART_SetConfig+0x168>
 8005606:	e00b      	b.n	8005620 <UART_SetConfig+0x174>
 8005608:	2300      	movs	r3, #0
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e0f2      	b.n	80057f4 <UART_SetConfig+0x348>
 800560e:	2302      	movs	r3, #2
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e0ef      	b.n	80057f4 <UART_SetConfig+0x348>
 8005614:	2304      	movs	r3, #4
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e0ec      	b.n	80057f4 <UART_SetConfig+0x348>
 800561a:	2308      	movs	r3, #8
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e0e9      	b.n	80057f4 <UART_SetConfig+0x348>
 8005620:	2310      	movs	r3, #16
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e0e6      	b.n	80057f4 <UART_SetConfig+0x348>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a56      	ldr	r2, [pc, #344]	; (8005784 <UART_SetConfig+0x2d8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d120      	bne.n	8005672 <UART_SetConfig+0x1c6>
 8005630:	4b51      	ldr	r3, [pc, #324]	; (8005778 <UART_SetConfig+0x2cc>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800563a:	2bc0      	cmp	r3, #192	; 0xc0
 800563c:	d013      	beq.n	8005666 <UART_SetConfig+0x1ba>
 800563e:	2bc0      	cmp	r3, #192	; 0xc0
 8005640:	d814      	bhi.n	800566c <UART_SetConfig+0x1c0>
 8005642:	2b80      	cmp	r3, #128	; 0x80
 8005644:	d009      	beq.n	800565a <UART_SetConfig+0x1ae>
 8005646:	2b80      	cmp	r3, #128	; 0x80
 8005648:	d810      	bhi.n	800566c <UART_SetConfig+0x1c0>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <UART_SetConfig+0x1a8>
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d006      	beq.n	8005660 <UART_SetConfig+0x1b4>
 8005652:	e00b      	b.n	800566c <UART_SetConfig+0x1c0>
 8005654:	2300      	movs	r3, #0
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e0cc      	b.n	80057f4 <UART_SetConfig+0x348>
 800565a:	2302      	movs	r3, #2
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e0c9      	b.n	80057f4 <UART_SetConfig+0x348>
 8005660:	2304      	movs	r3, #4
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e0c6      	b.n	80057f4 <UART_SetConfig+0x348>
 8005666:	2308      	movs	r3, #8
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e0c3      	b.n	80057f4 <UART_SetConfig+0x348>
 800566c:	2310      	movs	r3, #16
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e0c0      	b.n	80057f4 <UART_SetConfig+0x348>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a44      	ldr	r2, [pc, #272]	; (8005788 <UART_SetConfig+0x2dc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d125      	bne.n	80056c8 <UART_SetConfig+0x21c>
 800567c:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <UART_SetConfig+0x2cc>)
 800567e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800568a:	d017      	beq.n	80056bc <UART_SetConfig+0x210>
 800568c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005690:	d817      	bhi.n	80056c2 <UART_SetConfig+0x216>
 8005692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005696:	d00b      	beq.n	80056b0 <UART_SetConfig+0x204>
 8005698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569c:	d811      	bhi.n	80056c2 <UART_SetConfig+0x216>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <UART_SetConfig+0x1fe>
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a6:	d006      	beq.n	80056b6 <UART_SetConfig+0x20a>
 80056a8:	e00b      	b.n	80056c2 <UART_SetConfig+0x216>
 80056aa:	2300      	movs	r3, #0
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e0a1      	b.n	80057f4 <UART_SetConfig+0x348>
 80056b0:	2302      	movs	r3, #2
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e09e      	b.n	80057f4 <UART_SetConfig+0x348>
 80056b6:	2304      	movs	r3, #4
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e09b      	b.n	80057f4 <UART_SetConfig+0x348>
 80056bc:	2308      	movs	r3, #8
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e098      	b.n	80057f4 <UART_SetConfig+0x348>
 80056c2:	2310      	movs	r3, #16
 80056c4:	77fb      	strb	r3, [r7, #31]
 80056c6:	e095      	b.n	80057f4 <UART_SetConfig+0x348>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a2f      	ldr	r2, [pc, #188]	; (800578c <UART_SetConfig+0x2e0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d125      	bne.n	800571e <UART_SetConfig+0x272>
 80056d2:	4b29      	ldr	r3, [pc, #164]	; (8005778 <UART_SetConfig+0x2cc>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056e0:	d017      	beq.n	8005712 <UART_SetConfig+0x266>
 80056e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056e6:	d817      	bhi.n	8005718 <UART_SetConfig+0x26c>
 80056e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ec:	d00b      	beq.n	8005706 <UART_SetConfig+0x25a>
 80056ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f2:	d811      	bhi.n	8005718 <UART_SetConfig+0x26c>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <UART_SetConfig+0x254>
 80056f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fc:	d006      	beq.n	800570c <UART_SetConfig+0x260>
 80056fe:	e00b      	b.n	8005718 <UART_SetConfig+0x26c>
 8005700:	2301      	movs	r3, #1
 8005702:	77fb      	strb	r3, [r7, #31]
 8005704:	e076      	b.n	80057f4 <UART_SetConfig+0x348>
 8005706:	2302      	movs	r3, #2
 8005708:	77fb      	strb	r3, [r7, #31]
 800570a:	e073      	b.n	80057f4 <UART_SetConfig+0x348>
 800570c:	2304      	movs	r3, #4
 800570e:	77fb      	strb	r3, [r7, #31]
 8005710:	e070      	b.n	80057f4 <UART_SetConfig+0x348>
 8005712:	2308      	movs	r3, #8
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e06d      	b.n	80057f4 <UART_SetConfig+0x348>
 8005718:	2310      	movs	r3, #16
 800571a:	77fb      	strb	r3, [r7, #31]
 800571c:	e06a      	b.n	80057f4 <UART_SetConfig+0x348>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1b      	ldr	r2, [pc, #108]	; (8005790 <UART_SetConfig+0x2e4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d138      	bne.n	800579a <UART_SetConfig+0x2ee>
 8005728:	4b13      	ldr	r3, [pc, #76]	; (8005778 <UART_SetConfig+0x2cc>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005732:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005736:	d017      	beq.n	8005768 <UART_SetConfig+0x2bc>
 8005738:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800573c:	d82a      	bhi.n	8005794 <UART_SetConfig+0x2e8>
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005742:	d00b      	beq.n	800575c <UART_SetConfig+0x2b0>
 8005744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005748:	d824      	bhi.n	8005794 <UART_SetConfig+0x2e8>
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <UART_SetConfig+0x2aa>
 800574e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005752:	d006      	beq.n	8005762 <UART_SetConfig+0x2b6>
 8005754:	e01e      	b.n	8005794 <UART_SetConfig+0x2e8>
 8005756:	2300      	movs	r3, #0
 8005758:	77fb      	strb	r3, [r7, #31]
 800575a:	e04b      	b.n	80057f4 <UART_SetConfig+0x348>
 800575c:	2302      	movs	r3, #2
 800575e:	77fb      	strb	r3, [r7, #31]
 8005760:	e048      	b.n	80057f4 <UART_SetConfig+0x348>
 8005762:	2304      	movs	r3, #4
 8005764:	77fb      	strb	r3, [r7, #31]
 8005766:	e045      	b.n	80057f4 <UART_SetConfig+0x348>
 8005768:	2308      	movs	r3, #8
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e042      	b.n	80057f4 <UART_SetConfig+0x348>
 800576e:	bf00      	nop
 8005770:	efff69f3 	.word	0xefff69f3
 8005774:	40011000 	.word	0x40011000
 8005778:	40023800 	.word	0x40023800
 800577c:	40004400 	.word	0x40004400
 8005780:	40004800 	.word	0x40004800
 8005784:	40004c00 	.word	0x40004c00
 8005788:	40005000 	.word	0x40005000
 800578c:	40011400 	.word	0x40011400
 8005790:	40007800 	.word	0x40007800
 8005794:	2310      	movs	r3, #16
 8005796:	77fb      	strb	r3, [r7, #31]
 8005798:	e02c      	b.n	80057f4 <UART_SetConfig+0x348>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a72      	ldr	r2, [pc, #456]	; (8005968 <UART_SetConfig+0x4bc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d125      	bne.n	80057f0 <UART_SetConfig+0x344>
 80057a4:	4b71      	ldr	r3, [pc, #452]	; (800596c <UART_SetConfig+0x4c0>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057b2:	d017      	beq.n	80057e4 <UART_SetConfig+0x338>
 80057b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057b8:	d817      	bhi.n	80057ea <UART_SetConfig+0x33e>
 80057ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057be:	d00b      	beq.n	80057d8 <UART_SetConfig+0x32c>
 80057c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c4:	d811      	bhi.n	80057ea <UART_SetConfig+0x33e>
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <UART_SetConfig+0x326>
 80057ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ce:	d006      	beq.n	80057de <UART_SetConfig+0x332>
 80057d0:	e00b      	b.n	80057ea <UART_SetConfig+0x33e>
 80057d2:	2300      	movs	r3, #0
 80057d4:	77fb      	strb	r3, [r7, #31]
 80057d6:	e00d      	b.n	80057f4 <UART_SetConfig+0x348>
 80057d8:	2302      	movs	r3, #2
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e00a      	b.n	80057f4 <UART_SetConfig+0x348>
 80057de:	2304      	movs	r3, #4
 80057e0:	77fb      	strb	r3, [r7, #31]
 80057e2:	e007      	b.n	80057f4 <UART_SetConfig+0x348>
 80057e4:	2308      	movs	r3, #8
 80057e6:	77fb      	strb	r3, [r7, #31]
 80057e8:	e004      	b.n	80057f4 <UART_SetConfig+0x348>
 80057ea:	2310      	movs	r3, #16
 80057ec:	77fb      	strb	r3, [r7, #31]
 80057ee:	e001      	b.n	80057f4 <UART_SetConfig+0x348>
 80057f0:	2310      	movs	r3, #16
 80057f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fc:	d15b      	bne.n	80058b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80057fe:	7ffb      	ldrb	r3, [r7, #31]
 8005800:	2b08      	cmp	r3, #8
 8005802:	d828      	bhi.n	8005856 <UART_SetConfig+0x3aa>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <UART_SetConfig+0x360>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	08005831 	.word	0x08005831
 8005810:	08005839 	.word	0x08005839
 8005814:	08005841 	.word	0x08005841
 8005818:	08005857 	.word	0x08005857
 800581c:	08005847 	.word	0x08005847
 8005820:	08005857 	.word	0x08005857
 8005824:	08005857 	.word	0x08005857
 8005828:	08005857 	.word	0x08005857
 800582c:	0800584f 	.word	0x0800584f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005830:	f7fd f910 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 8005834:	61b8      	str	r0, [r7, #24]
        break;
 8005836:	e013      	b.n	8005860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7fd f920 	bl	8002a7c <HAL_RCC_GetPCLK2Freq>
 800583c:	61b8      	str	r0, [r7, #24]
        break;
 800583e:	e00f      	b.n	8005860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005840:	4b4b      	ldr	r3, [pc, #300]	; (8005970 <UART_SetConfig+0x4c4>)
 8005842:	61bb      	str	r3, [r7, #24]
        break;
 8005844:	e00c      	b.n	8005860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005846:	f7fd f833 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800584a:	61b8      	str	r0, [r7, #24]
        break;
 800584c:	e008      	b.n	8005860 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005852:	61bb      	str	r3, [r7, #24]
        break;
 8005854:	e004      	b.n	8005860 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	77bb      	strb	r3, [r7, #30]
        break;
 800585e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d074      	beq.n	8005950 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	005a      	lsls	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	441a      	add	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b0f      	cmp	r3, #15
 8005880:	d916      	bls.n	80058b0 <UART_SetConfig+0x404>
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005888:	d212      	bcs.n	80058b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	b29b      	uxth	r3, r3
 800588e:	f023 030f 	bic.w	r3, r3, #15
 8005892:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	b29b      	uxth	r3, r3
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	b29a      	uxth	r2, r3
 80058a0:	89fb      	ldrh	r3, [r7, #14]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	89fa      	ldrh	r2, [r7, #14]
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	e04f      	b.n	8005950 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	77bb      	strb	r3, [r7, #30]
 80058b4:	e04c      	b.n	8005950 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058b6:	7ffb      	ldrb	r3, [r7, #31]
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d828      	bhi.n	800590e <UART_SetConfig+0x462>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0x418>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058e9 	.word	0x080058e9
 80058c8:	080058f1 	.word	0x080058f1
 80058cc:	080058f9 	.word	0x080058f9
 80058d0:	0800590f 	.word	0x0800590f
 80058d4:	080058ff 	.word	0x080058ff
 80058d8:	0800590f 	.word	0x0800590f
 80058dc:	0800590f 	.word	0x0800590f
 80058e0:	0800590f 	.word	0x0800590f
 80058e4:	08005907 	.word	0x08005907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e8:	f7fd f8b4 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 80058ec:	61b8      	str	r0, [r7, #24]
        break;
 80058ee:	e013      	b.n	8005918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f0:	f7fd f8c4 	bl	8002a7c <HAL_RCC_GetPCLK2Freq>
 80058f4:	61b8      	str	r0, [r7, #24]
        break;
 80058f6:	e00f      	b.n	8005918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f8:	4b1d      	ldr	r3, [pc, #116]	; (8005970 <UART_SetConfig+0x4c4>)
 80058fa:	61bb      	str	r3, [r7, #24]
        break;
 80058fc:	e00c      	b.n	8005918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058fe:	f7fc ffd7 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8005902:	61b8      	str	r0, [r7, #24]
        break;
 8005904:	e008      	b.n	8005918 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590a:	61bb      	str	r3, [r7, #24]
        break;
 800590c:	e004      	b.n	8005918 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	77bb      	strb	r3, [r7, #30]
        break;
 8005916:	bf00      	nop
    }

    if (pclk != 0U)
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d018      	beq.n	8005950 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	085a      	lsrs	r2, r3, #1
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	441a      	add	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b0f      	cmp	r3, #15
 8005936:	d909      	bls.n	800594c <UART_SetConfig+0x4a0>
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593e:	d205      	bcs.n	800594c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	b29a      	uxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	e001      	b.n	8005950 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800595c:	7fbb      	ldrb	r3, [r7, #30]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40007c00 	.word	0x40007c00
 800596c:	40023800 	.word	0x40023800
 8005970:	00f42400 	.word	0x00f42400

08005974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a72:	d10a      	bne.n	8005a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac8:	f7fb fc66 	bl	8001398 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d10e      	bne.n	8005afa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f817 	bl	8005b1e <UART_WaitOnFlagUntilTimeout>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e00d      	b.n	8005b16 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b09c      	sub	sp, #112	; 0x70
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	603b      	str	r3, [r7, #0]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2e:	e0a5      	b.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	f000 80a1 	beq.w	8005c7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3a:	f7fb fc2d 	bl	8001398 <HAL_GetTick>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d302      	bcc.n	8005b50 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d13e      	bne.n	8005bce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b64:	667b      	str	r3, [r7, #100]	; 0x64
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e6      	bne.n	8005b50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	663b      	str	r3, [r7, #96]	; 0x60
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ba2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ba4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1e5      	bne.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e067      	b.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d04f      	beq.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bea:	d147      	bne.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bf4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e6      	bne.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	613b      	str	r3, [r7, #16]
   return(result);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3308      	adds	r3, #8
 8005c46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c48:	623a      	str	r2, [r7, #32]
 8005c4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	69f9      	ldr	r1, [r7, #28]
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e5      	bne.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e010      	b.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69da      	ldr	r2, [r3, #28]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4013      	ands	r3, r2
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	f43f af4a 	beq.w	8005b30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3770      	adds	r7, #112	; 0x70
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005ca8:	b084      	sub	sp, #16
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	f107 001c 	add.w	r0, r7, #28
 8005cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005cbe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005cc2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005cc6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005cca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005cce:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005cd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <SDMMC_Init+0x54>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	b004      	add	sp, #16
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	ffff8100 	.word	0xffff8100

08005d00 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2203      	movs	r2, #3
 8005d48:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0303 	and.w	r3, r3, #3
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005d92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005d98:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005d9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <SDMMC_SendCommand+0x50>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	fffff000 	.word	0xfffff000

08005dc8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	b2db      	uxtb	r3, r3
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3314      	adds	r3, #20
 8005df0:	461a      	mov	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	4413      	add	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
}  
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e2e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005e34:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005e3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e52:	2300      	movs	r3, #0

}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005e6e:	2310      	movs	r3, #16
 8005e70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e72:	2340      	movs	r3, #64	; 0x40
 8005e74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e80:	f107 0308 	add.w	r3, r7, #8
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ff74 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e90:	2110      	movs	r1, #16
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa1a 	bl	80062cc <SDMMC_GetCmdResp1>
 8005e98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005eb2:	2311      	movs	r3, #17
 8005eb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005eb6:	2340      	movs	r3, #64	; 0x40
 8005eb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ec4:	f107 0308 	add.w	r3, r7, #8
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff ff52 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed4:	2111      	movs	r1, #17
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9f8 	bl	80062cc <SDMMC_GetCmdResp1>
 8005edc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ede:	69fb      	ldr	r3, [r7, #28]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b088      	sub	sp, #32
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005ef6:	2312      	movs	r3, #18
 8005ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005efa:	2340      	movs	r3, #64	; 0x40
 8005efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f08:	f107 0308 	add.w	r3, r7, #8
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff ff30 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f18:	2112      	movs	r1, #18
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f9d6 	bl	80062cc <SDMMC_GetCmdResp1>
 8005f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f22:	69fb      	ldr	r3, [r7, #28]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3720      	adds	r7, #32
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f3a:	2318      	movs	r3, #24
 8005f3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f3e:	2340      	movs	r3, #64	; 0x40
 8005f40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f4c:	f107 0308 	add.w	r3, r7, #8
 8005f50:	4619      	mov	r1, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff ff0e 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5c:	2118      	movs	r1, #24
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f9b4 	bl	80062cc <SDMMC_GetCmdResp1>
 8005f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f66:	69fb      	ldr	r3, [r7, #28]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005f7e:	2319      	movs	r3, #25
 8005f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f82:	2340      	movs	r3, #64	; 0x40
 8005f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f86:	2300      	movs	r3, #0
 8005f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f90:	f107 0308 	add.w	r3, r7, #8
 8005f94:	4619      	mov	r1, r3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff feec 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa0:	2119      	movs	r1, #25
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f992 	bl	80062cc <SDMMC_GetCmdResp1>
 8005fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005faa:	69fb      	ldr	r3, [r7, #28]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3720      	adds	r7, #32
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fc4:	2340      	movs	r3, #64	; 0x40
 8005fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fd2:	f107 0308 	add.w	r3, r7, #8
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff fecb 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005fde:	4a05      	ldr	r2, [pc, #20]	; (8005ff4 <SDMMC_CmdStopTransfer+0x40>)
 8005fe0:	210c      	movs	r1, #12
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f972 	bl	80062cc <SDMMC_GetCmdResp1>
 8005fe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fea:	69fb      	ldr	r3, [r7, #28]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	05f5e100 	.word	0x05f5e100

08005ff8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006008:	2307      	movs	r3, #7
 800600a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800600c:	2340      	movs	r3, #64	; 0x40
 800600e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006010:	2300      	movs	r3, #0
 8006012:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006018:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800601a:	f107 0310 	add.w	r3, r7, #16
 800601e:	4619      	mov	r1, r3
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fea7 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006026:	f241 3288 	movw	r2, #5000	; 0x1388
 800602a:	2107      	movs	r1, #7
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f94d 	bl	80062cc <SDMMC_GetCmdResp1>
 8006032:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006036:	4618      	mov	r0, r3
 8006038:	3728      	adds	r7, #40	; 0x28
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b088      	sub	sp, #32
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800605a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800605c:	f107 0308 	add.w	r3, r7, #8
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff fe86 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fb67 	bl	800673c <SDMMC_GetCmdError>
 800606e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006070:	69fb      	ldr	r3, [r7, #28]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3720      	adds	r7, #32
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b088      	sub	sp, #32
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006082:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006088:	2308      	movs	r3, #8
 800608a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800608c:	2340      	movs	r3, #64	; 0x40
 800608e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006098:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800609a:	f107 0308 	add.w	r3, r7, #8
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fe67 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fafa 	bl	80066a0 <SDMMC_GetCmdResp7>
 80060ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ae:	69fb      	ldr	r3, [r7, #28]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80060c6:	2337      	movs	r3, #55	; 0x37
 80060c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060ca:	2340      	movs	r3, #64	; 0x40
 80060cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060d8:	f107 0308 	add.w	r3, r7, #8
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff fe48 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80060e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e8:	2137      	movs	r1, #55	; 0x37
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f8ee 	bl	80062cc <SDMMC_GetCmdResp1>
 80060f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060f2:	69fb      	ldr	r3, [r7, #28]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3720      	adds	r7, #32
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <SDMMC_CmdAppOperCommand+0x44>)
 800610a:	4313      	orrs	r3, r2
 800610c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800610e:	2329      	movs	r3, #41	; 0x29
 8006110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800611a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006120:	f107 0308 	add.w	r3, r7, #8
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fe24 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fa03 	bl	8006538 <SDMMC_GetCmdResp3>
 8006132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006134:	69fb      	ldr	r3, [r7, #28]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	80100000 	.word	0x80100000

08006144 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006152:	2306      	movs	r3, #6
 8006154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006156:	2340      	movs	r3, #64	; 0x40
 8006158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800615e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006162:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006164:	f107 0308 	add.w	r3, r7, #8
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fe02 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006170:	f241 3288 	movw	r2, #5000	; 0x1388
 8006174:	2106      	movs	r1, #6
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8a8 	bl	80062cc <SDMMC_GetCmdResp1>
 800617c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800617e:	69fb      	ldr	r3, [r7, #28]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b088      	sub	sp, #32
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006194:	2333      	movs	r3, #51	; 0x33
 8006196:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006198:	2340      	movs	r3, #64	; 0x40
 800619a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800619c:	2300      	movs	r3, #0
 800619e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061a6:	f107 0308 	add.w	r3, r7, #8
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff fde1 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80061b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b6:	2133      	movs	r1, #51	; 0x33
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f887 	bl	80062cc <SDMMC_GetCmdResp1>
 80061be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061c0:	69fb      	ldr	r3, [r7, #28]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b088      	sub	sp, #32
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80061d6:	2302      	movs	r3, #2
 80061d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80061da:	23c0      	movs	r3, #192	; 0xc0
 80061dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061e8:	f107 0308 	add.w	r3, r7, #8
 80061ec:	4619      	mov	r1, r3
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff fdc0 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f957 	bl	80064a8 <SDMMC_GetCmdResp2>
 80061fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061fc:	69fb      	ldr	r3, [r7, #28]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b088      	sub	sp, #32
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006214:	2309      	movs	r3, #9
 8006216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006218:	23c0      	movs	r3, #192	; 0xc0
 800621a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006224:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fda1 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f938 	bl	80064a8 <SDMMC_GetCmdResp2>
 8006238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800623a:	69fb      	ldr	r3, [r7, #28]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006252:	2303      	movs	r3, #3
 8006254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006256:	2340      	movs	r3, #64	; 0x40
 8006258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800625e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006262:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006264:	f107 0308 	add.w	r3, r7, #8
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fd82 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	2103      	movs	r1, #3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f99d 	bl	80065b4 <SDMMC_GetCmdResp6>
 800627a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800627c:	69fb      	ldr	r3, [r7, #28]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b088      	sub	sp, #32
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006294:	230d      	movs	r3, #13
 8006296:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006298:	2340      	movs	r3, #64	; 0x40
 800629a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062a6:	f107 0308 	add.w	r3, r7, #8
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff fd61 	bl	8005d74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	210d      	movs	r1, #13
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f807 	bl	80062cc <SDMMC_GetCmdResp1>
 80062be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062c0:	69fb      	ldr	r3, [r7, #28]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	460b      	mov	r3, r1
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80062da:	4b70      	ldr	r3, [pc, #448]	; (800649c <SDMMC_GetCmdResp1+0x1d0>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a70      	ldr	r2, [pc, #448]	; (80064a0 <SDMMC_GetCmdResp1+0x1d4>)
 80062e0:	fba2 2303 	umull	r2, r3, r2, r3
 80062e4:	0a5a      	lsrs	r2, r3, #9
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	fb02 f303 	mul.w	r3, r2, r3
 80062ec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	1e5a      	subs	r2, r3, #1
 80062f2:	61fa      	str	r2, [r7, #28]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062fc:	e0c9      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0ef      	beq.n	80062ee <SDMMC_GetCmdResp1+0x22>
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1ea      	bne.n	80062ee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d004      	beq.n	800632e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2204      	movs	r2, #4
 8006328:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800632a:	2304      	movs	r3, #4
 800632c:	e0b1      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006340:	2301      	movs	r3, #1
 8006342:	e0a6      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	22c5      	movs	r2, #197	; 0xc5
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff fd3c 	bl	8005dc8 <SDMMC_GetCommandResponse>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	7afb      	ldrb	r3, [r7, #11]
 8006356:	4293      	cmp	r3, r2
 8006358:	d001      	beq.n	800635e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800635a:	2301      	movs	r3, #1
 800635c:	e099      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800635e:	2100      	movs	r1, #0
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff fd3e 	bl	8005de2 <SDMMC_GetResponse>
 8006366:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4b4e      	ldr	r3, [pc, #312]	; (80064a4 <SDMMC_GetCmdResp1+0x1d8>)
 800636c:	4013      	ands	r3, r2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006372:	2300      	movs	r3, #0
 8006374:	e08d      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	da02      	bge.n	8006382 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800637c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006380:	e087      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	e080      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800639a:	2380      	movs	r3, #128	; 0x80
 800639c:	e079      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80063a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063ac:	e071      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80063b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063bc:	e069      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80063c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063cc:	e061      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80063d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063dc:	e059      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80063e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ec:	e051      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80063f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063fc:	e049      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006408:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800640c:	e041      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800641c:	e039      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800642c:	e031      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006438:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800643c:	e029      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006448:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800644c:	e021      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006458:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800645c:	e019      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006468:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800646c:	e011      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006478:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800647c:	e009      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006488:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800648c:	e001      	b.n	8006492 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800648e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000000 	.word	0x20000000
 80064a0:	10624dd3 	.word	0x10624dd3
 80064a4:	fdffe008 	.word	0xfdffe008

080064a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064b0:	4b1f      	ldr	r3, [pc, #124]	; (8006530 <SDMMC_GetCmdResp2+0x88>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a1f      	ldr	r2, [pc, #124]	; (8006534 <SDMMC_GetCmdResp2+0x8c>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	0a5b      	lsrs	r3, r3, #9
 80064bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c0:	fb02 f303 	mul.w	r3, r2, r3
 80064c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1e5a      	subs	r2, r3, #1
 80064ca:	60fa      	str	r2, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064d4:	e026      	b.n	8006524 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0ef      	beq.n	80064c6 <SDMMC_GetCmdResp2+0x1e>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ea      	bne.n	80064c6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d004      	beq.n	8006506 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2204      	movs	r2, #4
 8006500:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006502:	2304      	movs	r3, #4
 8006504:	e00e      	b.n	8006524 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006518:	2301      	movs	r3, #1
 800651a:	e003      	b.n	8006524 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	22c5      	movs	r2, #197	; 0xc5
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	20000000 	.word	0x20000000
 8006534:	10624dd3 	.word	0x10624dd3

08006538 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006540:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <SDMMC_GetCmdResp3+0x74>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a1a      	ldr	r2, [pc, #104]	; (80065b0 <SDMMC_GetCmdResp3+0x78>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	0a5b      	lsrs	r3, r3, #9
 800654c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006550:	fb02 f303 	mul.w	r3, r2, r3
 8006554:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1e5a      	subs	r2, r3, #1
 800655a:	60fa      	str	r2, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006564:	e01b      	b.n	800659e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0ef      	beq.n	8006556 <SDMMC_GetCmdResp3+0x1e>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1ea      	bne.n	8006556 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2204      	movs	r2, #4
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006592:	2304      	movs	r3, #4
 8006594:	e003      	b.n	800659e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	22c5      	movs	r2, #197	; 0xc5
 800659a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	20000000 	.word	0x20000000
 80065b0:	10624dd3 	.word	0x10624dd3

080065b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	460b      	mov	r3, r1
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065c2:	4b35      	ldr	r3, [pc, #212]	; (8006698 <SDMMC_GetCmdResp6+0xe4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a35      	ldr	r2, [pc, #212]	; (800669c <SDMMC_GetCmdResp6+0xe8>)
 80065c8:	fba2 2303 	umull	r2, r3, r2, r3
 80065cc:	0a5b      	lsrs	r3, r3, #9
 80065ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d2:	fb02 f303 	mul.w	r3, r2, r3
 80065d6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	61fa      	str	r2, [r7, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80065e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065e6:	e052      	b.n	800668e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0ef      	beq.n	80065d8 <SDMMC_GetCmdResp6+0x24>
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1ea      	bne.n	80065d8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2204      	movs	r2, #4
 8006612:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006614:	2304      	movs	r3, #4
 8006616:	e03a      	b.n	800668e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800662a:	2301      	movs	r3, #1
 800662c:	e02f      	b.n	800668e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fbca 	bl	8005dc8 <SDMMC_GetCommandResponse>
 8006634:	4603      	mov	r3, r0
 8006636:	461a      	mov	r2, r3
 8006638:	7afb      	ldrb	r3, [r7, #11]
 800663a:	4293      	cmp	r3, r2
 800663c:	d001      	beq.n	8006642 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800663e:	2301      	movs	r3, #1
 8006640:	e025      	b.n	800668e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	22c5      	movs	r2, #197	; 0xc5
 8006646:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006648:	2100      	movs	r1, #0
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff fbc9 	bl	8005de2 <SDMMC_GetResponse>
 8006650:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d106      	bne.n	800666a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	0c1b      	lsrs	r3, r3, #16
 8006660:	b29a      	uxth	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006666:	2300      	movs	r3, #0
 8006668:	e011      	b.n	800668e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006678:	e009      	b.n	800668e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006688:	e001      	b.n	800668e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800668a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20000000 	.word	0x20000000
 800669c:	10624dd3 	.word	0x10624dd3

080066a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066a8:	4b22      	ldr	r3, [pc, #136]	; (8006734 <SDMMC_GetCmdResp7+0x94>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a22      	ldr	r2, [pc, #136]	; (8006738 <SDMMC_GetCmdResp7+0x98>)
 80066ae:	fba2 2303 	umull	r2, r3, r2, r3
 80066b2:	0a5b      	lsrs	r3, r3, #9
 80066b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b8:	fb02 f303 	mul.w	r3, r2, r3
 80066bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1e5a      	subs	r2, r3, #1
 80066c2:	60fa      	str	r2, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066cc:	e02c      	b.n	8006728 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0ef      	beq.n	80066be <SDMMC_GetCmdResp7+0x1e>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1ea      	bne.n	80066be <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ec:	f003 0304 	and.w	r3, r3, #4
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d004      	beq.n	80066fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2204      	movs	r2, #4
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066fa:	2304      	movs	r3, #4
 80066fc:	e014      	b.n	8006728 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006710:	2301      	movs	r3, #1
 8006712:	e009      	b.n	8006728 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2240      	movs	r2, #64	; 0x40
 8006724:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006726:	2300      	movs	r3, #0
  
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	20000000 	.word	0x20000000
 8006738:	10624dd3 	.word	0x10624dd3

0800673c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006744:	4b11      	ldr	r3, [pc, #68]	; (800678c <SDMMC_GetCmdError+0x50>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a11      	ldr	r2, [pc, #68]	; (8006790 <SDMMC_GetCmdError+0x54>)
 800674a:	fba2 2303 	umull	r2, r3, r2, r3
 800674e:	0a5b      	lsrs	r3, r3, #9
 8006750:	f241 3288 	movw	r2, #5000	; 0x1388
 8006754:	fb02 f303 	mul.w	r3, r2, r3
 8006758:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1e5a      	subs	r2, r3, #1
 800675e:	60fa      	str	r2, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006764:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006768:	e009      	b.n	800677e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0f1      	beq.n	800675a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	22c5      	movs	r2, #197	; 0xc5
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	20000000 	.word	0x20000000
 8006790:	10624dd3 	.word	0x10624dd3

08006794 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006798:	4904      	ldr	r1, [pc, #16]	; (80067ac <MX_FATFS_Init+0x18>)
 800679a:	4805      	ldr	r0, [pc, #20]	; (80067b0 <MX_FATFS_Init+0x1c>)
 800679c:	f003 f834 	bl	8009808 <FATFS_LinkDriver>
 80067a0:	4603      	mov	r3, r0
 80067a2:	461a      	mov	r2, r3
 80067a4:	4b03      	ldr	r3, [pc, #12]	; (80067b4 <MX_FATFS_Init+0x20>)
 80067a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80067a8:	bf00      	nop
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	200002f8 	.word	0x200002f8
 80067b0:	0800abfc 	.word	0x0800abfc
 80067b4:	200002f4 	.word	0x200002f4

080067b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80067bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80067be:	4618      	mov	r0, r3
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80067d2:	f000 f896 	bl	8006902 <BSP_SD_IsDetected>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d001      	beq.n	80067e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80067dc:	2302      	movs	r3, #2
 80067de:	e012      	b.n	8006806 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80067e0:	480b      	ldr	r0, [pc, #44]	; (8006810 <BSP_SD_Init+0x48>)
 80067e2:	f7fc fd4f 	bl	8003284 <HAL_SD_Init>
 80067e6:	4603      	mov	r3, r0
 80067e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80067f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067f4:	4806      	ldr	r0, [pc, #24]	; (8006810 <BSP_SD_Init+0x48>)
 80067f6:	f7fd fb15 	bl	8003e24 <HAL_SD_ConfigWideBusOperation>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006804:	79fb      	ldrb	r3, [r7, #7]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	2000008c 	.word	0x2000008c

08006814 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	68f9      	ldr	r1, [r7, #12]
 800682a:	4806      	ldr	r0, [pc, #24]	; (8006844 <BSP_SD_ReadBlocks_DMA+0x30>)
 800682c:	f7fc fde2 	bl	80033f4 <HAL_SD_ReadBlocks_DMA>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800683a:	7dfb      	ldrb	r3, [r7, #23]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	2000008c 	.word	0x2000008c

08006848 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	68f9      	ldr	r1, [r7, #12]
 800685e:	4806      	ldr	r0, [pc, #24]	; (8006878 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006860:	f7fc feaa 	bl	80035b8 <HAL_SD_WriteBlocks_DMA>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	2000008c 	.word	0x2000008c

0800687c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006880:	4805      	ldr	r0, [pc, #20]	; (8006898 <BSP_SD_GetCardState+0x1c>)
 8006882:	f7fd fb69 	bl	8003f58 <HAL_SD_GetCardState>
 8006886:	4603      	mov	r3, r0
 8006888:	2b04      	cmp	r3, #4
 800688a:	bf14      	ite	ne
 800688c:	2301      	movne	r3, #1
 800688e:	2300      	moveq	r3, #0
 8006890:	b2db      	uxtb	r3, r3
}
 8006892:	4618      	mov	r0, r3
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	2000008c 	.word	0x2000008c

0800689c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4803      	ldr	r0, [pc, #12]	; (80068b4 <BSP_SD_GetCardInfo+0x18>)
 80068a8:	f7fd fa90 	bl	8003dcc <HAL_SD_GetCardInfo>
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	2000008c 	.word	0x2000008c

080068b8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80068c0:	f000 f818 	bl	80068f4 <BSP_SD_AbortCallback>
}
 80068c4:	bf00      	nop
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80068d4:	f000 f9a8 	bl	8006c28 <BSP_SD_WriteCpltCallback>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80068e8:	f000 f9aa 	bl	8006c40 <BSP_SD_ReadCpltCallback>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0

}
 80068f8:	bf00      	nop
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b082      	sub	sp, #8
 8006906:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006908:	2301      	movs	r3, #1
 800690a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800690c:	f000 f80c 	bl	8006928 <BSP_PlatformIsDetected>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006916:	2300      	movs	r3, #0
 8006918:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	b2db      	uxtb	r3, r3
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800692e:	2301      	movs	r3, #1
 8006930:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006936:	4806      	ldr	r0, [pc, #24]	; (8006950 <BSP_PlatformIsDetected+0x28>)
 8006938:	f7fb fbc2 	bl	80020c0 <HAL_GPIO_ReadPin>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006942:	2300      	movs	r3, #0
 8006944:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006946:	79fb      	ldrb	r3, [r7, #7]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	40020800 	.word	0x40020800

08006954 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800695c:	f7fa fd1c 	bl	8001398 <HAL_GetTick>
 8006960:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006962:	e006      	b.n	8006972 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006964:	f7ff ff8a 	bl	800687c <BSP_SD_GetCardState>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800696e:	2300      	movs	r3, #0
 8006970:	e009      	b.n	8006986 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006972:	f7fa fd11 	bl	8001398 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	429a      	cmp	r2, r3
 8006980:	d8f0      	bhi.n	8006964 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <SD_CheckStatus+0x38>)
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80069a0:	f7ff ff6c 	bl	800687c <BSP_SD_GetCardState>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d107      	bne.n	80069ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <SD_CheckStatus+0x38>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <SD_CheckStatus+0x38>)
 80069b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80069ba:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <SD_CheckStatus+0x38>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	b2db      	uxtb	r3, r3
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000009 	.word	0x20000009

080069cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80069d6:	f7ff fef7 	bl	80067c8 <BSP_SD_Init>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d107      	bne.n	80069f0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff ffd4 	bl	8006990 <SD_CheckStatus>
 80069e8:	4603      	mov	r3, r0
 80069ea:	461a      	mov	r2, r3
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <SD_initialize+0x34>)
 80069ee:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80069f0:	4b03      	ldr	r3, [pc, #12]	; (8006a00 <SD_initialize+0x34>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	b2db      	uxtb	r3, r3
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000009 	.word	0x20000009

08006a04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ffbd 	bl	8006990 <SD_CheckStatus>
 8006a16:	4603      	mov	r3, r0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006a34:	f247 5030 	movw	r0, #30000	; 0x7530
 8006a38:	f7ff ff8c 	bl	8006954 <SD_CheckStatusWithTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da01      	bge.n	8006a46 <SD_read+0x26>
  {
    return res;
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	e03b      	b.n	8006abe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	68b8      	ldr	r0, [r7, #8]
 8006a4c:	f7ff fee2 	bl	8006814 <BSP_SD_ReadBlocks_DMA>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d132      	bne.n	8006abc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006a56:	4b1c      	ldr	r3, [pc, #112]	; (8006ac8 <SD_read+0xa8>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006a5c:	f7fa fc9c 	bl	8001398 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006a62:	bf00      	nop
 8006a64:	4b18      	ldr	r3, [pc, #96]	; (8006ac8 <SD_read+0xa8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d108      	bne.n	8006a7e <SD_read+0x5e>
 8006a6c:	f7fa fc94 	bl	8001398 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	f247 522f 	movw	r2, #29999	; 0x752f
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d9f2      	bls.n	8006a64 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <SD_read+0xa8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d102      	bne.n	8006a8c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	75fb      	strb	r3, [r7, #23]
 8006a8a:	e017      	b.n	8006abc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006a8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ac8 <SD_read+0xa8>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006a92:	f7fa fc81 	bl	8001398 <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006a98:	e007      	b.n	8006aaa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006a9a:	f7ff feef 	bl	800687c <BSP_SD_GetCardState>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <SD_read+0x8a>
          {
            res = RES_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006aa8:	e008      	b.n	8006abc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006aaa:	f7fa fc75 	bl	8001398 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	f247 522f 	movw	r2, #29999	; 0x752f
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d9ee      	bls.n	8006a9a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000760 	.word	0x20000760

08006acc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006ae0:	4b24      	ldr	r3, [pc, #144]	; (8006b74 <SD_write+0xa8>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006ae6:	f247 5030 	movw	r0, #30000	; 0x7530
 8006aea:	f7ff ff33 	bl	8006954 <SD_CheckStatusWithTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da01      	bge.n	8006af8 <SD_write+0x2c>
  {
    return res;
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	e038      	b.n	8006b6a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	68b8      	ldr	r0, [r7, #8]
 8006afe:	f7ff fea3 	bl	8006848 <BSP_SD_WriteBlocks_DMA>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d12f      	bne.n	8006b68 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006b08:	f7fa fc46 	bl	8001398 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006b0e:	bf00      	nop
 8006b10:	4b18      	ldr	r3, [pc, #96]	; (8006b74 <SD_write+0xa8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d108      	bne.n	8006b2a <SD_write+0x5e>
 8006b18:	f7fa fc3e 	bl	8001398 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d9f2      	bls.n	8006b10 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006b2a:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <SD_write+0xa8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d102      	bne.n	8006b38 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	75fb      	strb	r3, [r7, #23]
 8006b36:	e017      	b.n	8006b68 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006b38:	4b0e      	ldr	r3, [pc, #56]	; (8006b74 <SD_write+0xa8>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006b3e:	f7fa fc2b 	bl	8001398 <HAL_GetTick>
 8006b42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b44:	e007      	b.n	8006b56 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b46:	f7ff fe99 	bl	800687c <BSP_SD_GetCardState>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d102      	bne.n	8006b56 <SD_write+0x8a>
          {
            res = RES_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	75fb      	strb	r3, [r7, #23]
            break;
 8006b54:	e008      	b.n	8006b68 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b56:	f7fa fc1f 	bl	8001398 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d9ee      	bls.n	8006b46 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	2000075c 	.word	0x2000075c

08006b78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	; 0x30
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	603a      	str	r2, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
 8006b84:	460b      	mov	r3, r1
 8006b86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006b8e:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <SD_ioctl+0xac>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <SD_ioctl+0x28>
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e03c      	b.n	8006c1a <SD_ioctl+0xa2>

  switch (cmd)
 8006ba0:	79bb      	ldrb	r3, [r7, #6]
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d834      	bhi.n	8006c10 <SD_ioctl+0x98>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <SD_ioctl+0x34>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bbd 	.word	0x08006bbd
 8006bb0:	08006bc5 	.word	0x08006bc5
 8006bb4:	08006bdd 	.word	0x08006bdd
 8006bb8:	08006bf7 	.word	0x08006bf7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006bc2:	e028      	b.n	8006c16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006bc4:	f107 030c 	add.w	r3, r7, #12
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fe67 	bl	800689c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006bda:	e01c      	b.n	8006c16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006bdc:	f107 030c 	add.w	r3, r7, #12
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff fe5b 	bl	800689c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006bf4:	e00f      	b.n	8006c16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006bf6:	f107 030c 	add.w	r3, r7, #12
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff fe4e 	bl	800689c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	0a5a      	lsrs	r2, r3, #9
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006c0e:	e002      	b.n	8006c16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006c10:	2304      	movs	r3, #4
 8006c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3730      	adds	r7, #48	; 0x30
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000009 	.word	0x20000009

08006c28 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006c2c:	4b03      	ldr	r3, [pc, #12]	; (8006c3c <BSP_SD_WriteCpltCallback+0x14>)
 8006c2e:	2201      	movs	r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
}
 8006c32:	bf00      	nop
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	2000075c 	.word	0x2000075c

08006c40 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006c44:	4b03      	ldr	r3, [pc, #12]	; (8006c54 <BSP_SD_ReadCpltCallback+0x14>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	601a      	str	r2, [r3, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	20000760 	.word	0x20000760

08006c58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4603      	mov	r3, r0
 8006c60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	4a08      	ldr	r2, [pc, #32]	; (8006c88 <disk_status+0x30>)
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	79fa      	ldrb	r2, [r7, #7]
 8006c70:	4905      	ldr	r1, [pc, #20]	; (8006c88 <disk_status+0x30>)
 8006c72:	440a      	add	r2, r1
 8006c74:	7a12      	ldrb	r2, [r2, #8]
 8006c76:	4610      	mov	r0, r2
 8006c78:	4798      	blx	r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	2000078c 	.word	0x2000078c

08006c8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	4a0d      	ldr	r2, [pc, #52]	; (8006cd4 <disk_initialize+0x48>)
 8006c9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d111      	bne.n	8006cc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	4a0b      	ldr	r2, [pc, #44]	; (8006cd4 <disk_initialize+0x48>)
 8006ca8:	2101      	movs	r1, #1
 8006caa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <disk_initialize+0x48>)
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	79fa      	ldrb	r2, [r7, #7]
 8006cba:	4906      	ldr	r1, [pc, #24]	; (8006cd4 <disk_initialize+0x48>)
 8006cbc:	440a      	add	r2, r1
 8006cbe:	7a12      	ldrb	r2, [r2, #8]
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	2000078c 	.word	0x2000078c

08006cd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006cd8:	b590      	push	{r4, r7, lr}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	4a0a      	ldr	r2, [pc, #40]	; (8006d14 <disk_read+0x3c>)
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	689c      	ldr	r4, [r3, #8]
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	4a07      	ldr	r2, [pc, #28]	; (8006d14 <disk_read+0x3c>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	7a18      	ldrb	r0, [r3, #8]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	47a0      	blx	r4
 8006d04:	4603      	mov	r3, r0
 8006d06:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd90      	pop	{r4, r7, pc}
 8006d12:	bf00      	nop
 8006d14:	2000078c 	.word	0x2000078c

08006d18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d18:	b590      	push	{r4, r7, lr}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	607a      	str	r2, [r7, #4]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	4603      	mov	r3, r0
 8006d26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	4a0a      	ldr	r2, [pc, #40]	; (8006d54 <disk_write+0x3c>)
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	68dc      	ldr	r4, [r3, #12]
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	4a07      	ldr	r2, [pc, #28]	; (8006d54 <disk_write+0x3c>)
 8006d38:	4413      	add	r3, r2
 8006d3a:	7a18      	ldrb	r0, [r3, #8]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	47a0      	blx	r4
 8006d44:	4603      	mov	r3, r0
 8006d46:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd90      	pop	{r4, r7, pc}
 8006d52:	bf00      	nop
 8006d54:	2000078c 	.word	0x2000078c

08006d58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	603a      	str	r2, [r7, #0]
 8006d62:	71fb      	strb	r3, [r7, #7]
 8006d64:	460b      	mov	r3, r1
 8006d66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d68:	79fb      	ldrb	r3, [r7, #7]
 8006d6a:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <disk_ioctl+0x38>)
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	79fa      	ldrb	r2, [r7, #7]
 8006d76:	4906      	ldr	r1, [pc, #24]	; (8006d90 <disk_ioctl+0x38>)
 8006d78:	440a      	add	r2, r1
 8006d7a:	7a10      	ldrb	r0, [r2, #8]
 8006d7c:	79b9      	ldrb	r1, [r7, #6]
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	4798      	blx	r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	2000078c 	.word	0x2000078c

08006d94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006da4:	89fb      	ldrh	r3, [r7, #14]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	b21a      	sxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b21b      	sxth	r3, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b21b      	sxth	r3, r3
 8006db4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006db6:	89fb      	ldrh	r3, [r7, #14]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3303      	adds	r3, #3
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	3202      	adds	r2, #2
 8006ddc:	7812      	ldrb	r2, [r2, #0]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	3201      	adds	r2, #1
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	7812      	ldrb	r2, [r2, #0]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
	return rv;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	887a      	ldrh	r2, [r7, #2]
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	0a1b      	lsrs	r3, r3, #8
 8006e26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	1c5a      	adds	r2, r3, #1
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	887a      	ldrh	r2, [r7, #2]
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	0a1b      	lsrs	r3, r3, #8
 8006e5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	607a      	str	r2, [r7, #4]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	0a1b      	lsrs	r3, r3, #8
 8006e6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	607a      	str	r2, [r7, #4]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	701a      	strb	r2, [r3, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00d      	beq.n	8006ece <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	1c53      	adds	r3, r2, #1
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	1c59      	adds	r1, r3, #1
 8006ebc:	6179      	str	r1, [r7, #20]
 8006ebe:	7812      	ldrb	r2, [r2, #0]
 8006ec0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	607b      	str	r3, [r7, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f1      	bne.n	8006eb2 <mem_cpy+0x1a>
	}
}
 8006ece:	bf00      	nop
 8006ed0:	371c      	adds	r7, #28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006eda:	b480      	push	{r7}
 8006edc:	b087      	sub	sp, #28
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	617a      	str	r2, [r7, #20]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	607b      	str	r3, [r7, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f3      	bne.n	8006eea <mem_set+0x10>
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006f10:	b480      	push	{r7}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	61fa      	str	r2, [r7, #28]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	4619      	mov	r1, r3
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	61ba      	str	r2, [r7, #24]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	1acb      	subs	r3, r1, r3
 8006f3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	607b      	str	r3, [r7, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <mem_cmp+0x40>
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0eb      	beq.n	8006f28 <mem_cmp+0x18>

	return r;
 8006f50:	697b      	ldr	r3, [r7, #20]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3724      	adds	r7, #36	; 0x24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006f68:	e002      	b.n	8006f70 <chk_chr+0x12>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	607b      	str	r3, [r7, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <chk_chr+0x26>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d1f2      	bne.n	8006f6a <chk_chr+0xc>
	return *str;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	781b      	ldrb	r3, [r3, #0]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	e029      	b.n	8006ffc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006fa8:	4a27      	ldr	r2, [pc, #156]	; (8007048 <chk_lock+0xb4>)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	4413      	add	r3, r2
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d01d      	beq.n	8006ff2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006fb6:	4a24      	ldr	r2, [pc, #144]	; (8007048 <chk_lock+0xb4>)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	011b      	lsls	r3, r3, #4
 8006fbc:	4413      	add	r3, r2
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d116      	bne.n	8006ff6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006fc8:	4a1f      	ldr	r2, [pc, #124]	; (8007048 <chk_lock+0xb4>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	4413      	add	r3, r2
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d10c      	bne.n	8006ff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006fdc:	4a1a      	ldr	r2, [pc, #104]	; (8007048 <chk_lock+0xb4>)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d102      	bne.n	8006ff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ff0:	e007      	b.n	8007002 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d9d2      	bls.n	8006fa8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d109      	bne.n	800701c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d102      	bne.n	8007014 <chk_lock+0x80>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d101      	bne.n	8007018 <chk_lock+0x84>
 8007014:	2300      	movs	r3, #0
 8007016:	e010      	b.n	800703a <chk_lock+0xa6>
 8007018:	2312      	movs	r3, #18
 800701a:	e00e      	b.n	800703a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d108      	bne.n	8007034 <chk_lock+0xa0>
 8007022:	4a09      	ldr	r2, [pc, #36]	; (8007048 <chk_lock+0xb4>)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	4413      	add	r3, r2
 800702a:	330c      	adds	r3, #12
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007032:	d101      	bne.n	8007038 <chk_lock+0xa4>
 8007034:	2310      	movs	r3, #16
 8007036:	e000      	b.n	800703a <chk_lock+0xa6>
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	2000076c 	.word	0x2000076c

0800704c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007052:	2300      	movs	r3, #0
 8007054:	607b      	str	r3, [r7, #4]
 8007056:	e002      	b.n	800705e <enq_lock+0x12>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3301      	adds	r3, #1
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d806      	bhi.n	8007072 <enq_lock+0x26>
 8007064:	4a09      	ldr	r2, [pc, #36]	; (800708c <enq_lock+0x40>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	011b      	lsls	r3, r3, #4
 800706a:	4413      	add	r3, r2
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1f2      	bne.n	8007058 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b02      	cmp	r3, #2
 8007076:	bf14      	ite	ne
 8007078:	2301      	movne	r3, #1
 800707a:	2300      	moveq	r3, #0
 800707c:	b2db      	uxtb	r3, r3
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	2000076c 	.word	0x2000076c

08007090 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e01f      	b.n	80070e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80070a0:	4a41      	ldr	r2, [pc, #260]	; (80071a8 <inc_lock+0x118>)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	4413      	add	r3, r2
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d113      	bne.n	80070da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80070b2:	4a3d      	ldr	r2, [pc, #244]	; (80071a8 <inc_lock+0x118>)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	4413      	add	r3, r2
 80070ba:	3304      	adds	r3, #4
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d109      	bne.n	80070da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80070c6:	4a38      	ldr	r2, [pc, #224]	; (80071a8 <inc_lock+0x118>)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	4413      	add	r3, r2
 80070ce:	3308      	adds	r3, #8
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d006      	beq.n	80070e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d9dc      	bls.n	80070a0 <inc_lock+0x10>
 80070e6:	e000      	b.n	80070ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80070e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d132      	bne.n	8007156 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	e002      	b.n	80070fc <inc_lock+0x6c>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3301      	adds	r3, #1
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d806      	bhi.n	8007110 <inc_lock+0x80>
 8007102:	4a29      	ldr	r2, [pc, #164]	; (80071a8 <inc_lock+0x118>)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	4413      	add	r3, r2
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f2      	bne.n	80070f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d101      	bne.n	800711a <inc_lock+0x8a>
 8007116:	2300      	movs	r3, #0
 8007118:	e040      	b.n	800719c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	4922      	ldr	r1, [pc, #136]	; (80071a8 <inc_lock+0x118>)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	440b      	add	r3, r1
 8007126:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	491e      	ldr	r1, [pc, #120]	; (80071a8 <inc_lock+0x118>)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	011b      	lsls	r3, r3, #4
 8007132:	440b      	add	r3, r1
 8007134:	3304      	adds	r3, #4
 8007136:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	695a      	ldr	r2, [r3, #20]
 800713c:	491a      	ldr	r1, [pc, #104]	; (80071a8 <inc_lock+0x118>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	440b      	add	r3, r1
 8007144:	3308      	adds	r3, #8
 8007146:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007148:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <inc_lock+0x118>)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	4413      	add	r3, r2
 8007150:	330c      	adds	r3, #12
 8007152:	2200      	movs	r2, #0
 8007154:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d009      	beq.n	8007170 <inc_lock+0xe0>
 800715c:	4a12      	ldr	r2, [pc, #72]	; (80071a8 <inc_lock+0x118>)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	4413      	add	r3, r2
 8007164:	330c      	adds	r3, #12
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <inc_lock+0xe0>
 800716c:	2300      	movs	r3, #0
 800716e:	e015      	b.n	800719c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d108      	bne.n	8007188 <inc_lock+0xf8>
 8007176:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <inc_lock+0x118>)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	4413      	add	r3, r2
 800717e:	330c      	adds	r3, #12
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	3301      	adds	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	e001      	b.n	800718c <inc_lock+0xfc>
 8007188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800718c:	4906      	ldr	r1, [pc, #24]	; (80071a8 <inc_lock+0x118>)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	440b      	add	r3, r1
 8007194:	330c      	adds	r3, #12
 8007196:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	2000076c 	.word	0x2000076c

080071ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	607b      	str	r3, [r7, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d825      	bhi.n	800720c <dec_lock+0x60>
		n = Files[i].ctr;
 80071c0:	4a17      	ldr	r2, [pc, #92]	; (8007220 <dec_lock+0x74>)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	4413      	add	r3, r2
 80071c8:	330c      	adds	r3, #12
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80071ce:	89fb      	ldrh	r3, [r7, #14]
 80071d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071d4:	d101      	bne.n	80071da <dec_lock+0x2e>
 80071d6:	2300      	movs	r3, #0
 80071d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80071da:	89fb      	ldrh	r3, [r7, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <dec_lock+0x3a>
 80071e0:	89fb      	ldrh	r3, [r7, #14]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80071e6:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <dec_lock+0x74>)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	4413      	add	r3, r2
 80071ee:	330c      	adds	r3, #12
 80071f0:	89fa      	ldrh	r2, [r7, #14]
 80071f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80071f4:	89fb      	ldrh	r3, [r7, #14]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d105      	bne.n	8007206 <dec_lock+0x5a>
 80071fa:	4a09      	ldr	r2, [pc, #36]	; (8007220 <dec_lock+0x74>)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	4413      	add	r3, r2
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	737b      	strb	r3, [r7, #13]
 800720a:	e001      	b.n	8007210 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800720c:	2302      	movs	r3, #2
 800720e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007210:	7b7b      	ldrb	r3, [r7, #13]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	2000076c 	.word	0x2000076c

08007224 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	e010      	b.n	8007254 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007232:	4a0d      	ldr	r2, [pc, #52]	; (8007268 <clear_lock+0x44>)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	4413      	add	r3, r2
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	429a      	cmp	r2, r3
 8007240:	d105      	bne.n	800724e <clear_lock+0x2a>
 8007242:	4a09      	ldr	r2, [pc, #36]	; (8007268 <clear_lock+0x44>)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	4413      	add	r3, r2
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d9eb      	bls.n	8007232 <clear_lock+0xe>
	}
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	2000076c 	.word	0x2000076c

0800726c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	78db      	ldrb	r3, [r3, #3]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d034      	beq.n	80072ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	7858      	ldrb	r0, [r3, #1]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007290:	2301      	movs	r3, #1
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	f7ff fd40 	bl	8006d18 <disk_write>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800729e:	2301      	movs	r3, #1
 80072a0:	73fb      	strb	r3, [r7, #15]
 80072a2:	e022      	b.n	80072ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	1ad2      	subs	r2, r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d217      	bcs.n	80072ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	789b      	ldrb	r3, [r3, #2]
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	e010      	b.n	80072e4 <sync_window+0x78>
					wsect += fs->fsize;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4413      	add	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	7858      	ldrb	r0, [r3, #1]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072d6:	2301      	movs	r3, #1
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	f7ff fd1d 	bl	8006d18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d8eb      	bhi.n	80072c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	429a      	cmp	r2, r3
 800730a:	d01b      	beq.n	8007344 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ffad 	bl	800726c <sync_window>
 8007312:	4603      	mov	r3, r0
 8007314:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d113      	bne.n	8007344 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7858      	ldrb	r0, [r3, #1]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007326:	2301      	movs	r3, #1
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	f7ff fcd5 	bl	8006cd8 <disk_read>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007334:	f04f 33ff 	mov.w	r3, #4294967295
 8007338:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800733a:	2301      	movs	r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff ff87 	bl	800726c <sync_window>
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d158      	bne.n	800741a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b03      	cmp	r3, #3
 800736e:	d148      	bne.n	8007402 <sync_fs+0xb2>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	791b      	ldrb	r3, [r3, #4]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d144      	bne.n	8007402 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3330      	adds	r3, #48	; 0x30
 800737c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007380:	2100      	movs	r1, #0
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fda9 	bl	8006eda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3330      	adds	r3, #48	; 0x30
 800738c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007390:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff fd38 	bl	8006e0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3330      	adds	r3, #48	; 0x30
 800739e:	4921      	ldr	r1, [pc, #132]	; (8007424 <sync_fs+0xd4>)
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fd4d 	bl	8006e40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3330      	adds	r3, #48	; 0x30
 80073aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073ae:	491e      	ldr	r1, [pc, #120]	; (8007428 <sync_fs+0xd8>)
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fd45 	bl	8006e40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3330      	adds	r3, #48	; 0x30
 80073ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7ff fd3b 	bl	8006e40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3330      	adds	r3, #48	; 0x30
 80073ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f7ff fd31 	bl	8006e40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	7858      	ldrb	r0, [r3, #1]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f6:	2301      	movs	r3, #1
 80073f8:	f7ff fc8e 	bl	8006d18 <disk_write>
			fs->fsi_flag = 0;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2200      	movs	r2, #0
 8007408:	2100      	movs	r1, #0
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fca4 	bl	8006d58 <disk_ioctl>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <sync_fs+0xca>
 8007416:	2301      	movs	r3, #1
 8007418:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	41615252 	.word	0x41615252
 8007428:	61417272 	.word	0x61417272

0800742c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	3b02      	subs	r3, #2
 800743a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	3b02      	subs	r3, #2
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d301      	bcc.n	800744c <clust2sect+0x20>
 8007448:	2300      	movs	r3, #0
 800744a:	e008      	b.n	800745e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	895b      	ldrh	r3, [r3, #10]
 8007450:	461a      	mov	r2, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	fb03 f202 	mul.w	r2, r3, r2
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	4413      	add	r3, r2
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d904      	bls.n	800748a <get_fat+0x20>
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d302      	bcc.n	8007490 <get_fat+0x26>
		val = 1;	/* Internal error */
 800748a:	2301      	movs	r3, #1
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	e08f      	b.n	80075b0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007490:	f04f 33ff 	mov.w	r3, #4294967295
 8007494:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b03      	cmp	r3, #3
 800749c:	d062      	beq.n	8007564 <get_fat+0xfa>
 800749e:	2b03      	cmp	r3, #3
 80074a0:	dc7c      	bgt.n	800759c <get_fat+0x132>
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d002      	beq.n	80074ac <get_fat+0x42>
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d042      	beq.n	8007530 <get_fat+0xc6>
 80074aa:	e077      	b.n	800759c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	6a1a      	ldr	r2, [r3, #32]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	0a5b      	lsrs	r3, r3, #9
 80074c2:	4413      	add	r3, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	6938      	ldr	r0, [r7, #16]
 80074c8:	f7ff ff14 	bl	80072f4 <move_window>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d167      	bne.n	80075a2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	60fa      	str	r2, [r7, #12]
 80074d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4413      	add	r3, r2
 80074e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6a1a      	ldr	r2, [r3, #32]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	0a5b      	lsrs	r3, r3, #9
 80074ee:	4413      	add	r3, r2
 80074f0:	4619      	mov	r1, r3
 80074f2:	6938      	ldr	r0, [r7, #16]
 80074f4:	f7ff fefe 	bl	80072f4 <move_window>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d153      	bne.n	80075a6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4413      	add	r3, r2
 8007508:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	461a      	mov	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	4313      	orrs	r3, r2
 8007514:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <get_fat+0xbc>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	091b      	lsrs	r3, r3, #4
 8007524:	e002      	b.n	800752c <get_fat+0xc2>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800752c:	617b      	str	r3, [r7, #20]
			break;
 800752e:	e03f      	b.n	80075b0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	6a1a      	ldr	r2, [r3, #32]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	0a1b      	lsrs	r3, r3, #8
 8007538:	4413      	add	r3, r2
 800753a:	4619      	mov	r1, r3
 800753c:	6938      	ldr	r0, [r7, #16]
 800753e:	f7ff fed9 	bl	80072f4 <move_window>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d130      	bne.n	80075aa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007556:	4413      	add	r3, r2
 8007558:	4618      	mov	r0, r3
 800755a:	f7ff fc1b 	bl	8006d94 <ld_word>
 800755e:	4603      	mov	r3, r0
 8007560:	617b      	str	r3, [r7, #20]
			break;
 8007562:	e025      	b.n	80075b0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	09db      	lsrs	r3, r3, #7
 800756c:	4413      	add	r3, r2
 800756e:	4619      	mov	r1, r3
 8007570:	6938      	ldr	r0, [r7, #16]
 8007572:	f7ff febf 	bl	80072f4 <move_window>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d118      	bne.n	80075ae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800758a:	4413      	add	r3, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fc19 	bl	8006dc4 <ld_dword>
 8007592:	4603      	mov	r3, r0
 8007594:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007598:	617b      	str	r3, [r7, #20]
			break;
 800759a:	e009      	b.n	80075b0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800759c:	2301      	movs	r3, #1
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	e006      	b.n	80075b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075a2:	bf00      	nop
 80075a4:	e004      	b.n	80075b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075a6:	bf00      	nop
 80075a8:	e002      	b.n	80075b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075aa:	bf00      	nop
 80075ac:	e000      	b.n	80075b0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075ae:	bf00      	nop
		}
	}

	return val;
 80075b0:	697b      	ldr	r3, [r7, #20]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80075ba:	b590      	push	{r4, r7, lr}
 80075bc:	b089      	sub	sp, #36	; 0x24
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80075c6:	2302      	movs	r3, #2
 80075c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	f240 80d2 	bls.w	8007776 <put_fat+0x1bc>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	429a      	cmp	r2, r3
 80075da:	f080 80cc 	bcs.w	8007776 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	f000 8096 	beq.w	8007714 <put_fat+0x15a>
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	f300 80cd 	bgt.w	8007788 <put_fat+0x1ce>
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d002      	beq.n	80075f8 <put_fat+0x3e>
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d06e      	beq.n	80076d4 <put_fat+0x11a>
 80075f6:	e0c7      	b.n	8007788 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	61bb      	str	r3, [r7, #24]
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	4413      	add	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1a      	ldr	r2, [r3, #32]
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	0a5b      	lsrs	r3, r3, #9
 800760e:	4413      	add	r3, r2
 8007610:	4619      	mov	r1, r3
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7ff fe6e 	bl	80072f4 <move_window>
 8007618:	4603      	mov	r3, r0
 800761a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800761c:	7ffb      	ldrb	r3, [r7, #31]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f040 80ab 	bne.w	800777a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	1c59      	adds	r1, r3, #1
 800762e:	61b9      	str	r1, [r7, #24]
 8007630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007634:	4413      	add	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00d      	beq.n	800765e <put_fat+0xa4>
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b25b      	sxtb	r3, r3
 8007648:	f003 030f 	and.w	r3, r3, #15
 800764c:	b25a      	sxtb	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	b25b      	sxtb	r3, r3
 8007656:	4313      	orrs	r3, r2
 8007658:	b25b      	sxtb	r3, r3
 800765a:	b2db      	uxtb	r3, r3
 800765c:	e001      	b.n	8007662 <put_fat+0xa8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	b2db      	uxtb	r3, r3
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a1a      	ldr	r2, [r3, #32]
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	0a5b      	lsrs	r3, r3, #9
 8007674:	4413      	add	r3, r2
 8007676:	4619      	mov	r1, r3
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f7ff fe3b 	bl	80072f4 <move_window>
 800767e:	4603      	mov	r3, r0
 8007680:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007682:	7ffb      	ldrb	r3, [r7, #31]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d17a      	bne.n	800777e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007694:	4413      	add	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <put_fat+0xf0>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	091b      	lsrs	r3, r3, #4
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	e00e      	b.n	80076c8 <put_fat+0x10e>
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	b25b      	sxtb	r3, r3
 80076b0:	f023 030f 	bic.w	r3, r3, #15
 80076b4:	b25a      	sxtb	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	0a1b      	lsrs	r3, r3, #8
 80076ba:	b25b      	sxtb	r3, r3
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	b25b      	sxtb	r3, r3
 80076c2:	4313      	orrs	r3, r2
 80076c4:	b25b      	sxtb	r3, r3
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	70da      	strb	r2, [r3, #3]
			break;
 80076d2:	e059      	b.n	8007788 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a1a      	ldr	r2, [r3, #32]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	4413      	add	r3, r2
 80076de:	4619      	mov	r1, r3
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7ff fe07 	bl	80072f4 <move_window>
 80076e6:	4603      	mov	r3, r0
 80076e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076ea:	7ffb      	ldrb	r3, [r7, #31]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d148      	bne.n	8007782 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80076fe:	4413      	add	r3, r2
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	b292      	uxth	r2, r2
 8007704:	4611      	mov	r1, r2
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff fb7f 	bl	8006e0a <st_word>
			fs->wflag = 1;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	70da      	strb	r2, [r3, #3]
			break;
 8007712:	e039      	b.n	8007788 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a1a      	ldr	r2, [r3, #32]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	09db      	lsrs	r3, r3, #7
 800771c:	4413      	add	r3, r2
 800771e:	4619      	mov	r1, r3
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff fde7 	bl	80072f4 <move_window>
 8007726:	4603      	mov	r3, r0
 8007728:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800772a:	7ffb      	ldrb	r3, [r7, #31]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d12a      	bne.n	8007786 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007744:	4413      	add	r3, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fb3c 	bl	8006dc4 <ld_dword>
 800774c:	4603      	mov	r3, r0
 800774e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007752:	4323      	orrs	r3, r4
 8007754:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007764:	4413      	add	r3, r2
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fb69 	bl	8006e40 <st_dword>
			fs->wflag = 1;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	70da      	strb	r2, [r3, #3]
			break;
 8007774:	e008      	b.n	8007788 <put_fat+0x1ce>
		}
	}
 8007776:	bf00      	nop
 8007778:	e006      	b.n	8007788 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800777a:	bf00      	nop
 800777c:	e004      	b.n	8007788 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800777e:	bf00      	nop
 8007780:	e002      	b.n	8007788 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007782:	bf00      	nop
 8007784:	e000      	b.n	8007788 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007786:	bf00      	nop
	return res;
 8007788:	7ffb      	ldrb	r3, [r7, #31]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3724      	adds	r7, #36	; 0x24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd90      	pop	{r4, r7, pc}

08007792 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b088      	sub	sp, #32
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d904      	bls.n	80077b8 <remove_chain+0x26>
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d301      	bcc.n	80077bc <remove_chain+0x2a>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e04b      	b.n	8007854 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00c      	beq.n	80077dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80077c2:	f04f 32ff 	mov.w	r2, #4294967295
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	69b8      	ldr	r0, [r7, #24]
 80077ca:	f7ff fef6 	bl	80075ba <put_fat>
 80077ce:	4603      	mov	r3, r0
 80077d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80077d2:	7ffb      	ldrb	r3, [r7, #31]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <remove_chain+0x4a>
 80077d8:	7ffb      	ldrb	r3, [r7, #31]
 80077da:	e03b      	b.n	8007854 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7ff fe43 	bl	800746a <get_fat>
 80077e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d031      	beq.n	8007850 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <remove_chain+0x64>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e02e      	b.n	8007854 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fc:	d101      	bne.n	8007802 <remove_chain+0x70>
 80077fe:	2301      	movs	r3, #1
 8007800:	e028      	b.n	8007854 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007802:	2200      	movs	r2, #0
 8007804:	68b9      	ldr	r1, [r7, #8]
 8007806:	69b8      	ldr	r0, [r7, #24]
 8007808:	f7ff fed7 	bl	80075ba <put_fat>
 800780c:	4603      	mov	r3, r0
 800780e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007810:	7ffb      	ldrb	r3, [r7, #31]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <remove_chain+0x88>
 8007816:	7ffb      	ldrb	r3, [r7, #31]
 8007818:	e01c      	b.n	8007854 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	691a      	ldr	r2, [r3, #16]
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	3b02      	subs	r3, #2
 8007824:	429a      	cmp	r2, r3
 8007826:	d20b      	bcs.n	8007840 <remove_chain+0xae>
			fs->free_clst++;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	791b      	ldrb	r3, [r3, #4]
 8007836:	f043 0301 	orr.w	r3, r3, #1
 800783a:	b2da      	uxtb	r2, r3
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	429a      	cmp	r2, r3
 800784c:	d3c6      	bcc.n	80077dc <remove_chain+0x4a>
 800784e:	e000      	b.n	8007852 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007850:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3720      	adds	r7, #32
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b088      	sub	sp, #32
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10d      	bne.n	800788e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d004      	beq.n	8007888 <create_chain+0x2c>
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	429a      	cmp	r2, r3
 8007886:	d31b      	bcc.n	80078c0 <create_chain+0x64>
 8007888:	2301      	movs	r3, #1
 800788a:	61bb      	str	r3, [r7, #24]
 800788c:	e018      	b.n	80078c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff fdea 	bl	800746a <get_fat>
 8007896:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d801      	bhi.n	80078a2 <create_chain+0x46>
 800789e:	2301      	movs	r3, #1
 80078a0:	e070      	b.n	8007984 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d101      	bne.n	80078ae <create_chain+0x52>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	e06a      	b.n	8007984 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d201      	bcs.n	80078bc <create_chain+0x60>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	e063      	b.n	8007984 <create_chain+0x128>
		scl = clst;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	3301      	adds	r3, #1
 80078c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d307      	bcc.n	80078e4 <create_chain+0x88>
				ncl = 2;
 80078d4:	2302      	movs	r3, #2
 80078d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80078d8:	69fa      	ldr	r2, [r7, #28]
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d901      	bls.n	80078e4 <create_chain+0x88>
 80078e0:	2300      	movs	r3, #0
 80078e2:	e04f      	b.n	8007984 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80078e4:	69f9      	ldr	r1, [r7, #28]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff fdbf 	bl	800746a <get_fat>
 80078ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00e      	beq.n	8007912 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d003      	beq.n	8007902 <create_chain+0xa6>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007900:	d101      	bne.n	8007906 <create_chain+0xaa>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	e03e      	b.n	8007984 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	429a      	cmp	r2, r3
 800790c:	d1da      	bne.n	80078c4 <create_chain+0x68>
 800790e:	2300      	movs	r3, #0
 8007910:	e038      	b.n	8007984 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007912:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007914:	f04f 32ff 	mov.w	r2, #4294967295
 8007918:	69f9      	ldr	r1, [r7, #28]
 800791a:	6938      	ldr	r0, [r7, #16]
 800791c:	f7ff fe4d 	bl	80075ba <put_fat>
 8007920:	4603      	mov	r3, r0
 8007922:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <create_chain+0xe2>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d006      	beq.n	800793e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6938      	ldr	r0, [r7, #16]
 8007936:	f7ff fe40 	bl	80075ba <put_fat>
 800793a:	4603      	mov	r3, r0
 800793c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d116      	bne.n	8007972 <create_chain+0x116>
		fs->last_clst = ncl;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	691a      	ldr	r2, [r3, #16]
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	3b02      	subs	r3, #2
 8007954:	429a      	cmp	r2, r3
 8007956:	d804      	bhi.n	8007962 <create_chain+0x106>
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	1e5a      	subs	r2, r3, #1
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	791b      	ldrb	r3, [r3, #4]
 8007966:	f043 0301 	orr.w	r3, r3, #1
 800796a:	b2da      	uxtb	r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	711a      	strb	r2, [r3, #4]
 8007970:	e007      	b.n	8007982 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d102      	bne.n	800797e <create_chain+0x122>
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	e000      	b.n	8007980 <create_chain+0x124>
 800797e:	2301      	movs	r3, #1
 8007980:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007982:	69fb      	ldr	r3, [r7, #28]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	3304      	adds	r3, #4
 80079a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	0a5b      	lsrs	r3, r3, #9
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	8952      	ldrh	r2, [r2, #10]
 80079ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80079b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1d1a      	adds	r2, r3, #4
 80079b6:	613a      	str	r2, [r7, #16]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <clmt_clust+0x3a>
 80079c2:	2300      	movs	r3, #0
 80079c4:	e010      	b.n	80079e8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d307      	bcc.n	80079de <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	3304      	adds	r3, #4
 80079da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079dc:	e7e9      	b.n	80079b2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80079de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	4413      	add	r3, r2
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a0a:	d204      	bcs.n	8007a16 <dir_sdi+0x22>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	f003 031f 	and.w	r3, r3, #31
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007a16:	2302      	movs	r3, #2
 8007a18:	e063      	b.n	8007ae2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d106      	bne.n	8007a3a <dir_sdi+0x46>
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d902      	bls.n	8007a3a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10c      	bne.n	8007a5a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	8912      	ldrh	r2, [r2, #8]
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d301      	bcc.n	8007a50 <dir_sdi+0x5c>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e048      	b.n	8007ae2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	61da      	str	r2, [r3, #28]
 8007a58:	e029      	b.n	8007aae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	895b      	ldrh	r3, [r3, #10]
 8007a5e:	025b      	lsls	r3, r3, #9
 8007a60:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a62:	e019      	b.n	8007a98 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6979      	ldr	r1, [r7, #20]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7ff fcfe 	bl	800746a <get_fat>
 8007a6e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a76:	d101      	bne.n	8007a7c <dir_sdi+0x88>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e032      	b.n	8007ae2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d904      	bls.n	8007a8c <dir_sdi+0x98>
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d301      	bcc.n	8007a90 <dir_sdi+0x9c>
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e028      	b.n	8007ae2 <dir_sdi+0xee>
			ofs -= csz;
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d2e1      	bcs.n	8007a64 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007aa0:	6979      	ldr	r1, [r7, #20]
 8007aa2:	6938      	ldr	r0, [r7, #16]
 8007aa4:	f7ff fcc2 	bl	800742c <clust2sect>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <dir_sdi+0xcc>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e010      	b.n	8007ae2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	69da      	ldr	r2, [r3, #28]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	0a5b      	lsrs	r3, r3, #9
 8007ac8:	441a      	add	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ada:	441a      	add	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	3320      	adds	r3, #32
 8007b00:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <dir_next+0x28>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b10:	d301      	bcc.n	8007b16 <dir_next+0x2c>
 8007b12:	2304      	movs	r3, #4
 8007b14:	e0aa      	b.n	8007c6c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 8098 	bne.w	8007c52 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	095b      	lsrs	r3, r3, #5
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	8912      	ldrh	r2, [r2, #8]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	f0c0 8088 	bcc.w	8007c52 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	61da      	str	r2, [r3, #28]
 8007b48:	2304      	movs	r3, #4
 8007b4a:	e08f      	b.n	8007c6c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	0a5b      	lsrs	r3, r3, #9
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	8952      	ldrh	r2, [r2, #10]
 8007b54:	3a01      	subs	r2, #1
 8007b56:	4013      	ands	r3, r2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d17a      	bne.n	8007c52 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f7ff fc80 	bl	800746a <get_fat>
 8007b6a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d801      	bhi.n	8007b76 <dir_next+0x8c>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e07a      	b.n	8007c6c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d101      	bne.n	8007b82 <dir_next+0x98>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e074      	b.n	8007c6c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d358      	bcc.n	8007c3e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d104      	bne.n	8007b9c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	61da      	str	r2, [r3, #28]
 8007b98:	2304      	movs	r3, #4
 8007b9a:	e067      	b.n	8007c6c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	f7ff fe59 	bl	800785c <create_chain>
 8007baa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <dir_next+0xcc>
 8007bb2:	2307      	movs	r3, #7
 8007bb4:	e05a      	b.n	8007c6c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <dir_next+0xd6>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e055      	b.n	8007c6c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc6:	d101      	bne.n	8007bcc <dir_next+0xe2>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e04f      	b.n	8007c6c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff fb4d 	bl	800726c <sync_window>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <dir_next+0xf2>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e047      	b.n	8007c6c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3330      	adds	r3, #48	; 0x30
 8007be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff f977 	bl	8006eda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007bec:	2300      	movs	r3, #0
 8007bee:	613b      	str	r3, [r7, #16]
 8007bf0:	6979      	ldr	r1, [r7, #20]
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff fc1a 	bl	800742c <clust2sect>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8007bfe:	e012      	b.n	8007c26 <dir_next+0x13c>
						fs->wflag = 1;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff fb30 	bl	800726c <sync_window>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <dir_next+0x12c>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e02a      	b.n	8007c6c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	613b      	str	r3, [r7, #16]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	895b      	ldrh	r3, [r3, #10]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d3e6      	bcc.n	8007c00 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	1ad2      	subs	r2, r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007c44:	6979      	ldr	r1, [r7, #20]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f7ff fbf0 	bl	800742c <clust2sect>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c64:	441a      	add	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007c84:	2100      	movs	r1, #0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7ff feb4 	bl	80079f4 <dir_sdi>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d12b      	bne.n	8007cee <dir_alloc+0x7a>
		n = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff fb27 	bl	80072f4 <move_window>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d11d      	bne.n	8007cec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2be5      	cmp	r3, #229	; 0xe5
 8007cb8:	d004      	beq.n	8007cc4 <dir_alloc+0x50>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d107      	bne.n	8007cd4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	613b      	str	r3, [r7, #16]
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d102      	bne.n	8007cd8 <dir_alloc+0x64>
 8007cd2:	e00c      	b.n	8007cee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007cd8:	2101      	movs	r1, #1
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff ff05 	bl	8007aea <dir_next>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0d7      	beq.n	8007c9a <dir_alloc+0x26>
 8007cea:	e000      	b.n	8007cee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007cec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d101      	bne.n	8007cf8 <dir_alloc+0x84>
 8007cf4:	2307      	movs	r3, #7
 8007cf6:	75fb      	strb	r3, [r7, #23]
	return res;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	331a      	adds	r3, #26
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff f83f 	bl	8006d94 <ld_word>
 8007d16:	4603      	mov	r3, r0
 8007d18:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d109      	bne.n	8007d36 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	3314      	adds	r3, #20
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff f834 	bl	8006d94 <ld_word>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	041b      	lsls	r3, r3, #16
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007d36:	68fb      	ldr	r3, [r7, #12]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	331a      	adds	r3, #26
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	b292      	uxth	r2, r2
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff f857 	bl	8006e0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d109      	bne.n	8007d78 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f103 0214 	add.w	r2, r3, #20
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	0c1b      	lsrs	r3, r3, #16
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f7ff f849 	bl	8006e0a <st_word>
	}
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d8e:	2100      	movs	r1, #0
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fe2f 	bl	80079f4 <dir_sdi>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <dir_find+0x24>
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	e03e      	b.n	8007e22 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	4619      	mov	r1, r3
 8007daa:	6938      	ldr	r0, [r7, #16]
 8007dac:	f7ff faa2 	bl	80072f4 <move_window>
 8007db0:	4603      	mov	r3, r0
 8007db2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d12f      	bne.n	8007e1a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <dir_find+0x4e>
 8007dc8:	2304      	movs	r3, #4
 8007dca:	75fb      	strb	r3, [r7, #23]
 8007dcc:	e028      	b.n	8007e20 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	330b      	adds	r3, #11
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	330b      	adds	r3, #11
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <dir_find+0x86>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a18      	ldr	r0, [r3, #32]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3324      	adds	r3, #36	; 0x24
 8007df8:	220b      	movs	r2, #11
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	f7ff f888 	bl	8006f10 <mem_cmp>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007e06:	2100      	movs	r1, #0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fe6e 	bl	8007aea <dir_next>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007e12:	7dfb      	ldrb	r3, [r7, #23]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0c5      	beq.n	8007da4 <dir_find+0x24>
 8007e18:	e002      	b.n	8007e20 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007e1a:	bf00      	nop
 8007e1c:	e000      	b.n	8007e20 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e1e:	bf00      	nop

	return res;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007e38:	2101      	movs	r1, #1
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff ff1a 	bl	8007c74 <dir_alloc>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d11c      	bne.n	8007e84 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	68b8      	ldr	r0, [r7, #8]
 8007e52:	f7ff fa4f 	bl	80072f4 <move_window>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d111      	bne.n	8007e84 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	2220      	movs	r2, #32
 8007e66:	2100      	movs	r1, #0
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff f836 	bl	8006eda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a18      	ldr	r0, [r3, #32]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3324      	adds	r3, #36	; 0x24
 8007e76:	220b      	movs	r2, #11
 8007e78:	4619      	mov	r1, r3
 8007e7a:	f7ff f80d 	bl	8006e98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2201      	movs	r2, #1
 8007e82:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3324      	adds	r3, #36	; 0x24
 8007ea4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007ea6:	220b      	movs	r2, #11
 8007ea8:	2120      	movs	r1, #32
 8007eaa:	68b8      	ldr	r0, [r7, #8]
 8007eac:	f7ff f815 	bl	8006eda <mem_set>
	si = i = 0; ni = 8;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	613b      	str	r3, [r7, #16]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	61fb      	str	r3, [r7, #28]
 8007eb8:	2308      	movs	r3, #8
 8007eba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	61fa      	str	r2, [r7, #28]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007eca:	7efb      	ldrb	r3, [r7, #27]
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d94e      	bls.n	8007f6e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007ed0:	7efb      	ldrb	r3, [r7, #27]
 8007ed2:	2b2f      	cmp	r3, #47	; 0x2f
 8007ed4:	d006      	beq.n	8007ee4 <create_name+0x54>
 8007ed6:	7efb      	ldrb	r3, [r7, #27]
 8007ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8007eda:	d110      	bne.n	8007efe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007edc:	e002      	b.n	8007ee4 <create_name+0x54>
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	61fb      	str	r3, [r7, #28]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	4413      	add	r3, r2
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b2f      	cmp	r3, #47	; 0x2f
 8007eee:	d0f6      	beq.n	8007ede <create_name+0x4e>
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8007efa:	d0f0      	beq.n	8007ede <create_name+0x4e>
			break;
 8007efc:	e038      	b.n	8007f70 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007efe:	7efb      	ldrb	r3, [r7, #27]
 8007f00:	2b2e      	cmp	r3, #46	; 0x2e
 8007f02:	d003      	beq.n	8007f0c <create_name+0x7c>
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d30c      	bcc.n	8007f26 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b0b      	cmp	r3, #11
 8007f10:	d002      	beq.n	8007f18 <create_name+0x88>
 8007f12:	7efb      	ldrb	r3, [r7, #27]
 8007f14:	2b2e      	cmp	r3, #46	; 0x2e
 8007f16:	d001      	beq.n	8007f1c <create_name+0x8c>
 8007f18:	2306      	movs	r3, #6
 8007f1a:	e044      	b.n	8007fa6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	230b      	movs	r3, #11
 8007f22:	617b      	str	r3, [r7, #20]
			continue;
 8007f24:	e022      	b.n	8007f6c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007f26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da04      	bge.n	8007f38 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007f2e:	7efb      	ldrb	r3, [r7, #27]
 8007f30:	3b80      	subs	r3, #128	; 0x80
 8007f32:	4a1f      	ldr	r2, [pc, #124]	; (8007fb0 <create_name+0x120>)
 8007f34:	5cd3      	ldrb	r3, [r2, r3]
 8007f36:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007f38:	7efb      	ldrb	r3, [r7, #27]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	481d      	ldr	r0, [pc, #116]	; (8007fb4 <create_name+0x124>)
 8007f3e:	f7ff f80e 	bl	8006f5e <chk_chr>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <create_name+0xbc>
 8007f48:	2306      	movs	r3, #6
 8007f4a:	e02c      	b.n	8007fa6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007f4c:	7efb      	ldrb	r3, [r7, #27]
 8007f4e:	2b60      	cmp	r3, #96	; 0x60
 8007f50:	d905      	bls.n	8007f5e <create_name+0xce>
 8007f52:	7efb      	ldrb	r3, [r7, #27]
 8007f54:	2b7a      	cmp	r3, #122	; 0x7a
 8007f56:	d802      	bhi.n	8007f5e <create_name+0xce>
 8007f58:	7efb      	ldrb	r3, [r7, #27]
 8007f5a:	3b20      	subs	r3, #32
 8007f5c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	613a      	str	r2, [r7, #16]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4413      	add	r3, r2
 8007f68:	7efa      	ldrb	r2, [r7, #27]
 8007f6a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007f6c:	e7a6      	b.n	8007ebc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f6e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	441a      	add	r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <create_name+0xf4>
 8007f80:	2306      	movs	r3, #6
 8007f82:	e010      	b.n	8007fa6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2be5      	cmp	r3, #229	; 0xe5
 8007f8a:	d102      	bne.n	8007f92 <create_name+0x102>
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2205      	movs	r2, #5
 8007f90:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007f92:	7efb      	ldrb	r3, [r7, #27]
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d801      	bhi.n	8007f9c <create_name+0x10c>
 8007f98:	2204      	movs	r2, #4
 8007f9a:	e000      	b.n	8007f9e <create_name+0x10e>
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	330b      	adds	r3, #11
 8007fa2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007fa4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3720      	adds	r7, #32
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	0800ac10 	.word	0x0800ac10
 8007fb4:	0800ab98 	.word	0x0800ab98

08007fb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007fcc:	e002      	b.n	8007fd4 <follow_path+0x1c>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b2f      	cmp	r3, #47	; 0x2f
 8007fda:	d0f8      	beq.n	8007fce <follow_path+0x16>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b5c      	cmp	r3, #92	; 0x5c
 8007fe2:	d0f4      	beq.n	8007fce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b1f      	cmp	r3, #31
 8007ff0:	d80a      	bhi.n	8008008 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2280      	movs	r2, #128	; 0x80
 8007ff6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff fcf9 	bl	80079f4 <dir_sdi>
 8008002:	4603      	mov	r3, r0
 8008004:	75fb      	strb	r3, [r7, #23]
 8008006:	e043      	b.n	8008090 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008008:	463b      	mov	r3, r7
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff ff3f 	bl	8007e90 <create_name>
 8008012:	4603      	mov	r3, r0
 8008014:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d134      	bne.n	8008086 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff feaf 	bl	8007d80 <dir_find>
 8008022:	4603      	mov	r3, r0
 8008024:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800802c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	2b04      	cmp	r3, #4
 8008038:	d127      	bne.n	800808a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800803a:	7afb      	ldrb	r3, [r7, #11]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	d122      	bne.n	800808a <follow_path+0xd2>
 8008044:	2305      	movs	r3, #5
 8008046:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008048:	e01f      	b.n	800808a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800804a:	7afb      	ldrb	r3, [r7, #11]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d11c      	bne.n	800808e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	799b      	ldrb	r3, [r3, #6]
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b00      	cmp	r3, #0
 800805e:	d102      	bne.n	8008066 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008060:	2305      	movs	r3, #5
 8008062:	75fb      	strb	r3, [r7, #23]
 8008064:	e014      	b.n	8008090 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008074:	4413      	add	r3, r2
 8008076:	4619      	mov	r1, r3
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f7ff fe42 	bl	8007d02 <ld_clust>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008084:	e7c0      	b.n	8008008 <follow_path+0x50>
			if (res != FR_OK) break;
 8008086:	bf00      	nop
 8008088:	e002      	b.n	8008090 <follow_path+0xd8>
				break;
 800808a:	bf00      	nop
 800808c:	e000      	b.n	8008090 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800808e:	bf00      	nop
			}
		}
	}

	return res;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800809a:	b480      	push	{r7}
 800809c:	b087      	sub	sp, #28
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80080a2:	f04f 33ff 	mov.w	r3, #4294967295
 80080a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d031      	beq.n	8008114 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	e002      	b.n	80080be <get_ldnumber+0x24>
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	3301      	adds	r3, #1
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d903      	bls.n	80080ce <get_ldnumber+0x34>
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b3a      	cmp	r3, #58	; 0x3a
 80080cc:	d1f4      	bne.n	80080b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b3a      	cmp	r3, #58	; 0x3a
 80080d4:	d11c      	bne.n	8008110 <get_ldnumber+0x76>
			tp = *path;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	1c5a      	adds	r2, r3, #1
 80080e0:	60fa      	str	r2, [r7, #12]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	3b30      	subs	r3, #48	; 0x30
 80080e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d80e      	bhi.n	800810c <get_ldnumber+0x72>
 80080ee:	68fa      	ldr	r2, [r7, #12]
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d10a      	bne.n	800810c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d107      	bne.n	800810c <get_ldnumber+0x72>
					vol = (int)i;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	3301      	adds	r3, #1
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	e002      	b.n	8008116 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008114:	693b      	ldr	r3, [r7, #16]
}
 8008116:	4618      	mov	r0, r3
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	70da      	strb	r2, [r3, #3]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f04f 32ff 	mov.w	r2, #4294967295
 800813a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff f8d8 	bl	80072f4 <move_window>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <check_fs+0x2a>
 800814a:	2304      	movs	r3, #4
 800814c:	e038      	b.n	80081c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3330      	adds	r3, #48	; 0x30
 8008152:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008156:	4618      	mov	r0, r3
 8008158:	f7fe fe1c 	bl	8006d94 <ld_word>
 800815c:	4603      	mov	r3, r0
 800815e:	461a      	mov	r2, r3
 8008160:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008164:	429a      	cmp	r2, r3
 8008166:	d001      	beq.n	800816c <check_fs+0x48>
 8008168:	2303      	movs	r3, #3
 800816a:	e029      	b.n	80081c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008172:	2be9      	cmp	r3, #233	; 0xe9
 8008174:	d009      	beq.n	800818a <check_fs+0x66>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800817c:	2beb      	cmp	r3, #235	; 0xeb
 800817e:	d11e      	bne.n	80081be <check_fs+0x9a>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008186:	2b90      	cmp	r3, #144	; 0x90
 8008188:	d119      	bne.n	80081be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3330      	adds	r3, #48	; 0x30
 800818e:	3336      	adds	r3, #54	; 0x36
 8008190:	4618      	mov	r0, r3
 8008192:	f7fe fe17 	bl	8006dc4 <ld_dword>
 8008196:	4603      	mov	r3, r0
 8008198:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800819c:	4a0a      	ldr	r2, [pc, #40]	; (80081c8 <check_fs+0xa4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d101      	bne.n	80081a6 <check_fs+0x82>
 80081a2:	2300      	movs	r3, #0
 80081a4:	e00c      	b.n	80081c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3330      	adds	r3, #48	; 0x30
 80081aa:	3352      	adds	r3, #82	; 0x52
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe fe09 	bl	8006dc4 <ld_dword>
 80081b2:	4603      	mov	r3, r0
 80081b4:	4a05      	ldr	r2, [pc, #20]	; (80081cc <check_fs+0xa8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d101      	bne.n	80081be <check_fs+0x9a>
 80081ba:	2300      	movs	r3, #0
 80081bc:	e000      	b.n	80081c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80081be:	2302      	movs	r3, #2
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	00544146 	.word	0x00544146
 80081cc:	33544146 	.word	0x33544146

080081d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b096      	sub	sp, #88	; 0x58
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f7ff ff58 	bl	800809a <get_ldnumber>
 80081ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80081ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	da01      	bge.n	80081f6 <find_volume+0x26>
 80081f2:	230b      	movs	r3, #11
 80081f4:	e22d      	b.n	8008652 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80081f6:	4aa1      	ldr	r2, [pc, #644]	; (800847c <find_volume+0x2ac>)
 80081f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <find_volume+0x3a>
 8008206:	230c      	movs	r3, #12
 8008208:	e223      	b.n	8008652 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800820e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	f023 0301 	bic.w	r3, r3, #1
 8008216:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01a      	beq.n	8008256 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	785b      	ldrb	r3, [r3, #1]
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fd17 	bl	8006c58 <disk_status>
 800822a:	4603      	mov	r3, r0
 800822c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008230:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008234:	f003 0301 	and.w	r3, r3, #1
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10c      	bne.n	8008256 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <find_volume+0x82>
 8008242:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800824e:	230a      	movs	r3, #10
 8008250:	e1ff      	b.n	8008652 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008252:	2300      	movs	r3, #0
 8008254:	e1fd      	b.n	8008652 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	2200      	movs	r2, #0
 800825a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800825c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825e:	b2da      	uxtb	r2, r3
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fd0f 	bl	8006c8c <disk_initialize>
 800826e:	4603      	mov	r3, r0
 8008270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008274:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008280:	2303      	movs	r3, #3
 8008282:	e1e6      	b.n	8008652 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <find_volume+0xca>
 800828a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008296:	230a      	movs	r3, #10
 8008298:	e1db      	b.n	8008652 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800829e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082a2:	f7ff ff3f 	bl	8008124 <check_fs>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80082ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d149      	bne.n	8008348 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082b4:	2300      	movs	r3, #0
 80082b6:	643b      	str	r3, [r7, #64]	; 0x40
 80082b8:	e01e      	b.n	80082f8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80082c8:	4413      	add	r3, r2
 80082ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	3304      	adds	r3, #4
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d006      	beq.n	80082e4 <find_volume+0x114>
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	3308      	adds	r3, #8
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fd72 	bl	8006dc4 <ld_dword>
 80082e0:	4602      	mov	r2, r0
 80082e2:	e000      	b.n	80082e6 <find_volume+0x116>
 80082e4:	2200      	movs	r2, #0
 80082e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	3358      	adds	r3, #88	; 0x58
 80082ec:	443b      	add	r3, r7
 80082ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f4:	3301      	adds	r3, #1
 80082f6:	643b      	str	r3, [r7, #64]	; 0x40
 80082f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d9dd      	bls.n	80082ba <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80082fe:	2300      	movs	r3, #0
 8008300:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <find_volume+0x13e>
 8008308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800830a:	3b01      	subs	r3, #1
 800830c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800830e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	3358      	adds	r3, #88	; 0x58
 8008314:	443b      	add	r3, r7
 8008316:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800831a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800831c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <find_volume+0x15e>
 8008322:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008324:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008326:	f7ff fefd 	bl	8008124 <check_fs>
 800832a:	4603      	mov	r3, r0
 800832c:	e000      	b.n	8008330 <find_volume+0x160>
 800832e:	2303      	movs	r3, #3
 8008330:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008338:	2b01      	cmp	r3, #1
 800833a:	d905      	bls.n	8008348 <find_volume+0x178>
 800833c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833e:	3301      	adds	r3, #1
 8008340:	643b      	str	r3, [r7, #64]	; 0x40
 8008342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008344:	2b03      	cmp	r3, #3
 8008346:	d9e2      	bls.n	800830e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800834c:	2b04      	cmp	r3, #4
 800834e:	d101      	bne.n	8008354 <find_volume+0x184>
 8008350:	2301      	movs	r3, #1
 8008352:	e17e      	b.n	8008652 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008358:	2b01      	cmp	r3, #1
 800835a:	d901      	bls.n	8008360 <find_volume+0x190>
 800835c:	230d      	movs	r3, #13
 800835e:	e178      	b.n	8008652 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	3330      	adds	r3, #48	; 0x30
 8008364:	330b      	adds	r3, #11
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fd14 	bl	8006d94 <ld_word>
 800836c:	4603      	mov	r3, r0
 800836e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008372:	d001      	beq.n	8008378 <find_volume+0x1a8>
 8008374:	230d      	movs	r3, #13
 8008376:	e16c      	b.n	8008652 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	3330      	adds	r3, #48	; 0x30
 800837c:	3316      	adds	r3, #22
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe fd08 	bl	8006d94 <ld_word>
 8008384:	4603      	mov	r3, r0
 8008386:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <find_volume+0x1cc>
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	3330      	adds	r3, #48	; 0x30
 8008392:	3324      	adds	r3, #36	; 0x24
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe fd15 	bl	8006dc4 <ld_dword>
 800839a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800839c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083a0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	789b      	ldrb	r3, [r3, #2]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d005      	beq.n	80083c0 <find_volume+0x1f0>
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	789b      	ldrb	r3, [r3, #2]
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d001      	beq.n	80083c0 <find_volume+0x1f0>
 80083bc:	230d      	movs	r3, #13
 80083be:	e148      	b.n	8008652 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	789b      	ldrb	r3, [r3, #2]
 80083c4:	461a      	mov	r2, r3
 80083c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c8:	fb02 f303 	mul.w	r3, r2, r3
 80083cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	895b      	ldrh	r3, [r3, #10]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d008      	beq.n	80083f4 <find_volume+0x224>
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	895b      	ldrh	r3, [r3, #10]
 80083e6:	461a      	mov	r2, r3
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	895b      	ldrh	r3, [r3, #10]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	4013      	ands	r3, r2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <find_volume+0x228>
 80083f4:	230d      	movs	r3, #13
 80083f6:	e12c      	b.n	8008652 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	3330      	adds	r3, #48	; 0x30
 80083fc:	3311      	adds	r3, #17
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fe fcc8 	bl	8006d94 <ld_word>
 8008404:	4603      	mov	r3, r0
 8008406:	461a      	mov	r2, r3
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	891b      	ldrh	r3, [r3, #8]
 8008410:	f003 030f 	and.w	r3, r3, #15
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <find_volume+0x24e>
 800841a:	230d      	movs	r3, #13
 800841c:	e119      	b.n	8008652 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	3330      	adds	r3, #48	; 0x30
 8008422:	3313      	adds	r3, #19
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe fcb5 	bl	8006d94 <ld_word>
 800842a:	4603      	mov	r3, r0
 800842c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800842e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008430:	2b00      	cmp	r3, #0
 8008432:	d106      	bne.n	8008442 <find_volume+0x272>
 8008434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008436:	3330      	adds	r3, #48	; 0x30
 8008438:	3320      	adds	r3, #32
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fcc2 	bl	8006dc4 <ld_dword>
 8008440:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	3330      	adds	r3, #48	; 0x30
 8008446:	330e      	adds	r3, #14
 8008448:	4618      	mov	r0, r3
 800844a:	f7fe fca3 	bl	8006d94 <ld_word>
 800844e:	4603      	mov	r3, r0
 8008450:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008452:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <find_volume+0x28c>
 8008458:	230d      	movs	r3, #13
 800845a:	e0fa      	b.n	8008652 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800845c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800845e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008460:	4413      	add	r3, r2
 8008462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008464:	8912      	ldrh	r2, [r2, #8]
 8008466:	0912      	lsrs	r2, r2, #4
 8008468:	b292      	uxth	r2, r2
 800846a:	4413      	add	r3, r2
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800846e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	429a      	cmp	r2, r3
 8008474:	d204      	bcs.n	8008480 <find_volume+0x2b0>
 8008476:	230d      	movs	r3, #13
 8008478:	e0eb      	b.n	8008652 <find_volume+0x482>
 800847a:	bf00      	nop
 800847c:	20000764 	.word	0x20000764
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008488:	8952      	ldrh	r2, [r2, #10]
 800848a:	fbb3 f3f2 	udiv	r3, r3, r2
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <find_volume+0x2ca>
 8008496:	230d      	movs	r3, #13
 8008498:	e0db      	b.n	8008652 <find_volume+0x482>
		fmt = FS_FAT32;
 800849a:	2303      	movs	r3, #3
 800849c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d802      	bhi.n	80084b0 <find_volume+0x2e0>
 80084aa:	2302      	movs	r3, #2
 80084ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d802      	bhi.n	80084c0 <find_volume+0x2f0>
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	1c9a      	adds	r2, r3, #2
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084cc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80084ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d2:	441a      	add	r2, r3
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80084d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	441a      	add	r2, r3
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80084e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d11e      	bne.n	8008528 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80084ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ec:	3330      	adds	r3, #48	; 0x30
 80084ee:	332a      	adds	r3, #42	; 0x2a
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fc4f 	bl	8006d94 <ld_word>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <find_volume+0x330>
 80084fc:	230d      	movs	r3, #13
 80084fe:	e0a8      	b.n	8008652 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	891b      	ldrh	r3, [r3, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <find_volume+0x33c>
 8008508:	230d      	movs	r3, #13
 800850a:	e0a2      	b.n	8008652 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	3330      	adds	r3, #48	; 0x30
 8008510:	332c      	adds	r3, #44	; 0x2c
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe fc56 	bl	8006dc4 <ld_dword>
 8008518:	4602      	mov	r2, r0
 800851a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	647b      	str	r3, [r7, #68]	; 0x44
 8008526:	e01f      	b.n	8008568 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852a:	891b      	ldrh	r3, [r3, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <find_volume+0x364>
 8008530:	230d      	movs	r3, #13
 8008532:	e08e      	b.n	8008652 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	6a1a      	ldr	r2, [r3, #32]
 8008538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800853a:	441a      	add	r2, r3
 800853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008544:	2b02      	cmp	r3, #2
 8008546:	d103      	bne.n	8008550 <find_volume+0x380>
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	005b      	lsls	r3, r3, #1
 800854e:	e00a      	b.n	8008566 <find_volume+0x396>
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	695a      	ldr	r2, [r3, #20]
 8008554:	4613      	mov	r3, r2
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	4413      	add	r3, r2
 800855a:	085a      	lsrs	r2, r3, #1
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008566:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	699a      	ldr	r2, [r3, #24]
 800856c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800856e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008572:	0a5b      	lsrs	r3, r3, #9
 8008574:	429a      	cmp	r2, r3
 8008576:	d201      	bcs.n	800857c <find_volume+0x3ac>
 8008578:	230d      	movs	r3, #13
 800857a:	e06a      	b.n	8008652 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	f04f 32ff 	mov.w	r2, #4294967295
 8008582:	611a      	str	r2, [r3, #16]
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	691a      	ldr	r2, [r3, #16]
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800858c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858e:	2280      	movs	r2, #128	; 0x80
 8008590:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008592:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008596:	2b03      	cmp	r3, #3
 8008598:	d149      	bne.n	800862e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	3330      	adds	r3, #48	; 0x30
 800859e:	3330      	adds	r3, #48	; 0x30
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe fbf7 	bl	8006d94 <ld_word>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d140      	bne.n	800862e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80085ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ae:	3301      	adds	r3, #1
 80085b0:	4619      	mov	r1, r3
 80085b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085b4:	f7fe fe9e 	bl	80072f4 <move_window>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d137      	bne.n	800862e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	2200      	movs	r2, #0
 80085c2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	3330      	adds	r3, #48	; 0x30
 80085c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe fbe1 	bl	8006d94 <ld_word>
 80085d2:	4603      	mov	r3, r0
 80085d4:	461a      	mov	r2, r3
 80085d6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80085da:	429a      	cmp	r2, r3
 80085dc:	d127      	bne.n	800862e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	3330      	adds	r3, #48	; 0x30
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe fbee 	bl	8006dc4 <ld_dword>
 80085e8:	4603      	mov	r3, r0
 80085ea:	4a1c      	ldr	r2, [pc, #112]	; (800865c <find_volume+0x48c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d11e      	bne.n	800862e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80085f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f2:	3330      	adds	r3, #48	; 0x30
 80085f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fe fbe3 	bl	8006dc4 <ld_dword>
 80085fe:	4603      	mov	r3, r0
 8008600:	4a17      	ldr	r2, [pc, #92]	; (8008660 <find_volume+0x490>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d113      	bne.n	800862e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	3330      	adds	r3, #48	; 0x30
 800860a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fbd8 	bl	8006dc4 <ld_dword>
 8008614:	4602      	mov	r2, r0
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	3330      	adds	r3, #48	; 0x30
 800861e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fbce 	bl	8006dc4 <ld_dword>
 8008628:	4602      	mov	r2, r0
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008634:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008636:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <find_volume+0x494>)
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	3301      	adds	r3, #1
 800863c:	b29a      	uxth	r2, r3
 800863e:	4b09      	ldr	r3, [pc, #36]	; (8008664 <find_volume+0x494>)
 8008640:	801a      	strh	r2, [r3, #0]
 8008642:	4b08      	ldr	r3, [pc, #32]	; (8008664 <find_volume+0x494>)
 8008644:	881a      	ldrh	r2, [r3, #0]
 8008646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008648:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800864a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800864c:	f7fe fdea 	bl	8007224 <clear_lock>
#endif
	return FR_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3758      	adds	r7, #88	; 0x58
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	41615252 	.word	0x41615252
 8008660:	61417272 	.word	0x61417272
 8008664:	20000768 	.word	0x20000768

08008668 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008672:	2309      	movs	r3, #9
 8008674:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d01c      	beq.n	80086b6 <validate+0x4e>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d018      	beq.n	80086b6 <validate+0x4e>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d013      	beq.n	80086b6 <validate+0x4e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	889a      	ldrh	r2, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	88db      	ldrh	r3, [r3, #6]
 8008698:	429a      	cmp	r2, r3
 800869a:	d10c      	bne.n	80086b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fad8 	bl	8006c58 <disk_status>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <validate+0x4e>
			res = FR_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <validate+0x5a>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	e000      	b.n	80086c4 <validate+0x5c>
 80086c2:	2300      	movs	r3, #0
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	6013      	str	r3, [r2, #0]
	return res;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
	...

080086d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b088      	sub	sp, #32
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80086e6:	f107 0310 	add.w	r3, r7, #16
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff fcd5 	bl	800809a <get_ldnumber>
 80086f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	da01      	bge.n	80086fc <f_mount+0x28>
 80086f8:	230b      	movs	r3, #11
 80086fa:	e02b      	b.n	8008754 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80086fc:	4a17      	ldr	r2, [pc, #92]	; (800875c <f_mount+0x88>)
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008704:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800870c:	69b8      	ldr	r0, [r7, #24]
 800870e:	f7fe fd89 	bl	8007224 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	490d      	ldr	r1, [pc, #52]	; (800875c <f_mount+0x88>)
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <f_mount+0x66>
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d001      	beq.n	800873e <f_mount+0x6a>
 800873a:	2300      	movs	r3, #0
 800873c:	e00a      	b.n	8008754 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800873e:	f107 010c 	add.w	r1, r7, #12
 8008742:	f107 0308 	add.w	r3, r7, #8
 8008746:	2200      	movs	r2, #0
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff fd41 	bl	80081d0 <find_volume>
 800874e:	4603      	mov	r3, r0
 8008750:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008752:	7dfb      	ldrb	r3, [r7, #23]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3720      	adds	r7, #32
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000764 	.word	0x20000764

08008760 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b098      	sub	sp, #96	; 0x60
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	4613      	mov	r3, r2
 800876c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <f_open+0x18>
 8008774:	2309      	movs	r3, #9
 8008776:	e1ad      	b.n	8008ad4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800877e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008780:	79fa      	ldrb	r2, [r7, #7]
 8008782:	f107 0110 	add.w	r1, r7, #16
 8008786:	f107 0308 	add.w	r3, r7, #8
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fd20 	bl	80081d0 <find_volume>
 8008790:	4603      	mov	r3, r0
 8008792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008796:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800879a:	2b00      	cmp	r3, #0
 800879c:	f040 8191 	bne.w	8008ac2 <f_open+0x362>
		dj.obj.fs = fs;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	f107 0314 	add.w	r3, r7, #20
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fc03 	bl	8007fb8 <follow_path>
 80087b2:	4603      	mov	r3, r0
 80087b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80087b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d11a      	bne.n	80087f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80087c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	da03      	bge.n	80087d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80087ca:	2306      	movs	r3, #6
 80087cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087d0:	e011      	b.n	80087f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	f023 0301 	bic.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bf14      	ite	ne
 80087dc:	2301      	movne	r3, #1
 80087de:	2300      	moveq	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	461a      	mov	r2, r3
 80087e4:	f107 0314 	add.w	r3, r7, #20
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe fbd2 	bl	8006f94 <chk_lock>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	f003 031c 	and.w	r3, r3, #28
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d07f      	beq.n	8008900 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008804:	2b00      	cmp	r3, #0
 8008806:	d017      	beq.n	8008838 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800880c:	2b04      	cmp	r3, #4
 800880e:	d10e      	bne.n	800882e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008810:	f7fe fc1c 	bl	800704c <enq_lock>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d006      	beq.n	8008828 <f_open+0xc8>
 800881a:	f107 0314 	add.w	r3, r7, #20
 800881e:	4618      	mov	r0, r3
 8008820:	f7ff fb03 	bl	8007e2a <dir_register>
 8008824:	4603      	mov	r3, r0
 8008826:	e000      	b.n	800882a <f_open+0xca>
 8008828:	2312      	movs	r3, #18
 800882a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800882e:	79fb      	ldrb	r3, [r7, #7]
 8008830:	f043 0308 	orr.w	r3, r3, #8
 8008834:	71fb      	strb	r3, [r7, #7]
 8008836:	e010      	b.n	800885a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008838:	7ebb      	ldrb	r3, [r7, #26]
 800883a:	f003 0311 	and.w	r3, r3, #17
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <f_open+0xea>
					res = FR_DENIED;
 8008842:	2307      	movs	r3, #7
 8008844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008848:	e007      	b.n	800885a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <f_open+0xfa>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800885a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800885e:	2b00      	cmp	r3, #0
 8008860:	d168      	bne.n	8008934 <f_open+0x1d4>
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b00      	cmp	r3, #0
 800886a:	d063      	beq.n	8008934 <f_open+0x1d4>
				dw = GET_FATTIME();
 800886c:	f7fd ffa4 	bl	80067b8 <get_fattime>
 8008870:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	330e      	adds	r3, #14
 8008876:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe fae1 	bl	8006e40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008880:	3316      	adds	r3, #22
 8008882:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fadb 	bl	8006e40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800888a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888c:	330b      	adds	r3, #11
 800888e:	2220      	movs	r2, #32
 8008890:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff fa32 	bl	8007d02 <ld_clust>
 800889e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088a4:	2200      	movs	r2, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7ff fa4a 	bl	8007d40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	331c      	adds	r3, #28
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe fac4 	bl	8006e40 <st_dword>
					fs->wflag = 1;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2201      	movs	r2, #1
 80088bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80088be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d037      	beq.n	8008934 <f_open+0x1d4>
						dw = fs->winsect;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80088ca:	f107 0314 	add.w	r3, r7, #20
 80088ce:	2200      	movs	r2, #0
 80088d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe ff5d 	bl	8007792 <remove_chain>
 80088d8:	4603      	mov	r3, r0
 80088da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80088de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d126      	bne.n	8008934 <f_open+0x1d4>
							res = move_window(fs, dw);
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fd02 	bl	80072f4 <move_window>
 80088f0:	4603      	mov	r3, r0
 80088f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088fa:	3a01      	subs	r2, #1
 80088fc:	60da      	str	r2, [r3, #12]
 80088fe:	e019      	b.n	8008934 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008904:	2b00      	cmp	r3, #0
 8008906:	d115      	bne.n	8008934 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008908:	7ebb      	ldrb	r3, [r7, #26]
 800890a:	f003 0310 	and.w	r3, r3, #16
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008912:	2304      	movs	r3, #4
 8008914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008918:	e00c      	b.n	8008934 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	f003 0302 	and.w	r3, r3, #2
 8008920:	2b00      	cmp	r3, #0
 8008922:	d007      	beq.n	8008934 <f_open+0x1d4>
 8008924:	7ebb      	ldrb	r3, [r7, #26]
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <f_open+0x1d4>
						res = FR_DENIED;
 800892e:	2307      	movs	r3, #7
 8008930:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008938:	2b00      	cmp	r3, #0
 800893a:	d128      	bne.n	800898e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	f003 0308 	and.w	r3, r3, #8
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800894c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	f023 0301 	bic.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	bf14      	ite	ne
 8008966:	2301      	movne	r3, #1
 8008968:	2300      	moveq	r3, #0
 800896a:	b2db      	uxtb	r3, r3
 800896c:	461a      	mov	r2, r3
 800896e:	f107 0314 	add.w	r3, r7, #20
 8008972:	4611      	mov	r1, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f7fe fb8b 	bl	8007090 <inc_lock>
 800897a:	4602      	mov	r2, r0
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <f_open+0x22e>
 8008988:	2302      	movs	r3, #2
 800898a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800898e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008992:	2b00      	cmp	r3, #0
 8008994:	f040 8095 	bne.w	8008ac2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff f9af 	bl	8007d02 <ld_clust>
 80089a4:	4602      	mov	r2, r0
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80089aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ac:	331c      	adds	r3, #28
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fa08 	bl	8006dc4 <ld_dword>
 80089b4:	4602      	mov	r2, r0
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	88da      	ldrh	r2, [r3, #6]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	79fa      	ldrb	r2, [r7, #7]
 80089d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3330      	adds	r3, #48	; 0x30
 80089ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089ee:	2100      	movs	r1, #0
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fa72 	bl	8006eda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	f003 0320 	and.w	r3, r3, #32
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d060      	beq.n	8008ac2 <f_open+0x362>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d05c      	beq.n	8008ac2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	895b      	ldrh	r3, [r3, #10]
 8008a14:	025b      	lsls	r3, r3, #9
 8008a16:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	657b      	str	r3, [r7, #84]	; 0x54
 8008a24:	e016      	b.n	8008a54 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fd1d 	bl	800746a <get_fat>
 8008a30:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d802      	bhi.n	8008a3e <f_open+0x2de>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a44:	d102      	bne.n	8008a4c <f_open+0x2ec>
 8008a46:	2301      	movs	r3, #1
 8008a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	657b      	str	r3, [r7, #84]	; 0x54
 8008a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <f_open+0x304>
 8008a5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d8e0      	bhi.n	8008a26 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d127      	bne.n	8008ac2 <f_open+0x362>
 8008a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d022      	beq.n	8008ac2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe fcd3 	bl	800742c <clust2sect>
 8008a86:	6478      	str	r0, [r7, #68]	; 0x44
 8008a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <f_open+0x336>
						res = FR_INT_ERR;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a94:	e015      	b.n	8008ac2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a98:	0a5a      	lsrs	r2, r3, #9
 8008a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a9c:	441a      	add	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	7858      	ldrb	r0, [r3, #1]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6a1a      	ldr	r2, [r3, #32]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f7fe f911 	bl	8006cd8 <disk_read>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <f_open+0x362>
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d002      	beq.n	8008ad0 <f_open+0x370>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008ad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3760      	adds	r7, #96	; 0x60
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08c      	sub	sp, #48	; 0x30
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
 8008ae8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f107 0210 	add.w	r2, r7, #16
 8008afa:	4611      	mov	r1, r2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff fdb3 	bl	8008668 <validate>
 8008b02:	4603      	mov	r3, r0
 8008b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d107      	bne.n	8008b20 <f_write+0x44>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	7d5b      	ldrb	r3, [r3, #21]
 8008b14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <f_write+0x4a>
 8008b20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b24:	e14b      	b.n	8008dbe <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	7d1b      	ldrb	r3, [r3, #20]
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <f_write+0x5a>
 8008b32:	2307      	movs	r3, #7
 8008b34:	e143      	b.n	8008dbe <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	699a      	ldr	r2, [r3, #24]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	441a      	add	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	f080 812d 	bcs.w	8008da2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	43db      	mvns	r3, r3
 8008b4e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b50:	e127      	b.n	8008da2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f040 80e3 	bne.w	8008d26 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	0a5b      	lsrs	r3, r3, #9
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	8952      	ldrh	r2, [r2, #10]
 8008b6a:	3a01      	subs	r2, #1
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d143      	bne.n	8008bfe <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10c      	bne.n	8008b98 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d11a      	bne.n	8008bc0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fe64 	bl	800785c <create_chain>
 8008b94:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b96:	e013      	b.n	8008bc0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d007      	beq.n	8008bb0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7fe fef0 	bl	800798c <clmt_clust>
 8008bac:	62b8      	str	r0, [r7, #40]	; 0x28
 8008bae:	e007      	b.n	8008bc0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4610      	mov	r0, r2
 8008bba:	f7fe fe4f 	bl	800785c <create_chain>
 8008bbe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 80f2 	beq.w	8008dac <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d104      	bne.n	8008bd8 <f_write+0xfc>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	755a      	strb	r2, [r3, #21]
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e0f2      	b.n	8008dbe <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bde:	d104      	bne.n	8008bea <f_write+0x10e>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2201      	movs	r2, #1
 8008be4:	755a      	strb	r2, [r3, #21]
 8008be6:	2301      	movs	r3, #1
 8008be8:	e0e9      	b.n	8008dbe <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <f_write+0x122>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bfc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	7d1b      	ldrb	r3, [r3, #20]
 8008c02:	b25b      	sxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	da18      	bge.n	8008c3a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	7858      	ldrb	r0, [r3, #1]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6a1a      	ldr	r2, [r3, #32]
 8008c16:	2301      	movs	r3, #1
 8008c18:	f7fe f87e 	bl	8006d18 <disk_write>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d004      	beq.n	8008c2c <f_write+0x150>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	755a      	strb	r2, [r3, #21]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e0c8      	b.n	8008dbe <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	7d1b      	ldrb	r3, [r3, #20]
 8008c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f7fe fbf2 	bl	800742c <clust2sect>
 8008c48:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d104      	bne.n	8008c5a <f_write+0x17e>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2202      	movs	r2, #2
 8008c54:	755a      	strb	r2, [r3, #21]
 8008c56:	2302      	movs	r3, #2
 8008c58:	e0b1      	b.n	8008dbe <f_write+0x2e2>
			sect += csect;
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	4413      	add	r3, r2
 8008c60:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	0a5b      	lsrs	r3, r3, #9
 8008c66:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d03c      	beq.n	8008ce8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	4413      	add	r3, r2
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	8952      	ldrh	r2, [r2, #10]
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d905      	bls.n	8008c88 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	895b      	ldrh	r3, [r3, #10]
 8008c80:	461a      	mov	r2, r3
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	7858      	ldrb	r0, [r3, #1]
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	69f9      	ldr	r1, [r7, #28]
 8008c92:	f7fe f841 	bl	8006d18 <disk_write>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d004      	beq.n	8008ca6 <f_write+0x1ca>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	755a      	strb	r2, [r3, #21]
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e08b      	b.n	8008dbe <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6a1a      	ldr	r2, [r3, #32]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	6a3a      	ldr	r2, [r7, #32]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d915      	bls.n	8008ce0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a1a      	ldr	r2, [r3, #32]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	025b      	lsls	r3, r3, #9
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ccc:	4619      	mov	r1, r3
 8008cce:	f7fe f8e3 	bl	8006e98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	7d1b      	ldrb	r3, [r3, #20]
 8008cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	025b      	lsls	r3, r3, #9
 8008ce4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008ce6:	e03f      	b.n	8008d68 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d016      	beq.n	8008d20 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	699a      	ldr	r2, [r3, #24]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d210      	bcs.n	8008d20 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	7858      	ldrb	r0, [r3, #1]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d08:	2301      	movs	r3, #1
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	f7fd ffe4 	bl	8006cd8 <disk_read>
 8008d10:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d004      	beq.n	8008d20 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	755a      	strb	r2, [r3, #21]
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e04e      	b.n	8008dbe <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d901      	bls.n	8008d40 <f_write+0x264>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4e:	4413      	add	r3, r2
 8008d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d52:	69f9      	ldr	r1, [r7, #28]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe f89f 	bl	8006e98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	7d1b      	ldrb	r3, [r3, #20]
 8008d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	4413      	add	r3, r2
 8008d6e:	61fb      	str	r3, [r7, #28]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	699a      	ldr	r2, [r3, #24]
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	441a      	add	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	619a      	str	r2, [r3, #24]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	bf38      	it	cc
 8008d88:	461a      	movcc	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	60da      	str	r2, [r3, #12]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	441a      	add	r2, r3
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f47f aed4 	bne.w	8008b52 <f_write+0x76>
 8008daa:	e000      	b.n	8008dae <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008dac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	7d1b      	ldrb	r3, [r3, #20]
 8008db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3730      	adds	r7, #48	; 0x30
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b086      	sub	sp, #24
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f107 0208 	add.w	r2, r7, #8
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7ff fc46 	bl	8008668 <validate>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d168      	bne.n	8008eb8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	7d1b      	ldrb	r3, [r3, #20]
 8008dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d062      	beq.n	8008eb8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	7d1b      	ldrb	r3, [r3, #20]
 8008df6:	b25b      	sxtb	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	da15      	bge.n	8008e28 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	7858      	ldrb	r0, [r3, #1]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1a      	ldr	r2, [r3, #32]
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f7fd ff84 	bl	8006d18 <disk_write>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <f_sync+0x54>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e04f      	b.n	8008eba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	7d1b      	ldrb	r3, [r3, #20]
 8008e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e28:	f7fd fcc6 	bl	80067b8 <get_fattime>
 8008e2c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	4619      	mov	r1, r3
 8008e36:	4610      	mov	r0, r2
 8008e38:	f7fe fa5c 	bl	80072f4 <move_window>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e40:	7dfb      	ldrb	r3, [r7, #23]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d138      	bne.n	8008eb8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	330b      	adds	r3, #11
 8008e50:	781a      	ldrb	r2, [r3, #0]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	330b      	adds	r3, #11
 8008e56:	f042 0220 	orr.w	r2, r2, #32
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	461a      	mov	r2, r3
 8008e68:	68f9      	ldr	r1, [r7, #12]
 8008e6a:	f7fe ff69 	bl	8007d40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f103 021c 	add.w	r2, r3, #28
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fd ffe0 	bl	8006e40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3316      	adds	r3, #22
 8008e84:	6939      	ldr	r1, [r7, #16]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fd ffda 	bl	8006e40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3312      	adds	r3, #18
 8008e90:	2100      	movs	r1, #0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fd ffb9 	bl	8006e0a <st_word>
					fs->wflag = 1;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe fa55 	bl	8007350 <sync_fs>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	7d1b      	ldrb	r3, [r3, #20]
 8008eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff ff7b 	bl	8008dc6 <f_sync>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d118      	bne.n	8008f0c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f107 0208 	add.w	r2, r7, #8
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff fbc0 	bl	8008668 <validate>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10c      	bne.n	8008f0c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe f958 	bl	80071ac <dec_lock>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d102      	bne.n	8008f0c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8008f18:	b590      	push	{r4, r7, lr}
 8008f1a:	b09d      	sub	sp, #116	; 0x74
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	607a      	str	r2, [r7, #4]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	460b      	mov	r3, r1
 8008f26:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8008f28:	2301      	movs	r3, #1
 8008f2a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8008f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f30:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8008f32:	f107 030c 	add.w	r3, r7, #12
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff f8af 	bl	800809a <get_ldnumber>
 8008f3c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	da02      	bge.n	8008f4a <f_mkfs+0x32>
 8008f44:	230b      	movs	r3, #11
 8008f46:	f000 bc0d 	b.w	8009764 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8008f4a:	4a94      	ldr	r2, [pc, #592]	; (800919c <f_mkfs+0x284>)
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <f_mkfs+0x4a>
 8008f56:	4a91      	ldr	r2, [pc, #580]	; (800919c <f_mkfs+0x284>)
 8008f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8008f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8008f6e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fd fe8a 	bl	8006c8c <disk_initialize>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8008f7e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <f_mkfs+0x76>
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e3ea      	b.n	8009764 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8008f8e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008f92:	f003 0304 	and.w	r3, r3, #4
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <f_mkfs+0x86>
 8008f9a:	230a      	movs	r3, #10
 8008f9c:	e3e2      	b.n	8009764 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8008f9e:	f107 0214 	add.w	r2, r7, #20
 8008fa2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008fa6:	2103      	movs	r1, #3
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fd fed5 	bl	8006d58 <disk_ioctl>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10c      	bne.n	8008fce <f_mkfs+0xb6>
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d009      	beq.n	8008fce <f_mkfs+0xb6>
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fc0:	d805      	bhi.n	8008fce <f_mkfs+0xb6>
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	1e5a      	subs	r2, r3, #1
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <f_mkfs+0xba>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8008fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fd6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <f_mkfs+0xce>
 8008fde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d309      	bcc.n	8008ffa <f_mkfs+0xe2>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fec:	d805      	bhi.n	8008ffa <f_mkfs+0xe2>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	1e5a      	subs	r2, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <f_mkfs+0xe6>
 8008ffa:	2313      	movs	r3, #19
 8008ffc:	e3b2      	b.n	8009764 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8008ffe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	fbb2 f3f3 	udiv	r3, r2, r3
 8009006:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800900c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800900e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009012:	fbb2 f3f3 	udiv	r3, r2, r3
 8009016:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8009018:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	fb02 f303 	mul.w	r3, r2, r3
 8009020:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <f_mkfs+0x114>
 8009028:	230e      	movs	r3, #14
 800902a:	e39b      	b.n	8009764 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800902c:	f107 0210 	add.w	r2, r7, #16
 8009030:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009034:	2101      	movs	r1, #1
 8009036:	4618      	mov	r0, r3
 8009038:	f7fd fe8e 	bl	8006d58 <disk_ioctl>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <f_mkfs+0x12e>
 8009042:	2301      	movs	r3, #1
 8009044:	e38e      	b.n	8009764 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009046:	7afb      	ldrb	r3, [r7, #11]
 8009048:	f003 0308 	and.w	r3, r3, #8
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <f_mkfs+0x13c>
 8009050:	2300      	movs	r3, #0
 8009052:	e000      	b.n	8009056 <f_mkfs+0x13e>
 8009054:	233f      	movs	r3, #63	; 0x3f
 8009056:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800905c:	429a      	cmp	r2, r3
 800905e:	d901      	bls.n	8009064 <f_mkfs+0x14c>
 8009060:	230e      	movs	r3, #14
 8009062:	e37f      	b.n	8009764 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	2b7f      	cmp	r3, #127	; 0x7f
 8009070:	d801      	bhi.n	8009076 <f_mkfs+0x15e>
 8009072:	230e      	movs	r3, #14
 8009074:	e376      	b.n	8009764 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b80      	cmp	r3, #128	; 0x80
 800907a:	d901      	bls.n	8009080 <f_mkfs+0x168>
 800907c:	2313      	movs	r3, #19
 800907e:	e371      	b.n	8009764 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	f003 0302 	and.w	r3, r3, #2
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00d      	beq.n	80090a6 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800908a:	7afb      	ldrb	r3, [r7, #11]
 800908c:	f003 0307 	and.w	r3, r3, #7
 8009090:	2b02      	cmp	r3, #2
 8009092:	d004      	beq.n	800909e <f_mkfs+0x186>
 8009094:	7afb      	ldrb	r3, [r7, #11]
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d103      	bne.n	80090a6 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800909e:	2303      	movs	r3, #3
 80090a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80090a4:	e009      	b.n	80090ba <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80090a6:	7afb      	ldrb	r3, [r7, #11]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d101      	bne.n	80090b4 <f_mkfs+0x19c>
 80090b0:	2313      	movs	r3, #19
 80090b2:	e357      	b.n	8009764 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80090b4:	2302      	movs	r3, #2
 80090b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80090be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d13c      	bne.n	8009140 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80090c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d11b      	bne.n	8009104 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	0c5b      	lsrs	r3, r3, #17
 80090d0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80090d2:	2300      	movs	r3, #0
 80090d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090d6:	2301      	movs	r3, #1
 80090d8:	653b      	str	r3, [r7, #80]	; 0x50
 80090da:	e005      	b.n	80090e8 <f_mkfs+0x1d0>
 80090dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090de:	3301      	adds	r3, #1
 80090e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80090e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	653b      	str	r3, [r7, #80]	; 0x50
 80090e8:	4a2d      	ldr	r2, [pc, #180]	; (80091a0 <f_mkfs+0x288>)
 80090ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <f_mkfs+0x1ec>
 80090f4:	4a2a      	ldr	r2, [pc, #168]	; (80091a0 <f_mkfs+0x288>)
 80090f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090fc:	461a      	mov	r2, r3
 80090fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009100:	4293      	cmp	r3, r2
 8009102:	d2eb      	bcs.n	80090dc <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009108:	fbb2 f3f3 	udiv	r3, r2, r3
 800910c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	3302      	adds	r3, #2
 8009112:	009a      	lsls	r2, r3, #2
 8009114:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009116:	4413      	add	r3, r2
 8009118:	1e5a      	subs	r2, r3, #1
 800911a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800911c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009120:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8009122:	2320      	movs	r3, #32
 8009124:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8009126:	2300      	movs	r3, #0
 8009128:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009130:	4293      	cmp	r3, r2
 8009132:	d903      	bls.n	800913c <f_mkfs+0x224>
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	4a1b      	ldr	r2, [pc, #108]	; (80091a4 <f_mkfs+0x28c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d952      	bls.n	80091e2 <f_mkfs+0x2ca>
 800913c:	230e      	movs	r3, #14
 800913e:	e311      	b.n	8009764 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8009140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009142:	2b00      	cmp	r3, #0
 8009144:	d11b      	bne.n	800917e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	0b1b      	lsrs	r3, r3, #12
 800914a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800914c:	2300      	movs	r3, #0
 800914e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009150:	2301      	movs	r3, #1
 8009152:	653b      	str	r3, [r7, #80]	; 0x50
 8009154:	e005      	b.n	8009162 <f_mkfs+0x24a>
 8009156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009158:	3301      	adds	r3, #1
 800915a:	64bb      	str	r3, [r7, #72]	; 0x48
 800915c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	653b      	str	r3, [r7, #80]	; 0x50
 8009162:	4a11      	ldr	r2, [pc, #68]	; (80091a8 <f_mkfs+0x290>)
 8009164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <f_mkfs+0x266>
 800916e:	4a0e      	ldr	r2, [pc, #56]	; (80091a8 <f_mkfs+0x290>)
 8009170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009176:	461a      	mov	r2, r3
 8009178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800917a:	4293      	cmp	r3, r2
 800917c:	d2eb      	bcs.n	8009156 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009182:	fbb2 f3f3 	udiv	r3, r2, r3
 8009186:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800918e:	4293      	cmp	r3, r2
 8009190:	d90c      	bls.n	80091ac <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	3302      	adds	r3, #2
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800919a:	e012      	b.n	80091c2 <f_mkfs+0x2aa>
 800919c:	20000764 	.word	0x20000764
 80091a0:	0800ac90 	.word	0x0800ac90
 80091a4:	0ffffff5 	.word	0x0ffffff5
 80091a8:	0800aca0 	.word	0x0800aca0
				} else {
					fmt = FS_FAT12;
 80091ac:	2301      	movs	r3, #1
 80091ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80091b2:	6a3a      	ldr	r2, [r7, #32]
 80091b4:	4613      	mov	r3, r2
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	4413      	add	r3, r2
 80091ba:	3301      	adds	r3, #1
 80091bc:	085b      	lsrs	r3, r3, #1
 80091be:	3303      	adds	r3, #3
 80091c0:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80091c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80091c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091c6:	4413      	add	r3, r2
 80091c8:	1e5a      	subs	r2, r3, #1
 80091ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80091d2:	2301      	movs	r3, #1
 80091d4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80091d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e0:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80091e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091e6:	4413      	add	r3, r2
 80091e8:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80091ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091ee:	fb03 f202 	mul.w	r2, r3, r2
 80091f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091f4:	4413      	add	r3, r2
 80091f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091f8:	4413      	add	r3, r2
 80091fa:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4413      	add	r3, r2
 8009202:	1e5a      	subs	r2, r3, #1
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	425b      	negs	r3, r3
 8009208:	401a      	ands	r2, r3
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8009210:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009214:	2b03      	cmp	r3, #3
 8009216:	d108      	bne.n	800922a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8009218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800921a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800921c:	4413      	add	r3, r2
 800921e:	657b      	str	r3, [r7, #84]	; 0x54
 8009220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009224:	4413      	add	r3, r2
 8009226:	65bb      	str	r3, [r7, #88]	; 0x58
 8009228:	e006      	b.n	8009238 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800922a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800922c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800922e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009232:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009234:	4413      	add	r3, r2
 8009236:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8009238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800923a:	011a      	lsls	r2, r3, #4
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	441a      	add	r2, r3
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	1ad2      	subs	r2, r2, r3
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	429a      	cmp	r2, r3
 8009248:	d901      	bls.n	800924e <f_mkfs+0x336>
 800924a:	230e      	movs	r3, #14
 800924c:	e28a      	b.n	8009764 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800924e:	693a      	ldr	r2, [r7, #16]
 8009250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009252:	1ad2      	subs	r2, r2, r3
 8009254:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009258:	fb01 f303 	mul.w	r3, r1, r3
 800925c:	1ad2      	subs	r2, r2, r3
 800925e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009260:	1ad2      	subs	r2, r2, r3
 8009262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009264:	fbb2 f3f3 	udiv	r3, r2, r3
 8009268:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800926a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800926e:	2b03      	cmp	r3, #3
 8009270:	d10f      	bne.n	8009292 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009278:	4293      	cmp	r3, r2
 800927a:	d80a      	bhi.n	8009292 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d105      	bne.n	800928e <f_mkfs+0x376>
 8009282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009284:	085b      	lsrs	r3, r3, #1
 8009286:	607b      	str	r3, [r7, #4]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d144      	bne.n	8009318 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800928e:	230e      	movs	r3, #14
 8009290:	e268      	b.n	8009764 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8009292:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009296:	2b02      	cmp	r3, #2
 8009298:	d133      	bne.n	8009302 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800929a:	6a3b      	ldr	r3, [r7, #32]
 800929c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d91e      	bls.n	80092e2 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d107      	bne.n	80092ba <f_mkfs+0x3a2>
 80092aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	2b40      	cmp	r3, #64	; 0x40
 80092b0:	d803      	bhi.n	80092ba <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80092b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	607b      	str	r3, [r7, #4]
 80092b8:	e033      	b.n	8009322 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80092c4:	2303      	movs	r3, #3
 80092c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80092ca:	e02a      	b.n	8009322 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d105      	bne.n	80092de <f_mkfs+0x3c6>
 80092d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	607b      	str	r3, [r7, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b80      	cmp	r3, #128	; 0x80
 80092dc:	d91e      	bls.n	800931c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80092de:	230e      	movs	r3, #14
 80092e0:	e240      	b.n	8009764 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d80a      	bhi.n	8009302 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <f_mkfs+0x3e6>
 80092f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	607b      	str	r3, [r7, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b80      	cmp	r3, #128	; 0x80
 80092fc:	d910      	bls.n	8009320 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80092fe:	230e      	movs	r3, #14
 8009300:	e230      	b.n	8009764 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8009302:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009306:	2b01      	cmp	r3, #1
 8009308:	d10c      	bne.n	8009324 <f_mkfs+0x40c>
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009310:	4293      	cmp	r3, r2
 8009312:	d907      	bls.n	8009324 <f_mkfs+0x40c>
 8009314:	230e      	movs	r3, #14
 8009316:	e225      	b.n	8009764 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009318:	bf00      	nop
 800931a:	e6ce      	b.n	80090ba <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800931c:	bf00      	nop
 800931e:	e6cc      	b.n	80090ba <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009320:	bf00      	nop
			pau = au;
 8009322:	e6ca      	b.n	80090ba <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8009324:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8009326:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009328:	461a      	mov	r2, r3
 800932a:	2100      	movs	r1, #0
 800932c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800932e:	f7fd fdd4 	bl	8006eda <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8009332:	220b      	movs	r2, #11
 8009334:	49b2      	ldr	r1, [pc, #712]	; (8009600 <f_mkfs+0x6e8>)
 8009336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009338:	f7fd fdae 	bl	8006e98 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	330b      	adds	r3, #11
 8009340:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009342:	4611      	mov	r1, r2
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd fd60 	bl	8006e0a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	330d      	adds	r3, #13
 800934e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009350:	b2d2      	uxtb	r2, r2
 8009352:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009356:	330e      	adds	r3, #14
 8009358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800935a:	b292      	uxth	r2, r2
 800935c:	4611      	mov	r1, r2
 800935e:	4618      	mov	r0, r3
 8009360:	f7fd fd53 	bl	8006e0a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	3310      	adds	r3, #16
 8009368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800936a:	b2d2      	uxtb	r2, r2
 800936c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	f103 0211 	add.w	r2, r3, #17
 8009374:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009378:	2b03      	cmp	r3, #3
 800937a:	d002      	beq.n	8009382 <f_mkfs+0x46a>
 800937c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800937e:	b29b      	uxth	r3, r3
 8009380:	e000      	b.n	8009384 <f_mkfs+0x46c>
 8009382:	2300      	movs	r3, #0
 8009384:	4619      	mov	r1, r3
 8009386:	4610      	mov	r0, r2
 8009388:	f7fd fd3f 	bl	8006e0a <st_word>
		if (sz_vol < 0x10000) {
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009392:	d208      	bcs.n	80093a6 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8009394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009396:	3313      	adds	r3, #19
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	b292      	uxth	r2, r2
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fd fd33 	bl	8006e0a <st_word>
 80093a4:	e006      	b.n	80093b4 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80093a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a8:	3320      	adds	r3, #32
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	4611      	mov	r1, r2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fd fd46 	bl	8006e40 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	3315      	adds	r3, #21
 80093b8:	22f8      	movs	r2, #248	; 0xf8
 80093ba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	3318      	adds	r3, #24
 80093c0:	213f      	movs	r1, #63	; 0x3f
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fd fd21 	bl	8006e0a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80093c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ca:	331a      	adds	r3, #26
 80093cc:	21ff      	movs	r1, #255	; 0xff
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fd fd1b 	bl	8006e0a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	331c      	adds	r3, #28
 80093d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fd fd30 	bl	8006e40 <st_dword>
		if (fmt == FS_FAT32) {
 80093e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80093e4:	2b03      	cmp	r3, #3
 80093e6:	d131      	bne.n	800944c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80093ee:	f7fd f9e3 	bl	80067b8 <get_fattime>
 80093f2:	4603      	mov	r3, r0
 80093f4:	4619      	mov	r1, r3
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7fd fd22 	bl	8006e40 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	3324      	adds	r3, #36	; 0x24
 8009400:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009402:	4618      	mov	r0, r3
 8009404:	f7fd fd1c 	bl	8006e40 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	332c      	adds	r3, #44	; 0x2c
 800940c:	2102      	movs	r1, #2
 800940e:	4618      	mov	r0, r3
 8009410:	f7fd fd16 	bl	8006e40 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	3330      	adds	r3, #48	; 0x30
 8009418:	2101      	movs	r1, #1
 800941a:	4618      	mov	r0, r3
 800941c:	f7fd fcf5 	bl	8006e0a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	3332      	adds	r3, #50	; 0x32
 8009424:	2106      	movs	r1, #6
 8009426:	4618      	mov	r0, r3
 8009428:	f7fd fcef 	bl	8006e0a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	3340      	adds	r3, #64	; 0x40
 8009430:	2280      	movs	r2, #128	; 0x80
 8009432:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8009434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009436:	3342      	adds	r3, #66	; 0x42
 8009438:	2229      	movs	r2, #41	; 0x29
 800943a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	3347      	adds	r3, #71	; 0x47
 8009440:	2213      	movs	r2, #19
 8009442:	4970      	ldr	r1, [pc, #448]	; (8009604 <f_mkfs+0x6ec>)
 8009444:	4618      	mov	r0, r3
 8009446:	f7fd fd27 	bl	8006e98 <mem_cpy>
 800944a:	e020      	b.n	800948e <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8009452:	f7fd f9b1 	bl	80067b8 <get_fattime>
 8009456:	4603      	mov	r3, r0
 8009458:	4619      	mov	r1, r3
 800945a:	4620      	mov	r0, r4
 800945c:	f7fd fcf0 	bl	8006e40 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8009460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009462:	3316      	adds	r3, #22
 8009464:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009466:	b292      	uxth	r2, r2
 8009468:	4611      	mov	r1, r2
 800946a:	4618      	mov	r0, r3
 800946c:	f7fd fccd 	bl	8006e0a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8009470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009472:	3324      	adds	r3, #36	; 0x24
 8009474:	2280      	movs	r2, #128	; 0x80
 8009476:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	3326      	adds	r3, #38	; 0x26
 800947c:	2229      	movs	r2, #41	; 0x29
 800947e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	332b      	adds	r3, #43	; 0x2b
 8009484:	2213      	movs	r2, #19
 8009486:	4960      	ldr	r1, [pc, #384]	; (8009608 <f_mkfs+0x6f0>)
 8009488:	4618      	mov	r0, r3
 800948a:	f7fd fd05 	bl	8006e98 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800948e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009490:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009494:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009498:	4618      	mov	r0, r3
 800949a:	f7fd fcb6 	bl	8006e0a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800949e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80094a2:	2301      	movs	r3, #1
 80094a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094a8:	f7fd fc36 	bl	8006d18 <disk_write>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <f_mkfs+0x59e>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e156      	b.n	8009764 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80094b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d140      	bne.n	8009540 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	1d9a      	adds	r2, r3, #6
 80094c2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80094c6:	2301      	movs	r3, #1
 80094c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094ca:	f7fd fc25 	bl	8006d18 <disk_write>
			mem_set(buf, 0, ss);
 80094ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80094d0:	461a      	mov	r2, r3
 80094d2:	2100      	movs	r1, #0
 80094d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094d6:	f7fd fd00 	bl	8006eda <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80094da:	494c      	ldr	r1, [pc, #304]	; (800960c <f_mkfs+0x6f4>)
 80094dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094de:	f7fd fcaf 	bl	8006e40 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80094e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80094e8:	4949      	ldr	r1, [pc, #292]	; (8009610 <f_mkfs+0x6f8>)
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd fca8 	bl	8006e40 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	3b01      	subs	r3, #1
 80094fa:	4619      	mov	r1, r3
 80094fc:	4610      	mov	r0, r2
 80094fe:	f7fd fc9f 	bl	8006e40 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009508:	2102      	movs	r1, #2
 800950a:	4618      	mov	r0, r3
 800950c:	f7fd fc98 	bl	8006e40 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009516:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800951a:	4618      	mov	r0, r3
 800951c:	f7fd fc75 	bl	8006e0a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	1dda      	adds	r2, r3, #7
 8009524:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009528:	2301      	movs	r3, #1
 800952a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800952c:	f7fd fbf4 	bl	8006d18 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009538:	2301      	movs	r3, #1
 800953a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800953c:	f7fd fbec 	bl	8006d18 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8009540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009542:	2100      	movs	r1, #0
 8009544:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009546:	f7fd fcc8 	bl	8006eda <mem_set>
		sect = b_fat;		/* FAT start sector */
 800954a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800954c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800954e:	2300      	movs	r3, #0
 8009550:	64bb      	str	r3, [r7, #72]	; 0x48
 8009552:	e04b      	b.n	80095ec <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8009554:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009558:	2b03      	cmp	r3, #3
 800955a:	d113      	bne.n	8009584 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800955c:	f06f 0107 	mvn.w	r1, #7
 8009560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009562:	f7fd fc6d 	bl	8006e40 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	3304      	adds	r3, #4
 800956a:	f04f 31ff 	mov.w	r1, #4294967295
 800956e:	4618      	mov	r0, r3
 8009570:	f7fd fc66 	bl	8006e40 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	3308      	adds	r3, #8
 8009578:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800957c:	4618      	mov	r0, r3
 800957e:	f7fd fc5f 	bl	8006e40 <st_dword>
 8009582:	e00b      	b.n	800959c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8009584:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009588:	2b01      	cmp	r3, #1
 800958a:	d101      	bne.n	8009590 <f_mkfs+0x678>
 800958c:	4b21      	ldr	r3, [pc, #132]	; (8009614 <f_mkfs+0x6fc>)
 800958e:	e001      	b.n	8009594 <f_mkfs+0x67c>
 8009590:	f06f 0307 	mvn.w	r3, #7
 8009594:	4619      	mov	r1, r3
 8009596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009598:	f7fd fc52 	bl	8006e40 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800959c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800959e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80095a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	4293      	cmp	r3, r2
 80095a6:	bf28      	it	cs
 80095a8:	4613      	movcs	r3, r2
 80095aa:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80095ac:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80095b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095b6:	f7fd fbaf 	bl	8006d18 <disk_write>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <f_mkfs+0x6ac>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e0cf      	b.n	8009764 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80095c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095c6:	461a      	mov	r2, r3
 80095c8:	2100      	movs	r1, #0
 80095ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095cc:	f7fd fc85 	bl	8006eda <mem_set>
				sect += n; nsect -= n;
 80095d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095d4:	4413      	add	r3, r2
 80095d6:	667b      	str	r3, [r7, #100]	; 0x64
 80095d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80095e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1dc      	bne.n	80095a0 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80095e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095e8:	3301      	adds	r3, #1
 80095ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80095ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d3af      	bcc.n	8009554 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80095f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d10d      	bne.n	8009618 <f_mkfs+0x700>
 80095fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095fe:	e00c      	b.n	800961a <f_mkfs+0x702>
 8009600:	0800aba8 	.word	0x0800aba8
 8009604:	0800abb4 	.word	0x0800abb4
 8009608:	0800abc8 	.word	0x0800abc8
 800960c:	41615252 	.word	0x41615252
 8009610:	61417272 	.word	0x61417272
 8009614:	00fffff8 	.word	0x00fffff8
 8009618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800961a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800961c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800961e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009620:	4293      	cmp	r3, r2
 8009622:	bf28      	it	cs
 8009624:	4613      	movcs	r3, r2
 8009626:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8009628:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800962c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800962e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009632:	f7fd fb71 	bl	8006d18 <disk_write>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <f_mkfs+0x728>
 800963c:	2301      	movs	r3, #1
 800963e:	e091      	b.n	8009764 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8009640:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009644:	4413      	add	r3, r2
 8009646:	667b      	str	r3, [r7, #100]	; 0x64
 8009648:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800964a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8009650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e2      	bne.n	800961c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8009656:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800965a:	2b03      	cmp	r3, #3
 800965c:	d103      	bne.n	8009666 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800965e:	230c      	movs	r3, #12
 8009660:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009664:	e010      	b.n	8009688 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800966c:	d303      	bcc.n	8009676 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800966e:	2306      	movs	r3, #6
 8009670:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009674:	e008      	b.n	8009688 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8009676:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800967a:	2b02      	cmp	r3, #2
 800967c:	d101      	bne.n	8009682 <f_mkfs+0x76a>
 800967e:	2304      	movs	r3, #4
 8009680:	e000      	b.n	8009684 <f_mkfs+0x76c>
 8009682:	2301      	movs	r3, #1
 8009684:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8009688:	7afb      	ldrb	r3, [r7, #11]
 800968a:	f003 0308 	and.w	r3, r3, #8
 800968e:	2b00      	cmp	r3, #0
 8009690:	d15b      	bne.n	800974a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8009692:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009694:	461a      	mov	r2, r3
 8009696:	2100      	movs	r1, #0
 8009698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800969a:	f7fd fc1e 	bl	8006eda <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80096a4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7fd fbae 	bl	8006e0a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80096b4:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	3301      	adds	r3, #1
 80096c0:	2201      	movs	r2, #1
 80096c2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	3302      	adds	r3, #2
 80096c8:	2201      	movs	r2, #1
 80096ca:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	3303      	adds	r3, #3
 80096d0:	2200      	movs	r2, #0
 80096d2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	3304      	adds	r3, #4
 80096d8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80096dc:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	441a      	add	r2, r3
 80096e4:	4b21      	ldr	r3, [pc, #132]	; (800976c <f_mkfs+0x854>)
 80096e6:	fba3 1302 	umull	r1, r3, r3, r2
 80096ea:	1ad2      	subs	r2, r2, r3
 80096ec:	0852      	lsrs	r2, r2, #1
 80096ee:	4413      	add	r3, r2
 80096f0:	0b5b      	lsrs	r3, r3, #13
 80096f2:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	3305      	adds	r3, #5
 80096f8:	22fe      	movs	r2, #254	; 0xfe
 80096fa:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80096fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096fe:	089b      	lsrs	r3, r3, #2
 8009700:	b2da      	uxtb	r2, r3
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	3306      	adds	r3, #6
 8009706:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800970a:	b2d2      	uxtb	r2, r2
 800970c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	3307      	adds	r3, #7
 8009712:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009714:	b2d2      	uxtb	r2, r2
 8009716:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	3308      	adds	r3, #8
 800971c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800971e:	4618      	mov	r0, r3
 8009720:	f7fd fb8e 	bl	8006e40 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	330c      	adds	r3, #12
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	4611      	mov	r1, r2
 800972c:	4618      	mov	r0, r3
 800972e:	f7fd fb87 	bl	8006e40 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8009732:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009736:	2301      	movs	r3, #1
 8009738:	2200      	movs	r2, #0
 800973a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800973c:	f7fd faec 	bl	8006d18 <disk_write>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <f_mkfs+0x832>
 8009746:	2301      	movs	r3, #1
 8009748:	e00c      	b.n	8009764 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800974a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800974e:	2200      	movs	r2, #0
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f7fd fb00 	bl	8006d58 <disk_ioctl>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <f_mkfs+0x84a>
 800975e:	2301      	movs	r3, #1
 8009760:	e000      	b.n	8009764 <f_mkfs+0x84c>

	return FR_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3774      	adds	r7, #116	; 0x74
 8009768:	46bd      	mov	sp, r7
 800976a:	bd90      	pop	{r4, r7, pc}
 800976c:	0515565b 	.word	0x0515565b

08009770 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009770:	b480      	push	{r7}
 8009772:	b087      	sub	sp, #28
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	4613      	mov	r3, r2
 800977c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800977e:	2301      	movs	r3, #1
 8009780:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009782:	2300      	movs	r3, #0
 8009784:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009786:	4b1f      	ldr	r3, [pc, #124]	; (8009804 <FATFS_LinkDriverEx+0x94>)
 8009788:	7a5b      	ldrb	r3, [r3, #9]
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d131      	bne.n	80097f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009790:	4b1c      	ldr	r3, [pc, #112]	; (8009804 <FATFS_LinkDriverEx+0x94>)
 8009792:	7a5b      	ldrb	r3, [r3, #9]
 8009794:	b2db      	uxtb	r3, r3
 8009796:	461a      	mov	r2, r3
 8009798:	4b1a      	ldr	r3, [pc, #104]	; (8009804 <FATFS_LinkDriverEx+0x94>)
 800979a:	2100      	movs	r1, #0
 800979c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800979e:	4b19      	ldr	r3, [pc, #100]	; (8009804 <FATFS_LinkDriverEx+0x94>)
 80097a0:	7a5b      	ldrb	r3, [r3, #9]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	4a17      	ldr	r2, [pc, #92]	; (8009804 <FATFS_LinkDriverEx+0x94>)
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80097ae:	4b15      	ldr	r3, [pc, #84]	; (8009804 <FATFS_LinkDriverEx+0x94>)
 80097b0:	7a5b      	ldrb	r3, [r3, #9]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	461a      	mov	r2, r3
 80097b6:	4b13      	ldr	r3, [pc, #76]	; (8009804 <FATFS_LinkDriverEx+0x94>)
 80097b8:	4413      	add	r3, r2
 80097ba:	79fa      	ldrb	r2, [r7, #7]
 80097bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <FATFS_LinkDriverEx+0x94>)
 80097c0:	7a5b      	ldrb	r3, [r3, #9]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	1c5a      	adds	r2, r3, #1
 80097c6:	b2d1      	uxtb	r1, r2
 80097c8:	4a0e      	ldr	r2, [pc, #56]	; (8009804 <FATFS_LinkDriverEx+0x94>)
 80097ca:	7251      	strb	r1, [r2, #9]
 80097cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80097ce:	7dbb      	ldrb	r3, [r7, #22]
 80097d0:	3330      	adds	r3, #48	; 0x30
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	3301      	adds	r3, #1
 80097dc:	223a      	movs	r2, #58	; 0x3a
 80097de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	3302      	adds	r3, #2
 80097e4:	222f      	movs	r2, #47	; 0x2f
 80097e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	3303      	adds	r3, #3
 80097ec:	2200      	movs	r2, #0
 80097ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	371c      	adds	r7, #28
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	2000078c 	.word	0x2000078c

08009808 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009812:	2200      	movs	r2, #0
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff ffaa 	bl	8009770 <FATFS_LinkDriverEx>
 800981c:	4603      	mov	r3, r0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3708      	adds	r7, #8
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <__errno>:
 8009828:	4b01      	ldr	r3, [pc, #4]	; (8009830 <__errno+0x8>)
 800982a:	6818      	ldr	r0, [r3, #0]
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	2000000c 	.word	0x2000000c

08009834 <__libc_init_array>:
 8009834:	b570      	push	{r4, r5, r6, lr}
 8009836:	4d0d      	ldr	r5, [pc, #52]	; (800986c <__libc_init_array+0x38>)
 8009838:	4c0d      	ldr	r4, [pc, #52]	; (8009870 <__libc_init_array+0x3c>)
 800983a:	1b64      	subs	r4, r4, r5
 800983c:	10a4      	asrs	r4, r4, #2
 800983e:	2600      	movs	r6, #0
 8009840:	42a6      	cmp	r6, r4
 8009842:	d109      	bne.n	8009858 <__libc_init_array+0x24>
 8009844:	4d0b      	ldr	r5, [pc, #44]	; (8009874 <__libc_init_array+0x40>)
 8009846:	4c0c      	ldr	r4, [pc, #48]	; (8009878 <__libc_init_array+0x44>)
 8009848:	f001 f98a 	bl	800ab60 <_init>
 800984c:	1b64      	subs	r4, r4, r5
 800984e:	10a4      	asrs	r4, r4, #2
 8009850:	2600      	movs	r6, #0
 8009852:	42a6      	cmp	r6, r4
 8009854:	d105      	bne.n	8009862 <__libc_init_array+0x2e>
 8009856:	bd70      	pop	{r4, r5, r6, pc}
 8009858:	f855 3b04 	ldr.w	r3, [r5], #4
 800985c:	4798      	blx	r3
 800985e:	3601      	adds	r6, #1
 8009860:	e7ee      	b.n	8009840 <__libc_init_array+0xc>
 8009862:	f855 3b04 	ldr.w	r3, [r5], #4
 8009866:	4798      	blx	r3
 8009868:	3601      	adds	r6, #1
 800986a:	e7f2      	b.n	8009852 <__libc_init_array+0x1e>
 800986c:	0800ad50 	.word	0x0800ad50
 8009870:	0800ad50 	.word	0x0800ad50
 8009874:	0800ad50 	.word	0x0800ad50
 8009878:	0800ad54 	.word	0x0800ad54

0800987c <memset>:
 800987c:	4402      	add	r2, r0
 800987e:	4603      	mov	r3, r0
 8009880:	4293      	cmp	r3, r2
 8009882:	d100      	bne.n	8009886 <memset+0xa>
 8009884:	4770      	bx	lr
 8009886:	f803 1b01 	strb.w	r1, [r3], #1
 800988a:	e7f9      	b.n	8009880 <memset+0x4>

0800988c <iprintf>:
 800988c:	b40f      	push	{r0, r1, r2, r3}
 800988e:	4b0a      	ldr	r3, [pc, #40]	; (80098b8 <iprintf+0x2c>)
 8009890:	b513      	push	{r0, r1, r4, lr}
 8009892:	681c      	ldr	r4, [r3, #0]
 8009894:	b124      	cbz	r4, 80098a0 <iprintf+0x14>
 8009896:	69a3      	ldr	r3, [r4, #24]
 8009898:	b913      	cbnz	r3, 80098a0 <iprintf+0x14>
 800989a:	4620      	mov	r0, r4
 800989c:	f000 f886 	bl	80099ac <__sinit>
 80098a0:	ab05      	add	r3, sp, #20
 80098a2:	9a04      	ldr	r2, [sp, #16]
 80098a4:	68a1      	ldr	r1, [r4, #8]
 80098a6:	9301      	str	r3, [sp, #4]
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fb39 	bl	8009f20 <_vfiprintf_r>
 80098ae:	b002      	add	sp, #8
 80098b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098b4:	b004      	add	sp, #16
 80098b6:	4770      	bx	lr
 80098b8:	2000000c 	.word	0x2000000c

080098bc <siprintf>:
 80098bc:	b40e      	push	{r1, r2, r3}
 80098be:	b500      	push	{lr}
 80098c0:	b09c      	sub	sp, #112	; 0x70
 80098c2:	ab1d      	add	r3, sp, #116	; 0x74
 80098c4:	9002      	str	r0, [sp, #8]
 80098c6:	9006      	str	r0, [sp, #24]
 80098c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098cc:	4809      	ldr	r0, [pc, #36]	; (80098f4 <siprintf+0x38>)
 80098ce:	9107      	str	r1, [sp, #28]
 80098d0:	9104      	str	r1, [sp, #16]
 80098d2:	4909      	ldr	r1, [pc, #36]	; (80098f8 <siprintf+0x3c>)
 80098d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d8:	9105      	str	r1, [sp, #20]
 80098da:	6800      	ldr	r0, [r0, #0]
 80098dc:	9301      	str	r3, [sp, #4]
 80098de:	a902      	add	r1, sp, #8
 80098e0:	f000 f9f4 	bl	8009ccc <_svfiprintf_r>
 80098e4:	9b02      	ldr	r3, [sp, #8]
 80098e6:	2200      	movs	r2, #0
 80098e8:	701a      	strb	r2, [r3, #0]
 80098ea:	b01c      	add	sp, #112	; 0x70
 80098ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f0:	b003      	add	sp, #12
 80098f2:	4770      	bx	lr
 80098f4:	2000000c 	.word	0x2000000c
 80098f8:	ffff0208 	.word	0xffff0208

080098fc <std>:
 80098fc:	2300      	movs	r3, #0
 80098fe:	b510      	push	{r4, lr}
 8009900:	4604      	mov	r4, r0
 8009902:	e9c0 3300 	strd	r3, r3, [r0]
 8009906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800990a:	6083      	str	r3, [r0, #8]
 800990c:	8181      	strh	r1, [r0, #12]
 800990e:	6643      	str	r3, [r0, #100]	; 0x64
 8009910:	81c2      	strh	r2, [r0, #14]
 8009912:	6183      	str	r3, [r0, #24]
 8009914:	4619      	mov	r1, r3
 8009916:	2208      	movs	r2, #8
 8009918:	305c      	adds	r0, #92	; 0x5c
 800991a:	f7ff ffaf 	bl	800987c <memset>
 800991e:	4b05      	ldr	r3, [pc, #20]	; (8009934 <std+0x38>)
 8009920:	6263      	str	r3, [r4, #36]	; 0x24
 8009922:	4b05      	ldr	r3, [pc, #20]	; (8009938 <std+0x3c>)
 8009924:	62a3      	str	r3, [r4, #40]	; 0x28
 8009926:	4b05      	ldr	r3, [pc, #20]	; (800993c <std+0x40>)
 8009928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <std+0x44>)
 800992c:	6224      	str	r4, [r4, #32]
 800992e:	6323      	str	r3, [r4, #48]	; 0x30
 8009930:	bd10      	pop	{r4, pc}
 8009932:	bf00      	nop
 8009934:	0800a4c9 	.word	0x0800a4c9
 8009938:	0800a4eb 	.word	0x0800a4eb
 800993c:	0800a523 	.word	0x0800a523
 8009940:	0800a547 	.word	0x0800a547

08009944 <_cleanup_r>:
 8009944:	4901      	ldr	r1, [pc, #4]	; (800994c <_cleanup_r+0x8>)
 8009946:	f000 b8af 	b.w	8009aa8 <_fwalk_reent>
 800994a:	bf00      	nop
 800994c:	0800a821 	.word	0x0800a821

08009950 <__sfmoreglue>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	2268      	movs	r2, #104	; 0x68
 8009954:	1e4d      	subs	r5, r1, #1
 8009956:	4355      	muls	r5, r2
 8009958:	460e      	mov	r6, r1
 800995a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800995e:	f000 f8e5 	bl	8009b2c <_malloc_r>
 8009962:	4604      	mov	r4, r0
 8009964:	b140      	cbz	r0, 8009978 <__sfmoreglue+0x28>
 8009966:	2100      	movs	r1, #0
 8009968:	e9c0 1600 	strd	r1, r6, [r0]
 800996c:	300c      	adds	r0, #12
 800996e:	60a0      	str	r0, [r4, #8]
 8009970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009974:	f7ff ff82 	bl	800987c <memset>
 8009978:	4620      	mov	r0, r4
 800997a:	bd70      	pop	{r4, r5, r6, pc}

0800997c <__sfp_lock_acquire>:
 800997c:	4801      	ldr	r0, [pc, #4]	; (8009984 <__sfp_lock_acquire+0x8>)
 800997e:	f000 b8b3 	b.w	8009ae8 <__retarget_lock_acquire_recursive>
 8009982:	bf00      	nop
 8009984:	20000799 	.word	0x20000799

08009988 <__sfp_lock_release>:
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <__sfp_lock_release+0x8>)
 800998a:	f000 b8ae 	b.w	8009aea <__retarget_lock_release_recursive>
 800998e:	bf00      	nop
 8009990:	20000799 	.word	0x20000799

08009994 <__sinit_lock_acquire>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__sinit_lock_acquire+0x8>)
 8009996:	f000 b8a7 	b.w	8009ae8 <__retarget_lock_acquire_recursive>
 800999a:	bf00      	nop
 800999c:	2000079a 	.word	0x2000079a

080099a0 <__sinit_lock_release>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__sinit_lock_release+0x8>)
 80099a2:	f000 b8a2 	b.w	8009aea <__retarget_lock_release_recursive>
 80099a6:	bf00      	nop
 80099a8:	2000079a 	.word	0x2000079a

080099ac <__sinit>:
 80099ac:	b510      	push	{r4, lr}
 80099ae:	4604      	mov	r4, r0
 80099b0:	f7ff fff0 	bl	8009994 <__sinit_lock_acquire>
 80099b4:	69a3      	ldr	r3, [r4, #24]
 80099b6:	b11b      	cbz	r3, 80099c0 <__sinit+0x14>
 80099b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099bc:	f7ff bff0 	b.w	80099a0 <__sinit_lock_release>
 80099c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099c4:	6523      	str	r3, [r4, #80]	; 0x50
 80099c6:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <__sinit+0x68>)
 80099c8:	4a13      	ldr	r2, [pc, #76]	; (8009a18 <__sinit+0x6c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80099ce:	42a3      	cmp	r3, r4
 80099d0:	bf04      	itt	eq
 80099d2:	2301      	moveq	r3, #1
 80099d4:	61a3      	streq	r3, [r4, #24]
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 f820 	bl	8009a1c <__sfp>
 80099dc:	6060      	str	r0, [r4, #4]
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 f81c 	bl	8009a1c <__sfp>
 80099e4:	60a0      	str	r0, [r4, #8]
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 f818 	bl	8009a1c <__sfp>
 80099ec:	2200      	movs	r2, #0
 80099ee:	60e0      	str	r0, [r4, #12]
 80099f0:	2104      	movs	r1, #4
 80099f2:	6860      	ldr	r0, [r4, #4]
 80099f4:	f7ff ff82 	bl	80098fc <std>
 80099f8:	68a0      	ldr	r0, [r4, #8]
 80099fa:	2201      	movs	r2, #1
 80099fc:	2109      	movs	r1, #9
 80099fe:	f7ff ff7d 	bl	80098fc <std>
 8009a02:	68e0      	ldr	r0, [r4, #12]
 8009a04:	2202      	movs	r2, #2
 8009a06:	2112      	movs	r1, #18
 8009a08:	f7ff ff78 	bl	80098fc <std>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	61a3      	str	r3, [r4, #24]
 8009a10:	e7d2      	b.n	80099b8 <__sinit+0xc>
 8009a12:	bf00      	nop
 8009a14:	0800acb0 	.word	0x0800acb0
 8009a18:	08009945 	.word	0x08009945

08009a1c <__sfp>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	4607      	mov	r7, r0
 8009a20:	f7ff ffac 	bl	800997c <__sfp_lock_acquire>
 8009a24:	4b1e      	ldr	r3, [pc, #120]	; (8009aa0 <__sfp+0x84>)
 8009a26:	681e      	ldr	r6, [r3, #0]
 8009a28:	69b3      	ldr	r3, [r6, #24]
 8009a2a:	b913      	cbnz	r3, 8009a32 <__sfp+0x16>
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ffbd 	bl	80099ac <__sinit>
 8009a32:	3648      	adds	r6, #72	; 0x48
 8009a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	d503      	bpl.n	8009a44 <__sfp+0x28>
 8009a3c:	6833      	ldr	r3, [r6, #0]
 8009a3e:	b30b      	cbz	r3, 8009a84 <__sfp+0x68>
 8009a40:	6836      	ldr	r6, [r6, #0]
 8009a42:	e7f7      	b.n	8009a34 <__sfp+0x18>
 8009a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a48:	b9d5      	cbnz	r5, 8009a80 <__sfp+0x64>
 8009a4a:	4b16      	ldr	r3, [pc, #88]	; (8009aa4 <__sfp+0x88>)
 8009a4c:	60e3      	str	r3, [r4, #12]
 8009a4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a52:	6665      	str	r5, [r4, #100]	; 0x64
 8009a54:	f000 f847 	bl	8009ae6 <__retarget_lock_init_recursive>
 8009a58:	f7ff ff96 	bl	8009988 <__sfp_lock_release>
 8009a5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a64:	6025      	str	r5, [r4, #0]
 8009a66:	61a5      	str	r5, [r4, #24]
 8009a68:	2208      	movs	r2, #8
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a70:	f7ff ff04 	bl	800987c <memset>
 8009a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a80:	3468      	adds	r4, #104	; 0x68
 8009a82:	e7d9      	b.n	8009a38 <__sfp+0x1c>
 8009a84:	2104      	movs	r1, #4
 8009a86:	4638      	mov	r0, r7
 8009a88:	f7ff ff62 	bl	8009950 <__sfmoreglue>
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	6030      	str	r0, [r6, #0]
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d1d5      	bne.n	8009a40 <__sfp+0x24>
 8009a94:	f7ff ff78 	bl	8009988 <__sfp_lock_release>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	e7ee      	b.n	8009a7c <__sfp+0x60>
 8009a9e:	bf00      	nop
 8009aa0:	0800acb0 	.word	0x0800acb0
 8009aa4:	ffff0001 	.word	0xffff0001

08009aa8 <_fwalk_reent>:
 8009aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aac:	4606      	mov	r6, r0
 8009aae:	4688      	mov	r8, r1
 8009ab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ab4:	2700      	movs	r7, #0
 8009ab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aba:	f1b9 0901 	subs.w	r9, r9, #1
 8009abe:	d505      	bpl.n	8009acc <_fwalk_reent+0x24>
 8009ac0:	6824      	ldr	r4, [r4, #0]
 8009ac2:	2c00      	cmp	r4, #0
 8009ac4:	d1f7      	bne.n	8009ab6 <_fwalk_reent+0xe>
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009acc:	89ab      	ldrh	r3, [r5, #12]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d907      	bls.n	8009ae2 <_fwalk_reent+0x3a>
 8009ad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	d003      	beq.n	8009ae2 <_fwalk_reent+0x3a>
 8009ada:	4629      	mov	r1, r5
 8009adc:	4630      	mov	r0, r6
 8009ade:	47c0      	blx	r8
 8009ae0:	4307      	orrs	r7, r0
 8009ae2:	3568      	adds	r5, #104	; 0x68
 8009ae4:	e7e9      	b.n	8009aba <_fwalk_reent+0x12>

08009ae6 <__retarget_lock_init_recursive>:
 8009ae6:	4770      	bx	lr

08009ae8 <__retarget_lock_acquire_recursive>:
 8009ae8:	4770      	bx	lr

08009aea <__retarget_lock_release_recursive>:
 8009aea:	4770      	bx	lr

08009aec <sbrk_aligned>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	4e0e      	ldr	r6, [pc, #56]	; (8009b28 <sbrk_aligned+0x3c>)
 8009af0:	460c      	mov	r4, r1
 8009af2:	6831      	ldr	r1, [r6, #0]
 8009af4:	4605      	mov	r5, r0
 8009af6:	b911      	cbnz	r1, 8009afe <sbrk_aligned+0x12>
 8009af8:	f000 fcd6 	bl	800a4a8 <_sbrk_r>
 8009afc:	6030      	str	r0, [r6, #0]
 8009afe:	4621      	mov	r1, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 fcd1 	bl	800a4a8 <_sbrk_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d00a      	beq.n	8009b20 <sbrk_aligned+0x34>
 8009b0a:	1cc4      	adds	r4, r0, #3
 8009b0c:	f024 0403 	bic.w	r4, r4, #3
 8009b10:	42a0      	cmp	r0, r4
 8009b12:	d007      	beq.n	8009b24 <sbrk_aligned+0x38>
 8009b14:	1a21      	subs	r1, r4, r0
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 fcc6 	bl	800a4a8 <_sbrk_r>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d101      	bne.n	8009b24 <sbrk_aligned+0x38>
 8009b20:	f04f 34ff 	mov.w	r4, #4294967295
 8009b24:	4620      	mov	r0, r4
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	200007a0 	.word	0x200007a0

08009b2c <_malloc_r>:
 8009b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b30:	1ccd      	adds	r5, r1, #3
 8009b32:	f025 0503 	bic.w	r5, r5, #3
 8009b36:	3508      	adds	r5, #8
 8009b38:	2d0c      	cmp	r5, #12
 8009b3a:	bf38      	it	cc
 8009b3c:	250c      	movcc	r5, #12
 8009b3e:	2d00      	cmp	r5, #0
 8009b40:	4607      	mov	r7, r0
 8009b42:	db01      	blt.n	8009b48 <_malloc_r+0x1c>
 8009b44:	42a9      	cmp	r1, r5
 8009b46:	d905      	bls.n	8009b54 <_malloc_r+0x28>
 8009b48:	230c      	movs	r3, #12
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	2600      	movs	r6, #0
 8009b4e:	4630      	mov	r0, r6
 8009b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b54:	4e2e      	ldr	r6, [pc, #184]	; (8009c10 <_malloc_r+0xe4>)
 8009b56:	f000 ff3f 	bl	800a9d8 <__malloc_lock>
 8009b5a:	6833      	ldr	r3, [r6, #0]
 8009b5c:	461c      	mov	r4, r3
 8009b5e:	bb34      	cbnz	r4, 8009bae <_malloc_r+0x82>
 8009b60:	4629      	mov	r1, r5
 8009b62:	4638      	mov	r0, r7
 8009b64:	f7ff ffc2 	bl	8009aec <sbrk_aligned>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	d14d      	bne.n	8009c0a <_malloc_r+0xde>
 8009b6e:	6834      	ldr	r4, [r6, #0]
 8009b70:	4626      	mov	r6, r4
 8009b72:	2e00      	cmp	r6, #0
 8009b74:	d140      	bne.n	8009bf8 <_malloc_r+0xcc>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	eb04 0803 	add.w	r8, r4, r3
 8009b80:	f000 fc92 	bl	800a4a8 <_sbrk_r>
 8009b84:	4580      	cmp	r8, r0
 8009b86:	d13a      	bne.n	8009bfe <_malloc_r+0xd2>
 8009b88:	6821      	ldr	r1, [r4, #0]
 8009b8a:	3503      	adds	r5, #3
 8009b8c:	1a6d      	subs	r5, r5, r1
 8009b8e:	f025 0503 	bic.w	r5, r5, #3
 8009b92:	3508      	adds	r5, #8
 8009b94:	2d0c      	cmp	r5, #12
 8009b96:	bf38      	it	cc
 8009b98:	250c      	movcc	r5, #12
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	f7ff ffa5 	bl	8009aec <sbrk_aligned>
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	d02b      	beq.n	8009bfe <_malloc_r+0xd2>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	442b      	add	r3, r5
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	e00e      	b.n	8009bcc <_malloc_r+0xa0>
 8009bae:	6822      	ldr	r2, [r4, #0]
 8009bb0:	1b52      	subs	r2, r2, r5
 8009bb2:	d41e      	bmi.n	8009bf2 <_malloc_r+0xc6>
 8009bb4:	2a0b      	cmp	r2, #11
 8009bb6:	d916      	bls.n	8009be6 <_malloc_r+0xba>
 8009bb8:	1961      	adds	r1, r4, r5
 8009bba:	42a3      	cmp	r3, r4
 8009bbc:	6025      	str	r5, [r4, #0]
 8009bbe:	bf18      	it	ne
 8009bc0:	6059      	strne	r1, [r3, #4]
 8009bc2:	6863      	ldr	r3, [r4, #4]
 8009bc4:	bf08      	it	eq
 8009bc6:	6031      	streq	r1, [r6, #0]
 8009bc8:	5162      	str	r2, [r4, r5]
 8009bca:	604b      	str	r3, [r1, #4]
 8009bcc:	4638      	mov	r0, r7
 8009bce:	f104 060b 	add.w	r6, r4, #11
 8009bd2:	f000 ff07 	bl	800a9e4 <__malloc_unlock>
 8009bd6:	f026 0607 	bic.w	r6, r6, #7
 8009bda:	1d23      	adds	r3, r4, #4
 8009bdc:	1af2      	subs	r2, r6, r3
 8009bde:	d0b6      	beq.n	8009b4e <_malloc_r+0x22>
 8009be0:	1b9b      	subs	r3, r3, r6
 8009be2:	50a3      	str	r3, [r4, r2]
 8009be4:	e7b3      	b.n	8009b4e <_malloc_r+0x22>
 8009be6:	6862      	ldr	r2, [r4, #4]
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	bf0c      	ite	eq
 8009bec:	6032      	streq	r2, [r6, #0]
 8009bee:	605a      	strne	r2, [r3, #4]
 8009bf0:	e7ec      	b.n	8009bcc <_malloc_r+0xa0>
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	6864      	ldr	r4, [r4, #4]
 8009bf6:	e7b2      	b.n	8009b5e <_malloc_r+0x32>
 8009bf8:	4634      	mov	r4, r6
 8009bfa:	6876      	ldr	r6, [r6, #4]
 8009bfc:	e7b9      	b.n	8009b72 <_malloc_r+0x46>
 8009bfe:	230c      	movs	r3, #12
 8009c00:	603b      	str	r3, [r7, #0]
 8009c02:	4638      	mov	r0, r7
 8009c04:	f000 feee 	bl	800a9e4 <__malloc_unlock>
 8009c08:	e7a1      	b.n	8009b4e <_malloc_r+0x22>
 8009c0a:	6025      	str	r5, [r4, #0]
 8009c0c:	e7de      	b.n	8009bcc <_malloc_r+0xa0>
 8009c0e:	bf00      	nop
 8009c10:	2000079c 	.word	0x2000079c

08009c14 <__ssputs_r>:
 8009c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c18:	688e      	ldr	r6, [r1, #8]
 8009c1a:	429e      	cmp	r6, r3
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	4690      	mov	r8, r2
 8009c22:	461f      	mov	r7, r3
 8009c24:	d838      	bhi.n	8009c98 <__ssputs_r+0x84>
 8009c26:	898a      	ldrh	r2, [r1, #12]
 8009c28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c2c:	d032      	beq.n	8009c94 <__ssputs_r+0x80>
 8009c2e:	6825      	ldr	r5, [r4, #0]
 8009c30:	6909      	ldr	r1, [r1, #16]
 8009c32:	eba5 0901 	sub.w	r9, r5, r1
 8009c36:	6965      	ldr	r5, [r4, #20]
 8009c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c40:	3301      	adds	r3, #1
 8009c42:	444b      	add	r3, r9
 8009c44:	106d      	asrs	r5, r5, #1
 8009c46:	429d      	cmp	r5, r3
 8009c48:	bf38      	it	cc
 8009c4a:	461d      	movcc	r5, r3
 8009c4c:	0553      	lsls	r3, r2, #21
 8009c4e:	d531      	bpl.n	8009cb4 <__ssputs_r+0xa0>
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7ff ff6b 	bl	8009b2c <_malloc_r>
 8009c56:	4606      	mov	r6, r0
 8009c58:	b950      	cbnz	r0, 8009c70 <__ssputs_r+0x5c>
 8009c5a:	230c      	movs	r3, #12
 8009c5c:	f8ca 3000 	str.w	r3, [sl]
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c66:	81a3      	strh	r3, [r4, #12]
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c70:	6921      	ldr	r1, [r4, #16]
 8009c72:	464a      	mov	r2, r9
 8009c74:	f000 fe88 	bl	800a988 <memcpy>
 8009c78:	89a3      	ldrh	r3, [r4, #12]
 8009c7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	6126      	str	r6, [r4, #16]
 8009c86:	6165      	str	r5, [r4, #20]
 8009c88:	444e      	add	r6, r9
 8009c8a:	eba5 0509 	sub.w	r5, r5, r9
 8009c8e:	6026      	str	r6, [r4, #0]
 8009c90:	60a5      	str	r5, [r4, #8]
 8009c92:	463e      	mov	r6, r7
 8009c94:	42be      	cmp	r6, r7
 8009c96:	d900      	bls.n	8009c9a <__ssputs_r+0x86>
 8009c98:	463e      	mov	r6, r7
 8009c9a:	6820      	ldr	r0, [r4, #0]
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	4641      	mov	r1, r8
 8009ca0:	f000 fe80 	bl	800a9a4 <memmove>
 8009ca4:	68a3      	ldr	r3, [r4, #8]
 8009ca6:	1b9b      	subs	r3, r3, r6
 8009ca8:	60a3      	str	r3, [r4, #8]
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	4433      	add	r3, r6
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	e7db      	b.n	8009c6c <__ssputs_r+0x58>
 8009cb4:	462a      	mov	r2, r5
 8009cb6:	f000 fee7 	bl	800aa88 <_realloc_r>
 8009cba:	4606      	mov	r6, r0
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d1e1      	bne.n	8009c84 <__ssputs_r+0x70>
 8009cc0:	6921      	ldr	r1, [r4, #16]
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	f000 fe94 	bl	800a9f0 <_free_r>
 8009cc8:	e7c7      	b.n	8009c5a <__ssputs_r+0x46>
	...

08009ccc <_svfiprintf_r>:
 8009ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd0:	4698      	mov	r8, r3
 8009cd2:	898b      	ldrh	r3, [r1, #12]
 8009cd4:	061b      	lsls	r3, r3, #24
 8009cd6:	b09d      	sub	sp, #116	; 0x74
 8009cd8:	4607      	mov	r7, r0
 8009cda:	460d      	mov	r5, r1
 8009cdc:	4614      	mov	r4, r2
 8009cde:	d50e      	bpl.n	8009cfe <_svfiprintf_r+0x32>
 8009ce0:	690b      	ldr	r3, [r1, #16]
 8009ce2:	b963      	cbnz	r3, 8009cfe <_svfiprintf_r+0x32>
 8009ce4:	2140      	movs	r1, #64	; 0x40
 8009ce6:	f7ff ff21 	bl	8009b2c <_malloc_r>
 8009cea:	6028      	str	r0, [r5, #0]
 8009cec:	6128      	str	r0, [r5, #16]
 8009cee:	b920      	cbnz	r0, 8009cfa <_svfiprintf_r+0x2e>
 8009cf0:	230c      	movs	r3, #12
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	e0d1      	b.n	8009e9e <_svfiprintf_r+0x1d2>
 8009cfa:	2340      	movs	r3, #64	; 0x40
 8009cfc:	616b      	str	r3, [r5, #20]
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9309      	str	r3, [sp, #36]	; 0x24
 8009d02:	2320      	movs	r3, #32
 8009d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d0c:	2330      	movs	r3, #48	; 0x30
 8009d0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009eb8 <_svfiprintf_r+0x1ec>
 8009d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d16:	f04f 0901 	mov.w	r9, #1
 8009d1a:	4623      	mov	r3, r4
 8009d1c:	469a      	mov	sl, r3
 8009d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d22:	b10a      	cbz	r2, 8009d28 <_svfiprintf_r+0x5c>
 8009d24:	2a25      	cmp	r2, #37	; 0x25
 8009d26:	d1f9      	bne.n	8009d1c <_svfiprintf_r+0x50>
 8009d28:	ebba 0b04 	subs.w	fp, sl, r4
 8009d2c:	d00b      	beq.n	8009d46 <_svfiprintf_r+0x7a>
 8009d2e:	465b      	mov	r3, fp
 8009d30:	4622      	mov	r2, r4
 8009d32:	4629      	mov	r1, r5
 8009d34:	4638      	mov	r0, r7
 8009d36:	f7ff ff6d 	bl	8009c14 <__ssputs_r>
 8009d3a:	3001      	adds	r0, #1
 8009d3c:	f000 80aa 	beq.w	8009e94 <_svfiprintf_r+0x1c8>
 8009d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d42:	445a      	add	r2, fp
 8009d44:	9209      	str	r2, [sp, #36]	; 0x24
 8009d46:	f89a 3000 	ldrb.w	r3, [sl]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 80a2 	beq.w	8009e94 <_svfiprintf_r+0x1c8>
 8009d50:	2300      	movs	r3, #0
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295
 8009d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d5a:	f10a 0a01 	add.w	sl, sl, #1
 8009d5e:	9304      	str	r3, [sp, #16]
 8009d60:	9307      	str	r3, [sp, #28]
 8009d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d66:	931a      	str	r3, [sp, #104]	; 0x68
 8009d68:	4654      	mov	r4, sl
 8009d6a:	2205      	movs	r2, #5
 8009d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d70:	4851      	ldr	r0, [pc, #324]	; (8009eb8 <_svfiprintf_r+0x1ec>)
 8009d72:	f7f6 fa55 	bl	8000220 <memchr>
 8009d76:	9a04      	ldr	r2, [sp, #16]
 8009d78:	b9d8      	cbnz	r0, 8009db2 <_svfiprintf_r+0xe6>
 8009d7a:	06d0      	lsls	r0, r2, #27
 8009d7c:	bf44      	itt	mi
 8009d7e:	2320      	movmi	r3, #32
 8009d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d84:	0711      	lsls	r1, r2, #28
 8009d86:	bf44      	itt	mi
 8009d88:	232b      	movmi	r3, #43	; 0x2b
 8009d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d92:	2b2a      	cmp	r3, #42	; 0x2a
 8009d94:	d015      	beq.n	8009dc2 <_svfiprintf_r+0xf6>
 8009d96:	9a07      	ldr	r2, [sp, #28]
 8009d98:	4654      	mov	r4, sl
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	f04f 0c0a 	mov.w	ip, #10
 8009da0:	4621      	mov	r1, r4
 8009da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009da6:	3b30      	subs	r3, #48	; 0x30
 8009da8:	2b09      	cmp	r3, #9
 8009daa:	d94e      	bls.n	8009e4a <_svfiprintf_r+0x17e>
 8009dac:	b1b0      	cbz	r0, 8009ddc <_svfiprintf_r+0x110>
 8009dae:	9207      	str	r2, [sp, #28]
 8009db0:	e014      	b.n	8009ddc <_svfiprintf_r+0x110>
 8009db2:	eba0 0308 	sub.w	r3, r0, r8
 8009db6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	9304      	str	r3, [sp, #16]
 8009dbe:	46a2      	mov	sl, r4
 8009dc0:	e7d2      	b.n	8009d68 <_svfiprintf_r+0x9c>
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	1d19      	adds	r1, r3, #4
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	9103      	str	r1, [sp, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	bfbb      	ittet	lt
 8009dce:	425b      	neglt	r3, r3
 8009dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8009dd4:	9307      	strge	r3, [sp, #28]
 8009dd6:	9307      	strlt	r3, [sp, #28]
 8009dd8:	bfb8      	it	lt
 8009dda:	9204      	strlt	r2, [sp, #16]
 8009ddc:	7823      	ldrb	r3, [r4, #0]
 8009dde:	2b2e      	cmp	r3, #46	; 0x2e
 8009de0:	d10c      	bne.n	8009dfc <_svfiprintf_r+0x130>
 8009de2:	7863      	ldrb	r3, [r4, #1]
 8009de4:	2b2a      	cmp	r3, #42	; 0x2a
 8009de6:	d135      	bne.n	8009e54 <_svfiprintf_r+0x188>
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	1d1a      	adds	r2, r3, #4
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	9203      	str	r2, [sp, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	bfb8      	it	lt
 8009df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009df8:	3402      	adds	r4, #2
 8009dfa:	9305      	str	r3, [sp, #20]
 8009dfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ec8 <_svfiprintf_r+0x1fc>
 8009e00:	7821      	ldrb	r1, [r4, #0]
 8009e02:	2203      	movs	r2, #3
 8009e04:	4650      	mov	r0, sl
 8009e06:	f7f6 fa0b 	bl	8000220 <memchr>
 8009e0a:	b140      	cbz	r0, 8009e1e <_svfiprintf_r+0x152>
 8009e0c:	2340      	movs	r3, #64	; 0x40
 8009e0e:	eba0 000a 	sub.w	r0, r0, sl
 8009e12:	fa03 f000 	lsl.w	r0, r3, r0
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	4303      	orrs	r3, r0
 8009e1a:	3401      	adds	r4, #1
 8009e1c:	9304      	str	r3, [sp, #16]
 8009e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e22:	4826      	ldr	r0, [pc, #152]	; (8009ebc <_svfiprintf_r+0x1f0>)
 8009e24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e28:	2206      	movs	r2, #6
 8009e2a:	f7f6 f9f9 	bl	8000220 <memchr>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d038      	beq.n	8009ea4 <_svfiprintf_r+0x1d8>
 8009e32:	4b23      	ldr	r3, [pc, #140]	; (8009ec0 <_svfiprintf_r+0x1f4>)
 8009e34:	bb1b      	cbnz	r3, 8009e7e <_svfiprintf_r+0x1b2>
 8009e36:	9b03      	ldr	r3, [sp, #12]
 8009e38:	3307      	adds	r3, #7
 8009e3a:	f023 0307 	bic.w	r3, r3, #7
 8009e3e:	3308      	adds	r3, #8
 8009e40:	9303      	str	r3, [sp, #12]
 8009e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e44:	4433      	add	r3, r6
 8009e46:	9309      	str	r3, [sp, #36]	; 0x24
 8009e48:	e767      	b.n	8009d1a <_svfiprintf_r+0x4e>
 8009e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e4e:	460c      	mov	r4, r1
 8009e50:	2001      	movs	r0, #1
 8009e52:	e7a5      	b.n	8009da0 <_svfiprintf_r+0xd4>
 8009e54:	2300      	movs	r3, #0
 8009e56:	3401      	adds	r4, #1
 8009e58:	9305      	str	r3, [sp, #20]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	f04f 0c0a 	mov.w	ip, #10
 8009e60:	4620      	mov	r0, r4
 8009e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e66:	3a30      	subs	r2, #48	; 0x30
 8009e68:	2a09      	cmp	r2, #9
 8009e6a:	d903      	bls.n	8009e74 <_svfiprintf_r+0x1a8>
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0c5      	beq.n	8009dfc <_svfiprintf_r+0x130>
 8009e70:	9105      	str	r1, [sp, #20]
 8009e72:	e7c3      	b.n	8009dfc <_svfiprintf_r+0x130>
 8009e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e78:	4604      	mov	r4, r0
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e7f0      	b.n	8009e60 <_svfiprintf_r+0x194>
 8009e7e:	ab03      	add	r3, sp, #12
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	462a      	mov	r2, r5
 8009e84:	4b0f      	ldr	r3, [pc, #60]	; (8009ec4 <_svfiprintf_r+0x1f8>)
 8009e86:	a904      	add	r1, sp, #16
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f3af 8000 	nop.w
 8009e8e:	1c42      	adds	r2, r0, #1
 8009e90:	4606      	mov	r6, r0
 8009e92:	d1d6      	bne.n	8009e42 <_svfiprintf_r+0x176>
 8009e94:	89ab      	ldrh	r3, [r5, #12]
 8009e96:	065b      	lsls	r3, r3, #25
 8009e98:	f53f af2c 	bmi.w	8009cf4 <_svfiprintf_r+0x28>
 8009e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e9e:	b01d      	add	sp, #116	; 0x74
 8009ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea4:	ab03      	add	r3, sp, #12
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	462a      	mov	r2, r5
 8009eaa:	4b06      	ldr	r3, [pc, #24]	; (8009ec4 <_svfiprintf_r+0x1f8>)
 8009eac:	a904      	add	r1, sp, #16
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f000 f9d4 	bl	800a25c <_printf_i>
 8009eb4:	e7eb      	b.n	8009e8e <_svfiprintf_r+0x1c2>
 8009eb6:	bf00      	nop
 8009eb8:	0800ad14 	.word	0x0800ad14
 8009ebc:	0800ad1e 	.word	0x0800ad1e
 8009ec0:	00000000 	.word	0x00000000
 8009ec4:	08009c15 	.word	0x08009c15
 8009ec8:	0800ad1a 	.word	0x0800ad1a

08009ecc <__sfputc_r>:
 8009ecc:	6893      	ldr	r3, [r2, #8]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	b410      	push	{r4}
 8009ed4:	6093      	str	r3, [r2, #8]
 8009ed6:	da08      	bge.n	8009eea <__sfputc_r+0x1e>
 8009ed8:	6994      	ldr	r4, [r2, #24]
 8009eda:	42a3      	cmp	r3, r4
 8009edc:	db01      	blt.n	8009ee2 <__sfputc_r+0x16>
 8009ede:	290a      	cmp	r1, #10
 8009ee0:	d103      	bne.n	8009eea <__sfputc_r+0x1e>
 8009ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ee6:	f000 bb33 	b.w	800a550 <__swbuf_r>
 8009eea:	6813      	ldr	r3, [r2, #0]
 8009eec:	1c58      	adds	r0, r3, #1
 8009eee:	6010      	str	r0, [r2, #0]
 8009ef0:	7019      	strb	r1, [r3, #0]
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <__sfputs_r>:
 8009efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efc:	4606      	mov	r6, r0
 8009efe:	460f      	mov	r7, r1
 8009f00:	4614      	mov	r4, r2
 8009f02:	18d5      	adds	r5, r2, r3
 8009f04:	42ac      	cmp	r4, r5
 8009f06:	d101      	bne.n	8009f0c <__sfputs_r+0x12>
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e007      	b.n	8009f1c <__sfputs_r+0x22>
 8009f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f10:	463a      	mov	r2, r7
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ffda 	bl	8009ecc <__sfputc_r>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d1f3      	bne.n	8009f04 <__sfputs_r+0xa>
 8009f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f20 <_vfiprintf_r>:
 8009f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	460d      	mov	r5, r1
 8009f26:	b09d      	sub	sp, #116	; 0x74
 8009f28:	4614      	mov	r4, r2
 8009f2a:	4698      	mov	r8, r3
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	b118      	cbz	r0, 8009f38 <_vfiprintf_r+0x18>
 8009f30:	6983      	ldr	r3, [r0, #24]
 8009f32:	b90b      	cbnz	r3, 8009f38 <_vfiprintf_r+0x18>
 8009f34:	f7ff fd3a 	bl	80099ac <__sinit>
 8009f38:	4b89      	ldr	r3, [pc, #548]	; (800a160 <_vfiprintf_r+0x240>)
 8009f3a:	429d      	cmp	r5, r3
 8009f3c:	d11b      	bne.n	8009f76 <_vfiprintf_r+0x56>
 8009f3e:	6875      	ldr	r5, [r6, #4]
 8009f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f42:	07d9      	lsls	r1, r3, #31
 8009f44:	d405      	bmi.n	8009f52 <_vfiprintf_r+0x32>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	059a      	lsls	r2, r3, #22
 8009f4a:	d402      	bmi.n	8009f52 <_vfiprintf_r+0x32>
 8009f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4e:	f7ff fdcb 	bl	8009ae8 <__retarget_lock_acquire_recursive>
 8009f52:	89ab      	ldrh	r3, [r5, #12]
 8009f54:	071b      	lsls	r3, r3, #28
 8009f56:	d501      	bpl.n	8009f5c <_vfiprintf_r+0x3c>
 8009f58:	692b      	ldr	r3, [r5, #16]
 8009f5a:	b9eb      	cbnz	r3, 8009f98 <_vfiprintf_r+0x78>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f000 fb5a 	bl	800a618 <__swsetup_r>
 8009f64:	b1c0      	cbz	r0, 8009f98 <_vfiprintf_r+0x78>
 8009f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f68:	07dc      	lsls	r4, r3, #31
 8009f6a:	d50e      	bpl.n	8009f8a <_vfiprintf_r+0x6a>
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	b01d      	add	sp, #116	; 0x74
 8009f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f76:	4b7b      	ldr	r3, [pc, #492]	; (800a164 <_vfiprintf_r+0x244>)
 8009f78:	429d      	cmp	r5, r3
 8009f7a:	d101      	bne.n	8009f80 <_vfiprintf_r+0x60>
 8009f7c:	68b5      	ldr	r5, [r6, #8]
 8009f7e:	e7df      	b.n	8009f40 <_vfiprintf_r+0x20>
 8009f80:	4b79      	ldr	r3, [pc, #484]	; (800a168 <_vfiprintf_r+0x248>)
 8009f82:	429d      	cmp	r5, r3
 8009f84:	bf08      	it	eq
 8009f86:	68f5      	ldreq	r5, [r6, #12]
 8009f88:	e7da      	b.n	8009f40 <_vfiprintf_r+0x20>
 8009f8a:	89ab      	ldrh	r3, [r5, #12]
 8009f8c:	0598      	lsls	r0, r3, #22
 8009f8e:	d4ed      	bmi.n	8009f6c <_vfiprintf_r+0x4c>
 8009f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f92:	f7ff fdaa 	bl	8009aea <__retarget_lock_release_recursive>
 8009f96:	e7e9      	b.n	8009f6c <_vfiprintf_r+0x4c>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9c:	2320      	movs	r3, #32
 8009f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa6:	2330      	movs	r3, #48	; 0x30
 8009fa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a16c <_vfiprintf_r+0x24c>
 8009fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fb0:	f04f 0901 	mov.w	r9, #1
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	469a      	mov	sl, r3
 8009fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fbc:	b10a      	cbz	r2, 8009fc2 <_vfiprintf_r+0xa2>
 8009fbe:	2a25      	cmp	r2, #37	; 0x25
 8009fc0:	d1f9      	bne.n	8009fb6 <_vfiprintf_r+0x96>
 8009fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc6:	d00b      	beq.n	8009fe0 <_vfiprintf_r+0xc0>
 8009fc8:	465b      	mov	r3, fp
 8009fca:	4622      	mov	r2, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f7ff ff93 	bl	8009efa <__sfputs_r>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f000 80aa 	beq.w	800a12e <_vfiprintf_r+0x20e>
 8009fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fdc:	445a      	add	r2, fp
 8009fde:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 80a2 	beq.w	800a12e <_vfiprintf_r+0x20e>
 8009fea:	2300      	movs	r3, #0
 8009fec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff4:	f10a 0a01 	add.w	sl, sl, #1
 8009ff8:	9304      	str	r3, [sp, #16]
 8009ffa:	9307      	str	r3, [sp, #28]
 8009ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a000:	931a      	str	r3, [sp, #104]	; 0x68
 800a002:	4654      	mov	r4, sl
 800a004:	2205      	movs	r2, #5
 800a006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00a:	4858      	ldr	r0, [pc, #352]	; (800a16c <_vfiprintf_r+0x24c>)
 800a00c:	f7f6 f908 	bl	8000220 <memchr>
 800a010:	9a04      	ldr	r2, [sp, #16]
 800a012:	b9d8      	cbnz	r0, 800a04c <_vfiprintf_r+0x12c>
 800a014:	06d1      	lsls	r1, r2, #27
 800a016:	bf44      	itt	mi
 800a018:	2320      	movmi	r3, #32
 800a01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a01e:	0713      	lsls	r3, r2, #28
 800a020:	bf44      	itt	mi
 800a022:	232b      	movmi	r3, #43	; 0x2b
 800a024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a028:	f89a 3000 	ldrb.w	r3, [sl]
 800a02c:	2b2a      	cmp	r3, #42	; 0x2a
 800a02e:	d015      	beq.n	800a05c <_vfiprintf_r+0x13c>
 800a030:	9a07      	ldr	r2, [sp, #28]
 800a032:	4654      	mov	r4, sl
 800a034:	2000      	movs	r0, #0
 800a036:	f04f 0c0a 	mov.w	ip, #10
 800a03a:	4621      	mov	r1, r4
 800a03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a040:	3b30      	subs	r3, #48	; 0x30
 800a042:	2b09      	cmp	r3, #9
 800a044:	d94e      	bls.n	800a0e4 <_vfiprintf_r+0x1c4>
 800a046:	b1b0      	cbz	r0, 800a076 <_vfiprintf_r+0x156>
 800a048:	9207      	str	r2, [sp, #28]
 800a04a:	e014      	b.n	800a076 <_vfiprintf_r+0x156>
 800a04c:	eba0 0308 	sub.w	r3, r0, r8
 800a050:	fa09 f303 	lsl.w	r3, r9, r3
 800a054:	4313      	orrs	r3, r2
 800a056:	9304      	str	r3, [sp, #16]
 800a058:	46a2      	mov	sl, r4
 800a05a:	e7d2      	b.n	800a002 <_vfiprintf_r+0xe2>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	1d19      	adds	r1, r3, #4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	9103      	str	r1, [sp, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	bfbb      	ittet	lt
 800a068:	425b      	neglt	r3, r3
 800a06a:	f042 0202 	orrlt.w	r2, r2, #2
 800a06e:	9307      	strge	r3, [sp, #28]
 800a070:	9307      	strlt	r3, [sp, #28]
 800a072:	bfb8      	it	lt
 800a074:	9204      	strlt	r2, [sp, #16]
 800a076:	7823      	ldrb	r3, [r4, #0]
 800a078:	2b2e      	cmp	r3, #46	; 0x2e
 800a07a:	d10c      	bne.n	800a096 <_vfiprintf_r+0x176>
 800a07c:	7863      	ldrb	r3, [r4, #1]
 800a07e:	2b2a      	cmp	r3, #42	; 0x2a
 800a080:	d135      	bne.n	800a0ee <_vfiprintf_r+0x1ce>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	1d1a      	adds	r2, r3, #4
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	9203      	str	r2, [sp, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bfb8      	it	lt
 800a08e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a092:	3402      	adds	r4, #2
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a17c <_vfiprintf_r+0x25c>
 800a09a:	7821      	ldrb	r1, [r4, #0]
 800a09c:	2203      	movs	r2, #3
 800a09e:	4650      	mov	r0, sl
 800a0a0:	f7f6 f8be 	bl	8000220 <memchr>
 800a0a4:	b140      	cbz	r0, 800a0b8 <_vfiprintf_r+0x198>
 800a0a6:	2340      	movs	r3, #64	; 0x40
 800a0a8:	eba0 000a 	sub.w	r0, r0, sl
 800a0ac:	fa03 f000 	lsl.w	r0, r3, r0
 800a0b0:	9b04      	ldr	r3, [sp, #16]
 800a0b2:	4303      	orrs	r3, r0
 800a0b4:	3401      	adds	r4, #1
 800a0b6:	9304      	str	r3, [sp, #16]
 800a0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0bc:	482c      	ldr	r0, [pc, #176]	; (800a170 <_vfiprintf_r+0x250>)
 800a0be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0c2:	2206      	movs	r2, #6
 800a0c4:	f7f6 f8ac 	bl	8000220 <memchr>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d03f      	beq.n	800a14c <_vfiprintf_r+0x22c>
 800a0cc:	4b29      	ldr	r3, [pc, #164]	; (800a174 <_vfiprintf_r+0x254>)
 800a0ce:	bb1b      	cbnz	r3, 800a118 <_vfiprintf_r+0x1f8>
 800a0d0:	9b03      	ldr	r3, [sp, #12]
 800a0d2:	3307      	adds	r3, #7
 800a0d4:	f023 0307 	bic.w	r3, r3, #7
 800a0d8:	3308      	adds	r3, #8
 800a0da:	9303      	str	r3, [sp, #12]
 800a0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0de:	443b      	add	r3, r7
 800a0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e2:	e767      	b.n	8009fb4 <_vfiprintf_r+0x94>
 800a0e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	e7a5      	b.n	800a03a <_vfiprintf_r+0x11a>
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	3401      	adds	r4, #1
 800a0f2:	9305      	str	r3, [sp, #20]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	f04f 0c0a 	mov.w	ip, #10
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a100:	3a30      	subs	r2, #48	; 0x30
 800a102:	2a09      	cmp	r2, #9
 800a104:	d903      	bls.n	800a10e <_vfiprintf_r+0x1ee>
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0c5      	beq.n	800a096 <_vfiprintf_r+0x176>
 800a10a:	9105      	str	r1, [sp, #20]
 800a10c:	e7c3      	b.n	800a096 <_vfiprintf_r+0x176>
 800a10e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a112:	4604      	mov	r4, r0
 800a114:	2301      	movs	r3, #1
 800a116:	e7f0      	b.n	800a0fa <_vfiprintf_r+0x1da>
 800a118:	ab03      	add	r3, sp, #12
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	462a      	mov	r2, r5
 800a11e:	4b16      	ldr	r3, [pc, #88]	; (800a178 <_vfiprintf_r+0x258>)
 800a120:	a904      	add	r1, sp, #16
 800a122:	4630      	mov	r0, r6
 800a124:	f3af 8000 	nop.w
 800a128:	4607      	mov	r7, r0
 800a12a:	1c78      	adds	r0, r7, #1
 800a12c:	d1d6      	bne.n	800a0dc <_vfiprintf_r+0x1bc>
 800a12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a130:	07d9      	lsls	r1, r3, #31
 800a132:	d405      	bmi.n	800a140 <_vfiprintf_r+0x220>
 800a134:	89ab      	ldrh	r3, [r5, #12]
 800a136:	059a      	lsls	r2, r3, #22
 800a138:	d402      	bmi.n	800a140 <_vfiprintf_r+0x220>
 800a13a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a13c:	f7ff fcd5 	bl	8009aea <__retarget_lock_release_recursive>
 800a140:	89ab      	ldrh	r3, [r5, #12]
 800a142:	065b      	lsls	r3, r3, #25
 800a144:	f53f af12 	bmi.w	8009f6c <_vfiprintf_r+0x4c>
 800a148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a14a:	e711      	b.n	8009f70 <_vfiprintf_r+0x50>
 800a14c:	ab03      	add	r3, sp, #12
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	462a      	mov	r2, r5
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <_vfiprintf_r+0x258>)
 800a154:	a904      	add	r1, sp, #16
 800a156:	4630      	mov	r0, r6
 800a158:	f000 f880 	bl	800a25c <_printf_i>
 800a15c:	e7e4      	b.n	800a128 <_vfiprintf_r+0x208>
 800a15e:	bf00      	nop
 800a160:	0800acd4 	.word	0x0800acd4
 800a164:	0800acf4 	.word	0x0800acf4
 800a168:	0800acb4 	.word	0x0800acb4
 800a16c:	0800ad14 	.word	0x0800ad14
 800a170:	0800ad1e 	.word	0x0800ad1e
 800a174:	00000000 	.word	0x00000000
 800a178:	08009efb 	.word	0x08009efb
 800a17c:	0800ad1a 	.word	0x0800ad1a

0800a180 <_printf_common>:
 800a180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	4616      	mov	r6, r2
 800a186:	4699      	mov	r9, r3
 800a188:	688a      	ldr	r2, [r1, #8]
 800a18a:	690b      	ldr	r3, [r1, #16]
 800a18c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a190:	4293      	cmp	r3, r2
 800a192:	bfb8      	it	lt
 800a194:	4613      	movlt	r3, r2
 800a196:	6033      	str	r3, [r6, #0]
 800a198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a19c:	4607      	mov	r7, r0
 800a19e:	460c      	mov	r4, r1
 800a1a0:	b10a      	cbz	r2, 800a1a6 <_printf_common+0x26>
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	6033      	str	r3, [r6, #0]
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	0699      	lsls	r1, r3, #26
 800a1aa:	bf42      	ittt	mi
 800a1ac:	6833      	ldrmi	r3, [r6, #0]
 800a1ae:	3302      	addmi	r3, #2
 800a1b0:	6033      	strmi	r3, [r6, #0]
 800a1b2:	6825      	ldr	r5, [r4, #0]
 800a1b4:	f015 0506 	ands.w	r5, r5, #6
 800a1b8:	d106      	bne.n	800a1c8 <_printf_common+0x48>
 800a1ba:	f104 0a19 	add.w	sl, r4, #25
 800a1be:	68e3      	ldr	r3, [r4, #12]
 800a1c0:	6832      	ldr	r2, [r6, #0]
 800a1c2:	1a9b      	subs	r3, r3, r2
 800a1c4:	42ab      	cmp	r3, r5
 800a1c6:	dc26      	bgt.n	800a216 <_printf_common+0x96>
 800a1c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1cc:	1e13      	subs	r3, r2, #0
 800a1ce:	6822      	ldr	r2, [r4, #0]
 800a1d0:	bf18      	it	ne
 800a1d2:	2301      	movne	r3, #1
 800a1d4:	0692      	lsls	r2, r2, #26
 800a1d6:	d42b      	bmi.n	800a230 <_printf_common+0xb0>
 800a1d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4638      	mov	r0, r7
 800a1e0:	47c0      	blx	r8
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	d01e      	beq.n	800a224 <_printf_common+0xa4>
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	68e5      	ldr	r5, [r4, #12]
 800a1ea:	6832      	ldr	r2, [r6, #0]
 800a1ec:	f003 0306 	and.w	r3, r3, #6
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	bf08      	it	eq
 800a1f4:	1aad      	subeq	r5, r5, r2
 800a1f6:	68a3      	ldr	r3, [r4, #8]
 800a1f8:	6922      	ldr	r2, [r4, #16]
 800a1fa:	bf0c      	ite	eq
 800a1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a200:	2500      	movne	r5, #0
 800a202:	4293      	cmp	r3, r2
 800a204:	bfc4      	itt	gt
 800a206:	1a9b      	subgt	r3, r3, r2
 800a208:	18ed      	addgt	r5, r5, r3
 800a20a:	2600      	movs	r6, #0
 800a20c:	341a      	adds	r4, #26
 800a20e:	42b5      	cmp	r5, r6
 800a210:	d11a      	bne.n	800a248 <_printf_common+0xc8>
 800a212:	2000      	movs	r0, #0
 800a214:	e008      	b.n	800a228 <_printf_common+0xa8>
 800a216:	2301      	movs	r3, #1
 800a218:	4652      	mov	r2, sl
 800a21a:	4649      	mov	r1, r9
 800a21c:	4638      	mov	r0, r7
 800a21e:	47c0      	blx	r8
 800a220:	3001      	adds	r0, #1
 800a222:	d103      	bne.n	800a22c <_printf_common+0xac>
 800a224:	f04f 30ff 	mov.w	r0, #4294967295
 800a228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22c:	3501      	adds	r5, #1
 800a22e:	e7c6      	b.n	800a1be <_printf_common+0x3e>
 800a230:	18e1      	adds	r1, r4, r3
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	2030      	movs	r0, #48	; 0x30
 800a236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a23a:	4422      	add	r2, r4
 800a23c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a244:	3302      	adds	r3, #2
 800a246:	e7c7      	b.n	800a1d8 <_printf_common+0x58>
 800a248:	2301      	movs	r3, #1
 800a24a:	4622      	mov	r2, r4
 800a24c:	4649      	mov	r1, r9
 800a24e:	4638      	mov	r0, r7
 800a250:	47c0      	blx	r8
 800a252:	3001      	adds	r0, #1
 800a254:	d0e6      	beq.n	800a224 <_printf_common+0xa4>
 800a256:	3601      	adds	r6, #1
 800a258:	e7d9      	b.n	800a20e <_printf_common+0x8e>
	...

0800a25c <_printf_i>:
 800a25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a260:	7e0f      	ldrb	r7, [r1, #24]
 800a262:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a264:	2f78      	cmp	r7, #120	; 0x78
 800a266:	4691      	mov	r9, r2
 800a268:	4680      	mov	r8, r0
 800a26a:	460c      	mov	r4, r1
 800a26c:	469a      	mov	sl, r3
 800a26e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a272:	d807      	bhi.n	800a284 <_printf_i+0x28>
 800a274:	2f62      	cmp	r7, #98	; 0x62
 800a276:	d80a      	bhi.n	800a28e <_printf_i+0x32>
 800a278:	2f00      	cmp	r7, #0
 800a27a:	f000 80d8 	beq.w	800a42e <_printf_i+0x1d2>
 800a27e:	2f58      	cmp	r7, #88	; 0x58
 800a280:	f000 80a3 	beq.w	800a3ca <_printf_i+0x16e>
 800a284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a28c:	e03a      	b.n	800a304 <_printf_i+0xa8>
 800a28e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a292:	2b15      	cmp	r3, #21
 800a294:	d8f6      	bhi.n	800a284 <_printf_i+0x28>
 800a296:	a101      	add	r1, pc, #4	; (adr r1, 800a29c <_printf_i+0x40>)
 800a298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a29c:	0800a2f5 	.word	0x0800a2f5
 800a2a0:	0800a309 	.word	0x0800a309
 800a2a4:	0800a285 	.word	0x0800a285
 800a2a8:	0800a285 	.word	0x0800a285
 800a2ac:	0800a285 	.word	0x0800a285
 800a2b0:	0800a285 	.word	0x0800a285
 800a2b4:	0800a309 	.word	0x0800a309
 800a2b8:	0800a285 	.word	0x0800a285
 800a2bc:	0800a285 	.word	0x0800a285
 800a2c0:	0800a285 	.word	0x0800a285
 800a2c4:	0800a285 	.word	0x0800a285
 800a2c8:	0800a415 	.word	0x0800a415
 800a2cc:	0800a339 	.word	0x0800a339
 800a2d0:	0800a3f7 	.word	0x0800a3f7
 800a2d4:	0800a285 	.word	0x0800a285
 800a2d8:	0800a285 	.word	0x0800a285
 800a2dc:	0800a437 	.word	0x0800a437
 800a2e0:	0800a285 	.word	0x0800a285
 800a2e4:	0800a339 	.word	0x0800a339
 800a2e8:	0800a285 	.word	0x0800a285
 800a2ec:	0800a285 	.word	0x0800a285
 800a2f0:	0800a3ff 	.word	0x0800a3ff
 800a2f4:	682b      	ldr	r3, [r5, #0]
 800a2f6:	1d1a      	adds	r2, r3, #4
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	602a      	str	r2, [r5, #0]
 800a2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a304:	2301      	movs	r3, #1
 800a306:	e0a3      	b.n	800a450 <_printf_i+0x1f4>
 800a308:	6820      	ldr	r0, [r4, #0]
 800a30a:	6829      	ldr	r1, [r5, #0]
 800a30c:	0606      	lsls	r6, r0, #24
 800a30e:	f101 0304 	add.w	r3, r1, #4
 800a312:	d50a      	bpl.n	800a32a <_printf_i+0xce>
 800a314:	680e      	ldr	r6, [r1, #0]
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	2e00      	cmp	r6, #0
 800a31a:	da03      	bge.n	800a324 <_printf_i+0xc8>
 800a31c:	232d      	movs	r3, #45	; 0x2d
 800a31e:	4276      	negs	r6, r6
 800a320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a324:	485e      	ldr	r0, [pc, #376]	; (800a4a0 <_printf_i+0x244>)
 800a326:	230a      	movs	r3, #10
 800a328:	e019      	b.n	800a35e <_printf_i+0x102>
 800a32a:	680e      	ldr	r6, [r1, #0]
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a332:	bf18      	it	ne
 800a334:	b236      	sxthne	r6, r6
 800a336:	e7ef      	b.n	800a318 <_printf_i+0xbc>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	6820      	ldr	r0, [r4, #0]
 800a33c:	1d19      	adds	r1, r3, #4
 800a33e:	6029      	str	r1, [r5, #0]
 800a340:	0601      	lsls	r1, r0, #24
 800a342:	d501      	bpl.n	800a348 <_printf_i+0xec>
 800a344:	681e      	ldr	r6, [r3, #0]
 800a346:	e002      	b.n	800a34e <_printf_i+0xf2>
 800a348:	0646      	lsls	r6, r0, #25
 800a34a:	d5fb      	bpl.n	800a344 <_printf_i+0xe8>
 800a34c:	881e      	ldrh	r6, [r3, #0]
 800a34e:	4854      	ldr	r0, [pc, #336]	; (800a4a0 <_printf_i+0x244>)
 800a350:	2f6f      	cmp	r7, #111	; 0x6f
 800a352:	bf0c      	ite	eq
 800a354:	2308      	moveq	r3, #8
 800a356:	230a      	movne	r3, #10
 800a358:	2100      	movs	r1, #0
 800a35a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a35e:	6865      	ldr	r5, [r4, #4]
 800a360:	60a5      	str	r5, [r4, #8]
 800a362:	2d00      	cmp	r5, #0
 800a364:	bfa2      	ittt	ge
 800a366:	6821      	ldrge	r1, [r4, #0]
 800a368:	f021 0104 	bicge.w	r1, r1, #4
 800a36c:	6021      	strge	r1, [r4, #0]
 800a36e:	b90e      	cbnz	r6, 800a374 <_printf_i+0x118>
 800a370:	2d00      	cmp	r5, #0
 800a372:	d04d      	beq.n	800a410 <_printf_i+0x1b4>
 800a374:	4615      	mov	r5, r2
 800a376:	fbb6 f1f3 	udiv	r1, r6, r3
 800a37a:	fb03 6711 	mls	r7, r3, r1, r6
 800a37e:	5dc7      	ldrb	r7, [r0, r7]
 800a380:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a384:	4637      	mov	r7, r6
 800a386:	42bb      	cmp	r3, r7
 800a388:	460e      	mov	r6, r1
 800a38a:	d9f4      	bls.n	800a376 <_printf_i+0x11a>
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d10b      	bne.n	800a3a8 <_printf_i+0x14c>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	07de      	lsls	r6, r3, #31
 800a394:	d508      	bpl.n	800a3a8 <_printf_i+0x14c>
 800a396:	6923      	ldr	r3, [r4, #16]
 800a398:	6861      	ldr	r1, [r4, #4]
 800a39a:	4299      	cmp	r1, r3
 800a39c:	bfde      	ittt	le
 800a39e:	2330      	movle	r3, #48	; 0x30
 800a3a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3a8:	1b52      	subs	r2, r2, r5
 800a3aa:	6122      	str	r2, [r4, #16]
 800a3ac:	f8cd a000 	str.w	sl, [sp]
 800a3b0:	464b      	mov	r3, r9
 800a3b2:	aa03      	add	r2, sp, #12
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	f7ff fee2 	bl	800a180 <_printf_common>
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d14c      	bne.n	800a45a <_printf_i+0x1fe>
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	b004      	add	sp, #16
 800a3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ca:	4835      	ldr	r0, [pc, #212]	; (800a4a0 <_printf_i+0x244>)
 800a3cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3d0:	6829      	ldr	r1, [r5, #0]
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3d8:	6029      	str	r1, [r5, #0]
 800a3da:	061d      	lsls	r5, r3, #24
 800a3dc:	d514      	bpl.n	800a408 <_printf_i+0x1ac>
 800a3de:	07df      	lsls	r7, r3, #31
 800a3e0:	bf44      	itt	mi
 800a3e2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3e6:	6023      	strmi	r3, [r4, #0]
 800a3e8:	b91e      	cbnz	r6, 800a3f2 <_printf_i+0x196>
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	f023 0320 	bic.w	r3, r3, #32
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	2310      	movs	r3, #16
 800a3f4:	e7b0      	b.n	800a358 <_printf_i+0xfc>
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	f043 0320 	orr.w	r3, r3, #32
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	2378      	movs	r3, #120	; 0x78
 800a400:	4828      	ldr	r0, [pc, #160]	; (800a4a4 <_printf_i+0x248>)
 800a402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a406:	e7e3      	b.n	800a3d0 <_printf_i+0x174>
 800a408:	0659      	lsls	r1, r3, #25
 800a40a:	bf48      	it	mi
 800a40c:	b2b6      	uxthmi	r6, r6
 800a40e:	e7e6      	b.n	800a3de <_printf_i+0x182>
 800a410:	4615      	mov	r5, r2
 800a412:	e7bb      	b.n	800a38c <_printf_i+0x130>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	6826      	ldr	r6, [r4, #0]
 800a418:	6961      	ldr	r1, [r4, #20]
 800a41a:	1d18      	adds	r0, r3, #4
 800a41c:	6028      	str	r0, [r5, #0]
 800a41e:	0635      	lsls	r5, r6, #24
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	d501      	bpl.n	800a428 <_printf_i+0x1cc>
 800a424:	6019      	str	r1, [r3, #0]
 800a426:	e002      	b.n	800a42e <_printf_i+0x1d2>
 800a428:	0670      	lsls	r0, r6, #25
 800a42a:	d5fb      	bpl.n	800a424 <_printf_i+0x1c8>
 800a42c:	8019      	strh	r1, [r3, #0]
 800a42e:	2300      	movs	r3, #0
 800a430:	6123      	str	r3, [r4, #16]
 800a432:	4615      	mov	r5, r2
 800a434:	e7ba      	b.n	800a3ac <_printf_i+0x150>
 800a436:	682b      	ldr	r3, [r5, #0]
 800a438:	1d1a      	adds	r2, r3, #4
 800a43a:	602a      	str	r2, [r5, #0]
 800a43c:	681d      	ldr	r5, [r3, #0]
 800a43e:	6862      	ldr	r2, [r4, #4]
 800a440:	2100      	movs	r1, #0
 800a442:	4628      	mov	r0, r5
 800a444:	f7f5 feec 	bl	8000220 <memchr>
 800a448:	b108      	cbz	r0, 800a44e <_printf_i+0x1f2>
 800a44a:	1b40      	subs	r0, r0, r5
 800a44c:	6060      	str	r0, [r4, #4]
 800a44e:	6863      	ldr	r3, [r4, #4]
 800a450:	6123      	str	r3, [r4, #16]
 800a452:	2300      	movs	r3, #0
 800a454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a458:	e7a8      	b.n	800a3ac <_printf_i+0x150>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	462a      	mov	r2, r5
 800a45e:	4649      	mov	r1, r9
 800a460:	4640      	mov	r0, r8
 800a462:	47d0      	blx	sl
 800a464:	3001      	adds	r0, #1
 800a466:	d0ab      	beq.n	800a3c0 <_printf_i+0x164>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	079b      	lsls	r3, r3, #30
 800a46c:	d413      	bmi.n	800a496 <_printf_i+0x23a>
 800a46e:	68e0      	ldr	r0, [r4, #12]
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	4298      	cmp	r0, r3
 800a474:	bfb8      	it	lt
 800a476:	4618      	movlt	r0, r3
 800a478:	e7a4      	b.n	800a3c4 <_printf_i+0x168>
 800a47a:	2301      	movs	r3, #1
 800a47c:	4632      	mov	r2, r6
 800a47e:	4649      	mov	r1, r9
 800a480:	4640      	mov	r0, r8
 800a482:	47d0      	blx	sl
 800a484:	3001      	adds	r0, #1
 800a486:	d09b      	beq.n	800a3c0 <_printf_i+0x164>
 800a488:	3501      	adds	r5, #1
 800a48a:	68e3      	ldr	r3, [r4, #12]
 800a48c:	9903      	ldr	r1, [sp, #12]
 800a48e:	1a5b      	subs	r3, r3, r1
 800a490:	42ab      	cmp	r3, r5
 800a492:	dcf2      	bgt.n	800a47a <_printf_i+0x21e>
 800a494:	e7eb      	b.n	800a46e <_printf_i+0x212>
 800a496:	2500      	movs	r5, #0
 800a498:	f104 0619 	add.w	r6, r4, #25
 800a49c:	e7f5      	b.n	800a48a <_printf_i+0x22e>
 800a49e:	bf00      	nop
 800a4a0:	0800ad25 	.word	0x0800ad25
 800a4a4:	0800ad36 	.word	0x0800ad36

0800a4a8 <_sbrk_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4d06      	ldr	r5, [pc, #24]	; (800a4c4 <_sbrk_r+0x1c>)
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	602b      	str	r3, [r5, #0]
 800a4b4:	f7f6 fd1c 	bl	8000ef0 <_sbrk>
 800a4b8:	1c43      	adds	r3, r0, #1
 800a4ba:	d102      	bne.n	800a4c2 <_sbrk_r+0x1a>
 800a4bc:	682b      	ldr	r3, [r5, #0]
 800a4be:	b103      	cbz	r3, 800a4c2 <_sbrk_r+0x1a>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	bd38      	pop	{r3, r4, r5, pc}
 800a4c4:	200007a4 	.word	0x200007a4

0800a4c8 <__sread>:
 800a4c8:	b510      	push	{r4, lr}
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d0:	f000 fb0a 	bl	800aae8 <_read_r>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	bfab      	itete	ge
 800a4d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4da:	89a3      	ldrhlt	r3, [r4, #12]
 800a4dc:	181b      	addge	r3, r3, r0
 800a4de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4e2:	bfac      	ite	ge
 800a4e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4e6:	81a3      	strhlt	r3, [r4, #12]
 800a4e8:	bd10      	pop	{r4, pc}

0800a4ea <__swrite>:
 800a4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ee:	461f      	mov	r7, r3
 800a4f0:	898b      	ldrh	r3, [r1, #12]
 800a4f2:	05db      	lsls	r3, r3, #23
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	4616      	mov	r6, r2
 800a4fa:	d505      	bpl.n	800a508 <__swrite+0x1e>
 800a4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a500:	2302      	movs	r3, #2
 800a502:	2200      	movs	r2, #0
 800a504:	f000 f9c8 	bl	800a898 <_lseek_r>
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a50e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	4632      	mov	r2, r6
 800a516:	463b      	mov	r3, r7
 800a518:	4628      	mov	r0, r5
 800a51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a51e:	f000 b869 	b.w	800a5f4 <_write_r>

0800a522 <__sseek>:
 800a522:	b510      	push	{r4, lr}
 800a524:	460c      	mov	r4, r1
 800a526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a52a:	f000 f9b5 	bl	800a898 <_lseek_r>
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	89a3      	ldrh	r3, [r4, #12]
 800a532:	bf15      	itete	ne
 800a534:	6560      	strne	r0, [r4, #84]	; 0x54
 800a536:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a53a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a53e:	81a3      	strheq	r3, [r4, #12]
 800a540:	bf18      	it	ne
 800a542:	81a3      	strhne	r3, [r4, #12]
 800a544:	bd10      	pop	{r4, pc}

0800a546 <__sclose>:
 800a546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a54a:	f000 b8d3 	b.w	800a6f4 <_close_r>
	...

0800a550 <__swbuf_r>:
 800a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a552:	460e      	mov	r6, r1
 800a554:	4614      	mov	r4, r2
 800a556:	4605      	mov	r5, r0
 800a558:	b118      	cbz	r0, 800a562 <__swbuf_r+0x12>
 800a55a:	6983      	ldr	r3, [r0, #24]
 800a55c:	b90b      	cbnz	r3, 800a562 <__swbuf_r+0x12>
 800a55e:	f7ff fa25 	bl	80099ac <__sinit>
 800a562:	4b21      	ldr	r3, [pc, #132]	; (800a5e8 <__swbuf_r+0x98>)
 800a564:	429c      	cmp	r4, r3
 800a566:	d12b      	bne.n	800a5c0 <__swbuf_r+0x70>
 800a568:	686c      	ldr	r4, [r5, #4]
 800a56a:	69a3      	ldr	r3, [r4, #24]
 800a56c:	60a3      	str	r3, [r4, #8]
 800a56e:	89a3      	ldrh	r3, [r4, #12]
 800a570:	071a      	lsls	r2, r3, #28
 800a572:	d52f      	bpl.n	800a5d4 <__swbuf_r+0x84>
 800a574:	6923      	ldr	r3, [r4, #16]
 800a576:	b36b      	cbz	r3, 800a5d4 <__swbuf_r+0x84>
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	6820      	ldr	r0, [r4, #0]
 800a57c:	1ac0      	subs	r0, r0, r3
 800a57e:	6963      	ldr	r3, [r4, #20]
 800a580:	b2f6      	uxtb	r6, r6
 800a582:	4283      	cmp	r3, r0
 800a584:	4637      	mov	r7, r6
 800a586:	dc04      	bgt.n	800a592 <__swbuf_r+0x42>
 800a588:	4621      	mov	r1, r4
 800a58a:	4628      	mov	r0, r5
 800a58c:	f000 f948 	bl	800a820 <_fflush_r>
 800a590:	bb30      	cbnz	r0, 800a5e0 <__swbuf_r+0x90>
 800a592:	68a3      	ldr	r3, [r4, #8]
 800a594:	3b01      	subs	r3, #1
 800a596:	60a3      	str	r3, [r4, #8]
 800a598:	6823      	ldr	r3, [r4, #0]
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	6022      	str	r2, [r4, #0]
 800a59e:	701e      	strb	r6, [r3, #0]
 800a5a0:	6963      	ldr	r3, [r4, #20]
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	4283      	cmp	r3, r0
 800a5a6:	d004      	beq.n	800a5b2 <__swbuf_r+0x62>
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	07db      	lsls	r3, r3, #31
 800a5ac:	d506      	bpl.n	800a5bc <__swbuf_r+0x6c>
 800a5ae:	2e0a      	cmp	r6, #10
 800a5b0:	d104      	bne.n	800a5bc <__swbuf_r+0x6c>
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	f000 f933 	bl	800a820 <_fflush_r>
 800a5ba:	b988      	cbnz	r0, 800a5e0 <__swbuf_r+0x90>
 800a5bc:	4638      	mov	r0, r7
 800a5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <__swbuf_r+0x9c>)
 800a5c2:	429c      	cmp	r4, r3
 800a5c4:	d101      	bne.n	800a5ca <__swbuf_r+0x7a>
 800a5c6:	68ac      	ldr	r4, [r5, #8]
 800a5c8:	e7cf      	b.n	800a56a <__swbuf_r+0x1a>
 800a5ca:	4b09      	ldr	r3, [pc, #36]	; (800a5f0 <__swbuf_r+0xa0>)
 800a5cc:	429c      	cmp	r4, r3
 800a5ce:	bf08      	it	eq
 800a5d0:	68ec      	ldreq	r4, [r5, #12]
 800a5d2:	e7ca      	b.n	800a56a <__swbuf_r+0x1a>
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	f000 f81e 	bl	800a618 <__swsetup_r>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d0cb      	beq.n	800a578 <__swbuf_r+0x28>
 800a5e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5e4:	e7ea      	b.n	800a5bc <__swbuf_r+0x6c>
 800a5e6:	bf00      	nop
 800a5e8:	0800acd4 	.word	0x0800acd4
 800a5ec:	0800acf4 	.word	0x0800acf4
 800a5f0:	0800acb4 	.word	0x0800acb4

0800a5f4 <_write_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d07      	ldr	r5, [pc, #28]	; (800a614 <_write_r+0x20>)
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	4608      	mov	r0, r1
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	2200      	movs	r2, #0
 800a600:	602a      	str	r2, [r5, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	f7f6 f9a2 	bl	800094c <_write>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_write_r+0x1e>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_write_r+0x1e>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	200007a4 	.word	0x200007a4

0800a618 <__swsetup_r>:
 800a618:	4b32      	ldr	r3, [pc, #200]	; (800a6e4 <__swsetup_r+0xcc>)
 800a61a:	b570      	push	{r4, r5, r6, lr}
 800a61c:	681d      	ldr	r5, [r3, #0]
 800a61e:	4606      	mov	r6, r0
 800a620:	460c      	mov	r4, r1
 800a622:	b125      	cbz	r5, 800a62e <__swsetup_r+0x16>
 800a624:	69ab      	ldr	r3, [r5, #24]
 800a626:	b913      	cbnz	r3, 800a62e <__swsetup_r+0x16>
 800a628:	4628      	mov	r0, r5
 800a62a:	f7ff f9bf 	bl	80099ac <__sinit>
 800a62e:	4b2e      	ldr	r3, [pc, #184]	; (800a6e8 <__swsetup_r+0xd0>)
 800a630:	429c      	cmp	r4, r3
 800a632:	d10f      	bne.n	800a654 <__swsetup_r+0x3c>
 800a634:	686c      	ldr	r4, [r5, #4]
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a63c:	0719      	lsls	r1, r3, #28
 800a63e:	d42c      	bmi.n	800a69a <__swsetup_r+0x82>
 800a640:	06dd      	lsls	r5, r3, #27
 800a642:	d411      	bmi.n	800a668 <__swsetup_r+0x50>
 800a644:	2309      	movs	r3, #9
 800a646:	6033      	str	r3, [r6, #0]
 800a648:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	f04f 30ff 	mov.w	r0, #4294967295
 800a652:	e03e      	b.n	800a6d2 <__swsetup_r+0xba>
 800a654:	4b25      	ldr	r3, [pc, #148]	; (800a6ec <__swsetup_r+0xd4>)
 800a656:	429c      	cmp	r4, r3
 800a658:	d101      	bne.n	800a65e <__swsetup_r+0x46>
 800a65a:	68ac      	ldr	r4, [r5, #8]
 800a65c:	e7eb      	b.n	800a636 <__swsetup_r+0x1e>
 800a65e:	4b24      	ldr	r3, [pc, #144]	; (800a6f0 <__swsetup_r+0xd8>)
 800a660:	429c      	cmp	r4, r3
 800a662:	bf08      	it	eq
 800a664:	68ec      	ldreq	r4, [r5, #12]
 800a666:	e7e6      	b.n	800a636 <__swsetup_r+0x1e>
 800a668:	0758      	lsls	r0, r3, #29
 800a66a:	d512      	bpl.n	800a692 <__swsetup_r+0x7a>
 800a66c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a66e:	b141      	cbz	r1, 800a682 <__swsetup_r+0x6a>
 800a670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a674:	4299      	cmp	r1, r3
 800a676:	d002      	beq.n	800a67e <__swsetup_r+0x66>
 800a678:	4630      	mov	r0, r6
 800a67a:	f000 f9b9 	bl	800a9f0 <_free_r>
 800a67e:	2300      	movs	r3, #0
 800a680:	6363      	str	r3, [r4, #52]	; 0x34
 800a682:	89a3      	ldrh	r3, [r4, #12]
 800a684:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a688:	81a3      	strh	r3, [r4, #12]
 800a68a:	2300      	movs	r3, #0
 800a68c:	6063      	str	r3, [r4, #4]
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	f043 0308 	orr.w	r3, r3, #8
 800a698:	81a3      	strh	r3, [r4, #12]
 800a69a:	6923      	ldr	r3, [r4, #16]
 800a69c:	b94b      	cbnz	r3, 800a6b2 <__swsetup_r+0x9a>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6a8:	d003      	beq.n	800a6b2 <__swsetup_r+0x9a>
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f000 f92b 	bl	800a908 <__smakebuf_r>
 800a6b2:	89a0      	ldrh	r0, [r4, #12]
 800a6b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6b8:	f010 0301 	ands.w	r3, r0, #1
 800a6bc:	d00a      	beq.n	800a6d4 <__swsetup_r+0xbc>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60a3      	str	r3, [r4, #8]
 800a6c2:	6963      	ldr	r3, [r4, #20]
 800a6c4:	425b      	negs	r3, r3
 800a6c6:	61a3      	str	r3, [r4, #24]
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	b943      	cbnz	r3, 800a6de <__swsetup_r+0xc6>
 800a6cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6d0:	d1ba      	bne.n	800a648 <__swsetup_r+0x30>
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	0781      	lsls	r1, r0, #30
 800a6d6:	bf58      	it	pl
 800a6d8:	6963      	ldrpl	r3, [r4, #20]
 800a6da:	60a3      	str	r3, [r4, #8]
 800a6dc:	e7f4      	b.n	800a6c8 <__swsetup_r+0xb0>
 800a6de:	2000      	movs	r0, #0
 800a6e0:	e7f7      	b.n	800a6d2 <__swsetup_r+0xba>
 800a6e2:	bf00      	nop
 800a6e4:	2000000c 	.word	0x2000000c
 800a6e8:	0800acd4 	.word	0x0800acd4
 800a6ec:	0800acf4 	.word	0x0800acf4
 800a6f0:	0800acb4 	.word	0x0800acb4

0800a6f4 <_close_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d06      	ldr	r5, [pc, #24]	; (800a710 <_close_r+0x1c>)
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	4608      	mov	r0, r1
 800a6fe:	602b      	str	r3, [r5, #0]
 800a700:	f7f6 fbc1 	bl	8000e86 <_close>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d102      	bne.n	800a70e <_close_r+0x1a>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	b103      	cbz	r3, 800a70e <_close_r+0x1a>
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	200007a4 	.word	0x200007a4

0800a714 <__sflush_r>:
 800a714:	898a      	ldrh	r2, [r1, #12]
 800a716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71a:	4605      	mov	r5, r0
 800a71c:	0710      	lsls	r0, r2, #28
 800a71e:	460c      	mov	r4, r1
 800a720:	d458      	bmi.n	800a7d4 <__sflush_r+0xc0>
 800a722:	684b      	ldr	r3, [r1, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	dc05      	bgt.n	800a734 <__sflush_r+0x20>
 800a728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dc02      	bgt.n	800a734 <__sflush_r+0x20>
 800a72e:	2000      	movs	r0, #0
 800a730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a736:	2e00      	cmp	r6, #0
 800a738:	d0f9      	beq.n	800a72e <__sflush_r+0x1a>
 800a73a:	2300      	movs	r3, #0
 800a73c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a740:	682f      	ldr	r7, [r5, #0]
 800a742:	602b      	str	r3, [r5, #0]
 800a744:	d032      	beq.n	800a7ac <__sflush_r+0x98>
 800a746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	075a      	lsls	r2, r3, #29
 800a74c:	d505      	bpl.n	800a75a <__sflush_r+0x46>
 800a74e:	6863      	ldr	r3, [r4, #4]
 800a750:	1ac0      	subs	r0, r0, r3
 800a752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a754:	b10b      	cbz	r3, 800a75a <__sflush_r+0x46>
 800a756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a758:	1ac0      	subs	r0, r0, r3
 800a75a:	2300      	movs	r3, #0
 800a75c:	4602      	mov	r2, r0
 800a75e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a760:	6a21      	ldr	r1, [r4, #32]
 800a762:	4628      	mov	r0, r5
 800a764:	47b0      	blx	r6
 800a766:	1c43      	adds	r3, r0, #1
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	d106      	bne.n	800a77a <__sflush_r+0x66>
 800a76c:	6829      	ldr	r1, [r5, #0]
 800a76e:	291d      	cmp	r1, #29
 800a770:	d82c      	bhi.n	800a7cc <__sflush_r+0xb8>
 800a772:	4a2a      	ldr	r2, [pc, #168]	; (800a81c <__sflush_r+0x108>)
 800a774:	40ca      	lsrs	r2, r1
 800a776:	07d6      	lsls	r6, r2, #31
 800a778:	d528      	bpl.n	800a7cc <__sflush_r+0xb8>
 800a77a:	2200      	movs	r2, #0
 800a77c:	6062      	str	r2, [r4, #4]
 800a77e:	04d9      	lsls	r1, r3, #19
 800a780:	6922      	ldr	r2, [r4, #16]
 800a782:	6022      	str	r2, [r4, #0]
 800a784:	d504      	bpl.n	800a790 <__sflush_r+0x7c>
 800a786:	1c42      	adds	r2, r0, #1
 800a788:	d101      	bne.n	800a78e <__sflush_r+0x7a>
 800a78a:	682b      	ldr	r3, [r5, #0]
 800a78c:	b903      	cbnz	r3, 800a790 <__sflush_r+0x7c>
 800a78e:	6560      	str	r0, [r4, #84]	; 0x54
 800a790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a792:	602f      	str	r7, [r5, #0]
 800a794:	2900      	cmp	r1, #0
 800a796:	d0ca      	beq.n	800a72e <__sflush_r+0x1a>
 800a798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a79c:	4299      	cmp	r1, r3
 800a79e:	d002      	beq.n	800a7a6 <__sflush_r+0x92>
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 f925 	bl	800a9f0 <_free_r>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a7aa:	e7c1      	b.n	800a730 <__sflush_r+0x1c>
 800a7ac:	6a21      	ldr	r1, [r4, #32]
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	47b0      	blx	r6
 800a7b4:	1c41      	adds	r1, r0, #1
 800a7b6:	d1c7      	bne.n	800a748 <__sflush_r+0x34>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0c4      	beq.n	800a748 <__sflush_r+0x34>
 800a7be:	2b1d      	cmp	r3, #29
 800a7c0:	d001      	beq.n	800a7c6 <__sflush_r+0xb2>
 800a7c2:	2b16      	cmp	r3, #22
 800a7c4:	d101      	bne.n	800a7ca <__sflush_r+0xb6>
 800a7c6:	602f      	str	r7, [r5, #0]
 800a7c8:	e7b1      	b.n	800a72e <__sflush_r+0x1a>
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	e7ad      	b.n	800a730 <__sflush_r+0x1c>
 800a7d4:	690f      	ldr	r7, [r1, #16]
 800a7d6:	2f00      	cmp	r7, #0
 800a7d8:	d0a9      	beq.n	800a72e <__sflush_r+0x1a>
 800a7da:	0793      	lsls	r3, r2, #30
 800a7dc:	680e      	ldr	r6, [r1, #0]
 800a7de:	bf08      	it	eq
 800a7e0:	694b      	ldreq	r3, [r1, #20]
 800a7e2:	600f      	str	r7, [r1, #0]
 800a7e4:	bf18      	it	ne
 800a7e6:	2300      	movne	r3, #0
 800a7e8:	eba6 0807 	sub.w	r8, r6, r7
 800a7ec:	608b      	str	r3, [r1, #8]
 800a7ee:	f1b8 0f00 	cmp.w	r8, #0
 800a7f2:	dd9c      	ble.n	800a72e <__sflush_r+0x1a>
 800a7f4:	6a21      	ldr	r1, [r4, #32]
 800a7f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7f8:	4643      	mov	r3, r8
 800a7fa:	463a      	mov	r2, r7
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b0      	blx	r6
 800a800:	2800      	cmp	r0, #0
 800a802:	dc06      	bgt.n	800a812 <__sflush_r+0xfe>
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a80a:	81a3      	strh	r3, [r4, #12]
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	e78e      	b.n	800a730 <__sflush_r+0x1c>
 800a812:	4407      	add	r7, r0
 800a814:	eba8 0800 	sub.w	r8, r8, r0
 800a818:	e7e9      	b.n	800a7ee <__sflush_r+0xda>
 800a81a:	bf00      	nop
 800a81c:	20400001 	.word	0x20400001

0800a820 <_fflush_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	690b      	ldr	r3, [r1, #16]
 800a824:	4605      	mov	r5, r0
 800a826:	460c      	mov	r4, r1
 800a828:	b913      	cbnz	r3, 800a830 <_fflush_r+0x10>
 800a82a:	2500      	movs	r5, #0
 800a82c:	4628      	mov	r0, r5
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	b118      	cbz	r0, 800a83a <_fflush_r+0x1a>
 800a832:	6983      	ldr	r3, [r0, #24]
 800a834:	b90b      	cbnz	r3, 800a83a <_fflush_r+0x1a>
 800a836:	f7ff f8b9 	bl	80099ac <__sinit>
 800a83a:	4b14      	ldr	r3, [pc, #80]	; (800a88c <_fflush_r+0x6c>)
 800a83c:	429c      	cmp	r4, r3
 800a83e:	d11b      	bne.n	800a878 <_fflush_r+0x58>
 800a840:	686c      	ldr	r4, [r5, #4]
 800a842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0ef      	beq.n	800a82a <_fflush_r+0xa>
 800a84a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a84c:	07d0      	lsls	r0, r2, #31
 800a84e:	d404      	bmi.n	800a85a <_fflush_r+0x3a>
 800a850:	0599      	lsls	r1, r3, #22
 800a852:	d402      	bmi.n	800a85a <_fflush_r+0x3a>
 800a854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a856:	f7ff f947 	bl	8009ae8 <__retarget_lock_acquire_recursive>
 800a85a:	4628      	mov	r0, r5
 800a85c:	4621      	mov	r1, r4
 800a85e:	f7ff ff59 	bl	800a714 <__sflush_r>
 800a862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a864:	07da      	lsls	r2, r3, #31
 800a866:	4605      	mov	r5, r0
 800a868:	d4e0      	bmi.n	800a82c <_fflush_r+0xc>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	059b      	lsls	r3, r3, #22
 800a86e:	d4dd      	bmi.n	800a82c <_fflush_r+0xc>
 800a870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a872:	f7ff f93a 	bl	8009aea <__retarget_lock_release_recursive>
 800a876:	e7d9      	b.n	800a82c <_fflush_r+0xc>
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <_fflush_r+0x70>)
 800a87a:	429c      	cmp	r4, r3
 800a87c:	d101      	bne.n	800a882 <_fflush_r+0x62>
 800a87e:	68ac      	ldr	r4, [r5, #8]
 800a880:	e7df      	b.n	800a842 <_fflush_r+0x22>
 800a882:	4b04      	ldr	r3, [pc, #16]	; (800a894 <_fflush_r+0x74>)
 800a884:	429c      	cmp	r4, r3
 800a886:	bf08      	it	eq
 800a888:	68ec      	ldreq	r4, [r5, #12]
 800a88a:	e7da      	b.n	800a842 <_fflush_r+0x22>
 800a88c:	0800acd4 	.word	0x0800acd4
 800a890:	0800acf4 	.word	0x0800acf4
 800a894:	0800acb4 	.word	0x0800acb4

0800a898 <_lseek_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4d07      	ldr	r5, [pc, #28]	; (800a8b8 <_lseek_r+0x20>)
 800a89c:	4604      	mov	r4, r0
 800a89e:	4608      	mov	r0, r1
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	602a      	str	r2, [r5, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f7f6 fb14 	bl	8000ed4 <_lseek>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_lseek_r+0x1e>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_lseek_r+0x1e>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	200007a4 	.word	0x200007a4

0800a8bc <__swhatbuf_r>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	460e      	mov	r6, r1
 800a8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c4:	2900      	cmp	r1, #0
 800a8c6:	b096      	sub	sp, #88	; 0x58
 800a8c8:	4614      	mov	r4, r2
 800a8ca:	461d      	mov	r5, r3
 800a8cc:	da08      	bge.n	800a8e0 <__swhatbuf_r+0x24>
 800a8ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	602a      	str	r2, [r5, #0]
 800a8d6:	061a      	lsls	r2, r3, #24
 800a8d8:	d410      	bmi.n	800a8fc <__swhatbuf_r+0x40>
 800a8da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8de:	e00e      	b.n	800a8fe <__swhatbuf_r+0x42>
 800a8e0:	466a      	mov	r2, sp
 800a8e2:	f000 f913 	bl	800ab0c <_fstat_r>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	dbf1      	blt.n	800a8ce <__swhatbuf_r+0x12>
 800a8ea:	9a01      	ldr	r2, [sp, #4]
 800a8ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8f4:	425a      	negs	r2, r3
 800a8f6:	415a      	adcs	r2, r3
 800a8f8:	602a      	str	r2, [r5, #0]
 800a8fa:	e7ee      	b.n	800a8da <__swhatbuf_r+0x1e>
 800a8fc:	2340      	movs	r3, #64	; 0x40
 800a8fe:	2000      	movs	r0, #0
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	b016      	add	sp, #88	; 0x58
 800a904:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a908 <__smakebuf_r>:
 800a908:	898b      	ldrh	r3, [r1, #12]
 800a90a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a90c:	079d      	lsls	r5, r3, #30
 800a90e:	4606      	mov	r6, r0
 800a910:	460c      	mov	r4, r1
 800a912:	d507      	bpl.n	800a924 <__smakebuf_r+0x1c>
 800a914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	6123      	str	r3, [r4, #16]
 800a91c:	2301      	movs	r3, #1
 800a91e:	6163      	str	r3, [r4, #20]
 800a920:	b002      	add	sp, #8
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	ab01      	add	r3, sp, #4
 800a926:	466a      	mov	r2, sp
 800a928:	f7ff ffc8 	bl	800a8bc <__swhatbuf_r>
 800a92c:	9900      	ldr	r1, [sp, #0]
 800a92e:	4605      	mov	r5, r0
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff f8fb 	bl	8009b2c <_malloc_r>
 800a936:	b948      	cbnz	r0, 800a94c <__smakebuf_r+0x44>
 800a938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93c:	059a      	lsls	r2, r3, #22
 800a93e:	d4ef      	bmi.n	800a920 <__smakebuf_r+0x18>
 800a940:	f023 0303 	bic.w	r3, r3, #3
 800a944:	f043 0302 	orr.w	r3, r3, #2
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	e7e3      	b.n	800a914 <__smakebuf_r+0xc>
 800a94c:	4b0d      	ldr	r3, [pc, #52]	; (800a984 <__smakebuf_r+0x7c>)
 800a94e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a950:	89a3      	ldrh	r3, [r4, #12]
 800a952:	6020      	str	r0, [r4, #0]
 800a954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	9b00      	ldr	r3, [sp, #0]
 800a95c:	6163      	str	r3, [r4, #20]
 800a95e:	9b01      	ldr	r3, [sp, #4]
 800a960:	6120      	str	r0, [r4, #16]
 800a962:	b15b      	cbz	r3, 800a97c <__smakebuf_r+0x74>
 800a964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 f8e1 	bl	800ab30 <_isatty_r>
 800a96e:	b128      	cbz	r0, 800a97c <__smakebuf_r+0x74>
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	f023 0303 	bic.w	r3, r3, #3
 800a976:	f043 0301 	orr.w	r3, r3, #1
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	89a0      	ldrh	r0, [r4, #12]
 800a97e:	4305      	orrs	r5, r0
 800a980:	81a5      	strh	r5, [r4, #12]
 800a982:	e7cd      	b.n	800a920 <__smakebuf_r+0x18>
 800a984:	08009945 	.word	0x08009945

0800a988 <memcpy>:
 800a988:	440a      	add	r2, r1
 800a98a:	4291      	cmp	r1, r2
 800a98c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a990:	d100      	bne.n	800a994 <memcpy+0xc>
 800a992:	4770      	bx	lr
 800a994:	b510      	push	{r4, lr}
 800a996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a99a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a99e:	4291      	cmp	r1, r2
 800a9a0:	d1f9      	bne.n	800a996 <memcpy+0xe>
 800a9a2:	bd10      	pop	{r4, pc}

0800a9a4 <memmove>:
 800a9a4:	4288      	cmp	r0, r1
 800a9a6:	b510      	push	{r4, lr}
 800a9a8:	eb01 0402 	add.w	r4, r1, r2
 800a9ac:	d902      	bls.n	800a9b4 <memmove+0x10>
 800a9ae:	4284      	cmp	r4, r0
 800a9b0:	4623      	mov	r3, r4
 800a9b2:	d807      	bhi.n	800a9c4 <memmove+0x20>
 800a9b4:	1e43      	subs	r3, r0, #1
 800a9b6:	42a1      	cmp	r1, r4
 800a9b8:	d008      	beq.n	800a9cc <memmove+0x28>
 800a9ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9c2:	e7f8      	b.n	800a9b6 <memmove+0x12>
 800a9c4:	4402      	add	r2, r0
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	428a      	cmp	r2, r1
 800a9ca:	d100      	bne.n	800a9ce <memmove+0x2a>
 800a9cc:	bd10      	pop	{r4, pc}
 800a9ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9d6:	e7f7      	b.n	800a9c8 <memmove+0x24>

0800a9d8 <__malloc_lock>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	; (800a9e0 <__malloc_lock+0x8>)
 800a9da:	f7ff b885 	b.w	8009ae8 <__retarget_lock_acquire_recursive>
 800a9de:	bf00      	nop
 800a9e0:	20000798 	.word	0x20000798

0800a9e4 <__malloc_unlock>:
 800a9e4:	4801      	ldr	r0, [pc, #4]	; (800a9ec <__malloc_unlock+0x8>)
 800a9e6:	f7ff b880 	b.w	8009aea <__retarget_lock_release_recursive>
 800a9ea:	bf00      	nop
 800a9ec:	20000798 	.word	0x20000798

0800a9f0 <_free_r>:
 800a9f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9f2:	2900      	cmp	r1, #0
 800a9f4:	d044      	beq.n	800aa80 <_free_r+0x90>
 800a9f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9fa:	9001      	str	r0, [sp, #4]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f1a1 0404 	sub.w	r4, r1, #4
 800aa02:	bfb8      	it	lt
 800aa04:	18e4      	addlt	r4, r4, r3
 800aa06:	f7ff ffe7 	bl	800a9d8 <__malloc_lock>
 800aa0a:	4a1e      	ldr	r2, [pc, #120]	; (800aa84 <_free_r+0x94>)
 800aa0c:	9801      	ldr	r0, [sp, #4]
 800aa0e:	6813      	ldr	r3, [r2, #0]
 800aa10:	b933      	cbnz	r3, 800aa20 <_free_r+0x30>
 800aa12:	6063      	str	r3, [r4, #4]
 800aa14:	6014      	str	r4, [r2, #0]
 800aa16:	b003      	add	sp, #12
 800aa18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa1c:	f7ff bfe2 	b.w	800a9e4 <__malloc_unlock>
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	d908      	bls.n	800aa36 <_free_r+0x46>
 800aa24:	6825      	ldr	r5, [r4, #0]
 800aa26:	1961      	adds	r1, r4, r5
 800aa28:	428b      	cmp	r3, r1
 800aa2a:	bf01      	itttt	eq
 800aa2c:	6819      	ldreq	r1, [r3, #0]
 800aa2e:	685b      	ldreq	r3, [r3, #4]
 800aa30:	1949      	addeq	r1, r1, r5
 800aa32:	6021      	streq	r1, [r4, #0]
 800aa34:	e7ed      	b.n	800aa12 <_free_r+0x22>
 800aa36:	461a      	mov	r2, r3
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	b10b      	cbz	r3, 800aa40 <_free_r+0x50>
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	d9fa      	bls.n	800aa36 <_free_r+0x46>
 800aa40:	6811      	ldr	r1, [r2, #0]
 800aa42:	1855      	adds	r5, r2, r1
 800aa44:	42a5      	cmp	r5, r4
 800aa46:	d10b      	bne.n	800aa60 <_free_r+0x70>
 800aa48:	6824      	ldr	r4, [r4, #0]
 800aa4a:	4421      	add	r1, r4
 800aa4c:	1854      	adds	r4, r2, r1
 800aa4e:	42a3      	cmp	r3, r4
 800aa50:	6011      	str	r1, [r2, #0]
 800aa52:	d1e0      	bne.n	800aa16 <_free_r+0x26>
 800aa54:	681c      	ldr	r4, [r3, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	6053      	str	r3, [r2, #4]
 800aa5a:	4421      	add	r1, r4
 800aa5c:	6011      	str	r1, [r2, #0]
 800aa5e:	e7da      	b.n	800aa16 <_free_r+0x26>
 800aa60:	d902      	bls.n	800aa68 <_free_r+0x78>
 800aa62:	230c      	movs	r3, #12
 800aa64:	6003      	str	r3, [r0, #0]
 800aa66:	e7d6      	b.n	800aa16 <_free_r+0x26>
 800aa68:	6825      	ldr	r5, [r4, #0]
 800aa6a:	1961      	adds	r1, r4, r5
 800aa6c:	428b      	cmp	r3, r1
 800aa6e:	bf04      	itt	eq
 800aa70:	6819      	ldreq	r1, [r3, #0]
 800aa72:	685b      	ldreq	r3, [r3, #4]
 800aa74:	6063      	str	r3, [r4, #4]
 800aa76:	bf04      	itt	eq
 800aa78:	1949      	addeq	r1, r1, r5
 800aa7a:	6021      	streq	r1, [r4, #0]
 800aa7c:	6054      	str	r4, [r2, #4]
 800aa7e:	e7ca      	b.n	800aa16 <_free_r+0x26>
 800aa80:	b003      	add	sp, #12
 800aa82:	bd30      	pop	{r4, r5, pc}
 800aa84:	2000079c 	.word	0x2000079c

0800aa88 <_realloc_r>:
 800aa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8c:	4680      	mov	r8, r0
 800aa8e:	4614      	mov	r4, r2
 800aa90:	460e      	mov	r6, r1
 800aa92:	b921      	cbnz	r1, 800aa9e <_realloc_r+0x16>
 800aa94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa98:	4611      	mov	r1, r2
 800aa9a:	f7ff b847 	b.w	8009b2c <_malloc_r>
 800aa9e:	b92a      	cbnz	r2, 800aaac <_realloc_r+0x24>
 800aaa0:	f7ff ffa6 	bl	800a9f0 <_free_r>
 800aaa4:	4625      	mov	r5, r4
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaac:	f000 f850 	bl	800ab50 <_malloc_usable_size_r>
 800aab0:	4284      	cmp	r4, r0
 800aab2:	4607      	mov	r7, r0
 800aab4:	d802      	bhi.n	800aabc <_realloc_r+0x34>
 800aab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aaba:	d812      	bhi.n	800aae2 <_realloc_r+0x5a>
 800aabc:	4621      	mov	r1, r4
 800aabe:	4640      	mov	r0, r8
 800aac0:	f7ff f834 	bl	8009b2c <_malloc_r>
 800aac4:	4605      	mov	r5, r0
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d0ed      	beq.n	800aaa6 <_realloc_r+0x1e>
 800aaca:	42bc      	cmp	r4, r7
 800aacc:	4622      	mov	r2, r4
 800aace:	4631      	mov	r1, r6
 800aad0:	bf28      	it	cs
 800aad2:	463a      	movcs	r2, r7
 800aad4:	f7ff ff58 	bl	800a988 <memcpy>
 800aad8:	4631      	mov	r1, r6
 800aada:	4640      	mov	r0, r8
 800aadc:	f7ff ff88 	bl	800a9f0 <_free_r>
 800aae0:	e7e1      	b.n	800aaa6 <_realloc_r+0x1e>
 800aae2:	4635      	mov	r5, r6
 800aae4:	e7df      	b.n	800aaa6 <_realloc_r+0x1e>
	...

0800aae8 <_read_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	; (800ab08 <_read_r+0x20>)
 800aaec:	4604      	mov	r4, r0
 800aaee:	4608      	mov	r0, r1
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	602a      	str	r2, [r5, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f7f6 f9a8 	bl	8000e4c <_read>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_read_r+0x1e>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_read_r+0x1e>
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	200007a4 	.word	0x200007a4

0800ab0c <_fstat_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4d07      	ldr	r5, [pc, #28]	; (800ab2c <_fstat_r+0x20>)
 800ab10:	2300      	movs	r3, #0
 800ab12:	4604      	mov	r4, r0
 800ab14:	4608      	mov	r0, r1
 800ab16:	4611      	mov	r1, r2
 800ab18:	602b      	str	r3, [r5, #0]
 800ab1a:	f7f6 f9c0 	bl	8000e9e <_fstat>
 800ab1e:	1c43      	adds	r3, r0, #1
 800ab20:	d102      	bne.n	800ab28 <_fstat_r+0x1c>
 800ab22:	682b      	ldr	r3, [r5, #0]
 800ab24:	b103      	cbz	r3, 800ab28 <_fstat_r+0x1c>
 800ab26:	6023      	str	r3, [r4, #0]
 800ab28:	bd38      	pop	{r3, r4, r5, pc}
 800ab2a:	bf00      	nop
 800ab2c:	200007a4 	.word	0x200007a4

0800ab30 <_isatty_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d06      	ldr	r5, [pc, #24]	; (800ab4c <_isatty_r+0x1c>)
 800ab34:	2300      	movs	r3, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	602b      	str	r3, [r5, #0]
 800ab3c:	f7f6 f9bf 	bl	8000ebe <_isatty>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_isatty_r+0x1a>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_isatty_r+0x1a>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	200007a4 	.word	0x200007a4

0800ab50 <_malloc_usable_size_r>:
 800ab50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab54:	1f18      	subs	r0, r3, #4
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	bfbc      	itt	lt
 800ab5a:	580b      	ldrlt	r3, [r1, r0]
 800ab5c:	18c0      	addlt	r0, r0, r3
 800ab5e:	4770      	bx	lr

0800ab60 <_init>:
 800ab60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab62:	bf00      	nop
 800ab64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab66:	bc08      	pop	{r3}
 800ab68:	469e      	mov	lr, r3
 800ab6a:	4770      	bx	lr

0800ab6c <_fini>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	bf00      	nop
 800ab70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab72:	bc08      	pop	{r3}
 800ab74:	469e      	mov	lr, r3
 800ab76:	4770      	bx	lr
