
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d98  08004d98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004da0  08004da0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020cc  20000070  08004e18  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000213c  08004e18  0002213c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001371a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e9  00000000  00000000  000337ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  000360a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00036ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277e8  00000000  00000000  00037e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014043  00000000  00000000  0005f5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f647f  00000000  00000000  0007363b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f48  00000000  00000000  00169b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0016da54  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0016da78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d60 	.word	0x08004d60

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08004d60 	.word	0x08004d60

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <MX_DMA_Init+0x38>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <MX_DMA_Init+0x38>)
 8000518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <MX_DMA_Init+0x38>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	2046      	movs	r0, #70	; 0x46
 8000530:	f000 fe9f 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000534:	2046      	movs	r0, #70	; 0x46
 8000536:	f000 feb8 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023800 	.word	0x40023800

08000548 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b090      	sub	sp, #64	; 0x40
 800054c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800055e:	4b9f      	ldr	r3, [pc, #636]	; (80007dc <MX_GPIO_Init+0x294>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a9e      	ldr	r2, [pc, #632]	; (80007dc <MX_GPIO_Init+0x294>)
 8000564:	f043 0310 	orr.w	r3, r3, #16
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b9c      	ldr	r3, [pc, #624]	; (80007dc <MX_GPIO_Init+0x294>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0310 	and.w	r3, r3, #16
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
 8000574:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000576:	4b99      	ldr	r3, [pc, #612]	; (80007dc <MX_GPIO_Init+0x294>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a98      	ldr	r2, [pc, #608]	; (80007dc <MX_GPIO_Init+0x294>)
 800057c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b96      	ldr	r3, [pc, #600]	; (80007dc <MX_GPIO_Init+0x294>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800058a:	627b      	str	r3, [r7, #36]	; 0x24
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b93      	ldr	r3, [pc, #588]	; (80007dc <MX_GPIO_Init+0x294>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a92      	ldr	r2, [pc, #584]	; (80007dc <MX_GPIO_Init+0x294>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b90      	ldr	r3, [pc, #576]	; (80007dc <MX_GPIO_Init+0x294>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
 80005a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a6:	4b8d      	ldr	r3, [pc, #564]	; (80007dc <MX_GPIO_Init+0x294>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a8c      	ldr	r2, [pc, #560]	; (80007dc <MX_GPIO_Init+0x294>)
 80005ac:	f043 0308 	orr.w	r3, r3, #8
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b8a      	ldr	r3, [pc, #552]	; (80007dc <MX_GPIO_Init+0x294>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0308 	and.w	r3, r3, #8
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b87      	ldr	r3, [pc, #540]	; (80007dc <MX_GPIO_Init+0x294>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a86      	ldr	r2, [pc, #536]	; (80007dc <MX_GPIO_Init+0x294>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b84      	ldr	r3, [pc, #528]	; (80007dc <MX_GPIO_Init+0x294>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	61bb      	str	r3, [r7, #24]
 80005d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b81      	ldr	r3, [pc, #516]	; (80007dc <MX_GPIO_Init+0x294>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a80      	ldr	r2, [pc, #512]	; (80007dc <MX_GPIO_Init+0x294>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b7e      	ldr	r3, [pc, #504]	; (80007dc <MX_GPIO_Init+0x294>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005ee:	4b7b      	ldr	r3, [pc, #492]	; (80007dc <MX_GPIO_Init+0x294>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a7a      	ldr	r2, [pc, #488]	; (80007dc <MX_GPIO_Init+0x294>)
 80005f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b78      	ldr	r3, [pc, #480]	; (80007dc <MX_GPIO_Init+0x294>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000606:	4b75      	ldr	r3, [pc, #468]	; (80007dc <MX_GPIO_Init+0x294>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a74      	ldr	r2, [pc, #464]	; (80007dc <MX_GPIO_Init+0x294>)
 800060c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b72      	ldr	r3, [pc, #456]	; (80007dc <MX_GPIO_Init+0x294>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800061e:	4b6f      	ldr	r3, [pc, #444]	; (80007dc <MX_GPIO_Init+0x294>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a6e      	ldr	r2, [pc, #440]	; (80007dc <MX_GPIO_Init+0x294>)
 8000624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b6c      	ldr	r3, [pc, #432]	; (80007dc <MX_GPIO_Init+0x294>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b69      	ldr	r3, [pc, #420]	; (80007dc <MX_GPIO_Init+0x294>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a68      	ldr	r2, [pc, #416]	; (80007dc <MX_GPIO_Init+0x294>)
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b66      	ldr	r3, [pc, #408]	; (80007dc <MX_GPIO_Init+0x294>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	4b63      	ldr	r3, [pc, #396]	; (80007dc <MX_GPIO_Init+0x294>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a62      	ldr	r2, [pc, #392]	; (80007dc <MX_GPIO_Init+0x294>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b60      	ldr	r3, [pc, #384]	; (80007dc <MX_GPIO_Init+0x294>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2102      	movs	r1, #2
 800066a:	485d      	ldr	r0, [pc, #372]	; (80007e0 <MX_GPIO_Init+0x298>)
 800066c:	f001 fb6c 	bl	8001d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 8000670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000676:	2303      	movs	r3, #3
 8000678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000682:	4619      	mov	r1, r3
 8000684:	4857      	ldr	r0, [pc, #348]	; (80007e4 <MX_GPIO_Init+0x29c>)
 8000686:	f001 f9b3 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 800068a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000690:	2303      	movs	r3, #3
 8000692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000698:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800069c:	4619      	mov	r1, r3
 800069e:	4852      	ldr	r0, [pc, #328]	; (80007e8 <MX_GPIO_Init+0x2a0>)
 80006a0:	f001 f9a6 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB7 PB6 PB13
                           PB12 PB2 PB10 PB1
                           PB0 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80006a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006aa:	2303      	movs	r3, #3
 80006ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006b6:	4619      	mov	r1, r3
 80006b8:	484c      	ldr	r0, [pc, #304]	; (80007ec <MX_GPIO_Init+0x2a4>)
 80006ba:	f001 f999 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD2
                           PD15 PD10 PD14 PD9
                           PD8 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 80006be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c4:	2303      	movs	r3, #3
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006d0:	4619      	mov	r1, r3
 80006d2:	4847      	ldr	r0, [pc, #284]	; (80007f0 <MX_GPIO_Init+0x2a8>)
 80006d4:	f001 f98c 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 80006d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_GPIO_Init+0x2ac>)
 80006ee:	f001 f97f 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA8
                           PA1 PA0 PA2 PA6
                           PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8
 80006f2:	f649 13ef 	movw	r3, #39407	; 0x99ef
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_6
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f8:	2303      	movs	r3, #3
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000704:	4619      	mov	r1, r3
 8000706:	483c      	ldr	r0, [pc, #240]	; (80007f8 <MX_GPIO_Init+0x2b0>)
 8000708:	f001 f972 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 800070c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800071a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800071e:	4619      	mov	r1, r3
 8000720:	4836      	ldr	r0, [pc, #216]	; (80007fc <MX_GPIO_Init+0x2b4>)
 8000722:	f001 f965 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI11
                           PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8000726:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_11
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072c:	2303      	movs	r3, #3
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000738:	4619      	mov	r1, r3
 800073a:	4829      	ldr	r0, [pc, #164]	; (80007e0 <MX_GPIO_Init+0x298>)
 800073c:	f001 f958 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000740:	23ff      	movs	r3, #255	; 0xff
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000744:	2303      	movs	r3, #3
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800074c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000750:	4619      	mov	r1, r3
 8000752:	482b      	ldr	r0, [pc, #172]	; (8000800 <MX_GPIO_Init+0x2b8>)
 8000754:	f001 f94c 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075e:	2303      	movs	r3, #3
 8000760:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076a:	4619      	mov	r1, r3
 800076c:	4825      	ldr	r0, [pc, #148]	; (8000804 <MX_GPIO_Init+0x2bc>)
 800076e:	f001 f93f 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8000772:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000778:	2303      	movs	r3, #3
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000784:	4619      	mov	r1, r3
 8000786:	4820      	ldr	r0, [pc, #128]	; (8000808 <MX_GPIO_Init+0x2c0>)
 8000788:	f001 f932 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 800078c:	2302      	movs	r3, #2
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a0:	4619      	mov	r1, r3
 80007a2:	480f      	ldr	r0, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x298>)
 80007a4:	f001 f924 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RAIN_Pin;
 80007a8:	2310      	movs	r3, #16
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ba:	4619      	mov	r1, r3
 80007bc:	480e      	ldr	r0, [pc, #56]	; (80007f8 <MX_GPIO_Init+0x2b0>)
 80007be:	f001 f917 	bl	80019f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200a      	movs	r0, #10
 80007c8:	f000 fd53 	bl	8001272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007cc:	200a      	movs	r0, #10
 80007ce:	f000 fd6c 	bl	80012aa <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3740      	adds	r7, #64	; 0x40
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40022000 	.word	0x40022000
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40021800 	.word	0x40021800
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40022400 	.word	0x40022400
 8000800:	40022800 	.word	0x40022800
 8000804:	40021400 	.word	0x40021400
 8000808:	40021c00 	.word	0x40021c00

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000810:	b08f      	sub	sp, #60	; 0x3c
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f000 fbd5 	bl	8000fc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f8f0 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f7ff fe94 	bl	8000548 <MX_GPIO_Init>
  MX_TIM7_Init();
 8000820:	f000 fa80 	bl	8000d24 <MX_TIM7_Init>
  MX_DMA_Init();
 8000824:	f7ff fe72 	bl	800050c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000828:	f000 fada 	bl	8000de0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800082c:	f000 f95c 	bl	8000ae8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//  sprintf((char*)out,'Console out.\n');
//  HAL_UART_Transmit_DMA(&huart1, (uint8_t *) out, strlen((char *)out));
  HAL_TIM_Base_Start_IT(&htim7);
 8000830:	4865      	ldr	r0, [pc, #404]	; (80009c8 <main+0x1bc>)
 8000832:	f002 fe8f 	bl	8003554 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if (Flag_EXTI4 == 1){
 8000836:	4b65      	ldr	r3, [pc, #404]	; (80009cc <main+0x1c0>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	f040 80b0 	bne.w	80009a0 <main+0x194>
  		rain_events_size = sizeof(rain_events)/sizeof(rain_events[0]);
 8000840:	4a63      	ldr	r2, [pc, #396]	; (80009d0 <main+0x1c4>)
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	8013      	strh	r3, [r2, #0]
			time_t now = time(NULL);
 8000848:	2000      	movs	r0, #0
 800084a:	f004 fa55 	bl	8004cf8 <time>
 800084e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
//			sprintf((char *)date,"Date:%02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
//  		HAL_UART_Transmit_DMA(&huart1, (uint8_t *) date, strlen((char*)date));
			rain_events[rain_events_size] = now;
 8000852:	4b5f      	ldr	r3, [pc, #380]	; (80009d0 <main+0x1c4>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	4a5f      	ldr	r2, [pc, #380]	; (80009d4 <main+0x1c8>)
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	18d1      	adds	r1, r2, r3
 800085c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000860:	e9c1 2300 	strd	r2, r3, [r1]
  		for (uint16_t i = 0; i< rain_events_size; i++){
 8000864:	2300      	movs	r3, #0
 8000866:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000868:	e090      	b.n	800098c <main+0x180>
  			if (rain_events[i] >= now - MONTH_SECONDS){
 800086a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800086c:	4a59      	ldr	r2, [pc, #356]	; (80009d4 <main+0x1c8>)
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4413      	add	r3, r2
 8000872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000876:	2300      	movs	r3, #0
 8000878:	17da      	asrs	r2, r3, #31
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	627a      	str	r2, [r7, #36]	; 0x24
 800087e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000882:	6a3e      	ldr	r6, [r7, #32]
 8000884:	1b94      	subs	r4, r2, r6
 8000886:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000888:	eb63 0506 	sbc.w	r5, r3, r6
 800088c:	42a0      	cmp	r0, r4
 800088e:	eb71 0305 	sbcs.w	r3, r1, r5
 8000892:	db6e      	blt.n	8000972 <main+0x166>
  				rain_hourly+=RAIN_INC_MM;
 8000894:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <main+0x1cc>)
 8000896:	edd3 7a00 	vldr	s15, [r3]
 800089a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80009dc <main+0x1d0>
 800089e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008a2:	4b4d      	ldr	r3, [pc, #308]	; (80009d8 <main+0x1cc>)
 80008a4:	edc3 7a00 	vstr	s15, [r3]
  				if (rain_events[i] >= now - WEEK_SECONDS){
 80008a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008aa:	4a4a      	ldr	r2, [pc, #296]	; (80009d4 <main+0x1c8>)
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	4413      	add	r3, r2
 80008b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <main+0x1d4>)
 80008b6:	17da      	asrs	r2, r3, #31
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	61fa      	str	r2, [r7, #28]
 80008bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80008c0:	69be      	ldr	r6, [r7, #24]
 80008c2:	ebb2 0806 	subs.w	r8, r2, r6
 80008c6:	69fe      	ldr	r6, [r7, #28]
 80008c8:	eb63 0906 	sbc.w	r9, r3, r6
 80008cc:	4540      	cmp	r0, r8
 80008ce:	eb71 0309 	sbcs.w	r3, r1, r9
 80008d2:	db58      	blt.n	8000986 <main+0x17a>
  					rain_daily+=RAIN_INC_MM;
 80008d4:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <main+0x1d8>)
 80008d6:	edd3 7a00 	vldr	s15, [r3]
 80008da:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80009dc <main+0x1d0>
 80008de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008e2:	4b40      	ldr	r3, [pc, #256]	; (80009e4 <main+0x1d8>)
 80008e4:	edc3 7a00 	vstr	s15, [r3]
  					if (rain_events[i] >= now - DAY_SECONDS){
 80008e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80008ea:	4a3a      	ldr	r2, [pc, #232]	; (80009d4 <main+0x1c8>)
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	4413      	add	r3, r2
 80008f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008f4:	4b3c      	ldr	r3, [pc, #240]	; (80009e8 <main+0x1dc>)
 80008f6:	17da      	asrs	r2, r3, #31
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	617a      	str	r2, [r7, #20]
 80008fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000900:	693e      	ldr	r6, [r7, #16]
 8000902:	ebb2 0a06 	subs.w	sl, r2, r6
 8000906:	697e      	ldr	r6, [r7, #20]
 8000908:	eb63 0b06 	sbc.w	fp, r3, r6
 800090c:	4550      	cmp	r0, sl
 800090e:	eb71 030b 	sbcs.w	r3, r1, fp
 8000912:	db38      	blt.n	8000986 <main+0x17a>
  						rain_weekly+=RAIN_INC_MM;
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <main+0x1e0>)
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80009dc <main+0x1d0>
 800091e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000922:	4b32      	ldr	r3, [pc, #200]	; (80009ec <main+0x1e0>)
 8000924:	edc3 7a00 	vstr	s15, [r3]
  						if (rain_events[i] >= now - HOUR_SECONDS){
 8000928:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800092a:	4a2a      	ldr	r2, [pc, #168]	; (80009d4 <main+0x1c8>)
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	4413      	add	r3, r2
 8000930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000934:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000938:	17da      	asrs	r2, r3, #31
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	60fa      	str	r2, [r7, #12]
 800093e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000942:	68be      	ldr	r6, [r7, #8]
 8000944:	1b96      	subs	r6, r2, r6
 8000946:	603e      	str	r6, [r7, #0]
 8000948:	68fe      	ldr	r6, [r7, #12]
 800094a:	eb63 0306 	sbc.w	r3, r3, r6
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	4298      	cmp	r0, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	eb71 0303 	sbcs.w	r3, r1, r3
 800095a:	db14      	blt.n	8000986 <main+0x17a>
  							rain_monthly+=RAIN_INC_MM;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <main+0x1e4>)
 800095e:	edd3 7a00 	vldr	s15, [r3]
 8000962:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80009dc <main+0x1d0>
 8000966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <main+0x1e4>)
 800096c:	edc3 7a00 	vstr	s15, [r3]
 8000970:	e009      	b.n	8000986 <main+0x17a>
							}
						}
					}
  			}
  			else rain_events[i] = 0;
 8000972:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <main+0x1c8>)
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	18d1      	adds	r1, r2, r3
 800097a:	f04f 0200 	mov.w	r2, #0
 800097e:	f04f 0300 	mov.w	r3, #0
 8000982:	e9c1 2300 	strd	r2, r3, [r1]
  		for (uint16_t i = 0; i< rain_events_size; i++){
 8000986:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000988:	3301      	adds	r3, #1
 800098a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800098c:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <main+0x1c4>)
 800098e:	881a      	ldrh	r2, [r3, #0]
 8000990:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000992:	4293      	cmp	r3, r2
 8000994:	f4ff af69 	bcc.w	800086a <main+0x5e>
  		}
			Flag_EXTI4 = 0;
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <main+0x1c0>)
 800099a:	2300      	movs	r3, #0
 800099c:	7013      	strb	r3, [r2, #0]
 800099e:	e74a      	b.n	8000836 <main+0x2a>
		}
		else if (Flag_TIM7 == 1){
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <main+0x1e8>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d107      	bne.n	80009b8 <main+0x1ac>
			HAL_GPIO_TogglePin(LD_GPIO_Port, LD_Pin);
 80009a8:	2102      	movs	r1, #2
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <main+0x1ec>)
 80009ac:	f001 f9e5 	bl	8001d7a <HAL_GPIO_TogglePin>
			Flag_TIM7 = 0;
 80009b0:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <main+0x1e8>)
 80009b2:	2300      	movs	r3, #0
 80009b4:	7013      	strb	r3, [r2, #0]
 80009b6:	e73e      	b.n	8000836 <main+0x2a>
		}
		else{
			HAL_SuspendTick();
 80009b8:	f000 fb60 	bl	800107c <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 80009bc:	2102      	movs	r1, #2
 80009be:	2000      	movs	r0, #0
 80009c0:	f001 fa1a 	bl	8001df8 <HAL_PWR_EnterSLEEPMode>
  	if (Flag_EXTI4 == 1){
 80009c4:	e737      	b.n	8000836 <main+0x2a>
 80009c6:	bf00      	nop
 80009c8:	20002004 	.word	0x20002004
 80009cc:	2000008d 	.word	0x2000008d
 80009d0:	20001fe0 	.word	0x20001fe0
 80009d4:	20000090 	.word	0x20000090
 80009d8:	20001fd0 	.word	0x20001fd0
 80009dc:	3e8f0d84 	.word	0x3e8f0d84
 80009e0:	00093a80 	.word	0x00093a80
 80009e4:	20001fd4 	.word	0x20001fd4
 80009e8:	00015180 	.word	0x00015180
 80009ec:	20001fd8 	.word	0x20001fd8
 80009f0:	20001fdc 	.word	0x20001fdc
 80009f4:	2000008c 	.word	0x2000008c
 80009f8:	40022000 	.word	0x40022000

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f004 f96c 	bl	8004ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	4a2b      	ldr	r2, [pc, #172]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <SystemClock_Config+0xd8>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <SystemClock_Config+0xdc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a40:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <SystemClock_Config+0xdc>)
 8000a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <SystemClock_Config+0xdc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a54:	2309      	movs	r3, #9
 8000a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a70:	2360      	movs	r3, #96	; 0x60
 8000a72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 0320 	add.w	r3, r7, #32
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fa2b 	bl	8001edc <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a8c:	f000 f826 	bl	8000adc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a90:	f001 f9d4 	bl	8001e3c <HAL_PWREx_EnableOverDrive>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a9a:	f000 f81f 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2103      	movs	r1, #3
 8000abc:	4618      	mov	r0, r3
 8000abe:	f001 fcb1 	bl	8002424 <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ac8:	f000 f808 	bl	8000adc <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3750      	adds	r7, #80	; 0x50
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b04:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b06:	4a25      	ldr	r2, [pc, #148]	; (8000b9c <MX_RTC_Init+0xb4>)
 8000b08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b10:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b12:	227f      	movs	r2, #127	; 0x7f
 8000b14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b18:	22ff      	movs	r2, #255	; 0xff
 8000b1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b2e:	481a      	ldr	r0, [pc, #104]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b30:	f002 fa4e 	bl	8002fd0 <HAL_RTC_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000b3a:	f7ff ffcf 	bl	8000adc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	2201      	movs	r2, #1
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480f      	ldr	r0, [pc, #60]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b5c:	f002 faca 	bl	80030f4 <HAL_RTC_SetTime>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000b66:	f7ff ffb9 	bl	8000adc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_RTC_Init+0xb0>)
 8000b82:	f002 fb75 	bl	8003270 <HAL_RTC_SetDate>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b8c:	f7ff ffa6 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20001fe4 	.word	0x20001fe4
 8000b9c:	40002800 	.word	0x40002800

08000ba0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0a4      	sub	sp, #144	; 0x90
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2284      	movs	r2, #132	; 0x84
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 f899 	bl	8004ce8 <memset>
  if(rtcHandle->Instance==RTC)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_RTC_MspInit+0x54>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d114      	bne.n	8000bea <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fe0e 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000bda:	f7ff ff7f 	bl	8000adc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_RTC_MspInit+0x58>)
 8000be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <HAL_RTC_MspInit+0x58>)
 8000be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bea:	bf00      	nop
 8000bec:	3790      	adds	r7, #144	; 0x90
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40002800 	.word	0x40002800
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f9d4 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	HAL_ResumeTick();
 8000c9c:	f000 f9fe 	bl	800109c <HAL_ResumeTick>
	Flag_EXTI4 = 1;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <EXTI4_IRQHandler+0x18>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RAIN_Pin);
 8000ca6:	2010      	movs	r0, #16
 8000ca8:	f001 f882 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000008d 	.word	0x2000008d

08000cb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_DMAStop(&huart1);
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <USART1_IRQHandler+0x14>)
 8000cba:	f002 ffaf 	bl	8003c1c <HAL_UART_DMAStop>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cbe:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <USART1_IRQHandler+0x14>)
 8000cc0:	f003 f83e 	bl	8003d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20002050 	.word	0x20002050

08000ccc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	HAL_ResumeTick();
 8000cd0:	f000 f9e4 	bl	800109c <HAL_ResumeTick>
	Flag_TIM7 = 1;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <TIM7_IRQHandler+0x18>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cda:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <TIM7_IRQHandler+0x1c>)
 8000cdc:	f002 fcb2 	bl	8003644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000008c 	.word	0x2000008c
 8000ce8:	20002004 	.word	0x20002004

08000cec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <DMA2_Stream7_IRQHandler+0x10>)
 8000cf2:	f000 fc35 	bl	8001560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200020d4 	.word	0x200020d4

08000d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_TIM7_Init+0x68>)
 8000d36:	4a16      	ldr	r2, [pc, #88]	; (8000d90 <MX_TIM7_Init+0x6c>)
 8000d38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_TIM7_Init+0x68>)
 8000d3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d40:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_TIM7_Init+0x68>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_TIM7_Init+0x68>)
 8000d4a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d4e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_TIM7_Init+0x68>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM7_Init+0x68>)
 8000d58:	f002 fba4 	bl	80034a4 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000d62:	f7ff febb 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_TIM7_Init+0x68>)
 8000d74:	f002 fe58 	bl	8003a28 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000d7e:	f7ff fead 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20002004 	.word	0x20002004
 8000d90:	40001400 	.word	0x40001400

08000d94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_TIM_Base_MspInit+0x44>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d113      	bne.n	8000dce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_TIM_Base_MspInit+0x48>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <HAL_TIM_Base_MspInit+0x48>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_TIM_Base_MspInit+0x48>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2037      	movs	r0, #55	; 0x37
 8000dc4:	f000 fa55 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000dc8:	2037      	movs	r0, #55	; 0x37
 8000dca:	f000 fa6e 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40001400 	.word	0x40001400
 8000ddc:	40023800 	.word	0x40023800

08000de0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000de6:	4a15      	ldr	r2, [pc, #84]	; (8000e3c <MX_USART1_UART_Init+0x5c>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000dec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART1_UART_Init+0x58>)
 8000e24:	f002 feac 	bl	8003b80 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e2e:	f7ff fe55 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20002050 	.word	0x20002050
 8000e3c:	40011000 	.word	0x40011000

08000e40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0aa      	sub	sp, #168	; 0xa8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2284      	movs	r2, #132	; 0x84
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 ff41 	bl	8004ce8 <memset>
  if(uartHandle->Instance==USART1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a3c      	ldr	r2, [pc, #240]	; (8000f5c <HAL_UART_MspInit+0x11c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d171      	bne.n	8000f54 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e70:	2340      	movs	r3, #64	; 0x40
 8000e72:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e74:	2300      	movs	r3, #0
 8000e76:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fcb7 	bl	80027f0 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e88:	f7ff fe28 	bl	8000adc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8c:	4b34      	ldr	r3, [pc, #208]	; (8000f60 <HAL_UART_MspInit+0x120>)
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e90:	4a33      	ldr	r2, [pc, #204]	; (8000f60 <HAL_UART_MspInit+0x120>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6453      	str	r3, [r2, #68]	; 0x44
 8000e98:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <HAL_UART_MspInit+0x120>)
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b2e      	ldr	r3, [pc, #184]	; (8000f60 <HAL_UART_MspInit+0x120>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a2d      	ldr	r2, [pc, #180]	; (8000f60 <HAL_UART_MspInit+0x120>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <HAL_UART_MspInit+0x120>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ebc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4820      	ldr	r0, [pc, #128]	; (8000f64 <HAL_UART_MspInit+0x124>)
 8000ee4:	f000 fd84 	bl	80019f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <HAL_UART_MspInit+0x12c>)
 8000eec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000ef0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ef4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000ef8:	2240      	movs	r2, #64	; 0x40
 8000efa:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000f04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f08:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f28:	480f      	ldr	r0, [pc, #60]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000f2a:	f000 f9d9 	bl	80012e0 <HAL_DMA_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8000f34:	f7ff fdd2 	bl	8000adc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000f3c:	66da      	str	r2, [r3, #108]	; 0x6c
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_UART_MspInit+0x128>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2025      	movs	r0, #37	; 0x25
 8000f4a:	f000 f992 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f4e:	2025      	movs	r0, #37	; 0x25
 8000f50:	f000 f9ab 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f54:	bf00      	nop
 8000f56:	37a8      	adds	r7, #168	; 0xa8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40011000 	.word	0x40011000
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	200020d4 	.word	0x200020d4
 8000f6c:	400264b8 	.word	0x400264b8

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	; (8000fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9a:	f7ff feb1 	bl	8000d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f003 fe7f 	bl	8004ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fc33 	bl	800080c <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fb4:	08004da8 	.word	0x08004da8
  ldr r2, =_sbss
 8000fb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fbc:	2000213c 	.word	0x2000213c

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>

08000fc2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f000 f948 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 f805 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd2:	f7ff fe13 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f963 	bl	80012c6 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001018:	f000 f92b 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000000 	.word	0x20000000
 8001034:	20000008 	.word	0x20000008
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	20002134 	.word	0x20002134

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20002134 	.word	0x20002134

0800107c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_SuspendTick+0x1c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_SuspendTick+0x1c>)
 8001086:	f023 0302 	bic.w	r3, r3, #2
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_ResumeTick+0x1c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_ResumeTick+0x1c>)
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <__NVIC_SetPriorityGrouping+0x40>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <__NVIC_SetPriorityGrouping+0x40>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00
 8001100:	05fa0000 	.word	0x05fa0000

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff3e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff31 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff feba 	bl	8001064 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e099      	b.n	8001430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2202      	movs	r2, #2
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131c:	e00f      	b.n	800133e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800131e:	f7ff fea1 	bl	8001064 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b05      	cmp	r3, #5
 800132a:	d908      	bls.n	800133e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2220      	movs	r2, #32
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2203      	movs	r2, #3
 8001336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e078      	b.n	8001430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1e8      	bne.n	800131e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_DMA_Init+0x158>)
 8001358:	4013      	ands	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800136a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4313      	orrs	r3, r2
 800138e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2b04      	cmp	r3, #4
 8001396:	d107      	bne.n	80013a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4313      	orrs	r3, r2
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	697a      	ldr	r2, [r7, #20]
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f023 0307 	bic.w	r3, r3, #7
 80013be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d117      	bne.n	8001402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00e      	beq.n	8001402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fa87 	bl	80018f8 <DMA_CheckFifoParam>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013fe:	2301      	movs	r3, #1
 8001400:	e016      	b.n	8001430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fa3e 	bl	800188c <DMA_CalcBaseAndBitshift>
 8001410:	4603      	mov	r3, r0
 8001412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001418:	223f      	movs	r2, #63	; 0x3f
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	f010803f 	.word	0xf010803f

0800143c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800144a:	f7ff fe0b 	bl	8001064 <HAL_GetTick>
 800144e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d008      	beq.n	800146e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2280      	movs	r2, #128	; 0x80
 8001460:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e052      	b.n	8001514 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 0216 	bic.w	r2, r2, #22
 800147c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800148c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d103      	bne.n	800149e <HAL_DMA_Abort+0x62>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0208 	bic.w	r2, r2, #8
 80014ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0201 	bic.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014be:	e013      	b.n	80014e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c0:	f7ff fdd0 	bl	8001064 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d90c      	bls.n	80014e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2220      	movs	r2, #32
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e015      	b.n	8001514 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e4      	bne.n	80014c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fa:	223f      	movs	r2, #63	; 0x3f
 80014fc:	409a      	lsls	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d004      	beq.n	800153a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00c      	b.n	8001554 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2205      	movs	r2, #5
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800156c:	4b8e      	ldr	r3, [pc, #568]	; (80017a8 <HAL_DMA_IRQHandler+0x248>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a8e      	ldr	r2, [pc, #568]	; (80017ac <HAL_DMA_IRQHandler+0x24c>)
 8001572:	fba2 2303 	umull	r2, r3, r2, r3
 8001576:	0a9b      	lsrs	r3, r3, #10
 8001578:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158a:	2208      	movs	r2, #8
 800158c:	409a      	lsls	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d01a      	beq.n	80015cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0204 	bic.w	r2, r2, #4
 80015b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b8:	2208      	movs	r2, #8
 80015ba:	409a      	lsls	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	f043 0201 	orr.w	r2, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2201      	movs	r2, #1
 80015d2:	409a      	lsls	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d012      	beq.n	8001602 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	2201      	movs	r2, #1
 80015f0:	409a      	lsls	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fa:	f043 0202 	orr.w	r2, r3, #2
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	2204      	movs	r2, #4
 8001608:	409a      	lsls	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d012      	beq.n	8001638 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	2204      	movs	r2, #4
 8001626:	409a      	lsls	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001630:	f043 0204 	orr.w	r2, r3, #4
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	2210      	movs	r2, #16
 800163e:	409a      	lsls	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d043      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d03c      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	2210      	movs	r2, #16
 800165c:	409a      	lsls	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d018      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d108      	bne.n	8001690 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d024      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	4798      	blx	r3
 800168e:	e01f      	b.n	80016d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01b      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
 80016a0:	e016      	b.n	80016d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d107      	bne.n	80016c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0208 	bic.w	r2, r2, #8
 80016be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	2220      	movs	r2, #32
 80016d6:	409a      	lsls	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 808f 	beq.w	8001800 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8087 	beq.w	8001800 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	2220      	movs	r2, #32
 80016f8:	409a      	lsls	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b05      	cmp	r3, #5
 8001708:	d136      	bne.n	8001778 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0216 	bic.w	r2, r2, #22
 8001718:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001728:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d103      	bne.n	800173a <HAL_DMA_IRQHandler+0x1da>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0208 	bic.w	r2, r2, #8
 8001748:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174e:	223f      	movs	r2, #63	; 0x3f
 8001750:	409a      	lsls	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176a:	2b00      	cmp	r3, #0
 800176c:	d07e      	beq.n	800186c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
        }
        return;
 8001776:	e079      	b.n	800186c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d01d      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10d      	bne.n	80017b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001798:	2b00      	cmp	r3, #0
 800179a:	d031      	beq.n	8001800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	4798      	blx	r3
 80017a4:	e02c      	b.n	8001800 <HAL_DMA_IRQHandler+0x2a0>
 80017a6:	bf00      	nop
 80017a8:	20000000 	.word	0x20000000
 80017ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d023      	beq.n	8001800 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	4798      	blx	r3
 80017c0:	e01e      	b.n	8001800 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10f      	bne.n	80017f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 0210 	bic.w	r2, r2, #16
 80017de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	2b00      	cmp	r3, #0
 8001806:	d032      	beq.n	800186e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d022      	beq.n	800185a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2205      	movs	r2, #5
 8001818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3301      	adds	r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	429a      	cmp	r2, r3
 8001836:	d307      	bcc.n	8001848 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f2      	bne.n	800182c <HAL_DMA_IRQHandler+0x2cc>
 8001846:	e000      	b.n	800184a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001848:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
 800186a:	e000      	b.n	800186e <HAL_DMA_IRQHandler+0x30e>
        return;
 800186c:	bf00      	nop
    }
  }
}
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	3b10      	subs	r3, #16
 800189c:	4a13      	ldr	r2, [pc, #76]	; (80018ec <DMA_CalcBaseAndBitshift+0x60>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <DMA_CalcBaseAndBitshift+0x64>)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d908      	bls.n	80018cc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <DMA_CalcBaseAndBitshift+0x68>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	1d1a      	adds	r2, r3, #4
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58
 80018ca:	e006      	b.n	80018da <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <DMA_CalcBaseAndBitshift+0x68>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	aaaaaaab 	.word	0xaaaaaaab
 80018f0:	08004d90 	.word	0x08004d90
 80018f4:	fffffc00 	.word	0xfffffc00

080018f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d11f      	bne.n	8001952 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d856      	bhi.n	80019c6 <DMA_CheckFifoParam+0xce>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <DMA_CheckFifoParam+0x28>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	08001931 	.word	0x08001931
 8001924:	08001943 	.word	0x08001943
 8001928:	08001931 	.word	0x08001931
 800192c:	080019c7 	.word	0x080019c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d046      	beq.n	80019ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001940:	e043      	b.n	80019ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800194a:	d140      	bne.n	80019ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001950:	e03d      	b.n	80019ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800195a:	d121      	bne.n	80019a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d837      	bhi.n	80019d2 <DMA_CheckFifoParam+0xda>
 8001962:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <DMA_CheckFifoParam+0x70>)
 8001964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001968:	08001979 	.word	0x08001979
 800196c:	0800197f 	.word	0x0800197f
 8001970:	08001979 	.word	0x08001979
 8001974:	08001991 	.word	0x08001991
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	73fb      	strb	r3, [r7, #15]
      break;
 800197c:	e030      	b.n	80019e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d025      	beq.n	80019d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800198e:	e022      	b.n	80019d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001998:	d11f      	bne.n	80019da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800199e:	e01c      	b.n	80019da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d903      	bls.n	80019ae <DMA_CheckFifoParam+0xb6>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d003      	beq.n	80019b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019ac:	e018      	b.n	80019e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
      break;
 80019b2:	e015      	b.n	80019e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00e      	beq.n	80019de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
      break;
 80019c4:	e00b      	b.n	80019de <DMA_CheckFifoParam+0xe6>
      break;
 80019c6:	bf00      	nop
 80019c8:	e00a      	b.n	80019e0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ca:	bf00      	nop
 80019cc:	e008      	b.n	80019e0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ce:	bf00      	nop
 80019d0:	e006      	b.n	80019e0 <DMA_CheckFifoParam+0xe8>
      break;
 80019d2:	bf00      	nop
 80019d4:	e004      	b.n	80019e0 <DMA_CheckFifoParam+0xe8>
      break;
 80019d6:	bf00      	nop
 80019d8:	e002      	b.n	80019e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019da:	bf00      	nop
 80019dc:	e000      	b.n	80019e0 <DMA_CheckFifoParam+0xe8>
      break;
 80019de:	bf00      	nop
    }
  } 
  
  return status; 
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	e175      	b.n	8001cfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f040 8164 	bne.w	8001cf6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d005      	beq.n	8001a46 <HAL_GPIO_Init+0x56>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d130      	bne.n	8001aa8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	091b      	lsrs	r3, r3, #4
 8001a92:	f003 0201 	and.w	r2, r3, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d017      	beq.n	8001ae4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d123      	bne.n	8001b38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	69b9      	ldr	r1, [r7, #24]
 8001b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0203 	and.w	r2, r3, #3
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80be 	beq.w	8001cf6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	4b66      	ldr	r3, [pc, #408]	; (8001d14 <HAL_GPIO_Init+0x324>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a65      	ldr	r2, [pc, #404]	; (8001d14 <HAL_GPIO_Init+0x324>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b63      	ldr	r3, [pc, #396]	; (8001d14 <HAL_GPIO_Init+0x324>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b92:	4a61      	ldr	r2, [pc, #388]	; (8001d18 <HAL_GPIO_Init+0x328>)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <HAL_GPIO_Init+0x32c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d037      	beq.n	8001c2e <HAL_GPIO_Init+0x23e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a57      	ldr	r2, [pc, #348]	; (8001d20 <HAL_GPIO_Init+0x330>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d031      	beq.n	8001c2a <HAL_GPIO_Init+0x23a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a56      	ldr	r2, [pc, #344]	; (8001d24 <HAL_GPIO_Init+0x334>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d02b      	beq.n	8001c26 <HAL_GPIO_Init+0x236>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a55      	ldr	r2, [pc, #340]	; (8001d28 <HAL_GPIO_Init+0x338>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d025      	beq.n	8001c22 <HAL_GPIO_Init+0x232>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a54      	ldr	r2, [pc, #336]	; (8001d2c <HAL_GPIO_Init+0x33c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d01f      	beq.n	8001c1e <HAL_GPIO_Init+0x22e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a53      	ldr	r2, [pc, #332]	; (8001d30 <HAL_GPIO_Init+0x340>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d019      	beq.n	8001c1a <HAL_GPIO_Init+0x22a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <HAL_GPIO_Init+0x344>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0x226>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a51      	ldr	r2, [pc, #324]	; (8001d38 <HAL_GPIO_Init+0x348>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00d      	beq.n	8001c12 <HAL_GPIO_Init+0x222>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a50      	ldr	r2, [pc, #320]	; (8001d3c <HAL_GPIO_Init+0x34c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d007      	beq.n	8001c0e <HAL_GPIO_Init+0x21e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4f      	ldr	r2, [pc, #316]	; (8001d40 <HAL_GPIO_Init+0x350>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_GPIO_Init+0x21a>
 8001c06:	2309      	movs	r3, #9
 8001c08:	e012      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	e010      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c0e:	2308      	movs	r3, #8
 8001c10:	e00e      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e00c      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c16:	2306      	movs	r3, #6
 8001c18:	e00a      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	e008      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c1e:	2304      	movs	r3, #4
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c22:	2303      	movs	r3, #3
 8001c24:	e004      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e002      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x240>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	f002 0203 	and.w	r2, r2, #3
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	4093      	lsls	r3, r2
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c40:	4935      	ldr	r1, [pc, #212]	; (8001d18 <HAL_GPIO_Init+0x328>)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	3302      	adds	r3, #2
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_GPIO_Init+0x354>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <HAL_GPIO_Init+0x354>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <HAL_GPIO_Init+0x354>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c9c:	4a29      	ldr	r2, [pc, #164]	; (8001d44 <HAL_GPIO_Init+0x354>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ca2:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <HAL_GPIO_Init+0x354>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc6:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <HAL_GPIO_Init+0x354>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_GPIO_Init+0x354>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <HAL_GPIO_Init+0x354>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	f67f ae86 	bls.w	8001a10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3724      	adds	r7, #36	; 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40013800 	.word	0x40013800
 8001d1c:	40020000 	.word	0x40020000
 8001d20:	40020400 	.word	0x40020400
 8001d24:	40020800 	.word	0x40020800
 8001d28:	40020c00 	.word	0x40020c00
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40021400 	.word	0x40021400
 8001d34:	40021800 	.word	0x40021800
 8001d38:	40021c00 	.word	0x40021c00
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	40022400 	.word	0x40022400
 8001d44:	40013c00 	.word	0x40013c00

08001d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
 8001d54:	4613      	mov	r3, r2
 8001d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d58:	787b      	ldrb	r3, [r7, #1]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d64:	e003      	b.n	8001d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	041a      	lsls	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	619a      	str	r2, [r3, #24]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d8c:	887a      	ldrh	r2, [r7, #2]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4013      	ands	r3, r2
 8001d92:	041a      	lsls	r2, r3, #16
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	400b      	ands	r3, r1
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f806 	bl	8001de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40013c00 	.word	0x40013c00

08001de0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_PWR_EnterSLEEPMode+0x40>)
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <HAL_PWR_EnterSLEEPMode+0x40>)
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e10:	f3bf 8f4f 	dsb	sy
}
 8001e14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e16:	f3bf 8f6f 	isb	sy
}
 8001e1a:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8001e22:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001e24:	e002      	b.n	8001e2c <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 8001e26:	bf40      	sev
    __WFE();
 8001e28:	bf20      	wfe
    __WFE();
 8001e2a:	bf20      	wfe
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6a:	f7ff f8fb 	bl	8001064 <HAL_GetTick>
 8001e6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e70:	e009      	b.n	8001e86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e72:	f7ff f8f7 	bl	8001064 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e80:	d901      	bls.n	8001e86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e022      	b.n	8001ecc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e92:	d1ee      	bne.n	8001e72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea0:	f7ff f8e0 	bl	8001064 <HAL_GetTick>
 8001ea4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ea6:	e009      	b.n	8001ebc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ea8:	f7ff f8dc 	bl	8001064 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb6:	d901      	bls.n	8001ebc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e007      	b.n	8001ecc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ec8:	d1ee      	bne.n	8001ea8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000

08001edc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e291      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8087 	beq.w	800200e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f00:	4b96      	ldr	r3, [pc, #600]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d00c      	beq.n	8001f26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f0c:	4b93      	ldr	r3, [pc, #588]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d112      	bne.n	8001f3e <HAL_RCC_OscConfig+0x62>
 8001f18:	4b90      	ldr	r3, [pc, #576]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f24:	d10b      	bne.n	8001f3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f26:	4b8d      	ldr	r3, [pc, #564]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d06c      	beq.n	800200c <HAL_RCC_OscConfig+0x130>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d168      	bne.n	800200c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e26b      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x7a>
 8001f48:	4b84      	ldr	r3, [pc, #528]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a83      	ldr	r2, [pc, #524]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e02e      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd8>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x9c>
 8001f5e:	4b7f      	ldr	r3, [pc, #508]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a7e      	ldr	r2, [pc, #504]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b7c      	ldr	r3, [pc, #496]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7b      	ldr	r2, [pc, #492]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e01d      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0xc0>
 8001f82:	4b76      	ldr	r3, [pc, #472]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a75      	ldr	r2, [pc, #468]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b73      	ldr	r3, [pc, #460]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a72      	ldr	r2, [pc, #456]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd8>
 8001f9c:	4b6f      	ldr	r3, [pc, #444]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6e      	ldr	r2, [pc, #440]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b6c      	ldr	r3, [pc, #432]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a6b      	ldr	r2, [pc, #428]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff f852 	bl	8001064 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff f84e 	bl	8001064 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e21f      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b61      	ldr	r3, [pc, #388]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xe8>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff f83e 	bl	8001064 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff f83a 	bl	8001064 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e20b      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	4b57      	ldr	r3, [pc, #348]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x110>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d069      	beq.n	80020ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201a:	4b50      	ldr	r3, [pc, #320]	; (800215c <HAL_RCC_OscConfig+0x280>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002026:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b08      	cmp	r3, #8
 8002030:	d11c      	bne.n	800206c <HAL_RCC_OscConfig+0x190>
 8002032:	4b4a      	ldr	r3, [pc, #296]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d116      	bne.n	800206c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_RCC_OscConfig+0x17a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e1df      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	493d      	ldr	r1, [pc, #244]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	e040      	b.n	80020ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d023      	beq.n	80020bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a38      	ldr	r2, [pc, #224]	; (800215c <HAL_RCC_OscConfig+0x280>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7fe fff0 	bl	8001064 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002088:	f7fe ffec 	bl	8001064 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1bd      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <HAL_RCC_OscConfig+0x280>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b2d      	ldr	r3, [pc, #180]	; (800215c <HAL_RCC_OscConfig+0x280>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4929      	ldr	r1, [pc, #164]	; (800215c <HAL_RCC_OscConfig+0x280>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
 80020ba:	e018      	b.n	80020ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_OscConfig+0x280>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a26      	ldr	r2, [pc, #152]	; (800215c <HAL_RCC_OscConfig+0x280>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe ffcc 	bl	8001064 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe ffc8 	bl	8001064 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e199      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_RCC_OscConfig+0x280>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d038      	beq.n	800216c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d019      	beq.n	8002136 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002106:	4a15      	ldr	r2, [pc, #84]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7fe ffa9 	bl	8001064 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002116:	f7fe ffa5 	bl	8001064 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e176      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_RCC_OscConfig+0x280>)
 800212a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x23a>
 8002134:	e01a      	b.n	800216c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_RCC_OscConfig+0x280>)
 8002138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_RCC_OscConfig+0x280>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7fe ff8f 	bl	8001064 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214a:	f7fe ff8b 	bl	8001064 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d903      	bls.n	8002160 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e15c      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
 800215c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002160:	4b91      	ldr	r3, [pc, #580]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1ee      	bne.n	800214a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80a4 	beq.w	80022c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217a:	4b8b      	ldr	r3, [pc, #556]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10d      	bne.n	80021a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	4b88      	ldr	r3, [pc, #544]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a87      	ldr	r2, [pc, #540]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b85      	ldr	r3, [pc, #532]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219e:	2301      	movs	r3, #1
 80021a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a2:	4b82      	ldr	r3, [pc, #520]	; (80023ac <HAL_RCC_OscConfig+0x4d0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021ae:	4b7f      	ldr	r3, [pc, #508]	; (80023ac <HAL_RCC_OscConfig+0x4d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7e      	ldr	r2, [pc, #504]	; (80023ac <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7fe ff53 	bl	8001064 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c2:	f7fe ff4f 	bl	8001064 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	; 0x64
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e120      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	4b75      	ldr	r3, [pc, #468]	; (80023ac <HAL_RCC_OscConfig+0x4d0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x31a>
 80021e8:	4b6f      	ldr	r3, [pc, #444]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	4a6e      	ldr	r2, [pc, #440]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6713      	str	r3, [r2, #112]	; 0x70
 80021f4:	e02d      	b.n	8002252 <HAL_RCC_OscConfig+0x376>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x33c>
 80021fe:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a69      	ldr	r2, [pc, #420]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
 800220a:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a66      	ldr	r2, [pc, #408]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002210:	f023 0304 	bic.w	r3, r3, #4
 8002214:	6713      	str	r3, [r2, #112]	; 0x70
 8002216:	e01c      	b.n	8002252 <HAL_RCC_OscConfig+0x376>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x35e>
 8002220:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	4a60      	ldr	r2, [pc, #384]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6713      	str	r3, [r2, #112]	; 0x70
 800222c:	4b5e      	ldr	r3, [pc, #376]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	4a5d      	ldr	r2, [pc, #372]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6713      	str	r3, [r2, #112]	; 0x70
 8002238:	e00b      	b.n	8002252 <HAL_RCC_OscConfig+0x376>
 800223a:	4b5b      	ldr	r3, [pc, #364]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a5a      	ldr	r2, [pc, #360]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
 8002246:	4b58      	ldr	r3, [pc, #352]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a57      	ldr	r2, [pc, #348]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d015      	beq.n	8002286 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225a:	f7fe ff03 	bl	8001064 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe feff 	bl	8001064 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0ce      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	4b4b      	ldr	r3, [pc, #300]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ee      	beq.n	8002262 <HAL_RCC_OscConfig+0x386>
 8002284:	e014      	b.n	80022b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7fe feed 	bl	8001064 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7fe fee9 	bl	8001064 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e0b8      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a4:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1ee      	bne.n	800228e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a3b      	ldr	r2, [pc, #236]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 80022bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80a4 	beq.w	8002414 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022cc:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d06b      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d149      	bne.n	8002374 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a30      	ldr	r2, [pc, #192]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 80022e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe feba 	bl	8001064 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe feb6 	bl	8001064 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e087      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	019b      	lsls	r3, r3, #6
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	085b      	lsrs	r3, r3, #1
 800232a:	3b01      	subs	r3, #1
 800232c:	041b      	lsls	r3, r3, #16
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	061b      	lsls	r3, r3, #24
 8002336:	4313      	orrs	r3, r2
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800233a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800233e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fe8a 	bl	8001064 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fe86 	bl	8001064 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e057      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x478>
 8002372:	e04f      	b.n	8002414 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800237a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fe70 	bl	8001064 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fe6c 	bl	8001064 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e03d      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_RCC_OscConfig+0x4cc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x4ac>
 80023a6:	e035      	b.n	8002414 <HAL_RCC_OscConfig+0x538>
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <HAL_RCC_OscConfig+0x544>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d028      	beq.n	8002410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d121      	bne.n	8002410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d11a      	bne.n	8002410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023e0:	4013      	ands	r3, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d111      	bne.n	8002410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	3b01      	subs	r3, #1
 80023fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800

08002424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0d0      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d910      	bls.n	800246c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b67      	ldr	r3, [pc, #412]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 020f 	bic.w	r2, r3, #15
 8002452:	4965      	ldr	r1, [pc, #404]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0b8      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002484:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a58      	ldr	r2, [pc, #352]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 800248a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800248e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800249c:	4b53      	ldr	r3, [pc, #332]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a52      	ldr	r2, [pc, #328]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	4b50      	ldr	r3, [pc, #320]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	494d      	ldr	r1, [pc, #308]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d040      	beq.n	8002548 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d115      	bne.n	8002506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e07f      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e073      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06b      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002506:	4b39      	ldr	r3, [pc, #228]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f023 0203 	bic.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4936      	ldr	r1, [pc, #216]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002518:	f7fe fda4 	bl	8001064 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	e00a      	b.n	8002536 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7fe fda0 	bl	8001064 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e053      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 020c 	and.w	r2, r3, #12
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	429a      	cmp	r2, r3
 8002546:	d1eb      	bne.n	8002520 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d210      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 020f 	bic.w	r2, r3, #15
 800255e:	4922      	ldr	r1, [pc, #136]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e032      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4916      	ldr	r1, [pc, #88]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a2:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	490e      	ldr	r1, [pc, #56]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b6:	f000 f821 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80025ba:	4602      	mov	r2, r0
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	490a      	ldr	r1, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x1cc>)
 80025c8:	5ccb      	ldrb	r3, [r1, r3]
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1d0>)
 80025d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1d4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fd00 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023c00 	.word	0x40023c00
 80025ec:	40023800 	.word	0x40023800
 80025f0:	08004d78 	.word	0x08004d78
 80025f4:	20000000 	.word	0x20000000
 80025f8:	20000004 	.word	0x20000004

080025fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002600:	b090      	sub	sp, #64	; 0x40
 8002602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
 8002608:	2300      	movs	r3, #0
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260c:	2300      	movs	r3, #0
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_GetSysClockFreq+0x180>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d00d      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x40>
 8002620:	2b08      	cmp	r3, #8
 8002622:	f200 80a1 	bhi.w	8002768 <HAL_RCC_GetSysClockFreq+0x16c>
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x34>
 800262a:	2b04      	cmp	r3, #4
 800262c:	d003      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x3a>
 800262e:	e09b      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b53      	ldr	r3, [pc, #332]	; (8002780 <HAL_RCC_GetSysClockFreq+0x184>)
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002634:	e09b      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_GetSysClockFreq+0x188>)
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800263a:	e098      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800263c:	4b4f      	ldr	r3, [pc, #316]	; (800277c <HAL_RCC_GetSysClockFreq+0x180>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002646:	4b4d      	ldr	r3, [pc, #308]	; (800277c <HAL_RCC_GetSysClockFreq+0x180>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d028      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002652:	4b4a      	ldr	r3, [pc, #296]	; (800277c <HAL_RCC_GetSysClockFreq+0x180>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	099b      	lsrs	r3, r3, #6
 8002658:	2200      	movs	r2, #0
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	627a      	str	r2, [r7, #36]	; 0x24
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002664:	2100      	movs	r1, #0
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_GetSysClockFreq+0x188>)
 8002668:	fb03 f201 	mul.w	r2, r3, r1
 800266c:	2300      	movs	r3, #0
 800266e:	fb00 f303 	mul.w	r3, r0, r3
 8002672:	4413      	add	r3, r2
 8002674:	4a43      	ldr	r2, [pc, #268]	; (8002784 <HAL_RCC_GetSysClockFreq+0x188>)
 8002676:	fba0 1202 	umull	r1, r2, r0, r2
 800267a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800267c:	460a      	mov	r2, r1
 800267e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002682:	4413      	add	r3, r2
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002688:	2200      	movs	r2, #0
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	61fa      	str	r2, [r7, #28]
 800268e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002696:	f7fd fdb7 	bl	8000208 <__aeabi_uldivmod>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4613      	mov	r3, r2
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a2:	e053      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a4:	4b35      	ldr	r3, [pc, #212]	; (800277c <HAL_RCC_GetSysClockFreq+0x180>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	2200      	movs	r2, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	617a      	str	r2, [r7, #20]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026b6:	f04f 0b00 	mov.w	fp, #0
 80026ba:	4652      	mov	r2, sl
 80026bc:	465b      	mov	r3, fp
 80026be:	f04f 0000 	mov.w	r0, #0
 80026c2:	f04f 0100 	mov.w	r1, #0
 80026c6:	0159      	lsls	r1, r3, #5
 80026c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026cc:	0150      	lsls	r0, r2, #5
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	ebb2 080a 	subs.w	r8, r2, sl
 80026d6:	eb63 090b 	sbc.w	r9, r3, fp
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026ee:	ebb2 0408 	subs.w	r4, r2, r8
 80026f2:	eb63 0509 	sbc.w	r5, r3, r9
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	00eb      	lsls	r3, r5, #3
 8002700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002704:	00e2      	lsls	r2, r4, #3
 8002706:	4614      	mov	r4, r2
 8002708:	461d      	mov	r5, r3
 800270a:	eb14 030a 	adds.w	r3, r4, sl
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	eb45 030b 	adc.w	r3, r5, fp
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002722:	4629      	mov	r1, r5
 8002724:	028b      	lsls	r3, r1, #10
 8002726:	4621      	mov	r1, r4
 8002728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800272c:	4621      	mov	r1, r4
 800272e:	028a      	lsls	r2, r1, #10
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002736:	2200      	movs	r2, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	60fa      	str	r2, [r7, #12]
 800273c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002740:	f7fd fd62 	bl	8000208 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_GetSysClockFreq+0x180>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	3301      	adds	r3, #1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800275c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002766:	e002      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetSysClockFreq+0x184>)
 800276a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800276c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002770:	4618      	mov	r0, r3
 8002772:	3740      	adds	r7, #64	; 0x40
 8002774:	46bd      	mov	sp, r7
 8002776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	00f42400 	.word	0x00f42400
 8002784:	017d7840 	.word	0x017d7840

08002788 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_GetHCLKFreq+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000000 	.word	0x20000000

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a4:	f7ff fff0 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0a9b      	lsrs	r3, r3, #10
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08004d88 	.word	0x08004d88

080027c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027cc:	f7ff ffdc 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0b5b      	lsrs	r3, r3, #13
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08004d88 	.word	0x08004d88

080027f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d012      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002818:	4b69      	ldr	r3, [pc, #420]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a68      	ldr	r2, [pc, #416]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002822:	6093      	str	r3, [r2, #8]
 8002824:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	4964      	ldr	r1, [pc, #400]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800283a:	2301      	movs	r3, #1
 800283c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d017      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800284a:	4b5d      	ldr	r3, [pc, #372]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800284c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	4959      	ldr	r1, [pc, #356]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002868:	d101      	bne.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800286a:	2301      	movs	r3, #1
 800286c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002876:	2301      	movs	r3, #1
 8002878:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d017      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002886:	4b4e      	ldr	r3, [pc, #312]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800288c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	494a      	ldr	r1, [pc, #296]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a4:	d101      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80028c2:	2301      	movs	r3, #1
 80028c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 808b 	beq.w	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	4a39      	ldr	r2, [pc, #228]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	; 0x40
 80028e0:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028ec:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a34      	ldr	r2, [pc, #208]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f8:	f7fe fbb4 	bl	8001064 <HAL_GetTick>
 80028fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002900:	f7fe fbb0 	bl	8001064 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e357      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002912:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800291e:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002926:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d035      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d02e      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800293c:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002944:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002946:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800295c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d114      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fb78 	bl	8001064 <HAL_GetTick>
 8002974:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002976:	e00a      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe fb74 	bl	8001064 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e319      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ee      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029a6:	d111      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029b6:	400b      	ands	r3, r1
 80029b8:	4901      	ldr	r1, [pc, #4]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
 80029be:	e00b      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40007000 	.word	0x40007000
 80029c8:	0ffffcff 	.word	0x0ffffcff
 80029cc:	4baa      	ldr	r3, [pc, #680]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4aa9      	ldr	r2, [pc, #676]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80029d6:	6093      	str	r3, [r2, #8]
 80029d8:	4ba7      	ldr	r3, [pc, #668]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	49a4      	ldr	r1, [pc, #656]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d010      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029f6:	4ba0      	ldr	r3, [pc, #640]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fc:	4a9e      	ldr	r2, [pc, #632]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a06:	4b9c      	ldr	r3, [pc, #624]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a10:	4999      	ldr	r1, [pc, #612]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a24:	4b94      	ldr	r3, [pc, #592]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a32:	4991      	ldr	r1, [pc, #580]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a46:	4b8c      	ldr	r3, [pc, #560]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a54:	4988      	ldr	r1, [pc, #544]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a68:	4b83      	ldr	r3, [pc, #524]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a76:	4980      	ldr	r1, [pc, #512]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a8a:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	4977      	ldr	r1, [pc, #476]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aac:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	496f      	ldr	r1, [pc, #444]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ace:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f023 020c 	bic.w	r2, r3, #12
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002adc:	4966      	ldr	r1, [pc, #408]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002af0:	4b61      	ldr	r3, [pc, #388]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	495e      	ldr	r1, [pc, #376]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b12:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b20:	4955      	ldr	r1, [pc, #340]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	494d      	ldr	r1, [pc, #308]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b56:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	4944      	ldr	r1, [pc, #272]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b78:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	493c      	ldr	r1, [pc, #240]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba8:	4933      	ldr	r1, [pc, #204]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bca:	492b      	ldr	r1, [pc, #172]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d011      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bec:	4922      	ldr	r1, [pc, #136]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c1e:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2c:	4912      	ldr	r1, [pc, #72]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c50:	4909      	ldr	r1, [pc, #36]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d006      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80d9 	beq.w	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c6c:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a01      	ldr	r2, [pc, #4]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c76:	e001      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c7e:	f7fe f9f1 	bl	8001064 <HAL_GetTick>
 8002c82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c84:	e008      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c86:	f7fe f9ed 	bl	8001064 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b64      	cmp	r3, #100	; 0x64
 8002c92:	d901      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e194      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c98:	4b6c      	ldr	r3, [pc, #432]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f0      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d021      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d11d      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cb8:	4b64      	ldr	r3, [pc, #400]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cbe:	0c1b      	lsrs	r3, r3, #16
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cc6:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ccc:	0e1b      	lsrs	r3, r3, #24
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	019a      	lsls	r2, r3, #6
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	071b      	lsls	r3, r3, #28
 8002cec:	4957      	ldr	r1, [pc, #348]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d004      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02e      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1e:	d129      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d20:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d34:	0f1b      	lsrs	r3, r3, #28
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	019a      	lsls	r2, r3, #6
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	041b      	lsls	r3, r3, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	071b      	lsls	r3, r3, #28
 8002d54:	493d      	ldr	r1, [pc, #244]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d62:	f023 021f 	bic.w	r2, r3, #31
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	4937      	ldr	r1, [pc, #220]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01d      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d80:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d86:	0e1b      	lsrs	r3, r3, #24
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d94:	0f1b      	lsrs	r3, r3, #28
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	019a      	lsls	r2, r3, #6
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	431a      	orrs	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	431a      	orrs	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	071b      	lsls	r3, r3, #28
 8002db4:	4925      	ldr	r1, [pc, #148]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d011      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	019a      	lsls	r2, r3, #6
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	061b      	lsls	r3, r3, #24
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	071b      	lsls	r3, r3, #28
 8002de4:	4919      	ldr	r1, [pc, #100]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a16      	ldr	r2, [pc, #88]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fe f934 	bl	8001064 <HAL_GetTick>
 8002dfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e00:	f7fe f930 	bl	8001064 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e0d7      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	f040 80cd 	bne.w	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e32:	f7fe f917 	bl	8001064 <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e3a:	f7fe f913 	bl	8001064 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b64      	cmp	r3, #100	; 0x64
 8002e46:	d903      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0ba      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002e4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e50:	4b5e      	ldr	r3, [pc, #376]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e5c:	d0ed      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d02e      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d12a      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e86:	4b51      	ldr	r3, [pc, #324]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e94:	4b4d      	ldr	r3, [pc, #308]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	0f1b      	lsrs	r3, r3, #28
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	019a      	lsls	r2, r3, #6
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	061b      	lsls	r3, r3, #24
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	071b      	lsls	r3, r3, #28
 8002eba:	4944      	ldr	r1, [pc, #272]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ec2:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	493d      	ldr	r1, [pc, #244]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d022      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ef0:	d11d      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ef2:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	0e1b      	lsrs	r3, r3, #24
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f00:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	0f1b      	lsrs	r3, r3, #28
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	019a      	lsls	r2, r3, #6
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	061b      	lsls	r3, r3, #24
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	071b      	lsls	r3, r3, #28
 8002f26:	4929      	ldr	r1, [pc, #164]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d028      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	0e1b      	lsrs	r3, r3, #24
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f48:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	019a      	lsls	r2, r3, #6
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	431a      	orrs	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	071b      	lsls	r3, r3, #28
 8002f6e:	4917      	ldr	r1, [pc, #92]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	4911      	ldr	r1, [pc, #68]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f8c:	4b0f      	ldr	r3, [pc, #60]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f98:	f7fe f864 	bl	8001064 <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fa0:	f7fe f860 	bl	8001064 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e007      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fbe:	d1ef      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800

08002fd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e081      	b.n	80030e6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7f5b      	ldrb	r3, [r3, #29]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fd fdd4 	bl	8000ba0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	22ca      	movs	r2, #202	; 0xca
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2253      	movs	r2, #83	; 0x53
 800300c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f9fe 	bl	8003410 <RTC_EnterInitMode>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	22ff      	movs	r2, #255	; 0xff
 8003020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2204      	movs	r2, #4
 8003026:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e05c      	b.n	80030e6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <HAL_RTC_Init+0x120>)
 8003038:	400b      	ands	r3, r1
 800303a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68d2      	ldr	r2, [r2, #12]
 8003062:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6919      	ldr	r1, [r3, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	041a      	lsls	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003086:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10e      	bne.n	80030b4 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f992 	bl	80033c0 <HAL_RTC_WaitForSynchro>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	22ff      	movs	r2, #255	; 0xff
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2204      	movs	r2, #4
 80030ae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e018      	b.n	80030e6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0208 	bic.w	r2, r2, #8
 80030c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	22ff      	movs	r2, #255	; 0xff
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	ff8fffbf 	.word	0xff8fffbf

080030f4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	7f1b      	ldrb	r3, [r3, #28]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_RTC_SetTime+0x1c>
 800310c:	2302      	movs	r3, #2
 800310e:	e0a8      	b.n	8003262 <HAL_RTC_SetTime+0x16e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2202      	movs	r2, #2
 800311a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d126      	bne.n	8003170 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2200      	movs	r2, #0
 8003134:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f994 	bl	8003468 <RTC_ByteToBcd2>
 8003140:	4603      	mov	r3, r0
 8003142:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 f98d 	bl	8003468 <RTC_ByteToBcd2>
 800314e:	4603      	mov	r3, r0
 8003150:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003152:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	789b      	ldrb	r3, [r3, #2]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f985 	bl	8003468 <RTC_ByteToBcd2>
 800315e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003160:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	7b1b      	ldrb	r3, [r3, #12]
 8003168:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	e018      	b.n	80031a2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d102      	bne.n	8003184 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2200      	movs	r2, #0
 8003182:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	785b      	ldrb	r3, [r3, #1]
 800318e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003190:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003196:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	7b1b      	ldrb	r3, [r3, #12]
 800319c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	22ca      	movs	r2, #202	; 0xca
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2253      	movs	r2, #83	; 0x53
 80031b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f92c 	bl	8003410 <RTC_EnterInitMode>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	22ff      	movs	r2, #255	; 0xff
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2204      	movs	r2, #4
 80031ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e045      	b.n	8003262 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	6979      	ldr	r1, [r7, #20]
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <HAL_RTC_SetTime+0x178>)
 80031de:	400b      	ands	r3, r1
 80031e0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031f0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003218:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d111      	bne.n	800324c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f8c9 	bl	80033c0 <HAL_RTC_WaitForSynchro>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	22ff      	movs	r2, #255	; 0xff
 800323a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2204      	movs	r2, #4
 8003240:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e00a      	b.n	8003262 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	22ff      	movs	r2, #255	; 0xff
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8003260:	2300      	movs	r3, #0
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	bd90      	pop	{r4, r7, pc}
 800326a:	bf00      	nop
 800326c:	007f7f7f 	.word	0x007f7f7f

08003270 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	7f1b      	ldrb	r3, [r3, #28]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_RTC_SetDate+0x1c>
 8003288:	2302      	movs	r3, #2
 800328a:	e092      	b.n	80033b2 <HAL_RTC_SetDate+0x142>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2202      	movs	r2, #2
 8003296:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10e      	bne.n	80032bc <HAL_RTC_SetDate+0x4c>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	785b      	ldrb	r3, [r3, #1]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	f023 0310 	bic.w	r3, r3, #16
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	330a      	adds	r3, #10
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11c      	bne.n	80032fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	78db      	ldrb	r3, [r3, #3]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f8ce 	bl	8003468 <RTC_ByteToBcd2>
 80032cc:	4603      	mov	r3, r0
 80032ce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 f8c7 	bl	8003468 <RTC_ByteToBcd2>
 80032da:	4603      	mov	r3, r0
 80032dc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80032de:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	789b      	ldrb	r3, [r3, #2]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f8bf 	bl	8003468 <RTC_ByteToBcd2>
 80032ea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80032ec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e00e      	b.n	800331a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	78db      	ldrb	r3, [r3, #3]
 8003300:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003308:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800330e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	22ca      	movs	r2, #202	; 0xca
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2253      	movs	r2, #83	; 0x53
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f870 	bl	8003410 <RTC_EnterInitMode>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	22ff      	movs	r2, #255	; 0xff
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2204      	movs	r2, #4
 8003342:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e031      	b.n	80033b2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	6979      	ldr	r1, [r7, #20]
 8003354:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RTC_SetDate+0x14c>)
 8003356:	400b      	ands	r3, r1
 8003358:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003368:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d111      	bne.n	800339c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f821 	bl	80033c0 <HAL_RTC_WaitForSynchro>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	22ff      	movs	r2, #255	; 0xff
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2204      	movs	r2, #4
 8003390:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e00a      	b.n	80033b2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	22ff      	movs	r2, #255	; 0xff
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80033b0:	2300      	movs	r3, #0
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	bf00      	nop
 80033bc:	00ffff3f 	.word	0x00ffff3f

080033c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fd fe42 	bl	8001064 <HAL_GetTick>
 80033e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80033e2:	e009      	b.n	80033f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033e4:	f7fd fe3e 	bl	8001064 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033f2:	d901      	bls.n	80033f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e007      	b.n	8003408 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ee      	beq.n	80033e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d119      	bne.n	800345e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003432:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003434:	f7fd fe16 	bl	8001064 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800343a:	e009      	b.n	8003450 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800343c:	f7fd fe12 	bl	8001064 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800344a:	d901      	bls.n	8003450 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e007      	b.n	8003460 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ee      	beq.n	800343c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8003476:	e005      	b.n	8003484 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3301      	adds	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	3b0a      	subs	r3, #10
 8003482:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	2b09      	cmp	r3, #9
 8003488:	d8f6      	bhi.n	8003478 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	b2da      	uxtb	r2, r3
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	4313      	orrs	r3, r2
 8003496:	b2db      	uxtb	r3, r3
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e049      	b.n	800354a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fc62 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 fa00 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e054      	b.n	8003616 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a26      	ldr	r2, [pc, #152]	; (8003624 <HAL_TIM_Base_Start_IT+0xd0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d022      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003596:	d01d      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a22      	ldr	r2, [pc, #136]	; (8003628 <HAL_TIM_Base_Start_IT+0xd4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d018      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a21      	ldr	r2, [pc, #132]	; (800362c <HAL_TIM_Base_Start_IT+0xd8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <HAL_TIM_Base_Start_IT+0xdc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <HAL_TIM_Base_Start_IT+0xe0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <HAL_TIM_Base_Start_IT+0xe4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_TIM_Base_Start_IT+0x80>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1b      	ldr	r2, [pc, #108]	; (800363c <HAL_TIM_Base_Start_IT+0xe8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d115      	bne.n	8003600 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_TIM_Base_Start_IT+0xec>)
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d015      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0xbe>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d011      	beq.n	8003612 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e008      	b.n	8003612 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e000      	b.n	8003614 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40010000 	.word	0x40010000
 8003628:	40000400 	.word	0x40000400
 800362c:	40000800 	.word	0x40000800
 8003630:	40000c00 	.word	0x40000c00
 8003634:	40010400 	.word	0x40010400
 8003638:	40014000 	.word	0x40014000
 800363c:	40001800 	.word	0x40001800
 8003640:	00010007 	.word	0x00010007

08003644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b02      	cmp	r3, #2
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0202 	mvn.w	r2, #2
 8003670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f90f 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f901 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f912 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0204 	mvn.w	r2, #4
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8e5 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8d7 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8e8 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b08      	cmp	r3, #8
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0208 	mvn.w	r2, #8
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2204      	movs	r2, #4
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8bb 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8ad 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f8be 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b10      	cmp	r3, #16
 8003754:	d122      	bne.n	800379c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b10      	cmp	r3, #16
 8003762:	d11b      	bne.n	800379c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0210 	mvn.w	r2, #16
 800376c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2208      	movs	r2, #8
 8003772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f891 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f883 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f894 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0201 	mvn.w	r2, #1
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f85d 	bl	8003882 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d10e      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e0:	2b80      	cmp	r3, #128	; 0x80
 80037e2:	d107      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9b2 	bl	8003b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003802:	d10e      	bne.n	8003822 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b80      	cmp	r3, #128	; 0x80
 8003810:	d107      	bne.n	8003822 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800381a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f9a5 	bl	8003b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d10e      	bne.n	800384e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d107      	bne.n	800384e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f842 	bl	80038d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b20      	cmp	r3, #32
 800385a:	d10e      	bne.n	800387a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b20      	cmp	r3, #32
 8003868:	d107      	bne.n	800387a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f06f 0220 	mvn.w	r2, #32
 8003872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f965 	bl	8003b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d00f      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3d      	ldr	r2, [pc, #244]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3c      	ldr	r2, [pc, #240]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <TIM_Base_SetConfig+0x114>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d027      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d023      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d017      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <TIM_Base_SetConfig+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <TIM_Base_SetConfig+0x12c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <TIM_Base_SetConfig+0x130>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <TIM_Base_SetConfig+0x134>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <TIM_Base_SetConfig+0x138>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <TIM_Base_SetConfig+0x13c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0xf8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d103      	bne.n	80039e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	40001800 	.word	0x40001800
 8003a20:	40001c00 	.word	0x40001c00
 8003a24:	40002000 	.word	0x40002000

08003a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e06d      	b.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a30      	ldr	r2, [pc, #192]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2f      	ldr	r2, [pc, #188]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d022      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d01d      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d018      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1a      	ldr	r2, [pc, #104]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00e      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10c      	bne.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40001800 	.word	0x40001800

08003b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e040      	b.n	8003c14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd f94c 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0201 	bic.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fba8 	bl	8004314 <UART_SetConfig>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e022      	b.n	8003c14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fe00 	bl	80047dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fe87 	bl	8004920 <UART_CheckIdleState>
 8003c12:	4603      	mov	r3, r0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b090      	sub	sp, #64	; 0x40
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d139      	bne.n	8003cb2 <HAL_UART_DMAStop+0x96>
 8003c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c40:	2b21      	cmp	r3, #33	; 0x21
 8003c42:	d136      	bne.n	8003cb2 <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c66:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fd fbd9 	bl	800143c <HAL_DMA_Abort>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fd fded 	bl	8001874 <HAL_DMA_GetError>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d105      	bne.n	8003cac <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e044      	b.n	8003d36 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 ff2e 	bl	8004b0e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d139      	bne.n	8003d34 <HAL_UART_DMAStop+0x118>
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	2b22      	cmp	r3, #34	; 0x22
 8003cc4:	d136      	bne.n	8003d34 <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce6:	61ba      	str	r2, [r7, #24]
 8003ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6979      	ldr	r1, [r7, #20]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d015      	beq.n	8003d2e <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd fb98 	bl	800143c <HAL_DMA_Abort>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd fdac 	bl	8001874 <HAL_DMA_GetError>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d105      	bne.n	8003d2e <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2210      	movs	r2, #16
 8003d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e003      	b.n	8003d36 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 ff13 	bl	8004b5a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3740      	adds	r7, #64	; 0x40
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b0ba      	sub	sp, #232	; 0xe8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d6a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d6e:	4013      	ands	r3, r2
 8003d70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d115      	bne.n	8003da8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00f      	beq.n	8003da8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 828f 	beq.w	80042bc <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
      }
      return;
 8003da6:	e289      	b.n	80042bc <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8117 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003dbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003dc2:	4b85      	ldr	r3, [pc, #532]	; (8003fd8 <HAL_UART_IRQHandler+0x298>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 810a 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d011      	beq.n	8003dfc <HAL_UART_IRQHandler+0xbc>
 8003dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2201      	movs	r2, #1
 8003dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d011      	beq.n	8003e2c <HAL_UART_IRQHandler+0xec>
 8003e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00b      	beq.n	8003e2c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e22:	f043 0204 	orr.w	r2, r3, #4
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d011      	beq.n	8003e5c <HAL_UART_IRQHandler+0x11c>
 8003e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d017      	beq.n	8003e98 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e78:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2208      	movs	r2, #8
 8003e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e8e:	f043 0208 	orr.w	r2, r3, #8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <HAL_UART_IRQHandler+0x18a>
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00c      	beq.n	8003eca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 81f5 	beq.w	80042c0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d04f      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fe19 	bl	8004b5a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d141      	bne.n	8003fba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1d9      	bne.n	8003f36 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d013      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <HAL_UART_IRQHandler+0x29c>)
 8003f90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fac0 	bl	800151c <HAL_DMA_Abort_IT>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d017      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003fac:	4610      	mov	r0, r2
 8003fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e00f      	b.n	8003fd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f998 	bl	80042e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb8:	e00b      	b.n	8003fd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f994 	bl	80042e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	e007      	b.n	8003fd2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f990 	bl	80042e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003fd0:	e176      	b.n	80042c0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd2:	bf00      	nop
    return;
 8003fd4:	e174      	b.n	80042c0 <HAL_UART_IRQHandler+0x580>
 8003fd6:	bf00      	nop
 8003fd8:	04000120 	.word	0x04000120
 8003fdc:	08004c21 	.word	0x08004c21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f040 8144 	bne.w	8004272 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 813d 	beq.w	8004272 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8136 	beq.w	8004272 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2210      	movs	r2, #16
 800400c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	f040 80b2 	bne.w	8004182 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800402a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8148 	beq.w	80042c4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800403a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800403e:	429a      	cmp	r2, r3
 8004040:	f080 8140 	bcs.w	80042c4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800404a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004058:	f000 8085 	beq.w	8004166 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004086:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800408a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004092:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800409e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1da      	bne.n	800405c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3308      	adds	r3, #8
 80040ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3308      	adds	r3, #8
 80040c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1e1      	bne.n	80040a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004106:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004108:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800410c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e3      	bne.n	80040e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004136:	f023 0310 	bic.w	r3, r3, #16
 800413a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004148:	65bb      	str	r3, [r7, #88]	; 0x58
 800414a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800414e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e4      	bne.n	8004126 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd f96b 	bl	800143c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004172:	b29b      	uxth	r3, r3
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	b29b      	uxth	r3, r3
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8be 	bl	80042fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004180:	e0a0      	b.n	80042c4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800418e:	b29b      	uxth	r3, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 8092 	beq.w	80042c8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80041a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 808d 	beq.w	80042c8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
 80041d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e4      	bne.n	80041ae <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3308      	adds	r3, #8
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	623b      	str	r3, [r7, #32]
   return(result);
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3308      	adds	r3, #8
 8004204:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004208:	633a      	str	r2, [r7, #48]	; 0x30
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800420e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e3      	bne.n	80041e4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	60fb      	str	r3, [r7, #12]
   return(result);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0310 	bic.w	r3, r3, #16
 8004242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	617b      	str	r3, [r7, #20]
   return(result);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e4      	bne.n	800422e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004268:	4619      	mov	r1, r3
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f846 	bl	80042fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004270:	e02a      	b.n	80042c8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00e      	beq.n	800429c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800427e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01c      	beq.n	80042cc <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
    }
    return;
 800429a:	e017      	b.n	80042cc <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d012      	beq.n	80042ce <HAL_UART_IRQHandler+0x58e>
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00c      	beq.n	80042ce <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fcc9 	bl	8004c4c <UART_EndTransmit_IT>
    return;
 80042ba:	e008      	b.n	80042ce <HAL_UART_IRQHandler+0x58e>
      return;
 80042bc:	bf00      	nop
 80042be:	e006      	b.n	80042ce <HAL_UART_IRQHandler+0x58e>
    return;
 80042c0:	bf00      	nop
 80042c2:	e004      	b.n	80042ce <HAL_UART_IRQHandler+0x58e>
      return;
 80042c4:	bf00      	nop
 80042c6:	e002      	b.n	80042ce <HAL_UART_IRQHandler+0x58e>
      return;
 80042c8:	bf00      	nop
 80042ca:	e000      	b.n	80042ce <HAL_UART_IRQHandler+0x58e>
    return;
 80042cc:	bf00      	nop
  }

}
 80042ce:	37e8      	adds	r7, #232	; 0xe8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	4ba6      	ldr	r3, [pc, #664]	; (80045d8 <UART_SetConfig+0x2c4>)
 8004340:	4013      	ands	r3, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	6979      	ldr	r1, [r7, #20]
 8004348:	430b      	orrs	r3, r1
 800434a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a94      	ldr	r2, [pc, #592]	; (80045dc <UART_SetConfig+0x2c8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d120      	bne.n	80043d2 <UART_SetConfig+0xbe>
 8004390:	4b93      	ldr	r3, [pc, #588]	; (80045e0 <UART_SetConfig+0x2cc>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b03      	cmp	r3, #3
 800439c:	d816      	bhi.n	80043cc <UART_SetConfig+0xb8>
 800439e:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <UART_SetConfig+0x90>)
 80043a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a4:	080043b5 	.word	0x080043b5
 80043a8:	080043c1 	.word	0x080043c1
 80043ac:	080043bb 	.word	0x080043bb
 80043b0:	080043c7 	.word	0x080043c7
 80043b4:	2301      	movs	r3, #1
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e150      	b.n	800465c <UART_SetConfig+0x348>
 80043ba:	2302      	movs	r3, #2
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e14d      	b.n	800465c <UART_SetConfig+0x348>
 80043c0:	2304      	movs	r3, #4
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e14a      	b.n	800465c <UART_SetConfig+0x348>
 80043c6:	2308      	movs	r3, #8
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e147      	b.n	800465c <UART_SetConfig+0x348>
 80043cc:	2310      	movs	r3, #16
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e144      	b.n	800465c <UART_SetConfig+0x348>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a83      	ldr	r2, [pc, #524]	; (80045e4 <UART_SetConfig+0x2d0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d132      	bne.n	8004442 <UART_SetConfig+0x12e>
 80043dc:	4b80      	ldr	r3, [pc, #512]	; (80045e0 <UART_SetConfig+0x2cc>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d828      	bhi.n	800443c <UART_SetConfig+0x128>
 80043ea:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <UART_SetConfig+0xdc>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004425 	.word	0x08004425
 80043f4:	0800443d 	.word	0x0800443d
 80043f8:	0800443d 	.word	0x0800443d
 80043fc:	0800443d 	.word	0x0800443d
 8004400:	08004431 	.word	0x08004431
 8004404:	0800443d 	.word	0x0800443d
 8004408:	0800443d 	.word	0x0800443d
 800440c:	0800443d 	.word	0x0800443d
 8004410:	0800442b 	.word	0x0800442b
 8004414:	0800443d 	.word	0x0800443d
 8004418:	0800443d 	.word	0x0800443d
 800441c:	0800443d 	.word	0x0800443d
 8004420:	08004437 	.word	0x08004437
 8004424:	2300      	movs	r3, #0
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e118      	b.n	800465c <UART_SetConfig+0x348>
 800442a:	2302      	movs	r3, #2
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e115      	b.n	800465c <UART_SetConfig+0x348>
 8004430:	2304      	movs	r3, #4
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e112      	b.n	800465c <UART_SetConfig+0x348>
 8004436:	2308      	movs	r3, #8
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e10f      	b.n	800465c <UART_SetConfig+0x348>
 800443c:	2310      	movs	r3, #16
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e10c      	b.n	800465c <UART_SetConfig+0x348>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a68      	ldr	r2, [pc, #416]	; (80045e8 <UART_SetConfig+0x2d4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d120      	bne.n	800448e <UART_SetConfig+0x17a>
 800444c:	4b64      	ldr	r3, [pc, #400]	; (80045e0 <UART_SetConfig+0x2cc>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004456:	2b30      	cmp	r3, #48	; 0x30
 8004458:	d013      	beq.n	8004482 <UART_SetConfig+0x16e>
 800445a:	2b30      	cmp	r3, #48	; 0x30
 800445c:	d814      	bhi.n	8004488 <UART_SetConfig+0x174>
 800445e:	2b20      	cmp	r3, #32
 8004460:	d009      	beq.n	8004476 <UART_SetConfig+0x162>
 8004462:	2b20      	cmp	r3, #32
 8004464:	d810      	bhi.n	8004488 <UART_SetConfig+0x174>
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <UART_SetConfig+0x15c>
 800446a:	2b10      	cmp	r3, #16
 800446c:	d006      	beq.n	800447c <UART_SetConfig+0x168>
 800446e:	e00b      	b.n	8004488 <UART_SetConfig+0x174>
 8004470:	2300      	movs	r3, #0
 8004472:	77fb      	strb	r3, [r7, #31]
 8004474:	e0f2      	b.n	800465c <UART_SetConfig+0x348>
 8004476:	2302      	movs	r3, #2
 8004478:	77fb      	strb	r3, [r7, #31]
 800447a:	e0ef      	b.n	800465c <UART_SetConfig+0x348>
 800447c:	2304      	movs	r3, #4
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e0ec      	b.n	800465c <UART_SetConfig+0x348>
 8004482:	2308      	movs	r3, #8
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e0e9      	b.n	800465c <UART_SetConfig+0x348>
 8004488:	2310      	movs	r3, #16
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e0e6      	b.n	800465c <UART_SetConfig+0x348>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a56      	ldr	r2, [pc, #344]	; (80045ec <UART_SetConfig+0x2d8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d120      	bne.n	80044da <UART_SetConfig+0x1c6>
 8004498:	4b51      	ldr	r3, [pc, #324]	; (80045e0 <UART_SetConfig+0x2cc>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044a2:	2bc0      	cmp	r3, #192	; 0xc0
 80044a4:	d013      	beq.n	80044ce <UART_SetConfig+0x1ba>
 80044a6:	2bc0      	cmp	r3, #192	; 0xc0
 80044a8:	d814      	bhi.n	80044d4 <UART_SetConfig+0x1c0>
 80044aa:	2b80      	cmp	r3, #128	; 0x80
 80044ac:	d009      	beq.n	80044c2 <UART_SetConfig+0x1ae>
 80044ae:	2b80      	cmp	r3, #128	; 0x80
 80044b0:	d810      	bhi.n	80044d4 <UART_SetConfig+0x1c0>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <UART_SetConfig+0x1a8>
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d006      	beq.n	80044c8 <UART_SetConfig+0x1b4>
 80044ba:	e00b      	b.n	80044d4 <UART_SetConfig+0x1c0>
 80044bc:	2300      	movs	r3, #0
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e0cc      	b.n	800465c <UART_SetConfig+0x348>
 80044c2:	2302      	movs	r3, #2
 80044c4:	77fb      	strb	r3, [r7, #31]
 80044c6:	e0c9      	b.n	800465c <UART_SetConfig+0x348>
 80044c8:	2304      	movs	r3, #4
 80044ca:	77fb      	strb	r3, [r7, #31]
 80044cc:	e0c6      	b.n	800465c <UART_SetConfig+0x348>
 80044ce:	2308      	movs	r3, #8
 80044d0:	77fb      	strb	r3, [r7, #31]
 80044d2:	e0c3      	b.n	800465c <UART_SetConfig+0x348>
 80044d4:	2310      	movs	r3, #16
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e0c0      	b.n	800465c <UART_SetConfig+0x348>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a44      	ldr	r2, [pc, #272]	; (80045f0 <UART_SetConfig+0x2dc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d125      	bne.n	8004530 <UART_SetConfig+0x21c>
 80044e4:	4b3e      	ldr	r3, [pc, #248]	; (80045e0 <UART_SetConfig+0x2cc>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f2:	d017      	beq.n	8004524 <UART_SetConfig+0x210>
 80044f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f8:	d817      	bhi.n	800452a <UART_SetConfig+0x216>
 80044fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fe:	d00b      	beq.n	8004518 <UART_SetConfig+0x204>
 8004500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004504:	d811      	bhi.n	800452a <UART_SetConfig+0x216>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <UART_SetConfig+0x1fe>
 800450a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450e:	d006      	beq.n	800451e <UART_SetConfig+0x20a>
 8004510:	e00b      	b.n	800452a <UART_SetConfig+0x216>
 8004512:	2300      	movs	r3, #0
 8004514:	77fb      	strb	r3, [r7, #31]
 8004516:	e0a1      	b.n	800465c <UART_SetConfig+0x348>
 8004518:	2302      	movs	r3, #2
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e09e      	b.n	800465c <UART_SetConfig+0x348>
 800451e:	2304      	movs	r3, #4
 8004520:	77fb      	strb	r3, [r7, #31]
 8004522:	e09b      	b.n	800465c <UART_SetConfig+0x348>
 8004524:	2308      	movs	r3, #8
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e098      	b.n	800465c <UART_SetConfig+0x348>
 800452a:	2310      	movs	r3, #16
 800452c:	77fb      	strb	r3, [r7, #31]
 800452e:	e095      	b.n	800465c <UART_SetConfig+0x348>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a2f      	ldr	r2, [pc, #188]	; (80045f4 <UART_SetConfig+0x2e0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d125      	bne.n	8004586 <UART_SetConfig+0x272>
 800453a:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <UART_SetConfig+0x2cc>)
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004548:	d017      	beq.n	800457a <UART_SetConfig+0x266>
 800454a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800454e:	d817      	bhi.n	8004580 <UART_SetConfig+0x26c>
 8004550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004554:	d00b      	beq.n	800456e <UART_SetConfig+0x25a>
 8004556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455a:	d811      	bhi.n	8004580 <UART_SetConfig+0x26c>
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <UART_SetConfig+0x254>
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004564:	d006      	beq.n	8004574 <UART_SetConfig+0x260>
 8004566:	e00b      	b.n	8004580 <UART_SetConfig+0x26c>
 8004568:	2301      	movs	r3, #1
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e076      	b.n	800465c <UART_SetConfig+0x348>
 800456e:	2302      	movs	r3, #2
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e073      	b.n	800465c <UART_SetConfig+0x348>
 8004574:	2304      	movs	r3, #4
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e070      	b.n	800465c <UART_SetConfig+0x348>
 800457a:	2308      	movs	r3, #8
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e06d      	b.n	800465c <UART_SetConfig+0x348>
 8004580:	2310      	movs	r3, #16
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e06a      	b.n	800465c <UART_SetConfig+0x348>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <UART_SetConfig+0x2e4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d138      	bne.n	8004602 <UART_SetConfig+0x2ee>
 8004590:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <UART_SetConfig+0x2cc>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800459a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800459e:	d017      	beq.n	80045d0 <UART_SetConfig+0x2bc>
 80045a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045a4:	d82a      	bhi.n	80045fc <UART_SetConfig+0x2e8>
 80045a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045aa:	d00b      	beq.n	80045c4 <UART_SetConfig+0x2b0>
 80045ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b0:	d824      	bhi.n	80045fc <UART_SetConfig+0x2e8>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <UART_SetConfig+0x2aa>
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	d006      	beq.n	80045ca <UART_SetConfig+0x2b6>
 80045bc:	e01e      	b.n	80045fc <UART_SetConfig+0x2e8>
 80045be:	2300      	movs	r3, #0
 80045c0:	77fb      	strb	r3, [r7, #31]
 80045c2:	e04b      	b.n	800465c <UART_SetConfig+0x348>
 80045c4:	2302      	movs	r3, #2
 80045c6:	77fb      	strb	r3, [r7, #31]
 80045c8:	e048      	b.n	800465c <UART_SetConfig+0x348>
 80045ca:	2304      	movs	r3, #4
 80045cc:	77fb      	strb	r3, [r7, #31]
 80045ce:	e045      	b.n	800465c <UART_SetConfig+0x348>
 80045d0:	2308      	movs	r3, #8
 80045d2:	77fb      	strb	r3, [r7, #31]
 80045d4:	e042      	b.n	800465c <UART_SetConfig+0x348>
 80045d6:	bf00      	nop
 80045d8:	efff69f3 	.word	0xefff69f3
 80045dc:	40011000 	.word	0x40011000
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40004400 	.word	0x40004400
 80045e8:	40004800 	.word	0x40004800
 80045ec:	40004c00 	.word	0x40004c00
 80045f0:	40005000 	.word	0x40005000
 80045f4:	40011400 	.word	0x40011400
 80045f8:	40007800 	.word	0x40007800
 80045fc:	2310      	movs	r3, #16
 80045fe:	77fb      	strb	r3, [r7, #31]
 8004600:	e02c      	b.n	800465c <UART_SetConfig+0x348>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a72      	ldr	r2, [pc, #456]	; (80047d0 <UART_SetConfig+0x4bc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d125      	bne.n	8004658 <UART_SetConfig+0x344>
 800460c:	4b71      	ldr	r3, [pc, #452]	; (80047d4 <UART_SetConfig+0x4c0>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004616:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800461a:	d017      	beq.n	800464c <UART_SetConfig+0x338>
 800461c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004620:	d817      	bhi.n	8004652 <UART_SetConfig+0x33e>
 8004622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004626:	d00b      	beq.n	8004640 <UART_SetConfig+0x32c>
 8004628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462c:	d811      	bhi.n	8004652 <UART_SetConfig+0x33e>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <UART_SetConfig+0x326>
 8004632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004636:	d006      	beq.n	8004646 <UART_SetConfig+0x332>
 8004638:	e00b      	b.n	8004652 <UART_SetConfig+0x33e>
 800463a:	2300      	movs	r3, #0
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e00d      	b.n	800465c <UART_SetConfig+0x348>
 8004640:	2302      	movs	r3, #2
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e00a      	b.n	800465c <UART_SetConfig+0x348>
 8004646:	2304      	movs	r3, #4
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e007      	b.n	800465c <UART_SetConfig+0x348>
 800464c:	2308      	movs	r3, #8
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e004      	b.n	800465c <UART_SetConfig+0x348>
 8004652:	2310      	movs	r3, #16
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e001      	b.n	800465c <UART_SetConfig+0x348>
 8004658:	2310      	movs	r3, #16
 800465a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004664:	d15b      	bne.n	800471e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004666:	7ffb      	ldrb	r3, [r7, #31]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d828      	bhi.n	80046be <UART_SetConfig+0x3aa>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0x360>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004699 	.word	0x08004699
 8004678:	080046a1 	.word	0x080046a1
 800467c:	080046a9 	.word	0x080046a9
 8004680:	080046bf 	.word	0x080046bf
 8004684:	080046af 	.word	0x080046af
 8004688:	080046bf 	.word	0x080046bf
 800468c:	080046bf 	.word	0x080046bf
 8004690:	080046bf 	.word	0x080046bf
 8004694:	080046b7 	.word	0x080046b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004698:	f7fe f882 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 800469c:	61b8      	str	r0, [r7, #24]
        break;
 800469e:	e013      	b.n	80046c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a0:	f7fe f892 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 80046a4:	61b8      	str	r0, [r7, #24]
        break;
 80046a6:	e00f      	b.n	80046c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a8:	4b4b      	ldr	r3, [pc, #300]	; (80047d8 <UART_SetConfig+0x4c4>)
 80046aa:	61bb      	str	r3, [r7, #24]
        break;
 80046ac:	e00c      	b.n	80046c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ae:	f7fd ffa5 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80046b2:	61b8      	str	r0, [r7, #24]
        break;
 80046b4:	e008      	b.n	80046c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ba:	61bb      	str	r3, [r7, #24]
        break;
 80046bc:	e004      	b.n	80046c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	77bb      	strb	r3, [r7, #30]
        break;
 80046c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d074      	beq.n	80047b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	005a      	lsls	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	441a      	add	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b0f      	cmp	r3, #15
 80046e8:	d916      	bls.n	8004718 <UART_SetConfig+0x404>
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f0:	d212      	bcs.n	8004718 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f023 030f 	bic.w	r3, r3, #15
 80046fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	b29b      	uxth	r3, r3
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	b29a      	uxth	r2, r3
 8004708:	89fb      	ldrh	r3, [r7, #14]
 800470a:	4313      	orrs	r3, r2
 800470c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	89fa      	ldrh	r2, [r7, #14]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	e04f      	b.n	80047b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	77bb      	strb	r3, [r7, #30]
 800471c:	e04c      	b.n	80047b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800471e:	7ffb      	ldrb	r3, [r7, #31]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d828      	bhi.n	8004776 <UART_SetConfig+0x462>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <UART_SetConfig+0x418>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004751 	.word	0x08004751
 8004730:	08004759 	.word	0x08004759
 8004734:	08004761 	.word	0x08004761
 8004738:	08004777 	.word	0x08004777
 800473c:	08004767 	.word	0x08004767
 8004740:	08004777 	.word	0x08004777
 8004744:	08004777 	.word	0x08004777
 8004748:	08004777 	.word	0x08004777
 800474c:	0800476f 	.word	0x0800476f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004750:	f7fe f826 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8004754:	61b8      	str	r0, [r7, #24]
        break;
 8004756:	e013      	b.n	8004780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004758:	f7fe f836 	bl	80027c8 <HAL_RCC_GetPCLK2Freq>
 800475c:	61b8      	str	r0, [r7, #24]
        break;
 800475e:	e00f      	b.n	8004780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004760:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <UART_SetConfig+0x4c4>)
 8004762:	61bb      	str	r3, [r7, #24]
        break;
 8004764:	e00c      	b.n	8004780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004766:	f7fd ff49 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 800476a:	61b8      	str	r0, [r7, #24]
        break;
 800476c:	e008      	b.n	8004780 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800476e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004772:	61bb      	str	r3, [r7, #24]
        break;
 8004774:	e004      	b.n	8004780 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	77bb      	strb	r3, [r7, #30]
        break;
 800477e:	bf00      	nop
    }

    if (pclk != 0U)
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d018      	beq.n	80047b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	085a      	lsrs	r2, r3, #1
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	441a      	add	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b0f      	cmp	r3, #15
 800479e:	d909      	bls.n	80047b4 <UART_SetConfig+0x4a0>
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a6:	d205      	bcs.n	80047b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	e001      	b.n	80047b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3720      	adds	r7, #32
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40007c00 	.word	0x40007c00
 80047d4:	40023800 	.word	0x40023800
 80047d8:	00f42400 	.word	0x00f42400

080047dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01a      	beq.n	80048f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048da:	d10a      	bne.n	80048f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]
  }
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af02      	add	r7, sp, #8
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004930:	f7fc fb98 	bl	8001064 <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b08      	cmp	r3, #8
 8004942:	d10e      	bne.n	8004962 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f817 	bl	8004986 <UART_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e00d      	b.n	800497e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b09c      	sub	sp, #112	; 0x70
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004996:	e0a5      	b.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800499e:	f000 80a1 	beq.w	8004ae4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a2:	f7fc fb5f 	bl	8001064 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d302      	bcc.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80049b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d13e      	bne.n	8004a36 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c0:	e853 3f00 	ldrex	r3, [r3]
 80049c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049cc:	667b      	str	r3, [r7, #100]	; 0x64
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e6      	bne.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3308      	adds	r3, #8
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	663b      	str	r3, [r7, #96]	; 0x60
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e5      	bne.n	80049ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e067      	b.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d04f      	beq.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a52:	d147      	bne.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ab0:	623a      	str	r2, [r7, #32]
 8004ab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69f9      	ldr	r1, [r7, #28]
 8004ab6:	6a3a      	ldr	r2, [r7, #32]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e010      	b.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	f43f af4a 	beq.w	8004998 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3770      	adds	r7, #112	; 0x70
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b089      	sub	sp, #36	; 0x24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6979      	ldr	r1, [r7, #20]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	613b      	str	r3, [r7, #16]
   return(result);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004b4e:	bf00      	nop
 8004b50:	3724      	adds	r7, #36	; 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b095      	sub	sp, #84	; 0x54
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b80:	643b      	str	r3, [r7, #64]	; 0x40
 8004b82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b88:	e841 2300 	strex	r3, r2, [r1]
 8004b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e6      	bne.n	8004b62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	e853 3f00 	ldrex	r3, [r3]
 8004ba2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f023 0301 	bic.w	r3, r3, #1
 8004baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bbc:	e841 2300 	strex	r3, r2, [r1]
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1e5      	bne.n	8004b94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d118      	bne.n	8004c02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f023 0310 	bic.w	r3, r3, #16
 8004be4:	647b      	str	r3, [r7, #68]	; 0x44
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6979      	ldr	r1, [r7, #20]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e6      	bne.n	8004bd0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c14:	bf00      	nop
 8004c16:	3754      	adds	r7, #84	; 0x54
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff fb52 	bl	80042e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6979      	ldr	r1, [r7, #20]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e6      	bne.n	8004c54 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fb1e 	bl	80042d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c98:	bf00      	nop
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <__libc_init_array>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	4d0d      	ldr	r5, [pc, #52]	; (8004cd8 <__libc_init_array+0x38>)
 8004ca4:	4c0d      	ldr	r4, [pc, #52]	; (8004cdc <__libc_init_array+0x3c>)
 8004ca6:	1b64      	subs	r4, r4, r5
 8004ca8:	10a4      	asrs	r4, r4, #2
 8004caa:	2600      	movs	r6, #0
 8004cac:	42a6      	cmp	r6, r4
 8004cae:	d109      	bne.n	8004cc4 <__libc_init_array+0x24>
 8004cb0:	4d0b      	ldr	r5, [pc, #44]	; (8004ce0 <__libc_init_array+0x40>)
 8004cb2:	4c0c      	ldr	r4, [pc, #48]	; (8004ce4 <__libc_init_array+0x44>)
 8004cb4:	f000 f854 	bl	8004d60 <_init>
 8004cb8:	1b64      	subs	r4, r4, r5
 8004cba:	10a4      	asrs	r4, r4, #2
 8004cbc:	2600      	movs	r6, #0
 8004cbe:	42a6      	cmp	r6, r4
 8004cc0:	d105      	bne.n	8004cce <__libc_init_array+0x2e>
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc8:	4798      	blx	r3
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7ee      	b.n	8004cac <__libc_init_array+0xc>
 8004cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd2:	4798      	blx	r3
 8004cd4:	3601      	adds	r6, #1
 8004cd6:	e7f2      	b.n	8004cbe <__libc_init_array+0x1e>
 8004cd8:	08004da0 	.word	0x08004da0
 8004cdc:	08004da0 	.word	0x08004da0
 8004ce0:	08004da0 	.word	0x08004da0
 8004ce4:	08004da4 	.word	0x08004da4

08004ce8 <memset>:
 8004ce8:	4402      	add	r2, r0
 8004cea:	4603      	mov	r3, r0
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <memset+0xa>
 8004cf0:	4770      	bx	lr
 8004cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf6:	e7f9      	b.n	8004cec <memset+0x4>

08004cf8 <time>:
 8004cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <time+0x30>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4669      	mov	r1, sp
 8004d00:	4604      	mov	r4, r0
 8004d02:	6818      	ldr	r0, [r3, #0]
 8004d04:	f000 f812 	bl	8004d2c <_gettimeofday_r>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	bfbe      	ittt	lt
 8004d0c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8004d10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d14:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d1c:	b10c      	cbz	r4, 8004d22 <time+0x2a>
 8004d1e:	e9c4 0100 	strd	r0, r1, [r4]
 8004d22:	b004      	add	sp, #16
 8004d24:	bd10      	pop	{r4, pc}
 8004d26:	bf00      	nop
 8004d28:	2000000c 	.word	0x2000000c

08004d2c <_gettimeofday_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4d07      	ldr	r5, [pc, #28]	; (8004d4c <_gettimeofday_r+0x20>)
 8004d30:	2300      	movs	r3, #0
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	f000 f809 	bl	8004d50 <_gettimeofday>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	d102      	bne.n	8004d48 <_gettimeofday_r+0x1c>
 8004d42:	682b      	ldr	r3, [r5, #0]
 8004d44:	b103      	cbz	r3, 8004d48 <_gettimeofday_r+0x1c>
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20002138 	.word	0x20002138

08004d50 <_gettimeofday>:
 8004d50:	4b02      	ldr	r3, [pc, #8]	; (8004d5c <_gettimeofday+0xc>)
 8004d52:	2258      	movs	r2, #88	; 0x58
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5a:	4770      	bx	lr
 8004d5c:	20002138 	.word	0x20002138

08004d60 <_init>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	bf00      	nop
 8004d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d66:	bc08      	pop	{r3}
 8004d68:	469e      	mov	lr, r3
 8004d6a:	4770      	bx	lr

08004d6c <_fini>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	bf00      	nop
 8004d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d72:	bc08      	pop	{r3}
 8004d74:	469e      	mov	lr, r3
 8004d76:	4770      	bx	lr
