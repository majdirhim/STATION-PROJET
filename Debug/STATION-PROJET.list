
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009154  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08009324  08009324  00019324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009484  08009484  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800948c  0800948c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800948c  0800948c  0001948c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000070  08009504  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  08009504  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bfa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003149  00000000  00000000  00033c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00036de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00037d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002886a  00000000  00000000  00038ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016bd5  00000000  00000000  0006134a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed072  00000000  00000000  00077f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164f91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fcc  00000000  00000000  00164fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800930c 	.word	0x0800930c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800930c 	.word	0x0800930c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <WR_TO_Sd>:
/**
 * @brief Ecriture dans le fichier
 * @param : file_name : nom du fichier
 * @param : Wtext : data à transmettre
 */
FRESULT WR_TO_Sd(const char *wtext, const char *file_name) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */

	//Open file for writing (Create)
	if (f_open(&SDFile, file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 80005ce:	2232      	movs	r2, #50	; 0x32
 80005d0:	6839      	ldr	r1, [r7, #0]
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <WR_TO_Sd+0x58>)
 80005d4:	f007 f996 	bl	8007904 <f_open>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <WR_TO_Sd+0x1e>
		Error_Handler();
 80005de:	f000 fa57 	bl	8000a90 <Error_Handler>
	}
	//Write to the text file
	res = f_write(&SDFile, wtext, strlen(wtext), (void*) &byteswritten);
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff fe14 	bl	8000210 <strlen>
 80005e8:	4602      	mov	r2, r0
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <WR_TO_Sd+0x58>)
 80005f2:	f007 fb45 	bl	8007c80 <f_write>
 80005f6:	4603      	mov	r3, r0
 80005f8:	73fb      	strb	r3, [r7, #15]
	if ((byteswritten == 0) || (res != FR_OK)) {
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <WR_TO_Sd+0x42>
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <WR_TO_Sd+0x48>
		Error_Handler();
 8000606:	f000 fa43 	bl	8000a90 <Error_Handler>
 800060a:	e002      	b.n	8000612 <WR_TO_Sd+0x4e>
	} else {

		f_close(&SDFile); // Close file object
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <WR_TO_Sd+0x58>)
 800060e:	f007 fd2a 	bl	8008066 <f_close>
	}
	//f_mount(&SDFatFS, (TCHAR const*) NULL, 0); //unmount file system object
	return res;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000494 	.word	0x20000494

08000620 <Fat_Init>:

/**
 * @brief : Initialiser un espace de travail dans la carte Sd
 */

void Fat_Init() {
 8000620:	b580      	push	{r7, lr}
 8000622:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000626:	af02      	add	r7, sp, #8

	uint8_t rtext[_MAX_SS];/* File read buffer */
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8000628:	2200      	movs	r2, #0
 800062a:	490e      	ldr	r1, [pc, #56]	; (8000664 <Fat_Init+0x44>)
 800062c:	480e      	ldr	r0, [pc, #56]	; (8000668 <Fat_Init+0x48>)
 800062e:	f007 f923 	bl	8007878 <f_mount>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <Fat_Init+0x1e>
		Error_Handler();
 8000638:	f000 fa2a 	bl	8000a90 <Error_Handler>
		if (f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext)) //creates a FAT volume on the logical drive
		!= FR_OK) {
			Error_Handler(); // error handler
		}
	}
}
 800063c:	e00d      	b.n	800065a <Fat_Init+0x3a>
		if (f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext)) //creates a FAT volume on the logical drive
 800063e:	463b      	mov	r3, r7
 8000640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	2200      	movs	r2, #0
 8000648:	2107      	movs	r1, #7
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <Fat_Init+0x44>)
 800064c:	f007 fd36 	bl	80080bc <f_mkfs>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <Fat_Init+0x3a>
			Error_Handler(); // error handler
 8000656:	f000 fa1b 	bl	8000a90 <Error_Handler>
}
 800065a:	bf00      	nop
 800065c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000260 	.word	0x20000260
 8000668:	20000264 	.word	0x20000264

0800066c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_DMA_Init+0x48>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_DMA_Init+0x48>)
 8000678:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_DMA_Init+0x48>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	203b      	movs	r0, #59	; 0x3b
 8000690:	f000 fdf9 	bl	8001286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000694:	203b      	movs	r0, #59	; 0x3b
 8000696:	f000 fe12 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2045      	movs	r0, #69	; 0x45
 80006a0:	f000 fdf1 	bl	8001286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006a4:	2045      	movs	r0, #69	; 0x45
 80006a6:	f000 fe0a 	bl	80012be <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b090      	sub	sp, #64	; 0x40
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ce:	4b91      	ldr	r3, [pc, #580]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a90      	ldr	r2, [pc, #576]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006d4:	f043 0310 	orr.w	r3, r3, #16
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b8e      	ldr	r3, [pc, #568]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80006e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e6:	4b8b      	ldr	r3, [pc, #556]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a8a      	ldr	r2, [pc, #552]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b88      	ldr	r3, [pc, #544]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b85      	ldr	r3, [pc, #532]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a84      	ldr	r2, [pc, #528]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b82      	ldr	r3, [pc, #520]	; (8000914 <MX_GPIO_Init+0x25c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	623b      	str	r3, [r7, #32]
 8000714:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	4b7f      	ldr	r3, [pc, #508]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a7e      	ldr	r2, [pc, #504]	; (8000914 <MX_GPIO_Init+0x25c>)
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b7c      	ldr	r3, [pc, #496]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0308 	and.w	r3, r3, #8
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b79      	ldr	r3, [pc, #484]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a78      	ldr	r2, [pc, #480]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b76      	ldr	r3, [pc, #472]	; (8000914 <MX_GPIO_Init+0x25c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b73      	ldr	r3, [pc, #460]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a72      	ldr	r2, [pc, #456]	; (8000914 <MX_GPIO_Init+0x25c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b70      	ldr	r3, [pc, #448]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800075e:	4b6d      	ldr	r3, [pc, #436]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a6c      	ldr	r2, [pc, #432]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b6a      	ldr	r3, [pc, #424]	; (8000914 <MX_GPIO_Init+0x25c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000776:	4b67      	ldr	r3, [pc, #412]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a66      	ldr	r2, [pc, #408]	; (8000914 <MX_GPIO_Init+0x25c>)
 800077c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b64      	ldr	r3, [pc, #400]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800078e:	4b61      	ldr	r3, [pc, #388]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a60      	ldr	r2, [pc, #384]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000794:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b5e      	ldr	r3, [pc, #376]	; (8000914 <MX_GPIO_Init+0x25c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a5a      	ldr	r2, [pc, #360]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b58      	ldr	r3, [pc, #352]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a54      	ldr	r2, [pc, #336]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b52      	ldr	r3, [pc, #328]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 80007d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007dc:	2303      	movs	r3, #3
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007e8:	4619      	mov	r1, r3
 80007ea:	484b      	ldr	r0, [pc, #300]	; (8000918 <MX_GPIO_Init+0x260>)
 80007ec:	f001 f928 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 80007f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000802:	4619      	mov	r1, r3
 8000804:	4845      	ldr	r0, [pc, #276]	; (800091c <MX_GPIO_Init+0x264>)
 8000806:	f001 f91b 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB13 PB12 PB2
                           PB10 PB1 PB0 PB11
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800080a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2
                          |GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081c:	4619      	mov	r1, r3
 800081e:	4840      	ldr	r0, [pc, #256]	; (8000920 <MX_GPIO_Init+0x268>)
 8000820:	f001 f90e 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8000824:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082a:	2303      	movs	r3, #3
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000836:	4619      	mov	r1, r3
 8000838:	483a      	ldr	r0, [pc, #232]	; (8000924 <MX_GPIO_Init+0x26c>)
 800083a:	f001 f901 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA1 PA0
                           PA4 PA2 PA6 PA5
                           PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 800083e:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000844:	2303      	movs	r3, #3
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000850:	4619      	mov	r1, r3
 8000852:	4835      	ldr	r0, [pc, #212]	; (8000928 <MX_GPIO_Init+0x270>)
 8000854:	f001 f8f4 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8000858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085e:	2303      	movs	r3, #3
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800086a:	4619      	mov	r1, r3
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <MX_GPIO_Init+0x274>)
 800086e:	f001 f8e7 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8000872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	2303      	movs	r3, #3
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000884:	4619      	mov	r1, r3
 8000886:	482a      	ldr	r0, [pc, #168]	; (8000930 <MX_GPIO_Init+0x278>)
 8000888:	f001 f8da 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800088c:	23ff      	movs	r3, #255	; 0xff
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000890:	2303      	movs	r3, #3
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	4825      	ldr	r0, [pc, #148]	; (8000934 <MX_GPIO_Init+0x27c>)
 80008a0:	f001 f8ce 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b6:	4619      	mov	r1, r3
 80008b8:	481f      	ldr	r0, [pc, #124]	; (8000938 <MX_GPIO_Init+0x280>)
 80008ba:	f001 f8c1 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c4:	2303      	movs	r3, #3
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d0:	4619      	mov	r1, r3
 80008d2:	481a      	ldr	r0, [pc, #104]	; (800093c <MX_GPIO_Init+0x284>)
 80008d4:	f001 f8b4 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80008d8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008de:	2303      	movs	r3, #3
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ea:	4619      	mov	r1, r3
 80008ec:	4814      	ldr	r0, [pc, #80]	; (8000940 <MX_GPIO_Init+0x288>)
 80008ee:	f001 f8a7 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC3 PC0 PC1 PC2
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 80008f2:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f8:	2303      	movs	r3, #3
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_GPIO_Init+0x280>)
 8000908:	f001 f89a 	bl	8001a40 <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3740      	adds	r7, #64	; 0x40
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40021000 	.word	0x40021000
 800091c:	40021800 	.word	0x40021800
 8000920:	40020400 	.word	0x40020400
 8000924:	40020c00 	.word	0x40020c00
 8000928:	40020000 	.word	0x40020000
 800092c:	40022400 	.word	0x40022400
 8000930:	40022000 	.word	0x40022000
 8000934:	40022800 	.word	0x40022800
 8000938:	40020800 	.word	0x40020800
 800093c:	40021400 	.word	0x40021400
 8000940:	40021c00 	.word	0x40021c00

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	; 0x38
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f000 fb40 	bl	8000fce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f831 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f7ff feb1 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000956:	f7ff fe89 	bl	800066c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800095a:	f000 f89f 	bl	8000a9c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800095e:	f004 ffeb 	bl	8005938 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000962:	f000 fa7d 	bl	8000e60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Fat_Init();
 8000966:	f7ff fe5b 	bl	8000620 <Fat_Init>
  char wtext[50]=""; //Buffer pour le texte à Ecrir dans le fichier
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	222e      	movs	r2, #46	; 0x2e
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f008 f852 	bl	8008a20 <memset>
  uint8_t i=0;
 800097c:	2300      	movs	r3, #0
 800097e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(wtext,"%d\n\r",i++);
 8000982:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 800098c:	461a      	mov	r2, r3
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4906      	ldr	r1, [pc, #24]	; (80009ac <main+0x68>)
 8000992:	4618      	mov	r0, r3
 8000994:	f008 f84c 	bl	8008a30 <siprintf>
	  WR_TO_Sd(wtext, "test.txt");
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4905      	ldr	r1, [pc, #20]	; (80009b0 <main+0x6c>)
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fe11 	bl	80005c4 <WR_TO_Sd>
	  HAL_Delay(1000);
 80009a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a6:	f000 fb6f 	bl	8001088 <HAL_Delay>
	  sprintf(wtext,"%d\n\r",i++);
 80009aa:	e7ea      	b.n	8000982 <main+0x3e>
 80009ac:	08009324 	.word	0x08009324
 80009b0:	0800932c 	.word	0x0800932c

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	; 0x50
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	2230      	movs	r2, #48	; 0x30
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f008 f82c 	bl	8008a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <SystemClock_Config+0xd4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <SystemClock_Config+0xd4>)
 80009de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <SystemClock_Config+0xd4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <SystemClock_Config+0xd8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f8:	4a24      	ldr	r2, [pc, #144]	; (8000a8c <SystemClock_Config+0xd8>)
 80009fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <SystemClock_Config+0xd8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a16:	2302      	movs	r3, #2
 8000a18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a20:	230c      	movs	r3, #12
 8000a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a24:	2360      	movs	r3, #96	; 0x60
 8000a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fa17 	bl	8001e68 <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a40:	f000 f826 	bl	8000a90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a44:	f001 f9c0 	bl	8001dc8 <HAL_PWREx_EnableOverDrive>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a4e:	f000 f81f 	bl	8000a90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2103      	movs	r1, #3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fc9d 	bl	80023b0 <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a7c:	f000 f808 	bl	8000a90 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3750      	adds	r7, #80	; 0x50
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_SDMMC1_SD_Init+0x38>)
 8000aa2:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <MX_SDMMC1_SD_Init+0x3c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_SDMMC1_SD_Init+0x38>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_SDMMC1_SD_Init+0x38>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_SDMMC1_SD_Init+0x38>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_SDMMC1_SD_Init+0x38>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <MX_SDMMC1_SD_Init+0x38>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <MX_SDMMC1_SD_Init+0x38>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	2000008c 	.word	0x2000008c
 8000ad8:	40012c00 	.word	0x40012c00

08000adc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0ac      	sub	sp, #176	; 0xb0
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	2284      	movs	r2, #132	; 0x84
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f007 ff8f 	bl	8008a20 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a74      	ldr	r2, [pc, #464]	; (8000cd8 <HAL_SD_MspInit+0x1fc>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	f040 80e0 	bne.w	8000cce <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000b0e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000b12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b20:	f107 0318 	add.w	r3, r7, #24
 8000b24:	4618      	mov	r0, r3
 8000b26:	f001 fe29 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8000b30:	f7ff ffae 	bl	8000a90 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b34:	4b69      	ldr	r3, [pc, #420]	; (8000cdc <HAL_SD_MspInit+0x200>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	4a68      	ldr	r2, [pc, #416]	; (8000cdc <HAL_SD_MspInit+0x200>)
 8000b3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b3e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b40:	4b66      	ldr	r3, [pc, #408]	; (8000cdc <HAL_SD_MspInit+0x200>)
 8000b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	4b63      	ldr	r3, [pc, #396]	; (8000cdc <HAL_SD_MspInit+0x200>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a62      	ldr	r2, [pc, #392]	; (8000cdc <HAL_SD_MspInit+0x200>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b60      	ldr	r3, [pc, #384]	; (8000cdc <HAL_SD_MspInit+0x200>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b64:	4b5d      	ldr	r3, [pc, #372]	; (8000cdc <HAL_SD_MspInit+0x200>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a5c      	ldr	r2, [pc, #368]	; (8000cdc <HAL_SD_MspInit+0x200>)
 8000b6a:	f043 0308 	orr.w	r3, r3, #8
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b5a      	ldr	r3, [pc, #360]	; (8000cdc <HAL_SD_MspInit+0x200>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8000b7c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b96:	230c      	movs	r3, #12
 8000b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	484f      	ldr	r0, [pc, #316]	; (8000ce0 <HAL_SD_MspInit+0x204>)
 8000ba4:	f000 ff4c 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4845      	ldr	r0, [pc, #276]	; (8000ce4 <HAL_SD_MspInit+0x208>)
 8000bce:	f000 ff37 	bl	8001a40 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000bd2:	4b45      	ldr	r3, [pc, #276]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000bd4:	4a45      	ldr	r2, [pc, #276]	; (8000cec <HAL_SD_MspInit+0x210>)
 8000bd6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000bd8:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000bda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bde:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be0:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bec:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000bf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bfa:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c02:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000c06:	2220      	movs	r2, #32
 8000c08:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000c12:	2204      	movs	r2, #4
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000c18:	2203      	movs	r2, #3
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000c1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c24:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000c26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c2a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000c2c:	482e      	ldr	r0, [pc, #184]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000c2e:	f000 fb61 	bl	80012f4 <HAL_DMA_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000c38:	f7ff ff2a 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000c40:	641a      	str	r2, [r3, #64]	; 0x40
 8000c42:	4a29      	ldr	r2, [pc, #164]	; (8000ce8 <HAL_SD_MspInit+0x20c>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c4a:	4a2a      	ldr	r2, [pc, #168]	; (8000cf4 <HAL_SD_MspInit+0x218>)
 8000c4c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c54:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c58:	2240      	movs	r2, #64	; 0x40
 8000c5a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c68:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c70:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c78:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c7c:	2220      	movs	r2, #32
 8000c7e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c88:	2204      	movs	r2, #4
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c8e:	2203      	movs	r2, #3
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000c9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ca0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000ca2:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000ca4:	f000 fb26 	bl	80012f4 <HAL_DMA_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000cae:	f7ff feef 	bl	8000a90 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000cb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_SD_MspInit+0x214>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2031      	movs	r0, #49	; 0x31
 8000cc4:	f000 fadf 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000cc8:	2031      	movs	r0, #49	; 0x31
 8000cca:	f000 faf8 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000cce:	bf00      	nop
 8000cd0:	37b0      	adds	r7, #176	; 0xb0
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	20000110 	.word	0x20000110
 8000cec:	40026458 	.word	0x40026458
 8000cf0:	20000170 	.word	0x20000170
 8000cf4:	400264a0 	.word	0x400264a0

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_MspInit+0x44>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_MspInit+0x44>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_MspInit+0x44>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x44>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x44>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023800 	.word	0x40023800

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f95c 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <SDMMC1_IRQHandler+0x10>)
 8000d9a:	f002 fb5f 	bl	800345c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000008c 	.word	0x2000008c

08000da8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <DMA2_Stream3_IRQHandler+0x10>)
 8000dae:	f000 fbd1 	bl	8001554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000110 	.word	0x20000110

08000dbc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <DMA2_Stream6_IRQHandler+0x10>)
 8000dc2:	f000 fbc7 	bl	8001554 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000170 	.word	0x20000170

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f007 fde4 	bl	80089cc <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20050000 	.word	0x20050000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	200001d0 	.word	0x200001d0
 8000e38:	20000710 	.word	0x20000710

08000e3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e66:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <MX_USART1_UART_Init+0x5c>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000ea4:	f003 fb85 	bl	80045b2 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eae:	f7ff fdef 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200001d4 	.word	0x200001d4
 8000ebc:	40011000 	.word	0x40011000

08000ec0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0aa      	sub	sp, #168	; 0xa8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2284      	movs	r2, #132	; 0x84
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f007 fd9d 	bl	8008a20 <memset>
  if(uartHandle->Instance==USART1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <HAL_UART_MspInit+0xb0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d13a      	bne.n	8000f66 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ef0:	2340      	movs	r3, #64	; 0x40
 8000ef2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 fc3d 	bl	800277c <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f08:	f7ff fdc2 	bl	8000a90 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_UART_MspInit+0xb4>)
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f10:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <HAL_UART_MspInit+0xb4>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6453      	str	r3, [r2, #68]	; 0x44
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_UART_MspInit+0xb4>)
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1c:	f003 0310 	and.w	r3, r3, #16
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_UART_MspInit+0xb4>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <HAL_UART_MspInit+0xb4>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_UART_MspInit+0xb4>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000f3c:	23c0      	movs	r3, #192	; 0xc0
 8000f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f54:	2307      	movs	r3, #7
 8000f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_UART_MspInit+0xb8>)
 8000f62:	f000 fd6d 	bl	8001a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	37a8      	adds	r7, #168	; 0xa8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020400 	.word	0x40020400

08000f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f82:	490e      	ldr	r1, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f98:	4c0b      	ldr	r4, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa6:	f7ff ff49 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000faa:	f007 fd15 	bl	80089d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fae:	f7ff fcc9 	bl	8000944 <main>
  bx  lr    
 8000fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fc0:	08009494 	.word	0x08009494
  ldr r2, =_sbss
 8000fc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fc8:	20000710 	.word	0x20000710

08000fcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>

08000fce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f94c 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 f805 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fde:	f7ff fe8b 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f967 	bl	80012da <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f92f 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008
 800106c:	20000258 	.word	0x20000258

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000258 	.word	0x20000258

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000008 	.word	0x20000008

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <__NVIC_SetPriorityGrouping+0x40>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x40>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	05fa0000 	.word	0x05fa0000

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff feb6 	bl	8001070 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e099      	b.n	8001444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001330:	e00f      	b.n	8001352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001332:	f7ff fe9d 	bl	8001070 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b05      	cmp	r3, #5
 800133e:	d908      	bls.n	8001352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2220      	movs	r2, #32
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2203      	movs	r2, #3
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e078      	b.n	8001444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e8      	bne.n	8001332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_DMA_Init+0x158>)
 800136c:	4013      	ands	r3, r2
 800136e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d107      	bne.n	80013bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4313      	orrs	r3, r2
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f023 0307 	bic.w	r3, r3, #7
 80013d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	4313      	orrs	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d117      	bne.n	8001416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00e      	beq.n	8001416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 faa5 	bl	8001948 <DMA_CheckFifoParam>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001412:	2301      	movs	r3, #1
 8001414:	e016      	b.n	8001444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fa5c 	bl	80018dc <DMA_CalcBaseAndBitshift>
 8001424:	4603      	mov	r3, r0
 8001426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	223f      	movs	r2, #63	; 0x3f
 800142e:	409a      	lsls	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	f010803f 	.word	0xf010803f

08001450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_DMA_Start_IT+0x26>
 8001472:	2302      	movs	r3, #2
 8001474:	e048      	b.n	8001508 <HAL_DMA_Start_IT+0xb8>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d137      	bne.n	80014fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2202      	movs	r2, #2
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2200      	movs	r2, #0
 8001496:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 f9ee 	bl	8001880 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	223f      	movs	r2, #63	; 0x3f
 80014aa:	409a      	lsls	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0216 	orr.w	r2, r2, #22
 80014be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0208 	orr.w	r2, r2, #8
 80014e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e005      	b.n	8001506 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001502:	2302      	movs	r3, #2
 8001504:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001506:	7dfb      	ldrb	r3, [r7, #23]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d004      	beq.n	800152e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00c      	b.n	8001548 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2205      	movs	r2, #5
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0201 	bic.w	r2, r2, #1
 8001544:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001560:	4b8e      	ldr	r3, [pc, #568]	; (800179c <HAL_DMA_IRQHandler+0x248>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a8e      	ldr	r2, [pc, #568]	; (80017a0 <HAL_DMA_IRQHandler+0x24c>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0a9b      	lsrs	r3, r3, #10
 800156c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2208      	movs	r2, #8
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d01a      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0204 	bic.w	r2, r2, #4
 80015a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	2208      	movs	r2, #8
 80015ae:	409a      	lsls	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b8:	f043 0201 	orr.w	r2, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	2201      	movs	r2, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d012      	beq.n	80015f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	2201      	movs	r2, #1
 80015e4:	409a      	lsls	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ee:	f043 0202 	orr.w	r2, r3, #2
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	2204      	movs	r2, #4
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4013      	ands	r3, r2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d012      	beq.n	800162c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00b      	beq.n	800162c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001618:	2204      	movs	r2, #4
 800161a:	409a      	lsls	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001624:	f043 0204 	orr.w	r2, r3, #4
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	2210      	movs	r2, #16
 8001632:	409a      	lsls	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d043      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d03c      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164e:	2210      	movs	r2, #16
 8001650:	409a      	lsls	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d018      	beq.n	8001696 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d108      	bne.n	8001684 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d024      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
 8001682:	e01f      	b.n	80016c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01b      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	4798      	blx	r3
 8001694:	e016      	b.n	80016c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0208 	bic.w	r2, r2, #8
 80016b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	2220      	movs	r2, #32
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 808f 	beq.w	80017f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0310 	and.w	r3, r3, #16
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8087 	beq.w	80017f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ea:	2220      	movs	r2, #32
 80016ec:	409a      	lsls	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d136      	bne.n	800176c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0216 	bic.w	r2, r2, #22
 800170c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800171c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <HAL_DMA_IRQHandler+0x1da>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0208 	bic.w	r2, r2, #8
 800173c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	223f      	movs	r2, #63	; 0x3f
 8001744:	409a      	lsls	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800175e:	2b00      	cmp	r3, #0
 8001760:	d07e      	beq.n	8001860 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	4798      	blx	r3
        }
        return;
 800176a:	e079      	b.n	8001860 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d01d      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10d      	bne.n	80017a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178c:	2b00      	cmp	r3, #0
 800178e:	d031      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
 8001798:	e02c      	b.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
 800179a:	bf00      	nop
 800179c:	20000000 	.word	0x20000000
 80017a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d023      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
 80017b4:	e01e      	b.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10f      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0210 	bic.w	r2, r2, #16
 80017d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d032      	beq.n	8001862 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d022      	beq.n	800184e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2205      	movs	r2, #5
 800180c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0201 	bic.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	d307      	bcc.n	800183c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f2      	bne.n	8001820 <HAL_DMA_IRQHandler+0x2cc>
 800183a:	e000      	b.n	800183e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800183c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
 800185e:	e000      	b.n	8001862 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001860:	bf00      	nop
    }
  }
}
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800189c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b40      	cmp	r3, #64	; 0x40
 80018ac:	d108      	bne.n	80018c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018be:	e007      	b.n	80018d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	60da      	str	r2, [r3, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	3b10      	subs	r3, #16
 80018ec:	4a13      	ldr	r2, [pc, #76]	; (800193c <DMA_CalcBaseAndBitshift+0x60>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <DMA_CalcBaseAndBitshift+0x64>)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d908      	bls.n	800191c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <DMA_CalcBaseAndBitshift+0x68>)
 8001912:	4013      	ands	r3, r2
 8001914:	1d1a      	adds	r2, r3, #4
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	659a      	str	r2, [r3, #88]	; 0x58
 800191a:	e006      	b.n	800192a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <DMA_CalcBaseAndBitshift+0x68>)
 8001924:	4013      	ands	r3, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	aaaaaaab 	.word	0xaaaaaaab
 8001940:	08009394 	.word	0x08009394
 8001944:	fffffc00 	.word	0xfffffc00

08001948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d11f      	bne.n	80019a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d856      	bhi.n	8001a16 <DMA_CheckFifoParam+0xce>
 8001968:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <DMA_CheckFifoParam+0x28>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001981 	.word	0x08001981
 8001974:	08001993 	.word	0x08001993
 8001978:	08001981 	.word	0x08001981
 800197c:	08001a17 	.word	0x08001a17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d046      	beq.n	8001a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001990:	e043      	b.n	8001a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800199a:	d140      	bne.n	8001a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a0:	e03d      	b.n	8001a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019aa:	d121      	bne.n	80019f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d837      	bhi.n	8001a22 <DMA_CheckFifoParam+0xda>
 80019b2:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <DMA_CheckFifoParam+0x70>)
 80019b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b8:	080019c9 	.word	0x080019c9
 80019bc:	080019cf 	.word	0x080019cf
 80019c0:	080019c9 	.word	0x080019c9
 80019c4:	080019e1 	.word	0x080019e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	73fb      	strb	r3, [r7, #15]
      break;
 80019cc:	e030      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d025      	beq.n	8001a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019de:	e022      	b.n	8001a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e8:	d11f      	bne.n	8001a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019ee:	e01c      	b.n	8001a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d903      	bls.n	80019fe <DMA_CheckFifoParam+0xb6>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d003      	beq.n	8001a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019fc:	e018      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
      break;
 8001a02:	e015      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00e      	beq.n	8001a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
      break;
 8001a14:	e00b      	b.n	8001a2e <DMA_CheckFifoParam+0xe6>
      break;
 8001a16:	bf00      	nop
 8001a18:	e00a      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e008      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e006      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a22:	bf00      	nop
 8001a24:	e004      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
 8001a28:	e002      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a2a:	bf00      	nop
 8001a2c:	e000      	b.n	8001a30 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e175      	b.n	8001d4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 8164 	bne.w	8001d46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d005      	beq.n	8001a96 <HAL_GPIO_Init+0x56>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d130      	bne.n	8001af8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 0201 	and.w	r2, r3, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d017      	beq.n	8001b34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d123      	bne.n	8001b88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80be 	beq.w	8001d46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a65      	ldr	r2, [pc, #404]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001be2:	4a61      	ldr	r2, [pc, #388]	; (8001d68 <HAL_GPIO_Init+0x328>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_GPIO_Init+0x32c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d037      	beq.n	8001c7e <HAL_GPIO_Init+0x23e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a57      	ldr	r2, [pc, #348]	; (8001d70 <HAL_GPIO_Init+0x330>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d031      	beq.n	8001c7a <HAL_GPIO_Init+0x23a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a56      	ldr	r2, [pc, #344]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d02b      	beq.n	8001c76 <HAL_GPIO_Init+0x236>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a55      	ldr	r2, [pc, #340]	; (8001d78 <HAL_GPIO_Init+0x338>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_GPIO_Init+0x232>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a54      	ldr	r2, [pc, #336]	; (8001d7c <HAL_GPIO_Init+0x33c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <HAL_GPIO_Init+0x22e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a53      	ldr	r2, [pc, #332]	; (8001d80 <HAL_GPIO_Init+0x340>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x22a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_GPIO_Init+0x344>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x226>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <HAL_GPIO_Init+0x348>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x222>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x34c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x21e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <HAL_GPIO_Init+0x350>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x21a>
 8001c56:	2309      	movs	r3, #9
 8001c58:	e012      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	e010      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c5e:	2308      	movs	r3, #8
 8001c60:	e00e      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e00c      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c66:	2306      	movs	r3, #6
 8001c68:	e00a      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c90:	4935      	ldr	r1, [pc, #212]	; (8001d68 <HAL_GPIO_Init+0x328>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	f67f ae86 	bls.w	8001a60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40021400 	.word	0x40021400
 8001d84:	40021800 	.word	0x40021800
 8001d88:	40021c00 	.word	0x40021c00
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40022400 	.word	0x40022400
 8001d94:	40013c00 	.word	0x40013c00

08001d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e001      	b.n	8001dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a22      	ldr	r2, [pc, #136]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df6:	f7ff f93b 	bl	8001070 <HAL_GetTick>
 8001dfa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dfc:	e009      	b.n	8001e12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dfe:	f7ff f937 	bl	8001070 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e0c:	d901      	bls.n	8001e12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e022      	b.n	8001e58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1e:	d1ee      	bne.n	8001dfe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e2c:	f7ff f920 	bl	8001070 <HAL_GetTick>
 8001e30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e32:	e009      	b.n	8001e48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e34:	f7ff f91c 	bl	8001070 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e42:	d901      	bls.n	8001e48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e007      	b.n	8001e58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e54:	d1ee      	bne.n	8001e34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40007000 	.word	0x40007000

08001e68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e291      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8087 	beq.w	8001f9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e8c:	4b96      	ldr	r3, [pc, #600]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d00c      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e98:	4b93      	ldr	r3, [pc, #588]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d112      	bne.n	8001eca <HAL_RCC_OscConfig+0x62>
 8001ea4:	4b90      	ldr	r3, [pc, #576]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb0:	d10b      	bne.n	8001eca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb2:	4b8d      	ldr	r3, [pc, #564]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d06c      	beq.n	8001f98 <HAL_RCC_OscConfig+0x130>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d168      	bne.n	8001f98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e26b      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x7a>
 8001ed4:	4b84      	ldr	r3, [pc, #528]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a83      	ldr	r2, [pc, #524]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e02e      	b.n	8001f40 <HAL_RCC_OscConfig+0xd8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x9c>
 8001eea:	4b7f      	ldr	r3, [pc, #508]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a7e      	ldr	r2, [pc, #504]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7b      	ldr	r2, [pc, #492]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e01d      	b.n	8001f40 <HAL_RCC_OscConfig+0xd8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0xc0>
 8001f0e:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a75      	ldr	r2, [pc, #468]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a72      	ldr	r2, [pc, #456]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0xd8>
 8001f28:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6e      	ldr	r2, [pc, #440]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b6c      	ldr	r3, [pc, #432]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6b      	ldr	r2, [pc, #428]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f892 	bl	8001070 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff f88e 	bl	8001070 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e21f      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0xe8>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff f87e 	bl	8001070 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff f87a 	bl	8001070 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e20b      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x110>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d069      	beq.n	800207a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fa6:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00b      	beq.n	8001fca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb2:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d11c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x190>
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d116      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x17a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e1df      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	493d      	ldr	r1, [pc, #244]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	e040      	b.n	800207a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d023      	beq.n	8002048 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002000:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a38      	ldr	r2, [pc, #224]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff f830 	bl	8001070 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff f82c 	bl	8001070 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1bd      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4929      	ldr	r1, [pc, #164]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
 8002046:	e018      	b.n	800207a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff f80c 	bl	8001070 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff f808 	bl	8001070 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e199      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d038      	beq.n	80020f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d019      	beq.n	80020c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8002090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002092:	4a15      	ldr	r2, [pc, #84]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209a:	f7fe ffe9 	bl	8001070 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a2:	f7fe ffe5 	bl	8001070 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e176      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 80020b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x23a>
 80020c0:	e01a      	b.n	80020f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 80020c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_RCC_OscConfig+0x280>)
 80020c8:	f023 0301 	bic.w	r3, r3, #1
 80020cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7fe ffcf 	bl	8001070 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d6:	f7fe ffcb 	bl	8001070 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d903      	bls.n	80020ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e15c      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
 80020e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ec:	4b91      	ldr	r3, [pc, #580]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ee      	bne.n	80020d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a4 	beq.w	800224e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b8b      	ldr	r3, [pc, #556]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10d      	bne.n	800212e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	4b88      	ldr	r3, [pc, #544]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a87      	ldr	r2, [pc, #540]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b85      	ldr	r3, [pc, #532]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212e:	4b82      	ldr	r3, [pc, #520]	; (8002338 <HAL_RCC_OscConfig+0x4d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d118      	bne.n	800216c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x4d0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7e      	ldr	r2, [pc, #504]	; (8002338 <HAL_RCC_OscConfig+0x4d0>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7fe ff93 	bl	8001070 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7fe ff8f 	bl	8001070 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	; 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e120      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002160:	4b75      	ldr	r3, [pc, #468]	; (8002338 <HAL_RCC_OscConfig+0x4d0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x31a>
 8002174:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	e02d      	b.n	80021de <HAL_RCC_OscConfig+0x376>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x33c>
 800218a:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a69      	ldr	r2, [pc, #420]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a66      	ldr	r2, [pc, #408]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	e01c      	b.n	80021de <HAL_RCC_OscConfig+0x376>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCC_OscConfig+0x35e>
 80021ac:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a60      	ldr	r2, [pc, #384]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	4a5d      	ldr	r2, [pc, #372]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6713      	str	r3, [r2, #112]	; 0x70
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0x376>
 80021c6:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ca:	4a5a      	ldr	r2, [pc, #360]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6713      	str	r3, [r2, #112]	; 0x70
 80021d2:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	4a57      	ldr	r2, [pc, #348]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d015      	beq.n	8002212 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7fe ff43 	bl	8001070 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe ff3f 	bl	8001070 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0ce      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ee      	beq.n	80021ee <HAL_RCC_OscConfig+0x386>
 8002210:	e014      	b.n	800223c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7fe ff2d 	bl	8001070 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe ff29 	bl	8001070 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0b8      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	4b40      	ldr	r3, [pc, #256]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ee      	bne.n	800221a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4b3c      	ldr	r3, [pc, #240]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a3b      	ldr	r2, [pc, #236]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80a4 	beq.w	80023a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d06b      	beq.n	800233c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d149      	bne.n	8002300 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a30      	ldr	r2, [pc, #192]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fefa 	bl	8001070 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7fe fef6 	bl	8001070 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e087      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	085b      	lsrs	r3, r3, #1
 80022b6:	3b01      	subs	r3, #1
 80022b8:	041b      	lsls	r3, r3, #16
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	4313      	orrs	r3, r2
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80022c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe feca 	bl	8001070 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fec6 	bl	8001070 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e057      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x478>
 80022fe:	e04f      	b.n	80023a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800230a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe feb0 	bl	8001070 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe feac 	bl	8001070 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e03d      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_RCC_OscConfig+0x4cc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x4ac>
 8002332:	e035      	b.n	80023a0 <HAL_RCC_OscConfig+0x538>
 8002334:	40023800 	.word	0x40023800
 8002338:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x544>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d028      	beq.n	800239c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d121      	bne.n	800239c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d11a      	bne.n	800239c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002372:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002374:	4293      	cmp	r3, r2
 8002376:	d111      	bne.n	800239c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	085b      	lsrs	r3, r3, #1
 8002384:	3b01      	subs	r3, #1
 8002386:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d0      	b.n	800256a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 020f 	bic.w	r2, r3, #15
 80023de:	4965      	ldr	r1, [pc, #404]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b63      	ldr	r3, [pc, #396]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b8      	b.n	800256a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a58      	ldr	r2, [pc, #352]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002416:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800241a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002428:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4a52      	ldr	r2, [pc, #328]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 800242e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002432:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	494d      	ldr	r1, [pc, #308]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d040      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d115      	bne.n	8002492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07f      	b.n	800256a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b41      	ldr	r3, [pc, #260]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e073      	b.n	800256a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3d      	ldr	r3, [pc, #244]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e06b      	b.n	800256a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4936      	ldr	r1, [pc, #216]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a4:	f7fe fde4 	bl	8001070 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7fe fde0 	bl	8001070 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e053      	b.n	800256a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d210      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 020f 	bic.w	r2, r3, #15
 80024ea:	4922      	ldr	r1, [pc, #136]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e032      	b.n	800256a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4916      	ldr	r1, [pc, #88]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800252e:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490e      	ldr	r1, [pc, #56]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002542:	f000 f821 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002546:	4602      	mov	r2, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	490a      	ldr	r1, [pc, #40]	; (800257c <HAL_RCC_ClockConfig+0x1cc>)
 8002554:	5ccb      	ldrb	r3, [r1, r3]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <HAL_RCC_ClockConfig+0x1d0>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800255e:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_ClockConfig+0x1d4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fd40 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023c00 	.word	0x40023c00
 8002578:	40023800 	.word	0x40023800
 800257c:	0800937c 	.word	0x0800937c
 8002580:	20000000 	.word	0x20000000
 8002584:	20000004 	.word	0x20000004

08002588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800258c:	b090      	sub	sp, #64	; 0x40
 800258e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
 8002594:	2300      	movs	r3, #0
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	2300      	movs	r3, #0
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_GetSysClockFreq+0x180>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d00d      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x40>
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	f200 80a1 	bhi.w	80026f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x34>
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d003      	beq.n	80025c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ba:	e09b      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4b53      	ldr	r3, [pc, #332]	; (800270c <HAL_RCC_GetSysClockFreq+0x184>)
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025c0:	e09b      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c2:	4b53      	ldr	r3, [pc, #332]	; (8002710 <HAL_RCC_GetSysClockFreq+0x188>)
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025c6:	e098      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025c8:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80025d2:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <HAL_RCC_GetSysClockFreq+0x180>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d028      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_GetSysClockFreq+0x180>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	099b      	lsrs	r3, r3, #6
 80025e4:	2200      	movs	r2, #0
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	627a      	str	r2, [r7, #36]	; 0x24
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025f0:	2100      	movs	r1, #0
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f4:	fb03 f201 	mul.w	r2, r3, r1
 80025f8:	2300      	movs	r3, #0
 80025fa:	fb00 f303 	mul.w	r3, r0, r3
 80025fe:	4413      	add	r3, r2
 8002600:	4a43      	ldr	r2, [pc, #268]	; (8002710 <HAL_RCC_GetSysClockFreq+0x188>)
 8002602:	fba0 1202 	umull	r1, r2, r0, r2
 8002606:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002608:	460a      	mov	r2, r1
 800260a:	62ba      	str	r2, [r7, #40]	; 0x28
 800260c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260e:	4413      	add	r3, r2
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	2200      	movs	r2, #0
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	61fa      	str	r2, [r7, #28]
 800261a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800261e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002622:	f7fd fe4d 	bl	80002c0 <__aeabi_uldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4613      	mov	r3, r2
 800262c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800262e:	e053      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCC_GetSysClockFreq+0x180>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	099b      	lsrs	r3, r3, #6
 8002636:	2200      	movs	r2, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	617a      	str	r2, [r7, #20]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002642:	f04f 0b00 	mov.w	fp, #0
 8002646:	4652      	mov	r2, sl
 8002648:	465b      	mov	r3, fp
 800264a:	f04f 0000 	mov.w	r0, #0
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	0159      	lsls	r1, r3, #5
 8002654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002658:	0150      	lsls	r0, r2, #5
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	ebb2 080a 	subs.w	r8, r2, sl
 8002662:	eb63 090b 	sbc.w	r9, r3, fp
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002672:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002676:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800267a:	ebb2 0408 	subs.w	r4, r2, r8
 800267e:	eb63 0509 	sbc.w	r5, r3, r9
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	00eb      	lsls	r3, r5, #3
 800268c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002690:	00e2      	lsls	r2, r4, #3
 8002692:	4614      	mov	r4, r2
 8002694:	461d      	mov	r5, r3
 8002696:	eb14 030a 	adds.w	r3, r4, sl
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	eb45 030b 	adc.w	r3, r5, fp
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ae:	4629      	mov	r1, r5
 80026b0:	028b      	lsls	r3, r1, #10
 80026b2:	4621      	mov	r1, r4
 80026b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b8:	4621      	mov	r1, r4
 80026ba:	028a      	lsls	r2, r1, #10
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	2200      	movs	r2, #0
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	60fa      	str	r2, [r7, #12]
 80026c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026cc:	f7fd fdf8 	bl	80002c0 <__aeabi_uldivmod>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4613      	mov	r3, r2
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_GetSysClockFreq+0x180>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	3301      	adds	r3, #1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80026e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026f2:	e002      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetSysClockFreq+0x184>)
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3740      	adds	r7, #64	; 0x40
 8002700:	46bd      	mov	sp, r7
 8002702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	00f42400 	.word	0x00f42400
 8002710:	017d7840 	.word	0x017d7840

08002714 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002718:	4b03      	ldr	r3, [pc, #12]	; (8002728 <HAL_RCC_GetHCLKFreq+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000000 	.word	0x20000000

0800272c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002730:	f7ff fff0 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0a9b      	lsrs	r3, r3, #10
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4903      	ldr	r1, [pc, #12]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	0800938c 	.word	0x0800938c

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002758:	f7ff ffdc 	bl	8002714 <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	0b5b      	lsrs	r3, r3, #13
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4903      	ldr	r1, [pc, #12]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	0800938c 	.word	0x0800938c

0800277c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d012      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027a4:	4b69      	ldr	r3, [pc, #420]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a68      	ldr	r2, [pc, #416]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027ae:	6093      	str	r3, [r2, #8]
 80027b0:	4b66      	ldr	r3, [pc, #408]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	4964      	ldr	r1, [pc, #400]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d017      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027d6:	4b5d      	ldr	r3, [pc, #372]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e4:	4959      	ldr	r1, [pc, #356]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027f4:	d101      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d017      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002812:	4b4e      	ldr	r3, [pc, #312]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	494a      	ldr	r1, [pc, #296]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d101      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800284e:	2301      	movs	r3, #1
 8002850:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 808b 	beq.w	8002976 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	4a39      	ldr	r2, [pc, #228]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286a:	6413      	str	r3, [r2, #64]	; 0x40
 800286c:	4b37      	ldr	r3, [pc, #220]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002878:	4b35      	ldr	r3, [pc, #212]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a34      	ldr	r2, [pc, #208]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002884:	f7fe fbf4 	bl	8001070 <HAL_GetTick>
 8002888:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7fe fbf0 	bl	8001070 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e357      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800289e:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d035      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d02e      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028c8:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028d2:	4b1e      	ldr	r3, [pc, #120]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a1d      	ldr	r2, [pc, #116]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a1a      	ldr	r2, [pc, #104]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d114      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fbb8 	bl	8001070 <HAL_GetTick>
 8002900:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002902:	e00a      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7fe fbb4 	bl	8001070 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e319      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0ee      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002932:	d111      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002942:	400b      	ands	r3, r1
 8002944:	4901      	ldr	r1, [pc, #4]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
 800294a:	e00b      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000
 8002954:	0ffffcff 	.word	0x0ffffcff
 8002958:	4baa      	ldr	r3, [pc, #680]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4aa9      	ldr	r2, [pc, #676]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002962:	6093      	str	r3, [r2, #8]
 8002964:	4ba7      	ldr	r3, [pc, #668]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002966:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	49a4      	ldr	r1, [pc, #656]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002972:	4313      	orrs	r3, r2
 8002974:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	d010      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002982:	4ba0      	ldr	r3, [pc, #640]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002988:	4a9e      	ldr	r2, [pc, #632]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002992:	4b9c      	ldr	r3, [pc, #624]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002994:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	4999      	ldr	r1, [pc, #612]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b0:	4b94      	ldr	r3, [pc, #592]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029be:	4991      	ldr	r1, [pc, #580]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029d2:	4b8c      	ldr	r3, [pc, #560]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029e0:	4988      	ldr	r1, [pc, #544]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029f4:	4b83      	ldr	r3, [pc, #524]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a02:	4980      	ldr	r1, [pc, #512]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a16:	4b7b      	ldr	r3, [pc, #492]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4977      	ldr	r1, [pc, #476]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a38:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	496f      	ldr	r1, [pc, #444]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a5a:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f023 020c 	bic.w	r2, r3, #12
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	4966      	ldr	r1, [pc, #408]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a7c:	4b61      	ldr	r3, [pc, #388]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	495e      	ldr	r1, [pc, #376]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a9e:	4b59      	ldr	r3, [pc, #356]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	4955      	ldr	r1, [pc, #340]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ac0:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	494d      	ldr	r1, [pc, #308]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ae2:	4b48      	ldr	r3, [pc, #288]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	4944      	ldr	r1, [pc, #272]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002b04:	4b3f      	ldr	r3, [pc, #252]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	493c      	ldr	r1, [pc, #240]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b34:	4933      	ldr	r1, [pc, #204]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b48:	4b2e      	ldr	r3, [pc, #184]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b56:	492b      	ldr	r1, [pc, #172]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d011      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b78:	4922      	ldr	r1, [pc, #136]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb8:	4912      	ldr	r1, [pc, #72]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00b      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bdc:	4909      	ldr	r1, [pc, #36]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d006      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80d9 	beq.w	8002daa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a01      	ldr	r2, [pc, #4]	; (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c02:	e001      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fa31 	bl	8001070 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c12:	f7fe fa2d 	bl	8001070 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	; 0x64
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e194      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c24:	4b6c      	ldr	r3, [pc, #432]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1f0      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d021      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d11d      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c44:	4b64      	ldr	r3, [pc, #400]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4a:	0c1b      	lsrs	r3, r3, #16
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c52:	4b61      	ldr	r3, [pc, #388]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c58:	0e1b      	lsrs	r3, r3, #24
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	019a      	lsls	r2, r3, #6
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	061b      	lsls	r3, r3, #24
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	071b      	lsls	r3, r3, #28
 8002c78:	4957      	ldr	r1, [pc, #348]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d02e      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002caa:	d129      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cac:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cba:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc0:	0f1b      	lsrs	r3, r3, #28
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	019a      	lsls	r2, r3, #6
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	041b      	lsls	r3, r3, #16
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	071b      	lsls	r3, r3, #28
 8002ce0:	493d      	ldr	r1, [pc, #244]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cee:	f023 021f 	bic.w	r2, r3, #31
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	4937      	ldr	r1, [pc, #220]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01d      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d12:	0e1b      	lsrs	r3, r3, #24
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d20:	0f1b      	lsrs	r3, r3, #28
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	019a      	lsls	r2, r3, #6
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	431a      	orrs	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	071b      	lsls	r3, r3, #28
 8002d40:	4925      	ldr	r1, [pc, #148]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d011      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	019a      	lsls	r2, r3, #6
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	041b      	lsls	r3, r3, #16
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	061b      	lsls	r3, r3, #24
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	071b      	lsls	r3, r3, #28
 8002d70:	4919      	ldr	r1, [pc, #100]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d84:	f7fe f974 	bl	8001070 <HAL_GetTick>
 8002d88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d8c:	f7fe f970 	bl	8001070 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0d7      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	f040 80cd 	bne.w	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbe:	f7fe f957 	bl	8001070 <HAL_GetTick>
 8002dc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dc6:	f7fe f953 	bl	8001070 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b64      	cmp	r3, #100	; 0x64
 8002dd2:	d903      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0ba      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002dd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ddc:	4b5e      	ldr	r3, [pc, #376]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de8:	d0ed      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d02e      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d12a      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e12:	4b51      	ldr	r3, [pc, #324]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e20:	4b4d      	ldr	r3, [pc, #308]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	0f1b      	lsrs	r3, r3, #28
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	019a      	lsls	r2, r3, #6
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	041b      	lsls	r3, r3, #16
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	061b      	lsls	r3, r3, #24
 8002e40:	431a      	orrs	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	071b      	lsls	r3, r3, #28
 8002e46:	4944      	ldr	r1, [pc, #272]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e4e:	4b42      	ldr	r3, [pc, #264]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	021b      	lsls	r3, r3, #8
 8002e60:	493d      	ldr	r1, [pc, #244]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d022      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7c:	d11d      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e84:	0e1b      	lsrs	r3, r3, #24
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	0f1b      	lsrs	r3, r3, #28
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	019a      	lsls	r2, r3, #6
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	071b      	lsls	r3, r3, #28
 8002eb2:	4929      	ldr	r1, [pc, #164]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d028      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ec6:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	0e1b      	lsrs	r3, r3, #24
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ed4:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	0c1b      	lsrs	r3, r3, #16
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	019a      	lsls	r2, r3, #6
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	041b      	lsls	r3, r3, #16
 8002eec:	431a      	orrs	r2, r3
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	071b      	lsls	r3, r3, #28
 8002efa:	4917      	ldr	r1, [pc, #92]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	4911      	ldr	r1, [pc, #68]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f24:	f7fe f8a4 	bl	8001070 <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f2c:	f7fe f8a0 	bl	8001070 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e007      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f4a:	d1ef      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e022      	b.n	8002fb4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fd fdab 	bl	8000adc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2203      	movs	r2, #3
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f814 	bl	8002fbc <HAL_SD_InitCard>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00a      	b.n	8002fb4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002fbc:	b5b0      	push	{r4, r5, r7, lr}
 8002fbe:	b08e      	sub	sp, #56	; 0x38
 8002fc0:	af04      	add	r7, sp, #16
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002fd8:	2376      	movs	r3, #118	; 0x76
 8002fda:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681d      	ldr	r5, [r3, #0]
 8002fe0:	466c      	mov	r4, sp
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002fea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fee:	f107 0308 	add.w	r3, r7, #8
 8002ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f001 ff29 	bl	8004e4c <SDMMC_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e059      	b.n	80030c0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800301a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f001 ff5d 	bl	8004ee0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003034:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003036:	2002      	movs	r0, #2
 8003038:	f7fe f826 	bl	8001088 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fff3 	bl	8004028 <SD_PowerON>
 8003042:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e02e      	b.n	80030c0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 ff12 	bl	8003e8c <SD_InitCard>
 8003068:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e01b      	b.n	80030c0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003090:	4618      	mov	r0, r3
 8003092:	f001 ffb7 	bl	8005004 <SDMMC_CmdBlockLength>
 8003096:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00f      	beq.n	80030be <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_SD_InitCard+0x10c>)
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3728      	adds	r7, #40	; 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bdb0      	pop	{r4, r5, r7, pc}
 80030c8:	004005ff 	.word	0x004005ff

080030cc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08c      	sub	sp, #48	; 0x30
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0c3      	b.n	800327c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 80bc 	bne.w	800327a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	441a      	add	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	429a      	cmp	r2, r3
 8003114:	d907      	bls.n	8003126 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0aa      	b.n	800327c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2203      	movs	r2, #3
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003144:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a4e      	ldr	r2, [pc, #312]	; (8003284 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800314c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a4d      	ldr	r2, [pc, #308]	; (8003288 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003154:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	2200      	movs	r2, #0
 800315c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3380      	adds	r3, #128	; 0x80
 800318c:	4619      	mov	r1, r3
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	025b      	lsls	r3, r3, #9
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	f7fe f95b 	bl	8001450 <HAL_DMA_Start_IT>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d017      	beq.n	80031d0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80031ae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e055      	b.n	800327c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0208 	orr.w	r2, r2, #8
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d002      	beq.n	80031ee <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	025b      	lsls	r3, r3, #9
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	025b      	lsls	r3, r3, #9
 80031f8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80031fa:	2390      	movs	r3, #144	; 0x90
 80031fc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80031fe:	2302      	movs	r3, #2
 8003200:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f107 0210 	add.w	r2, r7, #16
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f001 fec9 	bl	8004fac <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d90a      	bls.n	8003236 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2282      	movs	r2, #130	; 0x82
 8003224:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800322c:	4618      	mov	r0, r3
 800322e:	f001 ff2d 	bl	800508c <SDMMC_CmdReadMultiBlock>
 8003232:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003234:	e009      	b.n	800324a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2281      	movs	r2, #129	; 0x81
 800323a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003242:	4618      	mov	r0, r3
 8003244:	f001 ff00 	bl	8005048 <SDMMC_CmdReadSingleBlock>
 8003248:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003256:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	431a      	orrs	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e002      	b.n	800327c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800327a:	2302      	movs	r3, #2
  }
}
 800327c:	4618      	mov	r0, r3
 800327e:	3730      	adds	r7, #48	; 0x30
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	08003c9b 	.word	0x08003c9b
 8003288:	08003d0d 	.word	0x08003d0d
 800328c:	004005ff 	.word	0x004005ff

08003290 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08c      	sub	sp, #48	; 0x30
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d107      	bne.n	80032b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0c6      	b.n	8003446 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f040 80bf 	bne.w	8003444 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80032cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	441a      	add	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d907      	bls.n	80032ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0ad      	b.n	8003446 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2203      	movs	r2, #3
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 021a 	orr.w	r2, r2, #26
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	4a50      	ldr	r2, [pc, #320]	; (8003450 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	4a4f      	ldr	r2, [pc, #316]	; (8003454 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003318:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	2200      	movs	r2, #0
 8003320:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	2b01      	cmp	r3, #1
 8003328:	d002      	beq.n	8003330 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	025b      	lsls	r3, r3, #9
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d90a      	bls.n	800334c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	22a0      	movs	r2, #160	; 0xa0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003342:	4618      	mov	r0, r3
 8003344:	f001 fee6 	bl	8005114 <SDMMC_CmdWriteMultiBlock>
 8003348:	62f8      	str	r0, [r7, #44]	; 0x2c
 800334a:	e009      	b.n	8003360 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2290      	movs	r2, #144	; 0x90
 8003350:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003358:	4618      	mov	r0, r3
 800335a:	f001 feb9 	bl	80050d0 <SDMMC_CmdWriteSingleBlock>
 800335e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a3b      	ldr	r2, [pc, #236]	; (8003458 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e05c      	b.n	8003446 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0208 	orr.w	r2, r2, #8
 800339a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	2240      	movs	r2, #64	; 0x40
 80033a2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3380      	adds	r3, #128	; 0x80
 80033cc:	461a      	mov	r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	025b      	lsls	r3, r3, #9
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	f7fe f83c 	bl	8001450 <HAL_DMA_Start_IT>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01a      	beq.n	8003414 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 021a 	bic.w	r2, r2, #26
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a19      	ldr	r2, [pc, #100]	; (8003458 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e018      	b.n	8003446 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003414:	f04f 33ff 	mov.w	r3, #4294967295
 8003418:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	025b      	lsls	r3, r3, #9
 800341e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003420:	2390      	movs	r3, #144	; 0x90
 8003422:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003428:	2300      	movs	r3, #0
 800342a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800342c:	2301      	movs	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f107 0210 	add.w	r2, r7, #16
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fdb6 	bl	8004fac <SDMMC_ConfigData>

      return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3730      	adds	r7, #48	; 0x30
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	08003c71 	.word	0x08003c71
 8003454:	08003d0d 	.word	0x08003d0d
 8003458:	004005ff 	.word	0x004005ff

0800345c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_SD_IRQHandler+0x2e>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 ffef 	bl	8004466 <SD_Read_IT>
 8003488:	e15a      	b.n	8003740 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 808d 	beq.w	80035b4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b9a      	ldr	r3, [pc, #616]	; (8003718 <HAL_SD_IRQHandler+0x2bc>)
 80034b0:	400b      	ands	r3, r1
 80034b2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d039      	beq.n	8003542 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <HAL_SD_IRQHandler+0x86>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d011      	beq.n	8003506 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 fe36 	bl	8005158 <SDMMC_CmdStopTransfer>
 80034ec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f921 	bl	8003748 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f240 523a 	movw	r2, #1338	; 0x53a
 800350e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d104      	bne.n	8003532 <HAL_SD_IRQHandler+0xd6>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f002 faa6 	bl	8005a84 <HAL_SD_RxCpltCallback>
 8003538:	e102      	b.n	8003740 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f002 fa98 	bl	8005a70 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003540:	e0fe      	b.n	8003740 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80f9 	beq.w	8003740 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d011      	beq.n	800357c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fdfb 	bl	8005158 <SDMMC_CmdStopTransfer>
 8003562:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f8e6 	bl	8003748 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	f040 80dc 	bne.w	8003740 <HAL_SD_IRQHandler+0x2e4>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 80d6 	bne.w	8003740 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0208 	bic.w	r2, r2, #8
 80035a2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f002 fa5f 	bl	8005a70 <HAL_SD_TxCpltCallback>
}
 80035b2:	e0c5      	b.n	8003740 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_SD_IRQHandler+0x178>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 ff9b 	bl	8004508 <SD_Write_IT>
 80035d2:	e0b5      	b.n	8003740 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80ae 	beq.w	8003740 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	f043 0202 	orr.w	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f043 0208 	orr.w	r2, r3, #8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	f043 0210 	orr.w	r2, r3, #16
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f240 523a 	movw	r2, #1338	; 0x53a
 8003654:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003664:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fd74 	bl	8005158 <SDMMC_CmdStopTransfer>
 8003670:	4602      	mov	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f857 	bl	8003748 <HAL_SD_ErrorCallback>
}
 800369a:	e051      	b.n	8003740 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d04c      	beq.n	8003740 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_SD_IRQHandler+0x25e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d011      	beq.n	80036de <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	4a17      	ldr	r2, [pc, #92]	; (800371c <HAL_SD_IRQHandler+0x2c0>)
 80036c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd ff22 	bl	8001510 <HAL_DMA_Abort_IT>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d036      	beq.n	8003740 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fb6a 	bl	8003db0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80036dc:	e030      	b.n	8003740 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_SD_IRQHandler+0x296>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d018      	beq.n	8003724 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <HAL_SD_IRQHandler+0x2c4>)
 80036f8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd ff06 	bl	8001510 <HAL_DMA_Abort_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d01a      	beq.n	8003740 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fb85 	bl	8003e1e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003714:	e014      	b.n	8003740 <HAL_SD_IRQHandler+0x2e4>
 8003716:	bf00      	nop
 8003718:	ffff3ec5 	.word	0xffff3ec5
 800371c:	08003db1 	.word	0x08003db1
 8003720:	08003e1f 	.word	0x08003e1f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f002 f98f 	bl	8005a5c <HAL_SD_AbortCallback>
}
 800373e:	e7ff      	b.n	8003740 <HAL_SD_IRQHandler+0x2e4>
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376a:	0f9b      	lsrs	r3, r3, #30
 800376c:	b2da      	uxtb	r2, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003776:	0e9b      	lsrs	r3, r3, #26
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	b2da      	uxtb	r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003788:	0e1b      	lsrs	r3, r3, #24
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	b2da      	uxtb	r2, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	b2da      	uxtb	r2, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037bc:	0d1b      	lsrs	r3, r3, #20
 80037be:	b29a      	uxth	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037c8:	0c1b      	lsrs	r3, r3, #16
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037da:	0bdb      	lsrs	r3, r3, #15
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ec:	0b9b      	lsrs	r3, r3, #14
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fe:	0b5b      	lsrs	r3, r3, #13
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	b2da      	uxtb	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003810:	0b1b      	lsrs	r3, r3, #12
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	b2da      	uxtb	r2, r3
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	2b00      	cmp	r3, #0
 800382a:	d163      	bne.n	80038f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003830:	009a      	lsls	r2, r3, #2
 8003832:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003836:	4013      	ands	r3, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800383c:	0f92      	lsrs	r2, r2, #30
 800383e:	431a      	orrs	r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003848:	0edb      	lsrs	r3, r3, #27
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	b2da      	uxtb	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800385a:	0e1b      	lsrs	r3, r3, #24
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	b2da      	uxtb	r2, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386c:	0d5b      	lsrs	r3, r3, #21
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	b2da      	uxtb	r2, r3
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387e:	0c9b      	lsrs	r3, r3, #18
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	b2da      	uxtb	r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003890:	0bdb      	lsrs	r3, r3, #15
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	b2da      	uxtb	r2, r3
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	7e1b      	ldrb	r3, [r3, #24]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	3302      	adds	r3, #2
 80038b4:	2201      	movs	r2, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80038be:	fb03 f202 	mul.w	r2, r3, r2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	7a1b      	ldrb	r3, [r3, #8]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80038e0:	0a52      	lsrs	r2, r2, #9
 80038e2:	fb03 f202 	mul.w	r2, r3, r2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60
 80038f2:	e031      	b.n	8003958 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d11d      	bne.n	8003938 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	431a      	orrs	r2, r3
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	3301      	adds	r3, #1
 8003918:	029a      	lsls	r2, r3, #10
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	661a      	str	r2, [r3, #96]	; 0x60
 8003936:	e00f      	b.n	8003958 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a58      	ldr	r2, [pc, #352]	; (8003aa0 <HAL_SD_GetCardCSD+0x344>)
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e09d      	b.n	8003a94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395c:	0b9b      	lsrs	r3, r3, #14
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	b2da      	uxtb	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396e:	09db      	lsrs	r3, r3, #7
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003976:	b2da      	uxtb	r2, r3
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003980:	b2db      	uxtb	r3, r3
 8003982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003986:	b2da      	uxtb	r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	0fdb      	lsrs	r3, r3, #31
 8003992:	b2da      	uxtb	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	0f5b      	lsrs	r3, r3, #29
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ae:	0e9b      	lsrs	r3, r3, #26
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	0d9b      	lsrs	r3, r3, #22
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	0d5b      	lsrs	r3, r3, #21
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	0bdb      	lsrs	r3, r3, #15
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	0b9b      	lsrs	r3, r3, #14
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	0b5b      	lsrs	r3, r3, #13
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	0b1b      	lsrs	r3, r3, #12
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	0a9b      	lsrs	r3, r3, #10
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	004005ff 	.word	0x004005ff

08003aa4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003afc:	b5b0      	push	{r4, r5, r7, lr}
 8003afe:	b08e      	sub	sp, #56	; 0x38
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d02e      	beq.n	8003b7a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b22:	d106      	bne.n	8003b32 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
 8003b30:	e029      	b.n	8003b86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b38:	d10a      	bne.n	8003b50 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fb2a 	bl	8004194 <SD_WideBus_Enable>
 8003b40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b4e:	e01a      	b.n	8003b86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fb67 	bl	800422a <SD_WideBus_Disable>
 8003b5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
 8003b6a:	e00c      	b.n	8003b86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
 8003b78:	e005      	b.n	8003b86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003ba4:	e01f      	b.n	8003be6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681d      	ldr	r5, [r3, #0]
 8003bcc:	466c      	mov	r4, sp
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003bda:	f107 0308 	add.w	r3, r7, #8
 8003bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be0:	4628      	mov	r0, r5
 8003be2:	f001 f933 	bl	8004e4c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f001 fa08 	bl	8005004 <SDMMC_CmdBlockLength>
 8003bf4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00c      	beq.n	8003c16 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3728      	adds	r7, #40	; 0x28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bdb0      	pop	{r4, r5, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	004005ff 	.word	0x004005ff

08003c30 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa7e 	bl	8004144 <SD_SendStatus>
 8003c48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	0a5b      	lsrs	r3, r3, #9
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003c66:	693b      	ldr	r3, [r7, #16]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	2b82      	cmp	r3, #130	; 0x82
 8003cae:	d111      	bne.n	8003cd4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 fa4f 	bl	8005158 <SDMMC_CmdStopTransfer>
 8003cba:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff fd3a 	bl	8003748 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0208 	bic.w	r2, r2, #8
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f001 fec1 	bl	8005a84 <HAL_SD_RxCpltCallback>
#endif
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd fda4 	bl	8001868 <HAL_DMA_GetError>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d03e      	beq.n	8003da4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d002      	beq.n	8003d42 <SD_DMAError+0x36>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d12d      	bne.n	8003d9e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a19      	ldr	r2, [pc, #100]	; (8003dac <SD_DMAError+0xa0>)
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003d58:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003d66:	6978      	ldr	r0, [r7, #20]
 8003d68:	f7ff ff62 	bl	8003c30 <HAL_SD_GetCardState>
 8003d6c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b06      	cmp	r3, #6
 8003d72:	d002      	beq.n	8003d7a <SD_DMAError+0x6e>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d10a      	bne.n	8003d90 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 f9ea 	bl	8005158 <SDMMC_CmdStopTransfer>
 8003d84:	4602      	mov	r2, r0
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003d9e:	6978      	ldr	r0, [r7, #20]
 8003da0:	f7ff fcd2 	bl	8003748 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003da4:	bf00      	nop
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	004005ff 	.word	0x004005ff

08003db0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff ff31 	bl	8003c30 <HAL_SD_GetCardState>
 8003dce:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d002      	beq.n	8003dea <SD_DMATxAbort+0x3a>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d10a      	bne.n	8003e00 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f001 f9b2 	bl	8005158 <SDMMC_CmdStopTransfer>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f001 fe27 	bl	8005a5c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003e0e:	e002      	b.n	8003e16 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fc99 	bl	8003748 <HAL_SD_ErrorCallback>
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f7ff fefa 	bl	8003c30 <HAL_SD_GetCardState>
 8003e3c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d002      	beq.n	8003e58 <SD_DMARxAbort+0x3a>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d10a      	bne.n	8003e6e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 f97b 	bl	8005158 <SDMMC_CmdStopTransfer>
 8003e62:	4602      	mov	r2, r0
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f001 fdf0 	bl	8005a5c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003e7c:	e002      	b.n	8003e84 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff fc62 	bl	8003748 <HAL_SD_ErrorCallback>
}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003e8c:	b5b0      	push	{r4, r5, r7, lr}
 8003e8e:	b094      	sub	sp, #80	; 0x50
 8003e90:	af04      	add	r7, sp, #16
 8003e92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003e94:	2301      	movs	r3, #1
 8003e96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f001 f82d 	bl	8004efc <SDMMC_GetPowerState>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ea8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003eac:	e0b8      	b.n	8004020 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d02f      	beq.n	8003f16 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 fa57 	bl	800536e <SDMMC_CmdSendCID>
 8003ec0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <SD_InitCard+0x40>
    {
      return errorstate;
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	e0a9      	b.n	8004020 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 f857 	bl	8004f86 <SDMMC_GetResponse>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2104      	movs	r1, #4
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 f84e 	bl	8004f86 <SDMMC_GetResponse>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2108      	movs	r1, #8
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f845 	bl	8004f86 <SDMMC_GetResponse>
 8003efc:	4602      	mov	r2, r0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	210c      	movs	r1, #12
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 f83c 	bl	8004f86 <SDMMC_GetResponse>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d00d      	beq.n	8003f3a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f107 020e 	add.w	r2, r7, #14
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 fa5d 	bl	80053e8 <SDMMC_CmdSetRelAdd>
 8003f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <SD_InitCard+0xae>
    {
      return errorstate;
 8003f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f38:	e072      	b.n	8004020 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d036      	beq.n	8003fb0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003f42:	89fb      	ldrh	r3, [r7, #14]
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	4619      	mov	r1, r3
 8003f56:	4610      	mov	r0, r2
 8003f58:	f001 fa27 	bl	80053aa <SDMMC_CmdSendCSD>
 8003f5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f66:	e05b      	b.n	8004020 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 f809 	bl	8004f86 <SDMMC_GetResponse>
 8003f74:	4602      	mov	r2, r0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2104      	movs	r1, #4
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 f800 	bl	8004f86 <SDMMC_GetResponse>
 8003f86:	4602      	mov	r2, r0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2108      	movs	r1, #8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fff7 	bl	8004f86 <SDMMC_GetResponse>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	210c      	movs	r1, #12
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 ffee 	bl	8004f86 <SDMMC_GetResponse>
 8003faa:	4602      	mov	r2, r0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 ffe5 	bl	8004f86 <SDMMC_GetResponse>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	0d1a      	lsrs	r2, r3, #20
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003fc4:	f107 0310 	add.w	r3, r7, #16
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff fbc6 	bl	800375c <HAL_SD_GetCardCSD>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003fd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003fda:	e021      	b.n	8004020 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6819      	ldr	r1, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	461c      	mov	r4, r3
 8003fea:	4615      	mov	r5, r2
 8003fec:	4622      	mov	r2, r4
 8003fee:	462b      	mov	r3, r5
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	f001 f8d3 	bl	800519c <SDMMC_CmdSelDesel>
 8003ff6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <SD_InitCard+0x176>
  {
    return errorstate;
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004000:	e00e      	b.n	8004020 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681d      	ldr	r5, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	466c      	mov	r4, sp
 800400a:	f103 0210 	add.w	r2, r3, #16
 800400e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004014:	3304      	adds	r3, #4
 8004016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004018:	4628      	mov	r0, r5
 800401a:	f000 ff17 	bl	8004e4c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3740      	adds	r7, #64	; 0x40
 8004024:	46bd      	mov	sp, r7
 8004026:	bdb0      	pop	{r4, r5, r7, pc}

08004028 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f001 f8ce 	bl	80051e2 <SDMMC_CmdGoIdleState>
 8004046:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <SD_PowerON+0x2a>
  {
    return errorstate;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	e072      	b.n	8004138 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f001 f8e1 	bl	800521e <SDMMC_CmdOperCond>
 800405c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00d      	beq.n	8004080 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f001 f8b7 	bl	80051e2 <SDMMC_CmdGoIdleState>
 8004074:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <SD_PowerON+0x5e>
    {
      return errorstate;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	e05b      	b.n	8004138 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408a:	2b01      	cmp	r3, #1
 800408c:	d137      	bne.n	80040fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f001 f8e1 	bl	800525c <SDMMC_CmdAppCommand>
 800409a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02d      	beq.n	80040fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040a6:	e047      	b.n	8004138 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f8d4 	bl	800525c <SDMMC_CmdAppCommand>
 80040b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	e03b      	b.n	8004138 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	491e      	ldr	r1, [pc, #120]	; (8004140 <SD_PowerON+0x118>)
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 f8ea 	bl	80052a0 <SDMMC_CmdAppOperCommand>
 80040cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040d8:	e02e      	b.n	8004138 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 ff50 	bl	8004f86 <SDMMC_GetResponse>
 80040e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	0fdb      	lsrs	r3, r3, #31
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <SD_PowerON+0xcc>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <SD_PowerON+0xce>
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]

    count++;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	3301      	adds	r3, #1
 80040fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004104:	4293      	cmp	r3, r2
 8004106:	d802      	bhi.n	800410e <SD_PowerON+0xe6>
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0cc      	beq.n	80040a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004114:	4293      	cmp	r3, r2
 8004116:	d902      	bls.n	800411e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800411c:	e00c      	b.n	8004138 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
 800412e:	e002      	b.n	8004136 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	c1100000 	.word	0xc1100000

08004144 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d102      	bne.n	800415a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004158:	e018      	b.n	800418c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f001 f95f 	bl	800542a <SDMMC_CmdSendStatus>
 800416c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	e009      	b.n	800418c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f000 ff01 	bl	8004f86 <SDMMC_GetResponse>
 8004184:	4602      	mov	r2, r0
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 feeb 	bl	8004f86 <SDMMC_GetResponse>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ba:	d102      	bne.n	80041c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80041bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041c0:	e02f      	b.n	8004222 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	4619      	mov	r1, r3
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f879 	bl	80042c0 <SD_FindSCR>
 80041ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	e023      	b.n	8004222 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01c      	beq.n	800421e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ec:	041b      	lsls	r3, r3, #16
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f001 f833 	bl	800525c <SDMMC_CmdAppCommand>
 80041f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	e00f      	b.n	8004222 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2102      	movs	r1, #2
 8004208:	4618      	mov	r0, r3
 800420a:	f001 f86d 	bl	80052e8 <SDMMC_CmdBusWidth>
 800420e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	e003      	b.n	8004222 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800421a:	2300      	movs	r3, #0
 800421c:	e001      	b.n	8004222 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800421e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b086      	sub	sp, #24
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fea0 	bl	8004f86 <SDMMC_GetResponse>
 8004246:	4603      	mov	r3, r0
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004250:	d102      	bne.n	8004258 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004256:	e02f      	b.n	80042b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004258:	f107 030c 	add.w	r3, r7, #12
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f82e 	bl	80042c0 <SD_FindSCR>
 8004264:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	e023      	b.n	80042b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01c      	beq.n	80042b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f000 ffe8 	bl	800525c <SDMMC_CmdAppCommand>
 800428c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	e00f      	b.n	80042b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 f822 	bl	80052e8 <SDMMC_CmdBusWidth>
 80042a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	e003      	b.n	80042b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e001      	b.n	80042b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80042b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b08f      	sub	sp, #60	; 0x3c
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80042ca:	f7fc fed1 	bl	8001070 <HAL_GetTick>
 80042ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2108      	movs	r1, #8
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fe8c 	bl	8005004 <SDMMC_CmdBlockLength>
 80042ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	e0b2      	b.n	800445e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f000 ffa9 	bl	800525c <SDMMC_CmdAppCommand>
 800430a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	e0a3      	b.n	800445e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004316:	f04f 33ff 	mov.w	r3, #4294967295
 800431a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800431c:	2308      	movs	r3, #8
 800431e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004320:	2330      	movs	r3, #48	; 0x30
 8004322:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004324:	2302      	movs	r3, #2
 8004326:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004328:	2300      	movs	r3, #0
 800432a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800432c:	2301      	movs	r3, #1
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f107 0210 	add.w	r2, r7, #16
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fe36 	bl	8004fac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fff1 	bl	800532c <SDMMC_CmdSendSCR>
 800434a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02a      	beq.n	80043a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	e083      	b.n	800445e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00f      	beq.n	8004384 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6819      	ldr	r1, [r3, #0]
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	f107 0208 	add.w	r2, r7, #8
 8004370:	18d4      	adds	r4, r2, r3
 8004372:	4608      	mov	r0, r1
 8004374:	f000 fd96 	bl	8004ea4 <SDMMC_ReadFIFO>
 8004378:	4603      	mov	r3, r0
 800437a:	6023      	str	r3, [r4, #0]
      index++;
 800437c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437e:	3301      	adds	r3, #1
 8004380:	637b      	str	r3, [r7, #52]	; 0x34
 8004382:	e006      	b.n	8004392 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d012      	beq.n	80043b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004392:	f7fc fe6d 	bl	8001070 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d102      	bne.n	80043a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80043a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043a6:	e05a      	b.n	800445e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ae:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0cf      	beq.n	8004356 <SD_FindSCR+0x96>
 80043b6:	e000      	b.n	80043ba <SD_FindSCR+0xfa>
      break;
 80043b8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2208      	movs	r2, #8
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80043d0:	2308      	movs	r3, #8
 80043d2:	e044      	b.n	800445e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2202      	movs	r2, #2
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80043ea:	2302      	movs	r3, #2
 80043ec:	e037      	b.n	800445e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2220      	movs	r2, #32
 8004402:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004404:	2320      	movs	r3, #32
 8004406:	e02a      	b.n	800445e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004410:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	061a      	lsls	r2, r3, #24
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800441e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004428:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	0e1b      	lsrs	r3, r3, #24
 800442e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	601a      	str	r2, [r3, #0]
    scr++;
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	3304      	adds	r3, #4
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	061a      	lsls	r2, r3, #24
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004446:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004450:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	0e1b      	lsrs	r3, r3, #24
 8004456:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	373c      	adds	r7, #60	; 0x3c
 8004462:	46bd      	mov	sp, r7
 8004464:	bd90      	pop	{r4, r7, pc}

08004466 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b086      	sub	sp, #24
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d03f      	beq.n	8004500 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e033      	b.n	80044ee <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fd0a 	bl	8004ea4 <SDMMC_ReadFIFO>
 8004490:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	701a      	strb	r2, [r3, #0]
      tmp++;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3301      	adds	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	0a1b      	lsrs	r3, r3, #8
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	3301      	adds	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3301      	adds	r3, #1
 80044ca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3301      	adds	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	3301      	adds	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b07      	cmp	r3, #7
 80044f2:	d9c8      	bls.n	8004486 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004500:	bf00      	nop
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d043      	beq.n	80045aa <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e037      	b.n	8004598 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3301      	adds	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	3b01      	subs	r3, #1
 8004538:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4313      	orrs	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3301      	adds	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	3b01      	subs	r3, #1
 8004550:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	041a      	lsls	r2, r3, #16
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4313      	orrs	r3, r2
 800455c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3301      	adds	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	3b01      	subs	r3, #1
 8004568:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	061a      	lsls	r2, r3, #24
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3301      	adds	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	3b01      	subs	r3, #1
 8004580:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f107 0208 	add.w	r2, r7, #8
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fc96 	bl	8004ebe <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	3301      	adds	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b07      	cmp	r3, #7
 800459c:	d9c4      	bls.n	8004528 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80045aa:	bf00      	nop
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e040      	b.n	8004646 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7fc fc73 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2224      	movs	r2, #36	; 0x24
 80045de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f82d 	bl	8004650 <UART_SetConfig>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e022      	b.n	8004646 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fa85 	bl	8004b18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800461c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800462c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fb0c 	bl	8004c5c <UART_CheckIdleState>
 8004644:	4603      	mov	r3, r0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4ba6      	ldr	r3, [pc, #664]	; (8004914 <UART_SetConfig+0x2c4>)
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	6979      	ldr	r1, [r7, #20]
 8004684:	430b      	orrs	r3, r1
 8004686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	430a      	orrs	r2, r1
 80046c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a94      	ldr	r2, [pc, #592]	; (8004918 <UART_SetConfig+0x2c8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d120      	bne.n	800470e <UART_SetConfig+0xbe>
 80046cc:	4b93      	ldr	r3, [pc, #588]	; (800491c <UART_SetConfig+0x2cc>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d816      	bhi.n	8004708 <UART_SetConfig+0xb8>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <UART_SetConfig+0x90>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	080046fd 	.word	0x080046fd
 80046e8:	080046f7 	.word	0x080046f7
 80046ec:	08004703 	.word	0x08004703
 80046f0:	2301      	movs	r3, #1
 80046f2:	77fb      	strb	r3, [r7, #31]
 80046f4:	e150      	b.n	8004998 <UART_SetConfig+0x348>
 80046f6:	2302      	movs	r3, #2
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e14d      	b.n	8004998 <UART_SetConfig+0x348>
 80046fc:	2304      	movs	r3, #4
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e14a      	b.n	8004998 <UART_SetConfig+0x348>
 8004702:	2308      	movs	r3, #8
 8004704:	77fb      	strb	r3, [r7, #31]
 8004706:	e147      	b.n	8004998 <UART_SetConfig+0x348>
 8004708:	2310      	movs	r3, #16
 800470a:	77fb      	strb	r3, [r7, #31]
 800470c:	e144      	b.n	8004998 <UART_SetConfig+0x348>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a83      	ldr	r2, [pc, #524]	; (8004920 <UART_SetConfig+0x2d0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d132      	bne.n	800477e <UART_SetConfig+0x12e>
 8004718:	4b80      	ldr	r3, [pc, #512]	; (800491c <UART_SetConfig+0x2cc>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d828      	bhi.n	8004778 <UART_SetConfig+0x128>
 8004726:	a201      	add	r2, pc, #4	; (adr r2, 800472c <UART_SetConfig+0xdc>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	08004761 	.word	0x08004761
 8004730:	08004779 	.word	0x08004779
 8004734:	08004779 	.word	0x08004779
 8004738:	08004779 	.word	0x08004779
 800473c:	0800476d 	.word	0x0800476d
 8004740:	08004779 	.word	0x08004779
 8004744:	08004779 	.word	0x08004779
 8004748:	08004779 	.word	0x08004779
 800474c:	08004767 	.word	0x08004767
 8004750:	08004779 	.word	0x08004779
 8004754:	08004779 	.word	0x08004779
 8004758:	08004779 	.word	0x08004779
 800475c:	08004773 	.word	0x08004773
 8004760:	2300      	movs	r3, #0
 8004762:	77fb      	strb	r3, [r7, #31]
 8004764:	e118      	b.n	8004998 <UART_SetConfig+0x348>
 8004766:	2302      	movs	r3, #2
 8004768:	77fb      	strb	r3, [r7, #31]
 800476a:	e115      	b.n	8004998 <UART_SetConfig+0x348>
 800476c:	2304      	movs	r3, #4
 800476e:	77fb      	strb	r3, [r7, #31]
 8004770:	e112      	b.n	8004998 <UART_SetConfig+0x348>
 8004772:	2308      	movs	r3, #8
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e10f      	b.n	8004998 <UART_SetConfig+0x348>
 8004778:	2310      	movs	r3, #16
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e10c      	b.n	8004998 <UART_SetConfig+0x348>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a68      	ldr	r2, [pc, #416]	; (8004924 <UART_SetConfig+0x2d4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d120      	bne.n	80047ca <UART_SetConfig+0x17a>
 8004788:	4b64      	ldr	r3, [pc, #400]	; (800491c <UART_SetConfig+0x2cc>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004792:	2b30      	cmp	r3, #48	; 0x30
 8004794:	d013      	beq.n	80047be <UART_SetConfig+0x16e>
 8004796:	2b30      	cmp	r3, #48	; 0x30
 8004798:	d814      	bhi.n	80047c4 <UART_SetConfig+0x174>
 800479a:	2b20      	cmp	r3, #32
 800479c:	d009      	beq.n	80047b2 <UART_SetConfig+0x162>
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d810      	bhi.n	80047c4 <UART_SetConfig+0x174>
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <UART_SetConfig+0x15c>
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d006      	beq.n	80047b8 <UART_SetConfig+0x168>
 80047aa:	e00b      	b.n	80047c4 <UART_SetConfig+0x174>
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e0f2      	b.n	8004998 <UART_SetConfig+0x348>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e0ef      	b.n	8004998 <UART_SetConfig+0x348>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e0ec      	b.n	8004998 <UART_SetConfig+0x348>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e0e9      	b.n	8004998 <UART_SetConfig+0x348>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e0e6      	b.n	8004998 <UART_SetConfig+0x348>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a56      	ldr	r2, [pc, #344]	; (8004928 <UART_SetConfig+0x2d8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d120      	bne.n	8004816 <UART_SetConfig+0x1c6>
 80047d4:	4b51      	ldr	r3, [pc, #324]	; (800491c <UART_SetConfig+0x2cc>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047de:	2bc0      	cmp	r3, #192	; 0xc0
 80047e0:	d013      	beq.n	800480a <UART_SetConfig+0x1ba>
 80047e2:	2bc0      	cmp	r3, #192	; 0xc0
 80047e4:	d814      	bhi.n	8004810 <UART_SetConfig+0x1c0>
 80047e6:	2b80      	cmp	r3, #128	; 0x80
 80047e8:	d009      	beq.n	80047fe <UART_SetConfig+0x1ae>
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d810      	bhi.n	8004810 <UART_SetConfig+0x1c0>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <UART_SetConfig+0x1a8>
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d006      	beq.n	8004804 <UART_SetConfig+0x1b4>
 80047f6:	e00b      	b.n	8004810 <UART_SetConfig+0x1c0>
 80047f8:	2300      	movs	r3, #0
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e0cc      	b.n	8004998 <UART_SetConfig+0x348>
 80047fe:	2302      	movs	r3, #2
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e0c9      	b.n	8004998 <UART_SetConfig+0x348>
 8004804:	2304      	movs	r3, #4
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e0c6      	b.n	8004998 <UART_SetConfig+0x348>
 800480a:	2308      	movs	r3, #8
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e0c3      	b.n	8004998 <UART_SetConfig+0x348>
 8004810:	2310      	movs	r3, #16
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e0c0      	b.n	8004998 <UART_SetConfig+0x348>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a44      	ldr	r2, [pc, #272]	; (800492c <UART_SetConfig+0x2dc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d125      	bne.n	800486c <UART_SetConfig+0x21c>
 8004820:	4b3e      	ldr	r3, [pc, #248]	; (800491c <UART_SetConfig+0x2cc>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800482e:	d017      	beq.n	8004860 <UART_SetConfig+0x210>
 8004830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004834:	d817      	bhi.n	8004866 <UART_SetConfig+0x216>
 8004836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483a:	d00b      	beq.n	8004854 <UART_SetConfig+0x204>
 800483c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004840:	d811      	bhi.n	8004866 <UART_SetConfig+0x216>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <UART_SetConfig+0x1fe>
 8004846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484a:	d006      	beq.n	800485a <UART_SetConfig+0x20a>
 800484c:	e00b      	b.n	8004866 <UART_SetConfig+0x216>
 800484e:	2300      	movs	r3, #0
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	e0a1      	b.n	8004998 <UART_SetConfig+0x348>
 8004854:	2302      	movs	r3, #2
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e09e      	b.n	8004998 <UART_SetConfig+0x348>
 800485a:	2304      	movs	r3, #4
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e09b      	b.n	8004998 <UART_SetConfig+0x348>
 8004860:	2308      	movs	r3, #8
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e098      	b.n	8004998 <UART_SetConfig+0x348>
 8004866:	2310      	movs	r3, #16
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e095      	b.n	8004998 <UART_SetConfig+0x348>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a2f      	ldr	r2, [pc, #188]	; (8004930 <UART_SetConfig+0x2e0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d125      	bne.n	80048c2 <UART_SetConfig+0x272>
 8004876:	4b29      	ldr	r3, [pc, #164]	; (800491c <UART_SetConfig+0x2cc>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004884:	d017      	beq.n	80048b6 <UART_SetConfig+0x266>
 8004886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800488a:	d817      	bhi.n	80048bc <UART_SetConfig+0x26c>
 800488c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004890:	d00b      	beq.n	80048aa <UART_SetConfig+0x25a>
 8004892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004896:	d811      	bhi.n	80048bc <UART_SetConfig+0x26c>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <UART_SetConfig+0x254>
 800489c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a0:	d006      	beq.n	80048b0 <UART_SetConfig+0x260>
 80048a2:	e00b      	b.n	80048bc <UART_SetConfig+0x26c>
 80048a4:	2301      	movs	r3, #1
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e076      	b.n	8004998 <UART_SetConfig+0x348>
 80048aa:	2302      	movs	r3, #2
 80048ac:	77fb      	strb	r3, [r7, #31]
 80048ae:	e073      	b.n	8004998 <UART_SetConfig+0x348>
 80048b0:	2304      	movs	r3, #4
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e070      	b.n	8004998 <UART_SetConfig+0x348>
 80048b6:	2308      	movs	r3, #8
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e06d      	b.n	8004998 <UART_SetConfig+0x348>
 80048bc:	2310      	movs	r3, #16
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e06a      	b.n	8004998 <UART_SetConfig+0x348>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a1b      	ldr	r2, [pc, #108]	; (8004934 <UART_SetConfig+0x2e4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d138      	bne.n	800493e <UART_SetConfig+0x2ee>
 80048cc:	4b13      	ldr	r3, [pc, #76]	; (800491c <UART_SetConfig+0x2cc>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048da:	d017      	beq.n	800490c <UART_SetConfig+0x2bc>
 80048dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048e0:	d82a      	bhi.n	8004938 <UART_SetConfig+0x2e8>
 80048e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e6:	d00b      	beq.n	8004900 <UART_SetConfig+0x2b0>
 80048e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ec:	d824      	bhi.n	8004938 <UART_SetConfig+0x2e8>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <UART_SetConfig+0x2aa>
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d006      	beq.n	8004906 <UART_SetConfig+0x2b6>
 80048f8:	e01e      	b.n	8004938 <UART_SetConfig+0x2e8>
 80048fa:	2300      	movs	r3, #0
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e04b      	b.n	8004998 <UART_SetConfig+0x348>
 8004900:	2302      	movs	r3, #2
 8004902:	77fb      	strb	r3, [r7, #31]
 8004904:	e048      	b.n	8004998 <UART_SetConfig+0x348>
 8004906:	2304      	movs	r3, #4
 8004908:	77fb      	strb	r3, [r7, #31]
 800490a:	e045      	b.n	8004998 <UART_SetConfig+0x348>
 800490c:	2308      	movs	r3, #8
 800490e:	77fb      	strb	r3, [r7, #31]
 8004910:	e042      	b.n	8004998 <UART_SetConfig+0x348>
 8004912:	bf00      	nop
 8004914:	efff69f3 	.word	0xefff69f3
 8004918:	40011000 	.word	0x40011000
 800491c:	40023800 	.word	0x40023800
 8004920:	40004400 	.word	0x40004400
 8004924:	40004800 	.word	0x40004800
 8004928:	40004c00 	.word	0x40004c00
 800492c:	40005000 	.word	0x40005000
 8004930:	40011400 	.word	0x40011400
 8004934:	40007800 	.word	0x40007800
 8004938:	2310      	movs	r3, #16
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e02c      	b.n	8004998 <UART_SetConfig+0x348>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a72      	ldr	r2, [pc, #456]	; (8004b0c <UART_SetConfig+0x4bc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d125      	bne.n	8004994 <UART_SetConfig+0x344>
 8004948:	4b71      	ldr	r3, [pc, #452]	; (8004b10 <UART_SetConfig+0x4c0>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004952:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004956:	d017      	beq.n	8004988 <UART_SetConfig+0x338>
 8004958:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800495c:	d817      	bhi.n	800498e <UART_SetConfig+0x33e>
 800495e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004962:	d00b      	beq.n	800497c <UART_SetConfig+0x32c>
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004968:	d811      	bhi.n	800498e <UART_SetConfig+0x33e>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <UART_SetConfig+0x326>
 800496e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004972:	d006      	beq.n	8004982 <UART_SetConfig+0x332>
 8004974:	e00b      	b.n	800498e <UART_SetConfig+0x33e>
 8004976:	2300      	movs	r3, #0
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e00d      	b.n	8004998 <UART_SetConfig+0x348>
 800497c:	2302      	movs	r3, #2
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e00a      	b.n	8004998 <UART_SetConfig+0x348>
 8004982:	2304      	movs	r3, #4
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e007      	b.n	8004998 <UART_SetConfig+0x348>
 8004988:	2308      	movs	r3, #8
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e004      	b.n	8004998 <UART_SetConfig+0x348>
 800498e:	2310      	movs	r3, #16
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e001      	b.n	8004998 <UART_SetConfig+0x348>
 8004994:	2310      	movs	r3, #16
 8004996:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a0:	d15b      	bne.n	8004a5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049a2:	7ffb      	ldrb	r3, [r7, #31]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d828      	bhi.n	80049fa <UART_SetConfig+0x3aa>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x360>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049e5 	.word	0x080049e5
 80049bc:	080049fb 	.word	0x080049fb
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	080049fb 	.word	0x080049fb
 80049cc:	080049fb 	.word	0x080049fb
 80049d0:	080049f3 	.word	0x080049f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d4:	f7fd feaa 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 80049d8:	61b8      	str	r0, [r7, #24]
        break;
 80049da:	e013      	b.n	8004a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049dc:	f7fd feba 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 80049e0:	61b8      	str	r0, [r7, #24]
        break;
 80049e2:	e00f      	b.n	8004a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b4b      	ldr	r3, [pc, #300]	; (8004b14 <UART_SetConfig+0x4c4>)
 80049e6:	61bb      	str	r3, [r7, #24]
        break;
 80049e8:	e00c      	b.n	8004a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fd fdcd 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 80049ee:	61b8      	str	r0, [r7, #24]
        break;
 80049f0:	e008      	b.n	8004a04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f6:	61bb      	str	r3, [r7, #24]
        break;
 80049f8:	e004      	b.n	8004a04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	77bb      	strb	r3, [r7, #30]
        break;
 8004a02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d074      	beq.n	8004af4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	005a      	lsls	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	441a      	add	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b0f      	cmp	r3, #15
 8004a24:	d916      	bls.n	8004a54 <UART_SetConfig+0x404>
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2c:	d212      	bcs.n	8004a54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f023 030f 	bic.w	r3, r3, #15
 8004a36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	89fb      	ldrh	r3, [r7, #14]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	89fa      	ldrh	r2, [r7, #14]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	e04f      	b.n	8004af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77bb      	strb	r3, [r7, #30]
 8004a58:	e04c      	b.n	8004af4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d828      	bhi.n	8004ab2 <UART_SetConfig+0x462>
 8004a60:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <UART_SetConfig+0x418>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004ab3 	.word	0x08004ab3
 8004a80:	08004ab3 	.word	0x08004ab3
 8004a84:	08004ab3 	.word	0x08004ab3
 8004a88:	08004aab 	.word	0x08004aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fd fe4e 	bl	800272c <HAL_RCC_GetPCLK1Freq>
 8004a90:	61b8      	str	r0, [r7, #24]
        break;
 8004a92:	e013      	b.n	8004abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a94:	f7fd fe5e 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 8004a98:	61b8      	str	r0, [r7, #24]
        break;
 8004a9a:	e00f      	b.n	8004abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	; (8004b14 <UART_SetConfig+0x4c4>)
 8004a9e:	61bb      	str	r3, [r7, #24]
        break;
 8004aa0:	e00c      	b.n	8004abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aa2:	f7fd fd71 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8004aa6:	61b8      	str	r0, [r7, #24]
        break;
 8004aa8:	e008      	b.n	8004abc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aae:	61bb      	str	r3, [r7, #24]
        break;
 8004ab0:	e004      	b.n	8004abc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	77bb      	strb	r3, [r7, #30]
        break;
 8004aba:	bf00      	nop
    }

    if (pclk != 0U)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d018      	beq.n	8004af4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	085a      	lsrs	r2, r3, #1
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	441a      	add	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b0f      	cmp	r3, #15
 8004ada:	d909      	bls.n	8004af0 <UART_SetConfig+0x4a0>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d205      	bcs.n	8004af0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	e001      	b.n	8004af4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b00:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40007c00 	.word	0x40007c00
 8004b10:	40023800 	.word	0x40023800
 8004b14:	00f42400 	.word	0x00f42400

08004b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01a      	beq.n	8004c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c16:	d10a      	bne.n	8004c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
  }
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c6c:	f7fc fa00 	bl	8001070 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d10e      	bne.n	8004c9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f817 	bl	8004cc2 <UART_WaitOnFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e00d      	b.n	8004cba <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b09c      	sub	sp, #112	; 0x70
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd2:	e0a5      	b.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	f000 80a1 	beq.w	8004e20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fc f9c7 	bl	8001070 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d13e      	bne.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d08:	667b      	str	r3, [r7, #100]	; 0x64
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e6      	bne.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d46:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e5      	bne.n	8004d26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e067      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d04f      	beq.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8e:	d147      	bne.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e6      	bne.n	8004d9a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	613b      	str	r3, [r7, #16]
   return(result);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dec:	623a      	str	r2, [r7, #32]
 8004dee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	69f9      	ldr	r1, [r7, #28]
 8004df2:	6a3a      	ldr	r2, [r7, #32]
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e010      	b.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	bf0c      	ite	eq
 8004e30:	2301      	moveq	r3, #1
 8004e32:	2300      	movne	r3, #0
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	f43f af4a 	beq.w	8004cd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3770      	adds	r7, #112	; 0x70
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
	...

08004e4c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	b480      	push	{r7}
 8004e50:	b085      	sub	sp, #20
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	f107 001c 	add.w	r0, r7, #28
 8004e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004e62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004e64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004e66:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004e6a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004e6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004e72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004e76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <SDMMC_Init+0x54>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	b004      	add	sp, #16
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	ffff8100 	.word	0xffff8100

08004ea4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2203      	movs	r2, #3
 8004eec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0303 	and.w	r3, r3, #3
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f36:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f3c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <SDMMC_SendCommand+0x50>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	fffff000 	.word	0xfffff000

08004f6c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	b2db      	uxtb	r3, r3
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3314      	adds	r3, #20
 8004f94:	461a      	mov	r2, r3
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
}  
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fd2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004fd8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004fde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fea:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0

}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005012:	2310      	movs	r3, #16
 8005014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800501e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005022:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005024:	f107 0308 	add.w	r3, r7, #8
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff ff74 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005030:	f241 3288 	movw	r2, #5000	; 0x1388
 8005034:	2110      	movs	r1, #16
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa1a 	bl	8005470 <SDMMC_GetCmdResp1>
 800503c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800503e:	69fb      	ldr	r3, [r7, #28]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005056:	2311      	movs	r3, #17
 8005058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800505a:	2340      	movs	r3, #64	; 0x40
 800505c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005066:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff ff52 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005074:	f241 3288 	movw	r2, #5000	; 0x1388
 8005078:	2111      	movs	r1, #17
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f9f8 	bl	8005470 <SDMMC_GetCmdResp1>
 8005080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005082:	69fb      	ldr	r3, [r7, #28]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800509a:	2312      	movs	r3, #18
 800509c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800509e:	2340      	movs	r3, #64	; 0x40
 80050a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050ac:	f107 0308 	add.w	r3, r7, #8
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff ff30 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80050b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050bc:	2112      	movs	r1, #18
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f9d6 	bl	8005470 <SDMMC_GetCmdResp1>
 80050c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050c6:	69fb      	ldr	r3, [r7, #28]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80050de:	2318      	movs	r3, #24
 80050e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80050e2:	2340      	movs	r3, #64	; 0x40
 80050e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80050ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80050f0:	f107 0308 	add.w	r3, r7, #8
 80050f4:	4619      	mov	r1, r3
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff ff0e 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80050fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005100:	2118      	movs	r1, #24
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9b4 	bl	8005470 <SDMMC_GetCmdResp1>
 8005108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800510a:	69fb      	ldr	r3, [r7, #28]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3720      	adds	r7, #32
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005122:	2319      	movs	r3, #25
 8005124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005126:	2340      	movs	r3, #64	; 0x40
 8005128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800512e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005134:	f107 0308 	add.w	r3, r7, #8
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff feec 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	2119      	movs	r1, #25
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f992 	bl	8005470 <SDMMC_GetCmdResp1>
 800514c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800514e:	69fb      	ldr	r3, [r7, #28]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005164:	230c      	movs	r3, #12
 8005166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005168:	2340      	movs	r3, #64	; 0x40
 800516a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fecb 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005182:	4a05      	ldr	r2, [pc, #20]	; (8005198 <SDMMC_CmdStopTransfer+0x40>)
 8005184:	210c      	movs	r1, #12
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f972 	bl	8005470 <SDMMC_GetCmdResp1>
 800518c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800518e:	69fb      	ldr	r3, [r7, #28]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	05f5e100 	.word	0x05f5e100

0800519c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	; 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80051ac:	2307      	movs	r3, #7
 80051ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80051b0:	2340      	movs	r3, #64	; 0x40
 80051b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051bc:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80051be:	f107 0310 	add.w	r3, r7, #16
 80051c2:	4619      	mov	r1, r3
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fea7 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	2107      	movs	r1, #7
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f94d 	bl	8005470 <SDMMC_GetCmdResp1>
 80051d6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3728      	adds	r7, #40	; 0x28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b088      	sub	sp, #32
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80051fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005200:	f107 0308 	add.w	r3, r7, #8
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fe86 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fb67 	bl	80058e0 <SDMMC_GetCmdError>
 8005212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005214:	69fb      	ldr	r3, [r7, #28]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b088      	sub	sp, #32
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005226:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800522a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800522c:	2308      	movs	r3, #8
 800522e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005230:	2340      	movs	r3, #64	; 0x40
 8005232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800523c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800523e:	f107 0308 	add.w	r3, r7, #8
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fe67 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fafa 	bl	8005844 <SDMMC_GetCmdResp7>
 8005250:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005252:	69fb      	ldr	r3, [r7, #28]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800526a:	2337      	movs	r3, #55	; 0x37
 800526c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800526e:	2340      	movs	r3, #64	; 0x40
 8005270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800527a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800527c:	f107 0308 	add.w	r3, r7, #8
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff fe48 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	2137      	movs	r1, #55	; 0x37
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f8ee 	bl	8005470 <SDMMC_GetCmdResp1>
 8005294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005296:	69fb      	ldr	r3, [r7, #28]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <SDMMC_CmdAppOperCommand+0x44>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80052b2:	2329      	movs	r3, #41	; 0x29
 80052b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052b6:	2340      	movs	r3, #64	; 0x40
 80052b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80052be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80052c4:	f107 0308 	add.w	r3, r7, #8
 80052c8:	4619      	mov	r1, r3
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fe24 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fa03 	bl	80056dc <SDMMC_GetCmdResp3>
 80052d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052d8:	69fb      	ldr	r3, [r7, #28]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	80100000 	.word	0x80100000

080052e8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80052f6:	2306      	movs	r3, #6
 80052f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80052fa:	2340      	movs	r3, #64	; 0x40
 80052fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005308:	f107 0308 	add.w	r3, r7, #8
 800530c:	4619      	mov	r1, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fe02 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	2106      	movs	r1, #6
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f8a8 	bl	8005470 <SDMMC_GetCmdResp1>
 8005320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005322:	69fb      	ldr	r3, [r7, #28]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3720      	adds	r7, #32
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005338:	2333      	movs	r3, #51	; 0x33
 800533a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800533c:	2340      	movs	r3, #64	; 0x40
 800533e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005348:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800534a:	f107 0308 	add.w	r3, r7, #8
 800534e:	4619      	mov	r1, r3
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff fde1 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	2133      	movs	r1, #51	; 0x33
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f887 	bl	8005470 <SDMMC_GetCmdResp1>
 8005362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005364:	69fb      	ldr	r3, [r7, #28]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3720      	adds	r7, #32
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b088      	sub	sp, #32
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800537a:	2302      	movs	r3, #2
 800537c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800537e:	23c0      	movs	r3, #192	; 0xc0
 8005380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800538a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800538c:	f107 0308 	add.w	r3, r7, #8
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff fdc0 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f957 	bl	800564c <SDMMC_GetCmdResp2>
 800539e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053a0:	69fb      	ldr	r3, [r7, #28]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b088      	sub	sp, #32
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80053b8:	2309      	movs	r3, #9
 80053ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80053bc:	23c0      	movs	r3, #192	; 0xc0
 80053be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fda1 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f938 	bl	800564c <SDMMC_GetCmdResp2>
 80053dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053de:	69fb      	ldr	r3, [r7, #28]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80053f6:	2303      	movs	r3, #3
 80053f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053fa:	2340      	movs	r3, #64	; 0x40
 80053fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005406:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005408:	f107 0308 	add.w	r3, r7, #8
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fd82 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	2103      	movs	r1, #3
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f99d 	bl	8005758 <SDMMC_GetCmdResp6>
 800541e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005420:	69fb      	ldr	r3, [r7, #28]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b088      	sub	sp, #32
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005438:	230d      	movs	r3, #13
 800543a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800543c:	2340      	movs	r3, #64	; 0x40
 800543e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800544a:	f107 0308 	add.w	r3, r7, #8
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff fd61 	bl	8004f18 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	210d      	movs	r1, #13
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f807 	bl	8005470 <SDMMC_GetCmdResp1>
 8005462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005464:	69fb      	ldr	r3, [r7, #28]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	460b      	mov	r3, r1
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800547e:	4b70      	ldr	r3, [pc, #448]	; (8005640 <SDMMC_GetCmdResp1+0x1d0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a70      	ldr	r2, [pc, #448]	; (8005644 <SDMMC_GetCmdResp1+0x1d4>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	0a5a      	lsrs	r2, r3, #9
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	fb02 f303 	mul.w	r3, r2, r3
 8005490:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	1e5a      	subs	r2, r3, #1
 8005496:	61fa      	str	r2, [r7, #28]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800549c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054a0:	e0c9      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0ef      	beq.n	8005492 <SDMMC_GetCmdResp1+0x22>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1ea      	bne.n	8005492 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2204      	movs	r2, #4
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054ce:	2304      	movs	r3, #4
 80054d0:	e0b1      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0a6      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	22c5      	movs	r2, #197	; 0xc5
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f7ff fd3c 	bl	8004f6c <SDMMC_GetCommandResponse>
 80054f4:	4603      	mov	r3, r0
 80054f6:	461a      	mov	r2, r3
 80054f8:	7afb      	ldrb	r3, [r7, #11]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d001      	beq.n	8005502 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054fe:	2301      	movs	r3, #1
 8005500:	e099      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005502:	2100      	movs	r1, #0
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff fd3e 	bl	8004f86 <SDMMC_GetResponse>
 800550a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4b4e      	ldr	r3, [pc, #312]	; (8005648 <SDMMC_GetCmdResp1+0x1d8>)
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005516:	2300      	movs	r3, #0
 8005518:	e08d      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	da02      	bge.n	8005526 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005524:	e087      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005530:	2340      	movs	r3, #64	; 0x40
 8005532:	e080      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800553e:	2380      	movs	r3, #128	; 0x80
 8005540:	e079      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800554c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005550:	e071      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800555c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005560:	e069      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800556c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005570:	e061      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800557c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005580:	e059      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800558c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005590:	e051      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800559c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055a0:	e049      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80055ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055b0:	e041      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80055bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c0:	e039      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80055cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055d0:	e031      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80055dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055e0:	e029      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80055ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80055f0:	e021      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80055fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005600:	e019      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800560c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005610:	e011      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800561c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005620:	e009      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800562c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005630:	e001      	b.n	8005636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000000 	.word	0x20000000
 8005644:	10624dd3 	.word	0x10624dd3
 8005648:	fdffe008 	.word	0xfdffe008

0800564c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005654:	4b1f      	ldr	r3, [pc, #124]	; (80056d4 <SDMMC_GetCmdResp2+0x88>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <SDMMC_GetCmdResp2+0x8c>)
 800565a:	fba2 2303 	umull	r2, r3, r2, r3
 800565e:	0a5b      	lsrs	r3, r3, #9
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	fb02 f303 	mul.w	r3, r2, r3
 8005668:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1e5a      	subs	r2, r3, #1
 800566e:	60fa      	str	r2, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005678:	e026      	b.n	80056c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0ef      	beq.n	800566a <SDMMC_GetCmdResp2+0x1e>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ea      	bne.n	800566a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2204      	movs	r2, #4
 80056a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056a6:	2304      	movs	r3, #4
 80056a8:	e00e      	b.n	80056c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056bc:	2301      	movs	r3, #1
 80056be:	e003      	b.n	80056c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	22c5      	movs	r2, #197	; 0xc5
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	20000000 	.word	0x20000000
 80056d8:	10624dd3 	.word	0x10624dd3

080056dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056e4:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <SDMMC_GetCmdResp3+0x74>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1a      	ldr	r2, [pc, #104]	; (8005754 <SDMMC_GetCmdResp3+0x78>)
 80056ea:	fba2 2303 	umull	r2, r3, r2, r3
 80056ee:	0a5b      	lsrs	r3, r3, #9
 80056f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f4:	fb02 f303 	mul.w	r3, r2, r3
 80056f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1e5a      	subs	r2, r3, #1
 80056fe:	60fa      	str	r2, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005708:	e01b      	b.n	8005742 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0ef      	beq.n	80056fa <SDMMC_GetCmdResp3+0x1e>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1ea      	bne.n	80056fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d004      	beq.n	800573a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2204      	movs	r2, #4
 8005734:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005736:	2304      	movs	r3, #4
 8005738:	e003      	b.n	8005742 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	22c5      	movs	r2, #197	; 0xc5
 800573e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20000000 	.word	0x20000000
 8005754:	10624dd3 	.word	0x10624dd3

08005758 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	460b      	mov	r3, r1
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005766:	4b35      	ldr	r3, [pc, #212]	; (800583c <SDMMC_GetCmdResp6+0xe4>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a35      	ldr	r2, [pc, #212]	; (8005840 <SDMMC_GetCmdResp6+0xe8>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	0a5b      	lsrs	r3, r3, #9
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	1e5a      	subs	r2, r3, #1
 8005780:	61fa      	str	r2, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005786:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800578a:	e052      	b.n	8005832 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0ef      	beq.n	800577c <SDMMC_GetCmdResp6+0x24>
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ea      	bne.n	800577c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2204      	movs	r2, #4
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057b8:	2304      	movs	r3, #4
 80057ba:	e03a      	b.n	8005832 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e02f      	b.n	8005832 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7ff fbca 	bl	8004f6c <SDMMC_GetCommandResponse>
 80057d8:	4603      	mov	r3, r0
 80057da:	461a      	mov	r2, r3
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	4293      	cmp	r3, r2
 80057e0:	d001      	beq.n	80057e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e025      	b.n	8005832 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	22c5      	movs	r2, #197	; 0xc5
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80057ec:	2100      	movs	r1, #0
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fbc9 	bl	8004f86 <SDMMC_GetResponse>
 80057f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d106      	bne.n	800580e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800580a:	2300      	movs	r3, #0
 800580c:	e011      	b.n	8005832 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800581c:	e009      	b.n	8005832 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800582c:	e001      	b.n	8005832 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800582e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000000 	.word	0x20000000
 8005840:	10624dd3 	.word	0x10624dd3

08005844 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800584c:	4b22      	ldr	r3, [pc, #136]	; (80058d8 <SDMMC_GetCmdResp7+0x94>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a22      	ldr	r2, [pc, #136]	; (80058dc <SDMMC_GetCmdResp7+0x98>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	0a5b      	lsrs	r3, r3, #9
 8005858:	f241 3288 	movw	r2, #5000	; 0x1388
 800585c:	fb02 f303 	mul.w	r3, r2, r3
 8005860:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	1e5a      	subs	r2, r3, #1
 8005866:	60fa      	str	r2, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d102      	bne.n	8005872 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800586c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005870:	e02c      	b.n	80058cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005876:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0ef      	beq.n	8005862 <SDMMC_GetCmdResp7+0x1e>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1ea      	bne.n	8005862 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d004      	beq.n	80058a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2204      	movs	r2, #4
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800589e:	2304      	movs	r3, #4
 80058a0:	e014      	b.n	80058cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d004      	beq.n	80058b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e009      	b.n	80058cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2240      	movs	r2, #64	; 0x40
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80058ca:	2300      	movs	r3, #0
  
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	20000000 	.word	0x20000000
 80058dc:	10624dd3 	.word	0x10624dd3

080058e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058e8:	4b11      	ldr	r3, [pc, #68]	; (8005930 <SDMMC_GetCmdError+0x50>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a11      	ldr	r2, [pc, #68]	; (8005934 <SDMMC_GetCmdError+0x54>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	0a5b      	lsrs	r3, r3, #9
 80058f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1e5a      	subs	r2, r3, #1
 8005902:	60fa      	str	r2, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005908:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800590c:	e009      	b.n	8005922 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f1      	beq.n	80058fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	22c5      	movs	r2, #197	; 0xc5
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	20000000 	.word	0x20000000
 8005934:	10624dd3 	.word	0x10624dd3

08005938 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800593c:	4904      	ldr	r1, [pc, #16]	; (8005950 <MX_FATFS_Init+0x18>)
 800593e:	4805      	ldr	r0, [pc, #20]	; (8005954 <MX_FATFS_Init+0x1c>)
 8005940:	f003 f834 	bl	80089ac <FATFS_LinkDriver>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	4b03      	ldr	r3, [pc, #12]	; (8005958 <MX_FATFS_Init+0x20>)
 800594a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800594c:	bf00      	nop
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000260 	.word	0x20000260
 8005954:	0800939c 	.word	0x0800939c
 8005958:	2000025c 	.word	0x2000025c

0800595c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005960:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005962:	4618      	mov	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005976:	f000 f896 	bl	8005aa6 <BSP_SD_IsDetected>
 800597a:	4603      	mov	r3, r0
 800597c:	2b01      	cmp	r3, #1
 800597e:	d001      	beq.n	8005984 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005980:	2302      	movs	r3, #2
 8005982:	e012      	b.n	80059aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005984:	480b      	ldr	r0, [pc, #44]	; (80059b4 <BSP_SD_Init+0x48>)
 8005986:	f7fd fae9 	bl	8002f5c <HAL_SD_Init>
 800598a:	4603      	mov	r3, r0
 800598c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005994:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005998:	4806      	ldr	r0, [pc, #24]	; (80059b4 <BSP_SD_Init+0x48>)
 800599a:	f7fe f8af 	bl	8003afc <HAL_SD_ConfigWideBusOperation>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80059a8:	79fb      	ldrb	r3, [r7, #7]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	2000008c 	.word	0x2000008c

080059b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	68f9      	ldr	r1, [r7, #12]
 80059ce:	4806      	ldr	r0, [pc, #24]	; (80059e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80059d0:	f7fd fb7c 	bl	80030cc <HAL_SD_ReadBlocks_DMA>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80059de:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	2000008c 	.word	0x2000008c

080059ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	68f9      	ldr	r1, [r7, #12]
 8005a02:	4806      	ldr	r0, [pc, #24]	; (8005a1c <BSP_SD_WriteBlocks_DMA+0x30>)
 8005a04:	f7fd fc44 	bl	8003290 <HAL_SD_WriteBlocks_DMA>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	2000008c 	.word	0x2000008c

08005a20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005a24:	4805      	ldr	r0, [pc, #20]	; (8005a3c <BSP_SD_GetCardState+0x1c>)
 8005a26:	f7fe f903 	bl	8003c30 <HAL_SD_GetCardState>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	2000008c 	.word	0x2000008c

08005a40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4803      	ldr	r0, [pc, #12]	; (8005a58 <BSP_SD_GetCardInfo+0x18>)
 8005a4c:	f7fe f82a 	bl	8003aa4 <HAL_SD_GetCardInfo>
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	2000008c 	.word	0x2000008c

08005a5c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005a64:	f000 f818 	bl	8005a98 <BSP_SD_AbortCallback>
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005a78:	f000 f9a8 	bl	8005dcc <BSP_SD_WriteCpltCallback>
}
 8005a7c:	bf00      	nop
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005a8c:	f000 f9aa 	bl	8005de4 <BSP_SD_ReadCpltCallback>
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0

}
 8005a9c:	bf00      	nop
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005aac:	2301      	movs	r3, #1
 8005aae:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005ab0:	f000 f80c 	bl	8005acc <BSP_PlatformIsDetected>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005aba:	2300      	movs	r3, #0
 8005abc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005abe:	79fb      	ldrb	r3, [r7, #7]
 8005ac0:	b2db      	uxtb	r3, r3
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
	...

08005acc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ada:	4806      	ldr	r0, [pc, #24]	; (8005af4 <BSP_PlatformIsDetected+0x28>)
 8005adc:	f7fc f95c 	bl	8001d98 <HAL_GPIO_ReadPin>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005aea:	79fb      	ldrb	r3, [r7, #7]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40020800 	.word	0x40020800

08005af8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8005b00:	f7fb fab6 	bl	8001070 <HAL_GetTick>
 8005b04:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8005b06:	e006      	b.n	8005b16 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005b08:	f7ff ff8a 	bl	8005a20 <BSP_SD_GetCardState>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e009      	b.n	8005b2a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8005b16:	f7fb faab 	bl	8001070 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d8f0      	bhi.n	8005b08 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8005b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <SD_CheckStatus+0x38>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005b44:	f7ff ff6c 	bl	8005a20 <BSP_SD_GetCardState>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d107      	bne.n	8005b5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <SD_CheckStatus+0x38>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f023 0301 	bic.w	r3, r3, #1
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <SD_CheckStatus+0x38>)
 8005b5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005b5e:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <SD_CheckStatus+0x38>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	b2db      	uxtb	r3, r3
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	20000009 	.word	0x20000009

08005b70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005b7a:	f7ff fef7 	bl	800596c <BSP_SD_Init>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d107      	bne.n	8005b94 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff ffd4 	bl	8005b34 <SD_CheckStatus>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <SD_initialize+0x34>)
 8005b92:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005b94:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <SD_initialize+0x34>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000009 	.word	0x20000009

08005ba8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff ffbd 	bl	8005b34 <SD_CheckStatus>
 8005bba:	4603      	mov	r3, r0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005bd8:	f247 5030 	movw	r0, #30000	; 0x7530
 8005bdc:	f7ff ff8c 	bl	8005af8 <SD_CheckStatusWithTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	da01      	bge.n	8005bea <SD_read+0x26>
  {
    return res;
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
 8005be8:	e03b      	b.n	8005c62 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f7ff fee2 	bl	80059b8 <BSP_SD_ReadBlocks_DMA>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d132      	bne.n	8005c60 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8005bfa:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <SD_read+0xa8>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8005c00:	f7fb fa36 	bl	8001070 <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005c06:	bf00      	nop
 8005c08:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <SD_read+0xa8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d108      	bne.n	8005c22 <SD_read+0x5e>
 8005c10:	f7fb fa2e 	bl	8001070 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f247 522f 	movw	r2, #29999	; 0x752f
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d9f2      	bls.n	8005c08 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <SD_read+0xa8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
 8005c2e:	e017      	b.n	8005c60 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8005c30:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <SD_read+0xa8>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005c36:	f7fb fa1b 	bl	8001070 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005c3c:	e007      	b.n	8005c4e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005c3e:	f7ff feef 	bl	8005a20 <BSP_SD_GetCardState>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <SD_read+0x8a>
          {
            res = RES_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005c4c:	e008      	b.n	8005c60 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005c4e:	f7fb fa0f 	bl	8001070 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f247 522f 	movw	r2, #29999	; 0x752f
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d9ee      	bls.n	8005c3e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200006c8 	.word	0x200006c8

08005c70 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005c84:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <SD_write+0xa8>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005c8a:	f247 5030 	movw	r0, #30000	; 0x7530
 8005c8e:	f7ff ff33 	bl	8005af8 <SD_CheckStatusWithTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	da01      	bge.n	8005c9c <SD_write+0x2c>
  {
    return res;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	e038      	b.n	8005d0e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	68b8      	ldr	r0, [r7, #8]
 8005ca2:	f7ff fea3 	bl	80059ec <BSP_SD_WriteBlocks_DMA>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d12f      	bne.n	8005d0c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005cac:	f7fb f9e0 	bl	8001070 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005cb2:	bf00      	nop
 8005cb4:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <SD_write+0xa8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d108      	bne.n	8005cce <SD_write+0x5e>
 8005cbc:	f7fb f9d8 	bl	8001070 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f247 522f 	movw	r2, #29999	; 0x752f
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d9f2      	bls.n	8005cb4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <SD_write+0xa8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
 8005cda:	e017      	b.n	8005d0c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <SD_write+0xa8>)
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005ce2:	f7fb f9c5 	bl	8001070 <HAL_GetTick>
 8005ce6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005ce8:	e007      	b.n	8005cfa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005cea:	f7ff fe99 	bl	8005a20 <BSP_SD_GetCardState>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <SD_write+0x8a>
          {
            res = RES_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	75fb      	strb	r3, [r7, #23]
            break;
 8005cf8:	e008      	b.n	8005d0c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005cfa:	f7fb f9b9 	bl	8001070 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	f247 522f 	movw	r2, #29999	; 0x752f
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d9ee      	bls.n	8005cea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	200006c4 	.word	0x200006c4

08005d1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08c      	sub	sp, #48	; 0x30
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	603a      	str	r2, [r7, #0]
 8005d26:	71fb      	strb	r3, [r7, #7]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005d32:	4b25      	ldr	r3, [pc, #148]	; (8005dc8 <SD_ioctl+0xac>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <SD_ioctl+0x28>
 8005d40:	2303      	movs	r3, #3
 8005d42:	e03c      	b.n	8005dbe <SD_ioctl+0xa2>

  switch (cmd)
 8005d44:	79bb      	ldrb	r3, [r7, #6]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d834      	bhi.n	8005db4 <SD_ioctl+0x98>
 8005d4a:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <SD_ioctl+0x34>)
 8005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d50:	08005d61 	.word	0x08005d61
 8005d54:	08005d69 	.word	0x08005d69
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d9b 	.word	0x08005d9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d66:	e028      	b.n	8005dba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d68:	f107 030c 	add.w	r3, r7, #12
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff fe67 	bl	8005a40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d7e:	e01c      	b.n	8005dba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d80:	f107 030c 	add.w	r3, r7, #12
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff fe5b 	bl	8005a40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005d98:	e00f      	b.n	8005dba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005d9a:	f107 030c 	add.w	r3, r7, #12
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fe4e 	bl	8005a40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	0a5a      	lsrs	r2, r3, #9
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005db2:	e002      	b.n	8005dba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005db4:	2304      	movs	r3, #4
 8005db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3730      	adds	r7, #48	; 0x30
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000009 	.word	0x20000009

08005dcc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005dd0:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <BSP_SD_WriteCpltCallback+0x14>)
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	200006c4 	.word	0x200006c4

08005de4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <BSP_SD_ReadCpltCallback+0x14>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
}
 8005dee:	bf00      	nop
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	200006c8 	.word	0x200006c8

08005dfc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <disk_status+0x30>)
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	79fa      	ldrb	r2, [r7, #7]
 8005e14:	4905      	ldr	r1, [pc, #20]	; (8005e2c <disk_status+0x30>)
 8005e16:	440a      	add	r2, r1
 8005e18:	7a12      	ldrb	r2, [r2, #8]
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4798      	blx	r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	200006f4 	.word	0x200006f4

08005e30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	4a0d      	ldr	r2, [pc, #52]	; (8005e78 <disk_initialize+0x48>)
 8005e42:	5cd3      	ldrb	r3, [r2, r3]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d111      	bne.n	8005e6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	4a0b      	ldr	r2, [pc, #44]	; (8005e78 <disk_initialize+0x48>)
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <disk_initialize+0x48>)
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	79fa      	ldrb	r2, [r7, #7]
 8005e5e:	4906      	ldr	r1, [pc, #24]	; (8005e78 <disk_initialize+0x48>)
 8005e60:	440a      	add	r2, r1
 8005e62:	7a12      	ldrb	r2, [r2, #8]
 8005e64:	4610      	mov	r0, r2
 8005e66:	4798      	blx	r3
 8005e68:	4603      	mov	r3, r0
 8005e6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	200006f4 	.word	0x200006f4

08005e7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	4a0a      	ldr	r2, [pc, #40]	; (8005eb8 <disk_read+0x3c>)
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	689c      	ldr	r4, [r3, #8]
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	4a07      	ldr	r2, [pc, #28]	; (8005eb8 <disk_read+0x3c>)
 8005e9c:	4413      	add	r3, r2
 8005e9e:	7a18      	ldrb	r0, [r3, #8]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	47a0      	blx	r4
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	75fb      	strb	r3, [r7, #23]
  return res;
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd90      	pop	{r4, r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	200006f4 	.word	0x200006f4

08005ebc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005ebc:	b590      	push	{r4, r7, lr}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	4a0a      	ldr	r2, [pc, #40]	; (8005ef8 <disk_write+0x3c>)
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	68dc      	ldr	r4, [r3, #12]
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	4a07      	ldr	r2, [pc, #28]	; (8005ef8 <disk_write+0x3c>)
 8005edc:	4413      	add	r3, r2
 8005ede:	7a18      	ldrb	r0, [r3, #8]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	47a0      	blx	r4
 8005ee8:	4603      	mov	r3, r0
 8005eea:	75fb      	strb	r3, [r7, #23]
  return res;
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd90      	pop	{r4, r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200006f4 	.word	0x200006f4

08005efc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	603a      	str	r2, [r7, #0]
 8005f06:	71fb      	strb	r3, [r7, #7]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <disk_ioctl+0x38>)
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	79fa      	ldrb	r2, [r7, #7]
 8005f1a:	4906      	ldr	r1, [pc, #24]	; (8005f34 <disk_ioctl+0x38>)
 8005f1c:	440a      	add	r2, r1
 8005f1e:	7a10      	ldrb	r0, [r2, #8]
 8005f20:	79b9      	ldrb	r1, [r7, #6]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	4798      	blx	r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	73fb      	strb	r3, [r7, #15]
  return res;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	200006f4 	.word	0x200006f4

08005f38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3301      	adds	r3, #1
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005f48:	89fb      	ldrh	r3, [r7, #14]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	b21a      	sxth	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	b21b      	sxth	r3, r3
 8005f54:	4313      	orrs	r3, r2
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3303      	adds	r3, #3
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	3202      	adds	r2, #2
 8005f80:	7812      	ldrb	r2, [r2, #0]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	3201      	adds	r2, #1
 8005f8e:	7812      	ldrb	r2, [r2, #0]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	7812      	ldrb	r2, [r2, #0]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	887a      	ldrh	r2, [r7, #2]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	887b      	ldrh	r3, [r7, #2]
 8005fc8:	0a1b      	lsrs	r3, r3, #8
 8005fca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	887a      	ldrh	r2, [r7, #2]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	0a1b      	lsrs	r3, r3, #8
 8005ffe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	607a      	str	r2, [r7, #4]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	0a1b      	lsrs	r3, r3, #8
 8006010:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	0a1b      	lsrs	r3, r3, #8
 8006022:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00d      	beq.n	8006072 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	1c53      	adds	r3, r2, #1
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	1c59      	adds	r1, r3, #1
 8006060:	6179      	str	r1, [r7, #20]
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3b01      	subs	r3, #1
 800606a:	607b      	str	r3, [r7, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f1      	bne.n	8006056 <mem_cpy+0x1a>
	}
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800607e:	b480      	push	{r7}
 8006080:	b087      	sub	sp, #28
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	617a      	str	r2, [r7, #20]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3b01      	subs	r3, #1
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f3      	bne.n	800608e <mem_set+0x10>
}
 80060a6:	bf00      	nop
 80060a8:	bf00      	nop
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80060b4:	b480      	push	{r7}
 80060b6:	b089      	sub	sp, #36	; 0x24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	61fb      	str	r3, [r7, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	61fa      	str	r2, [r7, #28]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	4619      	mov	r1, r3
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	61ba      	str	r2, [r7, #24]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	1acb      	subs	r3, r1, r3
 80060e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	607b      	str	r3, [r7, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <mem_cmp+0x40>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0eb      	beq.n	80060cc <mem_cmp+0x18>

	return r;
 80060f4:	697b      	ldr	r3, [r7, #20]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3724      	adds	r7, #36	; 0x24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800610c:	e002      	b.n	8006114 <chk_chr+0x12>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3301      	adds	r3, #1
 8006112:	607b      	str	r3, [r7, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <chk_chr+0x26>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	4293      	cmp	r3, r2
 8006126:	d1f2      	bne.n	800610e <chk_chr+0xc>
	return *str;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	781b      	ldrb	r3, [r3, #0]
}
 800612c:	4618      	mov	r0, r3
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006142:	2300      	movs	r3, #0
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	e029      	b.n	80061a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800614c:	4a27      	ldr	r2, [pc, #156]	; (80061ec <chk_lock+0xb4>)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	4413      	add	r3, r2
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01d      	beq.n	8006196 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800615a:	4a24      	ldr	r2, [pc, #144]	; (80061ec <chk_lock+0xb4>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	4413      	add	r3, r2
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d116      	bne.n	800619a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800616c:	4a1f      	ldr	r2, [pc, #124]	; (80061ec <chk_lock+0xb4>)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	4413      	add	r3, r2
 8006174:	3304      	adds	r3, #4
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800617c:	429a      	cmp	r2, r3
 800617e:	d10c      	bne.n	800619a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006180:	4a1a      	ldr	r2, [pc, #104]	; (80061ec <chk_lock+0xb4>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	4413      	add	r3, r2
 8006188:	3308      	adds	r3, #8
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006190:	429a      	cmp	r2, r3
 8006192:	d102      	bne.n	800619a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006194:	e007      	b.n	80061a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006196:	2301      	movs	r3, #1
 8006198:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d9d2      	bls.n	800614c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d109      	bne.n	80061c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <chk_lock+0x80>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d101      	bne.n	80061bc <chk_lock+0x84>
 80061b8:	2300      	movs	r3, #0
 80061ba:	e010      	b.n	80061de <chk_lock+0xa6>
 80061bc:	2312      	movs	r3, #18
 80061be:	e00e      	b.n	80061de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d108      	bne.n	80061d8 <chk_lock+0xa0>
 80061c6:	4a09      	ldr	r2, [pc, #36]	; (80061ec <chk_lock+0xb4>)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	4413      	add	r3, r2
 80061ce:	330c      	adds	r3, #12
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061d6:	d101      	bne.n	80061dc <chk_lock+0xa4>
 80061d8:	2310      	movs	r3, #16
 80061da:	e000      	b.n	80061de <chk_lock+0xa6>
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	200006d4 	.word	0x200006d4

080061f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]
 80061fa:	e002      	b.n	8006202 <enq_lock+0x12>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3301      	adds	r3, #1
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d806      	bhi.n	8006216 <enq_lock+0x26>
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <enq_lock+0x40>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	4413      	add	r3, r2
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1f2      	bne.n	80061fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b02      	cmp	r3, #2
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
}
 8006222:	4618      	mov	r0, r3
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	200006d4 	.word	0x200006d4

08006234 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	e01f      	b.n	8006284 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006244:	4a41      	ldr	r2, [pc, #260]	; (800634c <inc_lock+0x118>)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	4413      	add	r3, r2
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d113      	bne.n	800627e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006256:	4a3d      	ldr	r2, [pc, #244]	; (800634c <inc_lock+0x118>)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	4413      	add	r3, r2
 800625e:	3304      	adds	r3, #4
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006266:	429a      	cmp	r2, r3
 8006268:	d109      	bne.n	800627e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800626a:	4a38      	ldr	r2, [pc, #224]	; (800634c <inc_lock+0x118>)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	4413      	add	r3, r2
 8006272:	3308      	adds	r3, #8
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800627a:	429a      	cmp	r2, r3
 800627c:	d006      	beq.n	800628c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d9dc      	bls.n	8006244 <inc_lock+0x10>
 800628a:	e000      	b.n	800628e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800628c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d132      	bne.n	80062fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e002      	b.n	80062a0 <inc_lock+0x6c>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d806      	bhi.n	80062b4 <inc_lock+0x80>
 80062a6:	4a29      	ldr	r2, [pc, #164]	; (800634c <inc_lock+0x118>)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	4413      	add	r3, r2
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1f2      	bne.n	800629a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d101      	bne.n	80062be <inc_lock+0x8a>
 80062ba:	2300      	movs	r3, #0
 80062bc:	e040      	b.n	8006340 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4922      	ldr	r1, [pc, #136]	; (800634c <inc_lock+0x118>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	440b      	add	r3, r1
 80062ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	491e      	ldr	r1, [pc, #120]	; (800634c <inc_lock+0x118>)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	440b      	add	r3, r1
 80062d8:	3304      	adds	r3, #4
 80062da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	491a      	ldr	r1, [pc, #104]	; (800634c <inc_lock+0x118>)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	440b      	add	r3, r1
 80062e8:	3308      	adds	r3, #8
 80062ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80062ec:	4a17      	ldr	r2, [pc, #92]	; (800634c <inc_lock+0x118>)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	4413      	add	r3, r2
 80062f4:	330c      	adds	r3, #12
 80062f6:	2200      	movs	r2, #0
 80062f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <inc_lock+0xe0>
 8006300:	4a12      	ldr	r2, [pc, #72]	; (800634c <inc_lock+0x118>)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	4413      	add	r3, r2
 8006308:	330c      	adds	r3, #12
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <inc_lock+0xe0>
 8006310:	2300      	movs	r3, #0
 8006312:	e015      	b.n	8006340 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d108      	bne.n	800632c <inc_lock+0xf8>
 800631a:	4a0c      	ldr	r2, [pc, #48]	; (800634c <inc_lock+0x118>)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	4413      	add	r3, r2
 8006322:	330c      	adds	r3, #12
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	e001      	b.n	8006330 <inc_lock+0xfc>
 800632c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006330:	4906      	ldr	r1, [pc, #24]	; (800634c <inc_lock+0x118>)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	440b      	add	r3, r1
 8006338:	330c      	adds	r3, #12
 800633a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3301      	adds	r3, #1
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	200006d4 	.word	0x200006d4

08006350 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3b01      	subs	r3, #1
 800635c:	607b      	str	r3, [r7, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d825      	bhi.n	80063b0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006364:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <dec_lock+0x74>)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	4413      	add	r3, r2
 800636c:	330c      	adds	r3, #12
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006372:	89fb      	ldrh	r3, [r7, #14]
 8006374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006378:	d101      	bne.n	800637e <dec_lock+0x2e>
 800637a:	2300      	movs	r3, #0
 800637c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800637e:	89fb      	ldrh	r3, [r7, #14]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <dec_lock+0x3a>
 8006384:	89fb      	ldrh	r3, [r7, #14]
 8006386:	3b01      	subs	r3, #1
 8006388:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800638a:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <dec_lock+0x74>)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	4413      	add	r3, r2
 8006392:	330c      	adds	r3, #12
 8006394:	89fa      	ldrh	r2, [r7, #14]
 8006396:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006398:	89fb      	ldrh	r3, [r7, #14]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d105      	bne.n	80063aa <dec_lock+0x5a>
 800639e:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <dec_lock+0x74>)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	4413      	add	r3, r2
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	737b      	strb	r3, [r7, #13]
 80063ae:	e001      	b.n	80063b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80063b0:	2302      	movs	r3, #2
 80063b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80063b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	200006d4 	.word	0x200006d4

080063c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e010      	b.n	80063f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063d6:	4a0d      	ldr	r2, [pc, #52]	; (800640c <clear_lock+0x44>)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	4413      	add	r3, r2
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d105      	bne.n	80063f2 <clear_lock+0x2a>
 80063e6:	4a09      	ldr	r2, [pc, #36]	; (800640c <clear_lock+0x44>)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	4413      	add	r3, r2
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3301      	adds	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d9eb      	bls.n	80063d6 <clear_lock+0xe>
	}
}
 80063fe:	bf00      	nop
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	200006d4 	.word	0x200006d4

08006410 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	78db      	ldrb	r3, [r3, #3]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d034      	beq.n	800648e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	7858      	ldrb	r0, [r3, #1]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006434:	2301      	movs	r3, #1
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	f7ff fd40 	bl	8005ebc <disk_write>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006442:	2301      	movs	r3, #1
 8006444:	73fb      	strb	r3, [r7, #15]
 8006446:	e022      	b.n	800648e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	1ad2      	subs	r2, r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	429a      	cmp	r2, r3
 800645c:	d217      	bcs.n	800648e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	789b      	ldrb	r3, [r3, #2]
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	e010      	b.n	8006488 <sync_window+0x78>
					wsect += fs->fsize;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	7858      	ldrb	r0, [r3, #1]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800647a:	2301      	movs	r3, #1
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	f7ff fd1d 	bl	8005ebc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	3b01      	subs	r3, #1
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d8eb      	bhi.n	8006466 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800648e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d01b      	beq.n	80064e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ffad 	bl	8006410 <sync_window>
 80064b6:	4603      	mov	r3, r0
 80064b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d113      	bne.n	80064e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	7858      	ldrb	r0, [r3, #1]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064ca:	2301      	movs	r3, #1
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	f7ff fcd5 	bl	8005e7c <disk_read>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295
 80064dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80064de:	2301      	movs	r3, #1
 80064e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff ff87 	bl	8006410 <sync_window>
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d158      	bne.n	80065be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b03      	cmp	r3, #3
 8006512:	d148      	bne.n	80065a6 <sync_fs+0xb2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	791b      	ldrb	r3, [r3, #4]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d144      	bne.n	80065a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3330      	adds	r3, #48	; 0x30
 8006520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fda9 	bl	800607e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3330      	adds	r3, #48	; 0x30
 8006530:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006534:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff fd38 	bl	8005fae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3330      	adds	r3, #48	; 0x30
 8006542:	4921      	ldr	r1, [pc, #132]	; (80065c8 <sync_fs+0xd4>)
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff fd4d 	bl	8005fe4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3330      	adds	r3, #48	; 0x30
 800654e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006552:	491e      	ldr	r1, [pc, #120]	; (80065cc <sync_fs+0xd8>)
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fd45 	bl	8005fe4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3330      	adds	r3, #48	; 0x30
 800655e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	4619      	mov	r1, r3
 8006568:	4610      	mov	r0, r2
 800656a:	f7ff fd3b 	bl	8005fe4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3330      	adds	r3, #48	; 0x30
 8006572:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f7ff fd31 	bl	8005fe4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	7858      	ldrb	r0, [r3, #1]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659a:	2301      	movs	r3, #1
 800659c:	f7ff fc8e 	bl	8005ebc <disk_write>
			fs->fsi_flag = 0;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2200      	movs	r2, #0
 80065ac:	2100      	movs	r1, #0
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fca4 	bl	8005efc <disk_ioctl>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <sync_fs+0xca>
 80065ba:	2301      	movs	r3, #1
 80065bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	41615252 	.word	0x41615252
 80065cc:	61417272 	.word	0x61417272

080065d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	3b02      	subs	r3, #2
 80065de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	3b02      	subs	r3, #2
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d301      	bcc.n	80065f0 <clust2sect+0x20>
 80065ec:	2300      	movs	r3, #0
 80065ee:	e008      	b.n	8006602 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	895b      	ldrh	r3, [r3, #10]
 80065f4:	461a      	mov	r2, r3
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	fb03 f202 	mul.w	r2, r3, r2
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	4413      	add	r3, r2
}
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b086      	sub	sp, #24
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d904      	bls.n	800662e <get_fat+0x20>
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d302      	bcc.n	8006634 <get_fat+0x26>
		val = 1;	/* Internal error */
 800662e:	2301      	movs	r3, #1
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	e08f      	b.n	8006754 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006634:	f04f 33ff 	mov.w	r3, #4294967295
 8006638:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b03      	cmp	r3, #3
 8006640:	d062      	beq.n	8006708 <get_fat+0xfa>
 8006642:	2b03      	cmp	r3, #3
 8006644:	dc7c      	bgt.n	8006740 <get_fat+0x132>
 8006646:	2b01      	cmp	r3, #1
 8006648:	d002      	beq.n	8006650 <get_fat+0x42>
 800664a:	2b02      	cmp	r3, #2
 800664c:	d042      	beq.n	80066d4 <get_fat+0xc6>
 800664e:	e077      	b.n	8006740 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	085b      	lsrs	r3, r3, #1
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	6a1a      	ldr	r2, [r3, #32]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	0a5b      	lsrs	r3, r3, #9
 8006666:	4413      	add	r3, r2
 8006668:	4619      	mov	r1, r3
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f7ff ff14 	bl	8006498 <move_window>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d167      	bne.n	8006746 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	60fa      	str	r2, [r7, #12]
 800667c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4413      	add	r3, r2
 8006684:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006688:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6a1a      	ldr	r2, [r3, #32]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	0a5b      	lsrs	r3, r3, #9
 8006692:	4413      	add	r3, r2
 8006694:	4619      	mov	r1, r3
 8006696:	6938      	ldr	r0, [r7, #16]
 8006698:	f7ff fefe 	bl	8006498 <move_window>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d153      	bne.n	800674a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4413      	add	r3, r2
 80066ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	461a      	mov	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <get_fat+0xbc>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	091b      	lsrs	r3, r3, #4
 80066c8:	e002      	b.n	80066d0 <get_fat+0xc2>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d0:	617b      	str	r3, [r7, #20]
			break;
 80066d2:	e03f      	b.n	8006754 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	6a1a      	ldr	r2, [r3, #32]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	0a1b      	lsrs	r3, r3, #8
 80066dc:	4413      	add	r3, r2
 80066de:	4619      	mov	r1, r3
 80066e0:	6938      	ldr	r0, [r7, #16]
 80066e2:	f7ff fed9 	bl	8006498 <move_window>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d130      	bne.n	800674e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80066fa:	4413      	add	r3, r2
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fc1b 	bl	8005f38 <ld_word>
 8006702:	4603      	mov	r3, r0
 8006704:	617b      	str	r3, [r7, #20]
			break;
 8006706:	e025      	b.n	8006754 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6a1a      	ldr	r2, [r3, #32]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	09db      	lsrs	r3, r3, #7
 8006710:	4413      	add	r3, r2
 8006712:	4619      	mov	r1, r3
 8006714:	6938      	ldr	r0, [r7, #16]
 8006716:	f7ff febf 	bl	8006498 <move_window>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d118      	bne.n	8006752 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800672e:	4413      	add	r3, r2
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff fc19 	bl	8005f68 <ld_dword>
 8006736:	4603      	mov	r3, r0
 8006738:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800673c:	617b      	str	r3, [r7, #20]
			break;
 800673e:	e009      	b.n	8006754 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006740:	2301      	movs	r3, #1
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e006      	b.n	8006754 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006746:	bf00      	nop
 8006748:	e004      	b.n	8006754 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800674a:	bf00      	nop
 800674c:	e002      	b.n	8006754 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800674e:	bf00      	nop
 8006750:	e000      	b.n	8006754 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006752:	bf00      	nop
		}
	}

	return val;
 8006754:	697b      	ldr	r3, [r7, #20]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800675e:	b590      	push	{r4, r7, lr}
 8006760:	b089      	sub	sp, #36	; 0x24
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800676a:	2302      	movs	r3, #2
 800676c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b01      	cmp	r3, #1
 8006772:	f240 80d2 	bls.w	800691a <put_fat+0x1bc>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	429a      	cmp	r2, r3
 800677e:	f080 80cc 	bcs.w	800691a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	2b03      	cmp	r3, #3
 8006788:	f000 8096 	beq.w	80068b8 <put_fat+0x15a>
 800678c:	2b03      	cmp	r3, #3
 800678e:	f300 80cd 	bgt.w	800692c <put_fat+0x1ce>
 8006792:	2b01      	cmp	r3, #1
 8006794:	d002      	beq.n	800679c <put_fat+0x3e>
 8006796:	2b02      	cmp	r3, #2
 8006798:	d06e      	beq.n	8006878 <put_fat+0x11a>
 800679a:	e0c7      	b.n	800692c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	085b      	lsrs	r3, r3, #1
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4413      	add	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	0a5b      	lsrs	r3, r3, #9
 80067b2:	4413      	add	r3, r2
 80067b4:	4619      	mov	r1, r3
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f7ff fe6e 	bl	8006498 <move_window>
 80067bc:	4603      	mov	r3, r0
 80067be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067c0:	7ffb      	ldrb	r3, [r7, #31]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f040 80ab 	bne.w	800691e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	61b9      	str	r1, [r7, #24]
 80067d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d8:	4413      	add	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00d      	beq.n	8006802 <put_fat+0xa4>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	b25b      	sxtb	r3, r3
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	b25a      	sxtb	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	b25b      	sxtb	r3, r3
 80067fa:	4313      	orrs	r3, r2
 80067fc:	b25b      	sxtb	r3, r3
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	e001      	b.n	8006806 <put_fat+0xa8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1a      	ldr	r2, [r3, #32]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	0a5b      	lsrs	r3, r3, #9
 8006818:	4413      	add	r3, r2
 800681a:	4619      	mov	r1, r3
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff fe3b 	bl	8006498 <move_window>
 8006822:	4603      	mov	r3, r0
 8006824:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006826:	7ffb      	ldrb	r3, [r7, #31]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d17a      	bne.n	8006922 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006838:	4413      	add	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <put_fat+0xf0>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	b2db      	uxtb	r3, r3
 800684c:	e00e      	b.n	800686c <put_fat+0x10e>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b25b      	sxtb	r3, r3
 8006854:	f023 030f 	bic.w	r3, r3, #15
 8006858:	b25a      	sxtb	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	0a1b      	lsrs	r3, r3, #8
 800685e:	b25b      	sxtb	r3, r3
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	b25b      	sxtb	r3, r3
 8006866:	4313      	orrs	r3, r2
 8006868:	b25b      	sxtb	r3, r3
 800686a:	b2db      	uxtb	r3, r3
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	70da      	strb	r2, [r3, #3]
			break;
 8006876:	e059      	b.n	800692c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	0a1b      	lsrs	r3, r3, #8
 8006880:	4413      	add	r3, r2
 8006882:	4619      	mov	r1, r3
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff fe07 	bl	8006498 <move_window>
 800688a:	4603      	mov	r3, r0
 800688c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800688e:	7ffb      	ldrb	r3, [r7, #31]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d148      	bne.n	8006926 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80068a2:	4413      	add	r3, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	b292      	uxth	r2, r2
 80068a8:	4611      	mov	r1, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff fb7f 	bl	8005fae <st_word>
			fs->wflag = 1;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	70da      	strb	r2, [r3, #3]
			break;
 80068b6:	e039      	b.n	800692c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1a      	ldr	r2, [r3, #32]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	09db      	lsrs	r3, r3, #7
 80068c0:	4413      	add	r3, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7ff fde7 	bl	8006498 <move_window>
 80068ca:	4603      	mov	r3, r0
 80068cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80068ce:	7ffb      	ldrb	r3, [r7, #31]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d12a      	bne.n	800692a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80068e8:	4413      	add	r3, r2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fb3c 	bl	8005f68 <ld_dword>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068f6:	4323      	orrs	r3, r4
 80068f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006908:	4413      	add	r3, r2
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fb69 	bl	8005fe4 <st_dword>
			fs->wflag = 1;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	70da      	strb	r2, [r3, #3]
			break;
 8006918:	e008      	b.n	800692c <put_fat+0x1ce>
		}
	}
 800691a:	bf00      	nop
 800691c:	e006      	b.n	800692c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800691e:	bf00      	nop
 8006920:	e004      	b.n	800692c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006922:	bf00      	nop
 8006924:	e002      	b.n	800692c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800692a:	bf00      	nop
	return res;
 800692c:	7ffb      	ldrb	r3, [r7, #31]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3724      	adds	r7, #36	; 0x24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd90      	pop	{r4, r7, pc}

08006936 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b088      	sub	sp, #32
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006942:	2300      	movs	r3, #0
 8006944:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d904      	bls.n	800695c <remove_chain+0x26>
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	429a      	cmp	r2, r3
 800695a:	d301      	bcc.n	8006960 <remove_chain+0x2a>
 800695c:	2302      	movs	r3, #2
 800695e:	e04b      	b.n	80069f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00c      	beq.n	8006980 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006966:	f04f 32ff 	mov.w	r2, #4294967295
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	69b8      	ldr	r0, [r7, #24]
 800696e:	f7ff fef6 	bl	800675e <put_fat>
 8006972:	4603      	mov	r3, r0
 8006974:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006976:	7ffb      	ldrb	r3, [r7, #31]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <remove_chain+0x4a>
 800697c:	7ffb      	ldrb	r3, [r7, #31]
 800697e:	e03b      	b.n	80069f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fe43 	bl	800660e <get_fat>
 8006988:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d031      	beq.n	80069f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <remove_chain+0x64>
 8006996:	2302      	movs	r3, #2
 8006998:	e02e      	b.n	80069f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d101      	bne.n	80069a6 <remove_chain+0x70>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e028      	b.n	80069f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80069a6:	2200      	movs	r2, #0
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	69b8      	ldr	r0, [r7, #24]
 80069ac:	f7ff fed7 	bl	800675e <put_fat>
 80069b0:	4603      	mov	r3, r0
 80069b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80069b4:	7ffb      	ldrb	r3, [r7, #31]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <remove_chain+0x88>
 80069ba:	7ffb      	ldrb	r3, [r7, #31]
 80069bc:	e01c      	b.n	80069f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	3b02      	subs	r3, #2
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d20b      	bcs.n	80069e4 <remove_chain+0xae>
			fs->free_clst++;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	791b      	ldrb	r3, [r3, #4]
 80069da:	f043 0301 	orr.w	r3, r3, #1
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d3c6      	bcc.n	8006980 <remove_chain+0x4a>
 80069f2:	e000      	b.n	80069f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80069f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3720      	adds	r7, #32
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10d      	bne.n	8006a32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <create_chain+0x2c>
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d31b      	bcc.n	8006a64 <create_chain+0x64>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	e018      	b.n	8006a64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff fdea 	bl	800660e <get_fat>
 8006a3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d801      	bhi.n	8006a46 <create_chain+0x46>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e070      	b.n	8006b28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d101      	bne.n	8006a52 <create_chain+0x52>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	e06a      	b.n	8006b28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d201      	bcs.n	8006a60 <create_chain+0x60>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	e063      	b.n	8006b28 <create_chain+0x128>
		scl = clst;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d307      	bcc.n	8006a88 <create_chain+0x88>
				ncl = 2;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006a7c:	69fa      	ldr	r2, [r7, #28]
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d901      	bls.n	8006a88 <create_chain+0x88>
 8006a84:	2300      	movs	r3, #0
 8006a86:	e04f      	b.n	8006b28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006a88:	69f9      	ldr	r1, [r7, #28]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff fdbf 	bl	800660e <get_fat>
 8006a90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d003      	beq.n	8006aa6 <create_chain+0xa6>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa4:	d101      	bne.n	8006aaa <create_chain+0xaa>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	e03e      	b.n	8006b28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d1da      	bne.n	8006a68 <create_chain+0x68>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e038      	b.n	8006b28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006ab6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	69f9      	ldr	r1, [r7, #28]
 8006abe:	6938      	ldr	r0, [r7, #16]
 8006ac0:	f7ff fe4d 	bl	800675e <put_fat>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d109      	bne.n	8006ae2 <create_chain+0xe2>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d006      	beq.n	8006ae2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006ad4:	69fa      	ldr	r2, [r7, #28]
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6938      	ldr	r0, [r7, #16]
 8006ada:	f7ff fe40 	bl	800675e <put_fat>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d116      	bne.n	8006b16 <create_chain+0x116>
		fs->last_clst = ncl;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	3b02      	subs	r3, #2
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d804      	bhi.n	8006b06 <create_chain+0x106>
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	1e5a      	subs	r2, r3, #1
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	791b      	ldrb	r3, [r3, #4]
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	711a      	strb	r2, [r3, #4]
 8006b14:	e007      	b.n	8006b26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006b16:	7dfb      	ldrb	r3, [r7, #23]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d102      	bne.n	8006b22 <create_chain+0x122>
 8006b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b20:	e000      	b.n	8006b24 <create_chain+0x124>
 8006b22:	2301      	movs	r3, #1
 8006b24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006b26:	69fb      	ldr	r3, [r7, #28]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3720      	adds	r7, #32
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	3304      	adds	r3, #4
 8006b46:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	0a5b      	lsrs	r3, r3, #9
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	8952      	ldrh	r2, [r2, #10]
 8006b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b54:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1d1a      	adds	r2, r3, #4
 8006b5a:	613a      	str	r2, [r7, #16]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <clmt_clust+0x3a>
 8006b66:	2300      	movs	r3, #0
 8006b68:	e010      	b.n	8006b8c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d307      	bcc.n	8006b82 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006b80:	e7e9      	b.n	8006b56 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006b82:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	4413      	add	r3, r2
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bae:	d204      	bcs.n	8006bba <dir_sdi+0x22>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <dir_sdi+0x26>
		return FR_INT_ERR;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e063      	b.n	8006c86 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d106      	bne.n	8006bde <dir_sdi+0x46>
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d902      	bls.n	8006bde <dir_sdi+0x46>
		clst = fs->dirbase;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10c      	bne.n	8006bfe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	8912      	ldrh	r2, [r2, #8]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d301      	bcc.n	8006bf4 <dir_sdi+0x5c>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e048      	b.n	8006c86 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	61da      	str	r2, [r3, #28]
 8006bfc:	e029      	b.n	8006c52 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	895b      	ldrh	r3, [r3, #10]
 8006c02:	025b      	lsls	r3, r3, #9
 8006c04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c06:	e019      	b.n	8006c3c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6979      	ldr	r1, [r7, #20]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fcfe 	bl	800660e <get_fat>
 8006c12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1a:	d101      	bne.n	8006c20 <dir_sdi+0x88>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e032      	b.n	8006c86 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d904      	bls.n	8006c30 <dir_sdi+0x98>
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d301      	bcc.n	8006c34 <dir_sdi+0x9c>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e028      	b.n	8006c86 <dir_sdi+0xee>
			ofs -= csz;
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d2e1      	bcs.n	8006c08 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006c44:	6979      	ldr	r1, [r7, #20]
 8006c46:	6938      	ldr	r0, [r7, #16]
 8006c48:	f7ff fcc2 	bl	80065d0 <clust2sect>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <dir_sdi+0xcc>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e010      	b.n	8006c86 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	0a5b      	lsrs	r3, r3, #9
 8006c6c:	441a      	add	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7e:	441a      	add	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b086      	sub	sp, #24
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	3320      	adds	r3, #32
 8006ca4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <dir_next+0x28>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cb4:	d301      	bcc.n	8006cba <dir_next+0x2c>
 8006cb6:	2304      	movs	r3, #4
 8006cb8:	e0aa      	b.n	8006e10 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f040 8098 	bne.w	8006df6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	095b      	lsrs	r3, r3, #5
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	8912      	ldrh	r2, [r2, #8]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	f0c0 8088 	bcc.w	8006df6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	61da      	str	r2, [r3, #28]
 8006cec:	2304      	movs	r3, #4
 8006cee:	e08f      	b.n	8006e10 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	0a5b      	lsrs	r3, r3, #9
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	8952      	ldrh	r2, [r2, #10]
 8006cf8:	3a01      	subs	r2, #1
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d17a      	bne.n	8006df6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7ff fc80 	bl	800660e <get_fat>
 8006d0e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d801      	bhi.n	8006d1a <dir_next+0x8c>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e07a      	b.n	8006e10 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d20:	d101      	bne.n	8006d26 <dir_next+0x98>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e074      	b.n	8006e10 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d358      	bcc.n	8006de2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	61da      	str	r2, [r3, #28]
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	e067      	b.n	8006e10 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f7ff fe59 	bl	8006a00 <create_chain>
 8006d4e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <dir_next+0xcc>
 8006d56:	2307      	movs	r3, #7
 8006d58:	e05a      	b.n	8006e10 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <dir_next+0xd6>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e055      	b.n	8006e10 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6a:	d101      	bne.n	8006d70 <dir_next+0xe2>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e04f      	b.n	8006e10 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff fb4d 	bl	8006410 <sync_window>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <dir_next+0xf2>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e047      	b.n	8006e10 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3330      	adds	r3, #48	; 0x30
 8006d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff f977 	bl	800607e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	6979      	ldr	r1, [r7, #20]
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff fc1a 	bl	80065d0 <clust2sect>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8006da2:	e012      	b.n	8006dca <dir_next+0x13c>
						fs->wflag = 1;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f7ff fb30 	bl	8006410 <sync_window>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <dir_next+0x12c>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e02a      	b.n	8006e10 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	895b      	ldrh	r3, [r3, #10]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d3e6      	bcc.n	8006da4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad2      	subs	r2, r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006de8:	6979      	ldr	r1, [r7, #20]
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fbf0 	bl	80065d0 <clust2sect>
 8006df0:	4602      	mov	r2, r0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e08:	441a      	add	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff feb4 	bl	8006b98 <dir_sdi>
 8006e30:	4603      	mov	r3, r0
 8006e32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e34:	7dfb      	ldrb	r3, [r7, #23]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d12b      	bne.n	8006e92 <dir_alloc+0x7a>
		n = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	4619      	mov	r1, r3
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7ff fb27 	bl	8006498 <move_window>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11d      	bne.n	8006e90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2be5      	cmp	r3, #229	; 0xe5
 8006e5c:	d004      	beq.n	8006e68 <dir_alloc+0x50>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d107      	bne.n	8006e78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	613b      	str	r3, [r7, #16]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d102      	bne.n	8006e7c <dir_alloc+0x64>
 8006e76:	e00c      	b.n	8006e92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006e78:	2300      	movs	r3, #0
 8006e7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff ff05 	bl	8006c8e <dir_next>
 8006e84:	4603      	mov	r3, r0
 8006e86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0d7      	beq.n	8006e3e <dir_alloc+0x26>
 8006e8e:	e000      	b.n	8006e92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006e90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d101      	bne.n	8006e9c <dir_alloc+0x84>
 8006e98:	2307      	movs	r3, #7
 8006e9a:	75fb      	strb	r3, [r7, #23]
	return res;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	331a      	adds	r3, #26
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff f83f 	bl	8005f38 <ld_word>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d109      	bne.n	8006eda <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	3314      	adds	r3, #20
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff f834 	bl	8005f38 <ld_word>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	041b      	lsls	r3, r3, #16
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006eda:	68fb      	ldr	r3, [r7, #12]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	331a      	adds	r3, #26
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	b292      	uxth	r2, r2
 8006ef8:	4611      	mov	r1, r2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff f857 	bl	8005fae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d109      	bne.n	8006f1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f103 0214 	add.w	r2, r3, #20
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	0c1b      	lsrs	r3, r3, #16
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f7ff f849 	bl	8005fae <st_word>
	}
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006f32:	2100      	movs	r1, #0
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fe2f 	bl	8006b98 <dir_sdi>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006f3e:	7dfb      	ldrb	r3, [r7, #23]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <dir_find+0x24>
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
 8006f46:	e03e      	b.n	8006fc6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6938      	ldr	r0, [r7, #16]
 8006f50:	f7ff faa2 	bl	8006498 <move_window>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d12f      	bne.n	8006fbe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d102      	bne.n	8006f72 <dir_find+0x4e>
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	75fb      	strb	r3, [r7, #23]
 8006f70:	e028      	b.n	8006fc4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	330b      	adds	r3, #11
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	330b      	adds	r3, #11
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 0308 	and.w	r3, r3, #8
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <dir_find+0x86>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a18      	ldr	r0, [r3, #32]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	3324      	adds	r3, #36	; 0x24
 8006f9c:	220b      	movs	r2, #11
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	f7ff f888 	bl	80060b4 <mem_cmp>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006faa:	2100      	movs	r1, #0
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fe6e 	bl	8006c8e <dir_next>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d0c5      	beq.n	8006f48 <dir_find+0x24>
 8006fbc:	e002      	b.n	8006fc4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006fbe:	bf00      	nop
 8006fc0:	e000      	b.n	8006fc4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006fc2:	bf00      	nop

	return res;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006fdc:	2101      	movs	r1, #1
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff ff1a 	bl	8006e18 <dir_alloc>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d11c      	bne.n	8007028 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	68b8      	ldr	r0, [r7, #8]
 8006ff6:	f7ff fa4f 	bl	8006498 <move_window>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d111      	bne.n	8007028 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	2220      	movs	r2, #32
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff f836 	bl	800607e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a18      	ldr	r0, [r3, #32]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3324      	adds	r3, #36	; 0x24
 800701a:	220b      	movs	r2, #11
 800701c:	4619      	mov	r1, r3
 800701e:	f7ff f80d 	bl	800603c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2201      	movs	r2, #1
 8007026:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3324      	adds	r3, #36	; 0x24
 8007048:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800704a:	220b      	movs	r2, #11
 800704c:	2120      	movs	r1, #32
 800704e:	68b8      	ldr	r0, [r7, #8]
 8007050:	f7ff f815 	bl	800607e <mem_set>
	si = i = 0; ni = 8;
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	2308      	movs	r3, #8
 800705e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	61fa      	str	r2, [r7, #28]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800706e:	7efb      	ldrb	r3, [r7, #27]
 8007070:	2b20      	cmp	r3, #32
 8007072:	d94e      	bls.n	8007112 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007074:	7efb      	ldrb	r3, [r7, #27]
 8007076:	2b2f      	cmp	r3, #47	; 0x2f
 8007078:	d006      	beq.n	8007088 <create_name+0x54>
 800707a:	7efb      	ldrb	r3, [r7, #27]
 800707c:	2b5c      	cmp	r3, #92	; 0x5c
 800707e:	d110      	bne.n	80070a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007080:	e002      	b.n	8007088 <create_name+0x54>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	3301      	adds	r3, #1
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b2f      	cmp	r3, #47	; 0x2f
 8007092:	d0f6      	beq.n	8007082 <create_name+0x4e>
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b5c      	cmp	r3, #92	; 0x5c
 800709e:	d0f0      	beq.n	8007082 <create_name+0x4e>
			break;
 80070a0:	e038      	b.n	8007114 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80070a2:	7efb      	ldrb	r3, [r7, #27]
 80070a4:	2b2e      	cmp	r3, #46	; 0x2e
 80070a6:	d003      	beq.n	80070b0 <create_name+0x7c>
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d30c      	bcc.n	80070ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b0b      	cmp	r3, #11
 80070b4:	d002      	beq.n	80070bc <create_name+0x88>
 80070b6:	7efb      	ldrb	r3, [r7, #27]
 80070b8:	2b2e      	cmp	r3, #46	; 0x2e
 80070ba:	d001      	beq.n	80070c0 <create_name+0x8c>
 80070bc:	2306      	movs	r3, #6
 80070be:	e044      	b.n	800714a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80070c0:	2308      	movs	r3, #8
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	230b      	movs	r3, #11
 80070c6:	617b      	str	r3, [r7, #20]
			continue;
 80070c8:	e022      	b.n	8007110 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80070ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da04      	bge.n	80070dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80070d2:	7efb      	ldrb	r3, [r7, #27]
 80070d4:	3b80      	subs	r3, #128	; 0x80
 80070d6:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <create_name+0x120>)
 80070d8:	5cd3      	ldrb	r3, [r2, r3]
 80070da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80070dc:	7efb      	ldrb	r3, [r7, #27]
 80070de:	4619      	mov	r1, r3
 80070e0:	481d      	ldr	r0, [pc, #116]	; (8007158 <create_name+0x124>)
 80070e2:	f7ff f80e 	bl	8006102 <chk_chr>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d001      	beq.n	80070f0 <create_name+0xbc>
 80070ec:	2306      	movs	r3, #6
 80070ee:	e02c      	b.n	800714a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80070f0:	7efb      	ldrb	r3, [r7, #27]
 80070f2:	2b60      	cmp	r3, #96	; 0x60
 80070f4:	d905      	bls.n	8007102 <create_name+0xce>
 80070f6:	7efb      	ldrb	r3, [r7, #27]
 80070f8:	2b7a      	cmp	r3, #122	; 0x7a
 80070fa:	d802      	bhi.n	8007102 <create_name+0xce>
 80070fc:	7efb      	ldrb	r3, [r7, #27]
 80070fe:	3b20      	subs	r3, #32
 8007100:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	613a      	str	r2, [r7, #16]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	4413      	add	r3, r2
 800710c:	7efa      	ldrb	r2, [r7, #27]
 800710e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007110:	e7a6      	b.n	8007060 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007112:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	441a      	add	r2, r3
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <create_name+0xf4>
 8007124:	2306      	movs	r3, #6
 8007126:	e010      	b.n	800714a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	2be5      	cmp	r3, #229	; 0xe5
 800712e:	d102      	bne.n	8007136 <create_name+0x102>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2205      	movs	r2, #5
 8007134:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007136:	7efb      	ldrb	r3, [r7, #27]
 8007138:	2b20      	cmp	r3, #32
 800713a:	d801      	bhi.n	8007140 <create_name+0x10c>
 800713c:	2204      	movs	r2, #4
 800713e:	e000      	b.n	8007142 <create_name+0x10e>
 8007140:	2200      	movs	r2, #0
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	330b      	adds	r3, #11
 8007146:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007148:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	080093b0 	.word	0x080093b0
 8007158:	08009338 	.word	0x08009338

0800715c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007170:	e002      	b.n	8007178 <follow_path+0x1c>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b2f      	cmp	r3, #47	; 0x2f
 800717e:	d0f8      	beq.n	8007172 <follow_path+0x16>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b5c      	cmp	r3, #92	; 0x5c
 8007186:	d0f4      	beq.n	8007172 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2200      	movs	r2, #0
 800718c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b1f      	cmp	r3, #31
 8007194:	d80a      	bhi.n	80071ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2280      	movs	r2, #128	; 0x80
 800719a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800719e:	2100      	movs	r1, #0
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fcf9 	bl	8006b98 <dir_sdi>
 80071a6:	4603      	mov	r3, r0
 80071a8:	75fb      	strb	r3, [r7, #23]
 80071aa:	e043      	b.n	8007234 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80071ac:	463b      	mov	r3, r7
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff ff3f 	bl	8007034 <create_name>
 80071b6:	4603      	mov	r3, r0
 80071b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d134      	bne.n	800722a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff feaf 	bl	8006f24 <dir_find>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80071d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d127      	bne.n	800722e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80071de:	7afb      	ldrb	r3, [r7, #11]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d122      	bne.n	800722e <follow_path+0xd2>
 80071e8:	2305      	movs	r3, #5
 80071ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80071ec:	e01f      	b.n	800722e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80071ee:	7afb      	ldrb	r3, [r7, #11]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d11c      	bne.n	8007232 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	799b      	ldrb	r3, [r3, #6]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007204:	2305      	movs	r3, #5
 8007206:	75fb      	strb	r3, [r7, #23]
 8007208:	e014      	b.n	8007234 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007218:	4413      	add	r3, r2
 800721a:	4619      	mov	r1, r3
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff fe42 	bl	8006ea6 <ld_clust>
 8007222:	4602      	mov	r2, r0
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007228:	e7c0      	b.n	80071ac <follow_path+0x50>
			if (res != FR_OK) break;
 800722a:	bf00      	nop
 800722c:	e002      	b.n	8007234 <follow_path+0xd8>
				break;
 800722e:	bf00      	nop
 8007230:	e000      	b.n	8007234 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007232:	bf00      	nop
			}
		}
	}

	return res;
 8007234:	7dfb      	ldrb	r3, [r7, #23]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800723e:	b480      	push	{r7}
 8007240:	b087      	sub	sp, #28
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007246:	f04f 33ff 	mov.w	r3, #4294967295
 800724a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d031      	beq.n	80072b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	e002      	b.n	8007262 <get_ldnumber+0x24>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	3301      	adds	r3, #1
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b20      	cmp	r3, #32
 8007268:	d903      	bls.n	8007272 <get_ldnumber+0x34>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b3a      	cmp	r3, #58	; 0x3a
 8007270:	d1f4      	bne.n	800725c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b3a      	cmp	r3, #58	; 0x3a
 8007278:	d11c      	bne.n	80072b4 <get_ldnumber+0x76>
			tp = *path;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	60fa      	str	r2, [r7, #12]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	3b30      	subs	r3, #48	; 0x30
 800728a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b09      	cmp	r3, #9
 8007290:	d80e      	bhi.n	80072b0 <get_ldnumber+0x72>
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	429a      	cmp	r2, r3
 8007298:	d10a      	bne.n	80072b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d107      	bne.n	80072b0 <get_ldnumber+0x72>
					vol = (int)i;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	3301      	adds	r3, #1
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	e002      	b.n	80072ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80072b4:	2300      	movs	r3, #0
 80072b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80072b8:	693b      	ldr	r3, [r7, #16]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
	...

080072c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	70da      	strb	r2, [r3, #3]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f04f 32ff 	mov.w	r2, #4294967295
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff f8d8 	bl	8006498 <move_window>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <check_fs+0x2a>
 80072ee:	2304      	movs	r3, #4
 80072f0:	e038      	b.n	8007364 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3330      	adds	r3, #48	; 0x30
 80072f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe fe1c 	bl	8005f38 <ld_word>
 8007300:	4603      	mov	r3, r0
 8007302:	461a      	mov	r2, r3
 8007304:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007308:	429a      	cmp	r2, r3
 800730a:	d001      	beq.n	8007310 <check_fs+0x48>
 800730c:	2303      	movs	r3, #3
 800730e:	e029      	b.n	8007364 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007316:	2be9      	cmp	r3, #233	; 0xe9
 8007318:	d009      	beq.n	800732e <check_fs+0x66>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007320:	2beb      	cmp	r3, #235	; 0xeb
 8007322:	d11e      	bne.n	8007362 <check_fs+0x9a>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800732a:	2b90      	cmp	r3, #144	; 0x90
 800732c:	d119      	bne.n	8007362 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3330      	adds	r3, #48	; 0x30
 8007332:	3336      	adds	r3, #54	; 0x36
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe fe17 	bl	8005f68 <ld_dword>
 800733a:	4603      	mov	r3, r0
 800733c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007340:	4a0a      	ldr	r2, [pc, #40]	; (800736c <check_fs+0xa4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d101      	bne.n	800734a <check_fs+0x82>
 8007346:	2300      	movs	r3, #0
 8007348:	e00c      	b.n	8007364 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3330      	adds	r3, #48	; 0x30
 800734e:	3352      	adds	r3, #82	; 0x52
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe fe09 	bl	8005f68 <ld_dword>
 8007356:	4603      	mov	r3, r0
 8007358:	4a05      	ldr	r2, [pc, #20]	; (8007370 <check_fs+0xa8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d101      	bne.n	8007362 <check_fs+0x9a>
 800735e:	2300      	movs	r3, #0
 8007360:	e000      	b.n	8007364 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007362:	2302      	movs	r3, #2
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	00544146 	.word	0x00544146
 8007370:	33544146 	.word	0x33544146

08007374 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b096      	sub	sp, #88	; 0x58
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	4613      	mov	r3, r2
 8007380:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff ff58 	bl	800723e <get_ldnumber>
 800738e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007392:	2b00      	cmp	r3, #0
 8007394:	da01      	bge.n	800739a <find_volume+0x26>
 8007396:	230b      	movs	r3, #11
 8007398:	e22d      	b.n	80077f6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800739a:	4aa1      	ldr	r2, [pc, #644]	; (8007620 <find_volume+0x2ac>)
 800739c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <find_volume+0x3a>
 80073aa:	230c      	movs	r3, #12
 80073ac:	e223      	b.n	80077f6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01a      	beq.n	80073fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	785b      	ldrb	r3, [r3, #1]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fd17 	bl	8005dfc <disk_status>
 80073ce:	4603      	mov	r3, r0
 80073d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80073d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10c      	bne.n	80073fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d007      	beq.n	80073f6 <find_volume+0x82>
 80073e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80073f2:	230a      	movs	r3, #10
 80073f4:	e1ff      	b.n	80077f6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80073f6:	2300      	movs	r3, #0
 80073f8:	e1fd      	b.n	80077f6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007402:	b2da      	uxtb	r2, r3
 8007404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007406:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	4618      	mov	r0, r3
 800740e:	f7fe fd0f 	bl	8005e30 <disk_initialize>
 8007412:	4603      	mov	r3, r0
 8007414:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007418:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007424:	2303      	movs	r3, #3
 8007426:	e1e6      	b.n	80077f6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d007      	beq.n	800743e <find_volume+0xca>
 800742e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800743a:	230a      	movs	r3, #10
 800743c:	e1db      	b.n	80077f6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007442:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007446:	f7ff ff3f 	bl	80072c8 <check_fs>
 800744a:	4603      	mov	r3, r0
 800744c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007454:	2b02      	cmp	r3, #2
 8007456:	d149      	bne.n	80074ec <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007458:	2300      	movs	r3, #0
 800745a:	643b      	str	r3, [r7, #64]	; 0x40
 800745c:	e01e      	b.n	800749c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800746c:	4413      	add	r3, r2
 800746e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	3304      	adds	r3, #4
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d006      	beq.n	8007488 <find_volume+0x114>
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	3308      	adds	r3, #8
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fd72 	bl	8005f68 <ld_dword>
 8007484:	4602      	mov	r2, r0
 8007486:	e000      	b.n	800748a <find_volume+0x116>
 8007488:	2200      	movs	r2, #0
 800748a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	3358      	adds	r3, #88	; 0x58
 8007490:	443b      	add	r3, r7
 8007492:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007498:	3301      	adds	r3, #1
 800749a:	643b      	str	r3, [r7, #64]	; 0x40
 800749c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d9dd      	bls.n	800745e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80074a2:	2300      	movs	r3, #0
 80074a4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80074a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <find_volume+0x13e>
 80074ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ae:	3b01      	subs	r3, #1
 80074b0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80074b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	3358      	adds	r3, #88	; 0x58
 80074b8:	443b      	add	r3, r7
 80074ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80074be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80074c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <find_volume+0x15e>
 80074c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80074c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074ca:	f7ff fefd 	bl	80072c8 <check_fs>
 80074ce:	4603      	mov	r3, r0
 80074d0:	e000      	b.n	80074d4 <find_volume+0x160>
 80074d2:	2303      	movs	r3, #3
 80074d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80074d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d905      	bls.n	80074ec <find_volume+0x178>
 80074e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e2:	3301      	adds	r3, #1
 80074e4:	643b      	str	r3, [r7, #64]	; 0x40
 80074e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d9e2      	bls.n	80074b2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80074ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d101      	bne.n	80074f8 <find_volume+0x184>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e17e      	b.n	80077f6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80074f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d901      	bls.n	8007504 <find_volume+0x190>
 8007500:	230d      	movs	r3, #13
 8007502:	e178      	b.n	80077f6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	3330      	adds	r3, #48	; 0x30
 8007508:	330b      	adds	r3, #11
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fd14 	bl	8005f38 <ld_word>
 8007510:	4603      	mov	r3, r0
 8007512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007516:	d001      	beq.n	800751c <find_volume+0x1a8>
 8007518:	230d      	movs	r3, #13
 800751a:	e16c      	b.n	80077f6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	3330      	adds	r3, #48	; 0x30
 8007520:	3316      	adds	r3, #22
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fd08 	bl	8005f38 <ld_word>
 8007528:	4603      	mov	r3, r0
 800752a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800752c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <find_volume+0x1cc>
 8007532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007534:	3330      	adds	r3, #48	; 0x30
 8007536:	3324      	adds	r3, #36	; 0x24
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe fd15 	bl	8005f68 <ld_dword>
 800753e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007544:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007552:	789b      	ldrb	r3, [r3, #2]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d005      	beq.n	8007564 <find_volume+0x1f0>
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	789b      	ldrb	r3, [r3, #2]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d001      	beq.n	8007564 <find_volume+0x1f0>
 8007560:	230d      	movs	r3, #13
 8007562:	e148      	b.n	80077f6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	789b      	ldrb	r3, [r3, #2]
 8007568:	461a      	mov	r2, r3
 800756a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800756c:	fb02 f303 	mul.w	r3, r2, r3
 8007570:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007578:	b29a      	uxth	r2, r3
 800757a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007580:	895b      	ldrh	r3, [r3, #10]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d008      	beq.n	8007598 <find_volume+0x224>
 8007586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007588:	895b      	ldrh	r3, [r3, #10]
 800758a:	461a      	mov	r2, r3
 800758c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758e:	895b      	ldrh	r3, [r3, #10]
 8007590:	3b01      	subs	r3, #1
 8007592:	4013      	ands	r3, r2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <find_volume+0x228>
 8007598:	230d      	movs	r3, #13
 800759a:	e12c      	b.n	80077f6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759e:	3330      	adds	r3, #48	; 0x30
 80075a0:	3311      	adds	r3, #17
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe fcc8 	bl	8005f38 <ld_word>
 80075a8:	4603      	mov	r3, r0
 80075aa:	461a      	mov	r2, r3
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	891b      	ldrh	r3, [r3, #8]
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <find_volume+0x24e>
 80075be:	230d      	movs	r3, #13
 80075c0:	e119      	b.n	80077f6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c4:	3330      	adds	r3, #48	; 0x30
 80075c6:	3313      	adds	r3, #19
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe fcb5 	bl	8005f38 <ld_word>
 80075ce:	4603      	mov	r3, r0
 80075d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80075d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <find_volume+0x272>
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	3330      	adds	r3, #48	; 0x30
 80075dc:	3320      	adds	r3, #32
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fcc2 	bl	8005f68 <ld_dword>
 80075e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	3330      	adds	r3, #48	; 0x30
 80075ea:	330e      	adds	r3, #14
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fca3 	bl	8005f38 <ld_word>
 80075f2:	4603      	mov	r3, r0
 80075f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80075f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <find_volume+0x28c>
 80075fc:	230d      	movs	r3, #13
 80075fe:	e0fa      	b.n	80077f6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007600:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007604:	4413      	add	r3, r2
 8007606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007608:	8912      	ldrh	r2, [r2, #8]
 800760a:	0912      	lsrs	r2, r2, #4
 800760c:	b292      	uxth	r2, r2
 800760e:	4413      	add	r3, r2
 8007610:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	429a      	cmp	r2, r3
 8007618:	d204      	bcs.n	8007624 <find_volume+0x2b0>
 800761a:	230d      	movs	r3, #13
 800761c:	e0eb      	b.n	80077f6 <find_volume+0x482>
 800761e:	bf00      	nop
 8007620:	200006cc 	.word	0x200006cc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800762c:	8952      	ldrh	r2, [r2, #10]
 800762e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <find_volume+0x2ca>
 800763a:	230d      	movs	r3, #13
 800763c:	e0db      	b.n	80077f6 <find_volume+0x482>
		fmt = FS_FAT32;
 800763e:	2303      	movs	r3, #3
 8007640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800764a:	4293      	cmp	r3, r2
 800764c:	d802      	bhi.n	8007654 <find_volume+0x2e0>
 800764e:	2302      	movs	r3, #2
 8007650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	f640 72f5 	movw	r2, #4085	; 0xff5
 800765a:	4293      	cmp	r3, r2
 800765c:	d802      	bhi.n	8007664 <find_volume+0x2f0>
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	1c9a      	adds	r2, r3, #2
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007670:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007672:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007676:	441a      	add	r2, r3
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800767c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	441a      	add	r2, r3
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800768a:	2b03      	cmp	r3, #3
 800768c:	d11e      	bne.n	80076cc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	3330      	adds	r3, #48	; 0x30
 8007692:	332a      	adds	r3, #42	; 0x2a
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe fc4f 	bl	8005f38 <ld_word>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <find_volume+0x330>
 80076a0:	230d      	movs	r3, #13
 80076a2:	e0a8      	b.n	80077f6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	891b      	ldrh	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <find_volume+0x33c>
 80076ac:	230d      	movs	r3, #13
 80076ae:	e0a2      	b.n	80077f6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	3330      	adds	r3, #48	; 0x30
 80076b4:	332c      	adds	r3, #44	; 0x2c
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe fc56 	bl	8005f68 <ld_dword>
 80076bc:	4602      	mov	r2, r0
 80076be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80076c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	647b      	str	r3, [r7, #68]	; 0x44
 80076ca:	e01f      	b.n	800770c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80076cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ce:	891b      	ldrh	r3, [r3, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <find_volume+0x364>
 80076d4:	230d      	movs	r3, #13
 80076d6:	e08e      	b.n	80077f6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	6a1a      	ldr	r2, [r3, #32]
 80076dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076de:	441a      	add	r2, r3
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80076e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d103      	bne.n	80076f4 <find_volume+0x380>
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	e00a      	b.n	800770a <find_volume+0x396>
 80076f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f6:	695a      	ldr	r2, [r3, #20]
 80076f8:	4613      	mov	r3, r2
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	4413      	add	r3, r2
 80076fe:	085a      	lsrs	r2, r3, #1
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800770a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800770c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007712:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007716:	0a5b      	lsrs	r3, r3, #9
 8007718:	429a      	cmp	r2, r3
 800771a:	d201      	bcs.n	8007720 <find_volume+0x3ac>
 800771c:	230d      	movs	r3, #13
 800771e:	e06a      	b.n	80077f6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	f04f 32ff 	mov.w	r2, #4294967295
 8007726:	611a      	str	r2, [r3, #16]
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	691a      	ldr	r2, [r3, #16]
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	2280      	movs	r2, #128	; 0x80
 8007734:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007736:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800773a:	2b03      	cmp	r3, #3
 800773c:	d149      	bne.n	80077d2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	3330      	adds	r3, #48	; 0x30
 8007742:	3330      	adds	r3, #48	; 0x30
 8007744:	4618      	mov	r0, r3
 8007746:	f7fe fbf7 	bl	8005f38 <ld_word>
 800774a:	4603      	mov	r3, r0
 800774c:	2b01      	cmp	r3, #1
 800774e:	d140      	bne.n	80077d2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007752:	3301      	adds	r3, #1
 8007754:	4619      	mov	r1, r3
 8007756:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007758:	f7fe fe9e 	bl	8006498 <move_window>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d137      	bne.n	80077d2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	2200      	movs	r2, #0
 8007766:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	3330      	adds	r3, #48	; 0x30
 800776c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe fbe1 	bl	8005f38 <ld_word>
 8007776:	4603      	mov	r3, r0
 8007778:	461a      	mov	r2, r3
 800777a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800777e:	429a      	cmp	r2, r3
 8007780:	d127      	bne.n	80077d2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	3330      	adds	r3, #48	; 0x30
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fbee 	bl	8005f68 <ld_dword>
 800778c:	4603      	mov	r3, r0
 800778e:	4a1c      	ldr	r2, [pc, #112]	; (8007800 <find_volume+0x48c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d11e      	bne.n	80077d2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	3330      	adds	r3, #48	; 0x30
 8007798:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fbe3 	bl	8005f68 <ld_dword>
 80077a2:	4603      	mov	r3, r0
 80077a4:	4a17      	ldr	r2, [pc, #92]	; (8007804 <find_volume+0x490>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d113      	bne.n	80077d2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	3330      	adds	r3, #48	; 0x30
 80077ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fbd8 	bl	8005f68 <ld_dword>
 80077b8:	4602      	mov	r2, r0
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	3330      	adds	r3, #48	; 0x30
 80077c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fe fbce 	bl	8005f68 <ld_dword>
 80077cc:	4602      	mov	r2, r0
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80077d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <find_volume+0x494>)
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	3301      	adds	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	4b09      	ldr	r3, [pc, #36]	; (8007808 <find_volume+0x494>)
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	4b08      	ldr	r3, [pc, #32]	; (8007808 <find_volume+0x494>)
 80077e8:	881a      	ldrh	r2, [r3, #0]
 80077ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80077ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077f0:	f7fe fdea 	bl	80063c8 <clear_lock>
#endif
	return FR_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3758      	adds	r7, #88	; 0x58
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	41615252 	.word	0x41615252
 8007804:	61417272 	.word	0x61417272
 8007808:	200006d0 	.word	0x200006d0

0800780c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007816:	2309      	movs	r3, #9
 8007818:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01c      	beq.n	800785a <validate+0x4e>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d018      	beq.n	800785a <validate+0x4e>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d013      	beq.n	800785a <validate+0x4e>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	889a      	ldrh	r2, [r3, #4]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	88db      	ldrh	r3, [r3, #6]
 800783c:	429a      	cmp	r2, r3
 800783e:	d10c      	bne.n	800785a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fad8 	bl	8005dfc <disk_status>
 800784c:	4603      	mov	r3, r0
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <validate+0x4e>
			res = FR_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <validate+0x5a>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	e000      	b.n	8007868 <validate+0x5c>
 8007866:	2300      	movs	r3, #0
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	6013      	str	r3, [r2, #0]
	return res;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800788a:	f107 0310 	add.w	r3, r7, #16
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fcd5 	bl	800723e <get_ldnumber>
 8007894:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da01      	bge.n	80078a0 <f_mount+0x28>
 800789c:	230b      	movs	r3, #11
 800789e:	e02b      	b.n	80078f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80078a0:	4a17      	ldr	r2, [pc, #92]	; (8007900 <f_mount+0x88>)
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80078b0:	69b8      	ldr	r0, [r7, #24]
 80078b2:	f7fe fd89 	bl	80063c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	2200      	movs	r2, #0
 80078ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	490d      	ldr	r1, [pc, #52]	; (8007900 <f_mount+0x88>)
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <f_mount+0x66>
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d001      	beq.n	80078e2 <f_mount+0x6a>
 80078de:	2300      	movs	r3, #0
 80078e0:	e00a      	b.n	80078f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80078e2:	f107 010c 	add.w	r1, r7, #12
 80078e6:	f107 0308 	add.w	r3, r7, #8
 80078ea:	2200      	movs	r2, #0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff fd41 	bl	8007374 <find_volume>
 80078f2:	4603      	mov	r3, r0
 80078f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	200006cc 	.word	0x200006cc

08007904 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b098      	sub	sp, #96	; 0x60
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	4613      	mov	r3, r2
 8007910:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <f_open+0x18>
 8007918:	2309      	movs	r3, #9
 800791a:	e1ad      	b.n	8007c78 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007922:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007924:	79fa      	ldrb	r2, [r7, #7]
 8007926:	f107 0110 	add.w	r1, r7, #16
 800792a:	f107 0308 	add.w	r3, r7, #8
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff fd20 	bl	8007374 <find_volume>
 8007934:	4603      	mov	r3, r0
 8007936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800793a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800793e:	2b00      	cmp	r3, #0
 8007940:	f040 8191 	bne.w	8007c66 <f_open+0x362>
		dj.obj.fs = fs;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	f107 0314 	add.w	r3, r7, #20
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff fc03 	bl	800715c <follow_path>
 8007956:	4603      	mov	r3, r0
 8007958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800795c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007960:	2b00      	cmp	r3, #0
 8007962:	d11a      	bne.n	800799a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007964:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007968:	b25b      	sxtb	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	da03      	bge.n	8007976 <f_open+0x72>
				res = FR_INVALID_NAME;
 800796e:	2306      	movs	r3, #6
 8007970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007974:	e011      	b.n	800799a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	f023 0301 	bic.w	r3, r3, #1
 800797c:	2b00      	cmp	r3, #0
 800797e:	bf14      	ite	ne
 8007980:	2301      	movne	r3, #1
 8007982:	2300      	moveq	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	f107 0314 	add.w	r3, r7, #20
 800798c:	4611      	mov	r1, r2
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fbd2 	bl	8006138 <chk_lock>
 8007994:	4603      	mov	r3, r0
 8007996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	f003 031c 	and.w	r3, r3, #28
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d07f      	beq.n	8007aa4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80079a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d017      	beq.n	80079dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80079ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d10e      	bne.n	80079d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80079b4:	f7fe fc1c 	bl	80061f0 <enq_lock>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d006      	beq.n	80079cc <f_open+0xc8>
 80079be:	f107 0314 	add.w	r3, r7, #20
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff fb03 	bl	8006fce <dir_register>
 80079c8:	4603      	mov	r3, r0
 80079ca:	e000      	b.n	80079ce <f_open+0xca>
 80079cc:	2312      	movs	r3, #18
 80079ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80079d2:	79fb      	ldrb	r3, [r7, #7]
 80079d4:	f043 0308 	orr.w	r3, r3, #8
 80079d8:	71fb      	strb	r3, [r7, #7]
 80079da:	e010      	b.n	80079fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80079dc:	7ebb      	ldrb	r3, [r7, #26]
 80079de:	f003 0311 	and.w	r3, r3, #17
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <f_open+0xea>
					res = FR_DENIED;
 80079e6:	2307      	movs	r3, #7
 80079e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80079ec:	e007      	b.n	80079fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <f_open+0xfa>
 80079f8:	2308      	movs	r3, #8
 80079fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80079fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d168      	bne.n	8007ad8 <f_open+0x1d4>
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d063      	beq.n	8007ad8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007a10:	f7fd ffa4 	bl	800595c <get_fattime>
 8007a14:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a18:	330e      	adds	r3, #14
 8007a1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fe fae1 	bl	8005fe4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a24:	3316      	adds	r3, #22
 8007a26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fadb 	bl	8005fe4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a30:	330b      	adds	r3, #11
 8007a32:	2220      	movs	r2, #32
 8007a34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff fa32 	bl	8006ea6 <ld_clust>
 8007a42:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7ff fa4a 	bl	8006ee4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a52:	331c      	adds	r3, #28
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fe fac4 	bl	8005fe4 <st_dword>
					fs->wflag = 1;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d037      	beq.n	8007ad8 <f_open+0x1d4>
						dw = fs->winsect;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007a6e:	f107 0314 	add.w	r3, r7, #20
 8007a72:	2200      	movs	r2, #0
 8007a74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe ff5d 	bl	8006936 <remove_chain>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d126      	bne.n	8007ad8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fd02 	bl	8006498 <move_window>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a9e:	3a01      	subs	r2, #1
 8007aa0:	60da      	str	r2, [r3, #12]
 8007aa2:	e019      	b.n	8007ad8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d115      	bne.n	8007ad8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007aac:	7ebb      	ldrb	r3, [r7, #26]
 8007aae:	f003 0310 	and.w	r3, r3, #16
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <f_open+0x1ba>
					res = FR_NO_FILE;
 8007ab6:	2304      	movs	r3, #4
 8007ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007abc:	e00c      	b.n	8007ad8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007abe:	79fb      	ldrb	r3, [r7, #7]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d007      	beq.n	8007ad8 <f_open+0x1d4>
 8007ac8:	7ebb      	ldrb	r3, [r7, #26]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <f_open+0x1d4>
						res = FR_DENIED;
 8007ad2:	2307      	movs	r3, #7
 8007ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d128      	bne.n	8007b32 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007ae0:	79fb      	ldrb	r3, [r7, #7]
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b00:	79fb      	ldrb	r3, [r7, #7]
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	461a      	mov	r2, r3
 8007b12:	f107 0314 	add.w	r3, r7, #20
 8007b16:	4611      	mov	r1, r2
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fb8b 	bl	8006234 <inc_lock>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <f_open+0x22e>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 8095 	bne.w	8007c66 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff f9af 	bl	8006ea6 <ld_clust>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b50:	331c      	adds	r3, #28
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe fa08 	bl	8005f68 <ld_dword>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	88da      	ldrh	r2, [r3, #6]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	79fa      	ldrb	r2, [r7, #7]
 8007b76:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3330      	adds	r3, #48	; 0x30
 8007b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b92:	2100      	movs	r1, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fe fa72 	bl	800607e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	f003 0320 	and.w	r3, r3, #32
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d060      	beq.n	8007c66 <f_open+0x362>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d05c      	beq.n	8007c66 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	895b      	ldrh	r3, [r3, #10]
 8007bb8:	025b      	lsls	r3, r3, #9
 8007bba:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8007bc8:	e016      	b.n	8007bf8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fd1d 	bl	800660e <get_fat>
 8007bd4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d802      	bhi.n	8007be2 <f_open+0x2de>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be8:	d102      	bne.n	8007bf0 <f_open+0x2ec>
 8007bea:	2301      	movs	r3, #1
 8007bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007bf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8007bf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <f_open+0x304>
 8007c00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d8e0      	bhi.n	8007bca <f_open+0x2c6>
				}
				fp->clust = clst;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c0c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d127      	bne.n	8007c66 <f_open+0x362>
 8007c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d022      	beq.n	8007c66 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fcd3 	bl	80065d0 <clust2sect>
 8007c2a:	6478      	str	r0, [r7, #68]	; 0x44
 8007c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <f_open+0x336>
						res = FR_INT_ERR;
 8007c32:	2302      	movs	r3, #2
 8007c34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007c38:	e015      	b.n	8007c66 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c3c:	0a5a      	lsrs	r2, r3, #9
 8007c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c40:	441a      	add	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	7858      	ldrb	r0, [r3, #1]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a1a      	ldr	r2, [r3, #32]
 8007c54:	2301      	movs	r3, #1
 8007c56:	f7fe f911 	bl	8005e7c <disk_read>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <f_open+0x362>
 8007c60:	2301      	movs	r3, #1
 8007c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <f_open+0x370>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3760      	adds	r7, #96	; 0x60
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b08c      	sub	sp, #48	; 0x30
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2200      	movs	r2, #0
 8007c96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f107 0210 	add.w	r2, r7, #16
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff fdb3 	bl	800780c <validate>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d107      	bne.n	8007cc4 <f_write+0x44>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	7d5b      	ldrb	r3, [r3, #21]
 8007cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <f_write+0x4a>
 8007cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cc8:	e14b      	b.n	8007f62 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	7d1b      	ldrb	r3, [r3, #20]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <f_write+0x5a>
 8007cd6:	2307      	movs	r3, #7
 8007cd8:	e143      	b.n	8007f62 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	699a      	ldr	r2, [r3, #24]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	441a      	add	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	f080 812d 	bcs.w	8007f46 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	43db      	mvns	r3, r3
 8007cf2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007cf4:	e127      	b.n	8007f46 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f040 80e3 	bne.w	8007eca <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	0a5b      	lsrs	r3, r3, #9
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	8952      	ldrh	r2, [r2, #10]
 8007d0e:	3a01      	subs	r2, #1
 8007d10:	4013      	ands	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d143      	bne.n	8007da2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10c      	bne.n	8007d3c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d11a      	bne.n	8007d64 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2100      	movs	r1, #0
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fe64 	bl	8006a00 <create_chain>
 8007d38:	62b8      	str	r0, [r7, #40]	; 0x28
 8007d3a:	e013      	b.n	8007d64 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7fe fef0 	bl	8006b30 <clmt_clust>
 8007d50:	62b8      	str	r0, [r7, #40]	; 0x28
 8007d52:	e007      	b.n	8007d64 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7fe fe4f 	bl	8006a00 <create_chain>
 8007d62:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 80f2 	beq.w	8007f50 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d104      	bne.n	8007d7c <f_write+0xfc>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2202      	movs	r2, #2
 8007d76:	755a      	strb	r2, [r3, #21]
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e0f2      	b.n	8007f62 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d82:	d104      	bne.n	8007d8e <f_write+0x10e>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2201      	movs	r2, #1
 8007d88:	755a      	strb	r2, [r3, #21]
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e0e9      	b.n	8007f62 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d92:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <f_write+0x122>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007da0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	7d1b      	ldrb	r3, [r3, #20]
 8007da6:	b25b      	sxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	da18      	bge.n	8007dde <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	7858      	ldrb	r0, [r3, #1]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6a1a      	ldr	r2, [r3, #32]
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f7fe f87e 	bl	8005ebc <disk_write>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <f_write+0x150>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	755a      	strb	r2, [r3, #21]
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0c8      	b.n	8007f62 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	7d1b      	ldrb	r3, [r3, #20]
 8007dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	f7fe fbf2 	bl	80065d0 <clust2sect>
 8007dec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <f_write+0x17e>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2202      	movs	r2, #2
 8007df8:	755a      	strb	r2, [r3, #21]
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e0b1      	b.n	8007f62 <f_write+0x2e2>
			sect += csect;
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	4413      	add	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	0a5b      	lsrs	r3, r3, #9
 8007e0a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d03c      	beq.n	8007e8c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	4413      	add	r3, r2
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	8952      	ldrh	r2, [r2, #10]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d905      	bls.n	8007e2c <f_write+0x1ac>
					cc = fs->csize - csect;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	895b      	ldrh	r3, [r3, #10]
 8007e24:	461a      	mov	r2, r3
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	7858      	ldrb	r0, [r3, #1]
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	69f9      	ldr	r1, [r7, #28]
 8007e36:	f7fe f841 	bl	8005ebc <disk_write>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d004      	beq.n	8007e4a <f_write+0x1ca>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	755a      	strb	r2, [r3, #21]
 8007e46:	2301      	movs	r3, #1
 8007e48:	e08b      	b.n	8007f62 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1a      	ldr	r2, [r3, #32]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	6a3a      	ldr	r2, [r7, #32]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d915      	bls.n	8007e84 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	025b      	lsls	r3, r3, #9
 8007e68:	69fa      	ldr	r2, [r7, #28]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e70:	4619      	mov	r1, r3
 8007e72:	f7fe f8e3 	bl	800603c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	7d1b      	ldrb	r3, [r3, #20]
 8007e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	025b      	lsls	r3, r3, #9
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007e8a:	e03f      	b.n	8007f0c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d016      	beq.n	8007ec4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d210      	bcs.n	8007ec4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	7858      	ldrb	r0, [r3, #1]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007eac:	2301      	movs	r3, #1
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	f7fd ffe4 	bl	8005e7c <disk_read>
 8007eb4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	755a      	strb	r2, [r3, #21]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e04e      	b.n	8007f62 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007ed6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d901      	bls.n	8007ee4 <f_write+0x264>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef2:	4413      	add	r3, r2
 8007ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef6:	69f9      	ldr	r1, [r7, #28]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fe f89f 	bl	800603c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	7d1b      	ldrb	r3, [r3, #20]
 8007f02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007f0c:	69fa      	ldr	r2, [r7, #28]
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	4413      	add	r3, r2
 8007f12:	61fb      	str	r3, [r7, #28]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	699a      	ldr	r2, [r3, #24]
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	441a      	add	r2, r3
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	619a      	str	r2, [r3, #24]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	bf38      	it	cc
 8007f2c:	461a      	movcc	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	441a      	add	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f47f aed4 	bne.w	8007cf6 <f_write+0x76>
 8007f4e:	e000      	b.n	8007f52 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007f50:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	7d1b      	ldrb	r3, [r3, #20]
 8007f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3730      	adds	r7, #48	; 0x30
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b086      	sub	sp, #24
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f107 0208 	add.w	r2, r7, #8
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7ff fc46 	bl	800780c <validate>
 8007f80:	4603      	mov	r3, r0
 8007f82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d168      	bne.n	800805c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	7d1b      	ldrb	r3, [r3, #20]
 8007f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d062      	beq.n	800805c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	7d1b      	ldrb	r3, [r3, #20]
 8007f9a:	b25b      	sxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	da15      	bge.n	8007fcc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	7858      	ldrb	r0, [r3, #1]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1a      	ldr	r2, [r3, #32]
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f7fd ff84 	bl	8005ebc <disk_write>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <f_sync+0x54>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e04f      	b.n	800805e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	7d1b      	ldrb	r3, [r3, #20]
 8007fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007fcc:	f7fd fcc6 	bl	800595c <get_fattime>
 8007fd0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f7fe fa5c 	bl	8006498 <move_window>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d138      	bne.n	800805c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	330b      	adds	r3, #11
 8007ff4:	781a      	ldrb	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	330b      	adds	r3, #11
 8007ffa:	f042 0220 	orr.w	r2, r2, #32
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	461a      	mov	r2, r3
 800800c:	68f9      	ldr	r1, [r7, #12]
 800800e:	f7fe ff69 	bl	8006ee4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f103 021c 	add.w	r2, r3, #28
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	4619      	mov	r1, r3
 800801e:	4610      	mov	r0, r2
 8008020:	f7fd ffe0 	bl	8005fe4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3316      	adds	r3, #22
 8008028:	6939      	ldr	r1, [r7, #16]
 800802a:	4618      	mov	r0, r3
 800802c:	f7fd ffda 	bl	8005fe4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3312      	adds	r3, #18
 8008034:	2100      	movs	r1, #0
 8008036:	4618      	mov	r0, r3
 8008038:	f7fd ffb9 	bl	8005fae <st_word>
					fs->wflag = 1;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2201      	movs	r2, #1
 8008040:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe fa55 	bl	80064f4 <sync_fs>
 800804a:	4603      	mov	r3, r0
 800804c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	7d1b      	ldrb	r3, [r3, #20]
 8008052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008056:	b2da      	uxtb	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800805c:	7dfb      	ldrb	r3, [r7, #23]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff ff7b 	bl	8007f6a <f_sync>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d118      	bne.n	80080b0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f107 0208 	add.w	r2, r7, #8
 8008084:	4611      	mov	r1, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff fbc0 	bl	800780c <validate>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10c      	bne.n	80080b0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	4618      	mov	r0, r3
 800809c:	f7fe f958 	bl	8006350 <dec_lock>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d102      	bne.n	80080b0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 80080bc:	b590      	push	{r4, r7, lr}
 80080be:	b09d      	sub	sp, #116	; 0x74
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	460b      	mov	r3, r1
 80080ca:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80080cc:	2301      	movs	r3, #1
 80080ce:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80080d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080d4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80080d6:	f107 030c 	add.w	r3, r7, #12
 80080da:	4618      	mov	r0, r3
 80080dc:	f7ff f8af 	bl	800723e <get_ldnumber>
 80080e0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80080e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da02      	bge.n	80080ee <f_mkfs+0x32>
 80080e8:	230b      	movs	r3, #11
 80080ea:	f000 bc0d 	b.w	8008908 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80080ee:	4a94      	ldr	r2, [pc, #592]	; (8008340 <f_mkfs+0x284>)
 80080f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d005      	beq.n	8008106 <f_mkfs+0x4a>
 80080fa:	4a91      	ldr	r2, [pc, #580]	; (8008340 <f_mkfs+0x284>)
 80080fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008102:	2200      	movs	r2, #0
 8008104:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8008106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008108:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800810c:	2300      	movs	r3, #0
 800810e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8008112:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008116:	4618      	mov	r0, r3
 8008118:	f7fd fe8a 	bl	8005e30 <disk_initialize>
 800811c:	4603      	mov	r3, r0
 800811e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8008122:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <f_mkfs+0x76>
 800812e:	2303      	movs	r3, #3
 8008130:	e3ea      	b.n	8008908 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8008132:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <f_mkfs+0x86>
 800813e:	230a      	movs	r3, #10
 8008140:	e3e2      	b.n	8008908 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8008142:	f107 0214 	add.w	r2, r7, #20
 8008146:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800814a:	2103      	movs	r1, #3
 800814c:	4618      	mov	r0, r3
 800814e:	f7fd fed5 	bl	8005efc <disk_ioctl>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10c      	bne.n	8008172 <f_mkfs+0xb6>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <f_mkfs+0xb6>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008164:	d805      	bhi.n	8008172 <f_mkfs+0xb6>
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	1e5a      	subs	r2, r3, #1
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	4013      	ands	r3, r2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <f_mkfs+0xba>
 8008172:	2301      	movs	r3, #1
 8008174:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8008176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800817a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <f_mkfs+0xce>
 8008182:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d309      	bcc.n	800819e <f_mkfs+0xe2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008190:	d805      	bhi.n	800819e <f_mkfs+0xe2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	1e5a      	subs	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <f_mkfs+0xe6>
 800819e:	2313      	movs	r3, #19
 80081a0:	e3b2      	b.n	8008908 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 80081a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081aa:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80081b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80081b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80081bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	fb02 f303 	mul.w	r3, r2, r3
 80081c4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <f_mkfs+0x114>
 80081cc:	230e      	movs	r3, #14
 80081ce:	e39b      	b.n	8008908 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80081d0:	f107 0210 	add.w	r2, r7, #16
 80081d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80081d8:	2101      	movs	r1, #1
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fd fe8e 	bl	8005efc <disk_ioctl>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <f_mkfs+0x12e>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e38e      	b.n	8008908 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80081ea:	7afb      	ldrb	r3, [r7, #11]
 80081ec:	f003 0308 	and.w	r3, r3, #8
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <f_mkfs+0x13c>
 80081f4:	2300      	movs	r3, #0
 80081f6:	e000      	b.n	80081fa <f_mkfs+0x13e>
 80081f8:	233f      	movs	r3, #63	; 0x3f
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008200:	429a      	cmp	r2, r3
 8008202:	d901      	bls.n	8008208 <f_mkfs+0x14c>
 8008204:	230e      	movs	r3, #14
 8008206:	e37f      	b.n	8008908 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	2b7f      	cmp	r3, #127	; 0x7f
 8008214:	d801      	bhi.n	800821a <f_mkfs+0x15e>
 8008216:	230e      	movs	r3, #14
 8008218:	e376      	b.n	8008908 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b80      	cmp	r3, #128	; 0x80
 800821e:	d901      	bls.n	8008224 <f_mkfs+0x168>
 8008220:	2313      	movs	r3, #19
 8008222:	e371      	b.n	8008908 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8008224:	7afb      	ldrb	r3, [r7, #11]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00d      	beq.n	800824a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	f003 0307 	and.w	r3, r3, #7
 8008234:	2b02      	cmp	r3, #2
 8008236:	d004      	beq.n	8008242 <f_mkfs+0x186>
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8008242:	2303      	movs	r3, #3
 8008244:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008248:	e009      	b.n	800825e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800824a:	7afb      	ldrb	r3, [r7, #11]
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <f_mkfs+0x19c>
 8008254:	2313      	movs	r3, #19
 8008256:	e357      	b.n	8008908 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8008258:	2302      	movs	r3, #2
 800825a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8008262:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008266:	2b03      	cmp	r3, #3
 8008268:	d13c      	bne.n	80082e4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800826a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800826c:	2b00      	cmp	r3, #0
 800826e:	d11b      	bne.n	80082a8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	0c5b      	lsrs	r3, r3, #17
 8008274:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8008276:	2300      	movs	r3, #0
 8008278:	64bb      	str	r3, [r7, #72]	; 0x48
 800827a:	2301      	movs	r3, #1
 800827c:	653b      	str	r3, [r7, #80]	; 0x50
 800827e:	e005      	b.n	800828c <f_mkfs+0x1d0>
 8008280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008282:	3301      	adds	r3, #1
 8008284:	64bb      	str	r3, [r7, #72]	; 0x48
 8008286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	653b      	str	r3, [r7, #80]	; 0x50
 800828c:	4a2d      	ldr	r2, [pc, #180]	; (8008344 <f_mkfs+0x288>)
 800828e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d007      	beq.n	80082a8 <f_mkfs+0x1ec>
 8008298:	4a2a      	ldr	r2, [pc, #168]	; (8008344 <f_mkfs+0x288>)
 800829a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800829c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a0:	461a      	mov	r2, r3
 80082a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d2eb      	bcs.n	8008280 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	3302      	adds	r3, #2
 80082b6:	009a      	lsls	r2, r3, #2
 80082b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082ba:	4413      	add	r3, r2
 80082bc:	1e5a      	subs	r2, r3, #1
 80082be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80082c6:	2320      	movs	r3, #32
 80082c8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80082ca:	2300      	movs	r3, #0
 80082cc:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d903      	bls.n	80082e0 <f_mkfs+0x224>
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	4a1b      	ldr	r2, [pc, #108]	; (8008348 <f_mkfs+0x28c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d952      	bls.n	8008386 <f_mkfs+0x2ca>
 80082e0:	230e      	movs	r3, #14
 80082e2:	e311      	b.n	8008908 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80082e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d11b      	bne.n	8008322 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	0b1b      	lsrs	r3, r3, #12
 80082ee:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80082f0:	2300      	movs	r3, #0
 80082f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80082f4:	2301      	movs	r3, #1
 80082f6:	653b      	str	r3, [r7, #80]	; 0x50
 80082f8:	e005      	b.n	8008306 <f_mkfs+0x24a>
 80082fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082fc:	3301      	adds	r3, #1
 80082fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	653b      	str	r3, [r7, #80]	; 0x50
 8008306:	4a11      	ldr	r2, [pc, #68]	; (800834c <f_mkfs+0x290>)
 8008308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800830a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d007      	beq.n	8008322 <f_mkfs+0x266>
 8008312:	4a0e      	ldr	r2, [pc, #56]	; (800834c <f_mkfs+0x290>)
 8008314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008316:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800831a:	461a      	mov	r2, r3
 800831c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800831e:	4293      	cmp	r3, r2
 8008320:	d2eb      	bcs.n	80082fa <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008326:	fbb2 f3f3 	udiv	r3, r2, r3
 800832a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008332:	4293      	cmp	r3, r2
 8008334:	d90c      	bls.n	8008350 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	3302      	adds	r3, #2
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800833e:	e012      	b.n	8008366 <f_mkfs+0x2aa>
 8008340:	200006cc 	.word	0x200006cc
 8008344:	08009430 	.word	0x08009430
 8008348:	0ffffff5 	.word	0x0ffffff5
 800834c:	08009440 	.word	0x08009440
				} else {
					fmt = FS_FAT12;
 8008350:	2301      	movs	r3, #1
 8008352:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8008356:	6a3a      	ldr	r2, [r7, #32]
 8008358:	4613      	mov	r3, r2
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	4413      	add	r3, r2
 800835e:	3301      	adds	r3, #1
 8008360:	085b      	lsrs	r3, r3, #1
 8008362:	3303      	adds	r3, #3
 8008364:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8008366:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800836a:	4413      	add	r3, r2
 800836c:	1e5a      	subs	r2, r3, #1
 800836e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008370:	fbb2 f3f3 	udiv	r3, r2, r3
 8008374:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8008376:	2301      	movs	r3, #1
 8008378:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800837a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008380:	fbb2 f3f3 	udiv	r3, r2, r3
 8008384:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8008386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800838a:	4413      	add	r3, r2
 800838c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800838e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008392:	fb03 f202 	mul.w	r2, r3, r2
 8008396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008398:	4413      	add	r3, r2
 800839a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800839c:	4413      	add	r3, r2
 800839e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	4413      	add	r3, r2
 80083a6:	1e5a      	subs	r2, r3, #1
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	425b      	negs	r3, r3
 80083ac:	401a      	ands	r2, r3
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80083b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d108      	bne.n	80083ce <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 80083bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c0:	4413      	add	r3, r2
 80083c2:	657b      	str	r3, [r7, #84]	; 0x54
 80083c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083c8:	4413      	add	r3, r2
 80083ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80083cc:	e006      	b.n	80083dc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80083ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083d8:	4413      	add	r3, r2
 80083da:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80083dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083de:	011a      	lsls	r2, r3, #4
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	441a      	add	r2, r3
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	1ad2      	subs	r2, r2, r3
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d901      	bls.n	80083f2 <f_mkfs+0x336>
 80083ee:	230e      	movs	r3, #14
 80083f0:	e28a      	b.n	8008908 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80083fc:	fb01 f303 	mul.w	r3, r1, r3
 8008400:	1ad2      	subs	r2, r2, r3
 8008402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008404:	1ad2      	subs	r2, r2, r3
 8008406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800840e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008412:	2b03      	cmp	r3, #3
 8008414:	d10f      	bne.n	8008436 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800841c:	4293      	cmp	r3, r2
 800841e:	d80a      	bhi.n	8008436 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d105      	bne.n	8008432 <f_mkfs+0x376>
 8008426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008428:	085b      	lsrs	r3, r3, #1
 800842a:	607b      	str	r3, [r7, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d144      	bne.n	80084bc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8008432:	230e      	movs	r3, #14
 8008434:	e268      	b.n	8008908 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8008436:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800843a:	2b02      	cmp	r3, #2
 800843c:	d133      	bne.n	80084a6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008444:	4293      	cmp	r3, r2
 8008446:	d91e      	bls.n	8008486 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d107      	bne.n	800845e <f_mkfs+0x3a2>
 800844e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008450:	005b      	lsls	r3, r3, #1
 8008452:	2b40      	cmp	r3, #64	; 0x40
 8008454:	d803      	bhi.n	800845e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8008456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	607b      	str	r3, [r7, #4]
 800845c:	e033      	b.n	80084c6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8008468:	2303      	movs	r3, #3
 800846a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800846e:	e02a      	b.n	80084c6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d105      	bne.n	8008482 <f_mkfs+0x3c6>
 8008476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	607b      	str	r3, [r7, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b80      	cmp	r3, #128	; 0x80
 8008480:	d91e      	bls.n	80084c0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8008482:	230e      	movs	r3, #14
 8008484:	e240      	b.n	8008908 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	f640 72f5 	movw	r2, #4085	; 0xff5
 800848c:	4293      	cmp	r3, r2
 800848e:	d80a      	bhi.n	80084a6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <f_mkfs+0x3e6>
 8008496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b80      	cmp	r3, #128	; 0x80
 80084a0:	d910      	bls.n	80084c4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 80084a2:	230e      	movs	r3, #14
 80084a4:	e230      	b.n	8008908 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80084a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d10c      	bne.n	80084c8 <f_mkfs+0x40c>
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d907      	bls.n	80084c8 <f_mkfs+0x40c>
 80084b8:	230e      	movs	r3, #14
 80084ba:	e225      	b.n	8008908 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80084bc:	bf00      	nop
 80084be:	e6ce      	b.n	800825e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80084c0:	bf00      	nop
 80084c2:	e6cc      	b.n	800825e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80084c4:	bf00      	nop
			pau = au;
 80084c6:	e6ca      	b.n	800825e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 80084c8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80084ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084cc:	461a      	mov	r2, r3
 80084ce:	2100      	movs	r1, #0
 80084d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084d2:	f7fd fdd4 	bl	800607e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80084d6:	220b      	movs	r2, #11
 80084d8:	49b2      	ldr	r1, [pc, #712]	; (80087a4 <f_mkfs+0x6e8>)
 80084da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084dc:	f7fd fdae 	bl	800603c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	330b      	adds	r3, #11
 80084e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80084e6:	4611      	mov	r1, r2
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fd fd60 	bl	8005fae <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	330d      	adds	r3, #13
 80084f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084f4:	b2d2      	uxtb	r2, r2
 80084f6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	330e      	adds	r3, #14
 80084fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084fe:	b292      	uxth	r2, r2
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f7fd fd53 	bl	8005fae <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	3310      	adds	r3, #16
 800850c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	f103 0211 	add.w	r2, r3, #17
 8008518:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800851c:	2b03      	cmp	r3, #3
 800851e:	d002      	beq.n	8008526 <f_mkfs+0x46a>
 8008520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008522:	b29b      	uxth	r3, r3
 8008524:	e000      	b.n	8008528 <f_mkfs+0x46c>
 8008526:	2300      	movs	r3, #0
 8008528:	4619      	mov	r1, r3
 800852a:	4610      	mov	r0, r2
 800852c:	f7fd fd3f 	bl	8005fae <st_word>
		if (sz_vol < 0x10000) {
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008536:	d208      	bcs.n	800854a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	3313      	adds	r3, #19
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	b292      	uxth	r2, r2
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f7fd fd33 	bl	8005fae <st_word>
 8008548:	e006      	b.n	8008558 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	3320      	adds	r3, #32
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	4611      	mov	r1, r2
 8008552:	4618      	mov	r0, r3
 8008554:	f7fd fd46 	bl	8005fe4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	3315      	adds	r3, #21
 800855c:	22f8      	movs	r2, #248	; 0xf8
 800855e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	3318      	adds	r3, #24
 8008564:	213f      	movs	r1, #63	; 0x3f
 8008566:	4618      	mov	r0, r3
 8008568:	f7fd fd21 	bl	8005fae <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	331a      	adds	r3, #26
 8008570:	21ff      	movs	r1, #255	; 0xff
 8008572:	4618      	mov	r0, r3
 8008574:	f7fd fd1b 	bl	8005fae <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	331c      	adds	r3, #28
 800857c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800857e:	4618      	mov	r0, r3
 8008580:	f7fd fd30 	bl	8005fe4 <st_dword>
		if (fmt == FS_FAT32) {
 8008584:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008588:	2b03      	cmp	r3, #3
 800858a:	d131      	bne.n	80085f0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8008592:	f7fd f9e3 	bl	800595c <get_fattime>
 8008596:	4603      	mov	r3, r0
 8008598:	4619      	mov	r1, r3
 800859a:	4620      	mov	r0, r4
 800859c:	f7fd fd22 	bl	8005fe4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	3324      	adds	r3, #36	; 0x24
 80085a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fd fd1c 	bl	8005fe4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	332c      	adds	r3, #44	; 0x2c
 80085b0:	2102      	movs	r1, #2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7fd fd16 	bl	8005fe4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	3330      	adds	r3, #48	; 0x30
 80085bc:	2101      	movs	r1, #1
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fd fcf5 	bl	8005fae <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	3332      	adds	r3, #50	; 0x32
 80085c8:	2106      	movs	r1, #6
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fd fcef 	bl	8005fae <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	3340      	adds	r3, #64	; 0x40
 80085d4:	2280      	movs	r2, #128	; 0x80
 80085d6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	3342      	adds	r3, #66	; 0x42
 80085dc:	2229      	movs	r2, #41	; 0x29
 80085de:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	3347      	adds	r3, #71	; 0x47
 80085e4:	2213      	movs	r2, #19
 80085e6:	4970      	ldr	r1, [pc, #448]	; (80087a8 <f_mkfs+0x6ec>)
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fd fd27 	bl	800603c <mem_cpy>
 80085ee:	e020      	b.n	8008632 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80085f6:	f7fd f9b1 	bl	800595c <get_fattime>
 80085fa:	4603      	mov	r3, r0
 80085fc:	4619      	mov	r1, r3
 80085fe:	4620      	mov	r0, r4
 8008600:	f7fd fcf0 	bl	8005fe4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	3316      	adds	r3, #22
 8008608:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800860a:	b292      	uxth	r2, r2
 800860c:	4611      	mov	r1, r2
 800860e:	4618      	mov	r0, r3
 8008610:	f7fd fccd 	bl	8005fae <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	3324      	adds	r3, #36	; 0x24
 8008618:	2280      	movs	r2, #128	; 0x80
 800861a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	3326      	adds	r3, #38	; 0x26
 8008620:	2229      	movs	r2, #41	; 0x29
 8008622:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	332b      	adds	r3, #43	; 0x2b
 8008628:	2213      	movs	r2, #19
 800862a:	4960      	ldr	r1, [pc, #384]	; (80087ac <f_mkfs+0x6f0>)
 800862c:	4618      	mov	r0, r3
 800862e:	f7fd fd05 	bl	800603c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008638:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800863c:	4618      	mov	r0, r3
 800863e:	f7fd fcb6 	bl	8005fae <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8008642:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008646:	2301      	movs	r3, #1
 8008648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800864c:	f7fd fc36 	bl	8005ebc <disk_write>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <f_mkfs+0x59e>
 8008656:	2301      	movs	r3, #1
 8008658:	e156      	b.n	8008908 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800865a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800865e:	2b03      	cmp	r3, #3
 8008660:	d140      	bne.n	80086e4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	1d9a      	adds	r2, r3, #6
 8008666:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800866a:	2301      	movs	r3, #1
 800866c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800866e:	f7fd fc25 	bl	8005ebc <disk_write>
			mem_set(buf, 0, ss);
 8008672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008674:	461a      	mov	r2, r3
 8008676:	2100      	movs	r1, #0
 8008678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800867a:	f7fd fd00 	bl	800607e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800867e:	494c      	ldr	r1, [pc, #304]	; (80087b0 <f_mkfs+0x6f4>)
 8008680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008682:	f7fd fcaf 	bl	8005fe4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800868c:	4949      	ldr	r1, [pc, #292]	; (80087b4 <f_mkfs+0x6f8>)
 800868e:	4618      	mov	r0, r3
 8008690:	f7fd fca8 	bl	8005fe4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8008694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008696:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	3b01      	subs	r3, #1
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f7fd fc9f 	bl	8005fe4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80086ac:	2102      	movs	r1, #2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fd fc98 	bl	8005fe4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80086ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fd fc75 	bl	8005fae <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	1dda      	adds	r2, r3, #7
 80086c8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80086cc:	2301      	movs	r3, #1
 80086ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086d0:	f7fd fbf4 	bl	8005ebc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	1c5a      	adds	r2, r3, #1
 80086d8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80086dc:	2301      	movs	r3, #1
 80086de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086e0:	f7fd fbec 	bl	8005ebc <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80086e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086e6:	2100      	movs	r1, #0
 80086e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086ea:	f7fd fcc8 	bl	800607e <mem_set>
		sect = b_fat;		/* FAT start sector */
 80086ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086f0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80086f2:	2300      	movs	r3, #0
 80086f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80086f6:	e04b      	b.n	8008790 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80086f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d113      	bne.n	8008728 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8008700:	f06f 0107 	mvn.w	r1, #7
 8008704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008706:	f7fd fc6d 	bl	8005fe4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	3304      	adds	r3, #4
 800870e:	f04f 31ff 	mov.w	r1, #4294967295
 8008712:	4618      	mov	r0, r3
 8008714:	f7fd fc66 	bl	8005fe4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	3308      	adds	r3, #8
 800871c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008720:	4618      	mov	r0, r3
 8008722:	f7fd fc5f 	bl	8005fe4 <st_dword>
 8008726:	e00b      	b.n	8008740 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8008728:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <f_mkfs+0x678>
 8008730:	4b21      	ldr	r3, [pc, #132]	; (80087b8 <f_mkfs+0x6fc>)
 8008732:	e001      	b.n	8008738 <f_mkfs+0x67c>
 8008734:	f06f 0307 	mvn.w	r3, #7
 8008738:	4619      	mov	r1, r3
 800873a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800873c:	f7fd fc52 	bl	8005fe4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8008740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008742:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8008744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008748:	4293      	cmp	r3, r2
 800874a:	bf28      	it	cs
 800874c:	4613      	movcs	r3, r2
 800874e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8008750:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8008754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008756:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800875a:	f7fd fbaf 	bl	8005ebc <disk_write>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <f_mkfs+0x6ac>
 8008764:	2301      	movs	r3, #1
 8008766:	e0cf      	b.n	8008908 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8008768:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800876a:	461a      	mov	r2, r3
 800876c:	2100      	movs	r1, #0
 800876e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008770:	f7fd fc85 	bl	800607e <mem_set>
				sect += n; nsect -= n;
 8008774:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008778:	4413      	add	r3, r2
 800877a:	667b      	str	r3, [r7, #100]	; 0x64
 800877c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800877e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8008784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1dc      	bne.n	8008744 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800878a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800878c:	3301      	adds	r3, #1
 800878e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008794:	429a      	cmp	r2, r3
 8008796:	d3af      	bcc.n	80086f8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8008798:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800879c:	2b03      	cmp	r3, #3
 800879e:	d10d      	bne.n	80087bc <f_mkfs+0x700>
 80087a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a2:	e00c      	b.n	80087be <f_mkfs+0x702>
 80087a4:	08009348 	.word	0x08009348
 80087a8:	08009354 	.word	0x08009354
 80087ac:	08009368 	.word	0x08009368
 80087b0:	41615252 	.word	0x41615252
 80087b4:	61417272 	.word	0x61417272
 80087b8:	00fffff8 	.word	0x00fffff8
 80087bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087be:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80087c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	4293      	cmp	r3, r2
 80087c6:	bf28      	it	cs
 80087c8:	4613      	movcs	r3, r2
 80087ca:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80087cc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80087d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087d6:	f7fd fb71 	bl	8005ebc <disk_write>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <f_mkfs+0x728>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e091      	b.n	8008908 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80087e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087e8:	4413      	add	r3, r2
 80087ea:	667b      	str	r3, [r7, #100]	; 0x64
 80087ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80087f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e2      	bne.n	80087c0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80087fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d103      	bne.n	800880a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8008802:	230c      	movs	r3, #12
 8008804:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8008808:	e010      	b.n	800882c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008810:	d303      	bcc.n	800881a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8008812:	2306      	movs	r3, #6
 8008814:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8008818:	e008      	b.n	800882c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800881a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800881e:	2b02      	cmp	r3, #2
 8008820:	d101      	bne.n	8008826 <f_mkfs+0x76a>
 8008822:	2304      	movs	r3, #4
 8008824:	e000      	b.n	8008828 <f_mkfs+0x76c>
 8008826:	2301      	movs	r3, #1
 8008828:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	f003 0308 	and.w	r3, r3, #8
 8008832:	2b00      	cmp	r3, #0
 8008834:	d15b      	bne.n	80088ee <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8008836:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008838:	461a      	mov	r2, r3
 800883a:	2100      	movs	r1, #0
 800883c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800883e:	f7fd fc1e 	bl	800607e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008848:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800884c:	4618      	mov	r0, r3
 800884e:	f7fd fbae 	bl	8005fae <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008858:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	3301      	adds	r3, #1
 8008864:	2201      	movs	r2, #1
 8008866:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	3302      	adds	r3, #2
 800886c:	2201      	movs	r2, #1
 800886e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	3303      	adds	r3, #3
 8008874:	2200      	movs	r2, #0
 8008876:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	3304      	adds	r3, #4
 800887c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8008880:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	441a      	add	r2, r3
 8008888:	4b21      	ldr	r3, [pc, #132]	; (8008910 <f_mkfs+0x854>)
 800888a:	fba3 1302 	umull	r1, r3, r3, r2
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	0852      	lsrs	r2, r2, #1
 8008892:	4413      	add	r3, r2
 8008894:	0b5b      	lsrs	r3, r3, #13
 8008896:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	3305      	adds	r3, #5
 800889c:	22fe      	movs	r2, #254	; 0xfe
 800889e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80088a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088a2:	089b      	lsrs	r3, r3, #2
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	3306      	adds	r3, #6
 80088aa:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80088ae:	b2d2      	uxtb	r2, r2
 80088b0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	3307      	adds	r3, #7
 80088b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	3308      	adds	r3, #8
 80088c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fd fb8e 	bl	8005fe4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	330c      	adds	r3, #12
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fd fb87 	bl	8005fe4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80088d6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80088da:	2301      	movs	r3, #1
 80088dc:	2200      	movs	r2, #0
 80088de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088e0:	f7fd faec 	bl	8005ebc <disk_write>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <f_mkfs+0x832>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e00c      	b.n	8008908 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80088ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80088f2:	2200      	movs	r2, #0
 80088f4:	2100      	movs	r1, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fd fb00 	bl	8005efc <disk_ioctl>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <f_mkfs+0x84a>
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <f_mkfs+0x84c>

	return FR_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3774      	adds	r7, #116	; 0x74
 800890c:	46bd      	mov	sp, r7
 800890e:	bd90      	pop	{r4, r7, pc}
 8008910:	0515565b 	.word	0x0515565b

08008914 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008922:	2301      	movs	r3, #1
 8008924:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800892a:	4b1f      	ldr	r3, [pc, #124]	; (80089a8 <FATFS_LinkDriverEx+0x94>)
 800892c:	7a5b      	ldrb	r3, [r3, #9]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d131      	bne.n	8008998 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008934:	4b1c      	ldr	r3, [pc, #112]	; (80089a8 <FATFS_LinkDriverEx+0x94>)
 8008936:	7a5b      	ldrb	r3, [r3, #9]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	461a      	mov	r2, r3
 800893c:	4b1a      	ldr	r3, [pc, #104]	; (80089a8 <FATFS_LinkDriverEx+0x94>)
 800893e:	2100      	movs	r1, #0
 8008940:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008942:	4b19      	ldr	r3, [pc, #100]	; (80089a8 <FATFS_LinkDriverEx+0x94>)
 8008944:	7a5b      	ldrb	r3, [r3, #9]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <FATFS_LinkDriverEx+0x94>)
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008952:	4b15      	ldr	r3, [pc, #84]	; (80089a8 <FATFS_LinkDriverEx+0x94>)
 8008954:	7a5b      	ldrb	r3, [r3, #9]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	4b13      	ldr	r3, [pc, #76]	; (80089a8 <FATFS_LinkDriverEx+0x94>)
 800895c:	4413      	add	r3, r2
 800895e:	79fa      	ldrb	r2, [r7, #7]
 8008960:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008962:	4b11      	ldr	r3, [pc, #68]	; (80089a8 <FATFS_LinkDriverEx+0x94>)
 8008964:	7a5b      	ldrb	r3, [r3, #9]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	1c5a      	adds	r2, r3, #1
 800896a:	b2d1      	uxtb	r1, r2
 800896c:	4a0e      	ldr	r2, [pc, #56]	; (80089a8 <FATFS_LinkDriverEx+0x94>)
 800896e:	7251      	strb	r1, [r2, #9]
 8008970:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008972:	7dbb      	ldrb	r3, [r7, #22]
 8008974:	3330      	adds	r3, #48	; 0x30
 8008976:	b2da      	uxtb	r2, r3
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	3301      	adds	r3, #1
 8008980:	223a      	movs	r2, #58	; 0x3a
 8008982:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	3302      	adds	r3, #2
 8008988:	222f      	movs	r2, #47	; 0x2f
 800898a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	3303      	adds	r3, #3
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
}
 800899a:	4618      	mov	r0, r3
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	200006f4 	.word	0x200006f4

080089ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80089b6:	2200      	movs	r2, #0
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff ffaa 	bl	8008914 <FATFS_LinkDriverEx>
 80089c0:	4603      	mov	r3, r0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <__errno>:
 80089cc:	4b01      	ldr	r3, [pc, #4]	; (80089d4 <__errno+0x8>)
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	2000000c 	.word	0x2000000c

080089d8 <__libc_init_array>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	4d0d      	ldr	r5, [pc, #52]	; (8008a10 <__libc_init_array+0x38>)
 80089dc:	4c0d      	ldr	r4, [pc, #52]	; (8008a14 <__libc_init_array+0x3c>)
 80089de:	1b64      	subs	r4, r4, r5
 80089e0:	10a4      	asrs	r4, r4, #2
 80089e2:	2600      	movs	r6, #0
 80089e4:	42a6      	cmp	r6, r4
 80089e6:	d109      	bne.n	80089fc <__libc_init_array+0x24>
 80089e8:	4d0b      	ldr	r5, [pc, #44]	; (8008a18 <__libc_init_array+0x40>)
 80089ea:	4c0c      	ldr	r4, [pc, #48]	; (8008a1c <__libc_init_array+0x44>)
 80089ec:	f000 fc8e 	bl	800930c <_init>
 80089f0:	1b64      	subs	r4, r4, r5
 80089f2:	10a4      	asrs	r4, r4, #2
 80089f4:	2600      	movs	r6, #0
 80089f6:	42a6      	cmp	r6, r4
 80089f8:	d105      	bne.n	8008a06 <__libc_init_array+0x2e>
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a00:	4798      	blx	r3
 8008a02:	3601      	adds	r6, #1
 8008a04:	e7ee      	b.n	80089e4 <__libc_init_array+0xc>
 8008a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0a:	4798      	blx	r3
 8008a0c:	3601      	adds	r6, #1
 8008a0e:	e7f2      	b.n	80089f6 <__libc_init_array+0x1e>
 8008a10:	0800948c 	.word	0x0800948c
 8008a14:	0800948c 	.word	0x0800948c
 8008a18:	0800948c 	.word	0x0800948c
 8008a1c:	08009490 	.word	0x08009490

08008a20 <memset>:
 8008a20:	4402      	add	r2, r0
 8008a22:	4603      	mov	r3, r0
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d100      	bne.n	8008a2a <memset+0xa>
 8008a28:	4770      	bx	lr
 8008a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a2e:	e7f9      	b.n	8008a24 <memset+0x4>

08008a30 <siprintf>:
 8008a30:	b40e      	push	{r1, r2, r3}
 8008a32:	b500      	push	{lr}
 8008a34:	b09c      	sub	sp, #112	; 0x70
 8008a36:	ab1d      	add	r3, sp, #116	; 0x74
 8008a38:	9002      	str	r0, [sp, #8]
 8008a3a:	9006      	str	r0, [sp, #24]
 8008a3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a40:	4809      	ldr	r0, [pc, #36]	; (8008a68 <siprintf+0x38>)
 8008a42:	9107      	str	r1, [sp, #28]
 8008a44:	9104      	str	r1, [sp, #16]
 8008a46:	4909      	ldr	r1, [pc, #36]	; (8008a6c <siprintf+0x3c>)
 8008a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a4c:	9105      	str	r1, [sp, #20]
 8008a4e:	6800      	ldr	r0, [r0, #0]
 8008a50:	9301      	str	r3, [sp, #4]
 8008a52:	a902      	add	r1, sp, #8
 8008a54:	f000 f868 	bl	8008b28 <_svfiprintf_r>
 8008a58:	9b02      	ldr	r3, [sp, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	b01c      	add	sp, #112	; 0x70
 8008a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a64:	b003      	add	sp, #12
 8008a66:	4770      	bx	lr
 8008a68:	2000000c 	.word	0x2000000c
 8008a6c:	ffff0208 	.word	0xffff0208

08008a70 <__ssputs_r>:
 8008a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	688e      	ldr	r6, [r1, #8]
 8008a76:	429e      	cmp	r6, r3
 8008a78:	4682      	mov	sl, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	4690      	mov	r8, r2
 8008a7e:	461f      	mov	r7, r3
 8008a80:	d838      	bhi.n	8008af4 <__ssputs_r+0x84>
 8008a82:	898a      	ldrh	r2, [r1, #12]
 8008a84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a88:	d032      	beq.n	8008af0 <__ssputs_r+0x80>
 8008a8a:	6825      	ldr	r5, [r4, #0]
 8008a8c:	6909      	ldr	r1, [r1, #16]
 8008a8e:	eba5 0901 	sub.w	r9, r5, r1
 8008a92:	6965      	ldr	r5, [r4, #20]
 8008a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	444b      	add	r3, r9
 8008aa0:	106d      	asrs	r5, r5, #1
 8008aa2:	429d      	cmp	r5, r3
 8008aa4:	bf38      	it	cc
 8008aa6:	461d      	movcc	r5, r3
 8008aa8:	0553      	lsls	r3, r2, #21
 8008aaa:	d531      	bpl.n	8008b10 <__ssputs_r+0xa0>
 8008aac:	4629      	mov	r1, r5
 8008aae:	f000 fb63 	bl	8009178 <_malloc_r>
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	b950      	cbnz	r0, 8008acc <__ssputs_r+0x5c>
 8008ab6:	230c      	movs	r3, #12
 8008ab8:	f8ca 3000 	str.w	r3, [sl]
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008acc:	6921      	ldr	r1, [r4, #16]
 8008ace:	464a      	mov	r2, r9
 8008ad0:	f000 fabe 	bl	8009050 <memcpy>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	6126      	str	r6, [r4, #16]
 8008ae2:	6165      	str	r5, [r4, #20]
 8008ae4:	444e      	add	r6, r9
 8008ae6:	eba5 0509 	sub.w	r5, r5, r9
 8008aea:	6026      	str	r6, [r4, #0]
 8008aec:	60a5      	str	r5, [r4, #8]
 8008aee:	463e      	mov	r6, r7
 8008af0:	42be      	cmp	r6, r7
 8008af2:	d900      	bls.n	8008af6 <__ssputs_r+0x86>
 8008af4:	463e      	mov	r6, r7
 8008af6:	6820      	ldr	r0, [r4, #0]
 8008af8:	4632      	mov	r2, r6
 8008afa:	4641      	mov	r1, r8
 8008afc:	f000 fab6 	bl	800906c <memmove>
 8008b00:	68a3      	ldr	r3, [r4, #8]
 8008b02:	1b9b      	subs	r3, r3, r6
 8008b04:	60a3      	str	r3, [r4, #8]
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	4433      	add	r3, r6
 8008b0a:	6023      	str	r3, [r4, #0]
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	e7db      	b.n	8008ac8 <__ssputs_r+0x58>
 8008b10:	462a      	mov	r2, r5
 8008b12:	f000 fba5 	bl	8009260 <_realloc_r>
 8008b16:	4606      	mov	r6, r0
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d1e1      	bne.n	8008ae0 <__ssputs_r+0x70>
 8008b1c:	6921      	ldr	r1, [r4, #16]
 8008b1e:	4650      	mov	r0, sl
 8008b20:	f000 fabe 	bl	80090a0 <_free_r>
 8008b24:	e7c7      	b.n	8008ab6 <__ssputs_r+0x46>
	...

08008b28 <_svfiprintf_r>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	4698      	mov	r8, r3
 8008b2e:	898b      	ldrh	r3, [r1, #12]
 8008b30:	061b      	lsls	r3, r3, #24
 8008b32:	b09d      	sub	sp, #116	; 0x74
 8008b34:	4607      	mov	r7, r0
 8008b36:	460d      	mov	r5, r1
 8008b38:	4614      	mov	r4, r2
 8008b3a:	d50e      	bpl.n	8008b5a <_svfiprintf_r+0x32>
 8008b3c:	690b      	ldr	r3, [r1, #16]
 8008b3e:	b963      	cbnz	r3, 8008b5a <_svfiprintf_r+0x32>
 8008b40:	2140      	movs	r1, #64	; 0x40
 8008b42:	f000 fb19 	bl	8009178 <_malloc_r>
 8008b46:	6028      	str	r0, [r5, #0]
 8008b48:	6128      	str	r0, [r5, #16]
 8008b4a:	b920      	cbnz	r0, 8008b56 <_svfiprintf_r+0x2e>
 8008b4c:	230c      	movs	r3, #12
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	f04f 30ff 	mov.w	r0, #4294967295
 8008b54:	e0d1      	b.n	8008cfa <_svfiprintf_r+0x1d2>
 8008b56:	2340      	movs	r3, #64	; 0x40
 8008b58:	616b      	str	r3, [r5, #20]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5e:	2320      	movs	r3, #32
 8008b60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b68:	2330      	movs	r3, #48	; 0x30
 8008b6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d14 <_svfiprintf_r+0x1ec>
 8008b6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b72:	f04f 0901 	mov.w	r9, #1
 8008b76:	4623      	mov	r3, r4
 8008b78:	469a      	mov	sl, r3
 8008b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b7e:	b10a      	cbz	r2, 8008b84 <_svfiprintf_r+0x5c>
 8008b80:	2a25      	cmp	r2, #37	; 0x25
 8008b82:	d1f9      	bne.n	8008b78 <_svfiprintf_r+0x50>
 8008b84:	ebba 0b04 	subs.w	fp, sl, r4
 8008b88:	d00b      	beq.n	8008ba2 <_svfiprintf_r+0x7a>
 8008b8a:	465b      	mov	r3, fp
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7ff ff6d 	bl	8008a70 <__ssputs_r>
 8008b96:	3001      	adds	r0, #1
 8008b98:	f000 80aa 	beq.w	8008cf0 <_svfiprintf_r+0x1c8>
 8008b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b9e:	445a      	add	r2, fp
 8008ba0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 80a2 	beq.w	8008cf0 <_svfiprintf_r+0x1c8>
 8008bac:	2300      	movs	r3, #0
 8008bae:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bb6:	f10a 0a01 	add.w	sl, sl, #1
 8008bba:	9304      	str	r3, [sp, #16]
 8008bbc:	9307      	str	r3, [sp, #28]
 8008bbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bc2:	931a      	str	r3, [sp, #104]	; 0x68
 8008bc4:	4654      	mov	r4, sl
 8008bc6:	2205      	movs	r2, #5
 8008bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bcc:	4851      	ldr	r0, [pc, #324]	; (8008d14 <_svfiprintf_r+0x1ec>)
 8008bce:	f7f7 fb27 	bl	8000220 <memchr>
 8008bd2:	9a04      	ldr	r2, [sp, #16]
 8008bd4:	b9d8      	cbnz	r0, 8008c0e <_svfiprintf_r+0xe6>
 8008bd6:	06d0      	lsls	r0, r2, #27
 8008bd8:	bf44      	itt	mi
 8008bda:	2320      	movmi	r3, #32
 8008bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008be0:	0711      	lsls	r1, r2, #28
 8008be2:	bf44      	itt	mi
 8008be4:	232b      	movmi	r3, #43	; 0x2b
 8008be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bea:	f89a 3000 	ldrb.w	r3, [sl]
 8008bee:	2b2a      	cmp	r3, #42	; 0x2a
 8008bf0:	d015      	beq.n	8008c1e <_svfiprintf_r+0xf6>
 8008bf2:	9a07      	ldr	r2, [sp, #28]
 8008bf4:	4654      	mov	r4, sl
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	f04f 0c0a 	mov.w	ip, #10
 8008bfc:	4621      	mov	r1, r4
 8008bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c02:	3b30      	subs	r3, #48	; 0x30
 8008c04:	2b09      	cmp	r3, #9
 8008c06:	d94e      	bls.n	8008ca6 <_svfiprintf_r+0x17e>
 8008c08:	b1b0      	cbz	r0, 8008c38 <_svfiprintf_r+0x110>
 8008c0a:	9207      	str	r2, [sp, #28]
 8008c0c:	e014      	b.n	8008c38 <_svfiprintf_r+0x110>
 8008c0e:	eba0 0308 	sub.w	r3, r0, r8
 8008c12:	fa09 f303 	lsl.w	r3, r9, r3
 8008c16:	4313      	orrs	r3, r2
 8008c18:	9304      	str	r3, [sp, #16]
 8008c1a:	46a2      	mov	sl, r4
 8008c1c:	e7d2      	b.n	8008bc4 <_svfiprintf_r+0x9c>
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	1d19      	adds	r1, r3, #4
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	9103      	str	r1, [sp, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	bfbb      	ittet	lt
 8008c2a:	425b      	neglt	r3, r3
 8008c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008c30:	9307      	strge	r3, [sp, #28]
 8008c32:	9307      	strlt	r3, [sp, #28]
 8008c34:	bfb8      	it	lt
 8008c36:	9204      	strlt	r2, [sp, #16]
 8008c38:	7823      	ldrb	r3, [r4, #0]
 8008c3a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c3c:	d10c      	bne.n	8008c58 <_svfiprintf_r+0x130>
 8008c3e:	7863      	ldrb	r3, [r4, #1]
 8008c40:	2b2a      	cmp	r3, #42	; 0x2a
 8008c42:	d135      	bne.n	8008cb0 <_svfiprintf_r+0x188>
 8008c44:	9b03      	ldr	r3, [sp, #12]
 8008c46:	1d1a      	adds	r2, r3, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	9203      	str	r2, [sp, #12]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	bfb8      	it	lt
 8008c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c54:	3402      	adds	r4, #2
 8008c56:	9305      	str	r3, [sp, #20]
 8008c58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d24 <_svfiprintf_r+0x1fc>
 8008c5c:	7821      	ldrb	r1, [r4, #0]
 8008c5e:	2203      	movs	r2, #3
 8008c60:	4650      	mov	r0, sl
 8008c62:	f7f7 fadd 	bl	8000220 <memchr>
 8008c66:	b140      	cbz	r0, 8008c7a <_svfiprintf_r+0x152>
 8008c68:	2340      	movs	r3, #64	; 0x40
 8008c6a:	eba0 000a 	sub.w	r0, r0, sl
 8008c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8008c72:	9b04      	ldr	r3, [sp, #16]
 8008c74:	4303      	orrs	r3, r0
 8008c76:	3401      	adds	r4, #1
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7e:	4826      	ldr	r0, [pc, #152]	; (8008d18 <_svfiprintf_r+0x1f0>)
 8008c80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c84:	2206      	movs	r2, #6
 8008c86:	f7f7 facb 	bl	8000220 <memchr>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	d038      	beq.n	8008d00 <_svfiprintf_r+0x1d8>
 8008c8e:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <_svfiprintf_r+0x1f4>)
 8008c90:	bb1b      	cbnz	r3, 8008cda <_svfiprintf_r+0x1b2>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	3307      	adds	r3, #7
 8008c96:	f023 0307 	bic.w	r3, r3, #7
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	9303      	str	r3, [sp, #12]
 8008c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca0:	4433      	add	r3, r6
 8008ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ca4:	e767      	b.n	8008b76 <_svfiprintf_r+0x4e>
 8008ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008caa:	460c      	mov	r4, r1
 8008cac:	2001      	movs	r0, #1
 8008cae:	e7a5      	b.n	8008bfc <_svfiprintf_r+0xd4>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	3401      	adds	r4, #1
 8008cb4:	9305      	str	r3, [sp, #20]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	f04f 0c0a 	mov.w	ip, #10
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cc2:	3a30      	subs	r2, #48	; 0x30
 8008cc4:	2a09      	cmp	r2, #9
 8008cc6:	d903      	bls.n	8008cd0 <_svfiprintf_r+0x1a8>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d0c5      	beq.n	8008c58 <_svfiprintf_r+0x130>
 8008ccc:	9105      	str	r1, [sp, #20]
 8008cce:	e7c3      	b.n	8008c58 <_svfiprintf_r+0x130>
 8008cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e7f0      	b.n	8008cbc <_svfiprintf_r+0x194>
 8008cda:	ab03      	add	r3, sp, #12
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	462a      	mov	r2, r5
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <_svfiprintf_r+0x1f8>)
 8008ce2:	a904      	add	r1, sp, #16
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	f3af 8000 	nop.w
 8008cea:	1c42      	adds	r2, r0, #1
 8008cec:	4606      	mov	r6, r0
 8008cee:	d1d6      	bne.n	8008c9e <_svfiprintf_r+0x176>
 8008cf0:	89ab      	ldrh	r3, [r5, #12]
 8008cf2:	065b      	lsls	r3, r3, #25
 8008cf4:	f53f af2c 	bmi.w	8008b50 <_svfiprintf_r+0x28>
 8008cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cfa:	b01d      	add	sp, #116	; 0x74
 8008cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d00:	ab03      	add	r3, sp, #12
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	462a      	mov	r2, r5
 8008d06:	4b06      	ldr	r3, [pc, #24]	; (8008d20 <_svfiprintf_r+0x1f8>)
 8008d08:	a904      	add	r1, sp, #16
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	f000 f87a 	bl	8008e04 <_printf_i>
 8008d10:	e7eb      	b.n	8008cea <_svfiprintf_r+0x1c2>
 8008d12:	bf00      	nop
 8008d14:	0800944e 	.word	0x0800944e
 8008d18:	08009458 	.word	0x08009458
 8008d1c:	00000000 	.word	0x00000000
 8008d20:	08008a71 	.word	0x08008a71
 8008d24:	08009454 	.word	0x08009454

08008d28 <_printf_common>:
 8008d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d2c:	4616      	mov	r6, r2
 8008d2e:	4699      	mov	r9, r3
 8008d30:	688a      	ldr	r2, [r1, #8]
 8008d32:	690b      	ldr	r3, [r1, #16]
 8008d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	bfb8      	it	lt
 8008d3c:	4613      	movlt	r3, r2
 8008d3e:	6033      	str	r3, [r6, #0]
 8008d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d44:	4607      	mov	r7, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	b10a      	cbz	r2, 8008d4e <_printf_common+0x26>
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	6033      	str	r3, [r6, #0]
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	0699      	lsls	r1, r3, #26
 8008d52:	bf42      	ittt	mi
 8008d54:	6833      	ldrmi	r3, [r6, #0]
 8008d56:	3302      	addmi	r3, #2
 8008d58:	6033      	strmi	r3, [r6, #0]
 8008d5a:	6825      	ldr	r5, [r4, #0]
 8008d5c:	f015 0506 	ands.w	r5, r5, #6
 8008d60:	d106      	bne.n	8008d70 <_printf_common+0x48>
 8008d62:	f104 0a19 	add.w	sl, r4, #25
 8008d66:	68e3      	ldr	r3, [r4, #12]
 8008d68:	6832      	ldr	r2, [r6, #0]
 8008d6a:	1a9b      	subs	r3, r3, r2
 8008d6c:	42ab      	cmp	r3, r5
 8008d6e:	dc26      	bgt.n	8008dbe <_printf_common+0x96>
 8008d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d74:	1e13      	subs	r3, r2, #0
 8008d76:	6822      	ldr	r2, [r4, #0]
 8008d78:	bf18      	it	ne
 8008d7a:	2301      	movne	r3, #1
 8008d7c:	0692      	lsls	r2, r2, #26
 8008d7e:	d42b      	bmi.n	8008dd8 <_printf_common+0xb0>
 8008d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d84:	4649      	mov	r1, r9
 8008d86:	4638      	mov	r0, r7
 8008d88:	47c0      	blx	r8
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d01e      	beq.n	8008dcc <_printf_common+0xa4>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	68e5      	ldr	r5, [r4, #12]
 8008d92:	6832      	ldr	r2, [r6, #0]
 8008d94:	f003 0306 	and.w	r3, r3, #6
 8008d98:	2b04      	cmp	r3, #4
 8008d9a:	bf08      	it	eq
 8008d9c:	1aad      	subeq	r5, r5, r2
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	6922      	ldr	r2, [r4, #16]
 8008da2:	bf0c      	ite	eq
 8008da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008da8:	2500      	movne	r5, #0
 8008daa:	4293      	cmp	r3, r2
 8008dac:	bfc4      	itt	gt
 8008dae:	1a9b      	subgt	r3, r3, r2
 8008db0:	18ed      	addgt	r5, r5, r3
 8008db2:	2600      	movs	r6, #0
 8008db4:	341a      	adds	r4, #26
 8008db6:	42b5      	cmp	r5, r6
 8008db8:	d11a      	bne.n	8008df0 <_printf_common+0xc8>
 8008dba:	2000      	movs	r0, #0
 8008dbc:	e008      	b.n	8008dd0 <_printf_common+0xa8>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4652      	mov	r2, sl
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	4638      	mov	r0, r7
 8008dc6:	47c0      	blx	r8
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d103      	bne.n	8008dd4 <_printf_common+0xac>
 8008dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	e7c6      	b.n	8008d66 <_printf_common+0x3e>
 8008dd8:	18e1      	adds	r1, r4, r3
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	2030      	movs	r0, #48	; 0x30
 8008dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008de2:	4422      	add	r2, r4
 8008de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dec:	3302      	adds	r3, #2
 8008dee:	e7c7      	b.n	8008d80 <_printf_common+0x58>
 8008df0:	2301      	movs	r3, #1
 8008df2:	4622      	mov	r2, r4
 8008df4:	4649      	mov	r1, r9
 8008df6:	4638      	mov	r0, r7
 8008df8:	47c0      	blx	r8
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d0e6      	beq.n	8008dcc <_printf_common+0xa4>
 8008dfe:	3601      	adds	r6, #1
 8008e00:	e7d9      	b.n	8008db6 <_printf_common+0x8e>
	...

08008e04 <_printf_i>:
 8008e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e08:	7e0f      	ldrb	r7, [r1, #24]
 8008e0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e0c:	2f78      	cmp	r7, #120	; 0x78
 8008e0e:	4691      	mov	r9, r2
 8008e10:	4680      	mov	r8, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	469a      	mov	sl, r3
 8008e16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e1a:	d807      	bhi.n	8008e2c <_printf_i+0x28>
 8008e1c:	2f62      	cmp	r7, #98	; 0x62
 8008e1e:	d80a      	bhi.n	8008e36 <_printf_i+0x32>
 8008e20:	2f00      	cmp	r7, #0
 8008e22:	f000 80d8 	beq.w	8008fd6 <_printf_i+0x1d2>
 8008e26:	2f58      	cmp	r7, #88	; 0x58
 8008e28:	f000 80a3 	beq.w	8008f72 <_printf_i+0x16e>
 8008e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e34:	e03a      	b.n	8008eac <_printf_i+0xa8>
 8008e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e3a:	2b15      	cmp	r3, #21
 8008e3c:	d8f6      	bhi.n	8008e2c <_printf_i+0x28>
 8008e3e:	a101      	add	r1, pc, #4	; (adr r1, 8008e44 <_printf_i+0x40>)
 8008e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e44:	08008e9d 	.word	0x08008e9d
 8008e48:	08008eb1 	.word	0x08008eb1
 8008e4c:	08008e2d 	.word	0x08008e2d
 8008e50:	08008e2d 	.word	0x08008e2d
 8008e54:	08008e2d 	.word	0x08008e2d
 8008e58:	08008e2d 	.word	0x08008e2d
 8008e5c:	08008eb1 	.word	0x08008eb1
 8008e60:	08008e2d 	.word	0x08008e2d
 8008e64:	08008e2d 	.word	0x08008e2d
 8008e68:	08008e2d 	.word	0x08008e2d
 8008e6c:	08008e2d 	.word	0x08008e2d
 8008e70:	08008fbd 	.word	0x08008fbd
 8008e74:	08008ee1 	.word	0x08008ee1
 8008e78:	08008f9f 	.word	0x08008f9f
 8008e7c:	08008e2d 	.word	0x08008e2d
 8008e80:	08008e2d 	.word	0x08008e2d
 8008e84:	08008fdf 	.word	0x08008fdf
 8008e88:	08008e2d 	.word	0x08008e2d
 8008e8c:	08008ee1 	.word	0x08008ee1
 8008e90:	08008e2d 	.word	0x08008e2d
 8008e94:	08008e2d 	.word	0x08008e2d
 8008e98:	08008fa7 	.word	0x08008fa7
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	1d1a      	adds	r2, r3, #4
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	602a      	str	r2, [r5, #0]
 8008ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eac:	2301      	movs	r3, #1
 8008eae:	e0a3      	b.n	8008ff8 <_printf_i+0x1f4>
 8008eb0:	6820      	ldr	r0, [r4, #0]
 8008eb2:	6829      	ldr	r1, [r5, #0]
 8008eb4:	0606      	lsls	r6, r0, #24
 8008eb6:	f101 0304 	add.w	r3, r1, #4
 8008eba:	d50a      	bpl.n	8008ed2 <_printf_i+0xce>
 8008ebc:	680e      	ldr	r6, [r1, #0]
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	2e00      	cmp	r6, #0
 8008ec2:	da03      	bge.n	8008ecc <_printf_i+0xc8>
 8008ec4:	232d      	movs	r3, #45	; 0x2d
 8008ec6:	4276      	negs	r6, r6
 8008ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ecc:	485e      	ldr	r0, [pc, #376]	; (8009048 <_printf_i+0x244>)
 8008ece:	230a      	movs	r3, #10
 8008ed0:	e019      	b.n	8008f06 <_printf_i+0x102>
 8008ed2:	680e      	ldr	r6, [r1, #0]
 8008ed4:	602b      	str	r3, [r5, #0]
 8008ed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008eda:	bf18      	it	ne
 8008edc:	b236      	sxthne	r6, r6
 8008ede:	e7ef      	b.n	8008ec0 <_printf_i+0xbc>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	6820      	ldr	r0, [r4, #0]
 8008ee4:	1d19      	adds	r1, r3, #4
 8008ee6:	6029      	str	r1, [r5, #0]
 8008ee8:	0601      	lsls	r1, r0, #24
 8008eea:	d501      	bpl.n	8008ef0 <_printf_i+0xec>
 8008eec:	681e      	ldr	r6, [r3, #0]
 8008eee:	e002      	b.n	8008ef6 <_printf_i+0xf2>
 8008ef0:	0646      	lsls	r6, r0, #25
 8008ef2:	d5fb      	bpl.n	8008eec <_printf_i+0xe8>
 8008ef4:	881e      	ldrh	r6, [r3, #0]
 8008ef6:	4854      	ldr	r0, [pc, #336]	; (8009048 <_printf_i+0x244>)
 8008ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8008efa:	bf0c      	ite	eq
 8008efc:	2308      	moveq	r3, #8
 8008efe:	230a      	movne	r3, #10
 8008f00:	2100      	movs	r1, #0
 8008f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f06:	6865      	ldr	r5, [r4, #4]
 8008f08:	60a5      	str	r5, [r4, #8]
 8008f0a:	2d00      	cmp	r5, #0
 8008f0c:	bfa2      	ittt	ge
 8008f0e:	6821      	ldrge	r1, [r4, #0]
 8008f10:	f021 0104 	bicge.w	r1, r1, #4
 8008f14:	6021      	strge	r1, [r4, #0]
 8008f16:	b90e      	cbnz	r6, 8008f1c <_printf_i+0x118>
 8008f18:	2d00      	cmp	r5, #0
 8008f1a:	d04d      	beq.n	8008fb8 <_printf_i+0x1b4>
 8008f1c:	4615      	mov	r5, r2
 8008f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f22:	fb03 6711 	mls	r7, r3, r1, r6
 8008f26:	5dc7      	ldrb	r7, [r0, r7]
 8008f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f2c:	4637      	mov	r7, r6
 8008f2e:	42bb      	cmp	r3, r7
 8008f30:	460e      	mov	r6, r1
 8008f32:	d9f4      	bls.n	8008f1e <_printf_i+0x11a>
 8008f34:	2b08      	cmp	r3, #8
 8008f36:	d10b      	bne.n	8008f50 <_printf_i+0x14c>
 8008f38:	6823      	ldr	r3, [r4, #0]
 8008f3a:	07de      	lsls	r6, r3, #31
 8008f3c:	d508      	bpl.n	8008f50 <_printf_i+0x14c>
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	6861      	ldr	r1, [r4, #4]
 8008f42:	4299      	cmp	r1, r3
 8008f44:	bfde      	ittt	le
 8008f46:	2330      	movle	r3, #48	; 0x30
 8008f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f50:	1b52      	subs	r2, r2, r5
 8008f52:	6122      	str	r2, [r4, #16]
 8008f54:	f8cd a000 	str.w	sl, [sp]
 8008f58:	464b      	mov	r3, r9
 8008f5a:	aa03      	add	r2, sp, #12
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f7ff fee2 	bl	8008d28 <_printf_common>
 8008f64:	3001      	adds	r0, #1
 8008f66:	d14c      	bne.n	8009002 <_printf_i+0x1fe>
 8008f68:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6c:	b004      	add	sp, #16
 8008f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f72:	4835      	ldr	r0, [pc, #212]	; (8009048 <_printf_i+0x244>)
 8008f74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f78:	6829      	ldr	r1, [r5, #0]
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f80:	6029      	str	r1, [r5, #0]
 8008f82:	061d      	lsls	r5, r3, #24
 8008f84:	d514      	bpl.n	8008fb0 <_printf_i+0x1ac>
 8008f86:	07df      	lsls	r7, r3, #31
 8008f88:	bf44      	itt	mi
 8008f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8008f8e:	6023      	strmi	r3, [r4, #0]
 8008f90:	b91e      	cbnz	r6, 8008f9a <_printf_i+0x196>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	f023 0320 	bic.w	r3, r3, #32
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	2310      	movs	r3, #16
 8008f9c:	e7b0      	b.n	8008f00 <_printf_i+0xfc>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	f043 0320 	orr.w	r3, r3, #32
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	2378      	movs	r3, #120	; 0x78
 8008fa8:	4828      	ldr	r0, [pc, #160]	; (800904c <_printf_i+0x248>)
 8008faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fae:	e7e3      	b.n	8008f78 <_printf_i+0x174>
 8008fb0:	0659      	lsls	r1, r3, #25
 8008fb2:	bf48      	it	mi
 8008fb4:	b2b6      	uxthmi	r6, r6
 8008fb6:	e7e6      	b.n	8008f86 <_printf_i+0x182>
 8008fb8:	4615      	mov	r5, r2
 8008fba:	e7bb      	b.n	8008f34 <_printf_i+0x130>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	6826      	ldr	r6, [r4, #0]
 8008fc0:	6961      	ldr	r1, [r4, #20]
 8008fc2:	1d18      	adds	r0, r3, #4
 8008fc4:	6028      	str	r0, [r5, #0]
 8008fc6:	0635      	lsls	r5, r6, #24
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	d501      	bpl.n	8008fd0 <_printf_i+0x1cc>
 8008fcc:	6019      	str	r1, [r3, #0]
 8008fce:	e002      	b.n	8008fd6 <_printf_i+0x1d2>
 8008fd0:	0670      	lsls	r0, r6, #25
 8008fd2:	d5fb      	bpl.n	8008fcc <_printf_i+0x1c8>
 8008fd4:	8019      	strh	r1, [r3, #0]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	6123      	str	r3, [r4, #16]
 8008fda:	4615      	mov	r5, r2
 8008fdc:	e7ba      	b.n	8008f54 <_printf_i+0x150>
 8008fde:	682b      	ldr	r3, [r5, #0]
 8008fe0:	1d1a      	adds	r2, r3, #4
 8008fe2:	602a      	str	r2, [r5, #0]
 8008fe4:	681d      	ldr	r5, [r3, #0]
 8008fe6:	6862      	ldr	r2, [r4, #4]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4628      	mov	r0, r5
 8008fec:	f7f7 f918 	bl	8000220 <memchr>
 8008ff0:	b108      	cbz	r0, 8008ff6 <_printf_i+0x1f2>
 8008ff2:	1b40      	subs	r0, r0, r5
 8008ff4:	6060      	str	r0, [r4, #4]
 8008ff6:	6863      	ldr	r3, [r4, #4]
 8008ff8:	6123      	str	r3, [r4, #16]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009000:	e7a8      	b.n	8008f54 <_printf_i+0x150>
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	462a      	mov	r2, r5
 8009006:	4649      	mov	r1, r9
 8009008:	4640      	mov	r0, r8
 800900a:	47d0      	blx	sl
 800900c:	3001      	adds	r0, #1
 800900e:	d0ab      	beq.n	8008f68 <_printf_i+0x164>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	079b      	lsls	r3, r3, #30
 8009014:	d413      	bmi.n	800903e <_printf_i+0x23a>
 8009016:	68e0      	ldr	r0, [r4, #12]
 8009018:	9b03      	ldr	r3, [sp, #12]
 800901a:	4298      	cmp	r0, r3
 800901c:	bfb8      	it	lt
 800901e:	4618      	movlt	r0, r3
 8009020:	e7a4      	b.n	8008f6c <_printf_i+0x168>
 8009022:	2301      	movs	r3, #1
 8009024:	4632      	mov	r2, r6
 8009026:	4649      	mov	r1, r9
 8009028:	4640      	mov	r0, r8
 800902a:	47d0      	blx	sl
 800902c:	3001      	adds	r0, #1
 800902e:	d09b      	beq.n	8008f68 <_printf_i+0x164>
 8009030:	3501      	adds	r5, #1
 8009032:	68e3      	ldr	r3, [r4, #12]
 8009034:	9903      	ldr	r1, [sp, #12]
 8009036:	1a5b      	subs	r3, r3, r1
 8009038:	42ab      	cmp	r3, r5
 800903a:	dcf2      	bgt.n	8009022 <_printf_i+0x21e>
 800903c:	e7eb      	b.n	8009016 <_printf_i+0x212>
 800903e:	2500      	movs	r5, #0
 8009040:	f104 0619 	add.w	r6, r4, #25
 8009044:	e7f5      	b.n	8009032 <_printf_i+0x22e>
 8009046:	bf00      	nop
 8009048:	0800945f 	.word	0x0800945f
 800904c:	08009470 	.word	0x08009470

08009050 <memcpy>:
 8009050:	440a      	add	r2, r1
 8009052:	4291      	cmp	r1, r2
 8009054:	f100 33ff 	add.w	r3, r0, #4294967295
 8009058:	d100      	bne.n	800905c <memcpy+0xc>
 800905a:	4770      	bx	lr
 800905c:	b510      	push	{r4, lr}
 800905e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009066:	4291      	cmp	r1, r2
 8009068:	d1f9      	bne.n	800905e <memcpy+0xe>
 800906a:	bd10      	pop	{r4, pc}

0800906c <memmove>:
 800906c:	4288      	cmp	r0, r1
 800906e:	b510      	push	{r4, lr}
 8009070:	eb01 0402 	add.w	r4, r1, r2
 8009074:	d902      	bls.n	800907c <memmove+0x10>
 8009076:	4284      	cmp	r4, r0
 8009078:	4623      	mov	r3, r4
 800907a:	d807      	bhi.n	800908c <memmove+0x20>
 800907c:	1e43      	subs	r3, r0, #1
 800907e:	42a1      	cmp	r1, r4
 8009080:	d008      	beq.n	8009094 <memmove+0x28>
 8009082:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009086:	f803 2f01 	strb.w	r2, [r3, #1]!
 800908a:	e7f8      	b.n	800907e <memmove+0x12>
 800908c:	4402      	add	r2, r0
 800908e:	4601      	mov	r1, r0
 8009090:	428a      	cmp	r2, r1
 8009092:	d100      	bne.n	8009096 <memmove+0x2a>
 8009094:	bd10      	pop	{r4, pc}
 8009096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800909a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800909e:	e7f7      	b.n	8009090 <memmove+0x24>

080090a0 <_free_r>:
 80090a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090a2:	2900      	cmp	r1, #0
 80090a4:	d044      	beq.n	8009130 <_free_r+0x90>
 80090a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090aa:	9001      	str	r0, [sp, #4]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f1a1 0404 	sub.w	r4, r1, #4
 80090b2:	bfb8      	it	lt
 80090b4:	18e4      	addlt	r4, r4, r3
 80090b6:	f000 f913 	bl	80092e0 <__malloc_lock>
 80090ba:	4a1e      	ldr	r2, [pc, #120]	; (8009134 <_free_r+0x94>)
 80090bc:	9801      	ldr	r0, [sp, #4]
 80090be:	6813      	ldr	r3, [r2, #0]
 80090c0:	b933      	cbnz	r3, 80090d0 <_free_r+0x30>
 80090c2:	6063      	str	r3, [r4, #4]
 80090c4:	6014      	str	r4, [r2, #0]
 80090c6:	b003      	add	sp, #12
 80090c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090cc:	f000 b90e 	b.w	80092ec <__malloc_unlock>
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	d908      	bls.n	80090e6 <_free_r+0x46>
 80090d4:	6825      	ldr	r5, [r4, #0]
 80090d6:	1961      	adds	r1, r4, r5
 80090d8:	428b      	cmp	r3, r1
 80090da:	bf01      	itttt	eq
 80090dc:	6819      	ldreq	r1, [r3, #0]
 80090de:	685b      	ldreq	r3, [r3, #4]
 80090e0:	1949      	addeq	r1, r1, r5
 80090e2:	6021      	streq	r1, [r4, #0]
 80090e4:	e7ed      	b.n	80090c2 <_free_r+0x22>
 80090e6:	461a      	mov	r2, r3
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	b10b      	cbz	r3, 80090f0 <_free_r+0x50>
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	d9fa      	bls.n	80090e6 <_free_r+0x46>
 80090f0:	6811      	ldr	r1, [r2, #0]
 80090f2:	1855      	adds	r5, r2, r1
 80090f4:	42a5      	cmp	r5, r4
 80090f6:	d10b      	bne.n	8009110 <_free_r+0x70>
 80090f8:	6824      	ldr	r4, [r4, #0]
 80090fa:	4421      	add	r1, r4
 80090fc:	1854      	adds	r4, r2, r1
 80090fe:	42a3      	cmp	r3, r4
 8009100:	6011      	str	r1, [r2, #0]
 8009102:	d1e0      	bne.n	80090c6 <_free_r+0x26>
 8009104:	681c      	ldr	r4, [r3, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	6053      	str	r3, [r2, #4]
 800910a:	4421      	add	r1, r4
 800910c:	6011      	str	r1, [r2, #0]
 800910e:	e7da      	b.n	80090c6 <_free_r+0x26>
 8009110:	d902      	bls.n	8009118 <_free_r+0x78>
 8009112:	230c      	movs	r3, #12
 8009114:	6003      	str	r3, [r0, #0]
 8009116:	e7d6      	b.n	80090c6 <_free_r+0x26>
 8009118:	6825      	ldr	r5, [r4, #0]
 800911a:	1961      	adds	r1, r4, r5
 800911c:	428b      	cmp	r3, r1
 800911e:	bf04      	itt	eq
 8009120:	6819      	ldreq	r1, [r3, #0]
 8009122:	685b      	ldreq	r3, [r3, #4]
 8009124:	6063      	str	r3, [r4, #4]
 8009126:	bf04      	itt	eq
 8009128:	1949      	addeq	r1, r1, r5
 800912a:	6021      	streq	r1, [r4, #0]
 800912c:	6054      	str	r4, [r2, #4]
 800912e:	e7ca      	b.n	80090c6 <_free_r+0x26>
 8009130:	b003      	add	sp, #12
 8009132:	bd30      	pop	{r4, r5, pc}
 8009134:	20000700 	.word	0x20000700

08009138 <sbrk_aligned>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	4e0e      	ldr	r6, [pc, #56]	; (8009174 <sbrk_aligned+0x3c>)
 800913c:	460c      	mov	r4, r1
 800913e:	6831      	ldr	r1, [r6, #0]
 8009140:	4605      	mov	r5, r0
 8009142:	b911      	cbnz	r1, 800914a <sbrk_aligned+0x12>
 8009144:	f000 f8bc 	bl	80092c0 <_sbrk_r>
 8009148:	6030      	str	r0, [r6, #0]
 800914a:	4621      	mov	r1, r4
 800914c:	4628      	mov	r0, r5
 800914e:	f000 f8b7 	bl	80092c0 <_sbrk_r>
 8009152:	1c43      	adds	r3, r0, #1
 8009154:	d00a      	beq.n	800916c <sbrk_aligned+0x34>
 8009156:	1cc4      	adds	r4, r0, #3
 8009158:	f024 0403 	bic.w	r4, r4, #3
 800915c:	42a0      	cmp	r0, r4
 800915e:	d007      	beq.n	8009170 <sbrk_aligned+0x38>
 8009160:	1a21      	subs	r1, r4, r0
 8009162:	4628      	mov	r0, r5
 8009164:	f000 f8ac 	bl	80092c0 <_sbrk_r>
 8009168:	3001      	adds	r0, #1
 800916a:	d101      	bne.n	8009170 <sbrk_aligned+0x38>
 800916c:	f04f 34ff 	mov.w	r4, #4294967295
 8009170:	4620      	mov	r0, r4
 8009172:	bd70      	pop	{r4, r5, r6, pc}
 8009174:	20000704 	.word	0x20000704

08009178 <_malloc_r>:
 8009178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800917c:	1ccd      	adds	r5, r1, #3
 800917e:	f025 0503 	bic.w	r5, r5, #3
 8009182:	3508      	adds	r5, #8
 8009184:	2d0c      	cmp	r5, #12
 8009186:	bf38      	it	cc
 8009188:	250c      	movcc	r5, #12
 800918a:	2d00      	cmp	r5, #0
 800918c:	4607      	mov	r7, r0
 800918e:	db01      	blt.n	8009194 <_malloc_r+0x1c>
 8009190:	42a9      	cmp	r1, r5
 8009192:	d905      	bls.n	80091a0 <_malloc_r+0x28>
 8009194:	230c      	movs	r3, #12
 8009196:	603b      	str	r3, [r7, #0]
 8009198:	2600      	movs	r6, #0
 800919a:	4630      	mov	r0, r6
 800919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a0:	4e2e      	ldr	r6, [pc, #184]	; (800925c <_malloc_r+0xe4>)
 80091a2:	f000 f89d 	bl	80092e0 <__malloc_lock>
 80091a6:	6833      	ldr	r3, [r6, #0]
 80091a8:	461c      	mov	r4, r3
 80091aa:	bb34      	cbnz	r4, 80091fa <_malloc_r+0x82>
 80091ac:	4629      	mov	r1, r5
 80091ae:	4638      	mov	r0, r7
 80091b0:	f7ff ffc2 	bl	8009138 <sbrk_aligned>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	4604      	mov	r4, r0
 80091b8:	d14d      	bne.n	8009256 <_malloc_r+0xde>
 80091ba:	6834      	ldr	r4, [r6, #0]
 80091bc:	4626      	mov	r6, r4
 80091be:	2e00      	cmp	r6, #0
 80091c0:	d140      	bne.n	8009244 <_malloc_r+0xcc>
 80091c2:	6823      	ldr	r3, [r4, #0]
 80091c4:	4631      	mov	r1, r6
 80091c6:	4638      	mov	r0, r7
 80091c8:	eb04 0803 	add.w	r8, r4, r3
 80091cc:	f000 f878 	bl	80092c0 <_sbrk_r>
 80091d0:	4580      	cmp	r8, r0
 80091d2:	d13a      	bne.n	800924a <_malloc_r+0xd2>
 80091d4:	6821      	ldr	r1, [r4, #0]
 80091d6:	3503      	adds	r5, #3
 80091d8:	1a6d      	subs	r5, r5, r1
 80091da:	f025 0503 	bic.w	r5, r5, #3
 80091de:	3508      	adds	r5, #8
 80091e0:	2d0c      	cmp	r5, #12
 80091e2:	bf38      	it	cc
 80091e4:	250c      	movcc	r5, #12
 80091e6:	4629      	mov	r1, r5
 80091e8:	4638      	mov	r0, r7
 80091ea:	f7ff ffa5 	bl	8009138 <sbrk_aligned>
 80091ee:	3001      	adds	r0, #1
 80091f0:	d02b      	beq.n	800924a <_malloc_r+0xd2>
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	442b      	add	r3, r5
 80091f6:	6023      	str	r3, [r4, #0]
 80091f8:	e00e      	b.n	8009218 <_malloc_r+0xa0>
 80091fa:	6822      	ldr	r2, [r4, #0]
 80091fc:	1b52      	subs	r2, r2, r5
 80091fe:	d41e      	bmi.n	800923e <_malloc_r+0xc6>
 8009200:	2a0b      	cmp	r2, #11
 8009202:	d916      	bls.n	8009232 <_malloc_r+0xba>
 8009204:	1961      	adds	r1, r4, r5
 8009206:	42a3      	cmp	r3, r4
 8009208:	6025      	str	r5, [r4, #0]
 800920a:	bf18      	it	ne
 800920c:	6059      	strne	r1, [r3, #4]
 800920e:	6863      	ldr	r3, [r4, #4]
 8009210:	bf08      	it	eq
 8009212:	6031      	streq	r1, [r6, #0]
 8009214:	5162      	str	r2, [r4, r5]
 8009216:	604b      	str	r3, [r1, #4]
 8009218:	4638      	mov	r0, r7
 800921a:	f104 060b 	add.w	r6, r4, #11
 800921e:	f000 f865 	bl	80092ec <__malloc_unlock>
 8009222:	f026 0607 	bic.w	r6, r6, #7
 8009226:	1d23      	adds	r3, r4, #4
 8009228:	1af2      	subs	r2, r6, r3
 800922a:	d0b6      	beq.n	800919a <_malloc_r+0x22>
 800922c:	1b9b      	subs	r3, r3, r6
 800922e:	50a3      	str	r3, [r4, r2]
 8009230:	e7b3      	b.n	800919a <_malloc_r+0x22>
 8009232:	6862      	ldr	r2, [r4, #4]
 8009234:	42a3      	cmp	r3, r4
 8009236:	bf0c      	ite	eq
 8009238:	6032      	streq	r2, [r6, #0]
 800923a:	605a      	strne	r2, [r3, #4]
 800923c:	e7ec      	b.n	8009218 <_malloc_r+0xa0>
 800923e:	4623      	mov	r3, r4
 8009240:	6864      	ldr	r4, [r4, #4]
 8009242:	e7b2      	b.n	80091aa <_malloc_r+0x32>
 8009244:	4634      	mov	r4, r6
 8009246:	6876      	ldr	r6, [r6, #4]
 8009248:	e7b9      	b.n	80091be <_malloc_r+0x46>
 800924a:	230c      	movs	r3, #12
 800924c:	603b      	str	r3, [r7, #0]
 800924e:	4638      	mov	r0, r7
 8009250:	f000 f84c 	bl	80092ec <__malloc_unlock>
 8009254:	e7a1      	b.n	800919a <_malloc_r+0x22>
 8009256:	6025      	str	r5, [r4, #0]
 8009258:	e7de      	b.n	8009218 <_malloc_r+0xa0>
 800925a:	bf00      	nop
 800925c:	20000700 	.word	0x20000700

08009260 <_realloc_r>:
 8009260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009264:	4680      	mov	r8, r0
 8009266:	4614      	mov	r4, r2
 8009268:	460e      	mov	r6, r1
 800926a:	b921      	cbnz	r1, 8009276 <_realloc_r+0x16>
 800926c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009270:	4611      	mov	r1, r2
 8009272:	f7ff bf81 	b.w	8009178 <_malloc_r>
 8009276:	b92a      	cbnz	r2, 8009284 <_realloc_r+0x24>
 8009278:	f7ff ff12 	bl	80090a0 <_free_r>
 800927c:	4625      	mov	r5, r4
 800927e:	4628      	mov	r0, r5
 8009280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009284:	f000 f838 	bl	80092f8 <_malloc_usable_size_r>
 8009288:	4284      	cmp	r4, r0
 800928a:	4607      	mov	r7, r0
 800928c:	d802      	bhi.n	8009294 <_realloc_r+0x34>
 800928e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009292:	d812      	bhi.n	80092ba <_realloc_r+0x5a>
 8009294:	4621      	mov	r1, r4
 8009296:	4640      	mov	r0, r8
 8009298:	f7ff ff6e 	bl	8009178 <_malloc_r>
 800929c:	4605      	mov	r5, r0
 800929e:	2800      	cmp	r0, #0
 80092a0:	d0ed      	beq.n	800927e <_realloc_r+0x1e>
 80092a2:	42bc      	cmp	r4, r7
 80092a4:	4622      	mov	r2, r4
 80092a6:	4631      	mov	r1, r6
 80092a8:	bf28      	it	cs
 80092aa:	463a      	movcs	r2, r7
 80092ac:	f7ff fed0 	bl	8009050 <memcpy>
 80092b0:	4631      	mov	r1, r6
 80092b2:	4640      	mov	r0, r8
 80092b4:	f7ff fef4 	bl	80090a0 <_free_r>
 80092b8:	e7e1      	b.n	800927e <_realloc_r+0x1e>
 80092ba:	4635      	mov	r5, r6
 80092bc:	e7df      	b.n	800927e <_realloc_r+0x1e>
	...

080092c0 <_sbrk_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4d06      	ldr	r5, [pc, #24]	; (80092dc <_sbrk_r+0x1c>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	f7f7 fd80 	bl	8000dd0 <_sbrk>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_sbrk_r+0x1a>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_sbrk_r+0x1a>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20000708 	.word	0x20000708

080092e0 <__malloc_lock>:
 80092e0:	4801      	ldr	r0, [pc, #4]	; (80092e8 <__malloc_lock+0x8>)
 80092e2:	f000 b811 	b.w	8009308 <__retarget_lock_acquire_recursive>
 80092e6:	bf00      	nop
 80092e8:	2000070c 	.word	0x2000070c

080092ec <__malloc_unlock>:
 80092ec:	4801      	ldr	r0, [pc, #4]	; (80092f4 <__malloc_unlock+0x8>)
 80092ee:	f000 b80c 	b.w	800930a <__retarget_lock_release_recursive>
 80092f2:	bf00      	nop
 80092f4:	2000070c 	.word	0x2000070c

080092f8 <_malloc_usable_size_r>:
 80092f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092fc:	1f18      	subs	r0, r3, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bfbc      	itt	lt
 8009302:	580b      	ldrlt	r3, [r1, r0]
 8009304:	18c0      	addlt	r0, r0, r3
 8009306:	4770      	bx	lr

08009308 <__retarget_lock_acquire_recursive>:
 8009308:	4770      	bx	lr

0800930a <__retarget_lock_release_recursive>:
 800930a:	4770      	bx	lr

0800930c <_init>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	bf00      	nop
 8009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009312:	bc08      	pop	{r3}
 8009314:	469e      	mov	lr, r3
 8009316:	4770      	bx	lr

08009318 <_fini>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	bf00      	nop
 800931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931e:	bc08      	pop	{r3}
 8009320:	469e      	mov	lr, r3
 8009322:	4770      	bx	lr
