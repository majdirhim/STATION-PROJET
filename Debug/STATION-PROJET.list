
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004570  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047fc  080047fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004804  08004804  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800480c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  0800487c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  0800487c  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4cb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e54  00000000  00000000  0002c56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002e3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002ece8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269bc  00000000  00000000  0002f528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd6a  00000000  00000000  00055ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec5b6  00000000  00000000  00062c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b08  00000000  00000000  0014f254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004728 	.word	0x08004728

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004728 	.word	0x08004728

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0x98>)
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_ADC1_Init+0x9c>)
 80005ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0x98>)
 80005ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_ADC1_Init+0x98>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_ADC1_Init+0xa0>)
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_ADC1_Init+0x98>)
 8000602:	2201      	movs	r2, #1
 8000604:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_ADC1_Init+0x98>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_ADC1_Init+0x98>)
 8000610:	2201      	movs	r2, #1
 8000612:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0x98>)
 8000616:	f000 fc91 	bl	8000f3c <HAL_ADC_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000620:	f000 fa40 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800062c:	2304      	movs	r3, #4
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0x98>)
 8000636:	f000 fe2b 	bl	8001290 <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 fa30 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000008c 	.word	0x2000008c
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a15      	ldr	r2, [pc, #84]	; (80006cc <HAL_ADC_MspInit+0x74>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d123      	bne.n	80006c2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_ADC_MspInit+0x78>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <HAL_ADC_MspInit+0x78>)
 8000680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000684:	6453      	str	r3, [r2, #68]	; 0x44
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_ADC_MspInit+0x78>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_ADC_MspInit+0x78>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <HAL_ADC_MspInit+0x78>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <HAL_ADC_MspInit+0x78>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006aa:	2301      	movs	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ae:	2303      	movs	r3, #3
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <HAL_ADC_MspInit+0x7c>)
 80006be:	f001 f91d 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	; 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40012000 	.word	0x40012000
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40020000 	.word	0x40020000

080006d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b090      	sub	sp, #64	; 0x40
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ee:	4b8b      	ldr	r3, [pc, #556]	; (800091c <MX_GPIO_Init+0x244>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a8a      	ldr	r2, [pc, #552]	; (800091c <MX_GPIO_Init+0x244>)
 80006f4:	f043 0310 	orr.w	r3, r3, #16
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b88      	ldr	r3, [pc, #544]	; (800091c <MX_GPIO_Init+0x244>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0310 	and.w	r3, r3, #16
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
 8000704:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000706:	4b85      	ldr	r3, [pc, #532]	; (800091c <MX_GPIO_Init+0x244>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a84      	ldr	r2, [pc, #528]	; (800091c <MX_GPIO_Init+0x244>)
 800070c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b82      	ldr	r3, [pc, #520]	; (800091c <MX_GPIO_Init+0x244>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b7f      	ldr	r3, [pc, #508]	; (800091c <MX_GPIO_Init+0x244>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a7e      	ldr	r2, [pc, #504]	; (800091c <MX_GPIO_Init+0x244>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b7c      	ldr	r3, [pc, #496]	; (800091c <MX_GPIO_Init+0x244>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	623b      	str	r3, [r7, #32]
 8000734:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	4b79      	ldr	r3, [pc, #484]	; (800091c <MX_GPIO_Init+0x244>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a78      	ldr	r2, [pc, #480]	; (800091c <MX_GPIO_Init+0x244>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b76      	ldr	r3, [pc, #472]	; (800091c <MX_GPIO_Init+0x244>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b73      	ldr	r3, [pc, #460]	; (800091c <MX_GPIO_Init+0x244>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a72      	ldr	r2, [pc, #456]	; (800091c <MX_GPIO_Init+0x244>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b70      	ldr	r3, [pc, #448]	; (800091c <MX_GPIO_Init+0x244>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b6d      	ldr	r3, [pc, #436]	; (800091c <MX_GPIO_Init+0x244>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a6c      	ldr	r2, [pc, #432]	; (800091c <MX_GPIO_Init+0x244>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b6a      	ldr	r3, [pc, #424]	; (800091c <MX_GPIO_Init+0x244>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	617b      	str	r3, [r7, #20]
 800077c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800077e:	4b67      	ldr	r3, [pc, #412]	; (800091c <MX_GPIO_Init+0x244>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a66      	ldr	r2, [pc, #408]	; (800091c <MX_GPIO_Init+0x244>)
 8000784:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b64      	ldr	r3, [pc, #400]	; (800091c <MX_GPIO_Init+0x244>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000796:	4b61      	ldr	r3, [pc, #388]	; (800091c <MX_GPIO_Init+0x244>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a60      	ldr	r2, [pc, #384]	; (800091c <MX_GPIO_Init+0x244>)
 800079c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b5e      	ldr	r3, [pc, #376]	; (800091c <MX_GPIO_Init+0x244>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80007ae:	4b5b      	ldr	r3, [pc, #364]	; (800091c <MX_GPIO_Init+0x244>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a5a      	ldr	r2, [pc, #360]	; (800091c <MX_GPIO_Init+0x244>)
 80007b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b58      	ldr	r3, [pc, #352]	; (800091c <MX_GPIO_Init+0x244>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c6:	4b55      	ldr	r3, [pc, #340]	; (800091c <MX_GPIO_Init+0x244>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a54      	ldr	r2, [pc, #336]	; (800091c <MX_GPIO_Init+0x244>)
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b52      	ldr	r3, [pc, #328]	; (800091c <MX_GPIO_Init+0x244>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0320 	and.w	r3, r3, #32
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	4b4f      	ldr	r3, [pc, #316]	; (800091c <MX_GPIO_Init+0x244>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a4e      	ldr	r2, [pc, #312]	; (800091c <MX_GPIO_Init+0x244>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b4c      	ldr	r3, [pc, #304]	; (800091c <MX_GPIO_Init+0x244>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 80007f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fc:	2303      	movs	r3, #3
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000808:	4619      	mov	r1, r3
 800080a:	4845      	ldr	r0, [pc, #276]	; (8000920 <MX_GPIO_Init+0x248>)
 800080c:	f001 f876 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 8000810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000816:	2303      	movs	r3, #3
 8000818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000822:	4619      	mov	r1, r3
 8000824:	483f      	ldr	r0, [pc, #252]	; (8000924 <MX_GPIO_Init+0x24c>)
 8000826:	f001 f869 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800082a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000830:	2303      	movs	r3, #3
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083c:	4619      	mov	r1, r3
 800083e:	483a      	ldr	r0, [pc, #232]	; (8000928 <MX_GPIO_Init+0x250>)
 8000840:	f001 f85c 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD2
                           PD15 PD10 PD14 PD9
                           PD8 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8000844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084a:	2303      	movs	r3, #3
 800084c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000856:	4619      	mov	r1, r3
 8000858:	4834      	ldr	r0, [pc, #208]	; (800092c <MX_GPIO_Init+0x254>)
 800085a:	f001 f84f 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 800085e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000864:	2303      	movs	r3, #3
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000870:	4619      	mov	r1, r3
 8000872:	482f      	ldr	r0, [pc, #188]	; (8000930 <MX_GPIO_Init+0x258>)
 8000874:	f001 f842 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA4 PA2
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 8000878:	f649 53fe 	movw	r3, #40446	; 0x9dfe
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087e:	2303      	movs	r3, #3
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800088a:	4619      	mov	r1, r3
 800088c:	4829      	ldr	r0, [pc, #164]	; (8000934 <MX_GPIO_Init+0x25c>)
 800088e:	f001 f835 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8000892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80008a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4824      	ldr	r0, [pc, #144]	; (8000938 <MX_GPIO_Init+0x260>)
 80008a8:	f001 f828 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 80008ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	2303      	movs	r3, #3
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	481e      	ldr	r0, [pc, #120]	; (800093c <MX_GPIO_Init+0x264>)
 80008c2:	f001 f81b 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80008c6:	23ff      	movs	r3, #255	; 0xff
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d6:	4619      	mov	r1, r3
 80008d8:	4819      	ldr	r0, [pc, #100]	; (8000940 <MX_GPIO_Init+0x268>)
 80008da:	f001 f80f 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e4:	2303      	movs	r3, #3
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f0:	4619      	mov	r1, r3
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <MX_GPIO_Init+0x26c>)
 80008f4:	f001 f802 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80008f8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800090a:	4619      	mov	r1, r3
 800090c:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_GPIO_Init+0x270>)
 800090e:	f000 fff5 	bl	80018fc <HAL_GPIO_Init>

}
 8000912:	bf00      	nop
 8000914:	3740      	adds	r7, #64	; 0x40
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40021000 	.word	0x40021000
 8000924:	40021800 	.word	0x40021800
 8000928:	40020400 	.word	0x40020400
 800092c:	40020c00 	.word	0x40020c00
 8000930:	40020800 	.word	0x40020800
 8000934:	40020000 	.word	0x40020000
 8000938:	40022400 	.word	0x40022400
 800093c:	40022000 	.word	0x40022000
 8000940:	40022800 	.word	0x40022800
 8000944:	40021400 	.word	0x40021400
 8000948:	40021c00 	.word	0x40021c00

0800094c <_write>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char *ptr, int len)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	b29a      	uxth	r2, r3
 800095c:	2364      	movs	r3, #100	; 0x64
 800095e:	68b9      	ldr	r1, [r7, #8]
 8000960:	4803      	ldr	r0, [pc, #12]	; (8000970 <_write+0x24>)
 8000962:	f002 fa8f 	bl	8002e84 <HAL_UART_Transmit>
  return len;
 8000966:	687b      	ldr	r3, [r7, #4]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000d8 	.word	0x200000d8

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 fa5e 	bl	8000e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f823 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f7ff fea9 	bl	80006d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000986:	f7ff fe15 	bl	80005b4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800098a:	f000 f979 	bl	8000c80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start(&hadc1);
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <main+0x4c>)
 8000990:	f000 fb18 	bl	8000fc4 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK){
 8000994:	2164      	movs	r1, #100	; 0x64
 8000996:	480a      	ldr	r0, [pc, #40]	; (80009c0 <main+0x4c>)
 8000998:	f000 fbe2 	bl	8001160 <HAL_ADC_PollForConversion>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d108      	bne.n	80009b4 <main+0x40>
		  val = (int)HAL_ADC_GetValue(&hadc1);
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <main+0x4c>)
 80009a4:	f000 fc67 	bl	8001276 <HAL_ADC_GetValue>
 80009a8:	4603      	mov	r3, r0
 80009aa:	607b      	str	r3, [r7, #4]
		  	printf("val = %d\n\r",val);
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <main+0x50>)
 80009b0:	f002 ff2c 	bl	800380c <iprintf>
	  }

HAL_Delay(1000);
 80009b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b8:	f000 fa9c 	bl	8000ef4 <HAL_Delay>
	  if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK){
 80009bc:	e7ea      	b.n	8000994 <main+0x20>
 80009be:	bf00      	nop
 80009c0:	2000008c 	.word	0x2000008c
 80009c4:	08004740 	.word	0x08004740

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	; 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 ff10 	bl	80037fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <SystemClock_Config+0xd4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a2a      	ldr	r2, [pc, #168]	; (8000a9c <SystemClock_Config+0xd4>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <SystemClock_Config+0xd4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <SystemClock_Config+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0c:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <SystemClock_Config+0xd8>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <SystemClock_Config+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a34:	230c      	movs	r3, #12
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a38:	2360      	movs	r3, #96	; 0x60
 8000a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a44:	f107 0320 	add.w	r3, r7, #32
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f953 	bl	8001cf4 <HAL_RCC_OscConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a54:	f000 f826 	bl	8000aa4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a58:	f001 f8fc 	bl	8001c54 <HAL_PWREx_EnableOverDrive>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a62:	f000 f81f 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	230f      	movs	r3, #15
 8000a68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2103      	movs	r1, #3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 fbd9 	bl	800223c <HAL_RCC_ClockConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a90:	f000 f808 	bl	8000aa4 <Error_Handler>
  }
}
 8000a94:	bf00      	nop
 8000a96:	3750      	adds	r7, #80	; 0x50
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f9b6 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
	}

return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bae:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <_isatty>:

int _isatty(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f002 fdc2 	bl	80037a8 <__errno>
 8000c24:	4603      	mov	r3, r0
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20050000 	.word	0x20050000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	200000d4 	.word	0x200000d4
 8000c58:	20000170 	.word	0x20000170

08000c5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000c86:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <MX_USART1_UART_Init+0x60>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000c8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000c94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c98:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_USART1_UART_Init+0x5c>)
 8000cc8:	f002 f88e 	bl	8002de8 <HAL_UART_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8000cd2:	f7ff fee7 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000d8 	.word	0x200000d8
 8000ce0:	40011000 	.word	0x40011000

08000ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0ac      	sub	sp, #176	; 0xb0
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	2284      	movs	r2, #132	; 0x84
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fd79 	bl	80037fc <memset>
  if(uartHandle->Instance==USART1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a32      	ldr	r2, [pc, #200]	; (8000dd8 <HAL_UART_MspInit+0xf4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d15c      	bne.n	8000dce <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d14:	2340      	movs	r3, #64	; 0x40
 8000d16:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1c:	f107 0318 	add.w	r3, r7, #24
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 fc71 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d2c:	f7ff feba 	bl	8000aa4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_UART_MspInit+0xf8>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d90:	2307      	movs	r3, #7
 8000d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4810      	ldr	r0, [pc, #64]	; (8000de0 <HAL_UART_MspInit+0xfc>)
 8000d9e:	f000 fdad 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <HAL_UART_MspInit+0x100>)
 8000dca:	f000 fd97 	bl	80018fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	37b0      	adds	r7, #176	; 0xb0
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40011000 	.word	0x40011000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020000 	.word	0x40020000

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ff23 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f002 fccd 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fdab 	bl	8000974 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e2c:	0800480c 	.word	0x0800480c
  ldr r2, =_sbss
 8000e30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e34:	20000170 	.word	0x20000170

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>

08000e3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 fd28 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 f805 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4a:	f7ff fe31 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 fd35 	bl	80018e2 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 fd0b 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	2000015c 	.word	0x2000015c

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000015c 	.word	0x2000015c

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d101      	bne.n	8000f52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e031      	b.n	8000fb6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d109      	bne.n	8000f6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fb7c 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d116      	bne.n	8000fa8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_ADC_Init+0x84>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	f043 0202 	orr.w	r2, r3, #2
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 fad6 	bl	800153c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f023 0303 	bic.w	r3, r3, #3
 8000f9e:	f043 0201 	orr.w	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa6:	e001      	b.n	8000fac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	ffffeefd 	.word	0xffffeefd

08000fc4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Start+0x1a>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e0ad      	b.n	800113a <HAL_ADC_Start+0x176>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d018      	beq.n	8001026 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0201 	orr.w	r2, r2, #1
 8001002:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001004:	4b50      	ldr	r3, [pc, #320]	; (8001148 <HAL_ADC_Start+0x184>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a50      	ldr	r2, [pc, #320]	; (800114c <HAL_ADC_Start+0x188>)
 800100a:	fba2 2303 	umull	r2, r3, r2, r3
 800100e:	0c9a      	lsrs	r2, r3, #18
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001018:	e002      	b.n	8001020 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	3b01      	subs	r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f9      	bne.n	800101a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b01      	cmp	r3, #1
 8001032:	d175      	bne.n	8001120 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001038:	4b45      	ldr	r3, [pc, #276]	; (8001150 <HAL_ADC_Start+0x18c>)
 800103a:	4013      	ands	r3, r2
 800103c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800105a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800106e:	d106      	bne.n	800107e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	f023 0206 	bic.w	r2, r3, #6
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	645a      	str	r2, [r3, #68]	; 0x44
 800107c:	e002      	b.n	8001084 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001094:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001096:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_ADC_Start+0x190>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10f      	bne.n	80010c2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d143      	bne.n	8001138 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	e03a      	b.n	8001138 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a24      	ldr	r2, [pc, #144]	; (8001158 <HAL_ADC_Start+0x194>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d10e      	bne.n	80010ea <HAL_ADC_Start+0x126>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d107      	bne.n	80010ea <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010e8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_ADC_Start+0x190>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d120      	bne.n	8001138 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <HAL_ADC_Start+0x198>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d11b      	bne.n	8001138 <HAL_ADC_Start+0x174>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d114      	bne.n	8001138 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	e00b      	b.n	8001138 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	f043 0210 	orr.w	r2, r3, #16
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	f043 0201 	orr.w	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000
 800114c:	431bde83 	.word	0x431bde83
 8001150:	fffff8fe 	.word	0xfffff8fe
 8001154:	40012300 	.word	0x40012300
 8001158:	40012000 	.word	0x40012000
 800115c:	40012200 	.word	0x40012200

08001160 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117c:	d113      	bne.n	80011a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800118c:	d10b      	bne.n	80011a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f043 0220 	orr.w	r2, r3, #32
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e063      	b.n	800126e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011a6:	f7ff fe99 	bl	8000edc <HAL_GetTick>
 80011aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011ac:	e021      	b.n	80011f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d01d      	beq.n	80011f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d007      	beq.n	80011cc <HAL_ADC_PollForConversion+0x6c>
 80011bc:	f7ff fe8e 	bl	8000edc <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d212      	bcs.n	80011f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d00b      	beq.n	80011f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f043 0204 	orr.w	r2, r3, #4
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e03d      	b.n	800126e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d1d6      	bne.n	80011ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f06f 0212 	mvn.w	r2, #18
 8001208:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d123      	bne.n	800126c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001228:	2b00      	cmp	r3, #0
 800122a:	d11f      	bne.n	800126c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001244:	2b00      	cmp	r3, #0
 8001246:	d111      	bne.n	800126c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1c>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e136      	b.n	800151a <HAL_ADC_ConfigChannel+0x28a>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d93a      	bls.n	8001332 <HAL_ADC_ConfigChannel+0xa2>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012c4:	d035      	beq.n	8001332 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68d9      	ldr	r1, [r3, #12]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	461a      	mov	r2, r3
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	3b1e      	subs	r3, #30
 80012dc:	2207      	movs	r2, #7
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	400a      	ands	r2, r1
 80012ea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a8d      	ldr	r2, [pc, #564]	; (8001528 <HAL_ADC_ConfigChannel+0x298>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10a      	bne.n	800130c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68d9      	ldr	r1, [r3, #12]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	061a      	lsls	r2, r3, #24
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800130a:	e035      	b.n	8001378 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68d9      	ldr	r1, [r3, #12]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	4603      	mov	r3, r0
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4403      	add	r3, r0
 8001324:	3b1e      	subs	r3, #30
 8001326:	409a      	lsls	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001330:	e022      	b.n	8001378 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6919      	ldr	r1, [r3, #16]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	2207      	movs	r2, #7
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43da      	mvns	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	400a      	ands	r2, r1
 8001354:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6919      	ldr	r1, [r3, #16]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4618      	mov	r0, r3
 8001368:	4603      	mov	r3, r0
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4403      	add	r3, r0
 800136e:	409a      	lsls	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b06      	cmp	r3, #6
 800137e:	d824      	bhi.n	80013ca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	3b05      	subs	r3, #5
 8001392:	221f      	movs	r2, #31
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43da      	mvns	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	400a      	ands	r2, r1
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	3b05      	subs	r3, #5
 80013bc:	fa00 f203 	lsl.w	r2, r0, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
 80013c8:	e04c      	b.n	8001464 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d824      	bhi.n	800141c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	3b23      	subs	r3, #35	; 0x23
 80013e4:	221f      	movs	r2, #31
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	400a      	ands	r2, r1
 80013f2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	3b23      	subs	r3, #35	; 0x23
 800140e:	fa00 f203 	lsl.w	r2, r0, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	631a      	str	r2, [r3, #48]	; 0x30
 800141a:	e023      	b.n	8001464 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	3b41      	subs	r3, #65	; 0x41
 800142e:	221f      	movs	r2, #31
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43da      	mvns	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	400a      	ands	r2, r1
 800143c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	3b41      	subs	r3, #65	; 0x41
 8001458:	fa00 f203 	lsl.w	r2, r0, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a30      	ldr	r2, [pc, #192]	; (800152c <HAL_ADC_ConfigChannel+0x29c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10a      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1f4>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001476:	d105      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001478:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a2c      	ldr	r2, [pc, #176]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 800147e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001482:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a28      	ldr	r2, [pc, #160]	; (800152c <HAL_ADC_ConfigChannel+0x29c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d10f      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x21e>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b12      	cmp	r3, #18
 8001494:	d10b      	bne.n	80014ae <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a25      	ldr	r2, [pc, #148]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 800149c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 80014a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <HAL_ADC_ConfigChannel+0x29c>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d12b      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x280>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <HAL_ADC_ConfigChannel+0x298>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d003      	beq.n	80014ca <HAL_ADC_ConfigChannel+0x23a>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b11      	cmp	r3, #17
 80014c8:	d122      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 80014d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80014d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <HAL_ADC_ConfigChannel+0x2a0>)
 80014dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_ADC_ConfigChannel+0x298>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d111      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_ADC_ConfigChannel+0x2a4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_ADC_ConfigChannel+0x2a8>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9a      	lsrs	r2, r3, #18
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001502:	e002      	b.n	800150a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3b01      	subs	r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f9      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	10000012 	.word	0x10000012
 800152c:	40012000 	.word	0x40012000
 8001530:	40012300 	.word	0x40012300
 8001534:	20000000 	.word	0x20000000
 8001538:	431bde83 	.word	0x431bde83

0800153c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001544:	4b78      	ldr	r3, [pc, #480]	; (8001728 <ADC_Init+0x1ec>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a77      	ldr	r2, [pc, #476]	; (8001728 <ADC_Init+0x1ec>)
 800154a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800154e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001550:	4b75      	ldr	r3, [pc, #468]	; (8001728 <ADC_Init+0x1ec>)
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4973      	ldr	r1, [pc, #460]	; (8001728 <ADC_Init+0x1ec>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800156c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	021a      	lsls	r2, r3, #8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6899      	ldr	r1, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ca:	4a58      	ldr	r2, [pc, #352]	; (800172c <ADC_Init+0x1f0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d022      	beq.n	8001616 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	e00f      	b.n	8001636 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001634:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0202 	bic.w	r2, r2, #2
 8001644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6899      	ldr	r1, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	005a      	lsls	r2, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01b      	beq.n	800169c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001672:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	3b01      	subs	r3, #1
 8001690:	035a      	lsls	r2, r3, #13
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	e007      	b.n	80016ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	051a      	lsls	r2, r3, #20
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6899      	ldr	r1, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016ee:	025a      	lsls	r2, r3, #9
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6899      	ldr	r1, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	029a      	lsls	r2, r3, #10
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40012300 	.word	0x40012300
 800172c:	0f000001 	.word	0x0f000001

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <__NVIC_SetPriorityGrouping+0x40>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	4313      	orrs	r3, r2
 800175c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <__NVIC_SetPriorityGrouping+0x40>)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	60d3      	str	r3, [r2, #12]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00
 8001774:	05fa0000 	.word	0x05fa0000

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff8e 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff47 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff5c 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff8e 	bl	80017e8 <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5d 	bl	8001794 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffb0 	bl	8001850 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e175      	b.n	8001c08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800191c:	2201      	movs	r2, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8164 	bne.w	8001c02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d005      	beq.n	8001952 <HAL_GPIO_Init+0x56>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d130      	bne.n	80019b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 0201 	and.w	r2, r3, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d017      	beq.n	80019f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d123      	bne.n	8001a44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	69b9      	ldr	r1, [r7, #24]
 8001a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80be 	beq.w	8001c02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_GPIO_Init+0x324>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a9e:	4a61      	ldr	r2, [pc, #388]	; (8001c24 <HAL_GPIO_Init+0x328>)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a58      	ldr	r2, [pc, #352]	; (8001c28 <HAL_GPIO_Init+0x32c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d037      	beq.n	8001b3a <HAL_GPIO_Init+0x23e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_GPIO_Init+0x330>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d031      	beq.n	8001b36 <HAL_GPIO_Init+0x23a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a56      	ldr	r2, [pc, #344]	; (8001c30 <HAL_GPIO_Init+0x334>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d02b      	beq.n	8001b32 <HAL_GPIO_Init+0x236>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a55      	ldr	r2, [pc, #340]	; (8001c34 <HAL_GPIO_Init+0x338>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d025      	beq.n	8001b2e <HAL_GPIO_Init+0x232>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <HAL_GPIO_Init+0x33c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d01f      	beq.n	8001b2a <HAL_GPIO_Init+0x22e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a53      	ldr	r2, [pc, #332]	; (8001c3c <HAL_GPIO_Init+0x340>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d019      	beq.n	8001b26 <HAL_GPIO_Init+0x22a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_GPIO_Init+0x344>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x226>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a51      	ldr	r2, [pc, #324]	; (8001c44 <HAL_GPIO_Init+0x348>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x222>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a50      	ldr	r2, [pc, #320]	; (8001c48 <HAL_GPIO_Init+0x34c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x21e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4f      	ldr	r2, [pc, #316]	; (8001c4c <HAL_GPIO_Init+0x350>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x21a>
 8001b12:	2309      	movs	r3, #9
 8001b14:	e012      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b16:	230a      	movs	r3, #10
 8001b18:	e010      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	e00e      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b1e:	2307      	movs	r3, #7
 8001b20:	e00c      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b22:	2306      	movs	r3, #6
 8001b24:	e00a      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b26:	2305      	movs	r3, #5
 8001b28:	e008      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x240>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <HAL_GPIO_Init+0x328>)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a34      	ldr	r2, [pc, #208]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_GPIO_Init+0x354>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	f67f ae86 	bls.w	800191c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40021400 	.word	0x40021400
 8001c40:	40021800 	.word	0x40021800
 8001c44:	40021c00 	.word	0x40021c00
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40022400 	.word	0x40022400
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_PWREx_EnableOverDrive+0x98>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a22      	ldr	r2, [pc, #136]	; (8001cec <HAL_PWREx_EnableOverDrive+0x98>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_PWREx_EnableOverDrive+0x98>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c82:	f7ff f92b 	bl	8000edc <HAL_GetTick>
 8001c86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c88:	e009      	b.n	8001c9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c8a:	f7ff f927 	bl	8000edc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c98:	d901      	bls.n	8001c9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e022      	b.n	8001ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001caa:	d1ee      	bne.n	8001c8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0f      	ldr	r2, [pc, #60]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb8:	f7ff f910 	bl	8000edc <HAL_GetTick>
 8001cbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cbe:	e009      	b.n	8001cd4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cc0:	f7ff f90c 	bl	8000edc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cce:	d901      	bls.n	8001cd4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e007      	b.n	8001ce4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e291      	b.n	800222e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8087 	beq.w	8001e26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d18:	4b96      	ldr	r3, [pc, #600]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d00c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d24:	4b93      	ldr	r3, [pc, #588]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d112      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62>
 8001d30:	4b90      	ldr	r3, [pc, #576]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3c:	d10b      	bne.n	8001d56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3e:	4b8d      	ldr	r3, [pc, #564]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d06c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x130>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d168      	bne.n	8001e24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e26b      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x7a>
 8001d60:	4b84      	ldr	r3, [pc, #528]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a83      	ldr	r2, [pc, #524]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e02e      	b.n	8001dcc <HAL_RCC_OscConfig+0xd8>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x9c>
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7e      	ldr	r2, [pc, #504]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b7c      	ldr	r3, [pc, #496]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7b      	ldr	r2, [pc, #492]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0xd8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0xc0>
 8001d9a:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a75      	ldr	r2, [pc, #468]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a72      	ldr	r2, [pc, #456]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0xd8>
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6b      	ldr	r2, [pc, #428]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d013      	beq.n	8001dfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f882 	bl	8000edc <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ddc:	f7ff f87e 	bl	8000edc <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	; 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e21f      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe8>
 8001dfa:	e014      	b.n	8001e26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff f86e 	bl	8000edc <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff f86a 	bl	8000edc <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e20b      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x110>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d069      	beq.n	8001f06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e32:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b4d      	ldr	r3, [pc, #308]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d11c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x190>
 8001e4a:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d116      	bne.n	8001e84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x17a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e1df      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	493d      	ldr	r1, [pc, #244]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	e040      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d023      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a38      	ldr	r2, [pc, #224]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff f820 	bl	8000edc <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7ff f81c 	bl	8000edc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1bd      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4929      	ldr	r1, [pc, #164]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
 8001ed2:	e018      	b.n	8001f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe fffc 	bl	8000edc <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7fe fff8 	bl	8000edc <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e199      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d038      	beq.n	8001f84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d019      	beq.n	8001f4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1e:	4a15      	ldr	r2, [pc, #84]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7fe ffd9 	bl	8000edc <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2e:	f7fe ffd5 	bl	8000edc <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e176      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x23a>
 8001f4c:	e01a      	b.n	8001f84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <HAL_RCC_OscConfig+0x280>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7fe ffbf 	bl	8000edc <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f62:	f7fe ffbb 	bl	8000edc <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d903      	bls.n	8001f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e15c      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
 8001f74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	4b91      	ldr	r3, [pc, #580]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a4 	beq.w	80020da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f92:	4b8b      	ldr	r3, [pc, #556]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10d      	bne.n	8001fba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	4b88      	ldr	r3, [pc, #544]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a87      	ldr	r2, [pc, #540]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b85      	ldr	r3, [pc, #532]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fba:	4b82      	ldr	r3, [pc, #520]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d118      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fc6:	4b7f      	ldr	r3, [pc, #508]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7e      	ldr	r2, [pc, #504]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd2:	f7fe ff83 	bl	8000edc <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fda:	f7fe ff7f 	bl	8000edc <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b64      	cmp	r3, #100	; 0x64
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e120      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fec:	4b75      	ldr	r3, [pc, #468]	; (80021c4 <HAL_RCC_OscConfig+0x4d0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x31a>
 8002000:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a6e      	ldr	r2, [pc, #440]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	e02d      	b.n	800206a <HAL_RCC_OscConfig+0x376>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x33c>
 8002016:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a69      	ldr	r2, [pc, #420]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a66      	ldr	r2, [pc, #408]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	e01c      	b.n	800206a <HAL_RCC_OscConfig+0x376>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_OscConfig+0x35e>
 8002038:	4b61      	ldr	r3, [pc, #388]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	4a60      	ldr	r2, [pc, #384]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6713      	str	r3, [r2, #112]	; 0x70
 8002044:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a5d      	ldr	r2, [pc, #372]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x376>
 8002052:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a5a      	ldr	r2, [pc, #360]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6713      	str	r3, [r2, #112]	; 0x70
 800205e:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a57      	ldr	r2, [pc, #348]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d015      	beq.n	800209e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe ff33 	bl	8000edc <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7fe ff2f 	bl	8000edc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0ce      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ee      	beq.n	800207a <HAL_RCC_OscConfig+0x386>
 800209c:	e014      	b.n	80020c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7fe ff1d 	bl	8000edc <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe ff19 	bl	8000edc <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0b8      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020bc:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a3b      	ldr	r2, [pc, #236]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80a4 	beq.w	800222c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d06b      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d149      	bne.n	800218c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f8:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a30      	ldr	r2, [pc, #192]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe feea 	bl	8000edc <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210c:	f7fe fee6 	bl	8000edc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e087      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	4313      	orrs	r3, r2
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002152:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002156:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe feba 	bl	8000edc <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe feb6 	bl	8000edc <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e057      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x478>
 800218a:	e04f      	b.n	800222c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fea0 	bl	8000edc <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe fe9c 	bl	8000edc <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e03d      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_OscConfig+0x4cc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4ac>
 80021be:	e035      	b.n	800222c <HAL_RCC_OscConfig+0x538>
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_RCC_OscConfig+0x544>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d028      	beq.n	8002228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d121      	bne.n	8002228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d11a      	bne.n	8002228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002200:	4293      	cmp	r3, r2
 8002202:	d111      	bne.n	8002228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0d0      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d910      	bls.n	8002284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 020f 	bic.w	r2, r3, #15
 800226a:	4965      	ldr	r1, [pc, #404]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d040      	beq.n	8002360 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e073      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06b      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231e:	4b39      	ldr	r3, [pc, #228]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f023 0203 	bic.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4936      	ldr	r1, [pc, #216]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002330:	f7fe fdd4 	bl	8000edc <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	e00a      	b.n	800234e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002338:	f7fe fdd0 	bl	8000edc <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e053      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	4b2d      	ldr	r3, [pc, #180]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 020c 	and.w	r2, r3, #12
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	429a      	cmp	r2, r3
 800235e:	d1eb      	bne.n	8002338 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d210      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 020f 	bic.w	r2, r3, #15
 8002376:	4922      	ldr	r1, [pc, #136]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x1cc>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1d0>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1d4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fd30 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00
 8002404:	40023800 	.word	0x40023800
 8002408:	0800474c 	.word	0x0800474c
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b090      	sub	sp, #64	; 0x40
 800241a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
 8002420:	2300      	movs	r3, #0
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d00d      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x40>
 8002438:	2b08      	cmp	r3, #8
 800243a:	f200 80a1 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x34>
 8002442:	2b04      	cmp	r3, #4
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x3a>
 8002446:	e09b      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800244c:	e09b      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002452:	e098      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800245e:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d028      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	2200      	movs	r2, #0
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	627a      	str	r2, [r7, #36]	; 0x24
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800247c:	2100      	movs	r1, #0
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002480:	fb03 f201 	mul.w	r2, r3, r1
 8002484:	2300      	movs	r3, #0
 8002486:	fb00 f303 	mul.w	r3, r0, r3
 800248a:	4413      	add	r3, r2
 800248c:	4a43      	ldr	r2, [pc, #268]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 800248e:	fba0 1202 	umull	r1, r2, r0, r2
 8002492:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002494:	460a      	mov	r2, r1
 8002496:	62ba      	str	r2, [r7, #40]	; 0x28
 8002498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249a:	4413      	add	r3, r2
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a0:	2200      	movs	r2, #0
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	61fa      	str	r2, [r7, #28]
 80024a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024ae:	f7fd feff 	bl	80002b0 <__aeabi_uldivmod>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4613      	mov	r3, r2
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ba:	e053      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	2200      	movs	r2, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	617a      	str	r2, [r7, #20]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ce:	f04f 0b00 	mov.w	fp, #0
 80024d2:	4652      	mov	r2, sl
 80024d4:	465b      	mov	r3, fp
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	0159      	lsls	r1, r3, #5
 80024e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e4:	0150      	lsls	r0, r2, #5
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	ebb2 080a 	subs.w	r8, r2, sl
 80024ee:	eb63 090b 	sbc.w	r9, r3, fp
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002502:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002506:	ebb2 0408 	subs.w	r4, r2, r8
 800250a:	eb63 0509 	sbc.w	r5, r3, r9
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	00eb      	lsls	r3, r5, #3
 8002518:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251c:	00e2      	lsls	r2, r4, #3
 800251e:	4614      	mov	r4, r2
 8002520:	461d      	mov	r5, r3
 8002522:	eb14 030a 	adds.w	r3, r4, sl
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	eb45 030b 	adc.w	r3, r5, fp
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253a:	4629      	mov	r1, r5
 800253c:	028b      	lsls	r3, r1, #10
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002544:	4621      	mov	r1, r4
 8002546:	028a      	lsls	r2, r1, #10
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	2200      	movs	r2, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002558:	f7fd feaa 	bl	80002b0 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002588:	4618      	mov	r0, r3
 800258a:	3740      	adds	r7, #64	; 0x40
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	017d7840 	.word	0x017d7840

080025a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	0800475c 	.word	0x0800475c

080025e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e4:	f7ff ffdc 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0b5b      	lsrs	r3, r3, #13
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	0800475c 	.word	0x0800475c

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002630:	4b69      	ldr	r3, [pc, #420]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a68      	ldr	r2, [pc, #416]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002636:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800263a:	6093      	str	r3, [r2, #8]
 800263c:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002644:	4964      	ldr	r1, [pc, #400]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d017      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002662:	4b5d      	ldr	r3, [pc, #372]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	4959      	ldr	r1, [pc, #356]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002680:	d101      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002682:	2301      	movs	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d017      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800269e:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	494a      	ldr	r1, [pc, #296]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026bc:	d101      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 808b 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	4a39      	ldr	r2, [pc, #228]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f6:	6413      	str	r3, [r2, #64]	; 0x40
 80026f8:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a34      	ldr	r2, [pc, #208]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002710:	f7fe fbe4 	bl	8000edc <HAL_GetTick>
 8002714:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002716:	e008      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7fe fbe0 	bl	8000edc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e357      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002736:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d035      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d02e      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275e:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002774:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d114      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fba8 	bl	8000edc <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fba4 	bl	8000edc <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e319      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ee      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027be:	d111      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ce:	400b      	ands	r3, r1
 80027d0:	4901      	ldr	r1, [pc, #4]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
 80027d6:	e00b      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000
 80027e0:	0ffffcff 	.word	0x0ffffcff
 80027e4:	4baa      	ldr	r3, [pc, #680]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4aa9      	ldr	r2, [pc, #676]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027ee:	6093      	str	r3, [r2, #8]
 80027f0:	4ba7      	ldr	r3, [pc, #668]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	49a4      	ldr	r1, [pc, #656]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d010      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800280e:	4ba0      	ldr	r3, [pc, #640]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002814:	4a9e      	ldr	r2, [pc, #632]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800281a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800281e:	4b9c      	ldr	r3, [pc, #624]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002820:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	4999      	ldr	r1, [pc, #612]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800283c:	4b94      	ldr	r3, [pc, #592]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284a:	4991      	ldr	r1, [pc, #580]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800285e:	4b8c      	ldr	r3, [pc, #560]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800286c:	4988      	ldr	r1, [pc, #544]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002886:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288e:	4980      	ldr	r1, [pc, #512]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028a2:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4977      	ldr	r1, [pc, #476]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028c4:	4b72      	ldr	r3, [pc, #456]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	496f      	ldr	r1, [pc, #444]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028e6:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	f023 020c 	bic.w	r2, r3, #12
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	4966      	ldr	r1, [pc, #408]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002908:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	495e      	ldr	r1, [pc, #376]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800292a:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002938:	4955      	ldr	r1, [pc, #340]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800296e:	4b48      	ldr	r3, [pc, #288]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002974:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4944      	ldr	r1, [pc, #272]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002996:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	493c      	ldr	r1, [pc, #240]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c0:	4933      	ldr	r1, [pc, #204]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e2:	492b      	ldr	r1, [pc, #172]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d011      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a04:	4922      	ldr	r1, [pc, #136]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a36:	4b16      	ldr	r3, [pc, #88]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a44:	4912      	ldr	r1, [pc, #72]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00b      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a58:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a68:	4909      	ldr	r1, [pc, #36]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d006      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80d9 	beq.w	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a84:	4b02      	ldr	r3, [pc, #8]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a01      	ldr	r2, [pc, #4]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a8e:	e001      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a96:	f7fe fa21 	bl	8000edc <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a9e:	f7fe fa1d 	bl	8000edc <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	; 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e194      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d021      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d11d      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ad0:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad6:	0c1b      	lsrs	r3, r3, #16
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ade:	4b61      	ldr	r3, [pc, #388]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae4:	0e1b      	lsrs	r3, r3, #24
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	019a      	lsls	r2, r3, #6
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	071b      	lsls	r3, r3, #28
 8002b04:	4957      	ldr	r1, [pc, #348]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d02e      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b36:	d129      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b38:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4c:	0f1b      	lsrs	r3, r3, #28
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	019a      	lsls	r2, r3, #6
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	431a      	orrs	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	071b      	lsls	r3, r3, #28
 8002b6c:	493d      	ldr	r1, [pc, #244]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b74:	4b3b      	ldr	r3, [pc, #236]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7a:	f023 021f 	bic.w	r2, r3, #31
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	3b01      	subs	r3, #1
 8002b84:	4937      	ldr	r1, [pc, #220]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01d      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9e:	0e1b      	lsrs	r3, r3, #24
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ba6:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bac:	0f1b      	lsrs	r3, r3, #28
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	019a      	lsls	r2, r3, #6
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	041b      	lsls	r3, r3, #16
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	071b      	lsls	r3, r3, #28
 8002bcc:	4925      	ldr	r1, [pc, #148]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d011      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	019a      	lsls	r2, r3, #6
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	071b      	lsls	r3, r3, #28
 8002bfc:	4919      	ldr	r1, [pc, #100]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c10:	f7fe f964 	bl	8000edc <HAL_GetTick>
 8002c14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c18:	f7fe f960 	bl	8000edc <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e0d7      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c2a:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f040 80cd 	bne.w	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c4a:	f7fe f947 	bl	8000edc <HAL_GetTick>
 8002c4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c52:	f7fe f943 	bl	8000edc <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d903      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0ba      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c68:	4b5e      	ldr	r3, [pc, #376]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c74:	d0ed      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d02e      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d12a      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c9e:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cac:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb2:	0f1b      	lsrs	r3, r3, #28
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	019a      	lsls	r2, r3, #6
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	061b      	lsls	r3, r3, #24
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	071b      	lsls	r3, r3, #28
 8002cd2:	4944      	ldr	r1, [pc, #272]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cda:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	493d      	ldr	r1, [pc, #244]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d022      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d08:	d11d      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	0e1b      	lsrs	r3, r3, #24
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d18:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	0f1b      	lsrs	r3, r3, #28
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	019a      	lsls	r2, r3, #6
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	071b      	lsls	r3, r3, #28
 8002d3e:	4929      	ldr	r1, [pc, #164]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d028      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	0e1b      	lsrs	r3, r3, #24
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d60:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	019a      	lsls	r2, r3, #6
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	071b      	lsls	r3, r3, #28
 8002d86:	4917      	ldr	r1, [pc, #92]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	4911      	ldr	r1, [pc, #68]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fe f894 	bl	8000edc <HAL_GetTick>
 8002db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002db8:	f7fe f890 	bl	8000edc <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e007      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd6:	d1ef      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e040      	b.n	8002e7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd ff6a 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8c0 	bl	8002fac <UART_SetConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e022      	b.n	8002e7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fb18 	bl	8003474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fb9f 	bl	80035b8 <UART_CheckIdleState>
 8002e7a:	4603      	mov	r3, r0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	f040 8081 	bne.w	8002fa0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_UART_Transmit+0x26>
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e079      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x38>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e072      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2221      	movs	r2, #33	; 0x21
 8002ed0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ed2:	f7fe f803 	bl	8000edc <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	d108      	bne.n	8002f04 <HAL_UART_Transmit+0x80>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	e003      	b.n	8002f0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f14:	e02c      	b.n	8002f70 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fb7c 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e038      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	e007      	b.n	8002f5e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	781a      	ldrb	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1cc      	bne.n	8002f16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2200      	movs	r2, #0
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fb49 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e005      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4ba6      	ldr	r3, [pc, #664]	; (8003270 <UART_SetConfig+0x2c4>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	6979      	ldr	r1, [r7, #20]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	430a      	orrs	r2, r1
 800301c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a94      	ldr	r2, [pc, #592]	; (8003274 <UART_SetConfig+0x2c8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d120      	bne.n	800306a <UART_SetConfig+0xbe>
 8003028:	4b93      	ldr	r3, [pc, #588]	; (8003278 <UART_SetConfig+0x2cc>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b03      	cmp	r3, #3
 8003034:	d816      	bhi.n	8003064 <UART_SetConfig+0xb8>
 8003036:	a201      	add	r2, pc, #4	; (adr r2, 800303c <UART_SetConfig+0x90>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	0800304d 	.word	0x0800304d
 8003040:	08003059 	.word	0x08003059
 8003044:	08003053 	.word	0x08003053
 8003048:	0800305f 	.word	0x0800305f
 800304c:	2301      	movs	r3, #1
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e150      	b.n	80032f4 <UART_SetConfig+0x348>
 8003052:	2302      	movs	r3, #2
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e14d      	b.n	80032f4 <UART_SetConfig+0x348>
 8003058:	2304      	movs	r3, #4
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e14a      	b.n	80032f4 <UART_SetConfig+0x348>
 800305e:	2308      	movs	r3, #8
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e147      	b.n	80032f4 <UART_SetConfig+0x348>
 8003064:	2310      	movs	r3, #16
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e144      	b.n	80032f4 <UART_SetConfig+0x348>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a83      	ldr	r2, [pc, #524]	; (800327c <UART_SetConfig+0x2d0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d132      	bne.n	80030da <UART_SetConfig+0x12e>
 8003074:	4b80      	ldr	r3, [pc, #512]	; (8003278 <UART_SetConfig+0x2cc>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d828      	bhi.n	80030d4 <UART_SetConfig+0x128>
 8003082:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0xdc>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	080030bd 	.word	0x080030bd
 800308c:	080030d5 	.word	0x080030d5
 8003090:	080030d5 	.word	0x080030d5
 8003094:	080030d5 	.word	0x080030d5
 8003098:	080030c9 	.word	0x080030c9
 800309c:	080030d5 	.word	0x080030d5
 80030a0:	080030d5 	.word	0x080030d5
 80030a4:	080030d5 	.word	0x080030d5
 80030a8:	080030c3 	.word	0x080030c3
 80030ac:	080030d5 	.word	0x080030d5
 80030b0:	080030d5 	.word	0x080030d5
 80030b4:	080030d5 	.word	0x080030d5
 80030b8:	080030cf 	.word	0x080030cf
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e118      	b.n	80032f4 <UART_SetConfig+0x348>
 80030c2:	2302      	movs	r3, #2
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e115      	b.n	80032f4 <UART_SetConfig+0x348>
 80030c8:	2304      	movs	r3, #4
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e112      	b.n	80032f4 <UART_SetConfig+0x348>
 80030ce:	2308      	movs	r3, #8
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e10f      	b.n	80032f4 <UART_SetConfig+0x348>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e10c      	b.n	80032f4 <UART_SetConfig+0x348>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a68      	ldr	r2, [pc, #416]	; (8003280 <UART_SetConfig+0x2d4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d120      	bne.n	8003126 <UART_SetConfig+0x17a>
 80030e4:	4b64      	ldr	r3, [pc, #400]	; (8003278 <UART_SetConfig+0x2cc>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030ee:	2b30      	cmp	r3, #48	; 0x30
 80030f0:	d013      	beq.n	800311a <UART_SetConfig+0x16e>
 80030f2:	2b30      	cmp	r3, #48	; 0x30
 80030f4:	d814      	bhi.n	8003120 <UART_SetConfig+0x174>
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d009      	beq.n	800310e <UART_SetConfig+0x162>
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d810      	bhi.n	8003120 <UART_SetConfig+0x174>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <UART_SetConfig+0x15c>
 8003102:	2b10      	cmp	r3, #16
 8003104:	d006      	beq.n	8003114 <UART_SetConfig+0x168>
 8003106:	e00b      	b.n	8003120 <UART_SetConfig+0x174>
 8003108:	2300      	movs	r3, #0
 800310a:	77fb      	strb	r3, [r7, #31]
 800310c:	e0f2      	b.n	80032f4 <UART_SetConfig+0x348>
 800310e:	2302      	movs	r3, #2
 8003110:	77fb      	strb	r3, [r7, #31]
 8003112:	e0ef      	b.n	80032f4 <UART_SetConfig+0x348>
 8003114:	2304      	movs	r3, #4
 8003116:	77fb      	strb	r3, [r7, #31]
 8003118:	e0ec      	b.n	80032f4 <UART_SetConfig+0x348>
 800311a:	2308      	movs	r3, #8
 800311c:	77fb      	strb	r3, [r7, #31]
 800311e:	e0e9      	b.n	80032f4 <UART_SetConfig+0x348>
 8003120:	2310      	movs	r3, #16
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e0e6      	b.n	80032f4 <UART_SetConfig+0x348>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a56      	ldr	r2, [pc, #344]	; (8003284 <UART_SetConfig+0x2d8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d120      	bne.n	8003172 <UART_SetConfig+0x1c6>
 8003130:	4b51      	ldr	r3, [pc, #324]	; (8003278 <UART_SetConfig+0x2cc>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800313a:	2bc0      	cmp	r3, #192	; 0xc0
 800313c:	d013      	beq.n	8003166 <UART_SetConfig+0x1ba>
 800313e:	2bc0      	cmp	r3, #192	; 0xc0
 8003140:	d814      	bhi.n	800316c <UART_SetConfig+0x1c0>
 8003142:	2b80      	cmp	r3, #128	; 0x80
 8003144:	d009      	beq.n	800315a <UART_SetConfig+0x1ae>
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d810      	bhi.n	800316c <UART_SetConfig+0x1c0>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <UART_SetConfig+0x1a8>
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d006      	beq.n	8003160 <UART_SetConfig+0x1b4>
 8003152:	e00b      	b.n	800316c <UART_SetConfig+0x1c0>
 8003154:	2300      	movs	r3, #0
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e0cc      	b.n	80032f4 <UART_SetConfig+0x348>
 800315a:	2302      	movs	r3, #2
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e0c9      	b.n	80032f4 <UART_SetConfig+0x348>
 8003160:	2304      	movs	r3, #4
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e0c6      	b.n	80032f4 <UART_SetConfig+0x348>
 8003166:	2308      	movs	r3, #8
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e0c3      	b.n	80032f4 <UART_SetConfig+0x348>
 800316c:	2310      	movs	r3, #16
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e0c0      	b.n	80032f4 <UART_SetConfig+0x348>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a44      	ldr	r2, [pc, #272]	; (8003288 <UART_SetConfig+0x2dc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d125      	bne.n	80031c8 <UART_SetConfig+0x21c>
 800317c:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <UART_SetConfig+0x2cc>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800318a:	d017      	beq.n	80031bc <UART_SetConfig+0x210>
 800318c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003190:	d817      	bhi.n	80031c2 <UART_SetConfig+0x216>
 8003192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003196:	d00b      	beq.n	80031b0 <UART_SetConfig+0x204>
 8003198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800319c:	d811      	bhi.n	80031c2 <UART_SetConfig+0x216>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <UART_SetConfig+0x1fe>
 80031a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031a6:	d006      	beq.n	80031b6 <UART_SetConfig+0x20a>
 80031a8:	e00b      	b.n	80031c2 <UART_SetConfig+0x216>
 80031aa:	2300      	movs	r3, #0
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e0a1      	b.n	80032f4 <UART_SetConfig+0x348>
 80031b0:	2302      	movs	r3, #2
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e09e      	b.n	80032f4 <UART_SetConfig+0x348>
 80031b6:	2304      	movs	r3, #4
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e09b      	b.n	80032f4 <UART_SetConfig+0x348>
 80031bc:	2308      	movs	r3, #8
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e098      	b.n	80032f4 <UART_SetConfig+0x348>
 80031c2:	2310      	movs	r3, #16
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e095      	b.n	80032f4 <UART_SetConfig+0x348>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2f      	ldr	r2, [pc, #188]	; (800328c <UART_SetConfig+0x2e0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d125      	bne.n	800321e <UART_SetConfig+0x272>
 80031d2:	4b29      	ldr	r3, [pc, #164]	; (8003278 <UART_SetConfig+0x2cc>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e0:	d017      	beq.n	8003212 <UART_SetConfig+0x266>
 80031e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e6:	d817      	bhi.n	8003218 <UART_SetConfig+0x26c>
 80031e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ec:	d00b      	beq.n	8003206 <UART_SetConfig+0x25a>
 80031ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f2:	d811      	bhi.n	8003218 <UART_SetConfig+0x26c>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <UART_SetConfig+0x254>
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fc:	d006      	beq.n	800320c <UART_SetConfig+0x260>
 80031fe:	e00b      	b.n	8003218 <UART_SetConfig+0x26c>
 8003200:	2301      	movs	r3, #1
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e076      	b.n	80032f4 <UART_SetConfig+0x348>
 8003206:	2302      	movs	r3, #2
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e073      	b.n	80032f4 <UART_SetConfig+0x348>
 800320c:	2304      	movs	r3, #4
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e070      	b.n	80032f4 <UART_SetConfig+0x348>
 8003212:	2308      	movs	r3, #8
 8003214:	77fb      	strb	r3, [r7, #31]
 8003216:	e06d      	b.n	80032f4 <UART_SetConfig+0x348>
 8003218:	2310      	movs	r3, #16
 800321a:	77fb      	strb	r3, [r7, #31]
 800321c:	e06a      	b.n	80032f4 <UART_SetConfig+0x348>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <UART_SetConfig+0x2e4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d138      	bne.n	800329a <UART_SetConfig+0x2ee>
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <UART_SetConfig+0x2cc>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003232:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003236:	d017      	beq.n	8003268 <UART_SetConfig+0x2bc>
 8003238:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800323c:	d82a      	bhi.n	8003294 <UART_SetConfig+0x2e8>
 800323e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003242:	d00b      	beq.n	800325c <UART_SetConfig+0x2b0>
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d824      	bhi.n	8003294 <UART_SetConfig+0x2e8>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <UART_SetConfig+0x2aa>
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003252:	d006      	beq.n	8003262 <UART_SetConfig+0x2b6>
 8003254:	e01e      	b.n	8003294 <UART_SetConfig+0x2e8>
 8003256:	2300      	movs	r3, #0
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e04b      	b.n	80032f4 <UART_SetConfig+0x348>
 800325c:	2302      	movs	r3, #2
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e048      	b.n	80032f4 <UART_SetConfig+0x348>
 8003262:	2304      	movs	r3, #4
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e045      	b.n	80032f4 <UART_SetConfig+0x348>
 8003268:	2308      	movs	r3, #8
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e042      	b.n	80032f4 <UART_SetConfig+0x348>
 800326e:	bf00      	nop
 8003270:	efff69f3 	.word	0xefff69f3
 8003274:	40011000 	.word	0x40011000
 8003278:	40023800 	.word	0x40023800
 800327c:	40004400 	.word	0x40004400
 8003280:	40004800 	.word	0x40004800
 8003284:	40004c00 	.word	0x40004c00
 8003288:	40005000 	.word	0x40005000
 800328c:	40011400 	.word	0x40011400
 8003290:	40007800 	.word	0x40007800
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e02c      	b.n	80032f4 <UART_SetConfig+0x348>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a72      	ldr	r2, [pc, #456]	; (8003468 <UART_SetConfig+0x4bc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d125      	bne.n	80032f0 <UART_SetConfig+0x344>
 80032a4:	4b71      	ldr	r3, [pc, #452]	; (800346c <UART_SetConfig+0x4c0>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032b2:	d017      	beq.n	80032e4 <UART_SetConfig+0x338>
 80032b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032b8:	d817      	bhi.n	80032ea <UART_SetConfig+0x33e>
 80032ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032be:	d00b      	beq.n	80032d8 <UART_SetConfig+0x32c>
 80032c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c4:	d811      	bhi.n	80032ea <UART_SetConfig+0x33e>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <UART_SetConfig+0x326>
 80032ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ce:	d006      	beq.n	80032de <UART_SetConfig+0x332>
 80032d0:	e00b      	b.n	80032ea <UART_SetConfig+0x33e>
 80032d2:	2300      	movs	r3, #0
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e00d      	b.n	80032f4 <UART_SetConfig+0x348>
 80032d8:	2302      	movs	r3, #2
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e00a      	b.n	80032f4 <UART_SetConfig+0x348>
 80032de:	2304      	movs	r3, #4
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e007      	b.n	80032f4 <UART_SetConfig+0x348>
 80032e4:	2308      	movs	r3, #8
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e004      	b.n	80032f4 <UART_SetConfig+0x348>
 80032ea:	2310      	movs	r3, #16
 80032ec:	77fb      	strb	r3, [r7, #31]
 80032ee:	e001      	b.n	80032f4 <UART_SetConfig+0x348>
 80032f0:	2310      	movs	r3, #16
 80032f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032fc:	d15b      	bne.n	80033b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80032fe:	7ffb      	ldrb	r3, [r7, #31]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d828      	bhi.n	8003356 <UART_SetConfig+0x3aa>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x360>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	08003331 	.word	0x08003331
 8003310:	08003339 	.word	0x08003339
 8003314:	08003341 	.word	0x08003341
 8003318:	08003357 	.word	0x08003357
 800331c:	08003347 	.word	0x08003347
 8003320:	08003357 	.word	0x08003357
 8003324:	08003357 	.word	0x08003357
 8003328:	08003357 	.word	0x08003357
 800332c:	0800334f 	.word	0x0800334f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003330:	f7ff f942 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8003334:	61b8      	str	r0, [r7, #24]
        break;
 8003336:	e013      	b.n	8003360 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7ff f952 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 800333c:	61b8      	str	r0, [r7, #24]
        break;
 800333e:	e00f      	b.n	8003360 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003340:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <UART_SetConfig+0x4c4>)
 8003342:	61bb      	str	r3, [r7, #24]
        break;
 8003344:	e00c      	b.n	8003360 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003346:	f7ff f865 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 800334a:	61b8      	str	r0, [r7, #24]
        break;
 800334c:	e008      	b.n	8003360 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	61bb      	str	r3, [r7, #24]
        break;
 8003354:	e004      	b.n	8003360 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	77bb      	strb	r3, [r7, #30]
        break;
 800335e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d074      	beq.n	8003450 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	005a      	lsls	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b0f      	cmp	r3, #15
 8003380:	d916      	bls.n	80033b0 <UART_SetConfig+0x404>
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003388:	d212      	bcs.n	80033b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f023 030f 	bic.w	r3, r3, #15
 8003392:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	b29b      	uxth	r3, r3
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	b29a      	uxth	r2, r3
 80033a0:	89fb      	ldrh	r3, [r7, #14]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	89fa      	ldrh	r2, [r7, #14]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	e04f      	b.n	8003450 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	77bb      	strb	r3, [r7, #30]
 80033b4:	e04c      	b.n	8003450 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033b6:	7ffb      	ldrb	r3, [r7, #31]
 80033b8:	2b08      	cmp	r3, #8
 80033ba:	d828      	bhi.n	800340e <UART_SetConfig+0x462>
 80033bc:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <UART_SetConfig+0x418>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033e9 	.word	0x080033e9
 80033c8:	080033f1 	.word	0x080033f1
 80033cc:	080033f9 	.word	0x080033f9
 80033d0:	0800340f 	.word	0x0800340f
 80033d4:	080033ff 	.word	0x080033ff
 80033d8:	0800340f 	.word	0x0800340f
 80033dc:	0800340f 	.word	0x0800340f
 80033e0:	0800340f 	.word	0x0800340f
 80033e4:	08003407 	.word	0x08003407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e8:	f7ff f8e6 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 80033ec:	61b8      	str	r0, [r7, #24]
        break;
 80033ee:	e013      	b.n	8003418 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f0:	f7ff f8f6 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 80033f4:	61b8      	str	r0, [r7, #24]
        break;
 80033f6:	e00f      	b.n	8003418 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <UART_SetConfig+0x4c4>)
 80033fa:	61bb      	str	r3, [r7, #24]
        break;
 80033fc:	e00c      	b.n	8003418 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033fe:	f7ff f809 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 8003402:	61b8      	str	r0, [r7, #24]
        break;
 8003404:	e008      	b.n	8003418 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800340a:	61bb      	str	r3, [r7, #24]
        break;
 800340c:	e004      	b.n	8003418 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	77bb      	strb	r3, [r7, #30]
        break;
 8003416:	bf00      	nop
    }

    if (pclk != 0U)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d018      	beq.n	8003450 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	085a      	lsrs	r2, r3, #1
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	441a      	add	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b0f      	cmp	r3, #15
 8003436:	d909      	bls.n	800344c <UART_SetConfig+0x4a0>
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343e:	d205      	bcs.n	800344c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	b29a      	uxth	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	e001      	b.n	8003450 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800345c:	7fbb      	ldrb	r3, [r7, #30]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40007c00 	.word	0x40007c00
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400

08003474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01a      	beq.n	800358a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003572:	d10a      	bne.n	800358a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]
  }
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035c8:	f7fd fc88 	bl	8000edc <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d10e      	bne.n	80035fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f817 	bl	800361e <UART_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e00d      	b.n	8003616 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b09c      	sub	sp, #112	; 0x70
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4613      	mov	r3, r2
 800362c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362e:	e0a5      	b.n	800377c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	f000 80a1 	beq.w	800377c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363a:	f7fd fc4f 	bl	8000edc <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003646:	429a      	cmp	r2, r3
 8003648:	d302      	bcc.n	8003650 <UART_WaitOnFlagUntilTimeout+0x32>
 800364a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800364c:	2b00      	cmp	r3, #0
 800364e:	d13e      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800365e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003664:	667b      	str	r3, [r7, #100]	; 0x64
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800366e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003670:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003672:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800367c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1e6      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3308      	adds	r3, #8
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	663b      	str	r3, [r7, #96]	; 0x60
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3308      	adds	r3, #8
 80036a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e5      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e067      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d04f      	beq.n	800377c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ea:	d147      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	e853 3f00 	ldrex	r3, [r3]
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800370a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
 8003716:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371c:	e841 2300 	strex	r3, r2, [r1]
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e6      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	613b      	str	r3, [r7, #16]
   return(result);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3308      	adds	r3, #8
 8003746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003748:	623a      	str	r2, [r7, #32]
 800374a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	69f9      	ldr	r1, [r7, #28]
 800374e:	6a3a      	ldr	r2, [r7, #32]
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	61bb      	str	r3, [r7, #24]
   return(result);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e5      	bne.n	8003728 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e010      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	429a      	cmp	r2, r3
 8003798:	f43f af4a 	beq.w	8003630 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3770      	adds	r7, #112	; 0x70
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <__errno>:
 80037a8:	4b01      	ldr	r3, [pc, #4]	; (80037b0 <__errno+0x8>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	2000000c 	.word	0x2000000c

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	4d0d      	ldr	r5, [pc, #52]	; (80037ec <__libc_init_array+0x38>)
 80037b8:	4c0d      	ldr	r4, [pc, #52]	; (80037f0 <__libc_init_array+0x3c>)
 80037ba:	1b64      	subs	r4, r4, r5
 80037bc:	10a4      	asrs	r4, r4, #2
 80037be:	2600      	movs	r6, #0
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	4d0b      	ldr	r5, [pc, #44]	; (80037f4 <__libc_init_array+0x40>)
 80037c6:	4c0c      	ldr	r4, [pc, #48]	; (80037f8 <__libc_init_array+0x44>)
 80037c8:	f000 ffae 	bl	8004728 <_init>
 80037cc:	1b64      	subs	r4, r4, r5
 80037ce:	10a4      	asrs	r4, r4, #2
 80037d0:	2600      	movs	r6, #0
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	08004804 	.word	0x08004804
 80037f0:	08004804 	.word	0x08004804
 80037f4:	08004804 	.word	0x08004804
 80037f8:	08004808 	.word	0x08004808

080037fc <memset>:
 80037fc:	4402      	add	r2, r0
 80037fe:	4603      	mov	r3, r0
 8003800:	4293      	cmp	r3, r2
 8003802:	d100      	bne.n	8003806 <memset+0xa>
 8003804:	4770      	bx	lr
 8003806:	f803 1b01 	strb.w	r1, [r3], #1
 800380a:	e7f9      	b.n	8003800 <memset+0x4>

0800380c <iprintf>:
 800380c:	b40f      	push	{r0, r1, r2, r3}
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <iprintf+0x2c>)
 8003810:	b513      	push	{r0, r1, r4, lr}
 8003812:	681c      	ldr	r4, [r3, #0]
 8003814:	b124      	cbz	r4, 8003820 <iprintf+0x14>
 8003816:	69a3      	ldr	r3, [r4, #24]
 8003818:	b913      	cbnz	r3, 8003820 <iprintf+0x14>
 800381a:	4620      	mov	r0, r4
 800381c:	f000 f866 	bl	80038ec <__sinit>
 8003820:	ab05      	add	r3, sp, #20
 8003822:	9a04      	ldr	r2, [sp, #16]
 8003824:	68a1      	ldr	r1, [r4, #8]
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	4620      	mov	r0, r4
 800382a:	f000 f9bd 	bl	8003ba8 <_vfiprintf_r>
 800382e:	b002      	add	sp, #8
 8003830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003834:	b004      	add	sp, #16
 8003836:	4770      	bx	lr
 8003838:	2000000c 	.word	0x2000000c

0800383c <std>:
 800383c:	2300      	movs	r3, #0
 800383e:	b510      	push	{r4, lr}
 8003840:	4604      	mov	r4, r0
 8003842:	e9c0 3300 	strd	r3, r3, [r0]
 8003846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800384a:	6083      	str	r3, [r0, #8]
 800384c:	8181      	strh	r1, [r0, #12]
 800384e:	6643      	str	r3, [r0, #100]	; 0x64
 8003850:	81c2      	strh	r2, [r0, #14]
 8003852:	6183      	str	r3, [r0, #24]
 8003854:	4619      	mov	r1, r3
 8003856:	2208      	movs	r2, #8
 8003858:	305c      	adds	r0, #92	; 0x5c
 800385a:	f7ff ffcf 	bl	80037fc <memset>
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <std+0x38>)
 8003860:	6263      	str	r3, [r4, #36]	; 0x24
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <std+0x3c>)
 8003864:	62a3      	str	r3, [r4, #40]	; 0x28
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <std+0x40>)
 8003868:	62e3      	str	r3, [r4, #44]	; 0x2c
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <std+0x44>)
 800386c:	6224      	str	r4, [r4, #32]
 800386e:	6323      	str	r3, [r4, #48]	; 0x30
 8003870:	bd10      	pop	{r4, pc}
 8003872:	bf00      	nop
 8003874:	08004151 	.word	0x08004151
 8003878:	08004173 	.word	0x08004173
 800387c:	080041ab 	.word	0x080041ab
 8003880:	080041cf 	.word	0x080041cf

08003884 <_cleanup_r>:
 8003884:	4901      	ldr	r1, [pc, #4]	; (800388c <_cleanup_r+0x8>)
 8003886:	f000 b8af 	b.w	80039e8 <_fwalk_reent>
 800388a:	bf00      	nop
 800388c:	080044a9 	.word	0x080044a9

08003890 <__sfmoreglue>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	2268      	movs	r2, #104	; 0x68
 8003894:	1e4d      	subs	r5, r1, #1
 8003896:	4355      	muls	r5, r2
 8003898:	460e      	mov	r6, r1
 800389a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800389e:	f000 f8e5 	bl	8003a6c <_malloc_r>
 80038a2:	4604      	mov	r4, r0
 80038a4:	b140      	cbz	r0, 80038b8 <__sfmoreglue+0x28>
 80038a6:	2100      	movs	r1, #0
 80038a8:	e9c0 1600 	strd	r1, r6, [r0]
 80038ac:	300c      	adds	r0, #12
 80038ae:	60a0      	str	r0, [r4, #8]
 80038b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038b4:	f7ff ffa2 	bl	80037fc <memset>
 80038b8:	4620      	mov	r0, r4
 80038ba:	bd70      	pop	{r4, r5, r6, pc}

080038bc <__sfp_lock_acquire>:
 80038bc:	4801      	ldr	r0, [pc, #4]	; (80038c4 <__sfp_lock_acquire+0x8>)
 80038be:	f000 b8b3 	b.w	8003a28 <__retarget_lock_acquire_recursive>
 80038c2:	bf00      	nop
 80038c4:	20000161 	.word	0x20000161

080038c8 <__sfp_lock_release>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <__sfp_lock_release+0x8>)
 80038ca:	f000 b8ae 	b.w	8003a2a <__retarget_lock_release_recursive>
 80038ce:	bf00      	nop
 80038d0:	20000161 	.word	0x20000161

080038d4 <__sinit_lock_acquire>:
 80038d4:	4801      	ldr	r0, [pc, #4]	; (80038dc <__sinit_lock_acquire+0x8>)
 80038d6:	f000 b8a7 	b.w	8003a28 <__retarget_lock_acquire_recursive>
 80038da:	bf00      	nop
 80038dc:	20000162 	.word	0x20000162

080038e0 <__sinit_lock_release>:
 80038e0:	4801      	ldr	r0, [pc, #4]	; (80038e8 <__sinit_lock_release+0x8>)
 80038e2:	f000 b8a2 	b.w	8003a2a <__retarget_lock_release_recursive>
 80038e6:	bf00      	nop
 80038e8:	20000162 	.word	0x20000162

080038ec <__sinit>:
 80038ec:	b510      	push	{r4, lr}
 80038ee:	4604      	mov	r4, r0
 80038f0:	f7ff fff0 	bl	80038d4 <__sinit_lock_acquire>
 80038f4:	69a3      	ldr	r3, [r4, #24]
 80038f6:	b11b      	cbz	r3, 8003900 <__sinit+0x14>
 80038f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038fc:	f7ff bff0 	b.w	80038e0 <__sinit_lock_release>
 8003900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003904:	6523      	str	r3, [r4, #80]	; 0x50
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <__sinit+0x68>)
 8003908:	4a13      	ldr	r2, [pc, #76]	; (8003958 <__sinit+0x6c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	62a2      	str	r2, [r4, #40]	; 0x28
 800390e:	42a3      	cmp	r3, r4
 8003910:	bf04      	itt	eq
 8003912:	2301      	moveq	r3, #1
 8003914:	61a3      	streq	r3, [r4, #24]
 8003916:	4620      	mov	r0, r4
 8003918:	f000 f820 	bl	800395c <__sfp>
 800391c:	6060      	str	r0, [r4, #4]
 800391e:	4620      	mov	r0, r4
 8003920:	f000 f81c 	bl	800395c <__sfp>
 8003924:	60a0      	str	r0, [r4, #8]
 8003926:	4620      	mov	r0, r4
 8003928:	f000 f818 	bl	800395c <__sfp>
 800392c:	2200      	movs	r2, #0
 800392e:	60e0      	str	r0, [r4, #12]
 8003930:	2104      	movs	r1, #4
 8003932:	6860      	ldr	r0, [r4, #4]
 8003934:	f7ff ff82 	bl	800383c <std>
 8003938:	68a0      	ldr	r0, [r4, #8]
 800393a:	2201      	movs	r2, #1
 800393c:	2109      	movs	r1, #9
 800393e:	f7ff ff7d 	bl	800383c <std>
 8003942:	68e0      	ldr	r0, [r4, #12]
 8003944:	2202      	movs	r2, #2
 8003946:	2112      	movs	r1, #18
 8003948:	f7ff ff78 	bl	800383c <std>
 800394c:	2301      	movs	r3, #1
 800394e:	61a3      	str	r3, [r4, #24]
 8003950:	e7d2      	b.n	80038f8 <__sinit+0xc>
 8003952:	bf00      	nop
 8003954:	08004764 	.word	0x08004764
 8003958:	08003885 	.word	0x08003885

0800395c <__sfp>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	4607      	mov	r7, r0
 8003960:	f7ff ffac 	bl	80038bc <__sfp_lock_acquire>
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <__sfp+0x84>)
 8003966:	681e      	ldr	r6, [r3, #0]
 8003968:	69b3      	ldr	r3, [r6, #24]
 800396a:	b913      	cbnz	r3, 8003972 <__sfp+0x16>
 800396c:	4630      	mov	r0, r6
 800396e:	f7ff ffbd 	bl	80038ec <__sinit>
 8003972:	3648      	adds	r6, #72	; 0x48
 8003974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003978:	3b01      	subs	r3, #1
 800397a:	d503      	bpl.n	8003984 <__sfp+0x28>
 800397c:	6833      	ldr	r3, [r6, #0]
 800397e:	b30b      	cbz	r3, 80039c4 <__sfp+0x68>
 8003980:	6836      	ldr	r6, [r6, #0]
 8003982:	e7f7      	b.n	8003974 <__sfp+0x18>
 8003984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003988:	b9d5      	cbnz	r5, 80039c0 <__sfp+0x64>
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <__sfp+0x88>)
 800398c:	60e3      	str	r3, [r4, #12]
 800398e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003992:	6665      	str	r5, [r4, #100]	; 0x64
 8003994:	f000 f847 	bl	8003a26 <__retarget_lock_init_recursive>
 8003998:	f7ff ff96 	bl	80038c8 <__sfp_lock_release>
 800399c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039a4:	6025      	str	r5, [r4, #0]
 80039a6:	61a5      	str	r5, [r4, #24]
 80039a8:	2208      	movs	r2, #8
 80039aa:	4629      	mov	r1, r5
 80039ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039b0:	f7ff ff24 	bl	80037fc <memset>
 80039b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039bc:	4620      	mov	r0, r4
 80039be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c0:	3468      	adds	r4, #104	; 0x68
 80039c2:	e7d9      	b.n	8003978 <__sfp+0x1c>
 80039c4:	2104      	movs	r1, #4
 80039c6:	4638      	mov	r0, r7
 80039c8:	f7ff ff62 	bl	8003890 <__sfmoreglue>
 80039cc:	4604      	mov	r4, r0
 80039ce:	6030      	str	r0, [r6, #0]
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d1d5      	bne.n	8003980 <__sfp+0x24>
 80039d4:	f7ff ff78 	bl	80038c8 <__sfp_lock_release>
 80039d8:	230c      	movs	r3, #12
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	e7ee      	b.n	80039bc <__sfp+0x60>
 80039de:	bf00      	nop
 80039e0:	08004764 	.word	0x08004764
 80039e4:	ffff0001 	.word	0xffff0001

080039e8 <_fwalk_reent>:
 80039e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ec:	4606      	mov	r6, r0
 80039ee:	4688      	mov	r8, r1
 80039f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039f4:	2700      	movs	r7, #0
 80039f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039fa:	f1b9 0901 	subs.w	r9, r9, #1
 80039fe:	d505      	bpl.n	8003a0c <_fwalk_reent+0x24>
 8003a00:	6824      	ldr	r4, [r4, #0]
 8003a02:	2c00      	cmp	r4, #0
 8003a04:	d1f7      	bne.n	80039f6 <_fwalk_reent+0xe>
 8003a06:	4638      	mov	r0, r7
 8003a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a0c:	89ab      	ldrh	r3, [r5, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d907      	bls.n	8003a22 <_fwalk_reent+0x3a>
 8003a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a16:	3301      	adds	r3, #1
 8003a18:	d003      	beq.n	8003a22 <_fwalk_reent+0x3a>
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	47c0      	blx	r8
 8003a20:	4307      	orrs	r7, r0
 8003a22:	3568      	adds	r5, #104	; 0x68
 8003a24:	e7e9      	b.n	80039fa <_fwalk_reent+0x12>

08003a26 <__retarget_lock_init_recursive>:
 8003a26:	4770      	bx	lr

08003a28 <__retarget_lock_acquire_recursive>:
 8003a28:	4770      	bx	lr

08003a2a <__retarget_lock_release_recursive>:
 8003a2a:	4770      	bx	lr

08003a2c <sbrk_aligned>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	4e0e      	ldr	r6, [pc, #56]	; (8003a68 <sbrk_aligned+0x3c>)
 8003a30:	460c      	mov	r4, r1
 8003a32:	6831      	ldr	r1, [r6, #0]
 8003a34:	4605      	mov	r5, r0
 8003a36:	b911      	cbnz	r1, 8003a3e <sbrk_aligned+0x12>
 8003a38:	f000 fb7a 	bl	8004130 <_sbrk_r>
 8003a3c:	6030      	str	r0, [r6, #0]
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 fb75 	bl	8004130 <_sbrk_r>
 8003a46:	1c43      	adds	r3, r0, #1
 8003a48:	d00a      	beq.n	8003a60 <sbrk_aligned+0x34>
 8003a4a:	1cc4      	adds	r4, r0, #3
 8003a4c:	f024 0403 	bic.w	r4, r4, #3
 8003a50:	42a0      	cmp	r0, r4
 8003a52:	d007      	beq.n	8003a64 <sbrk_aligned+0x38>
 8003a54:	1a21      	subs	r1, r4, r0
 8003a56:	4628      	mov	r0, r5
 8003a58:	f000 fb6a 	bl	8004130 <_sbrk_r>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d101      	bne.n	8003a64 <sbrk_aligned+0x38>
 8003a60:	f04f 34ff 	mov.w	r4, #4294967295
 8003a64:	4620      	mov	r0, r4
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	20000168 	.word	0x20000168

08003a6c <_malloc_r>:
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	1ccd      	adds	r5, r1, #3
 8003a72:	f025 0503 	bic.w	r5, r5, #3
 8003a76:	3508      	adds	r5, #8
 8003a78:	2d0c      	cmp	r5, #12
 8003a7a:	bf38      	it	cc
 8003a7c:	250c      	movcc	r5, #12
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	4607      	mov	r7, r0
 8003a82:	db01      	blt.n	8003a88 <_malloc_r+0x1c>
 8003a84:	42a9      	cmp	r1, r5
 8003a86:	d905      	bls.n	8003a94 <_malloc_r+0x28>
 8003a88:	230c      	movs	r3, #12
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	2600      	movs	r6, #0
 8003a8e:	4630      	mov	r0, r6
 8003a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a94:	4e2e      	ldr	r6, [pc, #184]	; (8003b50 <_malloc_r+0xe4>)
 8003a96:	f000 fdbb 	bl	8004610 <__malloc_lock>
 8003a9a:	6833      	ldr	r3, [r6, #0]
 8003a9c:	461c      	mov	r4, r3
 8003a9e:	bb34      	cbnz	r4, 8003aee <_malloc_r+0x82>
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f7ff ffc2 	bl	8003a2c <sbrk_aligned>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	4604      	mov	r4, r0
 8003aac:	d14d      	bne.n	8003b4a <_malloc_r+0xde>
 8003aae:	6834      	ldr	r4, [r6, #0]
 8003ab0:	4626      	mov	r6, r4
 8003ab2:	2e00      	cmp	r6, #0
 8003ab4:	d140      	bne.n	8003b38 <_malloc_r+0xcc>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	4631      	mov	r1, r6
 8003aba:	4638      	mov	r0, r7
 8003abc:	eb04 0803 	add.w	r8, r4, r3
 8003ac0:	f000 fb36 	bl	8004130 <_sbrk_r>
 8003ac4:	4580      	cmp	r8, r0
 8003ac6:	d13a      	bne.n	8003b3e <_malloc_r+0xd2>
 8003ac8:	6821      	ldr	r1, [r4, #0]
 8003aca:	3503      	adds	r5, #3
 8003acc:	1a6d      	subs	r5, r5, r1
 8003ace:	f025 0503 	bic.w	r5, r5, #3
 8003ad2:	3508      	adds	r5, #8
 8003ad4:	2d0c      	cmp	r5, #12
 8003ad6:	bf38      	it	cc
 8003ad8:	250c      	movcc	r5, #12
 8003ada:	4629      	mov	r1, r5
 8003adc:	4638      	mov	r0, r7
 8003ade:	f7ff ffa5 	bl	8003a2c <sbrk_aligned>
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d02b      	beq.n	8003b3e <_malloc_r+0xd2>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	442b      	add	r3, r5
 8003aea:	6023      	str	r3, [r4, #0]
 8003aec:	e00e      	b.n	8003b0c <_malloc_r+0xa0>
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	1b52      	subs	r2, r2, r5
 8003af2:	d41e      	bmi.n	8003b32 <_malloc_r+0xc6>
 8003af4:	2a0b      	cmp	r2, #11
 8003af6:	d916      	bls.n	8003b26 <_malloc_r+0xba>
 8003af8:	1961      	adds	r1, r4, r5
 8003afa:	42a3      	cmp	r3, r4
 8003afc:	6025      	str	r5, [r4, #0]
 8003afe:	bf18      	it	ne
 8003b00:	6059      	strne	r1, [r3, #4]
 8003b02:	6863      	ldr	r3, [r4, #4]
 8003b04:	bf08      	it	eq
 8003b06:	6031      	streq	r1, [r6, #0]
 8003b08:	5162      	str	r2, [r4, r5]
 8003b0a:	604b      	str	r3, [r1, #4]
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	f104 060b 	add.w	r6, r4, #11
 8003b12:	f000 fd83 	bl	800461c <__malloc_unlock>
 8003b16:	f026 0607 	bic.w	r6, r6, #7
 8003b1a:	1d23      	adds	r3, r4, #4
 8003b1c:	1af2      	subs	r2, r6, r3
 8003b1e:	d0b6      	beq.n	8003a8e <_malloc_r+0x22>
 8003b20:	1b9b      	subs	r3, r3, r6
 8003b22:	50a3      	str	r3, [r4, r2]
 8003b24:	e7b3      	b.n	8003a8e <_malloc_r+0x22>
 8003b26:	6862      	ldr	r2, [r4, #4]
 8003b28:	42a3      	cmp	r3, r4
 8003b2a:	bf0c      	ite	eq
 8003b2c:	6032      	streq	r2, [r6, #0]
 8003b2e:	605a      	strne	r2, [r3, #4]
 8003b30:	e7ec      	b.n	8003b0c <_malloc_r+0xa0>
 8003b32:	4623      	mov	r3, r4
 8003b34:	6864      	ldr	r4, [r4, #4]
 8003b36:	e7b2      	b.n	8003a9e <_malloc_r+0x32>
 8003b38:	4634      	mov	r4, r6
 8003b3a:	6876      	ldr	r6, [r6, #4]
 8003b3c:	e7b9      	b.n	8003ab2 <_malloc_r+0x46>
 8003b3e:	230c      	movs	r3, #12
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4638      	mov	r0, r7
 8003b44:	f000 fd6a 	bl	800461c <__malloc_unlock>
 8003b48:	e7a1      	b.n	8003a8e <_malloc_r+0x22>
 8003b4a:	6025      	str	r5, [r4, #0]
 8003b4c:	e7de      	b.n	8003b0c <_malloc_r+0xa0>
 8003b4e:	bf00      	nop
 8003b50:	20000164 	.word	0x20000164

08003b54 <__sfputc_r>:
 8003b54:	6893      	ldr	r3, [r2, #8]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	b410      	push	{r4}
 8003b5c:	6093      	str	r3, [r2, #8]
 8003b5e:	da08      	bge.n	8003b72 <__sfputc_r+0x1e>
 8003b60:	6994      	ldr	r4, [r2, #24]
 8003b62:	42a3      	cmp	r3, r4
 8003b64:	db01      	blt.n	8003b6a <__sfputc_r+0x16>
 8003b66:	290a      	cmp	r1, #10
 8003b68:	d103      	bne.n	8003b72 <__sfputc_r+0x1e>
 8003b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b6e:	f000 bb33 	b.w	80041d8 <__swbuf_r>
 8003b72:	6813      	ldr	r3, [r2, #0]
 8003b74:	1c58      	adds	r0, r3, #1
 8003b76:	6010      	str	r0, [r2, #0]
 8003b78:	7019      	strb	r1, [r3, #0]
 8003b7a:	4608      	mov	r0, r1
 8003b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <__sfputs_r>:
 8003b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b84:	4606      	mov	r6, r0
 8003b86:	460f      	mov	r7, r1
 8003b88:	4614      	mov	r4, r2
 8003b8a:	18d5      	adds	r5, r2, r3
 8003b8c:	42ac      	cmp	r4, r5
 8003b8e:	d101      	bne.n	8003b94 <__sfputs_r+0x12>
 8003b90:	2000      	movs	r0, #0
 8003b92:	e007      	b.n	8003ba4 <__sfputs_r+0x22>
 8003b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b98:	463a      	mov	r2, r7
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f7ff ffda 	bl	8003b54 <__sfputc_r>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d1f3      	bne.n	8003b8c <__sfputs_r+0xa>
 8003ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ba8 <_vfiprintf_r>:
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	460d      	mov	r5, r1
 8003bae:	b09d      	sub	sp, #116	; 0x74
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	4698      	mov	r8, r3
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	b118      	cbz	r0, 8003bc0 <_vfiprintf_r+0x18>
 8003bb8:	6983      	ldr	r3, [r0, #24]
 8003bba:	b90b      	cbnz	r3, 8003bc0 <_vfiprintf_r+0x18>
 8003bbc:	f7ff fe96 	bl	80038ec <__sinit>
 8003bc0:	4b89      	ldr	r3, [pc, #548]	; (8003de8 <_vfiprintf_r+0x240>)
 8003bc2:	429d      	cmp	r5, r3
 8003bc4:	d11b      	bne.n	8003bfe <_vfiprintf_r+0x56>
 8003bc6:	6875      	ldr	r5, [r6, #4]
 8003bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bca:	07d9      	lsls	r1, r3, #31
 8003bcc:	d405      	bmi.n	8003bda <_vfiprintf_r+0x32>
 8003bce:	89ab      	ldrh	r3, [r5, #12]
 8003bd0:	059a      	lsls	r2, r3, #22
 8003bd2:	d402      	bmi.n	8003bda <_vfiprintf_r+0x32>
 8003bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bd6:	f7ff ff27 	bl	8003a28 <__retarget_lock_acquire_recursive>
 8003bda:	89ab      	ldrh	r3, [r5, #12]
 8003bdc:	071b      	lsls	r3, r3, #28
 8003bde:	d501      	bpl.n	8003be4 <_vfiprintf_r+0x3c>
 8003be0:	692b      	ldr	r3, [r5, #16]
 8003be2:	b9eb      	cbnz	r3, 8003c20 <_vfiprintf_r+0x78>
 8003be4:	4629      	mov	r1, r5
 8003be6:	4630      	mov	r0, r6
 8003be8:	f000 fb5a 	bl	80042a0 <__swsetup_r>
 8003bec:	b1c0      	cbz	r0, 8003c20 <_vfiprintf_r+0x78>
 8003bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bf0:	07dc      	lsls	r4, r3, #31
 8003bf2:	d50e      	bpl.n	8003c12 <_vfiprintf_r+0x6a>
 8003bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf8:	b01d      	add	sp, #116	; 0x74
 8003bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bfe:	4b7b      	ldr	r3, [pc, #492]	; (8003dec <_vfiprintf_r+0x244>)
 8003c00:	429d      	cmp	r5, r3
 8003c02:	d101      	bne.n	8003c08 <_vfiprintf_r+0x60>
 8003c04:	68b5      	ldr	r5, [r6, #8]
 8003c06:	e7df      	b.n	8003bc8 <_vfiprintf_r+0x20>
 8003c08:	4b79      	ldr	r3, [pc, #484]	; (8003df0 <_vfiprintf_r+0x248>)
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	bf08      	it	eq
 8003c0e:	68f5      	ldreq	r5, [r6, #12]
 8003c10:	e7da      	b.n	8003bc8 <_vfiprintf_r+0x20>
 8003c12:	89ab      	ldrh	r3, [r5, #12]
 8003c14:	0598      	lsls	r0, r3, #22
 8003c16:	d4ed      	bmi.n	8003bf4 <_vfiprintf_r+0x4c>
 8003c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c1a:	f7ff ff06 	bl	8003a2a <__retarget_lock_release_recursive>
 8003c1e:	e7e9      	b.n	8003bf4 <_vfiprintf_r+0x4c>
 8003c20:	2300      	movs	r3, #0
 8003c22:	9309      	str	r3, [sp, #36]	; 0x24
 8003c24:	2320      	movs	r3, #32
 8003c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c2e:	2330      	movs	r3, #48	; 0x30
 8003c30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003df4 <_vfiprintf_r+0x24c>
 8003c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c38:	f04f 0901 	mov.w	r9, #1
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	469a      	mov	sl, r3
 8003c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c44:	b10a      	cbz	r2, 8003c4a <_vfiprintf_r+0xa2>
 8003c46:	2a25      	cmp	r2, #37	; 0x25
 8003c48:	d1f9      	bne.n	8003c3e <_vfiprintf_r+0x96>
 8003c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c4e:	d00b      	beq.n	8003c68 <_vfiprintf_r+0xc0>
 8003c50:	465b      	mov	r3, fp
 8003c52:	4622      	mov	r2, r4
 8003c54:	4629      	mov	r1, r5
 8003c56:	4630      	mov	r0, r6
 8003c58:	f7ff ff93 	bl	8003b82 <__sfputs_r>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	f000 80aa 	beq.w	8003db6 <_vfiprintf_r+0x20e>
 8003c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c64:	445a      	add	r2, fp
 8003c66:	9209      	str	r2, [sp, #36]	; 0x24
 8003c68:	f89a 3000 	ldrb.w	r3, [sl]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a2 	beq.w	8003db6 <_vfiprintf_r+0x20e>
 8003c72:	2300      	movs	r3, #0
 8003c74:	f04f 32ff 	mov.w	r2, #4294967295
 8003c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c7c:	f10a 0a01 	add.w	sl, sl, #1
 8003c80:	9304      	str	r3, [sp, #16]
 8003c82:	9307      	str	r3, [sp, #28]
 8003c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c88:	931a      	str	r3, [sp, #104]	; 0x68
 8003c8a:	4654      	mov	r4, sl
 8003c8c:	2205      	movs	r2, #5
 8003c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c92:	4858      	ldr	r0, [pc, #352]	; (8003df4 <_vfiprintf_r+0x24c>)
 8003c94:	f7fc fabc 	bl	8000210 <memchr>
 8003c98:	9a04      	ldr	r2, [sp, #16]
 8003c9a:	b9d8      	cbnz	r0, 8003cd4 <_vfiprintf_r+0x12c>
 8003c9c:	06d1      	lsls	r1, r2, #27
 8003c9e:	bf44      	itt	mi
 8003ca0:	2320      	movmi	r3, #32
 8003ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ca6:	0713      	lsls	r3, r2, #28
 8003ca8:	bf44      	itt	mi
 8003caa:	232b      	movmi	r3, #43	; 0x2b
 8003cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8003cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb6:	d015      	beq.n	8003ce4 <_vfiprintf_r+0x13c>
 8003cb8:	9a07      	ldr	r2, [sp, #28]
 8003cba:	4654      	mov	r4, sl
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f04f 0c0a 	mov.w	ip, #10
 8003cc2:	4621      	mov	r1, r4
 8003cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cc8:	3b30      	subs	r3, #48	; 0x30
 8003cca:	2b09      	cmp	r3, #9
 8003ccc:	d94e      	bls.n	8003d6c <_vfiprintf_r+0x1c4>
 8003cce:	b1b0      	cbz	r0, 8003cfe <_vfiprintf_r+0x156>
 8003cd0:	9207      	str	r2, [sp, #28]
 8003cd2:	e014      	b.n	8003cfe <_vfiprintf_r+0x156>
 8003cd4:	eba0 0308 	sub.w	r3, r0, r8
 8003cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	9304      	str	r3, [sp, #16]
 8003ce0:	46a2      	mov	sl, r4
 8003ce2:	e7d2      	b.n	8003c8a <_vfiprintf_r+0xe2>
 8003ce4:	9b03      	ldr	r3, [sp, #12]
 8003ce6:	1d19      	adds	r1, r3, #4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	9103      	str	r1, [sp, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bfbb      	ittet	lt
 8003cf0:	425b      	neglt	r3, r3
 8003cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8003cf6:	9307      	strge	r3, [sp, #28]
 8003cf8:	9307      	strlt	r3, [sp, #28]
 8003cfa:	bfb8      	it	lt
 8003cfc:	9204      	strlt	r2, [sp, #16]
 8003cfe:	7823      	ldrb	r3, [r4, #0]
 8003d00:	2b2e      	cmp	r3, #46	; 0x2e
 8003d02:	d10c      	bne.n	8003d1e <_vfiprintf_r+0x176>
 8003d04:	7863      	ldrb	r3, [r4, #1]
 8003d06:	2b2a      	cmp	r3, #42	; 0x2a
 8003d08:	d135      	bne.n	8003d76 <_vfiprintf_r+0x1ce>
 8003d0a:	9b03      	ldr	r3, [sp, #12]
 8003d0c:	1d1a      	adds	r2, r3, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	9203      	str	r2, [sp, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bfb8      	it	lt
 8003d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d1a:	3402      	adds	r4, #2
 8003d1c:	9305      	str	r3, [sp, #20]
 8003d1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003e04 <_vfiprintf_r+0x25c>
 8003d22:	7821      	ldrb	r1, [r4, #0]
 8003d24:	2203      	movs	r2, #3
 8003d26:	4650      	mov	r0, sl
 8003d28:	f7fc fa72 	bl	8000210 <memchr>
 8003d2c:	b140      	cbz	r0, 8003d40 <_vfiprintf_r+0x198>
 8003d2e:	2340      	movs	r3, #64	; 0x40
 8003d30:	eba0 000a 	sub.w	r0, r0, sl
 8003d34:	fa03 f000 	lsl.w	r0, r3, r0
 8003d38:	9b04      	ldr	r3, [sp, #16]
 8003d3a:	4303      	orrs	r3, r0
 8003d3c:	3401      	adds	r4, #1
 8003d3e:	9304      	str	r3, [sp, #16]
 8003d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d44:	482c      	ldr	r0, [pc, #176]	; (8003df8 <_vfiprintf_r+0x250>)
 8003d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d4a:	2206      	movs	r2, #6
 8003d4c:	f7fc fa60 	bl	8000210 <memchr>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d03f      	beq.n	8003dd4 <_vfiprintf_r+0x22c>
 8003d54:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <_vfiprintf_r+0x254>)
 8003d56:	bb1b      	cbnz	r3, 8003da0 <_vfiprintf_r+0x1f8>
 8003d58:	9b03      	ldr	r3, [sp, #12]
 8003d5a:	3307      	adds	r3, #7
 8003d5c:	f023 0307 	bic.w	r3, r3, #7
 8003d60:	3308      	adds	r3, #8
 8003d62:	9303      	str	r3, [sp, #12]
 8003d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d66:	443b      	add	r3, r7
 8003d68:	9309      	str	r3, [sp, #36]	; 0x24
 8003d6a:	e767      	b.n	8003c3c <_vfiprintf_r+0x94>
 8003d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d70:	460c      	mov	r4, r1
 8003d72:	2001      	movs	r0, #1
 8003d74:	e7a5      	b.n	8003cc2 <_vfiprintf_r+0x11a>
 8003d76:	2300      	movs	r3, #0
 8003d78:	3401      	adds	r4, #1
 8003d7a:	9305      	str	r3, [sp, #20]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f04f 0c0a 	mov.w	ip, #10
 8003d82:	4620      	mov	r0, r4
 8003d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d88:	3a30      	subs	r2, #48	; 0x30
 8003d8a:	2a09      	cmp	r2, #9
 8003d8c:	d903      	bls.n	8003d96 <_vfiprintf_r+0x1ee>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0c5      	beq.n	8003d1e <_vfiprintf_r+0x176>
 8003d92:	9105      	str	r1, [sp, #20]
 8003d94:	e7c3      	b.n	8003d1e <_vfiprintf_r+0x176>
 8003d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e7f0      	b.n	8003d82 <_vfiprintf_r+0x1da>
 8003da0:	ab03      	add	r3, sp, #12
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	462a      	mov	r2, r5
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <_vfiprintf_r+0x258>)
 8003da8:	a904      	add	r1, sp, #16
 8003daa:	4630      	mov	r0, r6
 8003dac:	f3af 8000 	nop.w
 8003db0:	4607      	mov	r7, r0
 8003db2:	1c78      	adds	r0, r7, #1
 8003db4:	d1d6      	bne.n	8003d64 <_vfiprintf_r+0x1bc>
 8003db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003db8:	07d9      	lsls	r1, r3, #31
 8003dba:	d405      	bmi.n	8003dc8 <_vfiprintf_r+0x220>
 8003dbc:	89ab      	ldrh	r3, [r5, #12]
 8003dbe:	059a      	lsls	r2, r3, #22
 8003dc0:	d402      	bmi.n	8003dc8 <_vfiprintf_r+0x220>
 8003dc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003dc4:	f7ff fe31 	bl	8003a2a <__retarget_lock_release_recursive>
 8003dc8:	89ab      	ldrh	r3, [r5, #12]
 8003dca:	065b      	lsls	r3, r3, #25
 8003dcc:	f53f af12 	bmi.w	8003bf4 <_vfiprintf_r+0x4c>
 8003dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dd2:	e711      	b.n	8003bf8 <_vfiprintf_r+0x50>
 8003dd4:	ab03      	add	r3, sp, #12
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	462a      	mov	r2, r5
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <_vfiprintf_r+0x258>)
 8003ddc:	a904      	add	r1, sp, #16
 8003dde:	4630      	mov	r0, r6
 8003de0:	f000 f880 	bl	8003ee4 <_printf_i>
 8003de4:	e7e4      	b.n	8003db0 <_vfiprintf_r+0x208>
 8003de6:	bf00      	nop
 8003de8:	08004788 	.word	0x08004788
 8003dec:	080047a8 	.word	0x080047a8
 8003df0:	08004768 	.word	0x08004768
 8003df4:	080047c8 	.word	0x080047c8
 8003df8:	080047d2 	.word	0x080047d2
 8003dfc:	00000000 	.word	0x00000000
 8003e00:	08003b83 	.word	0x08003b83
 8003e04:	080047ce 	.word	0x080047ce

08003e08 <_printf_common>:
 8003e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e0c:	4616      	mov	r6, r2
 8003e0e:	4699      	mov	r9, r3
 8003e10:	688a      	ldr	r2, [r1, #8]
 8003e12:	690b      	ldr	r3, [r1, #16]
 8003e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfb8      	it	lt
 8003e1c:	4613      	movlt	r3, r2
 8003e1e:	6033      	str	r3, [r6, #0]
 8003e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e24:	4607      	mov	r7, r0
 8003e26:	460c      	mov	r4, r1
 8003e28:	b10a      	cbz	r2, 8003e2e <_printf_common+0x26>
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	6033      	str	r3, [r6, #0]
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	0699      	lsls	r1, r3, #26
 8003e32:	bf42      	ittt	mi
 8003e34:	6833      	ldrmi	r3, [r6, #0]
 8003e36:	3302      	addmi	r3, #2
 8003e38:	6033      	strmi	r3, [r6, #0]
 8003e3a:	6825      	ldr	r5, [r4, #0]
 8003e3c:	f015 0506 	ands.w	r5, r5, #6
 8003e40:	d106      	bne.n	8003e50 <_printf_common+0x48>
 8003e42:	f104 0a19 	add.w	sl, r4, #25
 8003e46:	68e3      	ldr	r3, [r4, #12]
 8003e48:	6832      	ldr	r2, [r6, #0]
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	42ab      	cmp	r3, r5
 8003e4e:	dc26      	bgt.n	8003e9e <_printf_common+0x96>
 8003e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e54:	1e13      	subs	r3, r2, #0
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	bf18      	it	ne
 8003e5a:	2301      	movne	r3, #1
 8003e5c:	0692      	lsls	r2, r2, #26
 8003e5e:	d42b      	bmi.n	8003eb8 <_printf_common+0xb0>
 8003e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e64:	4649      	mov	r1, r9
 8003e66:	4638      	mov	r0, r7
 8003e68:	47c0      	blx	r8
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d01e      	beq.n	8003eac <_printf_common+0xa4>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	68e5      	ldr	r5, [r4, #12]
 8003e72:	6832      	ldr	r2, [r6, #0]
 8003e74:	f003 0306 	and.w	r3, r3, #6
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	bf08      	it	eq
 8003e7c:	1aad      	subeq	r5, r5, r2
 8003e7e:	68a3      	ldr	r3, [r4, #8]
 8003e80:	6922      	ldr	r2, [r4, #16]
 8003e82:	bf0c      	ite	eq
 8003e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e88:	2500      	movne	r5, #0
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bfc4      	itt	gt
 8003e8e:	1a9b      	subgt	r3, r3, r2
 8003e90:	18ed      	addgt	r5, r5, r3
 8003e92:	2600      	movs	r6, #0
 8003e94:	341a      	adds	r4, #26
 8003e96:	42b5      	cmp	r5, r6
 8003e98:	d11a      	bne.n	8003ed0 <_printf_common+0xc8>
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	e008      	b.n	8003eb0 <_printf_common+0xa8>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	4652      	mov	r2, sl
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	47c0      	blx	r8
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d103      	bne.n	8003eb4 <_printf_common+0xac>
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	e7c6      	b.n	8003e46 <_printf_common+0x3e>
 8003eb8:	18e1      	adds	r1, r4, r3
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	2030      	movs	r0, #48	; 0x30
 8003ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ec2:	4422      	add	r2, r4
 8003ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ecc:	3302      	adds	r3, #2
 8003ece:	e7c7      	b.n	8003e60 <_printf_common+0x58>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	47c0      	blx	r8
 8003eda:	3001      	adds	r0, #1
 8003edc:	d0e6      	beq.n	8003eac <_printf_common+0xa4>
 8003ede:	3601      	adds	r6, #1
 8003ee0:	e7d9      	b.n	8003e96 <_printf_common+0x8e>
	...

08003ee4 <_printf_i>:
 8003ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	7e0f      	ldrb	r7, [r1, #24]
 8003eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003eec:	2f78      	cmp	r7, #120	; 0x78
 8003eee:	4691      	mov	r9, r2
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	469a      	mov	sl, r3
 8003ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003efa:	d807      	bhi.n	8003f0c <_printf_i+0x28>
 8003efc:	2f62      	cmp	r7, #98	; 0x62
 8003efe:	d80a      	bhi.n	8003f16 <_printf_i+0x32>
 8003f00:	2f00      	cmp	r7, #0
 8003f02:	f000 80d8 	beq.w	80040b6 <_printf_i+0x1d2>
 8003f06:	2f58      	cmp	r7, #88	; 0x58
 8003f08:	f000 80a3 	beq.w	8004052 <_printf_i+0x16e>
 8003f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f14:	e03a      	b.n	8003f8c <_printf_i+0xa8>
 8003f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f1a:	2b15      	cmp	r3, #21
 8003f1c:	d8f6      	bhi.n	8003f0c <_printf_i+0x28>
 8003f1e:	a101      	add	r1, pc, #4	; (adr r1, 8003f24 <_printf_i+0x40>)
 8003f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f91 	.word	0x08003f91
 8003f2c:	08003f0d 	.word	0x08003f0d
 8003f30:	08003f0d 	.word	0x08003f0d
 8003f34:	08003f0d 	.word	0x08003f0d
 8003f38:	08003f0d 	.word	0x08003f0d
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003f0d 	.word	0x08003f0d
 8003f44:	08003f0d 	.word	0x08003f0d
 8003f48:	08003f0d 	.word	0x08003f0d
 8003f4c:	08003f0d 	.word	0x08003f0d
 8003f50:	0800409d 	.word	0x0800409d
 8003f54:	08003fc1 	.word	0x08003fc1
 8003f58:	0800407f 	.word	0x0800407f
 8003f5c:	08003f0d 	.word	0x08003f0d
 8003f60:	08003f0d 	.word	0x08003f0d
 8003f64:	080040bf 	.word	0x080040bf
 8003f68:	08003f0d 	.word	0x08003f0d
 8003f6c:	08003fc1 	.word	0x08003fc1
 8003f70:	08003f0d 	.word	0x08003f0d
 8003f74:	08003f0d 	.word	0x08003f0d
 8003f78:	08004087 	.word	0x08004087
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	1d1a      	adds	r2, r3, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	602a      	str	r2, [r5, #0]
 8003f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0a3      	b.n	80040d8 <_printf_i+0x1f4>
 8003f90:	6820      	ldr	r0, [r4, #0]
 8003f92:	6829      	ldr	r1, [r5, #0]
 8003f94:	0606      	lsls	r6, r0, #24
 8003f96:	f101 0304 	add.w	r3, r1, #4
 8003f9a:	d50a      	bpl.n	8003fb2 <_printf_i+0xce>
 8003f9c:	680e      	ldr	r6, [r1, #0]
 8003f9e:	602b      	str	r3, [r5, #0]
 8003fa0:	2e00      	cmp	r6, #0
 8003fa2:	da03      	bge.n	8003fac <_printf_i+0xc8>
 8003fa4:	232d      	movs	r3, #45	; 0x2d
 8003fa6:	4276      	negs	r6, r6
 8003fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fac:	485e      	ldr	r0, [pc, #376]	; (8004128 <_printf_i+0x244>)
 8003fae:	230a      	movs	r3, #10
 8003fb0:	e019      	b.n	8003fe6 <_printf_i+0x102>
 8003fb2:	680e      	ldr	r6, [r1, #0]
 8003fb4:	602b      	str	r3, [r5, #0]
 8003fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fba:	bf18      	it	ne
 8003fbc:	b236      	sxthne	r6, r6
 8003fbe:	e7ef      	b.n	8003fa0 <_printf_i+0xbc>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	6820      	ldr	r0, [r4, #0]
 8003fc4:	1d19      	adds	r1, r3, #4
 8003fc6:	6029      	str	r1, [r5, #0]
 8003fc8:	0601      	lsls	r1, r0, #24
 8003fca:	d501      	bpl.n	8003fd0 <_printf_i+0xec>
 8003fcc:	681e      	ldr	r6, [r3, #0]
 8003fce:	e002      	b.n	8003fd6 <_printf_i+0xf2>
 8003fd0:	0646      	lsls	r6, r0, #25
 8003fd2:	d5fb      	bpl.n	8003fcc <_printf_i+0xe8>
 8003fd4:	881e      	ldrh	r6, [r3, #0]
 8003fd6:	4854      	ldr	r0, [pc, #336]	; (8004128 <_printf_i+0x244>)
 8003fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8003fda:	bf0c      	ite	eq
 8003fdc:	2308      	moveq	r3, #8
 8003fde:	230a      	movne	r3, #10
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fe6:	6865      	ldr	r5, [r4, #4]
 8003fe8:	60a5      	str	r5, [r4, #8]
 8003fea:	2d00      	cmp	r5, #0
 8003fec:	bfa2      	ittt	ge
 8003fee:	6821      	ldrge	r1, [r4, #0]
 8003ff0:	f021 0104 	bicge.w	r1, r1, #4
 8003ff4:	6021      	strge	r1, [r4, #0]
 8003ff6:	b90e      	cbnz	r6, 8003ffc <_printf_i+0x118>
 8003ff8:	2d00      	cmp	r5, #0
 8003ffa:	d04d      	beq.n	8004098 <_printf_i+0x1b4>
 8003ffc:	4615      	mov	r5, r2
 8003ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004002:	fb03 6711 	mls	r7, r3, r1, r6
 8004006:	5dc7      	ldrb	r7, [r0, r7]
 8004008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800400c:	4637      	mov	r7, r6
 800400e:	42bb      	cmp	r3, r7
 8004010:	460e      	mov	r6, r1
 8004012:	d9f4      	bls.n	8003ffe <_printf_i+0x11a>
 8004014:	2b08      	cmp	r3, #8
 8004016:	d10b      	bne.n	8004030 <_printf_i+0x14c>
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	07de      	lsls	r6, r3, #31
 800401c:	d508      	bpl.n	8004030 <_printf_i+0x14c>
 800401e:	6923      	ldr	r3, [r4, #16]
 8004020:	6861      	ldr	r1, [r4, #4]
 8004022:	4299      	cmp	r1, r3
 8004024:	bfde      	ittt	le
 8004026:	2330      	movle	r3, #48	; 0x30
 8004028:	f805 3c01 	strble.w	r3, [r5, #-1]
 800402c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004030:	1b52      	subs	r2, r2, r5
 8004032:	6122      	str	r2, [r4, #16]
 8004034:	f8cd a000 	str.w	sl, [sp]
 8004038:	464b      	mov	r3, r9
 800403a:	aa03      	add	r2, sp, #12
 800403c:	4621      	mov	r1, r4
 800403e:	4640      	mov	r0, r8
 8004040:	f7ff fee2 	bl	8003e08 <_printf_common>
 8004044:	3001      	adds	r0, #1
 8004046:	d14c      	bne.n	80040e2 <_printf_i+0x1fe>
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	b004      	add	sp, #16
 800404e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004052:	4835      	ldr	r0, [pc, #212]	; (8004128 <_printf_i+0x244>)
 8004054:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004058:	6829      	ldr	r1, [r5, #0]
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004060:	6029      	str	r1, [r5, #0]
 8004062:	061d      	lsls	r5, r3, #24
 8004064:	d514      	bpl.n	8004090 <_printf_i+0x1ac>
 8004066:	07df      	lsls	r7, r3, #31
 8004068:	bf44      	itt	mi
 800406a:	f043 0320 	orrmi.w	r3, r3, #32
 800406e:	6023      	strmi	r3, [r4, #0]
 8004070:	b91e      	cbnz	r6, 800407a <_printf_i+0x196>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	f023 0320 	bic.w	r3, r3, #32
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	2310      	movs	r3, #16
 800407c:	e7b0      	b.n	8003fe0 <_printf_i+0xfc>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	f043 0320 	orr.w	r3, r3, #32
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	2378      	movs	r3, #120	; 0x78
 8004088:	4828      	ldr	r0, [pc, #160]	; (800412c <_printf_i+0x248>)
 800408a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800408e:	e7e3      	b.n	8004058 <_printf_i+0x174>
 8004090:	0659      	lsls	r1, r3, #25
 8004092:	bf48      	it	mi
 8004094:	b2b6      	uxthmi	r6, r6
 8004096:	e7e6      	b.n	8004066 <_printf_i+0x182>
 8004098:	4615      	mov	r5, r2
 800409a:	e7bb      	b.n	8004014 <_printf_i+0x130>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	6826      	ldr	r6, [r4, #0]
 80040a0:	6961      	ldr	r1, [r4, #20]
 80040a2:	1d18      	adds	r0, r3, #4
 80040a4:	6028      	str	r0, [r5, #0]
 80040a6:	0635      	lsls	r5, r6, #24
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	d501      	bpl.n	80040b0 <_printf_i+0x1cc>
 80040ac:	6019      	str	r1, [r3, #0]
 80040ae:	e002      	b.n	80040b6 <_printf_i+0x1d2>
 80040b0:	0670      	lsls	r0, r6, #25
 80040b2:	d5fb      	bpl.n	80040ac <_printf_i+0x1c8>
 80040b4:	8019      	strh	r1, [r3, #0]
 80040b6:	2300      	movs	r3, #0
 80040b8:	6123      	str	r3, [r4, #16]
 80040ba:	4615      	mov	r5, r2
 80040bc:	e7ba      	b.n	8004034 <_printf_i+0x150>
 80040be:	682b      	ldr	r3, [r5, #0]
 80040c0:	1d1a      	adds	r2, r3, #4
 80040c2:	602a      	str	r2, [r5, #0]
 80040c4:	681d      	ldr	r5, [r3, #0]
 80040c6:	6862      	ldr	r2, [r4, #4]
 80040c8:	2100      	movs	r1, #0
 80040ca:	4628      	mov	r0, r5
 80040cc:	f7fc f8a0 	bl	8000210 <memchr>
 80040d0:	b108      	cbz	r0, 80040d6 <_printf_i+0x1f2>
 80040d2:	1b40      	subs	r0, r0, r5
 80040d4:	6060      	str	r0, [r4, #4]
 80040d6:	6863      	ldr	r3, [r4, #4]
 80040d8:	6123      	str	r3, [r4, #16]
 80040da:	2300      	movs	r3, #0
 80040dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040e0:	e7a8      	b.n	8004034 <_printf_i+0x150>
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	462a      	mov	r2, r5
 80040e6:	4649      	mov	r1, r9
 80040e8:	4640      	mov	r0, r8
 80040ea:	47d0      	blx	sl
 80040ec:	3001      	adds	r0, #1
 80040ee:	d0ab      	beq.n	8004048 <_printf_i+0x164>
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	079b      	lsls	r3, r3, #30
 80040f4:	d413      	bmi.n	800411e <_printf_i+0x23a>
 80040f6:	68e0      	ldr	r0, [r4, #12]
 80040f8:	9b03      	ldr	r3, [sp, #12]
 80040fa:	4298      	cmp	r0, r3
 80040fc:	bfb8      	it	lt
 80040fe:	4618      	movlt	r0, r3
 8004100:	e7a4      	b.n	800404c <_printf_i+0x168>
 8004102:	2301      	movs	r3, #1
 8004104:	4632      	mov	r2, r6
 8004106:	4649      	mov	r1, r9
 8004108:	4640      	mov	r0, r8
 800410a:	47d0      	blx	sl
 800410c:	3001      	adds	r0, #1
 800410e:	d09b      	beq.n	8004048 <_printf_i+0x164>
 8004110:	3501      	adds	r5, #1
 8004112:	68e3      	ldr	r3, [r4, #12]
 8004114:	9903      	ldr	r1, [sp, #12]
 8004116:	1a5b      	subs	r3, r3, r1
 8004118:	42ab      	cmp	r3, r5
 800411a:	dcf2      	bgt.n	8004102 <_printf_i+0x21e>
 800411c:	e7eb      	b.n	80040f6 <_printf_i+0x212>
 800411e:	2500      	movs	r5, #0
 8004120:	f104 0619 	add.w	r6, r4, #25
 8004124:	e7f5      	b.n	8004112 <_printf_i+0x22e>
 8004126:	bf00      	nop
 8004128:	080047d9 	.word	0x080047d9
 800412c:	080047ea 	.word	0x080047ea

08004130 <_sbrk_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4d06      	ldr	r5, [pc, #24]	; (800414c <_sbrk_r+0x1c>)
 8004134:	2300      	movs	r3, #0
 8004136:	4604      	mov	r4, r0
 8004138:	4608      	mov	r0, r1
 800413a:	602b      	str	r3, [r5, #0]
 800413c:	f7fc fd58 	bl	8000bf0 <_sbrk>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_sbrk_r+0x1a>
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	b103      	cbz	r3, 800414a <_sbrk_r+0x1a>
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	2000016c 	.word	0x2000016c

08004150 <__sread>:
 8004150:	b510      	push	{r4, lr}
 8004152:	460c      	mov	r4, r1
 8004154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004158:	f000 fab2 	bl	80046c0 <_read_r>
 800415c:	2800      	cmp	r0, #0
 800415e:	bfab      	itete	ge
 8004160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004162:	89a3      	ldrhlt	r3, [r4, #12]
 8004164:	181b      	addge	r3, r3, r0
 8004166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800416a:	bfac      	ite	ge
 800416c:	6563      	strge	r3, [r4, #84]	; 0x54
 800416e:	81a3      	strhlt	r3, [r4, #12]
 8004170:	bd10      	pop	{r4, pc}

08004172 <__swrite>:
 8004172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	461f      	mov	r7, r3
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	05db      	lsls	r3, r3, #23
 800417c:	4605      	mov	r5, r0
 800417e:	460c      	mov	r4, r1
 8004180:	4616      	mov	r6, r2
 8004182:	d505      	bpl.n	8004190 <__swrite+0x1e>
 8004184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004188:	2302      	movs	r3, #2
 800418a:	2200      	movs	r2, #0
 800418c:	f000 f9c8 	bl	8004520 <_lseek_r>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800419a:	81a3      	strh	r3, [r4, #12]
 800419c:	4632      	mov	r2, r6
 800419e:	463b      	mov	r3, r7
 80041a0:	4628      	mov	r0, r5
 80041a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a6:	f000 b869 	b.w	800427c <_write_r>

080041aa <__sseek>:
 80041aa:	b510      	push	{r4, lr}
 80041ac:	460c      	mov	r4, r1
 80041ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b2:	f000 f9b5 	bl	8004520 <_lseek_r>
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	bf15      	itete	ne
 80041bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80041be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041c6:	81a3      	strheq	r3, [r4, #12]
 80041c8:	bf18      	it	ne
 80041ca:	81a3      	strhne	r3, [r4, #12]
 80041cc:	bd10      	pop	{r4, pc}

080041ce <__sclose>:
 80041ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d2:	f000 b8d3 	b.w	800437c <_close_r>
	...

080041d8 <__swbuf_r>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	460e      	mov	r6, r1
 80041dc:	4614      	mov	r4, r2
 80041de:	4605      	mov	r5, r0
 80041e0:	b118      	cbz	r0, 80041ea <__swbuf_r+0x12>
 80041e2:	6983      	ldr	r3, [r0, #24]
 80041e4:	b90b      	cbnz	r3, 80041ea <__swbuf_r+0x12>
 80041e6:	f7ff fb81 	bl	80038ec <__sinit>
 80041ea:	4b21      	ldr	r3, [pc, #132]	; (8004270 <__swbuf_r+0x98>)
 80041ec:	429c      	cmp	r4, r3
 80041ee:	d12b      	bne.n	8004248 <__swbuf_r+0x70>
 80041f0:	686c      	ldr	r4, [r5, #4]
 80041f2:	69a3      	ldr	r3, [r4, #24]
 80041f4:	60a3      	str	r3, [r4, #8]
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	071a      	lsls	r2, r3, #28
 80041fa:	d52f      	bpl.n	800425c <__swbuf_r+0x84>
 80041fc:	6923      	ldr	r3, [r4, #16]
 80041fe:	b36b      	cbz	r3, 800425c <__swbuf_r+0x84>
 8004200:	6923      	ldr	r3, [r4, #16]
 8004202:	6820      	ldr	r0, [r4, #0]
 8004204:	1ac0      	subs	r0, r0, r3
 8004206:	6963      	ldr	r3, [r4, #20]
 8004208:	b2f6      	uxtb	r6, r6
 800420a:	4283      	cmp	r3, r0
 800420c:	4637      	mov	r7, r6
 800420e:	dc04      	bgt.n	800421a <__swbuf_r+0x42>
 8004210:	4621      	mov	r1, r4
 8004212:	4628      	mov	r0, r5
 8004214:	f000 f948 	bl	80044a8 <_fflush_r>
 8004218:	bb30      	cbnz	r0, 8004268 <__swbuf_r+0x90>
 800421a:	68a3      	ldr	r3, [r4, #8]
 800421c:	3b01      	subs	r3, #1
 800421e:	60a3      	str	r3, [r4, #8]
 8004220:	6823      	ldr	r3, [r4, #0]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	6022      	str	r2, [r4, #0]
 8004226:	701e      	strb	r6, [r3, #0]
 8004228:	6963      	ldr	r3, [r4, #20]
 800422a:	3001      	adds	r0, #1
 800422c:	4283      	cmp	r3, r0
 800422e:	d004      	beq.n	800423a <__swbuf_r+0x62>
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	07db      	lsls	r3, r3, #31
 8004234:	d506      	bpl.n	8004244 <__swbuf_r+0x6c>
 8004236:	2e0a      	cmp	r6, #10
 8004238:	d104      	bne.n	8004244 <__swbuf_r+0x6c>
 800423a:	4621      	mov	r1, r4
 800423c:	4628      	mov	r0, r5
 800423e:	f000 f933 	bl	80044a8 <_fflush_r>
 8004242:	b988      	cbnz	r0, 8004268 <__swbuf_r+0x90>
 8004244:	4638      	mov	r0, r7
 8004246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <__swbuf_r+0x9c>)
 800424a:	429c      	cmp	r4, r3
 800424c:	d101      	bne.n	8004252 <__swbuf_r+0x7a>
 800424e:	68ac      	ldr	r4, [r5, #8]
 8004250:	e7cf      	b.n	80041f2 <__swbuf_r+0x1a>
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <__swbuf_r+0xa0>)
 8004254:	429c      	cmp	r4, r3
 8004256:	bf08      	it	eq
 8004258:	68ec      	ldreq	r4, [r5, #12]
 800425a:	e7ca      	b.n	80041f2 <__swbuf_r+0x1a>
 800425c:	4621      	mov	r1, r4
 800425e:	4628      	mov	r0, r5
 8004260:	f000 f81e 	bl	80042a0 <__swsetup_r>
 8004264:	2800      	cmp	r0, #0
 8004266:	d0cb      	beq.n	8004200 <__swbuf_r+0x28>
 8004268:	f04f 37ff 	mov.w	r7, #4294967295
 800426c:	e7ea      	b.n	8004244 <__swbuf_r+0x6c>
 800426e:	bf00      	nop
 8004270:	08004788 	.word	0x08004788
 8004274:	080047a8 	.word	0x080047a8
 8004278:	08004768 	.word	0x08004768

0800427c <_write_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4d07      	ldr	r5, [pc, #28]	; (800429c <_write_r+0x20>)
 8004280:	4604      	mov	r4, r0
 8004282:	4608      	mov	r0, r1
 8004284:	4611      	mov	r1, r2
 8004286:	2200      	movs	r2, #0
 8004288:	602a      	str	r2, [r5, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	f7fc fb5e 	bl	800094c <_write>
 8004290:	1c43      	adds	r3, r0, #1
 8004292:	d102      	bne.n	800429a <_write_r+0x1e>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	b103      	cbz	r3, 800429a <_write_r+0x1e>
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	bd38      	pop	{r3, r4, r5, pc}
 800429c:	2000016c 	.word	0x2000016c

080042a0 <__swsetup_r>:
 80042a0:	4b32      	ldr	r3, [pc, #200]	; (800436c <__swsetup_r+0xcc>)
 80042a2:	b570      	push	{r4, r5, r6, lr}
 80042a4:	681d      	ldr	r5, [r3, #0]
 80042a6:	4606      	mov	r6, r0
 80042a8:	460c      	mov	r4, r1
 80042aa:	b125      	cbz	r5, 80042b6 <__swsetup_r+0x16>
 80042ac:	69ab      	ldr	r3, [r5, #24]
 80042ae:	b913      	cbnz	r3, 80042b6 <__swsetup_r+0x16>
 80042b0:	4628      	mov	r0, r5
 80042b2:	f7ff fb1b 	bl	80038ec <__sinit>
 80042b6:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <__swsetup_r+0xd0>)
 80042b8:	429c      	cmp	r4, r3
 80042ba:	d10f      	bne.n	80042dc <__swsetup_r+0x3c>
 80042bc:	686c      	ldr	r4, [r5, #4]
 80042be:	89a3      	ldrh	r3, [r4, #12]
 80042c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042c4:	0719      	lsls	r1, r3, #28
 80042c6:	d42c      	bmi.n	8004322 <__swsetup_r+0x82>
 80042c8:	06dd      	lsls	r5, r3, #27
 80042ca:	d411      	bmi.n	80042f0 <__swsetup_r+0x50>
 80042cc:	2309      	movs	r3, #9
 80042ce:	6033      	str	r3, [r6, #0]
 80042d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042d4:	81a3      	strh	r3, [r4, #12]
 80042d6:	f04f 30ff 	mov.w	r0, #4294967295
 80042da:	e03e      	b.n	800435a <__swsetup_r+0xba>
 80042dc:	4b25      	ldr	r3, [pc, #148]	; (8004374 <__swsetup_r+0xd4>)
 80042de:	429c      	cmp	r4, r3
 80042e0:	d101      	bne.n	80042e6 <__swsetup_r+0x46>
 80042e2:	68ac      	ldr	r4, [r5, #8]
 80042e4:	e7eb      	b.n	80042be <__swsetup_r+0x1e>
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <__swsetup_r+0xd8>)
 80042e8:	429c      	cmp	r4, r3
 80042ea:	bf08      	it	eq
 80042ec:	68ec      	ldreq	r4, [r5, #12]
 80042ee:	e7e6      	b.n	80042be <__swsetup_r+0x1e>
 80042f0:	0758      	lsls	r0, r3, #29
 80042f2:	d512      	bpl.n	800431a <__swsetup_r+0x7a>
 80042f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042f6:	b141      	cbz	r1, 800430a <__swsetup_r+0x6a>
 80042f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042fc:	4299      	cmp	r1, r3
 80042fe:	d002      	beq.n	8004306 <__swsetup_r+0x66>
 8004300:	4630      	mov	r0, r6
 8004302:	f000 f991 	bl	8004628 <_free_r>
 8004306:	2300      	movs	r3, #0
 8004308:	6363      	str	r3, [r4, #52]	; 0x34
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	2300      	movs	r3, #0
 8004314:	6063      	str	r3, [r4, #4]
 8004316:	6923      	ldr	r3, [r4, #16]
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	89a3      	ldrh	r3, [r4, #12]
 800431c:	f043 0308 	orr.w	r3, r3, #8
 8004320:	81a3      	strh	r3, [r4, #12]
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	b94b      	cbnz	r3, 800433a <__swsetup_r+0x9a>
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800432c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004330:	d003      	beq.n	800433a <__swsetup_r+0x9a>
 8004332:	4621      	mov	r1, r4
 8004334:	4630      	mov	r0, r6
 8004336:	f000 f92b 	bl	8004590 <__smakebuf_r>
 800433a:	89a0      	ldrh	r0, [r4, #12]
 800433c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004340:	f010 0301 	ands.w	r3, r0, #1
 8004344:	d00a      	beq.n	800435c <__swsetup_r+0xbc>
 8004346:	2300      	movs	r3, #0
 8004348:	60a3      	str	r3, [r4, #8]
 800434a:	6963      	ldr	r3, [r4, #20]
 800434c:	425b      	negs	r3, r3
 800434e:	61a3      	str	r3, [r4, #24]
 8004350:	6923      	ldr	r3, [r4, #16]
 8004352:	b943      	cbnz	r3, 8004366 <__swsetup_r+0xc6>
 8004354:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004358:	d1ba      	bne.n	80042d0 <__swsetup_r+0x30>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	0781      	lsls	r1, r0, #30
 800435e:	bf58      	it	pl
 8004360:	6963      	ldrpl	r3, [r4, #20]
 8004362:	60a3      	str	r3, [r4, #8]
 8004364:	e7f4      	b.n	8004350 <__swsetup_r+0xb0>
 8004366:	2000      	movs	r0, #0
 8004368:	e7f7      	b.n	800435a <__swsetup_r+0xba>
 800436a:	bf00      	nop
 800436c:	2000000c 	.word	0x2000000c
 8004370:	08004788 	.word	0x08004788
 8004374:	080047a8 	.word	0x080047a8
 8004378:	08004768 	.word	0x08004768

0800437c <_close_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4d06      	ldr	r5, [pc, #24]	; (8004398 <_close_r+0x1c>)
 8004380:	2300      	movs	r3, #0
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	f7fc fbfd 	bl	8000b86 <_close>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_close_r+0x1a>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b103      	cbz	r3, 8004396 <_close_r+0x1a>
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	2000016c 	.word	0x2000016c

0800439c <__sflush_r>:
 800439c:	898a      	ldrh	r2, [r1, #12]
 800439e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a2:	4605      	mov	r5, r0
 80043a4:	0710      	lsls	r0, r2, #28
 80043a6:	460c      	mov	r4, r1
 80043a8:	d458      	bmi.n	800445c <__sflush_r+0xc0>
 80043aa:	684b      	ldr	r3, [r1, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	dc05      	bgt.n	80043bc <__sflush_r+0x20>
 80043b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	dc02      	bgt.n	80043bc <__sflush_r+0x20>
 80043b6:	2000      	movs	r0, #0
 80043b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043be:	2e00      	cmp	r6, #0
 80043c0:	d0f9      	beq.n	80043b6 <__sflush_r+0x1a>
 80043c2:	2300      	movs	r3, #0
 80043c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043c8:	682f      	ldr	r7, [r5, #0]
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	d032      	beq.n	8004434 <__sflush_r+0x98>
 80043ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	075a      	lsls	r2, r3, #29
 80043d4:	d505      	bpl.n	80043e2 <__sflush_r+0x46>
 80043d6:	6863      	ldr	r3, [r4, #4]
 80043d8:	1ac0      	subs	r0, r0, r3
 80043da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043dc:	b10b      	cbz	r3, 80043e2 <__sflush_r+0x46>
 80043de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043e0:	1ac0      	subs	r0, r0, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	4602      	mov	r2, r0
 80043e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043e8:	6a21      	ldr	r1, [r4, #32]
 80043ea:	4628      	mov	r0, r5
 80043ec:	47b0      	blx	r6
 80043ee:	1c43      	adds	r3, r0, #1
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	d106      	bne.n	8004402 <__sflush_r+0x66>
 80043f4:	6829      	ldr	r1, [r5, #0]
 80043f6:	291d      	cmp	r1, #29
 80043f8:	d82c      	bhi.n	8004454 <__sflush_r+0xb8>
 80043fa:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <__sflush_r+0x108>)
 80043fc:	40ca      	lsrs	r2, r1
 80043fe:	07d6      	lsls	r6, r2, #31
 8004400:	d528      	bpl.n	8004454 <__sflush_r+0xb8>
 8004402:	2200      	movs	r2, #0
 8004404:	6062      	str	r2, [r4, #4]
 8004406:	04d9      	lsls	r1, r3, #19
 8004408:	6922      	ldr	r2, [r4, #16]
 800440a:	6022      	str	r2, [r4, #0]
 800440c:	d504      	bpl.n	8004418 <__sflush_r+0x7c>
 800440e:	1c42      	adds	r2, r0, #1
 8004410:	d101      	bne.n	8004416 <__sflush_r+0x7a>
 8004412:	682b      	ldr	r3, [r5, #0]
 8004414:	b903      	cbnz	r3, 8004418 <__sflush_r+0x7c>
 8004416:	6560      	str	r0, [r4, #84]	; 0x54
 8004418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800441a:	602f      	str	r7, [r5, #0]
 800441c:	2900      	cmp	r1, #0
 800441e:	d0ca      	beq.n	80043b6 <__sflush_r+0x1a>
 8004420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004424:	4299      	cmp	r1, r3
 8004426:	d002      	beq.n	800442e <__sflush_r+0x92>
 8004428:	4628      	mov	r0, r5
 800442a:	f000 f8fd 	bl	8004628 <_free_r>
 800442e:	2000      	movs	r0, #0
 8004430:	6360      	str	r0, [r4, #52]	; 0x34
 8004432:	e7c1      	b.n	80043b8 <__sflush_r+0x1c>
 8004434:	6a21      	ldr	r1, [r4, #32]
 8004436:	2301      	movs	r3, #1
 8004438:	4628      	mov	r0, r5
 800443a:	47b0      	blx	r6
 800443c:	1c41      	adds	r1, r0, #1
 800443e:	d1c7      	bne.n	80043d0 <__sflush_r+0x34>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0c4      	beq.n	80043d0 <__sflush_r+0x34>
 8004446:	2b1d      	cmp	r3, #29
 8004448:	d001      	beq.n	800444e <__sflush_r+0xb2>
 800444a:	2b16      	cmp	r3, #22
 800444c:	d101      	bne.n	8004452 <__sflush_r+0xb6>
 800444e:	602f      	str	r7, [r5, #0]
 8004450:	e7b1      	b.n	80043b6 <__sflush_r+0x1a>
 8004452:	89a3      	ldrh	r3, [r4, #12]
 8004454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004458:	81a3      	strh	r3, [r4, #12]
 800445a:	e7ad      	b.n	80043b8 <__sflush_r+0x1c>
 800445c:	690f      	ldr	r7, [r1, #16]
 800445e:	2f00      	cmp	r7, #0
 8004460:	d0a9      	beq.n	80043b6 <__sflush_r+0x1a>
 8004462:	0793      	lsls	r3, r2, #30
 8004464:	680e      	ldr	r6, [r1, #0]
 8004466:	bf08      	it	eq
 8004468:	694b      	ldreq	r3, [r1, #20]
 800446a:	600f      	str	r7, [r1, #0]
 800446c:	bf18      	it	ne
 800446e:	2300      	movne	r3, #0
 8004470:	eba6 0807 	sub.w	r8, r6, r7
 8004474:	608b      	str	r3, [r1, #8]
 8004476:	f1b8 0f00 	cmp.w	r8, #0
 800447a:	dd9c      	ble.n	80043b6 <__sflush_r+0x1a>
 800447c:	6a21      	ldr	r1, [r4, #32]
 800447e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004480:	4643      	mov	r3, r8
 8004482:	463a      	mov	r2, r7
 8004484:	4628      	mov	r0, r5
 8004486:	47b0      	blx	r6
 8004488:	2800      	cmp	r0, #0
 800448a:	dc06      	bgt.n	800449a <__sflush_r+0xfe>
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004492:	81a3      	strh	r3, [r4, #12]
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	e78e      	b.n	80043b8 <__sflush_r+0x1c>
 800449a:	4407      	add	r7, r0
 800449c:	eba8 0800 	sub.w	r8, r8, r0
 80044a0:	e7e9      	b.n	8004476 <__sflush_r+0xda>
 80044a2:	bf00      	nop
 80044a4:	20400001 	.word	0x20400001

080044a8 <_fflush_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	690b      	ldr	r3, [r1, #16]
 80044ac:	4605      	mov	r5, r0
 80044ae:	460c      	mov	r4, r1
 80044b0:	b913      	cbnz	r3, 80044b8 <_fflush_r+0x10>
 80044b2:	2500      	movs	r5, #0
 80044b4:	4628      	mov	r0, r5
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
 80044b8:	b118      	cbz	r0, 80044c2 <_fflush_r+0x1a>
 80044ba:	6983      	ldr	r3, [r0, #24]
 80044bc:	b90b      	cbnz	r3, 80044c2 <_fflush_r+0x1a>
 80044be:	f7ff fa15 	bl	80038ec <__sinit>
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <_fflush_r+0x6c>)
 80044c4:	429c      	cmp	r4, r3
 80044c6:	d11b      	bne.n	8004500 <_fflush_r+0x58>
 80044c8:	686c      	ldr	r4, [r5, #4]
 80044ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0ef      	beq.n	80044b2 <_fflush_r+0xa>
 80044d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044d4:	07d0      	lsls	r0, r2, #31
 80044d6:	d404      	bmi.n	80044e2 <_fflush_r+0x3a>
 80044d8:	0599      	lsls	r1, r3, #22
 80044da:	d402      	bmi.n	80044e2 <_fflush_r+0x3a>
 80044dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044de:	f7ff faa3 	bl	8003a28 <__retarget_lock_acquire_recursive>
 80044e2:	4628      	mov	r0, r5
 80044e4:	4621      	mov	r1, r4
 80044e6:	f7ff ff59 	bl	800439c <__sflush_r>
 80044ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044ec:	07da      	lsls	r2, r3, #31
 80044ee:	4605      	mov	r5, r0
 80044f0:	d4e0      	bmi.n	80044b4 <_fflush_r+0xc>
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	059b      	lsls	r3, r3, #22
 80044f6:	d4dd      	bmi.n	80044b4 <_fflush_r+0xc>
 80044f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044fa:	f7ff fa96 	bl	8003a2a <__retarget_lock_release_recursive>
 80044fe:	e7d9      	b.n	80044b4 <_fflush_r+0xc>
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <_fflush_r+0x70>)
 8004502:	429c      	cmp	r4, r3
 8004504:	d101      	bne.n	800450a <_fflush_r+0x62>
 8004506:	68ac      	ldr	r4, [r5, #8]
 8004508:	e7df      	b.n	80044ca <_fflush_r+0x22>
 800450a:	4b04      	ldr	r3, [pc, #16]	; (800451c <_fflush_r+0x74>)
 800450c:	429c      	cmp	r4, r3
 800450e:	bf08      	it	eq
 8004510:	68ec      	ldreq	r4, [r5, #12]
 8004512:	e7da      	b.n	80044ca <_fflush_r+0x22>
 8004514:	08004788 	.word	0x08004788
 8004518:	080047a8 	.word	0x080047a8
 800451c:	08004768 	.word	0x08004768

08004520 <_lseek_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4d07      	ldr	r5, [pc, #28]	; (8004540 <_lseek_r+0x20>)
 8004524:	4604      	mov	r4, r0
 8004526:	4608      	mov	r0, r1
 8004528:	4611      	mov	r1, r2
 800452a:	2200      	movs	r2, #0
 800452c:	602a      	str	r2, [r5, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	f7fc fb50 	bl	8000bd4 <_lseek>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d102      	bne.n	800453e <_lseek_r+0x1e>
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	b103      	cbz	r3, 800453e <_lseek_r+0x1e>
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	2000016c 	.word	0x2000016c

08004544 <__swhatbuf_r>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	460e      	mov	r6, r1
 8004548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454c:	2900      	cmp	r1, #0
 800454e:	b096      	sub	sp, #88	; 0x58
 8004550:	4614      	mov	r4, r2
 8004552:	461d      	mov	r5, r3
 8004554:	da08      	bge.n	8004568 <__swhatbuf_r+0x24>
 8004556:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	602a      	str	r2, [r5, #0]
 800455e:	061a      	lsls	r2, r3, #24
 8004560:	d410      	bmi.n	8004584 <__swhatbuf_r+0x40>
 8004562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004566:	e00e      	b.n	8004586 <__swhatbuf_r+0x42>
 8004568:	466a      	mov	r2, sp
 800456a:	f000 f8bb 	bl	80046e4 <_fstat_r>
 800456e:	2800      	cmp	r0, #0
 8004570:	dbf1      	blt.n	8004556 <__swhatbuf_r+0x12>
 8004572:	9a01      	ldr	r2, [sp, #4]
 8004574:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004578:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800457c:	425a      	negs	r2, r3
 800457e:	415a      	adcs	r2, r3
 8004580:	602a      	str	r2, [r5, #0]
 8004582:	e7ee      	b.n	8004562 <__swhatbuf_r+0x1e>
 8004584:	2340      	movs	r3, #64	; 0x40
 8004586:	2000      	movs	r0, #0
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	b016      	add	sp, #88	; 0x58
 800458c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004590 <__smakebuf_r>:
 8004590:	898b      	ldrh	r3, [r1, #12]
 8004592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004594:	079d      	lsls	r5, r3, #30
 8004596:	4606      	mov	r6, r0
 8004598:	460c      	mov	r4, r1
 800459a:	d507      	bpl.n	80045ac <__smakebuf_r+0x1c>
 800459c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	6123      	str	r3, [r4, #16]
 80045a4:	2301      	movs	r3, #1
 80045a6:	6163      	str	r3, [r4, #20]
 80045a8:	b002      	add	sp, #8
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	ab01      	add	r3, sp, #4
 80045ae:	466a      	mov	r2, sp
 80045b0:	f7ff ffc8 	bl	8004544 <__swhatbuf_r>
 80045b4:	9900      	ldr	r1, [sp, #0]
 80045b6:	4605      	mov	r5, r0
 80045b8:	4630      	mov	r0, r6
 80045ba:	f7ff fa57 	bl	8003a6c <_malloc_r>
 80045be:	b948      	cbnz	r0, 80045d4 <__smakebuf_r+0x44>
 80045c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045c4:	059a      	lsls	r2, r3, #22
 80045c6:	d4ef      	bmi.n	80045a8 <__smakebuf_r+0x18>
 80045c8:	f023 0303 	bic.w	r3, r3, #3
 80045cc:	f043 0302 	orr.w	r3, r3, #2
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	e7e3      	b.n	800459c <__smakebuf_r+0xc>
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <__smakebuf_r+0x7c>)
 80045d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	6020      	str	r0, [r4, #0]
 80045dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	9b00      	ldr	r3, [sp, #0]
 80045e4:	6163      	str	r3, [r4, #20]
 80045e6:	9b01      	ldr	r3, [sp, #4]
 80045e8:	6120      	str	r0, [r4, #16]
 80045ea:	b15b      	cbz	r3, 8004604 <__smakebuf_r+0x74>
 80045ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f889 	bl	8004708 <_isatty_r>
 80045f6:	b128      	cbz	r0, 8004604 <__smakebuf_r+0x74>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f023 0303 	bic.w	r3, r3, #3
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	81a3      	strh	r3, [r4, #12]
 8004604:	89a0      	ldrh	r0, [r4, #12]
 8004606:	4305      	orrs	r5, r0
 8004608:	81a5      	strh	r5, [r4, #12]
 800460a:	e7cd      	b.n	80045a8 <__smakebuf_r+0x18>
 800460c:	08003885 	.word	0x08003885

08004610 <__malloc_lock>:
 8004610:	4801      	ldr	r0, [pc, #4]	; (8004618 <__malloc_lock+0x8>)
 8004612:	f7ff ba09 	b.w	8003a28 <__retarget_lock_acquire_recursive>
 8004616:	bf00      	nop
 8004618:	20000160 	.word	0x20000160

0800461c <__malloc_unlock>:
 800461c:	4801      	ldr	r0, [pc, #4]	; (8004624 <__malloc_unlock+0x8>)
 800461e:	f7ff ba04 	b.w	8003a2a <__retarget_lock_release_recursive>
 8004622:	bf00      	nop
 8004624:	20000160 	.word	0x20000160

08004628 <_free_r>:
 8004628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800462a:	2900      	cmp	r1, #0
 800462c:	d044      	beq.n	80046b8 <_free_r+0x90>
 800462e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004632:	9001      	str	r0, [sp, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f1a1 0404 	sub.w	r4, r1, #4
 800463a:	bfb8      	it	lt
 800463c:	18e4      	addlt	r4, r4, r3
 800463e:	f7ff ffe7 	bl	8004610 <__malloc_lock>
 8004642:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <_free_r+0x94>)
 8004644:	9801      	ldr	r0, [sp, #4]
 8004646:	6813      	ldr	r3, [r2, #0]
 8004648:	b933      	cbnz	r3, 8004658 <_free_r+0x30>
 800464a:	6063      	str	r3, [r4, #4]
 800464c:	6014      	str	r4, [r2, #0]
 800464e:	b003      	add	sp, #12
 8004650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004654:	f7ff bfe2 	b.w	800461c <__malloc_unlock>
 8004658:	42a3      	cmp	r3, r4
 800465a:	d908      	bls.n	800466e <_free_r+0x46>
 800465c:	6825      	ldr	r5, [r4, #0]
 800465e:	1961      	adds	r1, r4, r5
 8004660:	428b      	cmp	r3, r1
 8004662:	bf01      	itttt	eq
 8004664:	6819      	ldreq	r1, [r3, #0]
 8004666:	685b      	ldreq	r3, [r3, #4]
 8004668:	1949      	addeq	r1, r1, r5
 800466a:	6021      	streq	r1, [r4, #0]
 800466c:	e7ed      	b.n	800464a <_free_r+0x22>
 800466e:	461a      	mov	r2, r3
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	b10b      	cbz	r3, 8004678 <_free_r+0x50>
 8004674:	42a3      	cmp	r3, r4
 8004676:	d9fa      	bls.n	800466e <_free_r+0x46>
 8004678:	6811      	ldr	r1, [r2, #0]
 800467a:	1855      	adds	r5, r2, r1
 800467c:	42a5      	cmp	r5, r4
 800467e:	d10b      	bne.n	8004698 <_free_r+0x70>
 8004680:	6824      	ldr	r4, [r4, #0]
 8004682:	4421      	add	r1, r4
 8004684:	1854      	adds	r4, r2, r1
 8004686:	42a3      	cmp	r3, r4
 8004688:	6011      	str	r1, [r2, #0]
 800468a:	d1e0      	bne.n	800464e <_free_r+0x26>
 800468c:	681c      	ldr	r4, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	6053      	str	r3, [r2, #4]
 8004692:	4421      	add	r1, r4
 8004694:	6011      	str	r1, [r2, #0]
 8004696:	e7da      	b.n	800464e <_free_r+0x26>
 8004698:	d902      	bls.n	80046a0 <_free_r+0x78>
 800469a:	230c      	movs	r3, #12
 800469c:	6003      	str	r3, [r0, #0]
 800469e:	e7d6      	b.n	800464e <_free_r+0x26>
 80046a0:	6825      	ldr	r5, [r4, #0]
 80046a2:	1961      	adds	r1, r4, r5
 80046a4:	428b      	cmp	r3, r1
 80046a6:	bf04      	itt	eq
 80046a8:	6819      	ldreq	r1, [r3, #0]
 80046aa:	685b      	ldreq	r3, [r3, #4]
 80046ac:	6063      	str	r3, [r4, #4]
 80046ae:	bf04      	itt	eq
 80046b0:	1949      	addeq	r1, r1, r5
 80046b2:	6021      	streq	r1, [r4, #0]
 80046b4:	6054      	str	r4, [r2, #4]
 80046b6:	e7ca      	b.n	800464e <_free_r+0x26>
 80046b8:	b003      	add	sp, #12
 80046ba:	bd30      	pop	{r4, r5, pc}
 80046bc:	20000164 	.word	0x20000164

080046c0 <_read_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4d07      	ldr	r5, [pc, #28]	; (80046e0 <_read_r+0x20>)
 80046c4:	4604      	mov	r4, r0
 80046c6:	4608      	mov	r0, r1
 80046c8:	4611      	mov	r1, r2
 80046ca:	2200      	movs	r2, #0
 80046cc:	602a      	str	r2, [r5, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f7fc fa3c 	bl	8000b4c <_read>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_read_r+0x1e>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_read_r+0x1e>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	2000016c 	.word	0x2000016c

080046e4 <_fstat_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4d07      	ldr	r5, [pc, #28]	; (8004704 <_fstat_r+0x20>)
 80046e8:	2300      	movs	r3, #0
 80046ea:	4604      	mov	r4, r0
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	f7fc fa54 	bl	8000b9e <_fstat>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d102      	bne.n	8004700 <_fstat_r+0x1c>
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	b103      	cbz	r3, 8004700 <_fstat_r+0x1c>
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	bd38      	pop	{r3, r4, r5, pc}
 8004702:	bf00      	nop
 8004704:	2000016c 	.word	0x2000016c

08004708 <_isatty_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4d06      	ldr	r5, [pc, #24]	; (8004724 <_isatty_r+0x1c>)
 800470c:	2300      	movs	r3, #0
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	602b      	str	r3, [r5, #0]
 8004714:	f7fc fa53 	bl	8000bbe <_isatty>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_isatty_r+0x1a>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	b103      	cbz	r3, 8004722 <_isatty_r+0x1a>
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	2000016c 	.word	0x2000016c

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
