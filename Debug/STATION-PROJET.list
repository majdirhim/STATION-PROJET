
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008720  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a50  08008a50  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a58  08008a58  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a58  08008a58  00018a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a5c  08008a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000070  08008ad0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  08008ad0  0002068c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f260  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c94  00000000  00000000  0002f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  00031f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00032c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cdf  00000000  00000000  000337d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012dfb  00000000  00000000  0005b4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7fb7  00000000  00000000  0006e2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003570  00000000  00000000  001562b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080088d8 	.word	0x080088d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080088d8 	.word	0x080088d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <WR_TO_Sd>:
/**
 * @brief Ecriture dans le fichier
 * @param : file_name : nom du fichier
 * @param : Wtext : data à transmettre
 */
FRESULT WR_TO_Sd(const char *wtext, const char *file_name) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */

			//Open file for writing (Create)
			if (f_open(&SDFile, file_name, FA_OPEN_APPEND | FA_WRITE)
 80005ce:	2232      	movs	r2, #50	; 0x32
 80005d0:	6839      	ldr	r1, [r7, #0]
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <WR_TO_Sd+0x58>)
 80005d4:	f006 fc7c 	bl	8006ed0 <f_open>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <WR_TO_Sd+0x1e>
					!= FR_OK) {
				Error_Handler();
 80005de:	f000 fa4b 	bl	8000a78 <Error_Handler>
			}
				//Write to the text file
				res = f_write(&SDFile, wtext, strlen(wtext),
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff fe14 	bl	8000210 <strlen>
 80005e8:	4602      	mov	r2, r0
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <WR_TO_Sd+0x58>)
 80005f2:	f006 fe2b 	bl	800724c <f_write>
 80005f6:	4603      	mov	r3, r0
 80005f8:	73fb      	strb	r3, [r7, #15]
						(void*) &byteswritten);
				if ((byteswritten == 0) || (res != FR_OK)) {
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d002      	beq.n	8000606 <WR_TO_Sd+0x42>
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <WR_TO_Sd+0x48>
					Error_Handler();
 8000606:	f000 fa37 	bl	8000a78 <Error_Handler>
 800060a:	e002      	b.n	8000612 <WR_TO_Sd+0x4e>
				} else {

					f_close(&SDFile); // Close file object
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <WR_TO_Sd+0x58>)
 800060e:	f007 f810 	bl	8007632 <f_close>
				}
	//f_mount(&SDFatFS, (TCHAR const*) NULL, 0); //unmount file system object
return res;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000410 	.word	0x20000410

08000620 <Fat_Init>:

/**
 * @briefInitialiser un espace de travail dans la carte Sd
 */

void Fat_Init(){
 8000620:	b580      	push	{r7, lr}
 8000622:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000626:	af02      	add	r7, sp, #8

uint8_t rtext[_MAX_SS];/* File read buffer */
if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8000628:	2200      	movs	r2, #0
 800062a:	490e      	ldr	r1, [pc, #56]	; (8000664 <Fat_Init+0x44>)
 800062c:	480e      	ldr	r0, [pc, #56]	; (8000668 <Fat_Init+0x48>)
 800062e:	f006 fc09 	bl	8006e44 <f_mount>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <Fat_Init+0x1e>
	 Error_Handler();
 8000638:	f000 fa1e 	bl	8000a78 <Error_Handler>
	  	if (f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext)) //creates a FAT volume on the logical drive
	  			!= FR_OK) {
	  		Error_Handler(); // error handler
	  	}
	}
}
 800063c:	e00d      	b.n	800065a <Fat_Init+0x3a>
	  	if (f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext)) //creates a FAT volume on the logical drive
 800063e:	463b      	mov	r3, r7
 8000640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	2200      	movs	r2, #0
 8000648:	2107      	movs	r1, #7
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <Fat_Init+0x44>)
 800064c:	f007 f81c 	bl	8007688 <f_mkfs>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <Fat_Init+0x3a>
	  		Error_Handler(); // error handler
 8000656:	f000 fa0f 	bl	8000a78 <Error_Handler>
}
 800065a:	bf00      	nop
 800065c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200001dc 	.word	0x200001dc
 8000668:	200001e0 	.word	0x200001e0

0800066c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_DMA_Init+0x48>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_DMA_Init+0x48>)
 8000678:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_DMA_Init+0x48>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	203b      	movs	r0, #59	; 0x3b
 8000690:	f000 fd5f 	bl	8001152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000694:	203b      	movs	r0, #59	; 0x3b
 8000696:	f000 fd78 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2045      	movs	r0, #69	; 0x45
 80006a0:	f000 fd57 	bl	8001152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006a4:	2045      	movs	r0, #69	; 0x45
 80006a6:	f000 fd70 	bl	800118a <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b090      	sub	sp, #64	; 0x40
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ce:	4b91      	ldr	r3, [pc, #580]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a90      	ldr	r2, [pc, #576]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006d4:	f043 0310 	orr.w	r3, r3, #16
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b8e      	ldr	r3, [pc, #568]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80006e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e6:	4b8b      	ldr	r3, [pc, #556]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a8a      	ldr	r2, [pc, #552]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b88      	ldr	r3, [pc, #544]	; (8000914 <MX_GPIO_Init+0x25c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b85      	ldr	r3, [pc, #532]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a84      	ldr	r2, [pc, #528]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b82      	ldr	r3, [pc, #520]	; (8000914 <MX_GPIO_Init+0x25c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	623b      	str	r3, [r7, #32]
 8000714:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	4b7f      	ldr	r3, [pc, #508]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a7e      	ldr	r2, [pc, #504]	; (8000914 <MX_GPIO_Init+0x25c>)
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b7c      	ldr	r3, [pc, #496]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0308 	and.w	r3, r3, #8
 800072a:	61fb      	str	r3, [r7, #28]
 800072c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b79      	ldr	r3, [pc, #484]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a78      	ldr	r2, [pc, #480]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b76      	ldr	r3, [pc, #472]	; (8000914 <MX_GPIO_Init+0x25c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b73      	ldr	r3, [pc, #460]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a72      	ldr	r2, [pc, #456]	; (8000914 <MX_GPIO_Init+0x25c>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b70      	ldr	r3, [pc, #448]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800075e:	4b6d      	ldr	r3, [pc, #436]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a6c      	ldr	r2, [pc, #432]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b6a      	ldr	r3, [pc, #424]	; (8000914 <MX_GPIO_Init+0x25c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000776:	4b67      	ldr	r3, [pc, #412]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a66      	ldr	r2, [pc, #408]	; (8000914 <MX_GPIO_Init+0x25c>)
 800077c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b64      	ldr	r3, [pc, #400]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800078e:	4b61      	ldr	r3, [pc, #388]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a60      	ldr	r2, [pc, #384]	; (8000914 <MX_GPIO_Init+0x25c>)
 8000794:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b5e      	ldr	r3, [pc, #376]	; (8000914 <MX_GPIO_Init+0x25c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007a6:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a5a      	ldr	r2, [pc, #360]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b58      	ldr	r3, [pc, #352]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a54      	ldr	r2, [pc, #336]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b52      	ldr	r3, [pc, #328]	; (8000914 <MX_GPIO_Init+0x25c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 80007d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007dc:	2303      	movs	r3, #3
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007e8:	4619      	mov	r1, r3
 80007ea:	484b      	ldr	r0, [pc, #300]	; (8000918 <MX_GPIO_Init+0x260>)
 80007ec:	f001 f88e 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 80007f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f6:	2303      	movs	r3, #3
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000802:	4619      	mov	r1, r3
 8000804:	4845      	ldr	r0, [pc, #276]	; (800091c <MX_GPIO_Init+0x264>)
 8000806:	f001 f881 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB7 PB6 PB13
                           PB12 PB2 PB10 PB1
                           PB0 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081c:	4619      	mov	r1, r3
 800081e:	4840      	ldr	r0, [pc, #256]	; (8000920 <MX_GPIO_Init+0x268>)
 8000820:	f001 f874 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8000824:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082a:	2303      	movs	r3, #3
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000836:	4619      	mov	r1, r3
 8000838:	483a      	ldr	r0, [pc, #232]	; (8000924 <MX_GPIO_Init+0x26c>)
 800083a:	f001 f867 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA8 PA1 PA0
                           PA4 PA2 PA6 PA5
                           PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 800083e:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000844:	2303      	movs	r3, #3
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000850:	4619      	mov	r1, r3
 8000852:	4835      	ldr	r0, [pc, #212]	; (8000928 <MX_GPIO_Init+0x270>)
 8000854:	f001 f85a 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8000858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085e:	2303      	movs	r3, #3
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800086a:	4619      	mov	r1, r3
 800086c:	482f      	ldr	r0, [pc, #188]	; (800092c <MX_GPIO_Init+0x274>)
 800086e:	f001 f84d 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8000872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	2303      	movs	r3, #3
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000884:	4619      	mov	r1, r3
 8000886:	482a      	ldr	r0, [pc, #168]	; (8000930 <MX_GPIO_Init+0x278>)
 8000888:	f001 f840 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800088c:	23ff      	movs	r3, #255	; 0xff
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000890:	2303      	movs	r3, #3
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	4825      	ldr	r0, [pc, #148]	; (8000934 <MX_GPIO_Init+0x27c>)
 80008a0:	f001 f834 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b6:	4619      	mov	r1, r3
 80008b8:	481f      	ldr	r0, [pc, #124]	; (8000938 <MX_GPIO_Init+0x280>)
 80008ba:	f001 f827 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c4:	2303      	movs	r3, #3
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d0:	4619      	mov	r1, r3
 80008d2:	481a      	ldr	r0, [pc, #104]	; (800093c <MX_GPIO_Init+0x284>)
 80008d4:	f001 f81a 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80008d8:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008de:	2303      	movs	r3, #3
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ea:	4619      	mov	r1, r3
 80008ec:	4814      	ldr	r0, [pc, #80]	; (8000940 <MX_GPIO_Init+0x288>)
 80008ee:	f001 f80d 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC3 PC0 PC1 PC2
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 80008f2:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f8:	2303      	movs	r3, #3
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_GPIO_Init+0x280>)
 8000908:	f001 f800 	bl	800190c <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3740      	adds	r7, #64	; 0x40
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40021000 	.word	0x40021000
 800091c:	40021800 	.word	0x40021800
 8000920:	40020400 	.word	0x40020400
 8000924:	40020c00 	.word	0x40020c00
 8000928:	40020000 	.word	0x40020000
 800092c:	40022400 	.word	0x40022400
 8000930:	40022000 	.word	0x40022000
 8000934:	40022800 	.word	0x40022800
 8000938:	40020800 	.word	0x40020800
 800093c:	40021400 	.word	0x40021400
 8000940:	40021c00 	.word	0x40021c00

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08e      	sub	sp, #56	; 0x38
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f000 faa6 	bl	8000e9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f825 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000952:	f7ff feb1 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000956:	f7ff fe89 	bl	800066c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800095a:	f000 f893 	bl	8000a84 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800095e:	f004 fad1 	bl	8004f04 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  Fat_Init();
 8000962:	f7ff fe5d 	bl	8000620 <Fat_Init>
  char wtext[50];
  uint8_t i =0;
 8000966:	2300      	movs	r3, #0
 8000968:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(wtext,"testing %u \r\n",i++);
 800096c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	f887 2037 	strb.w	r2, [r7, #55]	; 0x37
 8000976:	461a      	mov	r2, r3
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4906      	ldr	r1, [pc, #24]	; (8000994 <main+0x50>)
 800097c:	4618      	mov	r0, r3
 800097e:	f007 fb3d 	bl	8007ffc <siprintf>
	  WR_TO_Sd(wtext, "test.txt");
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4904      	ldr	r1, [pc, #16]	; (8000998 <main+0x54>)
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe1c 	bl	80005c4 <WR_TO_Sd>
	  HAL_Delay(100);
 800098c:	2064      	movs	r0, #100	; 0x64
 800098e:	f000 fae1 	bl	8000f54 <HAL_Delay>
	  sprintf(wtext,"testing %u \r\n",i++);
 8000992:	e7eb      	b.n	800096c <main+0x28>
 8000994:	080088f0 	.word	0x080088f0
 8000998:	08008900 	.word	0x08008900

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	2230      	movs	r2, #48	; 0x30
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f007 fb1e 	bl	8007fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <SystemClock_Config+0xd4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	4a2a      	ldr	r2, [pc, #168]	; (8000a70 <SystemClock_Config+0xd4>)
 80009c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ca:	6413      	str	r3, [r2, #64]	; 0x40
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <SystemClock_Config+0xd4>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <SystemClock_Config+0xd8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009e0:	4a24      	ldr	r2, [pc, #144]	; (8000a74 <SystemClock_Config+0xd8>)
 80009e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <SystemClock_Config+0xd8>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fe:	2302      	movs	r3, #2
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 0320 	add.w	r3, r7, #32
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 f989 	bl	8001d34 <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a28:	f000 f826 	bl	8000a78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a2c:	f001 f932 	bl	8001c94 <HAL_PWREx_EnableOverDrive>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a36:	f000 f81f 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2103      	movs	r1, #3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fc0f 	bl	800227c <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a64:	f000 f808 	bl	8000a78 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3750      	adds	r7, #80	; 0x50
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_SDMMC1_SD_Init+0x38>)
 8000a8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <MX_SDMMC1_SD_Init+0x3c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_SDMMC1_SD_Init+0x38>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_SDMMC1_SD_Init+0x38>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_SDMMC1_SD_Init+0x38>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_SDMMC1_SD_Init+0x38>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <MX_SDMMC1_SD_Init+0x38>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <MX_SDMMC1_SD_Init+0x38>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	2000008c 	.word	0x2000008c
 8000ac0:	40012c00 	.word	0x40012c00

08000ac4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b0ac      	sub	sp, #176	; 0xb0
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	2284      	movs	r2, #132	; 0x84
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f007 fa81 	bl	8007fec <memset>
  if(sdHandle->Instance==SDMMC1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a74      	ldr	r2, [pc, #464]	; (8000cc0 <HAL_SD_MspInit+0x1fc>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	f040 80e0 	bne.w	8000cb6 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000af6:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000afa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fd67 	bl	80025e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8000b18:	f7ff ffae 	bl	8000a78 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000b1c:	4b69      	ldr	r3, [pc, #420]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a68      	ldr	r2, [pc, #416]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000b22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44
 8000b28:	4b66      	ldr	r3, [pc, #408]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b34:	4b63      	ldr	r3, [pc, #396]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a62      	ldr	r2, [pc, #392]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b60      	ldr	r3, [pc, #384]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4c:	4b5d      	ldr	r3, [pc, #372]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a5c      	ldr	r2, [pc, #368]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b5a      	ldr	r3, [pc, #360]	; (8000cc4 <HAL_SD_MspInit+0x200>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8000b64:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	484f      	ldr	r0, [pc, #316]	; (8000cc8 <HAL_SD_MspInit+0x204>)
 8000b8c:	f000 febe 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b90:	2304      	movs	r3, #4
 8000b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ba8:	230c      	movs	r3, #12
 8000baa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4845      	ldr	r0, [pc, #276]	; (8000ccc <HAL_SD_MspInit+0x208>)
 8000bb6:	f000 fea9 	bl	800190c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000bba:	4b45      	ldr	r3, [pc, #276]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000bbc:	4a45      	ldr	r2, [pc, #276]	; (8000cd4 <HAL_SD_MspInit+0x210>)
 8000bbe:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000bc0:	4b43      	ldr	r3, [pc, #268]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bc6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc8:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bce:	4b40      	ldr	r3, [pc, #256]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd4:	4b3e      	ldr	r3, [pc, #248]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bda:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bdc:	4b3c      	ldr	r3, [pc, #240]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000bde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000be4:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000be6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bea:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000bee:	2220      	movs	r2, #32
 8000bf0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bf2:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bf8:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bfe:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000c00:	2203      	movs	r2, #3
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000c04:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000c06:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000c0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000c14:	482e      	ldr	r0, [pc, #184]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000c16:	f000 fad3 	bl	80011c0 <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000c20:	f7ff ff2a 	bl	8000a78 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a2a      	ldr	r2, [pc, #168]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40
 8000c2a:	4a29      	ldr	r2, [pc, #164]	; (8000cd0 <HAL_SD_MspInit+0x20c>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c32:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <HAL_SD_MspInit+0x218>)
 8000c34:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c36:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c40:	2240      	movs	r2, #64	; 0x40
 8000c42:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4a:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c50:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c58:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c60:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c64:	2220      	movs	r2, #32
 8000c66:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c76:	2203      	movs	r2, #3
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c7c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c80:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000c8a:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c8c:	f000 fa98 	bl	80011c0 <HAL_DMA_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000c96:	f7ff feef 	bl	8000a78 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000c9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_SD_MspInit+0x214>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2031      	movs	r0, #49	; 0x31
 8000cac:	f000 fa51 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000cb0:	2031      	movs	r0, #49	; 0x31
 8000cb2:	f000 fa6a 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	37b0      	adds	r7, #176	; 0xb0
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40012c00 	.word	0x40012c00
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020800 	.word	0x40020800
 8000ccc:	40020c00 	.word	0x40020c00
 8000cd0:	20000110 	.word	0x20000110
 8000cd4:	40026458 	.word	0x40026458
 8000cd8:	20000170 	.word	0x20000170
 8000cdc:	400264a0 	.word	0x400264a0

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f8ce 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000d80:	4802      	ldr	r0, [pc, #8]	; (8000d8c <SDMMC1_IRQHandler+0x10>)
 8000d82:	f002 fa9d 	bl	80032c0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000008c 	.word	0x2000008c

08000d90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <DMA2_Stream3_IRQHandler+0x10>)
 8000d96:	f000 fb43 	bl	8001420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000110 	.word	0x20000110

08000da4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <DMA2_Stream6_IRQHandler+0x10>)
 8000daa:	f000 fb39 	bl	8001420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000170 	.word	0x20000170

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f007 f8d6 	bl	8007f98 <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20050000 	.word	0x20050000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	200001d0 	.word	0x200001d0
 8000e20:	20000690 	.word	0x20000690

08000e24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd7 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f007 f895 	bl	8007fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fd63 	bl	8000944 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e8c:	08008a60 	.word	0x08008a60
  ldr r2, =_sbss
 8000e90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e94:	2000068c 	.word	0x2000068c

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>

08000e9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9e:	2003      	movs	r0, #3
 8000ea0:	f000 f94c 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f000 f805 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eaa:	f7ff ff19 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f967 	bl	80011a6 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f92f 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	200001d4 	.word	0x200001d4

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200001d4 	.word	0x200001d4

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <__NVIC_SetPriorityGrouping+0x40>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x40>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00
 8000fe0:	05fa0000 	.word	0x05fa0000

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db0b      	blt.n	800102a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <__NVIC_EnableIRQ+0x38>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff8e 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff29 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff3e 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff8e 	bl	8001090 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff31 	bl	8001000 <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffa2 	bl	80010f8 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff feb6 	bl	8000f3c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e099      	b.n	8001310 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0201 	bic.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011fc:	e00f      	b.n	800121e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011fe:	f7ff fe9d 	bl	8000f3c <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b05      	cmp	r3, #5
 800120a:	d908      	bls.n	800121e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2220      	movs	r2, #32
 8001210:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e078      	b.n	8001310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e8      	bne.n	80011fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <HAL_DMA_Init+0x158>)
 8001238:	4013      	ands	r3, r2
 800123a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	2b04      	cmp	r3, #4
 8001276:	d107      	bne.n	8001288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4313      	orrs	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f023 0307 	bic.w	r3, r3, #7
 800129e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d117      	bne.n	80012e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00e      	beq.n	80012e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 faa5 	bl	8001814 <DMA_CheckFifoParam>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012de:	2301      	movs	r3, #1
 80012e0:	e016      	b.n	8001310 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fa5c 	bl	80017a8 <DMA_CalcBaseAndBitshift>
 80012f0:	4603      	mov	r3, r0
 80012f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	223f      	movs	r2, #63	; 0x3f
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	f010803f 	.word	0xf010803f

0800131c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800133a:	2b01      	cmp	r3, #1
 800133c:	d101      	bne.n	8001342 <HAL_DMA_Start_IT+0x26>
 800133e:	2302      	movs	r3, #2
 8001340:	e048      	b.n	80013d4 <HAL_DMA_Start_IT+0xb8>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b01      	cmp	r3, #1
 8001354:	d137      	bne.n	80013c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2202      	movs	r2, #2
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f9ee 	bl	800174c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001374:	223f      	movs	r2, #63	; 0x3f
 8001376:	409a      	lsls	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0216 	orr.w	r2, r2, #22
 800138a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800139a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d007      	beq.n	80013b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0208 	orr.w	r2, r2, #8
 80013b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0201 	orr.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e005      	b.n	80013d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013ce:	2302      	movs	r3, #2
 80013d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d004      	beq.n	80013fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00c      	b.n	8001414 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2205      	movs	r2, #5
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800142c:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <HAL_DMA_IRQHandler+0x248>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a8e      	ldr	r2, [pc, #568]	; (800166c <HAL_DMA_IRQHandler+0x24c>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	0a9b      	lsrs	r3, r3, #10
 8001438:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144a:	2208      	movs	r2, #8
 800144c:	409a      	lsls	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d01a      	beq.n	800148c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0204 	bic.w	r2, r2, #4
 8001472:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001478:	2208      	movs	r2, #8
 800147a:	409a      	lsls	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001490:	2201      	movs	r2, #1
 8001492:	409a      	lsls	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d012      	beq.n	80014c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	2201      	movs	r2, #1
 80014b0:	409a      	lsls	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ba:	f043 0202 	orr.w	r2, r3, #2
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	2204      	movs	r2, #4
 80014c8:	409a      	lsls	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d012      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00b      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e4:	2204      	movs	r2, #4
 80014e6:	409a      	lsls	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f0:	f043 0204 	orr.w	r2, r3, #4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	2210      	movs	r2, #16
 80014fe:	409a      	lsls	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d043      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d03c      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151a:	2210      	movs	r2, #16
 800151c:	409a      	lsls	r2, r3
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d018      	beq.n	8001562 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d108      	bne.n	8001550 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	2b00      	cmp	r3, #0
 8001544:	d024      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	4798      	blx	r3
 800154e:	e01f      	b.n	8001590 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01b      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
 8001560:	e016      	b.n	8001590 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d107      	bne.n	8001580 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0208 	bic.w	r2, r2, #8
 800157e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001594:	2220      	movs	r2, #32
 8001596:	409a      	lsls	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 808f 	beq.w	80016c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 8087 	beq.w	80016c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b6:	2220      	movs	r2, #32
 80015b8:	409a      	lsls	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d136      	bne.n	8001638 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0216 	bic.w	r2, r2, #22
 80015d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695a      	ldr	r2, [r3, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <HAL_DMA_IRQHandler+0x1da>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0208 	bic.w	r2, r2, #8
 8001608:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	223f      	movs	r2, #63	; 0x3f
 8001610:	409a      	lsls	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162a:	2b00      	cmp	r3, #0
 800162c:	d07e      	beq.n	800172c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
        }
        return;
 8001636:	e079      	b.n	800172c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d01d      	beq.n	8001682 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10d      	bne.n	8001670 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	2b00      	cmp	r3, #0
 800165a:	d031      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
 8001664:	e02c      	b.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
 8001680:	e01e      	b.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10f      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0210 	bic.w	r2, r2, #16
 800169e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d032      	beq.n	800172e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d022      	beq.n	800171a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2205      	movs	r2, #5
 80016d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d307      	bcc.n	8001708 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f2      	bne.n	80016ec <HAL_DMA_IRQHandler+0x2cc>
 8001706:	e000      	b.n	800170a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001708:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
 800172a:	e000      	b.n	800172e <HAL_DMA_IRQHandler+0x30e>
        return;
 800172c:	bf00      	nop
    }
  }
}
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b40      	cmp	r3, #64	; 0x40
 8001778:	d108      	bne.n	800178c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800178a:	e007      	b.n	800179c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	60da      	str	r2, [r3, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	3b10      	subs	r3, #16
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <DMA_CalcBaseAndBitshift+0x60>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <DMA_CalcBaseAndBitshift+0x64>)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d908      	bls.n	80017e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <DMA_CalcBaseAndBitshift+0x68>)
 80017de:	4013      	ands	r3, r2
 80017e0:	1d1a      	adds	r2, r3, #4
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58
 80017e6:	e006      	b.n	80017f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <DMA_CalcBaseAndBitshift+0x68>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	aaaaaaab 	.word	0xaaaaaaab
 800180c:	08008960 	.word	0x08008960
 8001810:	fffffc00 	.word	0xfffffc00

08001814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d11f      	bne.n	800186e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d856      	bhi.n	80018e2 <DMA_CheckFifoParam+0xce>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <DMA_CheckFifoParam+0x28>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	0800185f 	.word	0x0800185f
 8001844:	0800184d 	.word	0x0800184d
 8001848:	080018e3 	.word	0x080018e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d046      	beq.n	80018e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800185c:	e043      	b.n	80018e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001866:	d140      	bne.n	80018ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800186c:	e03d      	b.n	80018ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001876:	d121      	bne.n	80018bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d837      	bhi.n	80018ee <DMA_CheckFifoParam+0xda>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <DMA_CheckFifoParam+0x70>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08001895 	.word	0x08001895
 8001888:	0800189b 	.word	0x0800189b
 800188c:	08001895 	.word	0x08001895
 8001890:	080018ad 	.word	0x080018ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
      break;
 8001898:	e030      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d025      	beq.n	80018f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018aa:	e022      	b.n	80018f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018b4:	d11f      	bne.n	80018f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018ba:	e01c      	b.n	80018f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d903      	bls.n	80018ca <DMA_CheckFifoParam+0xb6>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d003      	beq.n	80018d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018c8:	e018      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
      break;
 80018ce:	e015      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00e      	beq.n	80018fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
      break;
 80018e0:	e00b      	b.n	80018fa <DMA_CheckFifoParam+0xe6>
      break;
 80018e2:	bf00      	nop
 80018e4:	e00a      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
 80018e8:	e008      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018ea:	bf00      	nop
 80018ec:	e006      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018ee:	bf00      	nop
 80018f0:	e004      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018f2:	bf00      	nop
 80018f4:	e002      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;   
 80018f6:	bf00      	nop
 80018f8:	e000      	b.n	80018fc <DMA_CheckFifoParam+0xe8>
      break;
 80018fa:	bf00      	nop
    }
  } 
  
  return status; 
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	e175      	b.n	8001c18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8164 	bne.w	8001c12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d005      	beq.n	8001962 <HAL_GPIO_Init+0x56>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d130      	bne.n	80019c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 0201 	and.w	r2, r3, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d017      	beq.n	8001a00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d123      	bne.n	8001a54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80be 	beq.w	8001c12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b66      	ldr	r3, [pc, #408]	; (8001c30 <HAL_GPIO_Init+0x324>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a65      	ldr	r2, [pc, #404]	; (8001c30 <HAL_GPIO_Init+0x324>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_GPIO_Init+0x324>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aae:	4a61      	ldr	r2, [pc, #388]	; (8001c34 <HAL_GPIO_Init+0x328>)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <HAL_GPIO_Init+0x32c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d037      	beq.n	8001b4a <HAL_GPIO_Init+0x23e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a57      	ldr	r2, [pc, #348]	; (8001c3c <HAL_GPIO_Init+0x330>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d031      	beq.n	8001b46 <HAL_GPIO_Init+0x23a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a56      	ldr	r2, [pc, #344]	; (8001c40 <HAL_GPIO_Init+0x334>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d02b      	beq.n	8001b42 <HAL_GPIO_Init+0x236>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a55      	ldr	r2, [pc, #340]	; (8001c44 <HAL_GPIO_Init+0x338>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d025      	beq.n	8001b3e <HAL_GPIO_Init+0x232>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a54      	ldr	r2, [pc, #336]	; (8001c48 <HAL_GPIO_Init+0x33c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01f      	beq.n	8001b3a <HAL_GPIO_Init+0x22e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a53      	ldr	r2, [pc, #332]	; (8001c4c <HAL_GPIO_Init+0x340>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d019      	beq.n	8001b36 <HAL_GPIO_Init+0x22a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <HAL_GPIO_Init+0x344>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_GPIO_Init+0x226>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a51      	ldr	r2, [pc, #324]	; (8001c54 <HAL_GPIO_Init+0x348>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00d      	beq.n	8001b2e <HAL_GPIO_Init+0x222>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a50      	ldr	r2, [pc, #320]	; (8001c58 <HAL_GPIO_Init+0x34c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0x21e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <HAL_GPIO_Init+0x350>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_GPIO_Init+0x21a>
 8001b22:	2309      	movs	r3, #9
 8001b24:	e012      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b26:	230a      	movs	r3, #10
 8001b28:	e010      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	e00e      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b2e:	2307      	movs	r3, #7
 8001b30:	e00c      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b32:	2306      	movs	r3, #6
 8001b34:	e00a      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b36:	2305      	movs	r3, #5
 8001b38:	e008      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e006      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e004      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b42:	2302      	movs	r3, #2
 8001b44:	e002      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_GPIO_Init+0x240>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	f002 0203 	and.w	r2, r2, #3
 8001b52:	0092      	lsls	r2, r2, #2
 8001b54:	4093      	lsls	r3, r2
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b5c:	4935      	ldr	r1, [pc, #212]	; (8001c34 <HAL_GPIO_Init+0x328>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_GPIO_Init+0x354>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b8e:	4a34      	ldr	r2, [pc, #208]	; (8001c60 <HAL_GPIO_Init+0x354>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b94:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <HAL_GPIO_Init+0x354>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb8:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <HAL_GPIO_Init+0x354>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bbe:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_GPIO_Init+0x354>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be2:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <HAL_GPIO_Init+0x354>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_GPIO_Init+0x354>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <HAL_GPIO_Init+0x354>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3301      	adds	r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b0f      	cmp	r3, #15
 8001c1c:	f67f ae86 	bls.w	800192c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020800 	.word	0x40020800
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40021400 	.word	0x40021400
 8001c50:	40021800 	.word	0x40021800
 8001c54:	40021c00 	.word	0x40021c00
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40022400 	.word	0x40022400
 8001c60:	40013c00 	.word	0x40013c00

08001c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	887b      	ldrh	r3, [r7, #2]
 8001c76:	4013      	ands	r3, r2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
 8001c80:	e001      	b.n	8001c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_PWREx_EnableOverDrive+0x98>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc2:	f7ff f93b 	bl	8000f3c <HAL_GetTick>
 8001cc6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cc8:	e009      	b.n	8001cde <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cca:	f7ff f937 	bl	8000f3c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cd8:	d901      	bls.n	8001cde <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e022      	b.n	8001d24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cea:	d1ee      	bne.n	8001cca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf8:	f7ff f920 	bl	8000f3c <HAL_GetTick>
 8001cfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cfe:	e009      	b.n	8001d14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d00:	f7ff f91c 	bl	8000f3c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d0e:	d901      	bls.n	8001d14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e007      	b.n	8001d24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d20:	d1ee      	bne.n	8001d00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e291      	b.n	800226e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8087 	beq.w	8001e66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d58:	4b96      	ldr	r3, [pc, #600]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d00c      	beq.n	8001d7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d64:	4b93      	ldr	r3, [pc, #588]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d112      	bne.n	8001d96 <HAL_RCC_OscConfig+0x62>
 8001d70:	4b90      	ldr	r3, [pc, #576]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7c:	d10b      	bne.n	8001d96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7e:	4b8d      	ldr	r3, [pc, #564]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d06c      	beq.n	8001e64 <HAL_RCC_OscConfig+0x130>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d168      	bne.n	8001e64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e26b      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x7a>
 8001da0:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a83      	ldr	r2, [pc, #524]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	e02e      	b.n	8001e0c <HAL_RCC_OscConfig+0xd8>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x9c>
 8001db6:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7e      	ldr	r2, [pc, #504]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b7c      	ldr	r3, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7b      	ldr	r2, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01d      	b.n	8001e0c <HAL_RCC_OscConfig+0xd8>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0xc0>
 8001dda:	4b76      	ldr	r3, [pc, #472]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a75      	ldr	r2, [pc, #468]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b73      	ldr	r3, [pc, #460]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a72      	ldr	r2, [pc, #456]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xd8>
 8001df4:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b6c      	ldr	r3, [pc, #432]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6b      	ldr	r2, [pc, #428]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f892 	bl	8000f3c <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff f88e 	bl	8000f3c <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e21f      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0xe8>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff f87e 	bl	8000f3c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff f87a 	bl	8000f3c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e20b      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x110>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d069      	beq.n	8001f46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e72:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d11c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x190>
 8001e8a:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d116      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x17a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e1df      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	493d      	ldr	r1, [pc, #244]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	e040      	b.n	8001f46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d023      	beq.n	8001f14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ecc:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a38      	ldr	r2, [pc, #224]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f830 	bl	8000f3c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff f82c 	bl	8000f3c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1bd      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	4b30      	ldr	r3, [pc, #192]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4929      	ldr	r1, [pc, #164]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
 8001f12:	e018      	b.n	8001f46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a26      	ldr	r2, [pc, #152]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f1a:	f023 0301 	bic.w	r3, r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff f80c 	bl	8000f3c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7ff f808 	bl	8000f3c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e199      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d038      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d019      	beq.n	8001f8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5e:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7fe ffe9 	bl	8000f3c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7fe ffe5 	bl	8000f3c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e176      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x23a>
 8001f8c:	e01a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f92:	4a08      	ldr	r2, [pc, #32]	; (8001fb4 <HAL_RCC_OscConfig+0x280>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9a:	f7fe ffcf 	bl	8000f3c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa2:	f7fe ffcb 	bl	8000f3c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d903      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e15c      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
 8001fb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	4b91      	ldr	r3, [pc, #580]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8001fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ee      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80a4 	beq.w	800211a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b8b      	ldr	r3, [pc, #556]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a87      	ldr	r2, [pc, #540]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b85      	ldr	r3, [pc, #532]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffa:	4b82      	ldr	r3, [pc, #520]	; (8002204 <HAL_RCC_OscConfig+0x4d0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002006:	4b7f      	ldr	r3, [pc, #508]	; (8002204 <HAL_RCC_OscConfig+0x4d0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a7e      	ldr	r2, [pc, #504]	; (8002204 <HAL_RCC_OscConfig+0x4d0>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7fe ff93 	bl	8000f3c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7fe ff8f 	bl	8000f3c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e120      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202c:	4b75      	ldr	r3, [pc, #468]	; (8002204 <HAL_RCC_OscConfig+0x4d0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x31a>
 8002040:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
 800204c:	e02d      	b.n	80020aa <HAL_RCC_OscConfig+0x376>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x33c>
 8002056:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a69      	ldr	r2, [pc, #420]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
 8002062:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a66      	ldr	r2, [pc, #408]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
 800206e:	e01c      	b.n	80020aa <HAL_RCC_OscConfig+0x376>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b05      	cmp	r3, #5
 8002076:	d10c      	bne.n	8002092 <HAL_RCC_OscConfig+0x35e>
 8002078:	4b61      	ldr	r3, [pc, #388]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	4a60      	ldr	r2, [pc, #384]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6713      	str	r3, [r2, #112]	; 0x70
 8002084:	4b5e      	ldr	r3, [pc, #376]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	4a5d      	ldr	r2, [pc, #372]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6713      	str	r3, [r2, #112]	; 0x70
 8002090:	e00b      	b.n	80020aa <HAL_RCC_OscConfig+0x376>
 8002092:	4b5b      	ldr	r3, [pc, #364]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a5a      	ldr	r2, [pc, #360]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
 800209e:	4b58      	ldr	r3, [pc, #352]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a2:	4a57      	ldr	r2, [pc, #348]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d015      	beq.n	80020de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7fe ff43 	bl	8000f3c <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe ff3f 	bl	8000f3c <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0ce      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ee      	beq.n	80020ba <HAL_RCC_OscConfig+0x386>
 80020dc:	e014      	b.n	8002108 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7fe ff2d 	bl	8000f3c <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe ff29 	bl	8000f3c <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fc:	4b40      	ldr	r3, [pc, #256]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ee      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a3b      	ldr	r2, [pc, #236]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 80a4 	beq.w	800226c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002124:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d06b      	beq.n	8002208 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d149      	bne.n	80021cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a30      	ldr	r2, [pc, #192]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 800213e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7fe fefa 	bl	8000f3c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7fe fef6 	bl	8000f3c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e087      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	041b      	lsls	r3, r3, #16
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	4313      	orrs	r3, r2
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 8002192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002196:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a18      	ldr	r2, [pc, #96]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe feca 	bl	8000f3c <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe fec6 	bl	8000f3c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e057      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x478>
 80021ca:	e04f      	b.n	800226c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80021d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe feb0 	bl	8000f3c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe feac 	bl	8000f3c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e03d      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_OscConfig+0x4cc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x4ac>
 80021fe:	e035      	b.n	800226c <HAL_RCC_OscConfig+0x538>
 8002200:	40023800 	.word	0x40023800
 8002204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x544>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d028      	beq.n	8002268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d121      	bne.n	8002268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d11a      	bne.n	8002268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002238:	4013      	ands	r3, r2
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800223e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002240:	4293      	cmp	r3, r2
 8002242:	d111      	bne.n	8002268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d107      	bne.n	8002268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0d0      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b6a      	ldr	r3, [pc, #424]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d910      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b67      	ldr	r3, [pc, #412]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 020f 	bic.w	r2, r3, #15
 80022aa:	4965      	ldr	r1, [pc, #404]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0b8      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022dc:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a58      	ldr	r2, [pc, #352]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 80022e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f4:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4a52      	ldr	r2, [pc, #328]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	4b50      	ldr	r3, [pc, #320]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	494d      	ldr	r1, [pc, #308]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d040      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b47      	ldr	r3, [pc, #284]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d115      	bne.n	800235e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e07f      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e073      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06b      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4936      	ldr	r1, [pc, #216]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002370:	f7fe fde4 	bl	8000f3c <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7fe fde0 	bl	8000f3c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e053      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b27      	ldr	r3, [pc, #156]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d210      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 020f 	bic.w	r2, r3, #15
 80023b6:	4922      	ldr	r1, [pc, #136]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e032      	b.n	8002436 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4916      	ldr	r1, [pc, #88]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	490e      	ldr	r1, [pc, #56]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800240e:	f000 f821 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002412:	4602      	mov	r2, r0
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	490a      	ldr	r1, [pc, #40]	; (8002448 <HAL_RCC_ClockConfig+0x1cc>)
 8002420:	5ccb      	ldrb	r3, [r1, r3]
 8002422:	fa22 f303 	lsr.w	r3, r2, r3
 8002426:	4a09      	ldr	r2, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1d0>)
 8002428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_ClockConfig+0x1d4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fd40 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023c00 	.word	0x40023c00
 8002444:	40023800 	.word	0x40023800
 8002448:	08008950 	.word	0x08008950
 800244c:	20000000 	.word	0x20000000
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002458:	b090      	sub	sp, #64	; 0x40
 800245a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
 8002460:	2300      	movs	r3, #0
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002464:	2300      	movs	r3, #0
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800246c:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d00d      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x40>
 8002478:	2b08      	cmp	r3, #8
 800247a:	f200 80a1 	bhi.w	80025c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x34>
 8002482:	2b04      	cmp	r3, #4
 8002484:	d003      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0x3a>
 8002486:	e09b      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800248a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800248c:	e09b      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800248e:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002492:	e098      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002494:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800249e:	4b4d      	ldr	r3, [pc, #308]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d028      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024aa:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	099b      	lsrs	r3, r3, #6
 80024b0:	2200      	movs	r2, #0
 80024b2:	623b      	str	r3, [r7, #32]
 80024b4:	627a      	str	r2, [r7, #36]	; 0x24
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024bc:	2100      	movs	r1, #0
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_GetSysClockFreq+0x188>)
 80024c0:	fb03 f201 	mul.w	r2, r3, r1
 80024c4:	2300      	movs	r3, #0
 80024c6:	fb00 f303 	mul.w	r3, r0, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	4a43      	ldr	r2, [pc, #268]	; (80025dc <HAL_RCC_GetSysClockFreq+0x188>)
 80024ce:	fba0 1202 	umull	r1, r2, r0, r2
 80024d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024d4:	460a      	mov	r2, r1
 80024d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80024d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024da:	4413      	add	r3, r2
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	2200      	movs	r2, #0
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	61fa      	str	r2, [r7, #28]
 80024e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024ee:	f7fd fee7 	bl	80002c0 <__aeabi_uldivmod>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4613      	mov	r3, r2
 80024f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fa:	e053      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fc:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	2200      	movs	r2, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	617a      	str	r2, [r7, #20]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800250e:	f04f 0b00 	mov.w	fp, #0
 8002512:	4652      	mov	r2, sl
 8002514:	465b      	mov	r3, fp
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	0159      	lsls	r1, r3, #5
 8002520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002524:	0150      	lsls	r0, r2, #5
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	ebb2 080a 	subs.w	r8, r2, sl
 800252e:	eb63 090b 	sbc.w	r9, r3, fp
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800253e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002542:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002546:	ebb2 0408 	subs.w	r4, r2, r8
 800254a:	eb63 0509 	sbc.w	r5, r3, r9
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	00eb      	lsls	r3, r5, #3
 8002558:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800255c:	00e2      	lsls	r2, r4, #3
 800255e:	4614      	mov	r4, r2
 8002560:	461d      	mov	r5, r3
 8002562:	eb14 030a 	adds.w	r3, r4, sl
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	eb45 030b 	adc.w	r3, r5, fp
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800257a:	4629      	mov	r1, r5
 800257c:	028b      	lsls	r3, r1, #10
 800257e:	4621      	mov	r1, r4
 8002580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002584:	4621      	mov	r1, r4
 8002586:	028a      	lsls	r2, r1, #10
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258e:	2200      	movs	r2, #0
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	60fa      	str	r2, [r7, #12]
 8002594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002598:	f7fd fe92 	bl	80002c0 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	3301      	adds	r3, #1
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80025b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025be:	e002      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80025c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3740      	adds	r7, #64	; 0x40
 80025cc:	46bd      	mov	sp, r7
 80025ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	017d7840 	.word	0x017d7840

080025e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d012      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002608:	4b69      	ldr	r3, [pc, #420]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a68      	ldr	r2, [pc, #416]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800260e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002612:	6093      	str	r3, [r2, #8]
 8002614:	4b66      	ldr	r3, [pc, #408]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261c:	4964      	ldr	r1, [pc, #400]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800262a:	2301      	movs	r3, #1
 800262c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d017      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002640:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	4959      	ldr	r1, [pc, #356]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002658:	d101      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800265a:	2301      	movs	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002666:	2301      	movs	r3, #1
 8002668:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d017      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002676:	4b4e      	ldr	r3, [pc, #312]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800267c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	494a      	ldr	r1, [pc, #296]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002694:	d101      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002696:	2301      	movs	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 808b 	beq.w	80027da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026c4:	4b3a      	ldr	r3, [pc, #232]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	4a39      	ldr	r2, [pc, #228]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6413      	str	r3, [r2, #64]	; 0x40
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e8:	f7fe fc28 	bl	8000f3c <HAL_GetTick>
 80026ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fc24 	bl	8000f3c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e357      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002716:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d035      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	429a      	cmp	r2, r3
 800272a:	d02e      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002734:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d114      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002760:	f7fe fbec 	bl	8000f3c <HAL_GetTick>
 8002764:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe fbe8 	bl	8000f3c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e319      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ee      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002796:	d111      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027a6:	400b      	ands	r3, r1
 80027a8:	4901      	ldr	r1, [pc, #4]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000
 80027b8:	0ffffcff 	.word	0x0ffffcff
 80027bc:	4baa      	ldr	r3, [pc, #680]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4aa9      	ldr	r2, [pc, #676]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027c6:	6093      	str	r3, [r2, #8]
 80027c8:	4ba7      	ldr	r3, [pc, #668]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	49a4      	ldr	r1, [pc, #656]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d010      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027e6:	4ba0      	ldr	r3, [pc, #640]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ec:	4a9e      	ldr	r2, [pc, #632]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027f6:	4b9c      	ldr	r3, [pc, #624]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	4999      	ldr	r1, [pc, #612]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002814:	4b94      	ldr	r3, [pc, #592]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002822:	4991      	ldr	r1, [pc, #580]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002836:	4b8c      	ldr	r3, [pc, #560]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002844:	4988      	ldr	r1, [pc, #544]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002858:	4b83      	ldr	r3, [pc, #524]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002866:	4980      	ldr	r1, [pc, #512]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800287a:	4b7b      	ldr	r3, [pc, #492]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	4977      	ldr	r1, [pc, #476]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800289c:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	496f      	ldr	r1, [pc, #444]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028be:	4b6a      	ldr	r3, [pc, #424]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	f023 020c 	bic.w	r2, r3, #12
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028cc:	4966      	ldr	r1, [pc, #408]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028e0:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	495e      	ldr	r1, [pc, #376]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002902:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002908:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002910:	4955      	ldr	r1, [pc, #340]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002924:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	494d      	ldr	r1, [pc, #308]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002946:	4b48      	ldr	r3, [pc, #288]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	4944      	ldr	r1, [pc, #272]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002968:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	493c      	ldr	r1, [pc, #240]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002990:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002998:	4933      	ldr	r1, [pc, #204]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029ac:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ba:	492b      	ldr	r1, [pc, #172]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d011      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029ce:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029dc:	4922      	ldr	r1, [pc, #136]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ec:	d101      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	4912      	ldr	r1, [pc, #72]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00b      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a40:	4909      	ldr	r1, [pc, #36]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d006      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80d9 	beq.w	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a5c:	4b02      	ldr	r3, [pc, #8]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a01      	ldr	r2, [pc, #4]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a66:	e001      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6e:	f7fe fa65 	bl	8000f3c <HAL_GetTick>
 8002a72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a76:	f7fe fa61 	bl	8000f3c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	; 0x64
 8002a82:	d901      	bls.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e194      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a88:	4b6c      	ldr	r3, [pc, #432]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d021      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11d      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002aa8:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ab6:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abc:	0e1b      	lsrs	r3, r3, #24
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	019a      	lsls	r2, r3, #6
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	061b      	lsls	r3, r3, #24
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	071b      	lsls	r3, r3, #28
 8002adc:	4957      	ldr	r1, [pc, #348]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d02e      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b0e:	d129      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b10:	4b4a      	ldr	r3, [pc, #296]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b1e:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b24:	0f1b      	lsrs	r3, r3, #28
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	019a      	lsls	r2, r3, #6
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	041b      	lsls	r3, r3, #16
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	071b      	lsls	r3, r3, #28
 8002b44:	493d      	ldr	r1, [pc, #244]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b52:	f023 021f 	bic.w	r2, r3, #31
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	4937      	ldr	r1, [pc, #220]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01d      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b76:	0e1b      	lsrs	r3, r3, #24
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b84:	0f1b      	lsrs	r3, r3, #28
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	019a      	lsls	r2, r3, #6
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	041b      	lsls	r3, r3, #16
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	071b      	lsls	r3, r3, #28
 8002ba4:	4925      	ldr	r1, [pc, #148]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d011      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	019a      	lsls	r2, r3, #6
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	061b      	lsls	r3, r3, #24
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	071b      	lsls	r3, r3, #28
 8002bd4:	4919      	ldr	r1, [pc, #100]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bdc:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe f9a8 	bl	8000f3c <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bf0:	f7fe f9a4 	bl	8000f3c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0d7      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f040 80cd 	bne.w	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c22:	f7fe f98b 	bl	8000f3c <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c2a:	f7fe f987 	bl	8000f3c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b64      	cmp	r3, #100	; 0x64
 8002c36:	d903      	bls.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e0ba      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4c:	d0ed      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d02e      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d12a      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c76:	4b51      	ldr	r3, [pc, #324]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c84:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	0f1b      	lsrs	r3, r3, #28
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	019a      	lsls	r2, r3, #6
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	061b      	lsls	r3, r3, #24
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	071b      	lsls	r3, r3, #28
 8002caa:	4944      	ldr	r1, [pc, #272]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cb2:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	493d      	ldr	r1, [pc, #244]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d022      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce0:	d11d      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ce2:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	0e1b      	lsrs	r3, r3, #24
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cf0:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	0f1b      	lsrs	r3, r3, #28
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	019a      	lsls	r2, r3, #6
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	071b      	lsls	r3, r3, #28
 8002d16:	4929      	ldr	r1, [pc, #164]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d028      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	0e1b      	lsrs	r3, r3, #24
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	0c1b      	lsrs	r3, r3, #16
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	019a      	lsls	r2, r3, #6
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	041b      	lsls	r3, r3, #16
 8002d50:	431a      	orrs	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	071b      	lsls	r3, r3, #28
 8002d5e:	4917      	ldr	r1, [pc, #92]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	4911      	ldr	r1, [pc, #68]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a0e      	ldr	r2, [pc, #56]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d88:	f7fe f8d8 	bl	8000f3c <HAL_GetTick>
 8002d8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d90:	f7fe f8d4 	bl	8000f3c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e007      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002da2:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dae:	d1ef      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e022      	b.n	8002e18 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fd fe6d 	bl	8000ac4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f814 	bl	8002e20 <HAL_SD_InitCard>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00a      	b.n	8002e18 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e20:	b5b0      	push	{r4, r5, r7, lr}
 8002e22:	b08e      	sub	sp, #56	; 0x38
 8002e24:	af04      	add	r7, sp, #16
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002e3c:	2376      	movs	r3, #118	; 0x76
 8002e3e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681d      	ldr	r5, [r3, #0]
 8002e44:	466c      	mov	r4, sp
 8002e46:	f107 0314 	add.w	r3, r7, #20
 8002e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e58:	4628      	mov	r0, r5
 8002e5a:	f001 fadd 	bl	8004418 <SDMMC_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e059      	b.n	8002f24 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e7e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 fb11 	bl	80044ac <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e98:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002e9a:	2002      	movs	r0, #2
 8002e9c:	f7fe f85a 	bl	8000f54 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fff3 	bl	8003e8c <SD_PowerON>
 8002ea6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e02e      	b.n	8002f24 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 ff12 	bl	8003cf0 <SD_InitCard>
 8002ecc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e01b      	b.n	8002f24 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 fb6b 	bl	80045d0 <SDMMC_CmdBlockLength>
 8002efa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00f      	beq.n	8002f22 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_SD_InitCard+0x10c>)
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3728      	adds	r7, #40	; 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f2c:	004005ff 	.word	0x004005ff

08002f30 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	; 0x30
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0c3      	b.n	80030e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 80bc 	bne.w	80030de <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	441a      	add	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d907      	bls.n	8002f8a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0aa      	b.n	80030e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8002fa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a4e      	ldr	r2, [pc, #312]	; (80030e8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a4d      	ldr	r2, [pc, #308]	; (80030ec <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002fb8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3380      	adds	r3, #128	; 0x80
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	025b      	lsls	r3, r3, #9
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	f7fe f98f 	bl	800131c <HAL_DMA_Start_IT>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d017      	beq.n	8003034 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003012:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a35      	ldr	r2, [pc, #212]	; (80030f0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e055      	b.n	80030e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0208 	orr.w	r2, r2, #8
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	2b01      	cmp	r3, #1
 800304a:	d002      	beq.n	8003052 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304e:	025b      	lsls	r3, r3, #9
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	025b      	lsls	r3, r3, #9
 800305c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800305e:	2390      	movs	r3, #144	; 0x90
 8003060:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003062:	2302      	movs	r3, #2
 8003064:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003066:	2300      	movs	r3, #0
 8003068:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800306a:	2301      	movs	r3, #1
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f107 0210 	add.w	r2, r7, #16
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fa7d 	bl	8004578 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d90a      	bls.n	800309a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2282      	movs	r2, #130	; 0x82
 8003088:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003090:	4618      	mov	r0, r3
 8003092:	f001 fae1 	bl	8004658 <SDMMC_CmdReadMultiBlock>
 8003096:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003098:	e009      	b.n	80030ae <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2281      	movs	r2, #129	; 0x81
 800309e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fab4 	bl	8004614 <SDMMC_CmdReadSingleBlock>
 80030ac:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d012      	beq.n	80030da <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	431a      	orrs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e002      	b.n	80030e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3730      	adds	r7, #48	; 0x30
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	08003aff 	.word	0x08003aff
 80030ec:	08003b71 	.word	0x08003b71
 80030f0:	004005ff 	.word	0x004005ff

080030f4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08c      	sub	sp, #48	; 0x30
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0c6      	b.n	80032aa <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	f040 80bf 	bne.w	80032a8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	441a      	add	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	429a      	cmp	r2, r3
 800313c:	d907      	bls.n	800314e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0ad      	b.n	80032aa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2203      	movs	r2, #3
 8003152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 021a 	orr.w	r2, r2, #26
 800316c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	4a50      	ldr	r2, [pc, #320]	; (80032b4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003174:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	4a4f      	ldr	r2, [pc, #316]	; (80032b8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800317c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2200      	movs	r2, #0
 8003184:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	2b01      	cmp	r3, #1
 800318c:	d002      	beq.n	8003194 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	025b      	lsls	r3, r3, #9
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d90a      	bls.n	80031b0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	22a0      	movs	r2, #160	; 0xa0
 800319e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 fa9a 	bl	80046e0 <SDMMC_CmdWriteMultiBlock>
 80031ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80031ae:	e009      	b.n	80031c4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2290      	movs	r2, #144	; 0x90
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 fa6d 	bl	800469c <SDMMC_CmdWriteSingleBlock>
 80031c2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d012      	beq.n	80031f0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e05c      	b.n	80032aa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0208 	orr.w	r2, r2, #8
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3380      	adds	r3, #128	; 0x80
 8003230:	461a      	mov	r2, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	025b      	lsls	r3, r3, #9
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	f7fe f870 	bl	800131c <HAL_DMA_Start_IT>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 021a 	bic.w	r2, r2, #26
 8003250:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e018      	b.n	80032aa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	025b      	lsls	r3, r3, #9
 8003282:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003284:	2390      	movs	r3, #144	; 0x90
 8003286:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800328c:	2300      	movs	r3, #0
 800328e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003290:	2301      	movs	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f107 0210 	add.w	r2, r7, #16
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 f96a 	bl	8004578 <SDMMC_ConfigData>

      return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3730      	adds	r7, #48	; 0x30
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	08003ad5 	.word	0x08003ad5
 80032b8:	08003b71 	.word	0x08003b71
 80032bc:	004005ff 	.word	0x004005ff

080032c0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_SD_IRQHandler+0x2e>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 ffef 	bl	80042ca <SD_Read_IT>
 80032ec:	e15a      	b.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 808d 	beq.w	8003418 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003306:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b9a      	ldr	r3, [pc, #616]	; (800357c <HAL_SD_IRQHandler+0x2bc>)
 8003314:	400b      	ands	r3, r1
 8003316:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d039      	beq.n	80033a6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <HAL_SD_IRQHandler+0x86>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d011      	beq.n	800336a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f001 f9ea 	bl	8004724 <SDMMC_CmdStopTransfer>
 8003350:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f921 	bl	80035ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003372:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <HAL_SD_IRQHandler+0xd6>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f001 fe5a 	bl	8005050 <HAL_SD_RxCpltCallback>
 800339c:	e102      	b.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f001 fe4c 	bl	800503c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80033a4:	e0fe      	b.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80f9 	beq.w	80035a4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d011      	beq.n	80033e0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f001 f9af 	bl	8004724 <SDMMC_CmdStopTransfer>
 80033c6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8e6 	bl	80035ac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 80dc 	bne.w	80035a4 <HAL_SD_IRQHandler+0x2e4>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f040 80d6 	bne.w	80035a4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0208 	bic.w	r2, r2, #8
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f001 fe13 	bl	800503c <HAL_SD_TxCpltCallback>
}
 8003416:	e0c5      	b.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_SD_IRQHandler+0x178>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 ff9b 	bl	800436c <SD_Write_IT>
 8003436:	e0b5      	b.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80ae 	beq.w	80035a4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	f043 0202 	orr.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	f043 0208 	orr.w	r2, r3, #8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	f043 0210 	orr.w	r2, r3, #16
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f240 523a 	movw	r2, #1338	; 0x53a
 80034b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80034c8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 f928 	bl	8004724 <SDMMC_CmdStopTransfer>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f857 	bl	80035ac <HAL_SD_ErrorCallback>
}
 80034fe:	e051      	b.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d04c      	beq.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <HAL_SD_IRQHandler+0x25e>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d011      	beq.n	8003542 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	4a17      	ldr	r2, [pc, #92]	; (8003580 <HAL_SD_IRQHandler+0x2c0>)
 8003524:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd ff56 	bl	80013dc <HAL_DMA_Abort_IT>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d036      	beq.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fb6a 	bl	8003c14 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003540:	e030      	b.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d104      	bne.n	8003556 <HAL_SD_IRQHandler+0x296>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d018      	beq.n	8003588 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <HAL_SD_IRQHandler+0x2c4>)
 800355c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd ff3a 	bl	80013dc <HAL_DMA_Abort_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01a      	beq.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fb85 	bl	8003c82 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003578:	e014      	b.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
 800357a:	bf00      	nop
 800357c:	ffff3ec5 	.word	0xffff3ec5
 8003580:	08003c15 	.word	0x08003c15
 8003584:	08003c83 	.word	0x08003c83
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f001 fd43 	bl	8005028 <HAL_SD_AbortCallback>
}
 80035a2:	e7ff      	b.n	80035a4 <HAL_SD_IRQHandler+0x2e4>
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ce:	0f9b      	lsrs	r3, r3, #30
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035da:	0e9b      	lsrs	r3, r3, #26
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ec:	0e1b      	lsrs	r3, r3, #24
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035fe:	0c1b      	lsrs	r3, r3, #16
 8003600:	b2da      	uxtb	r2, r3
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	b2da      	uxtb	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003616:	b2da      	uxtb	r2, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003620:	0d1b      	lsrs	r3, r3, #20
 8003622:	b29a      	uxth	r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800362c:	0c1b      	lsrs	r3, r3, #16
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	b2da      	uxtb	r2, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800363e:	0bdb      	lsrs	r3, r3, #15
 8003640:	b2db      	uxtb	r3, r3
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	b2da      	uxtb	r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003650:	0b9b      	lsrs	r3, r3, #14
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	b2da      	uxtb	r2, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003662:	0b5b      	lsrs	r3, r3, #13
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	b2da      	uxtb	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003674:	0b1b      	lsrs	r3, r3, #12
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2200      	movs	r2, #0
 8003686:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	2b00      	cmp	r3, #0
 800368e:	d163      	bne.n	8003758 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	f640 73fc 	movw	r3, #4092	; 0xffc
 800369a:	4013      	ands	r3, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80036a0:	0f92      	lsrs	r2, r2, #30
 80036a2:	431a      	orrs	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ac:	0edb      	lsrs	r3, r3, #27
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036be:	0e1b      	lsrs	r3, r3, #24
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d0:	0d5b      	lsrs	r3, r3, #21
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e2:	0c9b      	lsrs	r3, r3, #18
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f4:	0bdb      	lsrs	r3, r3, #15
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	7e1b      	ldrb	r3, [r3, #24]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	3302      	adds	r3, #2
 8003718:	2201      	movs	r2, #1
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003722:	fb03 f202 	mul.w	r2, r3, r2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	7a1b      	ldrb	r3, [r3, #8]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	2201      	movs	r2, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003744:	0a52      	lsrs	r2, r2, #9
 8003746:	fb03 f202 	mul.w	r2, r3, r2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003754:	661a      	str	r2, [r3, #96]	; 0x60
 8003756:	e031      	b.n	80037bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	2b01      	cmp	r3, #1
 800375e:	d11d      	bne.n	800379c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	431a      	orrs	r2, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	3301      	adds	r3, #1
 800377c:	029a      	lsls	r2, r3, #10
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003790:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	661a      	str	r2, [r3, #96]	; 0x60
 800379a:	e00f      	b.n	80037bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a58      	ldr	r2, [pc, #352]	; (8003904 <HAL_SD_GetCardCSD+0x344>)
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e09d      	b.n	80038f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c0:	0b9b      	lsrs	r3, r3, #14
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d2:	09db      	lsrs	r3, r3, #7
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	0fdb      	lsrs	r3, r3, #31
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	0f5b      	lsrs	r3, r3, #29
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	b2da      	uxtb	r2, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	0e9b      	lsrs	r3, r3, #26
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	b2da      	uxtb	r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	0d9b      	lsrs	r3, r3, #22
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	b2da      	uxtb	r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	0d5b      	lsrs	r3, r3, #21
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	0c1b      	lsrs	r3, r3, #16
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	b2da      	uxtb	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	0bdb      	lsrs	r3, r3, #15
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	0b9b      	lsrs	r3, r3, #14
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	b2da      	uxtb	r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	b2db      	uxtb	r3, r3
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	b2da      	uxtb	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	0b1b      	lsrs	r3, r3, #12
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	0a9b      	lsrs	r3, r3, #10
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	004005ff 	.word	0x004005ff

08003908 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003960:	b5b0      	push	{r4, r5, r7, lr}
 8003962:	b08e      	sub	sp, #56	; 0x38
 8003964:	af04      	add	r7, sp, #16
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2203      	movs	r2, #3
 8003974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	2b03      	cmp	r3, #3
 800397e:	d02e      	beq.n	80039de <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003986:	d106      	bne.n	8003996 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
 8003994:	e029      	b.n	80039ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399c:	d10a      	bne.n	80039b4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fb2a 	bl	8003ff8 <SD_WideBus_Enable>
 80039a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
 80039b2:	e01a      	b.n	80039ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fb67 	bl	800408e <SD_WideBus_Disable>
 80039c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
 80039ce:	e00c      	b.n	80039ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38
 80039dc:	e005      	b.n	80039ea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a26      	ldr	r2, [pc, #152]	; (8003a90 <HAL_SD_ConfigWideBusOperation+0x130>)
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a08:	e01f      	b.n	8003a4a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681d      	ldr	r5, [r3, #0]
 8003a30:	466c      	mov	r4, sp
 8003a32:	f107 0314 	add.w	r3, r7, #20
 8003a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a3e:	f107 0308 	add.w	r3, r7, #8
 8003a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 fce7 	bl	8004418 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fdbc 	bl	80045d0 <SDMMC_CmdBlockLength>
 8003a58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00c      	beq.n	8003a7a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003a66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003a82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3728      	adds	r7, #40	; 0x28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	004005ff 	.word	0x004005ff

08003a94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa7e 	bl	8003fa8 <SD_SendStatus>
 8003aac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	0a5b      	lsrs	r3, r3, #9
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003aca:	693b      	ldr	r3, [r7, #16]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	2b82      	cmp	r3, #130	; 0x82
 8003b12:	d111      	bne.n	8003b38 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fe03 	bl	8004724 <SDMMC_CmdStopTransfer>
 8003b1e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff fd3a 	bl	80035ac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0208 	bic.w	r2, r2, #8
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f001 fa75 	bl	8005050 <HAL_SD_RxCpltCallback>
#endif
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd fdd8 	bl	8001734 <HAL_DMA_GetError>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d03e      	beq.n	8003c08 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b90:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d002      	beq.n	8003ba6 <SD_DMAError+0x36>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d12d      	bne.n	8003c02 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <SD_DMAError+0xa0>)
 8003bac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003bca:	6978      	ldr	r0, [r7, #20]
 8003bcc:	f7ff ff62 	bl	8003a94 <HAL_SD_GetCardState>
 8003bd0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	d002      	beq.n	8003bde <SD_DMAError+0x6e>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d10a      	bne.n	8003bf4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fd9e 	bl	8004724 <SDMMC_CmdStopTransfer>
 8003be8:	4602      	mov	r2, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003c02:	6978      	ldr	r0, [r7, #20]
 8003c04:	f7ff fcd2 	bl	80035ac <HAL_SD_ErrorCallback>
#endif
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	004005ff 	.word	0x004005ff

08003c14 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff ff31 	bl	8003a94 <HAL_SD_GetCardState>
 8003c32:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b06      	cmp	r3, #6
 8003c46:	d002      	beq.n	8003c4e <SD_DMATxAbort+0x3a>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d10a      	bne.n	8003c64 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fd66 	bl	8004724 <SDMMC_CmdStopTransfer>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f001 f9db 	bl	8005028 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003c72:	e002      	b.n	8003c7a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff fc99 	bl	80035ac <HAL_SD_ErrorCallback>
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f7ff fefa 	bl	8003a94 <HAL_SD_GetCardState>
 8003ca0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d002      	beq.n	8003cbc <SD_DMARxAbort+0x3a>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	d10a      	bne.n	8003cd2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fd2f 	bl	8004724 <SDMMC_CmdStopTransfer>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f001 f9a4 	bl	8005028 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003ce0:	e002      	b.n	8003ce8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fc62 	bl	80035ac <HAL_SD_ErrorCallback>
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003cf0:	b5b0      	push	{r4, r5, r7, lr}
 8003cf2:	b094      	sub	sp, #80	; 0x50
 8003cf4:	af04      	add	r7, sp, #16
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fbe1 	bl	80044c8 <SDMMC_GetPowerState>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d10:	e0b8      	b.n	8003e84 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d02f      	beq.n	8003d7a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fe0b 	bl	800493a <SDMMC_CmdSendCID>
 8003d24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <SD_InitCard+0x40>
    {
      return errorstate;
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	e0a9      	b.n	8003e84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fc0b 	bl	8004552 <SDMMC_GetResponse>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2104      	movs	r1, #4
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fc02 	bl	8004552 <SDMMC_GetResponse>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2108      	movs	r1, #8
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fbf9 	bl	8004552 <SDMMC_GetResponse>
 8003d60:	4602      	mov	r2, r0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	210c      	movs	r1, #12
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fbf0 	bl	8004552 <SDMMC_GetResponse>
 8003d72:	4602      	mov	r2, r0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d00d      	beq.n	8003d9e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f107 020e 	add.w	r2, r7, #14
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fe11 	bl	80049b4 <SDMMC_CmdSetRelAdd>
 8003d92:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <SD_InitCard+0xae>
    {
      return errorstate;
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9c:	e072      	b.n	8003e84 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d036      	beq.n	8003e14 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003da6:	89fb      	ldrh	r3, [r7, #14]
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f000 fddb 	bl	8004976 <SDMMC_CmdSendCSD>
 8003dc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <SD_InitCard+0xdc>
    {
      return errorstate;
 8003dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dca:	e05b      	b.n	8003e84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fbbd 	bl	8004552 <SDMMC_GetResponse>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2104      	movs	r1, #4
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fbb4 	bl	8004552 <SDMMC_GetResponse>
 8003dea:	4602      	mov	r2, r0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2108      	movs	r1, #8
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fbab 	bl	8004552 <SDMMC_GetResponse>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	210c      	movs	r1, #12
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fba2 	bl	8004552 <SDMMC_GetResponse>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2104      	movs	r1, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fb99 	bl	8004552 <SDMMC_GetResponse>
 8003e20:	4603      	mov	r3, r0
 8003e22:	0d1a      	lsrs	r2, r3, #20
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003e28:	f107 0310 	add.w	r3, r7, #16
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fbc6 	bl	80035c0 <HAL_SD_GetCardCSD>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e3e:	e021      	b.n	8003e84 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	461c      	mov	r4, r3
 8003e4e:	4615      	mov	r5, r2
 8003e50:	4622      	mov	r2, r4
 8003e52:	462b      	mov	r3, r5
 8003e54:	4608      	mov	r0, r1
 8003e56:	f000 fc87 	bl	8004768 <SDMMC_CmdSelDesel>
 8003e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <SD_InitCard+0x176>
  {
    return errorstate;
 8003e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e64:	e00e      	b.n	8003e84 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681d      	ldr	r5, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	466c      	mov	r4, sp
 8003e6e:	f103 0210 	add.w	r2, r3, #16
 8003e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e78:	3304      	adds	r3, #4
 8003e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	f000 facb 	bl	8004418 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3740      	adds	r7, #64	; 0x40
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bdb0      	pop	{r4, r5, r7, pc}

08003e8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fc82 	bl	80047ae <SDMMC_CmdGoIdleState>
 8003eaa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	e072      	b.n	8003f9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fc95 	bl	80047ea <SDMMC_CmdOperCond>
 8003ec0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fc6b 	bl	80047ae <SDMMC_CmdGoIdleState>
 8003ed8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <SD_PowerON+0x5e>
    {
      return errorstate;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	e05b      	b.n	8003f9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d137      	bne.n	8003f62 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fc95 	bl	8004828 <SDMMC_CmdAppCommand>
 8003efe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02d      	beq.n	8003f62 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f0a:	e047      	b.n	8003f9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fc88 	bl	8004828 <SDMMC_CmdAppCommand>
 8003f18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <SD_PowerON+0x98>
    {
      return errorstate;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	e03b      	b.n	8003f9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	491e      	ldr	r1, [pc, #120]	; (8003fa4 <SD_PowerON+0x118>)
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fc9e 	bl	800486c <SDMMC_CmdAppOperCommand>
 8003f30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f3c:	e02e      	b.n	8003f9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fb04 	bl	8004552 <SDMMC_GetResponse>
 8003f4a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	0fdb      	lsrs	r3, r3, #31
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <SD_PowerON+0xcc>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <SD_PowerON+0xce>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]

    count++;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d802      	bhi.n	8003f72 <SD_PowerON+0xe6>
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0cc      	beq.n	8003f0c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d902      	bls.n	8003f82 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f80:	e00c      	b.n	8003f9c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	645a      	str	r2, [r3, #68]	; 0x44
 8003f92:	e002      	b.n	8003f9a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	c1100000 	.word	0xc1100000

08003fa8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fbc:	e018      	b.n	8003ff0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f000 fd13 	bl	80049f6 <SDMMC_CmdSendStatus>
 8003fd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <SD_SendStatus+0x34>
  {
    return errorstate;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	e009      	b.n	8003ff0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fab5 	bl	8004552 <SDMMC_GetResponse>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fa9f 	bl	8004552 <SDMMC_GetResponse>
 8004014:	4603      	mov	r3, r0
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800401e:	d102      	bne.n	8004026 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004024:	e02f      	b.n	8004086 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004026:	f107 030c 	add.w	r3, r7, #12
 800402a:	4619      	mov	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f879 	bl	8004124 <SD_FindSCR>
 8004032:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	e023      	b.n	8004086 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01c      	beq.n	8004082 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f000 fbe7 	bl	8004828 <SDMMC_CmdAppCommand>
 800405a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	e00f      	b.n	8004086 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2102      	movs	r1, #2
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fc21 	bl	80048b4 <SDMMC_CmdBusWidth>
 8004072:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	e003      	b.n	8004086 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800407e:	2300      	movs	r3, #0
 8004080:	e001      	b.n	8004086 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004082:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fa54 	bl	8004552 <SDMMC_GetResponse>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040b4:	d102      	bne.n	80040bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80040b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040ba:	e02f      	b.n	800411c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80040bc:	f107 030c 	add.w	r3, r7, #12
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f82e 	bl	8004124 <SD_FindSCR>
 80040c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	e023      	b.n	800411c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01c      	beq.n	8004118 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e6:	041b      	lsls	r3, r3, #16
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fb9c 	bl	8004828 <SDMMC_CmdAppCommand>
 80040f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	e00f      	b.n	800411c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fbd6 	bl	80048b4 <SDMMC_CmdBusWidth>
 8004108:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	e003      	b.n	800411c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004114:	2300      	movs	r3, #0
 8004116:	e001      	b.n	800411c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004118:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b08f      	sub	sp, #60	; 0x3c
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800412e:	f7fc ff05 	bl	8000f3c <HAL_GetTick>
 8004132:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2108      	movs	r1, #8
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fa40 	bl	80045d0 <SDMMC_CmdBlockLength>
 8004150:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	e0b2      	b.n	80042c2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f000 fb5d 	bl	8004828 <SDMMC_CmdAppCommand>
 800416e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	e0a3      	b.n	80042c2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004180:	2308      	movs	r3, #8
 8004182:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004184:	2330      	movs	r3, #48	; 0x30
 8004186:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004188:	2302      	movs	r3, #2
 800418a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800418c:	2300      	movs	r3, #0
 800418e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004190:	2301      	movs	r3, #1
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f107 0210 	add.w	r2, r7, #16
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f9ea 	bl	8004578 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fba5 	bl	80048f8 <SDMMC_CmdSendSCR>
 80041ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02a      	beq.n	800420c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	e083      	b.n	80042c2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00f      	beq.n	80041e8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6819      	ldr	r1, [r3, #0]
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	f107 0208 	add.w	r2, r7, #8
 80041d4:	18d4      	adds	r4, r2, r3
 80041d6:	4608      	mov	r0, r1
 80041d8:	f000 f94a 	bl	8004470 <SDMMC_ReadFIFO>
 80041dc:	4603      	mov	r3, r0
 80041de:	6023      	str	r3, [r4, #0]
      index++;
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	3301      	adds	r3, #1
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
 80041e6:	e006      	b.n	80041f6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d012      	beq.n	800421c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80041f6:	f7fc fea1 	bl	8000f3c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d102      	bne.n	800420c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004206:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800420a:	e05a      	b.n	80042c2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004212:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0cf      	beq.n	80041ba <SD_FindSCR+0x96>
 800421a:	e000      	b.n	800421e <SD_FindSCR+0xfa>
      break;
 800421c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2208      	movs	r2, #8
 8004232:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004234:	2308      	movs	r3, #8
 8004236:	e044      	b.n	80042c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2202      	movs	r2, #2
 800424c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800424e:	2302      	movs	r3, #2
 8004250:	e037      	b.n	80042c2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2220      	movs	r2, #32
 8004266:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004268:	2320      	movs	r3, #32
 800426a:	e02a      	b.n	80042c2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f240 523a 	movw	r2, #1338	; 0x53a
 8004274:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	061a      	lsls	r2, r3, #24
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004282:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	0a1b      	lsrs	r3, r3, #8
 8004288:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800428c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0e1b      	lsrs	r3, r3, #24
 8004292:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	601a      	str	r2, [r3, #0]
    scr++;
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	3304      	adds	r3, #4
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	061a      	lsls	r2, r3, #24
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80042aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	0e1b      	lsrs	r3, r3, #24
 80042ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	373c      	adds	r7, #60	; 0x3c
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd90      	pop	{r4, r7, pc}

080042ca <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b086      	sub	sp, #24
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d03f      	beq.n	8004364 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	e033      	b.n	8004352 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f8be 	bl	8004470 <SDMMC_ReadFIFO>
 80042f4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3b01      	subs	r3, #1
 8004308:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3301      	adds	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3b01      	subs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	701a      	strb	r2, [r3, #0]
      tmp++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3301      	adds	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3b01      	subs	r3, #1
 8004334:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3301      	adds	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3b01      	subs	r3, #1
 800434a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	3301      	adds	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b07      	cmp	r3, #7
 8004356:	d9c8      	bls.n	80042ea <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004364:	bf00      	nop
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d043      	beq.n	800440e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e037      	b.n	80043fc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3301      	adds	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	3b01      	subs	r3, #1
 800439c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	021a      	lsls	r2, r3, #8
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	041a      	lsls	r2, r3, #16
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	061a      	lsls	r2, r3, #24
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f107 0208 	add.w	r2, r7, #8
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f84a 	bl	800448a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3301      	adds	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2b07      	cmp	r3, #7
 8004400:	d9c4      	bls.n	800438c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004418:	b084      	sub	sp, #16
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	f107 001c 	add.w	r0, r7, #28
 8004426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800442e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004430:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004432:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004436:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800443a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800443e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004442:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <SDMMC_Init+0x54>)
 8004450:	4013      	ands	r3, r2
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	431a      	orrs	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	b004      	add	sp, #16
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	ffff8100 	.word	0xffff8100

08004470 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2203      	movs	r2, #3
 80044b8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0303 	and.w	r3, r3, #3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004502:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004508:	431a      	orrs	r2, r3
                       Command->CPSM);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800450e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <SDMMC_SendCommand+0x50>)
 800451c:	4013      	ands	r3, r2
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	fffff000 	.word	0xfffff000

08004538 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	b2db      	uxtb	r3, r3
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3314      	adds	r3, #20
 8004560:	461a      	mov	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	4413      	add	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
}  
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800459e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80045a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80045aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0

}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80045de:	2310      	movs	r3, #16
 80045e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80045e2:	2340      	movs	r3, #64	; 0x40
 80045e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80045ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80045f0:	f107 0308 	add.w	r3, r7, #8
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff ff74 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80045fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004600:	2110      	movs	r1, #16
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa1a 	bl	8004a3c <SDMMC_GetCmdResp1>
 8004608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800460a:	69fb      	ldr	r3, [r7, #28]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004622:	2311      	movs	r3, #17
 8004624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004626:	2340      	movs	r3, #64	; 0x40
 8004628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800462e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004634:	f107 0308 	add.w	r3, r7, #8
 8004638:	4619      	mov	r1, r3
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff ff52 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004640:	f241 3288 	movw	r2, #5000	; 0x1388
 8004644:	2111      	movs	r1, #17
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f9f8 	bl	8004a3c <SDMMC_GetCmdResp1>
 800464c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800464e:	69fb      	ldr	r3, [r7, #28]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004666:	2312      	movs	r3, #18
 8004668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800466a:	2340      	movs	r3, #64	; 0x40
 800466c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004678:	f107 0308 	add.w	r3, r7, #8
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ff30 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	2112      	movs	r1, #18
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f9d6 	bl	8004a3c <SDMMC_GetCmdResp1>
 8004690:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004692:	69fb      	ldr	r3, [r7, #28]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80046aa:	2318      	movs	r3, #24
 80046ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80046ae:	2340      	movs	r3, #64	; 0x40
 80046b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046bc:	f107 0308 	add.w	r3, r7, #8
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff ff0e 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	2118      	movs	r1, #24
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9b4 	bl	8004a3c <SDMMC_GetCmdResp1>
 80046d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046d6:	69fb      	ldr	r3, [r7, #28]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3720      	adds	r7, #32
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80046ee:	2319      	movs	r3, #25
 80046f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80046f2:	2340      	movs	r3, #64	; 0x40
 80046f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004700:	f107 0308 	add.w	r3, r7, #8
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff feec 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	2119      	movs	r1, #25
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f992 	bl	8004a3c <SDMMC_GetCmdResp1>
 8004718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800471a:	69fb      	ldr	r3, [r7, #28]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004730:	230c      	movs	r3, #12
 8004732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004734:	2340      	movs	r3, #64	; 0x40
 8004736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800473c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004740:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004742:	f107 0308 	add.w	r3, r7, #8
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff fecb 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <SDMMC_CmdStopTransfer+0x40>)
 8004750:	210c      	movs	r1, #12
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f972 	bl	8004a3c <SDMMC_GetCmdResp1>
 8004758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800475a:	69fb      	ldr	r3, [r7, #28]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	05f5e100 	.word	0x05f5e100

08004768 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004778:	2307      	movs	r3, #7
 800477a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800477c:	2340      	movs	r3, #64	; 0x40
 800477e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004788:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800478a:	f107 0310 	add.w	r3, r7, #16
 800478e:	4619      	mov	r1, r3
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7ff fea7 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	2107      	movs	r1, #7
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f94d 	bl	8004a3c <SDMMC_GetCmdResp1>
 80047a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3728      	adds	r7, #40	; 0x28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b088      	sub	sp, #32
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047cc:	f107 0308 	add.w	r3, r7, #8
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff fe86 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fb67 	bl	8004eac <SDMMC_GetCmdError>
 80047de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047e0:	69fb      	ldr	r3, [r7, #28]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b088      	sub	sp, #32
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80047f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80047f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80047f8:	2308      	movs	r3, #8
 80047fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80047fc:	2340      	movs	r3, #64	; 0x40
 80047fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800480a:	f107 0308 	add.w	r3, r7, #8
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff fe67 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fafa 	bl	8004e10 <SDMMC_GetCmdResp7>
 800481c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800481e:	69fb      	ldr	r3, [r7, #28]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004836:	2337      	movs	r3, #55	; 0x37
 8004838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800483a:	2340      	movs	r3, #64	; 0x40
 800483c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004848:	f107 0308 	add.w	r3, r7, #8
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff fe48 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	2137      	movs	r1, #55	; 0x37
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8ee 	bl	8004a3c <SDMMC_GetCmdResp1>
 8004860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004862:	69fb      	ldr	r3, [r7, #28]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <SDMMC_CmdAppOperCommand+0x44>)
 800487a:	4313      	orrs	r3, r2
 800487c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800487e:	2329      	movs	r3, #41	; 0x29
 8004880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004882:	2340      	movs	r3, #64	; 0x40
 8004884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800488a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800488e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004890:	f107 0308 	add.w	r3, r7, #8
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fe24 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fa03 	bl	8004ca8 <SDMMC_GetCmdResp3>
 80048a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048a4:	69fb      	ldr	r3, [r7, #28]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	80100000 	.word	0x80100000

080048b4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80048c2:	2306      	movs	r3, #6
 80048c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048d4:	f107 0308 	add.w	r3, r7, #8
 80048d8:	4619      	mov	r1, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff fe02 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80048e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e4:	2106      	movs	r1, #6
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8a8 	bl	8004a3c <SDMMC_GetCmdResp1>
 80048ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048ee:	69fb      	ldr	r3, [r7, #28]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004904:	2333      	movs	r3, #51	; 0x33
 8004906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004908:	2340      	movs	r3, #64	; 0x40
 800490a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004914:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004916:	f107 0308 	add.w	r3, r7, #8
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fde1 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004922:	f241 3288 	movw	r2, #5000	; 0x1388
 8004926:	2133      	movs	r1, #51	; 0x33
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f887 	bl	8004a3c <SDMMC_GetCmdResp1>
 800492e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004930:	69fb      	ldr	r3, [r7, #28]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b088      	sub	sp, #32
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004946:	2302      	movs	r3, #2
 8004948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800494a:	23c0      	movs	r3, #192	; 0xc0
 800494c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004956:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff fdc0 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f957 	bl	8004c18 <SDMMC_GetCmdResp2>
 800496a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800496c:	69fb      	ldr	r3, [r7, #28]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b088      	sub	sp, #32
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004984:	2309      	movs	r3, #9
 8004986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004988:	23c0      	movs	r3, #192	; 0xc0
 800498a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800498c:	2300      	movs	r3, #0
 800498e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004994:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004996:	f107 0308 	add.w	r3, r7, #8
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fda1 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f938 	bl	8004c18 <SDMMC_GetCmdResp2>
 80049a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049aa:	69fb      	ldr	r3, [r7, #28]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80049c2:	2303      	movs	r3, #3
 80049c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049c6:	2340      	movs	r3, #64	; 0x40
 80049c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fd82 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	2103      	movs	r1, #3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f99d 	bl	8004d24 <SDMMC_GetCmdResp6>
 80049ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ec:	69fb      	ldr	r3, [r7, #28]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b088      	sub	sp, #32
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004a04:	230d      	movs	r3, #13
 8004a06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a08:	2340      	movs	r3, #64	; 0x40
 8004a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a16:	f107 0308 	add.w	r3, r7, #8
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fd61 	bl	80044e4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	210d      	movs	r1, #13
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f807 	bl	8004a3c <SDMMC_GetCmdResp1>
 8004a2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a30:	69fb      	ldr	r3, [r7, #28]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	460b      	mov	r3, r1
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004a4a:	4b70      	ldr	r3, [pc, #448]	; (8004c0c <SDMMC_GetCmdResp1+0x1d0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a70      	ldr	r2, [pc, #448]	; (8004c10 <SDMMC_GetCmdResp1+0x1d4>)
 8004a50:	fba2 2303 	umull	r2, r3, r2, r3
 8004a54:	0a5a      	lsrs	r2, r3, #9
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	1e5a      	subs	r2, r3, #1
 8004a62:	61fa      	str	r2, [r7, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a6c:	e0c9      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0ef      	beq.n	8004a5e <SDMMC_GetCmdResp1+0x22>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ea      	bne.n	8004a5e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2204      	movs	r2, #4
 8004a98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	e0b1      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d004      	beq.n	8004ab4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0a6      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	22c5      	movs	r2, #197	; 0xc5
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff fd3c 	bl	8004538 <SDMMC_GetCommandResponse>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	7afb      	ldrb	r3, [r7, #11]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d001      	beq.n	8004ace <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e099      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004ace:	2100      	movs	r1, #0
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff fd3e 	bl	8004552 <SDMMC_GetResponse>
 8004ad6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4b4e      	ldr	r3, [pc, #312]	; (8004c14 <SDMMC_GetCmdResp1+0x1d8>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e08d      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	da02      	bge.n	8004af2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004af0:	e087      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004afc:	2340      	movs	r3, #64	; 0x40
 8004afe:	e080      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	e079      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b1c:	e071      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b2c:	e069      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3c:	e061      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004b48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b4c:	e059      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b5c:	e051      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b6c:	e049      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004b78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b7c:	e041      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8c:	e039      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b9c:	e031      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004ba8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bac:	e029      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004bb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004bbc:	e021      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004bc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bcc:	e019      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bdc:	e011      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bec:	e009      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004bf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004bfc:	e001      	b.n	8004c02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3720      	adds	r7, #32
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	10624dd3 	.word	0x10624dd3
 8004c14:	fdffe008 	.word	0xfdffe008

08004c18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c20:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <SDMMC_GetCmdResp2+0x88>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <SDMMC_GetCmdResp2+0x8c>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	0a5b      	lsrs	r3, r3, #9
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1e5a      	subs	r2, r3, #1
 8004c3a:	60fa      	str	r2, [r7, #12]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c44:	e026      	b.n	8004c94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ef      	beq.n	8004c36 <SDMMC_GetCmdResp2+0x1e>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1ea      	bne.n	8004c36 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2204      	movs	r2, #4
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c72:	2304      	movs	r3, #4
 8004c74:	e00e      	b.n	8004c94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e003      	b.n	8004c94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	22c5      	movs	r2, #197	; 0xc5
 8004c90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	20000000 	.word	0x20000000
 8004ca4:	10624dd3 	.word	0x10624dd3

08004ca8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <SDMMC_GetCmdResp3+0x74>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <SDMMC_GetCmdResp3+0x78>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	0a5b      	lsrs	r3, r3, #9
 8004cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc0:	fb02 f303 	mul.w	r3, r2, r3
 8004cc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1e5a      	subs	r2, r3, #1
 8004cca:	60fa      	str	r2, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cd4:	e01b      	b.n	8004d0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0ef      	beq.n	8004cc6 <SDMMC_GetCmdResp3+0x1e>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ea      	bne.n	8004cc6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d02:	2304      	movs	r3, #4
 8004d04:	e003      	b.n	8004d0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	22c5      	movs	r2, #197	; 0xc5
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	10624dd3 	.word	0x10624dd3

08004d24 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d32:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <SDMMC_GetCmdResp6+0xe4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a35      	ldr	r2, [pc, #212]	; (8004e0c <SDMMC_GetCmdResp6+0xe8>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	0a5b      	lsrs	r3, r3, #9
 8004d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	1e5a      	subs	r2, r3, #1
 8004d4c:	61fa      	str	r2, [r7, #28]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d56:	e052      	b.n	8004dfe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ef      	beq.n	8004d48 <SDMMC_GetCmdResp6+0x24>
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1ea      	bne.n	8004d48 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d004      	beq.n	8004d88 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2204      	movs	r2, #4
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d84:	2304      	movs	r3, #4
 8004d86:	e03a      	b.n	8004dfe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e02f      	b.n	8004dfe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f7ff fbca 	bl	8004538 <SDMMC_GetCommandResponse>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	7afb      	ldrb	r3, [r7, #11]
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d001      	beq.n	8004db2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e025      	b.n	8004dfe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	22c5      	movs	r2, #197	; 0xc5
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004db8:	2100      	movs	r1, #0
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7ff fbc9 	bl	8004552 <SDMMC_GetResponse>
 8004dc0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e011      	b.n	8004dfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004de8:	e009      	b.n	8004dfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004df8:	e001      	b.n	8004dfe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000000 	.word	0x20000000
 8004e0c:	10624dd3 	.word	0x10624dd3

08004e10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e18:	4b22      	ldr	r3, [pc, #136]	; (8004ea4 <SDMMC_GetCmdResp7+0x94>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <SDMMC_GetCmdResp7+0x98>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	0a5b      	lsrs	r3, r3, #9
 8004e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1e5a      	subs	r2, r3, #1
 8004e32:	60fa      	str	r2, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e3c:	e02c      	b.n	8004e98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0ef      	beq.n	8004e2e <SDMMC_GetCmdResp7+0x1e>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ea      	bne.n	8004e2e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2204      	movs	r2, #4
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e6a:	2304      	movs	r3, #4
 8004e6c:	e014      	b.n	8004e98 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d004      	beq.n	8004e84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e009      	b.n	8004e98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2240      	movs	r2, #64	; 0x40
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004e96:	2300      	movs	r3, #0
  
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	10624dd3 	.word	0x10624dd3

08004eac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004eb4:	4b11      	ldr	r3, [pc, #68]	; (8004efc <SDMMC_GetCmdError+0x50>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a11      	ldr	r2, [pc, #68]	; (8004f00 <SDMMC_GetCmdError+0x54>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0a5b      	lsrs	r3, r3, #9
 8004ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec4:	fb02 f303 	mul.w	r3, r2, r3
 8004ec8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1e5a      	subs	r2, r3, #1
 8004ece:	60fa      	str	r2, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ed4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ed8:	e009      	b.n	8004eee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f1      	beq.n	8004eca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	22c5      	movs	r2, #197	; 0xc5
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	20000000 	.word	0x20000000
 8004f00:	10624dd3 	.word	0x10624dd3

08004f04 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004f08:	4904      	ldr	r1, [pc, #16]	; (8004f1c <MX_FATFS_Init+0x18>)
 8004f0a:	4805      	ldr	r0, [pc, #20]	; (8004f20 <MX_FATFS_Init+0x1c>)
 8004f0c:	f003 f834 	bl	8007f78 <FATFS_LinkDriver>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <MX_FATFS_Init+0x20>)
 8004f16:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f18:	bf00      	nop
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	200001dc 	.word	0x200001dc
 8004f20:	08008968 	.word	0x08008968
 8004f24:	200001d8 	.word	0x200001d8

08004f28 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004f2c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004f42:	f000 f896 	bl	8005072 <BSP_SD_IsDetected>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d001      	beq.n	8004f50 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e012      	b.n	8004f76 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8004f50:	480b      	ldr	r0, [pc, #44]	; (8004f80 <BSP_SD_Init+0x48>)
 8004f52:	f7fd ff35 	bl	8002dc0 <HAL_SD_Init>
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004f5a:	79fb      	ldrb	r3, [r7, #7]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8004f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f64:	4806      	ldr	r0, [pc, #24]	; (8004f80 <BSP_SD_Init+0x48>)
 8004f66:	f7fe fcfb 	bl	8003960 <HAL_SD_ConfigWideBusOperation>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004f74:	79fb      	ldrb	r3, [r7, #7]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	2000008c 	.word	0x2000008c

08004f84 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	4806      	ldr	r0, [pc, #24]	; (8004fb4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8004f9c:	f7fd ffc8 	bl	8002f30 <HAL_SD_ReadBlocks_DMA>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	2000008c 	.word	0x2000008c

08004fb8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	68f9      	ldr	r1, [r7, #12]
 8004fce:	4806      	ldr	r0, [pc, #24]	; (8004fe8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004fd0:	f7fe f890 	bl	80030f4 <HAL_SD_WriteBlocks_DMA>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	2000008c 	.word	0x2000008c

08004fec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004ff0:	4805      	ldr	r0, [pc, #20]	; (8005008 <BSP_SD_GetCardState+0x1c>)
 8004ff2:	f7fe fd4f 	bl	8003a94 <HAL_SD_GetCardState>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	bf14      	ite	ne
 8004ffc:	2301      	movne	r3, #1
 8004ffe:	2300      	moveq	r3, #0
 8005000:	b2db      	uxtb	r3, r3
}
 8005002:	4618      	mov	r0, r3
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	2000008c 	.word	0x2000008c

0800500c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	4803      	ldr	r0, [pc, #12]	; (8005024 <BSP_SD_GetCardInfo+0x18>)
 8005018:	f7fe fc76 	bl	8003908 <HAL_SD_GetCardInfo>
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	2000008c 	.word	0x2000008c

08005028 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005030:	f000 f818 	bl	8005064 <BSP_SD_AbortCallback>
}
 8005034:	bf00      	nop
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005044:	f000 f9a8 	bl	8005398 <BSP_SD_WriteCpltCallback>
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005058:	f000 f9aa 	bl	80053b0 <BSP_SD_ReadCpltCallback>
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0

}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005078:	2301      	movs	r3, #1
 800507a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800507c:	f000 f80c 	bl	8005098 <BSP_PlatformIsDetected>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005086:	2300      	movs	r3, #0
 8005088:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	b2db      	uxtb	r3, r3
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800509e:	2301      	movs	r3, #1
 80050a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80050a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050a6:	4806      	ldr	r0, [pc, #24]	; (80050c0 <BSP_PlatformIsDetected+0x28>)
 80050a8:	f7fc fddc 	bl	8001c64 <HAL_GPIO_ReadPin>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80050b2:	2300      	movs	r3, #0
 80050b4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80050b6:	79fb      	ldrb	r3, [r7, #7]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	40020800 	.word	0x40020800

080050c4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80050cc:	f7fb ff36 	bl	8000f3c <HAL_GetTick>
 80050d0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80050d2:	e006      	b.n	80050e2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80050d4:	f7ff ff8a 	bl	8004fec <BSP_SD_GetCardState>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	e009      	b.n	80050f6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80050e2:	f7fb ff2b 	bl	8000f3c <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d8f0      	bhi.n	80050d4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800510a:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <SD_CheckStatus+0x38>)
 800510c:	2201      	movs	r2, #1
 800510e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005110:	f7ff ff6c 	bl	8004fec <BSP_SD_GetCardState>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d107      	bne.n	800512a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800511a:	4b07      	ldr	r3, [pc, #28]	; (8005138 <SD_CheckStatus+0x38>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4b04      	ldr	r3, [pc, #16]	; (8005138 <SD_CheckStatus+0x38>)
 8005128:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800512a:	4b03      	ldr	r3, [pc, #12]	; (8005138 <SD_CheckStatus+0x38>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b2db      	uxtb	r3, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000009 	.word	0x20000009

0800513c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005146:	f7ff fef7 	bl	8004f38 <BSP_SD_Init>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d107      	bne.n	8005160 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff ffd4 	bl	8005100 <SD_CheckStatus>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <SD_initialize+0x34>)
 800515e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005160:	4b03      	ldr	r3, [pc, #12]	; (8005170 <SD_initialize+0x34>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000009 	.word	0x20000009

08005174 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff ffbd 	bl	8005100 <SD_CheckStatus>
 8005186:	4603      	mov	r3, r0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	4603      	mov	r3, r0
 800519e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80051a4:	f247 5030 	movw	r0, #30000	; 0x7530
 80051a8:	f7ff ff8c 	bl	80050c4 <SD_CheckStatusWithTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	da01      	bge.n	80051b6 <SD_read+0x26>
  {
    return res;
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	e03b      	b.n	800522e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	68b8      	ldr	r0, [r7, #8]
 80051bc:	f7ff fee2 	bl	8004f84 <BSP_SD_ReadBlocks_DMA>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d132      	bne.n	800522c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80051c6:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <SD_read+0xa8>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80051cc:	f7fb feb6 	bl	8000f3c <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80051d2:	bf00      	nop
 80051d4:	4b18      	ldr	r3, [pc, #96]	; (8005238 <SD_read+0xa8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <SD_read+0x5e>
 80051dc:	f7fb feae 	bl	8000f3c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d9f2      	bls.n	80051d4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80051ee:	4b12      	ldr	r3, [pc, #72]	; (8005238 <SD_read+0xa8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
 80051fa:	e017      	b.n	800522c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <SD_read+0xa8>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005202:	f7fb fe9b 	bl	8000f3c <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005208:	e007      	b.n	800521a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800520a:	f7ff feef 	bl	8004fec <BSP_SD_GetCardState>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d102      	bne.n	800521a <SD_read+0x8a>
          {
            res = RES_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8005218:	e008      	b.n	800522c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800521a:	f7fb fe8f 	bl	8000f3c <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f247 522f 	movw	r2, #29999	; 0x752f
 8005228:	4293      	cmp	r3, r2
 800522a:	d9ee      	bls.n	800520a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800522c:	7dfb      	ldrb	r3, [r7, #23]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000644 	.word	0x20000644

0800523c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4603      	mov	r3, r0
 800524a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005250:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <SD_write+0xa8>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005256:	f247 5030 	movw	r0, #30000	; 0x7530
 800525a:	f7ff ff33 	bl	80050c4 <SD_CheckStatusWithTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	da01      	bge.n	8005268 <SD_write+0x2c>
  {
    return res;
 8005264:	7dfb      	ldrb	r3, [r7, #23]
 8005266:	e038      	b.n	80052da <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	68b8      	ldr	r0, [r7, #8]
 800526e:	f7ff fea3 	bl	8004fb8 <BSP_SD_WriteBlocks_DMA>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d12f      	bne.n	80052d8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8005278:	f7fb fe60 	bl	8000f3c <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800527e:	bf00      	nop
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <SD_write+0xa8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d108      	bne.n	800529a <SD_write+0x5e>
 8005288:	f7fb fe58 	bl	8000f3c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f247 522f 	movw	r2, #29999	; 0x752f
 8005296:	4293      	cmp	r3, r2
 8005298:	d9f2      	bls.n	8005280 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <SD_write+0xa8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d102      	bne.n	80052a8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	75fb      	strb	r3, [r7, #23]
 80052a6:	e017      	b.n	80052d8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80052a8:	4b0e      	ldr	r3, [pc, #56]	; (80052e4 <SD_write+0xa8>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80052ae:	f7fb fe45 	bl	8000f3c <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80052b4:	e007      	b.n	80052c6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80052b6:	f7ff fe99 	bl	8004fec <BSP_SD_GetCardState>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d102      	bne.n	80052c6 <SD_write+0x8a>
          {
            res = RES_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	75fb      	strb	r3, [r7, #23]
            break;
 80052c4:	e008      	b.n	80052d8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80052c6:	f7fb fe39 	bl	8000f3c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f247 522f 	movw	r2, #29999	; 0x752f
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d9ee      	bls.n	80052b6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20000640 	.word	0x20000640

080052e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08c      	sub	sp, #48	; 0x30
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	603a      	str	r2, [r7, #0]
 80052f2:	71fb      	strb	r3, [r7, #7]
 80052f4:	460b      	mov	r3, r1
 80052f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80052fe:	4b25      	ldr	r3, [pc, #148]	; (8005394 <SD_ioctl+0xac>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <SD_ioctl+0x28>
 800530c:	2303      	movs	r3, #3
 800530e:	e03c      	b.n	800538a <SD_ioctl+0xa2>

  switch (cmd)
 8005310:	79bb      	ldrb	r3, [r7, #6]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d834      	bhi.n	8005380 <SD_ioctl+0x98>
 8005316:	a201      	add	r2, pc, #4	; (adr r2, 800531c <SD_ioctl+0x34>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	0800532d 	.word	0x0800532d
 8005320:	08005335 	.word	0x08005335
 8005324:	0800534d 	.word	0x0800534d
 8005328:	08005367 	.word	0x08005367
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005332:	e028      	b.n	8005386 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005334:	f107 030c 	add.w	r3, r7, #12
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fe67 	bl	800500c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800533e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800534a:	e01c      	b.n	8005386 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800534c:	f107 030c 	add.w	r3, r7, #12
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff fe5b 	bl	800500c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	b29a      	uxth	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005364:	e00f      	b.n	8005386 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005366:	f107 030c 	add.w	r3, r7, #12
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fe4e 	bl	800500c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	0a5a      	lsrs	r2, r3, #9
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800537e:	e002      	b.n	8005386 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005380:	2304      	movs	r3, #4
 8005382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800538a:	4618      	mov	r0, r3
 800538c:	3730      	adds	r7, #48	; 0x30
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000009 	.word	0x20000009

08005398 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <BSP_SD_WriteCpltCallback+0x14>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
}
 80053a2:	bf00      	nop
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	20000640 	.word	0x20000640

080053b0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80053b4:	4b03      	ldr	r3, [pc, #12]	; (80053c4 <BSP_SD_ReadCpltCallback+0x14>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	20000644 	.word	0x20000644

080053c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	4a08      	ldr	r2, [pc, #32]	; (80053f8 <disk_status+0x30>)
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	79fa      	ldrb	r2, [r7, #7]
 80053e0:	4905      	ldr	r1, [pc, #20]	; (80053f8 <disk_status+0x30>)
 80053e2:	440a      	add	r2, r1
 80053e4:	7a12      	ldrb	r2, [r2, #8]
 80053e6:	4610      	mov	r0, r2
 80053e8:	4798      	blx	r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20000670 	.word	0x20000670

080053fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <disk_initialize+0x48>)
 800540e:	5cd3      	ldrb	r3, [r2, r3]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d111      	bne.n	8005438 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	4a0b      	ldr	r2, [pc, #44]	; (8005444 <disk_initialize+0x48>)
 8005418:	2101      	movs	r1, #1
 800541a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	4a09      	ldr	r2, [pc, #36]	; (8005444 <disk_initialize+0x48>)
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	79fa      	ldrb	r2, [r7, #7]
 800542a:	4906      	ldr	r1, [pc, #24]	; (8005444 <disk_initialize+0x48>)
 800542c:	440a      	add	r2, r1
 800542e:	7a12      	ldrb	r2, [r2, #8]
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
 8005434:	4603      	mov	r3, r0
 8005436:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000670 	.word	0x20000670

08005448 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005448:	b590      	push	{r4, r7, lr}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60b9      	str	r1, [r7, #8]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	4a0a      	ldr	r2, [pc, #40]	; (8005484 <disk_read+0x3c>)
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	689c      	ldr	r4, [r3, #8]
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	4a07      	ldr	r2, [pc, #28]	; (8005484 <disk_read+0x3c>)
 8005468:	4413      	add	r3, r2
 800546a:	7a18      	ldrb	r0, [r3, #8]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	47a0      	blx	r4
 8005474:	4603      	mov	r3, r0
 8005476:	75fb      	strb	r3, [r7, #23]
  return res;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
}
 800547a:	4618      	mov	r0, r3
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	bd90      	pop	{r4, r7, pc}
 8005482:	bf00      	nop
 8005484:	20000670 	.word	0x20000670

08005488 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005488:	b590      	push	{r4, r7, lr}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4603      	mov	r3, r0
 8005496:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <disk_write+0x3c>)
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68dc      	ldr	r4, [r3, #12]
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	4a07      	ldr	r2, [pc, #28]	; (80054c4 <disk_write+0x3c>)
 80054a8:	4413      	add	r3, r2
 80054aa:	7a18      	ldrb	r0, [r3, #8]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	47a0      	blx	r4
 80054b4:	4603      	mov	r3, r0
 80054b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd90      	pop	{r4, r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000670 	.word	0x20000670

080054c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	603a      	str	r2, [r7, #0]
 80054d2:	71fb      	strb	r3, [r7, #7]
 80054d4:	460b      	mov	r3, r1
 80054d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	4a09      	ldr	r2, [pc, #36]	; (8005500 <disk_ioctl+0x38>)
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	79fa      	ldrb	r2, [r7, #7]
 80054e6:	4906      	ldr	r1, [pc, #24]	; (8005500 <disk_ioctl+0x38>)
 80054e8:	440a      	add	r2, r1
 80054ea:	7a10      	ldrb	r0, [r2, #8]
 80054ec:	79b9      	ldrb	r1, [r7, #6]
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	4798      	blx	r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000670 	.word	0x20000670

08005504 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3301      	adds	r3, #1
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005514:	89fb      	ldrh	r3, [r7, #14]
 8005516:	021b      	lsls	r3, r3, #8
 8005518:	b21a      	sxth	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	b21b      	sxth	r3, r3
 8005520:	4313      	orrs	r3, r2
 8005522:	b21b      	sxth	r3, r3
 8005524:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005526:	89fb      	ldrh	r3, [r7, #14]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3303      	adds	r3, #3
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	3202      	adds	r2, #2
 800554c:	7812      	ldrb	r2, [r2, #0]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	3201      	adds	r2, #1
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	7812      	ldrb	r2, [r2, #0]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
	return rv;
 800556c:	68fb      	ldr	r3, [r7, #12]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	460b      	mov	r3, r1
 8005584:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	887a      	ldrh	r2, [r7, #2]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	887b      	ldrh	r3, [r7, #2]
 8005594:	0a1b      	lsrs	r3, r3, #8
 8005596:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	887a      	ldrh	r2, [r7, #2]
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	0a1b      	lsrs	r3, r3, #8
 80055ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	0a1b      	lsrs	r3, r3, #8
 80055dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	1c53      	adds	r3, r2, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	1c59      	adds	r1, r3, #1
 800562c:	6179      	str	r1, [r7, #20]
 800562e:	7812      	ldrb	r2, [r2, #0]
 8005630:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3b01      	subs	r3, #1
 8005636:	607b      	str	r3, [r7, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f1      	bne.n	8005622 <mem_cpy+0x1a>
	}
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800564a:	b480      	push	{r7}
 800564c:	b087      	sub	sp, #28
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	617a      	str	r2, [r7, #20]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3b01      	subs	r3, #1
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f3      	bne.n	800565a <mem_set+0x10>
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005680:	b480      	push	{r7}
 8005682:	b089      	sub	sp, #36	; 0x24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	61fa      	str	r2, [r7, #28]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	4619      	mov	r1, r3
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	61ba      	str	r2, [r7, #24]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	1acb      	subs	r3, r1, r3
 80056ac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3b01      	subs	r3, #1
 80056b2:	607b      	str	r3, [r7, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <mem_cmp+0x40>
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0eb      	beq.n	8005698 <mem_cmp+0x18>

	return r;
 80056c0:	697b      	ldr	r3, [r7, #20]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3724      	adds	r7, #36	; 0x24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80056d8:	e002      	b.n	80056e0 <chk_chr+0x12>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3301      	adds	r3, #1
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <chk_chr+0x26>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d1f2      	bne.n	80056da <chk_chr+0xc>
	return *str;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	781b      	ldrb	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e029      	b.n	800576c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005718:	4a27      	ldr	r2, [pc, #156]	; (80057b8 <chk_lock+0xb4>)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	4413      	add	r3, r2
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01d      	beq.n	8005762 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005726:	4a24      	ldr	r2, [pc, #144]	; (80057b8 <chk_lock+0xb4>)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	4413      	add	r3, r2
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d116      	bne.n	8005766 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005738:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <chk_lock+0xb4>)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	4413      	add	r3, r2
 8005740:	3304      	adds	r3, #4
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005748:	429a      	cmp	r2, r3
 800574a:	d10c      	bne.n	8005766 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800574c:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <chk_lock+0xb4>)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	4413      	add	r3, r2
 8005754:	3308      	adds	r3, #8
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800575c:	429a      	cmp	r2, r3
 800575e:	d102      	bne.n	8005766 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005760:	e007      	b.n	8005772 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005762:	2301      	movs	r3, #1
 8005764:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3301      	adds	r3, #1
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d9d2      	bls.n	8005718 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d109      	bne.n	800578c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <chk_lock+0x80>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b02      	cmp	r3, #2
 8005782:	d101      	bne.n	8005788 <chk_lock+0x84>
 8005784:	2300      	movs	r3, #0
 8005786:	e010      	b.n	80057aa <chk_lock+0xa6>
 8005788:	2312      	movs	r3, #18
 800578a:	e00e      	b.n	80057aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d108      	bne.n	80057a4 <chk_lock+0xa0>
 8005792:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <chk_lock+0xb4>)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	4413      	add	r3, r2
 800579a:	330c      	adds	r3, #12
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a2:	d101      	bne.n	80057a8 <chk_lock+0xa4>
 80057a4:	2310      	movs	r3, #16
 80057a6:	e000      	b.n	80057aa <chk_lock+0xa6>
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000650 	.word	0x20000650

080057bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80057c2:	2300      	movs	r3, #0
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	e002      	b.n	80057ce <enq_lock+0x12>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3301      	adds	r3, #1
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d806      	bhi.n	80057e2 <enq_lock+0x26>
 80057d4:	4a09      	ldr	r2, [pc, #36]	; (80057fc <enq_lock+0x40>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	4413      	add	r3, r2
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f2      	bne.n	80057c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	bf14      	ite	ne
 80057e8:	2301      	movne	r3, #1
 80057ea:	2300      	moveq	r3, #0
 80057ec:	b2db      	uxtb	r3, r3
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000650 	.word	0x20000650

08005800 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	e01f      	b.n	8005850 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005810:	4a41      	ldr	r2, [pc, #260]	; (8005918 <inc_lock+0x118>)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	4413      	add	r3, r2
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d113      	bne.n	800584a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005822:	4a3d      	ldr	r2, [pc, #244]	; (8005918 <inc_lock+0x118>)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	4413      	add	r3, r2
 800582a:	3304      	adds	r3, #4
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005832:	429a      	cmp	r2, r3
 8005834:	d109      	bne.n	800584a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005836:	4a38      	ldr	r2, [pc, #224]	; (8005918 <inc_lock+0x118>)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	4413      	add	r3, r2
 800583e:	3308      	adds	r3, #8
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005846:	429a      	cmp	r2, r3
 8005848:	d006      	beq.n	8005858 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3301      	adds	r3, #1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d9dc      	bls.n	8005810 <inc_lock+0x10>
 8005856:	e000      	b.n	800585a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005858:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b02      	cmp	r3, #2
 800585e:	d132      	bne.n	80058c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e002      	b.n	800586c <inc_lock+0x6c>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d806      	bhi.n	8005880 <inc_lock+0x80>
 8005872:	4a29      	ldr	r2, [pc, #164]	; (8005918 <inc_lock+0x118>)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	4413      	add	r3, r2
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f2      	bne.n	8005866 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d101      	bne.n	800588a <inc_lock+0x8a>
 8005886:	2300      	movs	r3, #0
 8005888:	e040      	b.n	800590c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	4922      	ldr	r1, [pc, #136]	; (8005918 <inc_lock+0x118>)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	440b      	add	r3, r1
 8005896:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	491e      	ldr	r1, [pc, #120]	; (8005918 <inc_lock+0x118>)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	440b      	add	r3, r1
 80058a4:	3304      	adds	r3, #4
 80058a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	491a      	ldr	r1, [pc, #104]	; (8005918 <inc_lock+0x118>)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	440b      	add	r3, r1
 80058b4:	3308      	adds	r3, #8
 80058b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80058b8:	4a17      	ldr	r2, [pc, #92]	; (8005918 <inc_lock+0x118>)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	4413      	add	r3, r2
 80058c0:	330c      	adds	r3, #12
 80058c2:	2200      	movs	r2, #0
 80058c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <inc_lock+0xe0>
 80058cc:	4a12      	ldr	r2, [pc, #72]	; (8005918 <inc_lock+0x118>)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	4413      	add	r3, r2
 80058d4:	330c      	adds	r3, #12
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <inc_lock+0xe0>
 80058dc:	2300      	movs	r3, #0
 80058de:	e015      	b.n	800590c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d108      	bne.n	80058f8 <inc_lock+0xf8>
 80058e6:	4a0c      	ldr	r2, [pc, #48]	; (8005918 <inc_lock+0x118>)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	4413      	add	r3, r2
 80058ee:	330c      	adds	r3, #12
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	e001      	b.n	80058fc <inc_lock+0xfc>
 80058f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058fc:	4906      	ldr	r1, [pc, #24]	; (8005918 <inc_lock+0x118>)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	440b      	add	r3, r1
 8005904:	330c      	adds	r3, #12
 8005906:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3301      	adds	r3, #1
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	20000650 	.word	0x20000650

0800591c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3b01      	subs	r3, #1
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d825      	bhi.n	800597c <dec_lock+0x60>
		n = Files[i].ctr;
 8005930:	4a17      	ldr	r2, [pc, #92]	; (8005990 <dec_lock+0x74>)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	4413      	add	r3, r2
 8005938:	330c      	adds	r3, #12
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800593e:	89fb      	ldrh	r3, [r7, #14]
 8005940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005944:	d101      	bne.n	800594a <dec_lock+0x2e>
 8005946:	2300      	movs	r3, #0
 8005948:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800594a:	89fb      	ldrh	r3, [r7, #14]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <dec_lock+0x3a>
 8005950:	89fb      	ldrh	r3, [r7, #14]
 8005952:	3b01      	subs	r3, #1
 8005954:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005956:	4a0e      	ldr	r2, [pc, #56]	; (8005990 <dec_lock+0x74>)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	4413      	add	r3, r2
 800595e:	330c      	adds	r3, #12
 8005960:	89fa      	ldrh	r2, [r7, #14]
 8005962:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005964:	89fb      	ldrh	r3, [r7, #14]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d105      	bne.n	8005976 <dec_lock+0x5a>
 800596a:	4a09      	ldr	r2, [pc, #36]	; (8005990 <dec_lock+0x74>)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	4413      	add	r3, r2
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	737b      	strb	r3, [r7, #13]
 800597a:	e001      	b.n	8005980 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800597c:	2302      	movs	r3, #2
 800597e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005980:	7b7b      	ldrb	r3, [r7, #13]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000650 	.word	0x20000650

08005994 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e010      	b.n	80059c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80059a2:	4a0d      	ldr	r2, [pc, #52]	; (80059d8 <clear_lock+0x44>)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	4413      	add	r3, r2
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d105      	bne.n	80059be <clear_lock+0x2a>
 80059b2:	4a09      	ldr	r2, [pc, #36]	; (80059d8 <clear_lock+0x44>)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	4413      	add	r3, r2
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3301      	adds	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d9eb      	bls.n	80059a2 <clear_lock+0xe>
	}
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	20000650 	.word	0x20000650

080059dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	78db      	ldrb	r3, [r3, #3]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d034      	beq.n	8005a5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7858      	ldrb	r0, [r3, #1]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a00:	2301      	movs	r3, #1
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	f7ff fd40 	bl	8005488 <disk_write>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	73fb      	strb	r3, [r7, #15]
 8005a12:	e022      	b.n	8005a5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	1ad2      	subs	r2, r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d217      	bcs.n	8005a5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	789b      	ldrb	r3, [r3, #2]
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	e010      	b.n	8005a54 <sync_window+0x78>
					wsect += fs->fsize;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4413      	add	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	7858      	ldrb	r0, [r3, #1]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a46:	2301      	movs	r3, #1
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	f7ff fd1d 	bl	8005488 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d8eb      	bhi.n	8005a32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d01b      	beq.n	8005ab4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ffad 	bl	80059dc <sync_window>
 8005a82:	4603      	mov	r3, r0
 8005a84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d113      	bne.n	8005ab4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	7858      	ldrb	r0, [r3, #1]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005a96:	2301      	movs	r3, #1
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	f7ff fcd5 	bl	8005448 <disk_read>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ff87 	bl	80059dc <sync_window>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d158      	bne.n	8005b8a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d148      	bne.n	8005b72 <sync_fs+0xb2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	791b      	ldrb	r3, [r3, #4]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d144      	bne.n	8005b72 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3330      	adds	r3, #48	; 0x30
 8005aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005af0:	2100      	movs	r1, #0
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fda9 	bl	800564a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3330      	adds	r3, #48	; 0x30
 8005afc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b00:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff fd38 	bl	800557a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3330      	adds	r3, #48	; 0x30
 8005b0e:	4921      	ldr	r1, [pc, #132]	; (8005b94 <sync_fs+0xd4>)
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fd4d 	bl	80055b0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3330      	adds	r3, #48	; 0x30
 8005b1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005b1e:	491e      	ldr	r1, [pc, #120]	; (8005b98 <sync_fs+0xd8>)
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fd45 	bl	80055b0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3330      	adds	r3, #48	; 0x30
 8005b2a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	4619      	mov	r1, r3
 8005b34:	4610      	mov	r0, r2
 8005b36:	f7ff fd3b 	bl	80055b0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3330      	adds	r3, #48	; 0x30
 8005b3e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f7ff fd31 	bl	80055b0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7858      	ldrb	r0, [r3, #1]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b66:	2301      	movs	r3, #1
 8005b68:	f7ff fc8e 	bl	8005488 <disk_write>
			fs->fsi_flag = 0;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2200      	movs	r2, #0
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fca4 	bl	80054c8 <disk_ioctl>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <sync_fs+0xca>
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	41615252 	.word	0x41615252
 8005b98:	61417272 	.word	0x61417272

08005b9c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	3b02      	subs	r3, #2
 8005baa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	3b02      	subs	r3, #2
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d301      	bcc.n	8005bbc <clust2sect+0x20>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e008      	b.n	8005bce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	895b      	ldrh	r3, [r3, #10]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	fb03 f202 	mul.w	r2, r3, r2
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	4413      	add	r3, r2
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b086      	sub	sp, #24
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d904      	bls.n	8005bfa <get_fat+0x20>
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e08f      	b.n	8005d20 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005c00:	f04f 33ff 	mov.w	r3, #4294967295
 8005c04:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d062      	beq.n	8005cd4 <get_fat+0xfa>
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	dc7c      	bgt.n	8005d0c <get_fat+0x132>
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d002      	beq.n	8005c1c <get_fat+0x42>
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d042      	beq.n	8005ca0 <get_fat+0xc6>
 8005c1a:	e077      	b.n	8005d0c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	085b      	lsrs	r3, r3, #1
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	0a5b      	lsrs	r3, r3, #9
 8005c32:	4413      	add	r3, r2
 8005c34:	4619      	mov	r1, r3
 8005c36:	6938      	ldr	r0, [r7, #16]
 8005c38:	f7ff ff14 	bl	8005a64 <move_window>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d167      	bne.n	8005d12 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	60fa      	str	r2, [r7, #12]
 8005c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	6a1a      	ldr	r2, [r3, #32]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	0a5b      	lsrs	r3, r3, #9
 8005c5e:	4413      	add	r3, r2
 8005c60:	4619      	mov	r1, r3
 8005c62:	6938      	ldr	r0, [r7, #16]
 8005c64:	f7ff fefe 	bl	8005a64 <move_window>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d153      	bne.n	8005d16 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <get_fat+0xbc>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	e002      	b.n	8005c9c <get_fat+0xc2>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c9c:	617b      	str	r3, [r7, #20]
			break;
 8005c9e:	e03f      	b.n	8005d20 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	4413      	add	r3, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	6938      	ldr	r0, [r7, #16]
 8005cae:	f7ff fed9 	bl	8005a64 <move_window>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d130      	bne.n	8005d1a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005cc6:	4413      	add	r3, r2
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fc1b 	bl	8005504 <ld_word>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	617b      	str	r3, [r7, #20]
			break;
 8005cd2:	e025      	b.n	8005d20 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6a1a      	ldr	r2, [r3, #32]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	09db      	lsrs	r3, r3, #7
 8005cdc:	4413      	add	r3, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6938      	ldr	r0, [r7, #16]
 8005ce2:	f7ff febf 	bl	8005a64 <move_window>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d118      	bne.n	8005d1e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005cfa:	4413      	add	r3, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fc19 	bl	8005534 <ld_dword>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d08:	617b      	str	r3, [r7, #20]
			break;
 8005d0a:	e009      	b.n	8005d20 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e006      	b.n	8005d20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d12:	bf00      	nop
 8005d14:	e004      	b.n	8005d20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d16:	bf00      	nop
 8005d18:	e002      	b.n	8005d20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d1a:	bf00      	nop
 8005d1c:	e000      	b.n	8005d20 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d1e:	bf00      	nop
		}
	}

	return val;
 8005d20:	697b      	ldr	r3, [r7, #20]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005d2a:	b590      	push	{r4, r7, lr}
 8005d2c:	b089      	sub	sp, #36	; 0x24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005d36:	2302      	movs	r3, #2
 8005d38:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	f240 80d2 	bls.w	8005ee6 <put_fat+0x1bc>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	f080 80cc 	bcs.w	8005ee6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	f000 8096 	beq.w	8005e84 <put_fat+0x15a>
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	f300 80cd 	bgt.w	8005ef8 <put_fat+0x1ce>
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d002      	beq.n	8005d68 <put_fat+0x3e>
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d06e      	beq.n	8005e44 <put_fat+0x11a>
 8005d66:	e0c7      	b.n	8005ef8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4413      	add	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1a      	ldr	r2, [r3, #32]
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	0a5b      	lsrs	r3, r3, #9
 8005d7e:	4413      	add	r3, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff fe6e 	bl	8005a64 <move_window>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d8c:	7ffb      	ldrb	r3, [r7, #31]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f040 80ab 	bne.w	8005eea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	1c59      	adds	r1, r3, #1
 8005d9e:	61b9      	str	r1, [r7, #24]
 8005da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da4:	4413      	add	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00d      	beq.n	8005dce <put_fat+0xa4>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	b25b      	sxtb	r3, r3
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	b25a      	sxtb	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	b25b      	sxtb	r3, r3
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	e001      	b.n	8005dd2 <put_fat+0xa8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	0a5b      	lsrs	r3, r3, #9
 8005de4:	4413      	add	r3, r2
 8005de6:	4619      	mov	r1, r3
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff fe3b 	bl	8005a64 <move_window>
 8005dee:	4603      	mov	r3, r0
 8005df0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005df2:	7ffb      	ldrb	r3, [r7, #31]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d17a      	bne.n	8005eee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e04:	4413      	add	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <put_fat+0xf0>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	e00e      	b.n	8005e38 <put_fat+0x10e>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b25b      	sxtb	r3, r3
 8005e20:	f023 030f 	bic.w	r3, r3, #15
 8005e24:	b25a      	sxtb	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	0a1b      	lsrs	r3, r3, #8
 8005e2a:	b25b      	sxtb	r3, r3
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	b25b      	sxtb	r3, r3
 8005e32:	4313      	orrs	r3, r2
 8005e34:	b25b      	sxtb	r3, r3
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	70da      	strb	r2, [r3, #3]
			break;
 8005e42:	e059      	b.n	8005ef8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6a1a      	ldr	r2, [r3, #32]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	0a1b      	lsrs	r3, r3, #8
 8005e4c:	4413      	add	r3, r2
 8005e4e:	4619      	mov	r1, r3
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff fe07 	bl	8005a64 <move_window>
 8005e56:	4603      	mov	r3, r0
 8005e58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e5a:	7ffb      	ldrb	r3, [r7, #31]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d148      	bne.n	8005ef2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005e6e:	4413      	add	r3, r2
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	b292      	uxth	r2, r2
 8005e74:	4611      	mov	r1, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fb7f 	bl	800557a <st_word>
			fs->wflag = 1;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	70da      	strb	r2, [r3, #3]
			break;
 8005e82:	e039      	b.n	8005ef8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1a      	ldr	r2, [r3, #32]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	09db      	lsrs	r3, r3, #7
 8005e8c:	4413      	add	r3, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff fde7 	bl	8005a64 <move_window>
 8005e96:	4603      	mov	r3, r0
 8005e98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e9a:	7ffb      	ldrb	r3, [r7, #31]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d12a      	bne.n	8005ef6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fb3c 	bl	8005534 <ld_dword>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ec2:	4323      	orrs	r3, r4
 8005ec4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ed4:	4413      	add	r3, r2
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fb69 	bl	80055b0 <st_dword>
			fs->wflag = 1;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	70da      	strb	r2, [r3, #3]
			break;
 8005ee4:	e008      	b.n	8005ef8 <put_fat+0x1ce>
		}
	}
 8005ee6:	bf00      	nop
 8005ee8:	e006      	b.n	8005ef8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005eea:	bf00      	nop
 8005eec:	e004      	b.n	8005ef8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005eee:	bf00      	nop
 8005ef0:	e002      	b.n	8005ef8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005ef2:	bf00      	nop
 8005ef4:	e000      	b.n	8005ef8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8005ef6:	bf00      	nop
	return res;
 8005ef8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3724      	adds	r7, #36	; 0x24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd90      	pop	{r4, r7, pc}

08005f02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b088      	sub	sp, #32
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	60b9      	str	r1, [r7, #8]
 8005f0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d904      	bls.n	8005f28 <remove_chain+0x26>
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d301      	bcc.n	8005f2c <remove_chain+0x2a>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e04b      	b.n	8005fc4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00c      	beq.n	8005f4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	69b8      	ldr	r0, [r7, #24]
 8005f3a:	f7ff fef6 	bl	8005d2a <put_fat>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005f42:	7ffb      	ldrb	r3, [r7, #31]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <remove_chain+0x4a>
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
 8005f4a:	e03b      	b.n	8005fc4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff fe43 	bl	8005bda <get_fat>
 8005f54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d031      	beq.n	8005fc0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <remove_chain+0x64>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e02e      	b.n	8005fc4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d101      	bne.n	8005f72 <remove_chain+0x70>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e028      	b.n	8005fc4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005f72:	2200      	movs	r2, #0
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	69b8      	ldr	r0, [r7, #24]
 8005f78:	f7ff fed7 	bl	8005d2a <put_fat>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005f80:	7ffb      	ldrb	r3, [r7, #31]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <remove_chain+0x88>
 8005f86:	7ffb      	ldrb	r3, [r7, #31]
 8005f88:	e01c      	b.n	8005fc4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	691a      	ldr	r2, [r3, #16]
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	3b02      	subs	r3, #2
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d20b      	bcs.n	8005fb0 <remove_chain+0xae>
			fs->free_clst++;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	791b      	ldrb	r3, [r3, #4]
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d3c6      	bcc.n	8005f4c <remove_chain+0x4a>
 8005fbe:	e000      	b.n	8005fc2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005fc0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10d      	bne.n	8005ffe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <create_chain+0x2c>
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d31b      	bcc.n	8006030 <create_chain+0x64>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61bb      	str	r3, [r7, #24]
 8005ffc:	e018      	b.n	8006030 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005ffe:	6839      	ldr	r1, [r7, #0]
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fdea 	bl	8005bda <get_fat>
 8006006:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d801      	bhi.n	8006012 <create_chain+0x46>
 800600e:	2301      	movs	r3, #1
 8006010:	e070      	b.n	80060f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d101      	bne.n	800601e <create_chain+0x52>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	e06a      	b.n	80060f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	429a      	cmp	r2, r3
 8006026:	d201      	bcs.n	800602c <create_chain+0x60>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	e063      	b.n	80060f4 <create_chain+0x128>
		scl = clst;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	429a      	cmp	r2, r3
 8006042:	d307      	bcc.n	8006054 <create_chain+0x88>
				ncl = 2;
 8006044:	2302      	movs	r3, #2
 8006046:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	429a      	cmp	r2, r3
 800604e:	d901      	bls.n	8006054 <create_chain+0x88>
 8006050:	2300      	movs	r3, #0
 8006052:	e04f      	b.n	80060f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006054:	69f9      	ldr	r1, [r7, #28]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fdbf 	bl	8005bda <get_fat>
 800605c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00e      	beq.n	8006082 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d003      	beq.n	8006072 <create_chain+0xa6>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d101      	bne.n	8006076 <create_chain+0xaa>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	e03e      	b.n	80060f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	429a      	cmp	r2, r3
 800607c:	d1da      	bne.n	8006034 <create_chain+0x68>
 800607e:	2300      	movs	r3, #0
 8006080:	e038      	b.n	80060f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006082:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006084:	f04f 32ff 	mov.w	r2, #4294967295
 8006088:	69f9      	ldr	r1, [r7, #28]
 800608a:	6938      	ldr	r0, [r7, #16]
 800608c:	f7ff fe4d 	bl	8005d2a <put_fat>
 8006090:	4603      	mov	r3, r0
 8006092:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <create_chain+0xe2>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6938      	ldr	r0, [r7, #16]
 80060a6:	f7ff fe40 	bl	8005d2a <put_fat>
 80060aa:	4603      	mov	r3, r0
 80060ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d116      	bne.n	80060e2 <create_chain+0x116>
		fs->last_clst = ncl;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	3b02      	subs	r3, #2
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d804      	bhi.n	80060d2 <create_chain+0x106>
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	791b      	ldrb	r3, [r3, #4]
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	711a      	strb	r2, [r3, #4]
 80060e0:	e007      	b.n	80060f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d102      	bne.n	80060ee <create_chain+0x122>
 80060e8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ec:	e000      	b.n	80060f0 <create_chain+0x124>
 80060ee:	2301      	movs	r3, #1
 80060f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80060f2:	69fb      	ldr	r3, [r7, #28]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3720      	adds	r7, #32
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	3304      	adds	r3, #4
 8006112:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	0a5b      	lsrs	r3, r3, #9
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	8952      	ldrh	r2, [r2, #10]
 800611c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006120:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1d1a      	adds	r2, r3, #4
 8006126:	613a      	str	r2, [r7, #16]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <clmt_clust+0x3a>
 8006132:	2300      	movs	r3, #0
 8006134:	e010      	b.n	8006158 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	429a      	cmp	r2, r3
 800613c:	d307      	bcc.n	800614e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	3304      	adds	r3, #4
 800614a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800614c:	e7e9      	b.n	8006122 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800614e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	4413      	add	r3, r2
}
 8006158:	4618      	mov	r0, r3
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800617a:	d204      	bcs.n	8006186 <dir_sdi+0x22>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006186:	2302      	movs	r3, #2
 8006188:	e063      	b.n	8006252 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <dir_sdi+0x46>
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d902      	bls.n	80061aa <dir_sdi+0x46>
		clst = fs->dirbase;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10c      	bne.n	80061ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	8912      	ldrh	r2, [r2, #8]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d301      	bcc.n	80061c0 <dir_sdi+0x5c>
 80061bc:	2302      	movs	r3, #2
 80061be:	e048      	b.n	8006252 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	61da      	str	r2, [r3, #28]
 80061c8:	e029      	b.n	800621e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	895b      	ldrh	r3, [r3, #10]
 80061ce:	025b      	lsls	r3, r3, #9
 80061d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80061d2:	e019      	b.n	8006208 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6979      	ldr	r1, [r7, #20]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fcfe 	bl	8005bda <get_fat>
 80061de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d101      	bne.n	80061ec <dir_sdi+0x88>
 80061e8:	2301      	movs	r3, #1
 80061ea:	e032      	b.n	8006252 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d904      	bls.n	80061fc <dir_sdi+0x98>
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d301      	bcc.n	8006200 <dir_sdi+0x9c>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e028      	b.n	8006252 <dir_sdi+0xee>
			ofs -= csz;
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	429a      	cmp	r2, r3
 800620e:	d2e1      	bcs.n	80061d4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006210:	6979      	ldr	r1, [r7, #20]
 8006212:	6938      	ldr	r0, [r7, #16]
 8006214:	f7ff fcc2 	bl	8005b9c <clust2sect>
 8006218:	4602      	mov	r2, r0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <dir_sdi+0xcc>
 800622c:	2302      	movs	r3, #2
 800622e:	e010      	b.n	8006252 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	0a5b      	lsrs	r3, r3, #9
 8006238:	441a      	add	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624a:	441a      	add	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b086      	sub	sp, #24
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	3320      	adds	r3, #32
 8006270:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <dir_next+0x28>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006280:	d301      	bcc.n	8006286 <dir_next+0x2c>
 8006282:	2304      	movs	r3, #4
 8006284:	e0aa      	b.n	80063dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628c:	2b00      	cmp	r3, #0
 800628e:	f040 8098 	bne.w	80063c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	8912      	ldrh	r2, [r2, #8]
 80062ac:	4293      	cmp	r3, r2
 80062ae:	f0c0 8088 	bcc.w	80063c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	61da      	str	r2, [r3, #28]
 80062b8:	2304      	movs	r3, #4
 80062ba:	e08f      	b.n	80063dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	0a5b      	lsrs	r3, r3, #9
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	8952      	ldrh	r2, [r2, #10]
 80062c4:	3a01      	subs	r2, #1
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d17a      	bne.n	80063c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f7ff fc80 	bl	8005bda <get_fat>
 80062da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d801      	bhi.n	80062e6 <dir_next+0x8c>
 80062e2:	2302      	movs	r3, #2
 80062e4:	e07a      	b.n	80063dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d101      	bne.n	80062f2 <dir_next+0x98>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e074      	b.n	80063dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d358      	bcc.n	80063ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	61da      	str	r2, [r3, #28]
 8006308:	2304      	movs	r3, #4
 800630a:	e067      	b.n	80063dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f7ff fe59 	bl	8005fcc <create_chain>
 800631a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <dir_next+0xcc>
 8006322:	2307      	movs	r3, #7
 8006324:	e05a      	b.n	80063dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <dir_next+0xd6>
 800632c:	2302      	movs	r3, #2
 800632e:	e055      	b.n	80063dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006336:	d101      	bne.n	800633c <dir_next+0xe2>
 8006338:	2301      	movs	r3, #1
 800633a:	e04f      	b.n	80063dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff fb4d 	bl	80059dc <sync_window>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <dir_next+0xf2>
 8006348:	2301      	movs	r3, #1
 800634a:	e047      	b.n	80063dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3330      	adds	r3, #48	; 0x30
 8006350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff f977 	bl	800564a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	6979      	ldr	r1, [r7, #20]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff fc1a 	bl	8005b9c <clust2sect>
 8006368:	4602      	mov	r2, r0
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	62da      	str	r2, [r3, #44]	; 0x2c
 800636e:	e012      	b.n	8006396 <dir_next+0x13c>
						fs->wflag = 1;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff fb30 	bl	80059dc <sync_window>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <dir_next+0x12c>
 8006382:	2301      	movs	r3, #1
 8006384:	e02a      	b.n	80063dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	3301      	adds	r3, #1
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	62da      	str	r2, [r3, #44]	; 0x2c
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	895b      	ldrh	r3, [r3, #10]
 800639a:	461a      	mov	r2, r3
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4293      	cmp	r3, r2
 80063a0:	d3e6      	bcc.n	8006370 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad2      	subs	r2, r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff fbf0 	bl	8005b9c <clust2sect>
 80063bc:	4602      	mov	r2, r0
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d4:	441a      	add	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80063f4:	2100      	movs	r1, #0
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff feb4 	bl	8006164 <dir_sdi>
 80063fc:	4603      	mov	r3, r0
 80063fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006400:	7dfb      	ldrb	r3, [r7, #23]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d12b      	bne.n	800645e <dir_alloc+0x7a>
		n = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	4619      	mov	r1, r3
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff fb27 	bl	8005a64 <move_window>
 8006416:	4603      	mov	r3, r0
 8006418:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d11d      	bne.n	800645c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2be5      	cmp	r3, #229	; 0xe5
 8006428:	d004      	beq.n	8006434 <dir_alloc+0x50>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d107      	bne.n	8006444 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	3301      	adds	r3, #1
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d102      	bne.n	8006448 <dir_alloc+0x64>
 8006442:	e00c      	b.n	800645e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006448:	2101      	movs	r1, #1
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff ff05 	bl	800625a <dir_next>
 8006450:	4603      	mov	r3, r0
 8006452:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0d7      	beq.n	800640a <dir_alloc+0x26>
 800645a:	e000      	b.n	800645e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800645c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d101      	bne.n	8006468 <dir_alloc+0x84>
 8006464:	2307      	movs	r3, #7
 8006466:	75fb      	strb	r3, [r7, #23]
	return res;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	331a      	adds	r3, #26
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff f83f 	bl	8005504 <ld_word>
 8006486:	4603      	mov	r3, r0
 8006488:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b03      	cmp	r3, #3
 8006490:	d109      	bne.n	80064a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	3314      	adds	r3, #20
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff f834 	bl	8005504 <ld_word>
 800649c:	4603      	mov	r3, r0
 800649e:	041b      	lsls	r3, r3, #16
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80064a6:	68fb      	ldr	r3, [r7, #12]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	331a      	adds	r3, #26
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	b292      	uxth	r2, r2
 80064c4:	4611      	mov	r1, r2
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff f857 	bl	800557a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d109      	bne.n	80064e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f103 0214 	add.w	r2, r3, #20
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	0c1b      	lsrs	r3, r3, #16
 80064de:	b29b      	uxth	r3, r3
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f7ff f849 	bl	800557a <st_word>
	}
}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80064fe:	2100      	movs	r1, #0
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff fe2f 	bl	8006164 <dir_sdi>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <dir_find+0x24>
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	e03e      	b.n	8006592 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	4619      	mov	r1, r3
 800651a:	6938      	ldr	r0, [r7, #16]
 800651c:	f7ff faa2 	bl	8005a64 <move_window>
 8006520:	4603      	mov	r3, r0
 8006522:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d12f      	bne.n	800658a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d102      	bne.n	800653e <dir_find+0x4e>
 8006538:	2304      	movs	r3, #4
 800653a:	75fb      	strb	r3, [r7, #23]
 800653c:	e028      	b.n	8006590 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	330b      	adds	r3, #11
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800654a:	b2da      	uxtb	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	330b      	adds	r3, #11
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <dir_find+0x86>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a18      	ldr	r0, [r3, #32]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3324      	adds	r3, #36	; 0x24
 8006568:	220b      	movs	r2, #11
 800656a:	4619      	mov	r1, r3
 800656c:	f7ff f888 	bl	8005680 <mem_cmp>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006576:	2100      	movs	r1, #0
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff fe6e 	bl	800625a <dir_next>
 800657e:	4603      	mov	r3, r0
 8006580:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0c5      	beq.n	8006514 <dir_find+0x24>
 8006588:	e002      	b.n	8006590 <dir_find+0xa0>
		if (res != FR_OK) break;
 800658a:	bf00      	nop
 800658c:	e000      	b.n	8006590 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800658e:	bf00      	nop

	return res;
 8006590:	7dfb      	ldrb	r3, [r7, #23]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80065a8:	2101      	movs	r1, #1
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff ff1a 	bl	80063e4 <dir_alloc>
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d11c      	bne.n	80065f4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	4619      	mov	r1, r3
 80065c0:	68b8      	ldr	r0, [r7, #8]
 80065c2:	f7ff fa4f 	bl	8005a64 <move_window>
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d111      	bne.n	80065f4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	2220      	movs	r2, #32
 80065d6:	2100      	movs	r1, #0
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff f836 	bl	800564a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a18      	ldr	r0, [r3, #32]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3324      	adds	r3, #36	; 0x24
 80065e6:	220b      	movs	r2, #11
 80065e8:	4619      	mov	r1, r3
 80065ea:	f7ff f80d 	bl	8005608 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	2201      	movs	r2, #1
 80065f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3324      	adds	r3, #36	; 0x24
 8006614:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006616:	220b      	movs	r2, #11
 8006618:	2120      	movs	r1, #32
 800661a:	68b8      	ldr	r0, [r7, #8]
 800661c:	f7ff f815 	bl	800564a <mem_set>
	si = i = 0; ni = 8;
 8006620:	2300      	movs	r3, #0
 8006622:	613b      	str	r3, [r7, #16]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	2308      	movs	r3, #8
 800662a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	61fa      	str	r2, [r7, #28]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800663a:	7efb      	ldrb	r3, [r7, #27]
 800663c:	2b20      	cmp	r3, #32
 800663e:	d94e      	bls.n	80066de <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006640:	7efb      	ldrb	r3, [r7, #27]
 8006642:	2b2f      	cmp	r3, #47	; 0x2f
 8006644:	d006      	beq.n	8006654 <create_name+0x54>
 8006646:	7efb      	ldrb	r3, [r7, #27]
 8006648:	2b5c      	cmp	r3, #92	; 0x5c
 800664a:	d110      	bne.n	800666e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800664c:	e002      	b.n	8006654 <create_name+0x54>
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	3301      	adds	r3, #1
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b2f      	cmp	r3, #47	; 0x2f
 800665e:	d0f6      	beq.n	800664e <create_name+0x4e>
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b5c      	cmp	r3, #92	; 0x5c
 800666a:	d0f0      	beq.n	800664e <create_name+0x4e>
			break;
 800666c:	e038      	b.n	80066e0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800666e:	7efb      	ldrb	r3, [r7, #27]
 8006670:	2b2e      	cmp	r3, #46	; 0x2e
 8006672:	d003      	beq.n	800667c <create_name+0x7c>
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	429a      	cmp	r2, r3
 800667a:	d30c      	bcc.n	8006696 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2b0b      	cmp	r3, #11
 8006680:	d002      	beq.n	8006688 <create_name+0x88>
 8006682:	7efb      	ldrb	r3, [r7, #27]
 8006684:	2b2e      	cmp	r3, #46	; 0x2e
 8006686:	d001      	beq.n	800668c <create_name+0x8c>
 8006688:	2306      	movs	r3, #6
 800668a:	e044      	b.n	8006716 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800668c:	2308      	movs	r3, #8
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	230b      	movs	r3, #11
 8006692:	617b      	str	r3, [r7, #20]
			continue;
 8006694:	e022      	b.n	80066dc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006696:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800669a:	2b00      	cmp	r3, #0
 800669c:	da04      	bge.n	80066a8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800669e:	7efb      	ldrb	r3, [r7, #27]
 80066a0:	3b80      	subs	r3, #128	; 0x80
 80066a2:	4a1f      	ldr	r2, [pc, #124]	; (8006720 <create_name+0x120>)
 80066a4:	5cd3      	ldrb	r3, [r2, r3]
 80066a6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80066a8:	7efb      	ldrb	r3, [r7, #27]
 80066aa:	4619      	mov	r1, r3
 80066ac:	481d      	ldr	r0, [pc, #116]	; (8006724 <create_name+0x124>)
 80066ae:	f7ff f80e 	bl	80056ce <chk_chr>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <create_name+0xbc>
 80066b8:	2306      	movs	r3, #6
 80066ba:	e02c      	b.n	8006716 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80066bc:	7efb      	ldrb	r3, [r7, #27]
 80066be:	2b60      	cmp	r3, #96	; 0x60
 80066c0:	d905      	bls.n	80066ce <create_name+0xce>
 80066c2:	7efb      	ldrb	r3, [r7, #27]
 80066c4:	2b7a      	cmp	r3, #122	; 0x7a
 80066c6:	d802      	bhi.n	80066ce <create_name+0xce>
 80066c8:	7efb      	ldrb	r3, [r7, #27]
 80066ca:	3b20      	subs	r3, #32
 80066cc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	613a      	str	r2, [r7, #16]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	4413      	add	r3, r2
 80066d8:	7efa      	ldrb	r2, [r7, #27]
 80066da:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80066dc:	e7a6      	b.n	800662c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80066de:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	441a      	add	r2, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <create_name+0xf4>
 80066f0:	2306      	movs	r3, #6
 80066f2:	e010      	b.n	8006716 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2be5      	cmp	r3, #229	; 0xe5
 80066fa:	d102      	bne.n	8006702 <create_name+0x102>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2205      	movs	r2, #5
 8006700:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006702:	7efb      	ldrb	r3, [r7, #27]
 8006704:	2b20      	cmp	r3, #32
 8006706:	d801      	bhi.n	800670c <create_name+0x10c>
 8006708:	2204      	movs	r2, #4
 800670a:	e000      	b.n	800670e <create_name+0x10e>
 800670c:	2200      	movs	r2, #0
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	330b      	adds	r3, #11
 8006712:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006714:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006716:	4618      	mov	r0, r3
 8006718:	3720      	adds	r7, #32
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	0800897c 	.word	0x0800897c
 8006724:	0800890c 	.word	0x0800890c

08006728 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800673c:	e002      	b.n	8006744 <follow_path+0x1c>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b2f      	cmp	r3, #47	; 0x2f
 800674a:	d0f8      	beq.n	800673e <follow_path+0x16>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b5c      	cmp	r3, #92	; 0x5c
 8006752:	d0f4      	beq.n	800673e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2200      	movs	r2, #0
 8006758:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b1f      	cmp	r3, #31
 8006760:	d80a      	bhi.n	8006778 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2280      	movs	r2, #128	; 0x80
 8006766:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800676a:	2100      	movs	r1, #0
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff fcf9 	bl	8006164 <dir_sdi>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]
 8006776:	e043      	b.n	8006800 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006778:	463b      	mov	r3, r7
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff ff3f 	bl	8006600 <create_name>
 8006782:	4603      	mov	r3, r0
 8006784:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d134      	bne.n	80067f6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff feaf 	bl	80064f0 <dir_find>
 8006792:	4603      	mov	r3, r0
 8006794:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800679c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00a      	beq.n	80067ba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d127      	bne.n	80067fa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80067aa:	7afb      	ldrb	r3, [r7, #11]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d122      	bne.n	80067fa <follow_path+0xd2>
 80067b4:	2305      	movs	r3, #5
 80067b6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80067b8:	e01f      	b.n	80067fa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067ba:	7afb      	ldrb	r3, [r7, #11]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d11c      	bne.n	80067fe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	799b      	ldrb	r3, [r3, #6]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80067d0:	2305      	movs	r3, #5
 80067d2:	75fb      	strb	r3, [r7, #23]
 80067d4:	e014      	b.n	8006800 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e4:	4413      	add	r3, r2
 80067e6:	4619      	mov	r1, r3
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff fe42 	bl	8006472 <ld_clust>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067f4:	e7c0      	b.n	8006778 <follow_path+0x50>
			if (res != FR_OK) break;
 80067f6:	bf00      	nop
 80067f8:	e002      	b.n	8006800 <follow_path+0xd8>
				break;
 80067fa:	bf00      	nop
 80067fc:	e000      	b.n	8006800 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067fe:	bf00      	nop
			}
		}
	}

	return res;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800680a:	b480      	push	{r7}
 800680c:	b087      	sub	sp, #28
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006812:	f04f 33ff 	mov.w	r3, #4294967295
 8006816:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d031      	beq.n	8006884 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	e002      	b.n	800682e <get_ldnumber+0x24>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	3301      	adds	r3, #1
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b20      	cmp	r3, #32
 8006834:	d903      	bls.n	800683e <get_ldnumber+0x34>
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b3a      	cmp	r3, #58	; 0x3a
 800683c:	d1f4      	bne.n	8006828 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b3a      	cmp	r3, #58	; 0x3a
 8006844:	d11c      	bne.n	8006880 <get_ldnumber+0x76>
			tp = *path;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	60fa      	str	r2, [r7, #12]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	3b30      	subs	r3, #48	; 0x30
 8006856:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b09      	cmp	r3, #9
 800685c:	d80e      	bhi.n	800687c <get_ldnumber+0x72>
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	429a      	cmp	r2, r3
 8006864:	d10a      	bne.n	800687c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <get_ldnumber+0x72>
					vol = (int)i;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	3301      	adds	r3, #1
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	e002      	b.n	8006886 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006880:	2300      	movs	r3, #0
 8006882:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006884:	693b      	ldr	r3, [r7, #16]
}
 8006886:	4618      	mov	r0, r3
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	70da      	strb	r2, [r3, #3]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f04f 32ff 	mov.w	r2, #4294967295
 80068aa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff f8d8 	bl	8005a64 <move_window>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <check_fs+0x2a>
 80068ba:	2304      	movs	r3, #4
 80068bc:	e038      	b.n	8006930 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3330      	adds	r3, #48	; 0x30
 80068c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fe1c 	bl	8005504 <ld_word>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d001      	beq.n	80068dc <check_fs+0x48>
 80068d8:	2303      	movs	r3, #3
 80068da:	e029      	b.n	8006930 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068e2:	2be9      	cmp	r3, #233	; 0xe9
 80068e4:	d009      	beq.n	80068fa <check_fs+0x66>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068ec:	2beb      	cmp	r3, #235	; 0xeb
 80068ee:	d11e      	bne.n	800692e <check_fs+0x9a>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80068f6:	2b90      	cmp	r3, #144	; 0x90
 80068f8:	d119      	bne.n	800692e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3330      	adds	r3, #48	; 0x30
 80068fe:	3336      	adds	r3, #54	; 0x36
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe fe17 	bl	8005534 <ld_dword>
 8006906:	4603      	mov	r3, r0
 8006908:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800690c:	4a0a      	ldr	r2, [pc, #40]	; (8006938 <check_fs+0xa4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d101      	bne.n	8006916 <check_fs+0x82>
 8006912:	2300      	movs	r3, #0
 8006914:	e00c      	b.n	8006930 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3330      	adds	r3, #48	; 0x30
 800691a:	3352      	adds	r3, #82	; 0x52
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe fe09 	bl	8005534 <ld_dword>
 8006922:	4603      	mov	r3, r0
 8006924:	4a05      	ldr	r2, [pc, #20]	; (800693c <check_fs+0xa8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d101      	bne.n	800692e <check_fs+0x9a>
 800692a:	2300      	movs	r3, #0
 800692c:	e000      	b.n	8006930 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800692e:	2302      	movs	r3, #2
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	00544146 	.word	0x00544146
 800693c:	33544146 	.word	0x33544146

08006940 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b096      	sub	sp, #88	; 0x58
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7ff ff58 	bl	800680a <get_ldnumber>
 800695a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800695c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695e:	2b00      	cmp	r3, #0
 8006960:	da01      	bge.n	8006966 <find_volume+0x26>
 8006962:	230b      	movs	r3, #11
 8006964:	e22d      	b.n	8006dc2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006966:	4aa1      	ldr	r2, [pc, #644]	; (8006bec <find_volume+0x2ac>)
 8006968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800696e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <find_volume+0x3a>
 8006976:	230c      	movs	r3, #12
 8006978:	e223      	b.n	8006dc2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800697e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01a      	beq.n	80069c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe fd17 	bl	80053c8 <disk_status>
 800699a:	4603      	mov	r3, r0
 800699c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80069a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10c      	bne.n	80069c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d007      	beq.n	80069c2 <find_volume+0x82>
 80069b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069b6:	f003 0304 	and.w	r3, r3, #4
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80069be:	230a      	movs	r3, #10
 80069c0:	e1ff      	b.n	8006dc2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80069c2:	2300      	movs	r3, #0
 80069c4:	e1fd      	b.n	8006dc2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80069cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe fd0f 	bl	80053fc <disk_initialize>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80069e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80069f0:	2303      	movs	r3, #3
 80069f2:	e1e6      	b.n	8006dc2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <find_volume+0xca>
 80069fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006a06:	230a      	movs	r3, #10
 8006a08:	e1db      	b.n	8006dc2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006a0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a12:	f7ff ff3f 	bl	8006894 <check_fs>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006a1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d149      	bne.n	8006ab8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a24:	2300      	movs	r3, #0
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40
 8006a28:	e01e      	b.n	8006a68 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006a38:	4413      	add	r3, r2
 8006a3a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	3304      	adds	r3, #4
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d006      	beq.n	8006a54 <find_volume+0x114>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	3308      	adds	r3, #8
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe fd72 	bl	8005534 <ld_dword>
 8006a50:	4602      	mov	r2, r0
 8006a52:	e000      	b.n	8006a56 <find_volume+0x116>
 8006a54:	2200      	movs	r2, #0
 8006a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	3358      	adds	r3, #88	; 0x58
 8006a5c:	443b      	add	r3, r7
 8006a5e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a64:	3301      	adds	r3, #1
 8006a66:	643b      	str	r3, [r7, #64]	; 0x40
 8006a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	d9dd      	bls.n	8006a2a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006a6e:	2300      	movs	r3, #0
 8006a70:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <find_volume+0x13e>
 8006a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	3358      	adds	r3, #88	; 0x58
 8006a84:	443b      	add	r3, r7
 8006a86:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006a8a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d005      	beq.n	8006a9e <find_volume+0x15e>
 8006a92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a96:	f7ff fefd 	bl	8006894 <check_fs>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	e000      	b.n	8006aa0 <find_volume+0x160>
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d905      	bls.n	8006ab8 <find_volume+0x178>
 8006aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aae:	3301      	adds	r3, #1
 8006ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d9e2      	bls.n	8006a7e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ab8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d101      	bne.n	8006ac4 <find_volume+0x184>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e17e      	b.n	8006dc2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006ac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d901      	bls.n	8006ad0 <find_volume+0x190>
 8006acc:	230d      	movs	r3, #13
 8006ace:	e178      	b.n	8006dc2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	3330      	adds	r3, #48	; 0x30
 8006ad4:	330b      	adds	r3, #11
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fd14 	bl	8005504 <ld_word>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae2:	d001      	beq.n	8006ae8 <find_volume+0x1a8>
 8006ae4:	230d      	movs	r3, #13
 8006ae6:	e16c      	b.n	8006dc2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	3330      	adds	r3, #48	; 0x30
 8006aec:	3316      	adds	r3, #22
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe fd08 	bl	8005504 <ld_word>
 8006af4:	4603      	mov	r3, r0
 8006af6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <find_volume+0x1cc>
 8006afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b00:	3330      	adds	r3, #48	; 0x30
 8006b02:	3324      	adds	r3, #36	; 0x24
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fe fd15 	bl	8005534 <ld_dword>
 8006b0a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b10:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	789b      	ldrb	r3, [r3, #2]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d005      	beq.n	8006b30 <find_volume+0x1f0>
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	789b      	ldrb	r3, [r3, #2]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d001      	beq.n	8006b30 <find_volume+0x1f0>
 8006b2c:	230d      	movs	r3, #13
 8006b2e:	e148      	b.n	8006dc2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	789b      	ldrb	r3, [r3, #2]
 8006b34:	461a      	mov	r2, r3
 8006b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b38:	fb02 f303 	mul.w	r3, r2, r3
 8006b3c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	895b      	ldrh	r3, [r3, #10]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <find_volume+0x224>
 8006b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b54:	895b      	ldrh	r3, [r3, #10]
 8006b56:	461a      	mov	r2, r3
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	895b      	ldrh	r3, [r3, #10]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <find_volume+0x228>
 8006b64:	230d      	movs	r3, #13
 8006b66:	e12c      	b.n	8006dc2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	3330      	adds	r3, #48	; 0x30
 8006b6c:	3311      	adds	r3, #17
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fcc8 	bl	8005504 <ld_word>
 8006b74:	4603      	mov	r3, r0
 8006b76:	461a      	mov	r2, r3
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	891b      	ldrh	r3, [r3, #8]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <find_volume+0x24e>
 8006b8a:	230d      	movs	r3, #13
 8006b8c:	e119      	b.n	8006dc2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	3330      	adds	r3, #48	; 0x30
 8006b92:	3313      	adds	r3, #19
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe fcb5 	bl	8005504 <ld_word>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <find_volume+0x272>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	3330      	adds	r3, #48	; 0x30
 8006ba8:	3320      	adds	r3, #32
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe fcc2 	bl	8005534 <ld_dword>
 8006bb0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb4:	3330      	adds	r3, #48	; 0x30
 8006bb6:	330e      	adds	r3, #14
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe fca3 	bl	8005504 <ld_word>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006bc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <find_volume+0x28c>
 8006bc8:	230d      	movs	r3, #13
 8006bca:	e0fa      	b.n	8006dc2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006bcc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd0:	4413      	add	r3, r2
 8006bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bd4:	8912      	ldrh	r2, [r2, #8]
 8006bd6:	0912      	lsrs	r2, r2, #4
 8006bd8:	b292      	uxth	r2, r2
 8006bda:	4413      	add	r3, r2
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d204      	bcs.n	8006bf0 <find_volume+0x2b0>
 8006be6:	230d      	movs	r3, #13
 8006be8:	e0eb      	b.n	8006dc2 <find_volume+0x482>
 8006bea:	bf00      	nop
 8006bec:	20000648 	.word	0x20000648
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bf8:	8952      	ldrh	r2, [r2, #10]
 8006bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <find_volume+0x2ca>
 8006c06:	230d      	movs	r3, #13
 8006c08:	e0db      	b.n	8006dc2 <find_volume+0x482>
		fmt = FS_FAT32;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d802      	bhi.n	8006c20 <find_volume+0x2e0>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d802      	bhi.n	8006c30 <find_volume+0x2f0>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	1c9a      	adds	r2, r3, #2
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c3c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006c3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c42:	441a      	add	r2, r3
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006c48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	441a      	add	r2, r3
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d11e      	bne.n	8006c98 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	3330      	adds	r3, #48	; 0x30
 8006c5e:	332a      	adds	r3, #42	; 0x2a
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fe fc4f 	bl	8005504 <ld_word>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <find_volume+0x330>
 8006c6c:	230d      	movs	r3, #13
 8006c6e:	e0a8      	b.n	8006dc2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	891b      	ldrh	r3, [r3, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <find_volume+0x33c>
 8006c78:	230d      	movs	r3, #13
 8006c7a:	e0a2      	b.n	8006dc2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7e:	3330      	adds	r3, #48	; 0x30
 8006c80:	332c      	adds	r3, #44	; 0x2c
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fc56 	bl	8005534 <ld_dword>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	647b      	str	r3, [r7, #68]	; 0x44
 8006c96:	e01f      	b.n	8006cd8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	891b      	ldrh	r3, [r3, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <find_volume+0x364>
 8006ca0:	230d      	movs	r3, #13
 8006ca2:	e08e      	b.n	8006dc2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	6a1a      	ldr	r2, [r3, #32]
 8006ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006caa:	441a      	add	r2, r3
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d103      	bne.n	8006cc0 <find_volume+0x380>
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	e00a      	b.n	8006cd6 <find_volume+0x396>
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	695a      	ldr	r2, [r3, #20]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	4413      	add	r3, r2
 8006cca:	085a      	lsrs	r2, r3, #1
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006cd6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cde:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006ce2:	0a5b      	lsrs	r3, r3, #9
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d201      	bcs.n	8006cec <find_volume+0x3ac>
 8006ce8:	230d      	movs	r3, #13
 8006cea:	e06a      	b.n	8006dc2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf2:	611a      	str	r2, [r3, #16]
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfe:	2280      	movs	r2, #128	; 0x80
 8006d00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006d02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d149      	bne.n	8006d9e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0c:	3330      	adds	r3, #48	; 0x30
 8006d0e:	3330      	adds	r3, #48	; 0x30
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe fbf7 	bl	8005504 <ld_word>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d140      	bne.n	8006d9e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1e:	3301      	adds	r3, #1
 8006d20:	4619      	mov	r1, r3
 8006d22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d24:	f7fe fe9e 	bl	8005a64 <move_window>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d137      	bne.n	8006d9e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	2200      	movs	r2, #0
 8006d32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	3330      	adds	r3, #48	; 0x30
 8006d38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe fbe1 	bl	8005504 <ld_word>
 8006d42:	4603      	mov	r3, r0
 8006d44:	461a      	mov	r2, r3
 8006d46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d127      	bne.n	8006d9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	3330      	adds	r3, #48	; 0x30
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fbee 	bl	8005534 <ld_dword>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4a1c      	ldr	r2, [pc, #112]	; (8006dcc <find_volume+0x48c>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d11e      	bne.n	8006d9e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	3330      	adds	r3, #48	; 0x30
 8006d64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe fbe3 	bl	8005534 <ld_dword>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4a17      	ldr	r2, [pc, #92]	; (8006dd0 <find_volume+0x490>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d113      	bne.n	8006d9e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	3330      	adds	r3, #48	; 0x30
 8006d7a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fbd8 	bl	8005534 <ld_dword>
 8006d84:	4602      	mov	r2, r0
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	3330      	adds	r3, #48	; 0x30
 8006d8e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fe fbce 	bl	8005534 <ld_dword>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006da4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <find_volume+0x494>)
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	3301      	adds	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <find_volume+0x494>)
 8006db0:	801a      	strh	r2, [r3, #0]
 8006db2:	4b08      	ldr	r3, [pc, #32]	; (8006dd4 <find_volume+0x494>)
 8006db4:	881a      	ldrh	r2, [r3, #0]
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006dba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dbc:	f7fe fdea 	bl	8005994 <clear_lock>
#endif
	return FR_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3758      	adds	r7, #88	; 0x58
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	41615252 	.word	0x41615252
 8006dd0:	61417272 	.word	0x61417272
 8006dd4:	2000064c 	.word	0x2000064c

08006dd8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006de2:	2309      	movs	r3, #9
 8006de4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01c      	beq.n	8006e26 <validate+0x4e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d018      	beq.n	8006e26 <validate+0x4e>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d013      	beq.n	8006e26 <validate+0x4e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	889a      	ldrh	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	88db      	ldrh	r3, [r3, #6]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d10c      	bne.n	8006e26 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fad8 	bl	80053c8 <disk_status>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <validate+0x4e>
			res = FR_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <validate+0x5a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	e000      	b.n	8006e34 <validate+0x5c>
 8006e32:	2300      	movs	r3, #0
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	6013      	str	r3, [r2, #0]
	return res;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e56:	f107 0310 	add.w	r3, r7, #16
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff fcd5 	bl	800680a <get_ldnumber>
 8006e60:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da01      	bge.n	8006e6c <f_mount+0x28>
 8006e68:	230b      	movs	r3, #11
 8006e6a:	e02b      	b.n	8006ec4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e6c:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <f_mount+0x88>)
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e74:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006e7c:	69b8      	ldr	r0, [r7, #24]
 8006e7e:	f7fe fd89 	bl	8005994 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	490d      	ldr	r1, [pc, #52]	; (8006ecc <f_mount+0x88>)
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d002      	beq.n	8006eaa <f_mount+0x66>
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d001      	beq.n	8006eae <f_mount+0x6a>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e00a      	b.n	8006ec4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006eae:	f107 010c 	add.w	r1, r7, #12
 8006eb2:	f107 0308 	add.w	r3, r7, #8
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fd41 	bl	8006940 <find_volume>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3720      	adds	r7, #32
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000648 	.word	0x20000648

08006ed0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b098      	sub	sp, #96	; 0x60
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <f_open+0x18>
 8006ee4:	2309      	movs	r3, #9
 8006ee6:	e1ad      	b.n	8007244 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006ef0:	79fa      	ldrb	r2, [r7, #7]
 8006ef2:	f107 0110 	add.w	r1, r7, #16
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff fd20 	bl	8006940 <find_volume>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006f06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f040 8191 	bne.w	8007232 <f_open+0x362>
		dj.obj.fs = fs;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	f107 0314 	add.w	r3, r7, #20
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff fc03 	bl	8006728 <follow_path>
 8006f22:	4603      	mov	r3, r0
 8006f24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006f28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11a      	bne.n	8006f66 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006f30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da03      	bge.n	8006f42 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006f3a:	2306      	movs	r3, #6
 8006f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f40:	e011      	b.n	8006f66 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	f023 0301 	bic.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	f107 0314 	add.w	r3, r7, #20
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fbd2 	bl	8005704 <chk_lock>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f66:	79fb      	ldrb	r3, [r7, #7]
 8006f68:	f003 031c 	and.w	r3, r3, #28
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d07f      	beq.n	8007070 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006f70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d017      	beq.n	8006fa8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006f78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d10e      	bne.n	8006f9e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006f80:	f7fe fc1c 	bl	80057bc <enq_lock>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d006      	beq.n	8006f98 <f_open+0xc8>
 8006f8a:	f107 0314 	add.w	r3, r7, #20
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff fb03 	bl	800659a <dir_register>
 8006f94:	4603      	mov	r3, r0
 8006f96:	e000      	b.n	8006f9a <f_open+0xca>
 8006f98:	2312      	movs	r3, #18
 8006f9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	f043 0308 	orr.w	r3, r3, #8
 8006fa4:	71fb      	strb	r3, [r7, #7]
 8006fa6:	e010      	b.n	8006fca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006fa8:	7ebb      	ldrb	r3, [r7, #26]
 8006faa:	f003 0311 	and.w	r3, r3, #17
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <f_open+0xea>
					res = FR_DENIED;
 8006fb2:	2307      	movs	r3, #7
 8006fb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006fb8:	e007      	b.n	8006fca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d002      	beq.n	8006fca <f_open+0xfa>
 8006fc4:	2308      	movs	r3, #8
 8006fc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d168      	bne.n	80070a4 <f_open+0x1d4>
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	f003 0308 	and.w	r3, r3, #8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d063      	beq.n	80070a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006fdc:	f7fd ffa4 	bl	8004f28 <get_fattime>
 8006fe0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe4:	330e      	adds	r3, #14
 8006fe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fae1 	bl	80055b0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff0:	3316      	adds	r3, #22
 8006ff2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fadb 	bl	80055b0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffc:	330b      	adds	r3, #11
 8006ffe:	2220      	movs	r2, #32
 8007000:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff fa32 	bl	8006472 <ld_clust>
 800700e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007014:	2200      	movs	r2, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fa4a 	bl	80064b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800701c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800701e:	331c      	adds	r3, #28
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe fac4 	bl	80055b0 <st_dword>
					fs->wflag = 1;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	2201      	movs	r2, #1
 800702c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800702e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d037      	beq.n	80070a4 <f_open+0x1d4>
						dw = fs->winsect;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800703a:	f107 0314 	add.w	r3, r7, #20
 800703e:	2200      	movs	r2, #0
 8007040:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe ff5d 	bl	8005f02 <remove_chain>
 8007048:	4603      	mov	r3, r0
 800704a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800704e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007052:	2b00      	cmp	r3, #0
 8007054:	d126      	bne.n	80070a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fd02 	bl	8005a64 <move_window>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800706a:	3a01      	subs	r2, #1
 800706c:	60da      	str	r2, [r3, #12]
 800706e:	e019      	b.n	80070a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007070:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007074:	2b00      	cmp	r3, #0
 8007076:	d115      	bne.n	80070a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007078:	7ebb      	ldrb	r3, [r7, #26]
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007082:	2304      	movs	r3, #4
 8007084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007088:	e00c      	b.n	80070a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800708a:	79fb      	ldrb	r3, [r7, #7]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <f_open+0x1d4>
 8007094:	7ebb      	ldrb	r3, [r7, #26]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <f_open+0x1d4>
						res = FR_DENIED;
 800709e:	2307      	movs	r3, #7
 80070a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80070a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d128      	bne.n	80070fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80070ac:	79fb      	ldrb	r3, [r7, #7]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80070b6:	79fb      	ldrb	r3, [r7, #7]
 80070b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80070c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	f023 0301 	bic.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bf14      	ite	ne
 80070d6:	2301      	movne	r3, #1
 80070d8:	2300      	moveq	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	f107 0314 	add.w	r3, r7, #20
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe fb8b 	bl	8005800 <inc_lock>
 80070ea:	4602      	mov	r2, r0
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d102      	bne.n	80070fe <f_open+0x22e>
 80070f8:	2302      	movs	r3, #2
 80070fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80070fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007102:	2b00      	cmp	r3, #0
 8007104:	f040 8095 	bne.w	8007232 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800710c:	4611      	mov	r1, r2
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff f9af 	bl	8006472 <ld_clust>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800711a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711c:	331c      	adds	r3, #28
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fa08 	bl	8005534 <ld_dword>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	88da      	ldrh	r2, [r3, #6]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	79fa      	ldrb	r2, [r7, #7]
 8007142:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3330      	adds	r3, #48	; 0x30
 800715a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe fa72 	bl	800564a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d060      	beq.n	8007232 <f_open+0x362>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d05c      	beq.n	8007232 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	895b      	ldrh	r3, [r3, #10]
 8007184:	025b      	lsls	r3, r3, #9
 8007186:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	657b      	str	r3, [r7, #84]	; 0x54
 8007194:	e016      	b.n	80071c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fd1d 	bl	8005bda <get_fat>
 80071a0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80071a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d802      	bhi.n	80071ae <f_open+0x2de>
 80071a8:	2302      	movs	r3, #2
 80071aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80071ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d102      	bne.n	80071bc <f_open+0x2ec>
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80071bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	657b      	str	r3, [r7, #84]	; 0x54
 80071c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d103      	bne.n	80071d4 <f_open+0x304>
 80071cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d8e0      	bhi.n	8007196 <f_open+0x2c6>
				}
				fp->clust = clst;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80071da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d127      	bne.n	8007232 <f_open+0x362>
 80071e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d022      	beq.n	8007232 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fe fcd3 	bl	8005b9c <clust2sect>
 80071f6:	6478      	str	r0, [r7, #68]	; 0x44
 80071f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d103      	bne.n	8007206 <f_open+0x336>
						res = FR_INT_ERR;
 80071fe:	2302      	movs	r3, #2
 8007200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007204:	e015      	b.n	8007232 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007208:	0a5a      	lsrs	r2, r3, #9
 800720a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800720c:	441a      	add	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	7858      	ldrb	r0, [r3, #1]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6a1a      	ldr	r2, [r3, #32]
 8007220:	2301      	movs	r3, #1
 8007222:	f7fe f911 	bl	8005448 <disk_read>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <f_open+0x362>
 800722c:	2301      	movs	r3, #1
 800722e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007232:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <f_open+0x370>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007240:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007244:	4618      	mov	r0, r3
 8007246:	3760      	adds	r7, #96	; 0x60
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08c      	sub	sp, #48	; 0x30
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f107 0210 	add.w	r2, r7, #16
 800726a:	4611      	mov	r1, r2
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff fdb3 	bl	8006dd8 <validate>
 8007272:	4603      	mov	r3, r0
 8007274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800727c:	2b00      	cmp	r3, #0
 800727e:	d107      	bne.n	8007290 <f_write+0x44>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	7d5b      	ldrb	r3, [r3, #21]
 8007284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <f_write+0x4a>
 8007290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007294:	e14b      	b.n	800752e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	7d1b      	ldrb	r3, [r3, #20]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <f_write+0x5a>
 80072a2:	2307      	movs	r3, #7
 80072a4:	e143      	b.n	800752e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	441a      	add	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	f080 812d 	bcs.w	8007512 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	43db      	mvns	r3, r3
 80072be:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80072c0:	e127      	b.n	8007512 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f040 80e3 	bne.w	8007496 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	0a5b      	lsrs	r3, r3, #9
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	8952      	ldrh	r2, [r2, #10]
 80072da:	3a01      	subs	r2, #1
 80072dc:	4013      	ands	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d143      	bne.n	800736e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10c      	bne.n	8007308 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11a      	bne.n	8007330 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2100      	movs	r1, #0
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fe64 	bl	8005fcc <create_chain>
 8007304:	62b8      	str	r0, [r7, #40]	; 0x28
 8007306:	e013      	b.n	8007330 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	4619      	mov	r1, r3
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7fe fef0 	bl	80060fc <clmt_clust>
 800731c:	62b8      	str	r0, [r7, #40]	; 0x28
 800731e:	e007      	b.n	8007330 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	4619      	mov	r1, r3
 8007328:	4610      	mov	r0, r2
 800732a:	f7fe fe4f 	bl	8005fcc <create_chain>
 800732e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80f2 	beq.w	800751c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733a:	2b01      	cmp	r3, #1
 800733c:	d104      	bne.n	8007348 <f_write+0xfc>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2202      	movs	r2, #2
 8007342:	755a      	strb	r2, [r3, #21]
 8007344:	2302      	movs	r3, #2
 8007346:	e0f2      	b.n	800752e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d104      	bne.n	800735a <f_write+0x10e>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2201      	movs	r2, #1
 8007354:	755a      	strb	r2, [r3, #21]
 8007356:	2301      	movs	r3, #1
 8007358:	e0e9      	b.n	800752e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800735e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <f_write+0x122>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800736c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	7d1b      	ldrb	r3, [r3, #20]
 8007372:	b25b      	sxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	da18      	bge.n	80073aa <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	7858      	ldrb	r0, [r3, #1]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1a      	ldr	r2, [r3, #32]
 8007386:	2301      	movs	r3, #1
 8007388:	f7fe f87e 	bl	8005488 <disk_write>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <f_write+0x150>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2201      	movs	r2, #1
 8007396:	755a      	strb	r2, [r3, #21]
 8007398:	2301      	movs	r3, #1
 800739a:	e0c8      	b.n	800752e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	7d1b      	ldrb	r3, [r3, #20]
 80073a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f7fe fbf2 	bl	8005b9c <clust2sect>
 80073b8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d104      	bne.n	80073ca <f_write+0x17e>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2202      	movs	r2, #2
 80073c4:	755a      	strb	r2, [r3, #21]
 80073c6:	2302      	movs	r3, #2
 80073c8:	e0b1      	b.n	800752e <f_write+0x2e2>
			sect += csect;
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	4413      	add	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	0a5b      	lsrs	r3, r3, #9
 80073d6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d03c      	beq.n	8007458 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	4413      	add	r3, r2
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	8952      	ldrh	r2, [r2, #10]
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d905      	bls.n	80073f8 <f_write+0x1ac>
					cc = fs->csize - csect;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	895b      	ldrh	r3, [r3, #10]
 80073f0:	461a      	mov	r2, r3
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	7858      	ldrb	r0, [r3, #1]
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	69f9      	ldr	r1, [r7, #28]
 8007402:	f7fe f841 	bl	8005488 <disk_write>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <f_write+0x1ca>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	755a      	strb	r2, [r3, #21]
 8007412:	2301      	movs	r3, #1
 8007414:	e08b      	b.n	800752e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a1a      	ldr	r2, [r3, #32]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	6a3a      	ldr	r2, [r7, #32]
 8007420:	429a      	cmp	r2, r3
 8007422:	d915      	bls.n	8007450 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a1a      	ldr	r2, [r3, #32]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	025b      	lsls	r3, r3, #9
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800743c:	4619      	mov	r1, r3
 800743e:	f7fe f8e3 	bl	8005608 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	7d1b      	ldrb	r3, [r3, #20]
 8007446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744a:	b2da      	uxtb	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	025b      	lsls	r3, r3, #9
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007456:	e03f      	b.n	80074d8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	429a      	cmp	r2, r3
 8007460:	d016      	beq.n	8007490 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800746a:	429a      	cmp	r2, r3
 800746c:	d210      	bcs.n	8007490 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	7858      	ldrb	r0, [r3, #1]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007478:	2301      	movs	r3, #1
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	f7fd ffe4 	bl	8005448 <disk_read>
 8007480:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007482:	2b00      	cmp	r3, #0
 8007484:	d004      	beq.n	8007490 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	755a      	strb	r2, [r3, #21]
 800748c:	2301      	movs	r3, #1
 800748e:	e04e      	b.n	800752e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80074a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d901      	bls.n	80074b0 <f_write+0x264>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	4413      	add	r3, r2
 80074c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c2:	69f9      	ldr	r1, [r7, #28]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe f89f 	bl	8005608 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	7d1b      	ldrb	r3, [r3, #20]
 80074ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80074d8:	69fa      	ldr	r2, [r7, #28]
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	4413      	add	r3, r2
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	699a      	ldr	r2, [r3, #24]
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	441a      	add	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	619a      	str	r2, [r3, #24]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	bf38      	it	cc
 80074f8:	461a      	movcc	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	60da      	str	r2, [r3, #12]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	441a      	add	r2, r3
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	f47f aed4 	bne.w	80072c2 <f_write+0x76>
 800751a:	e000      	b.n	800751e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800751c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	7d1b      	ldrb	r3, [r3, #20]
 8007522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007526:	b2da      	uxtb	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3730      	adds	r7, #48	; 0x30
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f107 0208 	add.w	r2, r7, #8
 8007544:	4611      	mov	r1, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f7ff fc46 	bl	8006dd8 <validate>
 800754c:	4603      	mov	r3, r0
 800754e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007550:	7dfb      	ldrb	r3, [r7, #23]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d168      	bne.n	8007628 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	7d1b      	ldrb	r3, [r3, #20]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d062      	beq.n	8007628 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	7d1b      	ldrb	r3, [r3, #20]
 8007566:	b25b      	sxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	da15      	bge.n	8007598 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	7858      	ldrb	r0, [r3, #1]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1a      	ldr	r2, [r3, #32]
 800757a:	2301      	movs	r3, #1
 800757c:	f7fd ff84 	bl	8005488 <disk_write>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <f_sync+0x54>
 8007586:	2301      	movs	r3, #1
 8007588:	e04f      	b.n	800762a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	7d1b      	ldrb	r3, [r3, #20]
 800758e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007592:	b2da      	uxtb	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007598:	f7fd fcc6 	bl	8004f28 <get_fattime>
 800759c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	4619      	mov	r1, r3
 80075a6:	4610      	mov	r0, r2
 80075a8:	f7fe fa5c 	bl	8005a64 <move_window>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d138      	bne.n	8007628 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	330b      	adds	r3, #11
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	330b      	adds	r3, #11
 80075c6:	f042 0220 	orr.w	r2, r2, #32
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	461a      	mov	r2, r3
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	f7fe ff69 	bl	80064b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f103 021c 	add.w	r2, r3, #28
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4619      	mov	r1, r3
 80075ea:	4610      	mov	r0, r2
 80075ec:	f7fd ffe0 	bl	80055b0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3316      	adds	r3, #22
 80075f4:	6939      	ldr	r1, [r7, #16]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fd ffda 	bl	80055b0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3312      	adds	r3, #18
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f7fd ffb9 	bl	800557a <st_word>
					fs->wflag = 1;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2201      	movs	r2, #1
 800760c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fa55 	bl	8005ac0 <sync_fs>
 8007616:	4603      	mov	r3, r0
 8007618:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	7d1b      	ldrb	r3, [r3, #20]
 800761e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007622:	b2da      	uxtb	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007628:	7dfb      	ldrb	r3, [r7, #23]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff ff7b 	bl	8007536 <f_sync>
 8007640:	4603      	mov	r3, r0
 8007642:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d118      	bne.n	800767c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f107 0208 	add.w	r2, r7, #8
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fbc0 	bl	8006dd8 <validate>
 8007658:	4603      	mov	r3, r0
 800765a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10c      	bne.n	800767c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe f958 	bl	800591c <dec_lock>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d102      	bne.n	800767c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b09d      	sub	sp, #116	; 0x74
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	460b      	mov	r3, r1
 8007696:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8007698:	2301      	movs	r3, #1
 800769a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800769c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076a0:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80076a2:	f107 030c 	add.w	r3, r7, #12
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff f8af 	bl	800680a <get_ldnumber>
 80076ac:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	da02      	bge.n	80076ba <f_mkfs+0x32>
 80076b4:	230b      	movs	r3, #11
 80076b6:	f000 bc0d 	b.w	8007ed4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80076ba:	4a94      	ldr	r2, [pc, #592]	; (800790c <f_mkfs+0x284>)
 80076bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <f_mkfs+0x4a>
 80076c6:	4a91      	ldr	r2, [pc, #580]	; (800790c <f_mkfs+0x284>)
 80076c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ce:	2200      	movs	r2, #0
 80076d0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80076d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80076de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fd fe8a 	bl	80053fc <disk_initialize>
 80076e8:	4603      	mov	r3, r0
 80076ea:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80076ee:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <f_mkfs+0x76>
 80076fa:	2303      	movs	r3, #3
 80076fc:	e3ea      	b.n	8007ed4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80076fe:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <f_mkfs+0x86>
 800770a:	230a      	movs	r3, #10
 800770c:	e3e2      	b.n	8007ed4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800770e:	f107 0214 	add.w	r2, r7, #20
 8007712:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007716:	2103      	movs	r1, #3
 8007718:	4618      	mov	r0, r3
 800771a:	f7fd fed5 	bl	80054c8 <disk_ioctl>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10c      	bne.n	800773e <f_mkfs+0xb6>
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <f_mkfs+0xb6>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007730:	d805      	bhi.n	800773e <f_mkfs+0xb6>
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	1e5a      	subs	r2, r3, #1
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	4013      	ands	r3, r2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <f_mkfs+0xba>
 800773e:	2301      	movs	r3, #1
 8007740:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8007742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007746:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <f_mkfs+0xce>
 800774e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	d309      	bcc.n	800776a <f_mkfs+0xe2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800775c:	d805      	bhi.n	800776a <f_mkfs+0xe2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	1e5a      	subs	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4013      	ands	r3, r2
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <f_mkfs+0xe6>
 800776a:	2313      	movs	r3, #19
 800776c:	e3b2      	b.n	8007ed4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800776e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	fbb2 f3f3 	udiv	r3, r2, r3
 8007776:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800777c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800777e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007782:	fbb2 f3f3 	udiv	r3, r2, r3
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8007788:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	fb02 f303 	mul.w	r3, r2, r3
 8007790:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <f_mkfs+0x114>
 8007798:	230e      	movs	r3, #14
 800779a:	e39b      	b.n	8007ed4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800779c:	f107 0210 	add.w	r2, r7, #16
 80077a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80077a4:	2101      	movs	r1, #1
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fd fe8e 	bl	80054c8 <disk_ioctl>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <f_mkfs+0x12e>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e38e      	b.n	8007ed4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	f003 0308 	and.w	r3, r3, #8
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <f_mkfs+0x13c>
 80077c0:	2300      	movs	r3, #0
 80077c2:	e000      	b.n	80077c6 <f_mkfs+0x13e>
 80077c4:	233f      	movs	r3, #63	; 0x3f
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d901      	bls.n	80077d4 <f_mkfs+0x14c>
 80077d0:	230e      	movs	r3, #14
 80077d2:	e37f      	b.n	8007ed4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	2b7f      	cmp	r3, #127	; 0x7f
 80077e0:	d801      	bhi.n	80077e6 <f_mkfs+0x15e>
 80077e2:	230e      	movs	r3, #14
 80077e4:	e376      	b.n	8007ed4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b80      	cmp	r3, #128	; 0x80
 80077ea:	d901      	bls.n	80077f0 <f_mkfs+0x168>
 80077ec:	2313      	movs	r3, #19
 80077ee:	e371      	b.n	8007ed4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80077f0:	7afb      	ldrb	r3, [r7, #11]
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00d      	beq.n	8007816 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	2b02      	cmp	r3, #2
 8007802:	d004      	beq.n	800780e <f_mkfs+0x186>
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d103      	bne.n	8007816 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800780e:	2303      	movs	r3, #3
 8007810:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007814:	e009      	b.n	800782a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <f_mkfs+0x19c>
 8007820:	2313      	movs	r3, #19
 8007822:	e357      	b.n	8007ed4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8007824:	2302      	movs	r3, #2
 8007826:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800782e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007832:	2b03      	cmp	r3, #3
 8007834:	d13c      	bne.n	80078b0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8007836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007838:	2b00      	cmp	r3, #0
 800783a:	d11b      	bne.n	8007874 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	0c5b      	lsrs	r3, r3, #17
 8007840:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8007842:	2300      	movs	r3, #0
 8007844:	64bb      	str	r3, [r7, #72]	; 0x48
 8007846:	2301      	movs	r3, #1
 8007848:	653b      	str	r3, [r7, #80]	; 0x50
 800784a:	e005      	b.n	8007858 <f_mkfs+0x1d0>
 800784c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784e:	3301      	adds	r3, #1
 8007850:	64bb      	str	r3, [r7, #72]	; 0x48
 8007852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	653b      	str	r3, [r7, #80]	; 0x50
 8007858:	4a2d      	ldr	r2, [pc, #180]	; (8007910 <f_mkfs+0x288>)
 800785a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800785c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d007      	beq.n	8007874 <f_mkfs+0x1ec>
 8007864:	4a2a      	ldr	r2, [pc, #168]	; (8007910 <f_mkfs+0x288>)
 8007866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800786c:	461a      	mov	r2, r3
 800786e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007870:	4293      	cmp	r3, r2
 8007872:	d2eb      	bcs.n	800784c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	3302      	adds	r3, #2
 8007882:	009a      	lsls	r2, r3, #2
 8007884:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007886:	4413      	add	r3, r2
 8007888:	1e5a      	subs	r2, r3, #1
 800788a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800788c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007890:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8007892:	2320      	movs	r3, #32
 8007894:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8007896:	2300      	movs	r3, #0
 8007898:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d903      	bls.n	80078ac <f_mkfs+0x224>
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	4a1b      	ldr	r2, [pc, #108]	; (8007914 <f_mkfs+0x28c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d952      	bls.n	8007952 <f_mkfs+0x2ca>
 80078ac:	230e      	movs	r3, #14
 80078ae:	e311      	b.n	8007ed4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80078b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d11b      	bne.n	80078ee <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	0b1b      	lsrs	r3, r3, #12
 80078ba:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80078bc:	2300      	movs	r3, #0
 80078be:	64bb      	str	r3, [r7, #72]	; 0x48
 80078c0:	2301      	movs	r3, #1
 80078c2:	653b      	str	r3, [r7, #80]	; 0x50
 80078c4:	e005      	b.n	80078d2 <f_mkfs+0x24a>
 80078c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078c8:	3301      	adds	r3, #1
 80078ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80078cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	653b      	str	r3, [r7, #80]	; 0x50
 80078d2:	4a11      	ldr	r2, [pc, #68]	; (8007918 <f_mkfs+0x290>)
 80078d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d007      	beq.n	80078ee <f_mkfs+0x266>
 80078de:	4a0e      	ldr	r2, [pc, #56]	; (8007918 <f_mkfs+0x290>)
 80078e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078e6:	461a      	mov	r2, r3
 80078e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d2eb      	bcs.n	80078c6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 80078fe:	4293      	cmp	r3, r2
 8007900:	d90c      	bls.n	800791c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	3302      	adds	r3, #2
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800790a:	e012      	b.n	8007932 <f_mkfs+0x2aa>
 800790c:	20000648 	.word	0x20000648
 8007910:	080089fc 	.word	0x080089fc
 8007914:	0ffffff5 	.word	0x0ffffff5
 8007918:	08008a0c 	.word	0x08008a0c
				} else {
					fmt = FS_FAT12;
 800791c:	2301      	movs	r3, #1
 800791e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8007922:	6a3a      	ldr	r2, [r7, #32]
 8007924:	4613      	mov	r3, r2
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	4413      	add	r3, r2
 800792a:	3301      	adds	r3, #1
 800792c:	085b      	lsrs	r3, r3, #1
 800792e:	3303      	adds	r3, #3
 8007930:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8007932:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007936:	4413      	add	r3, r2
 8007938:	1e5a      	subs	r2, r3, #1
 800793a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800793c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007940:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8007942:	2301      	movs	r3, #1
 8007944:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8007946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8007952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007956:	4413      	add	r3, r2
 8007958:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800795a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800795c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800795e:	fb03 f202 	mul.w	r2, r3, r2
 8007962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007964:	4413      	add	r3, r2
 8007966:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007968:	4413      	add	r3, r2
 800796a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	1e5a      	subs	r2, r3, #1
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	425b      	negs	r3, r3
 8007978:	401a      	ands	r2, r3
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8007980:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007984:	2b03      	cmp	r3, #3
 8007986:	d108      	bne.n	800799a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8007988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800798a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800798c:	4413      	add	r3, r2
 800798e:	657b      	str	r3, [r7, #84]	; 0x54
 8007990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007994:	4413      	add	r3, r2
 8007996:	65bb      	str	r3, [r7, #88]	; 0x58
 8007998:	e006      	b.n	80079a8 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800799a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800799c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800799e:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079a4:	4413      	add	r3, r2
 80079a6:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80079a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079aa:	011a      	lsls	r2, r3, #4
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	441a      	add	r2, r3
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d901      	bls.n	80079be <f_mkfs+0x336>
 80079ba:	230e      	movs	r3, #14
 80079bc:	e28a      	b.n	8007ed4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079c2:	1ad2      	subs	r2, r2, r3
 80079c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	1ad2      	subs	r2, r2, r3
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	1ad2      	subs	r2, r2, r3
 80079d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80079da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d10f      	bne.n	8007a02 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d80a      	bhi.n	8007a02 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d105      	bne.n	80079fe <f_mkfs+0x376>
 80079f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f4:	085b      	lsrs	r3, r3, #1
 80079f6:	607b      	str	r3, [r7, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d144      	bne.n	8007a88 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80079fe:	230e      	movs	r3, #14
 8007a00:	e268      	b.n	8007ed4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8007a02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d133      	bne.n	8007a72 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d91e      	bls.n	8007a52 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <f_mkfs+0x3a2>
 8007a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	2b40      	cmp	r3, #64	; 0x40
 8007a20:	d803      	bhi.n	8007a2a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8007a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	607b      	str	r3, [r7, #4]
 8007a28:	e033      	b.n	8007a92 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8007a34:	2303      	movs	r3, #3
 8007a36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007a3a:	e02a      	b.n	8007a92 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d105      	bne.n	8007a4e <f_mkfs+0x3c6>
 8007a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	607b      	str	r3, [r7, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b80      	cmp	r3, #128	; 0x80
 8007a4c:	d91e      	bls.n	8007a8c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8007a4e:	230e      	movs	r3, #14
 8007a50:	e240      	b.n	8007ed4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d80a      	bhi.n	8007a72 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d105      	bne.n	8007a6e <f_mkfs+0x3e6>
 8007a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	607b      	str	r3, [r7, #4]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b80      	cmp	r3, #128	; 0x80
 8007a6c:	d910      	bls.n	8007a90 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8007a6e:	230e      	movs	r3, #14
 8007a70:	e230      	b.n	8007ed4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8007a72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d10c      	bne.n	8007a94 <f_mkfs+0x40c>
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d907      	bls.n	8007a94 <f_mkfs+0x40c>
 8007a84:	230e      	movs	r3, #14
 8007a86:	e225      	b.n	8007ed4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8007a88:	bf00      	nop
 8007a8a:	e6ce      	b.n	800782a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007a8c:	bf00      	nop
 8007a8e:	e6cc      	b.n	800782a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8007a90:	bf00      	nop
			pau = au;
 8007a92:	e6ca      	b.n	800782a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8007a94:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8007a96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007a98:	461a      	mov	r2, r3
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a9e:	f7fd fdd4 	bl	800564a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8007aa2:	220b      	movs	r2, #11
 8007aa4:	49b2      	ldr	r1, [pc, #712]	; (8007d70 <f_mkfs+0x6e8>)
 8007aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aa8:	f7fd fdae 	bl	8005608 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	330b      	adds	r3, #11
 8007ab0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fd fd60 	bl	800557a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	330d      	adds	r3, #13
 8007abe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ac0:	b2d2      	uxtb	r2, r2
 8007ac2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac6:	330e      	adds	r3, #14
 8007ac8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007aca:	b292      	uxth	r2, r2
 8007acc:	4611      	mov	r1, r2
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd fd53 	bl	800557a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	3310      	adds	r3, #16
 8007ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	f103 0211 	add.w	r2, r3, #17
 8007ae4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007ae8:	2b03      	cmp	r3, #3
 8007aea:	d002      	beq.n	8007af2 <f_mkfs+0x46a>
 8007aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	e000      	b.n	8007af4 <f_mkfs+0x46c>
 8007af2:	2300      	movs	r3, #0
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7fd fd3f 	bl	800557a <st_word>
		if (sz_vol < 0x10000) {
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b02:	d208      	bcs.n	8007b16 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8007b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b06:	3313      	adds	r3, #19
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	b292      	uxth	r2, r2
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fd fd33 	bl	800557a <st_word>
 8007b14:	e006      	b.n	8007b24 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8007b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b18:	3320      	adds	r3, #32
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fd fd46 	bl	80055b0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	3315      	adds	r3, #21
 8007b28:	22f8      	movs	r2, #248	; 0xf8
 8007b2a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	3318      	adds	r3, #24
 8007b30:	213f      	movs	r1, #63	; 0x3f
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fd fd21 	bl	800557a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	331a      	adds	r3, #26
 8007b3c:	21ff      	movs	r1, #255	; 0xff
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fd fd1b 	bl	800557a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	331c      	adds	r3, #28
 8007b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fd fd30 	bl	80055b0 <st_dword>
		if (fmt == FS_FAT32) {
 8007b50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d131      	bne.n	8007bbc <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8007b5e:	f7fd f9e3 	bl	8004f28 <get_fattime>
 8007b62:	4603      	mov	r3, r0
 8007b64:	4619      	mov	r1, r3
 8007b66:	4620      	mov	r0, r4
 8007b68:	f7fd fd22 	bl	80055b0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	3324      	adds	r3, #36	; 0x24
 8007b70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fd fd1c 	bl	80055b0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	332c      	adds	r3, #44	; 0x2c
 8007b7c:	2102      	movs	r1, #2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fd fd16 	bl	80055b0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	3330      	adds	r3, #48	; 0x30
 8007b88:	2101      	movs	r1, #1
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fd fcf5 	bl	800557a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	3332      	adds	r3, #50	; 0x32
 8007b94:	2106      	movs	r1, #6
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fd fcef 	bl	800557a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	3340      	adds	r3, #64	; 0x40
 8007ba0:	2280      	movs	r2, #128	; 0x80
 8007ba2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8007ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba6:	3342      	adds	r3, #66	; 0x42
 8007ba8:	2229      	movs	r2, #41	; 0x29
 8007baa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	3347      	adds	r3, #71	; 0x47
 8007bb0:	2213      	movs	r2, #19
 8007bb2:	4970      	ldr	r1, [pc, #448]	; (8007d74 <f_mkfs+0x6ec>)
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fd fd27 	bl	8005608 <mem_cpy>
 8007bba:	e020      	b.n	8007bfe <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8007bc2:	f7fd f9b1 	bl	8004f28 <get_fattime>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f7fd fcf0 	bl	80055b0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd2:	3316      	adds	r3, #22
 8007bd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bd6:	b292      	uxth	r2, r2
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd fccd 	bl	800557a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	3324      	adds	r3, #36	; 0x24
 8007be4:	2280      	movs	r2, #128	; 0x80
 8007be6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	3326      	adds	r3, #38	; 0x26
 8007bec:	2229      	movs	r2, #41	; 0x29
 8007bee:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	332b      	adds	r3, #43	; 0x2b
 8007bf4:	2213      	movs	r2, #19
 8007bf6:	4960      	ldr	r1, [pc, #384]	; (8007d78 <f_mkfs+0x6f0>)
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fd fd05 	bl	8005608 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c04:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fd fcb6 	bl	800557a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8007c0e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007c12:	2301      	movs	r3, #1
 8007c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c18:	f7fd fc36 	bl	8005488 <disk_write>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <f_mkfs+0x59e>
 8007c22:	2301      	movs	r3, #1
 8007c24:	e156      	b.n	8007ed4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8007c26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d140      	bne.n	8007cb0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	1d9a      	adds	r2, r3, #6
 8007c32:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007c36:	2301      	movs	r3, #1
 8007c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c3a:	f7fd fc25 	bl	8005488 <disk_write>
			mem_set(buf, 0, ss);
 8007c3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c40:	461a      	mov	r2, r3
 8007c42:	2100      	movs	r1, #0
 8007c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c46:	f7fd fd00 	bl	800564a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8007c4a:	494c      	ldr	r1, [pc, #304]	; (8007d7c <f_mkfs+0x6f4>)
 8007c4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c4e:	f7fd fcaf 	bl	80055b0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c58:	4949      	ldr	r1, [pc, #292]	; (8007d80 <f_mkfs+0x6f8>)
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fd fca8 	bl	80055b0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	f7fd fc9f 	bl	80055b0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007c78:	2102      	movs	r1, #2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fd fc98 	bl	80055b0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c86:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fd fc75 	bl	800557a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c92:	1dda      	adds	r2, r3, #7
 8007c94:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007c98:	2301      	movs	r3, #1
 8007c9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c9c:	f7fd fbf4 	bl	8005488 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007ca8:	2301      	movs	r3, #1
 8007caa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cac:	f7fd fbec 	bl	8005488 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8007cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cb6:	f7fd fcc8 	bl	800564a <mem_set>
		sect = b_fat;		/* FAT start sector */
 8007cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cbc:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cc2:	e04b      	b.n	8007d5c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8007cc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d113      	bne.n	8007cf4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8007ccc:	f06f 0107 	mvn.w	r1, #7
 8007cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cd2:	f7fd fc6d 	bl	80055b0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	3304      	adds	r3, #4
 8007cda:	f04f 31ff 	mov.w	r1, #4294967295
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fd fc66 	bl	80055b0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fd fc5f 	bl	80055b0 <st_dword>
 8007cf2:	e00b      	b.n	8007d0c <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8007cf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d101      	bne.n	8007d00 <f_mkfs+0x678>
 8007cfc:	4b21      	ldr	r3, [pc, #132]	; (8007d84 <f_mkfs+0x6fc>)
 8007cfe:	e001      	b.n	8007d04 <f_mkfs+0x67c>
 8007d00:	f06f 0307 	mvn.w	r3, #7
 8007d04:	4619      	mov	r1, r3
 8007d06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d08:	f7fd fc52 	bl	80055b0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8007d0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d0e:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	4293      	cmp	r3, r2
 8007d16:	bf28      	it	cs
 8007d18:	4613      	movcs	r3, r2
 8007d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007d1c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d26:	f7fd fbaf 	bl	8005488 <disk_write>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <f_mkfs+0x6ac>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e0cf      	b.n	8007ed4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8007d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d36:	461a      	mov	r2, r3
 8007d38:	2100      	movs	r1, #0
 8007d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d3c:	f7fd fc85 	bl	800564a <mem_set>
				sect += n; nsect -= n;
 8007d40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d44:	4413      	add	r3, r2
 8007d46:	667b      	str	r3, [r7, #100]	; 0x64
 8007d48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8007d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1dc      	bne.n	8007d10 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8007d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d58:	3301      	adds	r3, #1
 8007d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d3af      	bcc.n	8007cc4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8007d64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d10d      	bne.n	8007d88 <f_mkfs+0x700>
 8007d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d6e:	e00c      	b.n	8007d8a <f_mkfs+0x702>
 8007d70:	0800891c 	.word	0x0800891c
 8007d74:	08008928 	.word	0x08008928
 8007d78:	0800893c 	.word	0x0800893c
 8007d7c:	41615252 	.word	0x41615252
 8007d80:	61417272 	.word	0x61417272
 8007d84:	00fffff8 	.word	0x00fffff8
 8007d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8007d8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bf28      	it	cs
 8007d94:	4613      	movcs	r3, r2
 8007d96:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007d98:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007da2:	f7fd fb71 	bl	8005488 <disk_write>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <f_mkfs+0x728>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e091      	b.n	8007ed4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8007db0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007db4:	4413      	add	r3, r2
 8007db6:	667b      	str	r3, [r7, #100]	; 0x64
 8007db8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8007dc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e2      	bne.n	8007d8c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8007dc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d103      	bne.n	8007dd6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8007dce:	230c      	movs	r3, #12
 8007dd0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007dd4:	e010      	b.n	8007df8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ddc:	d303      	bcc.n	8007de6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8007dde:	2306      	movs	r3, #6
 8007de0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8007de4:	e008      	b.n	8007df8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8007de6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d101      	bne.n	8007df2 <f_mkfs+0x76a>
 8007dee:	2304      	movs	r3, #4
 8007df0:	e000      	b.n	8007df4 <f_mkfs+0x76c>
 8007df2:	2301      	movs	r3, #1
 8007df4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8007df8:	7afb      	ldrb	r3, [r7, #11]
 8007dfa:	f003 0308 	and.w	r3, r3, #8
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d15b      	bne.n	8007eba <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8007e02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e04:	461a      	mov	r2, r3
 8007e06:	2100      	movs	r1, #0
 8007e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e0a:	f7fd fc1e 	bl	800564a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e14:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fd fbae 	bl	800557a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e24:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	2201      	movs	r2, #1
 8007e32:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	3302      	adds	r3, #2
 8007e38:	2201      	movs	r2, #1
 8007e3a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	3303      	adds	r3, #3
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	3304      	adds	r3, #4
 8007e48:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8007e4c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	441a      	add	r2, r3
 8007e54:	4b21      	ldr	r3, [pc, #132]	; (8007edc <f_mkfs+0x854>)
 8007e56:	fba3 1302 	umull	r1, r3, r3, r2
 8007e5a:	1ad2      	subs	r2, r2, r3
 8007e5c:	0852      	lsrs	r2, r2, #1
 8007e5e:	4413      	add	r3, r2
 8007e60:	0b5b      	lsrs	r3, r3, #13
 8007e62:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	3305      	adds	r3, #5
 8007e68:	22fe      	movs	r2, #254	; 0xfe
 8007e6a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8007e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e6e:	089b      	lsrs	r3, r3, #2
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	3306      	adds	r3, #6
 8007e76:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	3307      	adds	r3, #7
 8007e82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fd fb8e 	bl	80055b0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	330c      	adds	r3, #12
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fd fb87 	bl	80055b0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8007ea2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007eac:	f7fd faec 	bl	8005488 <disk_write>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <f_mkfs+0x832>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e00c      	b.n	8007ed4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8007eba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fd fb00 	bl	80054c8 <disk_ioctl>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <f_mkfs+0x84a>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <f_mkfs+0x84c>

	return FR_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3774      	adds	r7, #116	; 0x74
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd90      	pop	{r4, r7, pc}
 8007edc:	0515565b 	.word	0x0515565b

08007ee0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ef6:	4b1f      	ldr	r3, [pc, #124]	; (8007f74 <FATFS_LinkDriverEx+0x94>)
 8007ef8:	7a5b      	ldrb	r3, [r3, #9]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d131      	bne.n	8007f64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007f00:	4b1c      	ldr	r3, [pc, #112]	; (8007f74 <FATFS_LinkDriverEx+0x94>)
 8007f02:	7a5b      	ldrb	r3, [r3, #9]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	4b1a      	ldr	r3, [pc, #104]	; (8007f74 <FATFS_LinkDriverEx+0x94>)
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007f0e:	4b19      	ldr	r3, [pc, #100]	; (8007f74 <FATFS_LinkDriverEx+0x94>)
 8007f10:	7a5b      	ldrb	r3, [r3, #9]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	4a17      	ldr	r2, [pc, #92]	; (8007f74 <FATFS_LinkDriverEx+0x94>)
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f1e:	4b15      	ldr	r3, [pc, #84]	; (8007f74 <FATFS_LinkDriverEx+0x94>)
 8007f20:	7a5b      	ldrb	r3, [r3, #9]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <FATFS_LinkDriverEx+0x94>)
 8007f28:	4413      	add	r3, r2
 8007f2a:	79fa      	ldrb	r2, [r7, #7]
 8007f2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f2e:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <FATFS_LinkDriverEx+0x94>)
 8007f30:	7a5b      	ldrb	r3, [r3, #9]
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	b2d1      	uxtb	r1, r2
 8007f38:	4a0e      	ldr	r2, [pc, #56]	; (8007f74 <FATFS_LinkDriverEx+0x94>)
 8007f3a:	7251      	strb	r1, [r2, #9]
 8007f3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f3e:	7dbb      	ldrb	r3, [r7, #22]
 8007f40:	3330      	adds	r3, #48	; 0x30
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	223a      	movs	r2, #58	; 0x3a
 8007f4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3302      	adds	r3, #2
 8007f54:	222f      	movs	r2, #47	; 0x2f
 8007f56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3303      	adds	r3, #3
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	371c      	adds	r7, #28
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000670 	.word	0x20000670

08007f78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f82:	2200      	movs	r2, #0
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7ff ffaa 	bl	8007ee0 <FATFS_LinkDriverEx>
 8007f8c:	4603      	mov	r3, r0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <__errno>:
 8007f98:	4b01      	ldr	r3, [pc, #4]	; (8007fa0 <__errno+0x8>)
 8007f9a:	6818      	ldr	r0, [r3, #0]
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	2000000c 	.word	0x2000000c

08007fa4 <__libc_init_array>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	4d0d      	ldr	r5, [pc, #52]	; (8007fdc <__libc_init_array+0x38>)
 8007fa8:	4c0d      	ldr	r4, [pc, #52]	; (8007fe0 <__libc_init_array+0x3c>)
 8007faa:	1b64      	subs	r4, r4, r5
 8007fac:	10a4      	asrs	r4, r4, #2
 8007fae:	2600      	movs	r6, #0
 8007fb0:	42a6      	cmp	r6, r4
 8007fb2:	d109      	bne.n	8007fc8 <__libc_init_array+0x24>
 8007fb4:	4d0b      	ldr	r5, [pc, #44]	; (8007fe4 <__libc_init_array+0x40>)
 8007fb6:	4c0c      	ldr	r4, [pc, #48]	; (8007fe8 <__libc_init_array+0x44>)
 8007fb8:	f000 fc8e 	bl	80088d8 <_init>
 8007fbc:	1b64      	subs	r4, r4, r5
 8007fbe:	10a4      	asrs	r4, r4, #2
 8007fc0:	2600      	movs	r6, #0
 8007fc2:	42a6      	cmp	r6, r4
 8007fc4:	d105      	bne.n	8007fd2 <__libc_init_array+0x2e>
 8007fc6:	bd70      	pop	{r4, r5, r6, pc}
 8007fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fcc:	4798      	blx	r3
 8007fce:	3601      	adds	r6, #1
 8007fd0:	e7ee      	b.n	8007fb0 <__libc_init_array+0xc>
 8007fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd6:	4798      	blx	r3
 8007fd8:	3601      	adds	r6, #1
 8007fda:	e7f2      	b.n	8007fc2 <__libc_init_array+0x1e>
 8007fdc:	08008a58 	.word	0x08008a58
 8007fe0:	08008a58 	.word	0x08008a58
 8007fe4:	08008a58 	.word	0x08008a58
 8007fe8:	08008a5c 	.word	0x08008a5c

08007fec <memset>:
 8007fec:	4402      	add	r2, r0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d100      	bne.n	8007ff6 <memset+0xa>
 8007ff4:	4770      	bx	lr
 8007ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffa:	e7f9      	b.n	8007ff0 <memset+0x4>

08007ffc <siprintf>:
 8007ffc:	b40e      	push	{r1, r2, r3}
 8007ffe:	b500      	push	{lr}
 8008000:	b09c      	sub	sp, #112	; 0x70
 8008002:	ab1d      	add	r3, sp, #116	; 0x74
 8008004:	9002      	str	r0, [sp, #8]
 8008006:	9006      	str	r0, [sp, #24]
 8008008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800800c:	4809      	ldr	r0, [pc, #36]	; (8008034 <siprintf+0x38>)
 800800e:	9107      	str	r1, [sp, #28]
 8008010:	9104      	str	r1, [sp, #16]
 8008012:	4909      	ldr	r1, [pc, #36]	; (8008038 <siprintf+0x3c>)
 8008014:	f853 2b04 	ldr.w	r2, [r3], #4
 8008018:	9105      	str	r1, [sp, #20]
 800801a:	6800      	ldr	r0, [r0, #0]
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	a902      	add	r1, sp, #8
 8008020:	f000 f868 	bl	80080f4 <_svfiprintf_r>
 8008024:	9b02      	ldr	r3, [sp, #8]
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	b01c      	add	sp, #112	; 0x70
 800802c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008030:	b003      	add	sp, #12
 8008032:	4770      	bx	lr
 8008034:	2000000c 	.word	0x2000000c
 8008038:	ffff0208 	.word	0xffff0208

0800803c <__ssputs_r>:
 800803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008040:	688e      	ldr	r6, [r1, #8]
 8008042:	429e      	cmp	r6, r3
 8008044:	4682      	mov	sl, r0
 8008046:	460c      	mov	r4, r1
 8008048:	4690      	mov	r8, r2
 800804a:	461f      	mov	r7, r3
 800804c:	d838      	bhi.n	80080c0 <__ssputs_r+0x84>
 800804e:	898a      	ldrh	r2, [r1, #12]
 8008050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008054:	d032      	beq.n	80080bc <__ssputs_r+0x80>
 8008056:	6825      	ldr	r5, [r4, #0]
 8008058:	6909      	ldr	r1, [r1, #16]
 800805a:	eba5 0901 	sub.w	r9, r5, r1
 800805e:	6965      	ldr	r5, [r4, #20]
 8008060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008068:	3301      	adds	r3, #1
 800806a:	444b      	add	r3, r9
 800806c:	106d      	asrs	r5, r5, #1
 800806e:	429d      	cmp	r5, r3
 8008070:	bf38      	it	cc
 8008072:	461d      	movcc	r5, r3
 8008074:	0553      	lsls	r3, r2, #21
 8008076:	d531      	bpl.n	80080dc <__ssputs_r+0xa0>
 8008078:	4629      	mov	r1, r5
 800807a:	f000 fb63 	bl	8008744 <_malloc_r>
 800807e:	4606      	mov	r6, r0
 8008080:	b950      	cbnz	r0, 8008098 <__ssputs_r+0x5c>
 8008082:	230c      	movs	r3, #12
 8008084:	f8ca 3000 	str.w	r3, [sl]
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008098:	6921      	ldr	r1, [r4, #16]
 800809a:	464a      	mov	r2, r9
 800809c:	f000 fabe 	bl	800861c <memcpy>
 80080a0:	89a3      	ldrh	r3, [r4, #12]
 80080a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080aa:	81a3      	strh	r3, [r4, #12]
 80080ac:	6126      	str	r6, [r4, #16]
 80080ae:	6165      	str	r5, [r4, #20]
 80080b0:	444e      	add	r6, r9
 80080b2:	eba5 0509 	sub.w	r5, r5, r9
 80080b6:	6026      	str	r6, [r4, #0]
 80080b8:	60a5      	str	r5, [r4, #8]
 80080ba:	463e      	mov	r6, r7
 80080bc:	42be      	cmp	r6, r7
 80080be:	d900      	bls.n	80080c2 <__ssputs_r+0x86>
 80080c0:	463e      	mov	r6, r7
 80080c2:	6820      	ldr	r0, [r4, #0]
 80080c4:	4632      	mov	r2, r6
 80080c6:	4641      	mov	r1, r8
 80080c8:	f000 fab6 	bl	8008638 <memmove>
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	1b9b      	subs	r3, r3, r6
 80080d0:	60a3      	str	r3, [r4, #8]
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	4433      	add	r3, r6
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	2000      	movs	r0, #0
 80080da:	e7db      	b.n	8008094 <__ssputs_r+0x58>
 80080dc:	462a      	mov	r2, r5
 80080de:	f000 fba5 	bl	800882c <_realloc_r>
 80080e2:	4606      	mov	r6, r0
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d1e1      	bne.n	80080ac <__ssputs_r+0x70>
 80080e8:	6921      	ldr	r1, [r4, #16]
 80080ea:	4650      	mov	r0, sl
 80080ec:	f000 fabe 	bl	800866c <_free_r>
 80080f0:	e7c7      	b.n	8008082 <__ssputs_r+0x46>
	...

080080f4 <_svfiprintf_r>:
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	4698      	mov	r8, r3
 80080fa:	898b      	ldrh	r3, [r1, #12]
 80080fc:	061b      	lsls	r3, r3, #24
 80080fe:	b09d      	sub	sp, #116	; 0x74
 8008100:	4607      	mov	r7, r0
 8008102:	460d      	mov	r5, r1
 8008104:	4614      	mov	r4, r2
 8008106:	d50e      	bpl.n	8008126 <_svfiprintf_r+0x32>
 8008108:	690b      	ldr	r3, [r1, #16]
 800810a:	b963      	cbnz	r3, 8008126 <_svfiprintf_r+0x32>
 800810c:	2140      	movs	r1, #64	; 0x40
 800810e:	f000 fb19 	bl	8008744 <_malloc_r>
 8008112:	6028      	str	r0, [r5, #0]
 8008114:	6128      	str	r0, [r5, #16]
 8008116:	b920      	cbnz	r0, 8008122 <_svfiprintf_r+0x2e>
 8008118:	230c      	movs	r3, #12
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	f04f 30ff 	mov.w	r0, #4294967295
 8008120:	e0d1      	b.n	80082c6 <_svfiprintf_r+0x1d2>
 8008122:	2340      	movs	r3, #64	; 0x40
 8008124:	616b      	str	r3, [r5, #20]
 8008126:	2300      	movs	r3, #0
 8008128:	9309      	str	r3, [sp, #36]	; 0x24
 800812a:	2320      	movs	r3, #32
 800812c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008130:	f8cd 800c 	str.w	r8, [sp, #12]
 8008134:	2330      	movs	r3, #48	; 0x30
 8008136:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082e0 <_svfiprintf_r+0x1ec>
 800813a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800813e:	f04f 0901 	mov.w	r9, #1
 8008142:	4623      	mov	r3, r4
 8008144:	469a      	mov	sl, r3
 8008146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814a:	b10a      	cbz	r2, 8008150 <_svfiprintf_r+0x5c>
 800814c:	2a25      	cmp	r2, #37	; 0x25
 800814e:	d1f9      	bne.n	8008144 <_svfiprintf_r+0x50>
 8008150:	ebba 0b04 	subs.w	fp, sl, r4
 8008154:	d00b      	beq.n	800816e <_svfiprintf_r+0x7a>
 8008156:	465b      	mov	r3, fp
 8008158:	4622      	mov	r2, r4
 800815a:	4629      	mov	r1, r5
 800815c:	4638      	mov	r0, r7
 800815e:	f7ff ff6d 	bl	800803c <__ssputs_r>
 8008162:	3001      	adds	r0, #1
 8008164:	f000 80aa 	beq.w	80082bc <_svfiprintf_r+0x1c8>
 8008168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800816a:	445a      	add	r2, fp
 800816c:	9209      	str	r2, [sp, #36]	; 0x24
 800816e:	f89a 3000 	ldrb.w	r3, [sl]
 8008172:	2b00      	cmp	r3, #0
 8008174:	f000 80a2 	beq.w	80082bc <_svfiprintf_r+0x1c8>
 8008178:	2300      	movs	r3, #0
 800817a:	f04f 32ff 	mov.w	r2, #4294967295
 800817e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008182:	f10a 0a01 	add.w	sl, sl, #1
 8008186:	9304      	str	r3, [sp, #16]
 8008188:	9307      	str	r3, [sp, #28]
 800818a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800818e:	931a      	str	r3, [sp, #104]	; 0x68
 8008190:	4654      	mov	r4, sl
 8008192:	2205      	movs	r2, #5
 8008194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008198:	4851      	ldr	r0, [pc, #324]	; (80082e0 <_svfiprintf_r+0x1ec>)
 800819a:	f7f8 f841 	bl	8000220 <memchr>
 800819e:	9a04      	ldr	r2, [sp, #16]
 80081a0:	b9d8      	cbnz	r0, 80081da <_svfiprintf_r+0xe6>
 80081a2:	06d0      	lsls	r0, r2, #27
 80081a4:	bf44      	itt	mi
 80081a6:	2320      	movmi	r3, #32
 80081a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ac:	0711      	lsls	r1, r2, #28
 80081ae:	bf44      	itt	mi
 80081b0:	232b      	movmi	r3, #43	; 0x2b
 80081b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ba:	2b2a      	cmp	r3, #42	; 0x2a
 80081bc:	d015      	beq.n	80081ea <_svfiprintf_r+0xf6>
 80081be:	9a07      	ldr	r2, [sp, #28]
 80081c0:	4654      	mov	r4, sl
 80081c2:	2000      	movs	r0, #0
 80081c4:	f04f 0c0a 	mov.w	ip, #10
 80081c8:	4621      	mov	r1, r4
 80081ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ce:	3b30      	subs	r3, #48	; 0x30
 80081d0:	2b09      	cmp	r3, #9
 80081d2:	d94e      	bls.n	8008272 <_svfiprintf_r+0x17e>
 80081d4:	b1b0      	cbz	r0, 8008204 <_svfiprintf_r+0x110>
 80081d6:	9207      	str	r2, [sp, #28]
 80081d8:	e014      	b.n	8008204 <_svfiprintf_r+0x110>
 80081da:	eba0 0308 	sub.w	r3, r0, r8
 80081de:	fa09 f303 	lsl.w	r3, r9, r3
 80081e2:	4313      	orrs	r3, r2
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	46a2      	mov	sl, r4
 80081e8:	e7d2      	b.n	8008190 <_svfiprintf_r+0x9c>
 80081ea:	9b03      	ldr	r3, [sp, #12]
 80081ec:	1d19      	adds	r1, r3, #4
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	9103      	str	r1, [sp, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	bfbb      	ittet	lt
 80081f6:	425b      	neglt	r3, r3
 80081f8:	f042 0202 	orrlt.w	r2, r2, #2
 80081fc:	9307      	strge	r3, [sp, #28]
 80081fe:	9307      	strlt	r3, [sp, #28]
 8008200:	bfb8      	it	lt
 8008202:	9204      	strlt	r2, [sp, #16]
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	2b2e      	cmp	r3, #46	; 0x2e
 8008208:	d10c      	bne.n	8008224 <_svfiprintf_r+0x130>
 800820a:	7863      	ldrb	r3, [r4, #1]
 800820c:	2b2a      	cmp	r3, #42	; 0x2a
 800820e:	d135      	bne.n	800827c <_svfiprintf_r+0x188>
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	1d1a      	adds	r2, r3, #4
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	9203      	str	r2, [sp, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	bfb8      	it	lt
 800821c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008220:	3402      	adds	r4, #2
 8008222:	9305      	str	r3, [sp, #20]
 8008224:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082f0 <_svfiprintf_r+0x1fc>
 8008228:	7821      	ldrb	r1, [r4, #0]
 800822a:	2203      	movs	r2, #3
 800822c:	4650      	mov	r0, sl
 800822e:	f7f7 fff7 	bl	8000220 <memchr>
 8008232:	b140      	cbz	r0, 8008246 <_svfiprintf_r+0x152>
 8008234:	2340      	movs	r3, #64	; 0x40
 8008236:	eba0 000a 	sub.w	r0, r0, sl
 800823a:	fa03 f000 	lsl.w	r0, r3, r0
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	4303      	orrs	r3, r0
 8008242:	3401      	adds	r4, #1
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824a:	4826      	ldr	r0, [pc, #152]	; (80082e4 <_svfiprintf_r+0x1f0>)
 800824c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008250:	2206      	movs	r2, #6
 8008252:	f7f7 ffe5 	bl	8000220 <memchr>
 8008256:	2800      	cmp	r0, #0
 8008258:	d038      	beq.n	80082cc <_svfiprintf_r+0x1d8>
 800825a:	4b23      	ldr	r3, [pc, #140]	; (80082e8 <_svfiprintf_r+0x1f4>)
 800825c:	bb1b      	cbnz	r3, 80082a6 <_svfiprintf_r+0x1b2>
 800825e:	9b03      	ldr	r3, [sp, #12]
 8008260:	3307      	adds	r3, #7
 8008262:	f023 0307 	bic.w	r3, r3, #7
 8008266:	3308      	adds	r3, #8
 8008268:	9303      	str	r3, [sp, #12]
 800826a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826c:	4433      	add	r3, r6
 800826e:	9309      	str	r3, [sp, #36]	; 0x24
 8008270:	e767      	b.n	8008142 <_svfiprintf_r+0x4e>
 8008272:	fb0c 3202 	mla	r2, ip, r2, r3
 8008276:	460c      	mov	r4, r1
 8008278:	2001      	movs	r0, #1
 800827a:	e7a5      	b.n	80081c8 <_svfiprintf_r+0xd4>
 800827c:	2300      	movs	r3, #0
 800827e:	3401      	adds	r4, #1
 8008280:	9305      	str	r3, [sp, #20]
 8008282:	4619      	mov	r1, r3
 8008284:	f04f 0c0a 	mov.w	ip, #10
 8008288:	4620      	mov	r0, r4
 800828a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828e:	3a30      	subs	r2, #48	; 0x30
 8008290:	2a09      	cmp	r2, #9
 8008292:	d903      	bls.n	800829c <_svfiprintf_r+0x1a8>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0c5      	beq.n	8008224 <_svfiprintf_r+0x130>
 8008298:	9105      	str	r1, [sp, #20]
 800829a:	e7c3      	b.n	8008224 <_svfiprintf_r+0x130>
 800829c:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a0:	4604      	mov	r4, r0
 80082a2:	2301      	movs	r3, #1
 80082a4:	e7f0      	b.n	8008288 <_svfiprintf_r+0x194>
 80082a6:	ab03      	add	r3, sp, #12
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	462a      	mov	r2, r5
 80082ac:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <_svfiprintf_r+0x1f8>)
 80082ae:	a904      	add	r1, sp, #16
 80082b0:	4638      	mov	r0, r7
 80082b2:	f3af 8000 	nop.w
 80082b6:	1c42      	adds	r2, r0, #1
 80082b8:	4606      	mov	r6, r0
 80082ba:	d1d6      	bne.n	800826a <_svfiprintf_r+0x176>
 80082bc:	89ab      	ldrh	r3, [r5, #12]
 80082be:	065b      	lsls	r3, r3, #25
 80082c0:	f53f af2c 	bmi.w	800811c <_svfiprintf_r+0x28>
 80082c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082c6:	b01d      	add	sp, #116	; 0x74
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	ab03      	add	r3, sp, #12
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	462a      	mov	r2, r5
 80082d2:	4b06      	ldr	r3, [pc, #24]	; (80082ec <_svfiprintf_r+0x1f8>)
 80082d4:	a904      	add	r1, sp, #16
 80082d6:	4638      	mov	r0, r7
 80082d8:	f000 f87a 	bl	80083d0 <_printf_i>
 80082dc:	e7eb      	b.n	80082b6 <_svfiprintf_r+0x1c2>
 80082de:	bf00      	nop
 80082e0:	08008a1a 	.word	0x08008a1a
 80082e4:	08008a24 	.word	0x08008a24
 80082e8:	00000000 	.word	0x00000000
 80082ec:	0800803d 	.word	0x0800803d
 80082f0:	08008a20 	.word	0x08008a20

080082f4 <_printf_common>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	4616      	mov	r6, r2
 80082fa:	4699      	mov	r9, r3
 80082fc:	688a      	ldr	r2, [r1, #8]
 80082fe:	690b      	ldr	r3, [r1, #16]
 8008300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008304:	4293      	cmp	r3, r2
 8008306:	bfb8      	it	lt
 8008308:	4613      	movlt	r3, r2
 800830a:	6033      	str	r3, [r6, #0]
 800830c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008310:	4607      	mov	r7, r0
 8008312:	460c      	mov	r4, r1
 8008314:	b10a      	cbz	r2, 800831a <_printf_common+0x26>
 8008316:	3301      	adds	r3, #1
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	0699      	lsls	r1, r3, #26
 800831e:	bf42      	ittt	mi
 8008320:	6833      	ldrmi	r3, [r6, #0]
 8008322:	3302      	addmi	r3, #2
 8008324:	6033      	strmi	r3, [r6, #0]
 8008326:	6825      	ldr	r5, [r4, #0]
 8008328:	f015 0506 	ands.w	r5, r5, #6
 800832c:	d106      	bne.n	800833c <_printf_common+0x48>
 800832e:	f104 0a19 	add.w	sl, r4, #25
 8008332:	68e3      	ldr	r3, [r4, #12]
 8008334:	6832      	ldr	r2, [r6, #0]
 8008336:	1a9b      	subs	r3, r3, r2
 8008338:	42ab      	cmp	r3, r5
 800833a:	dc26      	bgt.n	800838a <_printf_common+0x96>
 800833c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008340:	1e13      	subs	r3, r2, #0
 8008342:	6822      	ldr	r2, [r4, #0]
 8008344:	bf18      	it	ne
 8008346:	2301      	movne	r3, #1
 8008348:	0692      	lsls	r2, r2, #26
 800834a:	d42b      	bmi.n	80083a4 <_printf_common+0xb0>
 800834c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008350:	4649      	mov	r1, r9
 8008352:	4638      	mov	r0, r7
 8008354:	47c0      	blx	r8
 8008356:	3001      	adds	r0, #1
 8008358:	d01e      	beq.n	8008398 <_printf_common+0xa4>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	68e5      	ldr	r5, [r4, #12]
 800835e:	6832      	ldr	r2, [r6, #0]
 8008360:	f003 0306 	and.w	r3, r3, #6
 8008364:	2b04      	cmp	r3, #4
 8008366:	bf08      	it	eq
 8008368:	1aad      	subeq	r5, r5, r2
 800836a:	68a3      	ldr	r3, [r4, #8]
 800836c:	6922      	ldr	r2, [r4, #16]
 800836e:	bf0c      	ite	eq
 8008370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008374:	2500      	movne	r5, #0
 8008376:	4293      	cmp	r3, r2
 8008378:	bfc4      	itt	gt
 800837a:	1a9b      	subgt	r3, r3, r2
 800837c:	18ed      	addgt	r5, r5, r3
 800837e:	2600      	movs	r6, #0
 8008380:	341a      	adds	r4, #26
 8008382:	42b5      	cmp	r5, r6
 8008384:	d11a      	bne.n	80083bc <_printf_common+0xc8>
 8008386:	2000      	movs	r0, #0
 8008388:	e008      	b.n	800839c <_printf_common+0xa8>
 800838a:	2301      	movs	r3, #1
 800838c:	4652      	mov	r2, sl
 800838e:	4649      	mov	r1, r9
 8008390:	4638      	mov	r0, r7
 8008392:	47c0      	blx	r8
 8008394:	3001      	adds	r0, #1
 8008396:	d103      	bne.n	80083a0 <_printf_common+0xac>
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
 800839c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a0:	3501      	adds	r5, #1
 80083a2:	e7c6      	b.n	8008332 <_printf_common+0x3e>
 80083a4:	18e1      	adds	r1, r4, r3
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	2030      	movs	r0, #48	; 0x30
 80083aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083ae:	4422      	add	r2, r4
 80083b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083b8:	3302      	adds	r3, #2
 80083ba:	e7c7      	b.n	800834c <_printf_common+0x58>
 80083bc:	2301      	movs	r3, #1
 80083be:	4622      	mov	r2, r4
 80083c0:	4649      	mov	r1, r9
 80083c2:	4638      	mov	r0, r7
 80083c4:	47c0      	blx	r8
 80083c6:	3001      	adds	r0, #1
 80083c8:	d0e6      	beq.n	8008398 <_printf_common+0xa4>
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7d9      	b.n	8008382 <_printf_common+0x8e>
	...

080083d0 <_printf_i>:
 80083d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	7e0f      	ldrb	r7, [r1, #24]
 80083d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083d8:	2f78      	cmp	r7, #120	; 0x78
 80083da:	4691      	mov	r9, r2
 80083dc:	4680      	mov	r8, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	469a      	mov	sl, r3
 80083e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083e6:	d807      	bhi.n	80083f8 <_printf_i+0x28>
 80083e8:	2f62      	cmp	r7, #98	; 0x62
 80083ea:	d80a      	bhi.n	8008402 <_printf_i+0x32>
 80083ec:	2f00      	cmp	r7, #0
 80083ee:	f000 80d8 	beq.w	80085a2 <_printf_i+0x1d2>
 80083f2:	2f58      	cmp	r7, #88	; 0x58
 80083f4:	f000 80a3 	beq.w	800853e <_printf_i+0x16e>
 80083f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008400:	e03a      	b.n	8008478 <_printf_i+0xa8>
 8008402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008406:	2b15      	cmp	r3, #21
 8008408:	d8f6      	bhi.n	80083f8 <_printf_i+0x28>
 800840a:	a101      	add	r1, pc, #4	; (adr r1, 8008410 <_printf_i+0x40>)
 800840c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008410:	08008469 	.word	0x08008469
 8008414:	0800847d 	.word	0x0800847d
 8008418:	080083f9 	.word	0x080083f9
 800841c:	080083f9 	.word	0x080083f9
 8008420:	080083f9 	.word	0x080083f9
 8008424:	080083f9 	.word	0x080083f9
 8008428:	0800847d 	.word	0x0800847d
 800842c:	080083f9 	.word	0x080083f9
 8008430:	080083f9 	.word	0x080083f9
 8008434:	080083f9 	.word	0x080083f9
 8008438:	080083f9 	.word	0x080083f9
 800843c:	08008589 	.word	0x08008589
 8008440:	080084ad 	.word	0x080084ad
 8008444:	0800856b 	.word	0x0800856b
 8008448:	080083f9 	.word	0x080083f9
 800844c:	080083f9 	.word	0x080083f9
 8008450:	080085ab 	.word	0x080085ab
 8008454:	080083f9 	.word	0x080083f9
 8008458:	080084ad 	.word	0x080084ad
 800845c:	080083f9 	.word	0x080083f9
 8008460:	080083f9 	.word	0x080083f9
 8008464:	08008573 	.word	0x08008573
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	1d1a      	adds	r2, r3, #4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	602a      	str	r2, [r5, #0]
 8008470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008478:	2301      	movs	r3, #1
 800847a:	e0a3      	b.n	80085c4 <_printf_i+0x1f4>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	6829      	ldr	r1, [r5, #0]
 8008480:	0606      	lsls	r6, r0, #24
 8008482:	f101 0304 	add.w	r3, r1, #4
 8008486:	d50a      	bpl.n	800849e <_printf_i+0xce>
 8008488:	680e      	ldr	r6, [r1, #0]
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	2e00      	cmp	r6, #0
 800848e:	da03      	bge.n	8008498 <_printf_i+0xc8>
 8008490:	232d      	movs	r3, #45	; 0x2d
 8008492:	4276      	negs	r6, r6
 8008494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008498:	485e      	ldr	r0, [pc, #376]	; (8008614 <_printf_i+0x244>)
 800849a:	230a      	movs	r3, #10
 800849c:	e019      	b.n	80084d2 <_printf_i+0x102>
 800849e:	680e      	ldr	r6, [r1, #0]
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084a6:	bf18      	it	ne
 80084a8:	b236      	sxthne	r6, r6
 80084aa:	e7ef      	b.n	800848c <_printf_i+0xbc>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	6820      	ldr	r0, [r4, #0]
 80084b0:	1d19      	adds	r1, r3, #4
 80084b2:	6029      	str	r1, [r5, #0]
 80084b4:	0601      	lsls	r1, r0, #24
 80084b6:	d501      	bpl.n	80084bc <_printf_i+0xec>
 80084b8:	681e      	ldr	r6, [r3, #0]
 80084ba:	e002      	b.n	80084c2 <_printf_i+0xf2>
 80084bc:	0646      	lsls	r6, r0, #25
 80084be:	d5fb      	bpl.n	80084b8 <_printf_i+0xe8>
 80084c0:	881e      	ldrh	r6, [r3, #0]
 80084c2:	4854      	ldr	r0, [pc, #336]	; (8008614 <_printf_i+0x244>)
 80084c4:	2f6f      	cmp	r7, #111	; 0x6f
 80084c6:	bf0c      	ite	eq
 80084c8:	2308      	moveq	r3, #8
 80084ca:	230a      	movne	r3, #10
 80084cc:	2100      	movs	r1, #0
 80084ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084d2:	6865      	ldr	r5, [r4, #4]
 80084d4:	60a5      	str	r5, [r4, #8]
 80084d6:	2d00      	cmp	r5, #0
 80084d8:	bfa2      	ittt	ge
 80084da:	6821      	ldrge	r1, [r4, #0]
 80084dc:	f021 0104 	bicge.w	r1, r1, #4
 80084e0:	6021      	strge	r1, [r4, #0]
 80084e2:	b90e      	cbnz	r6, 80084e8 <_printf_i+0x118>
 80084e4:	2d00      	cmp	r5, #0
 80084e6:	d04d      	beq.n	8008584 <_printf_i+0x1b4>
 80084e8:	4615      	mov	r5, r2
 80084ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80084ee:	fb03 6711 	mls	r7, r3, r1, r6
 80084f2:	5dc7      	ldrb	r7, [r0, r7]
 80084f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084f8:	4637      	mov	r7, r6
 80084fa:	42bb      	cmp	r3, r7
 80084fc:	460e      	mov	r6, r1
 80084fe:	d9f4      	bls.n	80084ea <_printf_i+0x11a>
 8008500:	2b08      	cmp	r3, #8
 8008502:	d10b      	bne.n	800851c <_printf_i+0x14c>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	07de      	lsls	r6, r3, #31
 8008508:	d508      	bpl.n	800851c <_printf_i+0x14c>
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	6861      	ldr	r1, [r4, #4]
 800850e:	4299      	cmp	r1, r3
 8008510:	bfde      	ittt	le
 8008512:	2330      	movle	r3, #48	; 0x30
 8008514:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008518:	f105 35ff 	addle.w	r5, r5, #4294967295
 800851c:	1b52      	subs	r2, r2, r5
 800851e:	6122      	str	r2, [r4, #16]
 8008520:	f8cd a000 	str.w	sl, [sp]
 8008524:	464b      	mov	r3, r9
 8008526:	aa03      	add	r2, sp, #12
 8008528:	4621      	mov	r1, r4
 800852a:	4640      	mov	r0, r8
 800852c:	f7ff fee2 	bl	80082f4 <_printf_common>
 8008530:	3001      	adds	r0, #1
 8008532:	d14c      	bne.n	80085ce <_printf_i+0x1fe>
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	b004      	add	sp, #16
 800853a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853e:	4835      	ldr	r0, [pc, #212]	; (8008614 <_printf_i+0x244>)
 8008540:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008544:	6829      	ldr	r1, [r5, #0]
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	f851 6b04 	ldr.w	r6, [r1], #4
 800854c:	6029      	str	r1, [r5, #0]
 800854e:	061d      	lsls	r5, r3, #24
 8008550:	d514      	bpl.n	800857c <_printf_i+0x1ac>
 8008552:	07df      	lsls	r7, r3, #31
 8008554:	bf44      	itt	mi
 8008556:	f043 0320 	orrmi.w	r3, r3, #32
 800855a:	6023      	strmi	r3, [r4, #0]
 800855c:	b91e      	cbnz	r6, 8008566 <_printf_i+0x196>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	f023 0320 	bic.w	r3, r3, #32
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	2310      	movs	r3, #16
 8008568:	e7b0      	b.n	80084cc <_printf_i+0xfc>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	f043 0320 	orr.w	r3, r3, #32
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	2378      	movs	r3, #120	; 0x78
 8008574:	4828      	ldr	r0, [pc, #160]	; (8008618 <_printf_i+0x248>)
 8008576:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800857a:	e7e3      	b.n	8008544 <_printf_i+0x174>
 800857c:	0659      	lsls	r1, r3, #25
 800857e:	bf48      	it	mi
 8008580:	b2b6      	uxthmi	r6, r6
 8008582:	e7e6      	b.n	8008552 <_printf_i+0x182>
 8008584:	4615      	mov	r5, r2
 8008586:	e7bb      	b.n	8008500 <_printf_i+0x130>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	6826      	ldr	r6, [r4, #0]
 800858c:	6961      	ldr	r1, [r4, #20]
 800858e:	1d18      	adds	r0, r3, #4
 8008590:	6028      	str	r0, [r5, #0]
 8008592:	0635      	lsls	r5, r6, #24
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	d501      	bpl.n	800859c <_printf_i+0x1cc>
 8008598:	6019      	str	r1, [r3, #0]
 800859a:	e002      	b.n	80085a2 <_printf_i+0x1d2>
 800859c:	0670      	lsls	r0, r6, #25
 800859e:	d5fb      	bpl.n	8008598 <_printf_i+0x1c8>
 80085a0:	8019      	strh	r1, [r3, #0]
 80085a2:	2300      	movs	r3, #0
 80085a4:	6123      	str	r3, [r4, #16]
 80085a6:	4615      	mov	r5, r2
 80085a8:	e7ba      	b.n	8008520 <_printf_i+0x150>
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	1d1a      	adds	r2, r3, #4
 80085ae:	602a      	str	r2, [r5, #0]
 80085b0:	681d      	ldr	r5, [r3, #0]
 80085b2:	6862      	ldr	r2, [r4, #4]
 80085b4:	2100      	movs	r1, #0
 80085b6:	4628      	mov	r0, r5
 80085b8:	f7f7 fe32 	bl	8000220 <memchr>
 80085bc:	b108      	cbz	r0, 80085c2 <_printf_i+0x1f2>
 80085be:	1b40      	subs	r0, r0, r5
 80085c0:	6060      	str	r0, [r4, #4]
 80085c2:	6863      	ldr	r3, [r4, #4]
 80085c4:	6123      	str	r3, [r4, #16]
 80085c6:	2300      	movs	r3, #0
 80085c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085cc:	e7a8      	b.n	8008520 <_printf_i+0x150>
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	462a      	mov	r2, r5
 80085d2:	4649      	mov	r1, r9
 80085d4:	4640      	mov	r0, r8
 80085d6:	47d0      	blx	sl
 80085d8:	3001      	adds	r0, #1
 80085da:	d0ab      	beq.n	8008534 <_printf_i+0x164>
 80085dc:	6823      	ldr	r3, [r4, #0]
 80085de:	079b      	lsls	r3, r3, #30
 80085e0:	d413      	bmi.n	800860a <_printf_i+0x23a>
 80085e2:	68e0      	ldr	r0, [r4, #12]
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	4298      	cmp	r0, r3
 80085e8:	bfb8      	it	lt
 80085ea:	4618      	movlt	r0, r3
 80085ec:	e7a4      	b.n	8008538 <_printf_i+0x168>
 80085ee:	2301      	movs	r3, #1
 80085f0:	4632      	mov	r2, r6
 80085f2:	4649      	mov	r1, r9
 80085f4:	4640      	mov	r0, r8
 80085f6:	47d0      	blx	sl
 80085f8:	3001      	adds	r0, #1
 80085fa:	d09b      	beq.n	8008534 <_printf_i+0x164>
 80085fc:	3501      	adds	r5, #1
 80085fe:	68e3      	ldr	r3, [r4, #12]
 8008600:	9903      	ldr	r1, [sp, #12]
 8008602:	1a5b      	subs	r3, r3, r1
 8008604:	42ab      	cmp	r3, r5
 8008606:	dcf2      	bgt.n	80085ee <_printf_i+0x21e>
 8008608:	e7eb      	b.n	80085e2 <_printf_i+0x212>
 800860a:	2500      	movs	r5, #0
 800860c:	f104 0619 	add.w	r6, r4, #25
 8008610:	e7f5      	b.n	80085fe <_printf_i+0x22e>
 8008612:	bf00      	nop
 8008614:	08008a2b 	.word	0x08008a2b
 8008618:	08008a3c 	.word	0x08008a3c

0800861c <memcpy>:
 800861c:	440a      	add	r2, r1
 800861e:	4291      	cmp	r1, r2
 8008620:	f100 33ff 	add.w	r3, r0, #4294967295
 8008624:	d100      	bne.n	8008628 <memcpy+0xc>
 8008626:	4770      	bx	lr
 8008628:	b510      	push	{r4, lr}
 800862a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800862e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008632:	4291      	cmp	r1, r2
 8008634:	d1f9      	bne.n	800862a <memcpy+0xe>
 8008636:	bd10      	pop	{r4, pc}

08008638 <memmove>:
 8008638:	4288      	cmp	r0, r1
 800863a:	b510      	push	{r4, lr}
 800863c:	eb01 0402 	add.w	r4, r1, r2
 8008640:	d902      	bls.n	8008648 <memmove+0x10>
 8008642:	4284      	cmp	r4, r0
 8008644:	4623      	mov	r3, r4
 8008646:	d807      	bhi.n	8008658 <memmove+0x20>
 8008648:	1e43      	subs	r3, r0, #1
 800864a:	42a1      	cmp	r1, r4
 800864c:	d008      	beq.n	8008660 <memmove+0x28>
 800864e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008652:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008656:	e7f8      	b.n	800864a <memmove+0x12>
 8008658:	4402      	add	r2, r0
 800865a:	4601      	mov	r1, r0
 800865c:	428a      	cmp	r2, r1
 800865e:	d100      	bne.n	8008662 <memmove+0x2a>
 8008660:	bd10      	pop	{r4, pc}
 8008662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800866a:	e7f7      	b.n	800865c <memmove+0x24>

0800866c <_free_r>:
 800866c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800866e:	2900      	cmp	r1, #0
 8008670:	d044      	beq.n	80086fc <_free_r+0x90>
 8008672:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008676:	9001      	str	r0, [sp, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	f1a1 0404 	sub.w	r4, r1, #4
 800867e:	bfb8      	it	lt
 8008680:	18e4      	addlt	r4, r4, r3
 8008682:	f000 f913 	bl	80088ac <__malloc_lock>
 8008686:	4a1e      	ldr	r2, [pc, #120]	; (8008700 <_free_r+0x94>)
 8008688:	9801      	ldr	r0, [sp, #4]
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	b933      	cbnz	r3, 800869c <_free_r+0x30>
 800868e:	6063      	str	r3, [r4, #4]
 8008690:	6014      	str	r4, [r2, #0]
 8008692:	b003      	add	sp, #12
 8008694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008698:	f000 b90e 	b.w	80088b8 <__malloc_unlock>
 800869c:	42a3      	cmp	r3, r4
 800869e:	d908      	bls.n	80086b2 <_free_r+0x46>
 80086a0:	6825      	ldr	r5, [r4, #0]
 80086a2:	1961      	adds	r1, r4, r5
 80086a4:	428b      	cmp	r3, r1
 80086a6:	bf01      	itttt	eq
 80086a8:	6819      	ldreq	r1, [r3, #0]
 80086aa:	685b      	ldreq	r3, [r3, #4]
 80086ac:	1949      	addeq	r1, r1, r5
 80086ae:	6021      	streq	r1, [r4, #0]
 80086b0:	e7ed      	b.n	800868e <_free_r+0x22>
 80086b2:	461a      	mov	r2, r3
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	b10b      	cbz	r3, 80086bc <_free_r+0x50>
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	d9fa      	bls.n	80086b2 <_free_r+0x46>
 80086bc:	6811      	ldr	r1, [r2, #0]
 80086be:	1855      	adds	r5, r2, r1
 80086c0:	42a5      	cmp	r5, r4
 80086c2:	d10b      	bne.n	80086dc <_free_r+0x70>
 80086c4:	6824      	ldr	r4, [r4, #0]
 80086c6:	4421      	add	r1, r4
 80086c8:	1854      	adds	r4, r2, r1
 80086ca:	42a3      	cmp	r3, r4
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	d1e0      	bne.n	8008692 <_free_r+0x26>
 80086d0:	681c      	ldr	r4, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	6053      	str	r3, [r2, #4]
 80086d6:	4421      	add	r1, r4
 80086d8:	6011      	str	r1, [r2, #0]
 80086da:	e7da      	b.n	8008692 <_free_r+0x26>
 80086dc:	d902      	bls.n	80086e4 <_free_r+0x78>
 80086de:	230c      	movs	r3, #12
 80086e0:	6003      	str	r3, [r0, #0]
 80086e2:	e7d6      	b.n	8008692 <_free_r+0x26>
 80086e4:	6825      	ldr	r5, [r4, #0]
 80086e6:	1961      	adds	r1, r4, r5
 80086e8:	428b      	cmp	r3, r1
 80086ea:	bf04      	itt	eq
 80086ec:	6819      	ldreq	r1, [r3, #0]
 80086ee:	685b      	ldreq	r3, [r3, #4]
 80086f0:	6063      	str	r3, [r4, #4]
 80086f2:	bf04      	itt	eq
 80086f4:	1949      	addeq	r1, r1, r5
 80086f6:	6021      	streq	r1, [r4, #0]
 80086f8:	6054      	str	r4, [r2, #4]
 80086fa:	e7ca      	b.n	8008692 <_free_r+0x26>
 80086fc:	b003      	add	sp, #12
 80086fe:	bd30      	pop	{r4, r5, pc}
 8008700:	2000067c 	.word	0x2000067c

08008704 <sbrk_aligned>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4e0e      	ldr	r6, [pc, #56]	; (8008740 <sbrk_aligned+0x3c>)
 8008708:	460c      	mov	r4, r1
 800870a:	6831      	ldr	r1, [r6, #0]
 800870c:	4605      	mov	r5, r0
 800870e:	b911      	cbnz	r1, 8008716 <sbrk_aligned+0x12>
 8008710:	f000 f8bc 	bl	800888c <_sbrk_r>
 8008714:	6030      	str	r0, [r6, #0]
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 f8b7 	bl	800888c <_sbrk_r>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	d00a      	beq.n	8008738 <sbrk_aligned+0x34>
 8008722:	1cc4      	adds	r4, r0, #3
 8008724:	f024 0403 	bic.w	r4, r4, #3
 8008728:	42a0      	cmp	r0, r4
 800872a:	d007      	beq.n	800873c <sbrk_aligned+0x38>
 800872c:	1a21      	subs	r1, r4, r0
 800872e:	4628      	mov	r0, r5
 8008730:	f000 f8ac 	bl	800888c <_sbrk_r>
 8008734:	3001      	adds	r0, #1
 8008736:	d101      	bne.n	800873c <sbrk_aligned+0x38>
 8008738:	f04f 34ff 	mov.w	r4, #4294967295
 800873c:	4620      	mov	r0, r4
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	20000680 	.word	0x20000680

08008744 <_malloc_r>:
 8008744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008748:	1ccd      	adds	r5, r1, #3
 800874a:	f025 0503 	bic.w	r5, r5, #3
 800874e:	3508      	adds	r5, #8
 8008750:	2d0c      	cmp	r5, #12
 8008752:	bf38      	it	cc
 8008754:	250c      	movcc	r5, #12
 8008756:	2d00      	cmp	r5, #0
 8008758:	4607      	mov	r7, r0
 800875a:	db01      	blt.n	8008760 <_malloc_r+0x1c>
 800875c:	42a9      	cmp	r1, r5
 800875e:	d905      	bls.n	800876c <_malloc_r+0x28>
 8008760:	230c      	movs	r3, #12
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	2600      	movs	r6, #0
 8008766:	4630      	mov	r0, r6
 8008768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800876c:	4e2e      	ldr	r6, [pc, #184]	; (8008828 <_malloc_r+0xe4>)
 800876e:	f000 f89d 	bl	80088ac <__malloc_lock>
 8008772:	6833      	ldr	r3, [r6, #0]
 8008774:	461c      	mov	r4, r3
 8008776:	bb34      	cbnz	r4, 80087c6 <_malloc_r+0x82>
 8008778:	4629      	mov	r1, r5
 800877a:	4638      	mov	r0, r7
 800877c:	f7ff ffc2 	bl	8008704 <sbrk_aligned>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	4604      	mov	r4, r0
 8008784:	d14d      	bne.n	8008822 <_malloc_r+0xde>
 8008786:	6834      	ldr	r4, [r6, #0]
 8008788:	4626      	mov	r6, r4
 800878a:	2e00      	cmp	r6, #0
 800878c:	d140      	bne.n	8008810 <_malloc_r+0xcc>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	4631      	mov	r1, r6
 8008792:	4638      	mov	r0, r7
 8008794:	eb04 0803 	add.w	r8, r4, r3
 8008798:	f000 f878 	bl	800888c <_sbrk_r>
 800879c:	4580      	cmp	r8, r0
 800879e:	d13a      	bne.n	8008816 <_malloc_r+0xd2>
 80087a0:	6821      	ldr	r1, [r4, #0]
 80087a2:	3503      	adds	r5, #3
 80087a4:	1a6d      	subs	r5, r5, r1
 80087a6:	f025 0503 	bic.w	r5, r5, #3
 80087aa:	3508      	adds	r5, #8
 80087ac:	2d0c      	cmp	r5, #12
 80087ae:	bf38      	it	cc
 80087b0:	250c      	movcc	r5, #12
 80087b2:	4629      	mov	r1, r5
 80087b4:	4638      	mov	r0, r7
 80087b6:	f7ff ffa5 	bl	8008704 <sbrk_aligned>
 80087ba:	3001      	adds	r0, #1
 80087bc:	d02b      	beq.n	8008816 <_malloc_r+0xd2>
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	442b      	add	r3, r5
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	e00e      	b.n	80087e4 <_malloc_r+0xa0>
 80087c6:	6822      	ldr	r2, [r4, #0]
 80087c8:	1b52      	subs	r2, r2, r5
 80087ca:	d41e      	bmi.n	800880a <_malloc_r+0xc6>
 80087cc:	2a0b      	cmp	r2, #11
 80087ce:	d916      	bls.n	80087fe <_malloc_r+0xba>
 80087d0:	1961      	adds	r1, r4, r5
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	6025      	str	r5, [r4, #0]
 80087d6:	bf18      	it	ne
 80087d8:	6059      	strne	r1, [r3, #4]
 80087da:	6863      	ldr	r3, [r4, #4]
 80087dc:	bf08      	it	eq
 80087de:	6031      	streq	r1, [r6, #0]
 80087e0:	5162      	str	r2, [r4, r5]
 80087e2:	604b      	str	r3, [r1, #4]
 80087e4:	4638      	mov	r0, r7
 80087e6:	f104 060b 	add.w	r6, r4, #11
 80087ea:	f000 f865 	bl	80088b8 <__malloc_unlock>
 80087ee:	f026 0607 	bic.w	r6, r6, #7
 80087f2:	1d23      	adds	r3, r4, #4
 80087f4:	1af2      	subs	r2, r6, r3
 80087f6:	d0b6      	beq.n	8008766 <_malloc_r+0x22>
 80087f8:	1b9b      	subs	r3, r3, r6
 80087fa:	50a3      	str	r3, [r4, r2]
 80087fc:	e7b3      	b.n	8008766 <_malloc_r+0x22>
 80087fe:	6862      	ldr	r2, [r4, #4]
 8008800:	42a3      	cmp	r3, r4
 8008802:	bf0c      	ite	eq
 8008804:	6032      	streq	r2, [r6, #0]
 8008806:	605a      	strne	r2, [r3, #4]
 8008808:	e7ec      	b.n	80087e4 <_malloc_r+0xa0>
 800880a:	4623      	mov	r3, r4
 800880c:	6864      	ldr	r4, [r4, #4]
 800880e:	e7b2      	b.n	8008776 <_malloc_r+0x32>
 8008810:	4634      	mov	r4, r6
 8008812:	6876      	ldr	r6, [r6, #4]
 8008814:	e7b9      	b.n	800878a <_malloc_r+0x46>
 8008816:	230c      	movs	r3, #12
 8008818:	603b      	str	r3, [r7, #0]
 800881a:	4638      	mov	r0, r7
 800881c:	f000 f84c 	bl	80088b8 <__malloc_unlock>
 8008820:	e7a1      	b.n	8008766 <_malloc_r+0x22>
 8008822:	6025      	str	r5, [r4, #0]
 8008824:	e7de      	b.n	80087e4 <_malloc_r+0xa0>
 8008826:	bf00      	nop
 8008828:	2000067c 	.word	0x2000067c

0800882c <_realloc_r>:
 800882c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	4680      	mov	r8, r0
 8008832:	4614      	mov	r4, r2
 8008834:	460e      	mov	r6, r1
 8008836:	b921      	cbnz	r1, 8008842 <_realloc_r+0x16>
 8008838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800883c:	4611      	mov	r1, r2
 800883e:	f7ff bf81 	b.w	8008744 <_malloc_r>
 8008842:	b92a      	cbnz	r2, 8008850 <_realloc_r+0x24>
 8008844:	f7ff ff12 	bl	800866c <_free_r>
 8008848:	4625      	mov	r5, r4
 800884a:	4628      	mov	r0, r5
 800884c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008850:	f000 f838 	bl	80088c4 <_malloc_usable_size_r>
 8008854:	4284      	cmp	r4, r0
 8008856:	4607      	mov	r7, r0
 8008858:	d802      	bhi.n	8008860 <_realloc_r+0x34>
 800885a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800885e:	d812      	bhi.n	8008886 <_realloc_r+0x5a>
 8008860:	4621      	mov	r1, r4
 8008862:	4640      	mov	r0, r8
 8008864:	f7ff ff6e 	bl	8008744 <_malloc_r>
 8008868:	4605      	mov	r5, r0
 800886a:	2800      	cmp	r0, #0
 800886c:	d0ed      	beq.n	800884a <_realloc_r+0x1e>
 800886e:	42bc      	cmp	r4, r7
 8008870:	4622      	mov	r2, r4
 8008872:	4631      	mov	r1, r6
 8008874:	bf28      	it	cs
 8008876:	463a      	movcs	r2, r7
 8008878:	f7ff fed0 	bl	800861c <memcpy>
 800887c:	4631      	mov	r1, r6
 800887e:	4640      	mov	r0, r8
 8008880:	f7ff fef4 	bl	800866c <_free_r>
 8008884:	e7e1      	b.n	800884a <_realloc_r+0x1e>
 8008886:	4635      	mov	r5, r6
 8008888:	e7df      	b.n	800884a <_realloc_r+0x1e>
	...

0800888c <_sbrk_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4d06      	ldr	r5, [pc, #24]	; (80088a8 <_sbrk_r+0x1c>)
 8008890:	2300      	movs	r3, #0
 8008892:	4604      	mov	r4, r0
 8008894:	4608      	mov	r0, r1
 8008896:	602b      	str	r3, [r5, #0]
 8008898:	f7f8 fa8e 	bl	8000db8 <_sbrk>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d102      	bne.n	80088a6 <_sbrk_r+0x1a>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b103      	cbz	r3, 80088a6 <_sbrk_r+0x1a>
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	20000684 	.word	0x20000684

080088ac <__malloc_lock>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__malloc_lock+0x8>)
 80088ae:	f000 b811 	b.w	80088d4 <__retarget_lock_acquire_recursive>
 80088b2:	bf00      	nop
 80088b4:	20000688 	.word	0x20000688

080088b8 <__malloc_unlock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__malloc_unlock+0x8>)
 80088ba:	f000 b80c 	b.w	80088d6 <__retarget_lock_release_recursive>
 80088be:	bf00      	nop
 80088c0:	20000688 	.word	0x20000688

080088c4 <_malloc_usable_size_r>:
 80088c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c8:	1f18      	subs	r0, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfbc      	itt	lt
 80088ce:	580b      	ldrlt	r3, [r1, r0]
 80088d0:	18c0      	addlt	r0, r0, r3
 80088d2:	4770      	bx	lr

080088d4 <__retarget_lock_acquire_recursive>:
 80088d4:	4770      	bx	lr

080088d6 <__retarget_lock_release_recursive>:
 80088d6:	4770      	bx	lr

080088d8 <_init>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	bf00      	nop
 80088dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088de:	bc08      	pop	{r3}
 80088e0:	469e      	mov	lr, r3
 80088e2:	4770      	bx	lr

080088e4 <_fini>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	bf00      	nop
 80088e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ea:	bc08      	pop	{r3}
 80088ec:	469e      	mov	lr, r3
 80088ee:	4770      	bx	lr
