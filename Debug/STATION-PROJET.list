
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f4  080066f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080066f4  080066f4  000166f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066fc  080066fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066fc  080066fc  000166fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000115c  20000070  08006774  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011cc  08006774  000211cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159af  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e0b  00000000  00000000  00035a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00038860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  000399e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028667  00000000  00000000  0003aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163fc  00000000  00000000  0006306f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f80cb  00000000  00000000  0007946b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  00171588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006594 	.word	0x08006594

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006594 	.word	0x08006594

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_DMA_Init+0x38>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <MX_DMA_Init+0x38>)
 80005c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_DMA_Init+0x38>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2046      	movs	r0, #70	; 0x46
 80005d8:	f001 f875 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80005dc:	2046      	movs	r0, #70	; 0x46
 80005de:	f001 f88e 	bl	80016fe <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b090      	sub	sp, #64	; 0x40
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000606:	4b9f      	ldr	r3, [pc, #636]	; (8000884 <MX_GPIO_Init+0x294>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a9e      	ldr	r2, [pc, #632]	; (8000884 <MX_GPIO_Init+0x294>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b9c      	ldr	r3, [pc, #624]	; (8000884 <MX_GPIO_Init+0x294>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
 800061c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800061e:	4b99      	ldr	r3, [pc, #612]	; (8000884 <MX_GPIO_Init+0x294>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a98      	ldr	r2, [pc, #608]	; (8000884 <MX_GPIO_Init+0x294>)
 8000624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b96      	ldr	r3, [pc, #600]	; (8000884 <MX_GPIO_Init+0x294>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b93      	ldr	r3, [pc, #588]	; (8000884 <MX_GPIO_Init+0x294>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a92      	ldr	r2, [pc, #584]	; (8000884 <MX_GPIO_Init+0x294>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b90      	ldr	r3, [pc, #576]	; (8000884 <MX_GPIO_Init+0x294>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	623b      	str	r3, [r7, #32]
 800064c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b8d      	ldr	r3, [pc, #564]	; (8000884 <MX_GPIO_Init+0x294>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a8c      	ldr	r2, [pc, #560]	; (8000884 <MX_GPIO_Init+0x294>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b8a      	ldr	r3, [pc, #552]	; (8000884 <MX_GPIO_Init+0x294>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	61fb      	str	r3, [r7, #28]
 8000664:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b87      	ldr	r3, [pc, #540]	; (8000884 <MX_GPIO_Init+0x294>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a86      	ldr	r2, [pc, #536]	; (8000884 <MX_GPIO_Init+0x294>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b84      	ldr	r3, [pc, #528]	; (8000884 <MX_GPIO_Init+0x294>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	61bb      	str	r3, [r7, #24]
 800067c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b81      	ldr	r3, [pc, #516]	; (8000884 <MX_GPIO_Init+0x294>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a80      	ldr	r2, [pc, #512]	; (8000884 <MX_GPIO_Init+0x294>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b7e      	ldr	r3, [pc, #504]	; (8000884 <MX_GPIO_Init+0x294>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000696:	4b7b      	ldr	r3, [pc, #492]	; (8000884 <MX_GPIO_Init+0x294>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a7a      	ldr	r2, [pc, #488]	; (8000884 <MX_GPIO_Init+0x294>)
 800069c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b78      	ldr	r3, [pc, #480]	; (8000884 <MX_GPIO_Init+0x294>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ae:	4b75      	ldr	r3, [pc, #468]	; (8000884 <MX_GPIO_Init+0x294>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a74      	ldr	r2, [pc, #464]	; (8000884 <MX_GPIO_Init+0x294>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b72      	ldr	r3, [pc, #456]	; (8000884 <MX_GPIO_Init+0x294>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006c6:	4b6f      	ldr	r3, [pc, #444]	; (8000884 <MX_GPIO_Init+0x294>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a6e      	ldr	r2, [pc, #440]	; (8000884 <MX_GPIO_Init+0x294>)
 80006cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b6c      	ldr	r3, [pc, #432]	; (8000884 <MX_GPIO_Init+0x294>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006de:	4b69      	ldr	r3, [pc, #420]	; (8000884 <MX_GPIO_Init+0x294>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a68      	ldr	r2, [pc, #416]	; (8000884 <MX_GPIO_Init+0x294>)
 80006e4:	f043 0320 	orr.w	r3, r3, #32
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b66      	ldr	r3, [pc, #408]	; (8000884 <MX_GPIO_Init+0x294>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0320 	and.w	r3, r3, #32
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b63      	ldr	r3, [pc, #396]	; (8000884 <MX_GPIO_Init+0x294>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a62      	ldr	r2, [pc, #392]	; (8000884 <MX_GPIO_Init+0x294>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b60      	ldr	r3, [pc, #384]	; (8000884 <MX_GPIO_Init+0x294>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_GPIO_Port, LD_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2102      	movs	r1, #2
 8000712:	485d      	ldr	r0, [pc, #372]	; (8000888 <MX_GPIO_Init+0x298>)
 8000714:	f001 fdd0 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 8000718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	2303      	movs	r3, #3
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800072a:	4619      	mov	r1, r3
 800072c:	4857      	ldr	r0, [pc, #348]	; (800088c <MX_GPIO_Init+0x29c>)
 800072e:	f001 fc17 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 8000732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000738:	2303      	movs	r3, #3
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000744:	4619      	mov	r1, r3
 8000746:	4852      	ldr	r0, [pc, #328]	; (8000890 <MX_GPIO_Init+0x2a0>)
 8000748:	f001 fc0a 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB7 PB6 PB13
                           PB12 PB2 PB10 PB1
                           PB0 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800074c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000752:	2303      	movs	r3, #3
 8000754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800075e:	4619      	mov	r1, r3
 8000760:	484c      	ldr	r0, [pc, #304]	; (8000894 <MX_GPIO_Init+0x2a4>)
 8000762:	f001 fbfd 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD2
                           PD15 PD10 PD14 PD9
                           PD8 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	2303      	movs	r3, #3
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000778:	4619      	mov	r1, r3
 800077a:	4847      	ldr	r0, [pc, #284]	; (8000898 <MX_GPIO_Init+0x2a8>)
 800077c:	f001 fbf0 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 8000780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000786:	2303      	movs	r3, #3
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000792:	4619      	mov	r1, r3
 8000794:	4841      	ldr	r0, [pc, #260]	; (800089c <MX_GPIO_Init+0x2ac>)
 8000796:	f001 fbe3 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RAIN_Pin;
 800079a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RAIN_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ae:	4619      	mov	r1, r3
 80007b0:	483b      	ldr	r0, [pc, #236]	; (80008a0 <MX_GPIO_Init+0x2b0>)
 80007b2:	f001 fbd5 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80007b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007bc:	2303      	movs	r3, #3
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80007c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c8:	4619      	mov	r1, r3
 80007ca:	4836      	ldr	r0, [pc, #216]	; (80008a4 <MX_GPIO_Init+0x2b4>)
 80007cc:	f001 fbc8 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 PA8 PA1
                           PA0 PA4 PA2 PA6
                           PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_1
 80007d0:	f641 13ff 	movw	r3, #6655	; 0x19ff
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d6:	2303      	movs	r3, #3
 80007d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007e2:	4619      	mov	r1, r3
 80007e4:	482e      	ldr	r0, [pc, #184]	; (80008a0 <MX_GPIO_Init+0x2b0>)
 80007e6:	f001 fbbb 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI12 PI9 PI0 PI11
                           PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 80007ea:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_11
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f0:	2303      	movs	r3, #3
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fc:	4619      	mov	r1, r3
 80007fe:	4822      	ldr	r0, [pc, #136]	; (8000888 <MX_GPIO_Init+0x298>)
 8000800:	f001 fbae 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000804:	23ff      	movs	r3, #255	; 0xff
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000808:	2303      	movs	r3, #3
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000814:	4619      	mov	r1, r3
 8000816:	4824      	ldr	r0, [pc, #144]	; (80008a8 <MX_GPIO_Init+0x2b8>)
 8000818:	f001 fba2 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800081c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000822:	2303      	movs	r3, #3
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800082a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800082e:	4619      	mov	r1, r3
 8000830:	481e      	ldr	r0, [pc, #120]	; (80008ac <MX_GPIO_Init+0x2bc>)
 8000832:	f001 fb95 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8000836:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000848:	4619      	mov	r1, r3
 800084a:	4819      	ldr	r0, [pc, #100]	; (80008b0 <MX_GPIO_Init+0x2c0>)
 800084c:	f001 fb88 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_Pin;
 8000850:	2302      	movs	r3, #2
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000864:	4619      	mov	r1, r3
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <MX_GPIO_Init+0x298>)
 8000868:	f001 fb7a 	bl	8001f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2028      	movs	r0, #40	; 0x28
 8000872:	f000 ff28 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000876:	2028      	movs	r0, #40	; 0x28
 8000878:	f000 ff41 	bl	80016fe <HAL_NVIC_EnableIRQ>

}
 800087c:	bf00      	nop
 800087e:	3740      	adds	r7, #64	; 0x40
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40022000 	.word	0x40022000
 800088c:	40021000 	.word	0x40021000
 8000890:	40021800 	.word	0x40021800
 8000894:	40020400 	.word	0x40020400
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40022400 	.word	0x40022400
 80008a8:	40022800 	.word	0x40022800
 80008ac:	40021400 	.word	0x40021400
 80008b0:	40021c00 	.word	0x40021c00

080008b4 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file ,char*ptr,int len){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)ptr, len);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	461a      	mov	r2, r3
 80008c6:	68b9      	ldr	r1, [r7, #8]
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <_write+0x24>)
 80008ca:	f003 fd2f 	bl	800432c <HAL_UART_Transmit_DMA>
	return len;
 80008ce:	687b      	ldr	r3, [r7, #4]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200010d4 	.word	0x200010d4

080008dc <epoch_days_fast>:


int epoch_days_fast(int y, int m, int d) {
 80008dc:	b480      	push	{r7}
 80008de:	b08d      	sub	sp, #52	; 0x34
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  const uint32_t year_base = 4800;
 80008e8:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint32_t m_adj = m - 3;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3b03      	subs	r3, #3
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  const uint32_t carry = m_adj > m ? 1 : 0;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008f8:	429a      	cmp	r2, r3
 80008fa:	bf8c      	ite	hi
 80008fc:	2301      	movhi	r3, #1
 80008fe:	2300      	movls	r3, #0
 8000900:	b2db      	uxtb	r3, r3
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  const uint32_t adjust = carry ? 12 : 0;
 8000904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <epoch_days_fast+0x32>
 800090a:	230c      	movs	r3, #12
 800090c:	e000      	b.n	8000910 <epoch_days_fast+0x34>
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  const uint32_t y_adj = y + year_base - carry;
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000916:	441a      	add	r2, r3
 8000918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	61fb      	str	r3, [r7, #28]
  const uint32_t month_days = ((m_adj + adjust) * 62719 + 769) / 2048;
 800091e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	4413      	add	r3, r2
 8000924:	f24f 42ff 	movw	r2, #62719	; 0xf4ff
 8000928:	fb02 f303 	mul.w	r3, r2, r3
 800092c:	f203 3301 	addw	r3, r3, #769	; 0x301
 8000930:	0adb      	lsrs	r3, r3, #11
 8000932:	61bb      	str	r3, [r7, #24]
  const uint32_t leap_days = y_adj / 4 - y_adj / 100 + y_adj / 400;
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	089a      	lsrs	r2, r3, #2
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	490f      	ldr	r1, [pc, #60]	; (8000978 <epoch_days_fast+0x9c>)
 800093c:	fba1 1303 	umull	r1, r3, r1, r3
 8000940:	095b      	lsrs	r3, r3, #5
 8000942:	1ad2      	subs	r2, r2, r3
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	490c      	ldr	r1, [pc, #48]	; (8000978 <epoch_days_fast+0x9c>)
 8000948:	fba1 1303 	umull	r1, r3, r1, r3
 800094c:	09db      	lsrs	r3, r3, #7
 800094e:	4413      	add	r3, r2
 8000950:	617b      	str	r3, [r7, #20]
  return y_adj * 365 + leap_days + month_days + (d - 1) - 2472632;
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	f240 126d 	movw	r2, #365	; 0x16d
 8000958:	fb03 f202 	mul.w	r2, r3, r2
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	441a      	add	r2, r3
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	441a      	add	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	441a      	add	r2, r3
 8000968:	4b04      	ldr	r3, [pc, #16]	; (800097c <epoch_days_fast+0xa0>)
 800096a:	4413      	add	r3, r2
}
 800096c:	4618      	mov	r0, r3
 800096e:	3734      	adds	r7, #52	; 0x34
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	51eb851f 	.word	0x51eb851f
 800097c:	ffda4547 	.word	0xffda4547

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f000 fd22 	bl	80013ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f93f 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098e:	f7ff fe2f 	bl	80005f0 <MX_GPIO_Init>
  MX_TIM7_Init();
 8000992:	f000 fbcd 	bl	8001130 <MX_TIM7_Init>
  MX_DMA_Init();
 8000996:	f7ff fe0d 	bl	80005b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800099a:	f000 fc27 	bl	80011ec <MX_USART1_UART_Init>
  MX_RTC_Init();
 800099e:	f000 f9d5 	bl	8000d4c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("\n%s\n\r","Hello Putty.");
 80009a2:	4982      	ldr	r1, [pc, #520]	; (8000bac <main+0x22c>)
 80009a4:	4882      	ldr	r0, [pc, #520]	; (8000bb0 <main+0x230>)
 80009a6:	f004 fe67 	bl	8005678 <iprintf>

	RTC_SetDate(&sDate, 22, 11, 9, 2);
 80009aa:	2302      	movs	r3, #2
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2309      	movs	r3, #9
 80009b0:	220b      	movs	r2, #11
 80009b2:	2116      	movs	r1, #22
 80009b4:	487f      	ldr	r0, [pc, #508]	; (8000bb4 <main+0x234>)
 80009b6:	f000 fa53 	bl	8000e60 <RTC_SetDate>
	RTC_SetTime(&sTime, 11, 00, 00);
 80009ba:	2300      	movs	r3, #0
 80009bc:	2200      	movs	r2, #0
 80009be:	210b      	movs	r1, #11
 80009c0:	487d      	ldr	r0, [pc, #500]	; (8000bb8 <main+0x238>)
 80009c2:	f000 fa77 	bl	8000eb4 <RTC_SetTime>

  HAL_TIM_Base_Start_IT(&htim7);
 80009c6:	487d      	ldr	r0, [pc, #500]	; (8000bbc <main+0x23c>)
 80009c8:	f003 f956 	bl	8003c78 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
  	if (Flag_EXTI15 == 1){
 80009cc:	4b7c      	ldr	r3, [pc, #496]	; (8000bc0 <main+0x240>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	f040 80dc 	bne.w	8000b8e <main+0x20e>
  		HAL_GPIO_TogglePin(LD_GPIO_Port, LD_Pin);
 80009d6:	2102      	movs	r1, #2
 80009d8:	487a      	ldr	r0, [pc, #488]	; (8000bc4 <main+0x244>)
 80009da:	f001 fc86 	bl	80022ea <HAL_GPIO_TogglePin>
			/* Get the RTC current Date */
			HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80009de:	2200      	movs	r2, #0
 80009e0:	4975      	ldr	r1, [pc, #468]	; (8000bb8 <main+0x238>)
 80009e2:	4879      	ldr	r0, [pc, #484]	; (8000bc8 <main+0x248>)
 80009e4:	f002 fef0 	bl	80037c8 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80009e8:	2200      	movs	r2, #0
 80009ea:	4972      	ldr	r1, [pc, #456]	; (8000bb4 <main+0x234>)
 80009ec:	4876      	ldr	r0, [pc, #472]	; (8000bc8 <main+0x248>)
 80009ee:	f002 fff1 	bl	80039d4 <HAL_RTC_GetDate>
			timestamp = epoch_days_fast(sDate.Year+2000, sDate.Month, sDate.Date)*DAY_SECONDS+ (sTime.Hours*3600+sTime.Minutes*60+sTime.Seconds);
 80009f2:	4b70      	ldr	r3, [pc, #448]	; (8000bb4 <main+0x234>)
 80009f4:	78db      	ldrb	r3, [r3, #3]
 80009f6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80009fa:	4a6e      	ldr	r2, [pc, #440]	; (8000bb4 <main+0x234>)
 80009fc:	7852      	ldrb	r2, [r2, #1]
 80009fe:	4611      	mov	r1, r2
 8000a00:	4a6c      	ldr	r2, [pc, #432]	; (8000bb4 <main+0x234>)
 8000a02:	7892      	ldrb	r2, [r2, #2]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff69 	bl	80008dc <epoch_days_fast>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a6f      	ldr	r2, [pc, #444]	; (8000bcc <main+0x24c>)
 8000a0e:	fb03 f202 	mul.w	r2, r3, r2
 8000a12:	4b69      	ldr	r3, [pc, #420]	; (8000bb8 <main+0x238>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000a1c:	fb03 f101 	mul.w	r1, r3, r1
 8000a20:	4b65      	ldr	r3, [pc, #404]	; (8000bb8 <main+0x238>)
 8000a22:	785b      	ldrb	r3, [r3, #1]
 8000a24:	4618      	mov	r0, r3
 8000a26:	4603      	mov	r3, r0
 8000a28:	011b      	lsls	r3, r3, #4
 8000a2a:	1a1b      	subs	r3, r3, r0
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	440b      	add	r3, r1
 8000a30:	4961      	ldr	r1, [pc, #388]	; (8000bb8 <main+0x238>)
 8000a32:	7889      	ldrb	r1, [r1, #2]
 8000a34:	440b      	add	r3, r1
 8000a36:	4413      	add	r3, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b65      	ldr	r3, [pc, #404]	; (8000bd0 <main+0x250>)
 8000a3c:	601a      	str	r2, [r3, #0]
			printf("Date : %02u:%02u:%04u ",sDate.Date, sDate.Month, 2000 + sDate.Year);
 8000a3e:	4b5d      	ldr	r3, [pc, #372]	; (8000bb4 <main+0x234>)
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	4619      	mov	r1, r3
 8000a44:	4b5b      	ldr	r3, [pc, #364]	; (8000bb4 <main+0x234>)
 8000a46:	785b      	ldrb	r3, [r3, #1]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	; (8000bb4 <main+0x234>)
 8000a4c:	78db      	ldrb	r3, [r3, #3]
 8000a4e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000a52:	4860      	ldr	r0, [pc, #384]	; (8000bd4 <main+0x254>)
 8000a54:	f004 fe10 	bl	8005678 <iprintf>
			HAL_Delay(5);
 8000a58:	2005      	movs	r0, #5
 8000a5a:	f000 fd15 	bl	8001488 <HAL_Delay>
			printf("@ %02u:%02u:%02u\n\r",sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a5e:	4b56      	ldr	r3, [pc, #344]	; (8000bb8 <main+0x238>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	4b54      	ldr	r3, [pc, #336]	; (8000bb8 <main+0x238>)
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b53      	ldr	r3, [pc, #332]	; (8000bb8 <main+0x238>)
 8000a6c:	789b      	ldrb	r3, [r3, #2]
 8000a6e:	485a      	ldr	r0, [pc, #360]	; (8000bd8 <main+0x258>)
 8000a70:	f004 fe02 	bl	8005678 <iprintf>
			HAL_Delay(5);
 8000a74:	2005      	movs	r0, #5
 8000a76:	f000 fd07 	bl	8001488 <HAL_Delay>
			printf("Timestamp : %lu\n\r",timestamp);
 8000a7a:	4b55      	ldr	r3, [pc, #340]	; (8000bd0 <main+0x250>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4856      	ldr	r0, [pc, #344]	; (8000bdc <main+0x25c>)
 8000a82:	f004 fdf9 	bl	8005678 <iprintf>
			HAL_Delay(5);
 8000a86:	2005      	movs	r0, #5
 8000a88:	f000 fcfe 	bl	8001488 <HAL_Delay>


			printf("%d Rain events.\n\r",rain_events_size + 1);
 8000a8c:	4b54      	ldr	r3, [pc, #336]	; (8000be0 <main+0x260>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	4853      	ldr	r0, [pc, #332]	; (8000be4 <main+0x264>)
 8000a96:	f004 fdef 	bl	8005678 <iprintf>
			HAL_Delay(5);
 8000a9a:	2005      	movs	r0, #5
 8000a9c:	f000 fcf4 	bl	8001488 <HAL_Delay>
			rain_events[rain_events_size] = timestamp;
 8000aa0:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <main+0x260>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <main+0x250>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a4f      	ldr	r2, [pc, #316]	; (8000be8 <main+0x268>)
 8000aac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			rain_events_size ++;
 8000ab0:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <main+0x260>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <main+0x260>)
 8000aba:	801a      	strh	r2, [r3, #0]
			for (uint16_t i = 0; i< rain_events_size; i++){
 8000abc:	2300      	movs	r3, #0
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	e059      	b.n	8000b76 <main+0x1f6>
				if (rain_events[i] >= timestamp - MONTH_SECONDS){
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <main+0x268>)
 8000ac6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aca:	4b41      	ldr	r3, [pc, #260]	; (8000bd0 <main+0x250>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2100      	movs	r1, #0
 8000ad0:	1a5b      	subs	r3, r3, r1
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d347      	bcc.n	8000b66 <main+0x1e6>
					rain_hourly+=RAIN_INC_MM;
 8000ad6:	4b45      	ldr	r3, [pc, #276]	; (8000bec <main+0x26c>)
 8000ad8:	edd3 7a00 	vldr	s15, [r3]
 8000adc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000bf0 <main+0x270>
 8000ae0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ae4:	4b41      	ldr	r3, [pc, #260]	; (8000bec <main+0x26c>)
 8000ae6:	edc3 7a00 	vstr	s15, [r3]
					if (rain_events[i] >= timestamp - WEEK_SECONDS){
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4a3e      	ldr	r2, [pc, #248]	; (8000be8 <main+0x268>)
 8000aee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000af2:	4b37      	ldr	r3, [pc, #220]	; (8000bd0 <main+0x250>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	493f      	ldr	r1, [pc, #252]	; (8000bf4 <main+0x274>)
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d338      	bcc.n	8000b70 <main+0x1f0>
						rain_daily+=RAIN_INC_MM;
 8000afe:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <main+0x278>)
 8000b00:	edd3 7a00 	vldr	s15, [r3]
 8000b04:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000bf0 <main+0x270>
 8000b08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <main+0x278>)
 8000b0e:	edc3 7a00 	vstr	s15, [r3]
						if (rain_events[i] >= timestamp - DAY_SECONDS){
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4a34      	ldr	r2, [pc, #208]	; (8000be8 <main+0x268>)
 8000b16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <main+0x250>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	492b      	ldr	r1, [pc, #172]	; (8000bcc <main+0x24c>)
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	429a      	cmp	r2, r3
 8000b24:	d324      	bcc.n	8000b70 <main+0x1f0>
							rain_weekly+=RAIN_INC_MM;
 8000b26:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <main+0x27c>)
 8000b28:	edd3 7a00 	vldr	s15, [r3]
 8000b2c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000bf0 <main+0x270>
 8000b30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b34:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <main+0x27c>)
 8000b36:	edc3 7a00 	vstr	s15, [r3]
							if (rain_events[i] >= timestamp - HOUR_SECONDS){
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	4a2a      	ldr	r2, [pc, #168]	; (8000be8 <main+0x268>)
 8000b3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <main+0x250>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000b4a:	1a5b      	subs	r3, r3, r1
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d30f      	bcc.n	8000b70 <main+0x1f0>
								rain_monthly+=RAIN_INC_MM;
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <main+0x280>)
 8000b52:	edd3 7a00 	vldr	s15, [r3]
 8000b56:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000bf0 <main+0x270>
 8000b5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b5e:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <main+0x280>)
 8000b60:	edc3 7a00 	vstr	s15, [r3]
 8000b64:	e004      	b.n	8000b70 <main+0x1f0>
							}
						}
					}
				}
				else rain_events[i] = 0;
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	4a1f      	ldr	r2, [pc, #124]	; (8000be8 <main+0x268>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint16_t i = 0; i< rain_events_size; i++){
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	3301      	adds	r3, #1
 8000b74:	80fb      	strh	r3, [r7, #6]
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <main+0x260>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	88fa      	ldrh	r2, [r7, #6]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d3a0      	bcc.n	8000ac2 <main+0x142>
			}
			//printf("Rain h %d, d %d, w %d, m %d\n\r",rain_hourly,rain_daily,rain_weekly,rain_monthly);
			//HAL_Delay(5);
			printf("--------------------------------\n\r");
 8000b80:	4820      	ldr	r0, [pc, #128]	; (8000c04 <main+0x284>)
 8000b82:	f004 fd79 	bl	8005678 <iprintf>
			Flag_EXTI15 = 0;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <main+0x240>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e71e      	b.n	80009cc <main+0x4c>
		}
		else if (Flag_TIM7 == 1){
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <main+0x288>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d103      	bne.n	8000b9e <main+0x21e>
			//500 mHz blink
			//HAL_GPIO_TogglePin(LD_GPIO_Port, LD_Pin);
			Flag_TIM7 = 0;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <main+0x288>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e716      	b.n	80009cc <main+0x4c>
		}
		else{
			HAL_SuspendTick();
 8000b9e:	f000 fc97 	bl	80014d0 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f001 fbd3 	bl	8002350 <HAL_PWR_EnterSLEEPMode>
  	if (Flag_EXTI15 == 1){
 8000baa:	e70f      	b.n	80009cc <main+0x4c>
 8000bac:	080065ac 	.word	0x080065ac
 8000bb0:	080065bc 	.word	0x080065bc
 8000bb4:	2000008c 	.word	0x2000008c
 8000bb8:	20000090 	.word	0x20000090
 8000bbc:	20001088 	.word	0x20001088
 8000bc0:	200000a9 	.word	0x200000a9
 8000bc4:	40022000 	.word	0x40022000
 8000bc8:	20001064 	.word	0x20001064
 8000bcc:	00015180 	.word	0x00015180
 8000bd0:	200000ac 	.word	0x200000ac
 8000bd4:	080065c4 	.word	0x080065c4
 8000bd8:	080065dc 	.word	0x080065dc
 8000bdc:	080065f0 	.word	0x080065f0
 8000be0:	20001060 	.word	0x20001060
 8000be4:	08006604 	.word	0x08006604
 8000be8:	200000b0 	.word	0x200000b0
 8000bec:	20001050 	.word	0x20001050
 8000bf0:	3e8f0d84 	.word	0x3e8f0d84
 8000bf4:	00093a80 	.word	0x00093a80
 8000bf8:	20001054 	.word	0x20001054
 8000bfc:	20001058 	.word	0x20001058
 8000c00:	2000105c 	.word	0x2000105c
 8000c04:	08006618 	.word	0x08006618
 8000c08:	200000a8 	.word	0x200000a8

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	; 0x50
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	2230      	movs	r2, #48	; 0x30
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f004 fd24 	bl	8005668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <SystemClock_Config+0xd8>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	4a2b      	ldr	r2, [pc, #172]	; (8000ce4 <SystemClock_Config+0xd8>)
 8000c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <SystemClock_Config+0xd8>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <SystemClock_Config+0xdc>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c50:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <SystemClock_Config+0xdc>)
 8000c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <SystemClock_Config+0xdc>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c64:	2309      	movs	r3, #9
 8000c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c72:	2302      	movs	r3, #2
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000c7c:	230c      	movs	r3, #12
 8000c7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c80:	2360      	movs	r3, #96	; 0x60
 8000c82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	f107 0320 	add.w	r3, r7, #32
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fbcf 	bl	8002434 <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c9c:	f000 f850 	bl	8000d40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ca0:	f001 fb78 	bl	8002394 <HAL_PWREx_EnableOverDrive>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000caa:	f000 f849 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cae:	230f      	movs	r3, #15
 8000cb0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2103      	movs	r1, #3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 fe55 	bl	800297c <HAL_RCC_ClockConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000cd8:	f000 f832 	bl	8000d40 <Error_Handler>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3750      	adds	r7, #80	; 0x50
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	HAL_ResumeTick();
 8000cf6:	f000 fbfb 	bl	80014f0 <HAL_ResumeTick>
	if(GPIO_Pin == RAIN_Pin){
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d00:	d102      	bne.n	8000d08 <HAL_GPIO_EXTI_Callback+0x1c>
		Flag_EXTI15 = 1;
 8000d02:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_GPIO_EXTI_Callback+0x24>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
	}
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000a9 	.word	0x200000a9

08000d14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick();
 8000d1c:	f000 fbe8 	bl	80014f0 <HAL_ResumeTick>
	if (htim == &htim7){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d102      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x1a>
		Flag_TIM7 = 1 ;
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
	}
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001088 	.word	0x20001088
 8000d3c:	200000a8 	.word	0x200000a8

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000d6a:	4a25      	ldr	r2, [pc, #148]	; (8000e00 <MX_RTC_Init+0xb4>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d74:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000d76:	227f      	movs	r2, #127	; 0x7f
 8000d78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d7a:	4b20      	ldr	r3, [pc, #128]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d92:	481a      	ldr	r0, [pc, #104]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000d94:	f002 fbc8 	bl	8003528 <HAL_RTC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000d9e:	f7ff ffcf 	bl	8000d40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000dc0:	f002 fc44 	bl	800364c <HAL_RTC_SetTime>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000dca:	f7ff ffb9 	bl	8000d40 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 22;
 8000dda:	2316      	movs	r3, #22
 8000ddc:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_RTC_Init+0xb0>)
 8000de6:	f002 fd4d 	bl	8003884 <HAL_RTC_SetDate>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000df0:	f7ff ffa6 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20001064 	.word	0x20001064
 8000e00:	40002800 	.word	0x40002800

08000e04 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0a4      	sub	sp, #144	; 0x90
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2284      	movs	r2, #132	; 0x84
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f004 fc27 	bl	8005668 <memset>
  if(rtcHandle->Instance==RTC)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_RTC_MspInit+0x54>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d114      	bne.n	8000e4e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e24:	2320      	movs	r3, #32
 8000e26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 ff88 	bl	8002d48 <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000e3e:	f7ff ff7f 	bl	8000d40 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_RTC_MspInit+0x58>)
 8000e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <HAL_RTC_MspInit+0x58>)
 8000e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3790      	adds	r7, #144	; 0x90
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40002800 	.word	0x40002800
 8000e5c:	40023800 	.word	0x40023800

08000e60 <RTC_SetDate>:
  /* USER CODE END RTC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void RTC_SetDate(RTC_DateTypeDef * sDate, uint8_t year, uint8_t month, uint8_t date, uint8_t wday){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	4608      	mov	r0, r1
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	70fb      	strb	r3, [r7, #3]
 8000e72:	460b      	mov	r3, r1
 8000e74:	70bb      	strb	r3, [r7, #2]
 8000e76:	4613      	mov	r3, r2
 8000e78:	707b      	strb	r3, [r7, #1]
	sDate->Year = year;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	78fa      	ldrb	r2, [r7, #3]
 8000e7e:	70da      	strb	r2, [r3, #3]
	sDate->Month = month;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	78ba      	ldrb	r2, [r7, #2]
 8000e84:	705a      	strb	r2, [r3, #1]
	sDate->Date = date;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	787a      	ldrb	r2, [r7, #1]
 8000e8a:	709a      	strb	r2, [r3, #2]
	sDate->WeekDay = wday;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7c3a      	ldrb	r2, [r7, #16]
 8000e90:	701a      	strb	r2, [r3, #0]
	HAL_RTC_SetDate(&hrtc, sDate, RTC_FORMAT_BIN);
 8000e92:	2200      	movs	r2, #0
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <RTC_SetDate+0x50>)
 8000e98:	f002 fcf4 	bl	8003884 <HAL_RTC_SetDate>

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8000e9c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <RTC_SetDate+0x50>)
 8000ea4:	f002 fe76 	bl	8003b94 <HAL_RTCEx_BKUPWrite>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20001064 	.word	0x20001064

08000eb4 <RTC_SetTime>:

void RTC_SetTime(RTC_TimeTypeDef * sTime,uint8_t hour, uint8_t min, uint8_t sec){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	70fb      	strb	r3, [r7, #3]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	70bb      	strb	r3, [r7, #2]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	707b      	strb	r3, [r7, #1]
	sTime->Hours = hour;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	701a      	strb	r2, [r3, #0]
	sTime->Minutes = min;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	78ba      	ldrb	r2, [r7, #2]
 8000ed8:	705a      	strb	r2, [r3, #1]
	sTime->Seconds = sec;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	787a      	ldrb	r2, [r7, #1]
 8000ede:	709a      	strb	r2, [r3, #2]
	sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
	sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
	HAL_RTC_SetTime(&hrtc, sTime, RTC_FORMAT_BIN);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <RTC_SetTime+0x58>)
 8000ef2:	f002 fbab 	bl	800364c <HAL_RTC_SetTime>

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8000ef6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000efa:	2101      	movs	r1, #1
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <RTC_SetTime+0x58>)
 8000efe:	f002 fe49 	bl	8003b94 <HAL_RTCEx_BKUPWrite>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20001064 	.word	0x20001064

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_MspInit+0x44>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_MspInit+0x44>)
 8000f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_MspInit+0x44>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x44>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x44>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x44>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 fa50 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_DMAStop(&huart1);
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <USART1_IRQHandler+0x14>)
 8000fb2:	f003 fa4b 	bl	800444c <HAL_UART_DMAStop>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <USART1_IRQHandler+0x14>)
 8000fb8:	f003 fada 	bl	8004570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200010d4 	.word	0x200010d4

08000fc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RAIN_Pin);
 8000fc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fcc:	f001 f9a8 	bl	8002320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TIM7_IRQHandler+0x10>)
 8000fda:	f002 fec5 	bl	8003d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20001088 	.word	0x20001088

08000fe8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */
  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <DMA2_Stream7_IRQHandler+0x10>)
 8000fee:	f000 fd41 	bl	8001a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20001158 	.word	0x20001158

08000ffc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e00a      	b.n	8001024 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800100e:	f3af 8000 	nop.w
 8001012:	4601      	mov	r1, r0
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbf0      	blt.n	800100e <_read+0x12>
	}

return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
	return -1;
 800103e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800105e:	605a      	str	r2, [r3, #4]
	return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_isatty>:

int _isatty(int file)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	return 1;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
	return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	; (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f004 faa0 	bl	8005614 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20050000 	.word	0x20050000
 8001100:	00000400 	.word	0x00000400
 8001104:	20001084 	.word	0x20001084
 8001108:	200011d0 	.word	0x200011d0

0800110c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM7_Init+0x68>)
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <MX_TIM7_Init+0x6c>)
 8001144:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_TIM7_Init+0x68>)
 8001148:	f240 32e7 	movw	r2, #999	; 0x3e7
 800114c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_TIM7_Init+0x68>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_TIM7_Init+0x68>)
 8001156:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800115a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_TIM7_Init+0x68>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <MX_TIM7_Init+0x68>)
 8001164:	f002 fd30 	bl	8003bc8 <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800116e:	f7ff fde7 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	; (8001198 <MX_TIM7_Init+0x68>)
 8001180:	f002 ffda 	bl	8004138 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800118a:	f7ff fdd9 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20001088 	.word	0x20001088
 800119c:	40001400 	.word	0x40001400

080011a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_TIM_Base_MspInit+0x44>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d113      	bne.n	80011da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011b8:	f043 0320 	orr.w	r3, r3, #32
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2037      	movs	r0, #55	; 0x37
 80011d0:	f000 fa79 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011d4:	2037      	movs	r0, #55	; 0x37
 80011d6:	f000 fa92 	bl	80016fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40001400 	.word	0x40001400
 80011e8:	40023800 	.word	0x40023800

080011ec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_USART1_UART_Init+0x58>)
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <MX_USART1_UART_Init+0x5c>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_USART1_UART_Init+0x58>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART1_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART1_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART1_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001230:	f003 f82e 	bl	8004290 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800123a:	f7ff fd81 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200010d4 	.word	0x200010d4
 8001248:	40011000 	.word	0x40011000

0800124c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0aa      	sub	sp, #168	; 0xa8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2284      	movs	r2, #132	; 0x84
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f004 f9fb 	bl	8005668 <memset>
  if(uartHandle->Instance==USART1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a3c      	ldr	r2, [pc, #240]	; (8001368 <HAL_UART_MspInit+0x11c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d171      	bne.n	8001360 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800127c:	2340      	movs	r3, #64	; 0x40
 800127e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001280:	2300      	movs	r3, #0
 8001282:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4618      	mov	r0, r3
 800128a:	f001 fd5d 	bl	8002d48 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001294:	f7ff fd54 	bl	8000d40 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001298:	4b34      	ldr	r3, [pc, #208]	; (800136c <HAL_UART_MspInit+0x120>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	4a33      	ldr	r2, [pc, #204]	; (800136c <HAL_UART_MspInit+0x120>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	6453      	str	r3, [r2, #68]	; 0x44
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <HAL_UART_MspInit+0x120>)
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_UART_MspInit+0x120>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a2d      	ldr	r2, [pc, #180]	; (800136c <HAL_UART_MspInit+0x120>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_UART_MspInit+0x120>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80012c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e2:	2307      	movs	r3, #7
 80012e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012ec:	4619      	mov	r1, r3
 80012ee:	4820      	ldr	r0, [pc, #128]	; (8001370 <HAL_UART_MspInit+0x124>)
 80012f0:	f000 fe36 	bl	8001f60 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <HAL_UART_MspInit+0x128>)
 80012f6:	4a20      	ldr	r2, [pc, #128]	; (8001378 <HAL_UART_MspInit+0x12c>)
 80012f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_UART_MspInit+0x128>)
 80012fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001300:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_UART_MspInit+0x128>)
 8001304:	2240      	movs	r2, #64	; 0x40
 8001306:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_UART_MspInit+0x128>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_UART_MspInit+0x128>)
 8001310:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001314:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_UART_MspInit+0x128>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_UART_MspInit+0x128>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_UART_MspInit+0x128>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_UART_MspInit+0x128>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_UART_MspInit+0x128>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001334:	480f      	ldr	r0, [pc, #60]	; (8001374 <HAL_UART_MspInit+0x128>)
 8001336:	f000 f9fd 	bl	8001734 <HAL_DMA_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001340:	f7ff fcfe 	bl	8000d40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_UART_MspInit+0x128>)
 8001348:	66da      	str	r2, [r3, #108]	; 0x6c
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <HAL_UART_MspInit+0x128>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2025      	movs	r0, #37	; 0x25
 8001356:	f000 f9b6 	bl	80016c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800135a:	2025      	movs	r0, #37	; 0x25
 800135c:	f000 f9cf 	bl	80016fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001360:	bf00      	nop
 8001362:	37a8      	adds	r7, #168	; 0xa8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40011000 	.word	0x40011000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000
 8001374:	20001158 	.word	0x20001158
 8001378:	400264b8 	.word	0x400264b8

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001382:	490e      	ldr	r1, [pc, #56]	; (80013bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001384:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001398:	4c0b      	ldr	r4, [pc, #44]	; (80013c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a6:	f7ff feb1 	bl	800110c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013aa:	f004 f939 	bl	8005620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff fae7 	bl	8000980 <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013c0:	08006704 	.word	0x08006704
  ldr r2, =_sbss
 80013c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80013c8:	200011cc 	.word	0x200011cc

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>

080013ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f000 f96c 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 f805 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013de:	f7ff fd97 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f987 	bl	800171a <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f000 f94f 	bl	80016c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000000 	.word	0x20000000
 8001440:	20000008 	.word	0x20000008
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	200011b8 	.word	0x200011b8

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	200011b8 	.word	0x200011b8

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_SuspendTick+0x1c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_SuspendTick+0x1c>)
 80014da:	f023 0302 	bic.w	r3, r3, #2
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_ResumeTick+0x1c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <HAL_ResumeTick+0x1c>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	6013      	str	r3, [r2, #0]
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <__NVIC_SetPriorityGrouping+0x40>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	4313      	orrs	r3, r2
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <__NVIC_SetPriorityGrouping+0x40>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	05fa0000 	.word	0x05fa0000

08001558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <__NVIC_EnableIRQ+0x38>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001690:	f7ff ff8e 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff29 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff3e 	bl	8001558 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff8e 	bl	8001604 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5d 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff31 	bl	8001574 <__NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffa2 	bl	800166c <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff fe96 	bl	8001470 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e099      	b.n	8001884 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001770:	e00f      	b.n	8001792 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001772:	f7ff fe7d 	bl	8001470 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b05      	cmp	r3, #5
 800177e:	d908      	bls.n	8001792 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2220      	movs	r2, #32
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2203      	movs	r2, #3
 800178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e078      	b.n	8001884 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e8      	bne.n	8001772 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <HAL_DMA_Init+0x158>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d107      	bne.n	80017fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4313      	orrs	r3, r2
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f023 0307 	bic.w	r3, r3, #7
 8001812:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	4313      	orrs	r3, r2
 800181c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	2b04      	cmp	r3, #4
 8001824:	d117      	bne.n	8001856 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4313      	orrs	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00e      	beq.n	8001856 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fb15 	bl	8001e68 <DMA_CheckFifoParam>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d008      	beq.n	8001856 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001852:	2301      	movs	r3, #1
 8001854:	e016      	b.n	8001884 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 facc 	bl	8001dfc <DMA_CalcBaseAndBitshift>
 8001864:	4603      	mov	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186c:	223f      	movs	r2, #63	; 0x3f
 800186e:	409a      	lsls	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	f010803f 	.word	0xf010803f

08001890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_DMA_Start_IT+0x26>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e048      	b.n	8001948 <HAL_DMA_Start_IT+0xb8>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d137      	bne.n	800193a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 fa5e 	bl	8001da0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	223f      	movs	r2, #63	; 0x3f
 80018ea:	409a      	lsls	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0216 	orr.w	r2, r2, #22
 80018fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695a      	ldr	r2, [r3, #20]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800190e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0208 	orr.w	r2, r2, #8
 8001926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e005      	b.n	8001946 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001942:	2302      	movs	r3, #2
 8001944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001946:	7dfb      	ldrb	r3, [r7, #23]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800195e:	f7ff fd87 	bl	8001470 <HAL_GetTick>
 8001962:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d008      	beq.n	8001982 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2280      	movs	r2, #128	; 0x80
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e052      	b.n	8001a28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0216 	bic.w	r2, r2, #22
 8001990:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d103      	bne.n	80019b2 <HAL_DMA_Abort+0x62>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0208 	bic.w	r2, r2, #8
 80019c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d2:	e013      	b.n	80019fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d4:	f7ff fd4c 	bl	8001470 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b05      	cmp	r3, #5
 80019e0:	d90c      	bls.n	80019fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2220      	movs	r2, #32
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2203      	movs	r2, #3
 80019ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e015      	b.n	8001a28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1e4      	bne.n	80019d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0e:	223f      	movs	r2, #63	; 0x3f
 8001a10:	409a      	lsls	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d004      	beq.n	8001a4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00c      	b.n	8001a68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2205      	movs	r2, #5
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a80:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <HAL_DMA_IRQHandler+0x248>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a8e      	ldr	r2, [pc, #568]	; (8001cc0 <HAL_DMA_IRQHandler+0x24c>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0a9b      	lsrs	r3, r3, #10
 8001a8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d01a      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d013      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0204 	bic.w	r2, r2, #4
 8001ac6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	2208      	movs	r2, #8
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d012      	beq.n	8001b16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2201      	movs	r2, #1
 8001b04:	409a      	lsls	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	f043 0202 	orr.w	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d012      	beq.n	8001b4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00b      	beq.n	8001b4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	2204      	movs	r2, #4
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	f043 0204 	orr.w	r2, r3, #4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2210      	movs	r2, #16
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d043      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d03c      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2210      	movs	r2, #16
 8001b70:	409a      	lsls	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d018      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d108      	bne.n	8001ba4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d024      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
 8001ba2:	e01f      	b.n	8001be4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01b      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
 8001bb4:	e016      	b.n	8001be4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d107      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0208 	bic.w	r2, r2, #8
 8001bd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	2220      	movs	r2, #32
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 808f 	beq.w	8001d14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8087 	beq.w	8001d14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d136      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0216 	bic.w	r2, r2, #22
 8001c2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d103      	bne.n	8001c4e <HAL_DMA_IRQHandler+0x1da>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0208 	bic.w	r2, r2, #8
 8001c5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	223f      	movs	r2, #63	; 0x3f
 8001c64:	409a      	lsls	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d07e      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
        }
        return;
 8001c8a:	e079      	b.n	8001d80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01d      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10d      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d031      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
 8001cb8:	e02c      	b.n	8001d14 <HAL_DMA_IRQHandler+0x2a0>
 8001cba:	bf00      	nop
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d023      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
 8001cd4:	e01e      	b.n	8001d14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10f      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0210 	bic.w	r2, r2, #16
 8001cf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d032      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d022      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2205      	movs	r2, #5
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0201 	bic.w	r2, r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	3301      	adds	r3, #1
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d307      	bcc.n	8001d5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f2      	bne.n	8001d40 <HAL_DMA_IRQHandler+0x2cc>
 8001d5a:	e000      	b.n	8001d5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
 8001d7e:	e000      	b.n	8001d82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d80:	bf00      	nop
    }
  }
}
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b40      	cmp	r3, #64	; 0x40
 8001dcc:	d108      	bne.n	8001de0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dde:	e007      	b.n	8001df0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3b10      	subs	r3, #16
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <DMA_CalcBaseAndBitshift+0x60>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <DMA_CalcBaseAndBitshift+0x64>)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d908      	bls.n	8001e3c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <DMA_CalcBaseAndBitshift+0x68>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	1d1a      	adds	r2, r3, #4
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	659a      	str	r2, [r3, #88]	; 0x58
 8001e3a:	e006      	b.n	8001e4a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <DMA_CalcBaseAndBitshift+0x68>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	aaaaaaab 	.word	0xaaaaaaab
 8001e60:	08006654 	.word	0x08006654
 8001e64:	fffffc00 	.word	0xfffffc00

08001e68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d11f      	bne.n	8001ec2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d856      	bhi.n	8001f36 <DMA_CheckFifoParam+0xce>
 8001e88:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <DMA_CheckFifoParam+0x28>)
 8001e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8e:	bf00      	nop
 8001e90:	08001ea1 	.word	0x08001ea1
 8001e94:	08001eb3 	.word	0x08001eb3
 8001e98:	08001ea1 	.word	0x08001ea1
 8001e9c:	08001f37 	.word	0x08001f37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d046      	beq.n	8001f3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb0:	e043      	b.n	8001f3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eba:	d140      	bne.n	8001f3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec0:	e03d      	b.n	8001f3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eca:	d121      	bne.n	8001f10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d837      	bhi.n	8001f42 <DMA_CheckFifoParam+0xda>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <DMA_CheckFifoParam+0x70>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001eef 	.word	0x08001eef
 8001ee0:	08001ee9 	.word	0x08001ee9
 8001ee4:	08001f01 	.word	0x08001f01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      break;
 8001eec:	e030      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d025      	beq.n	8001f46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001efe:	e022      	b.n	8001f46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f08:	d11f      	bne.n	8001f4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f0e:	e01c      	b.n	8001f4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d903      	bls.n	8001f1e <DMA_CheckFifoParam+0xb6>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d003      	beq.n	8001f24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f1c:	e018      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
      break;
 8001f22:	e015      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00e      	beq.n	8001f4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
      break;
 8001f34:	e00b      	b.n	8001f4e <DMA_CheckFifoParam+0xe6>
      break;
 8001f36:	bf00      	nop
 8001f38:	e00a      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e008      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f3e:	bf00      	nop
 8001f40:	e006      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f42:	bf00      	nop
 8001f44:	e004      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f46:	bf00      	nop
 8001f48:	e002      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f4a:	bf00      	nop
 8001f4c:	e000      	b.n	8001f50 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4e:	bf00      	nop
    }
  } 
  
  return status; 
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e175      	b.n	800226c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 8164 	bne.w	8002266 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d005      	beq.n	8001fb6 <HAL_GPIO_Init+0x56>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d130      	bne.n	8002018 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fec:	2201      	movs	r2, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 0201 	and.w	r2, r3, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b03      	cmp	r3, #3
 8002022:	d017      	beq.n	8002054 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d123      	bne.n	80020a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	08da      	lsrs	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3208      	adds	r2, #8
 8002068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	69b9      	ldr	r1, [r7, #24]
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80be 	beq.w	8002266 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b66      	ldr	r3, [pc, #408]	; (8002284 <HAL_GPIO_Init+0x324>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a65      	ldr	r2, [pc, #404]	; (8002284 <HAL_GPIO_Init+0x324>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_GPIO_Init+0x324>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002102:	4a61      	ldr	r2, [pc, #388]	; (8002288 <HAL_GPIO_Init+0x328>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a58      	ldr	r2, [pc, #352]	; (800228c <HAL_GPIO_Init+0x32c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d037      	beq.n	800219e <HAL_GPIO_Init+0x23e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a57      	ldr	r2, [pc, #348]	; (8002290 <HAL_GPIO_Init+0x330>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d031      	beq.n	800219a <HAL_GPIO_Init+0x23a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a56      	ldr	r2, [pc, #344]	; (8002294 <HAL_GPIO_Init+0x334>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02b      	beq.n	8002196 <HAL_GPIO_Init+0x236>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a55      	ldr	r2, [pc, #340]	; (8002298 <HAL_GPIO_Init+0x338>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d025      	beq.n	8002192 <HAL_GPIO_Init+0x232>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a54      	ldr	r2, [pc, #336]	; (800229c <HAL_GPIO_Init+0x33c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <HAL_GPIO_Init+0x22e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a53      	ldr	r2, [pc, #332]	; (80022a0 <HAL_GPIO_Init+0x340>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d019      	beq.n	800218a <HAL_GPIO_Init+0x22a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a52      	ldr	r2, [pc, #328]	; (80022a4 <HAL_GPIO_Init+0x344>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x226>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <HAL_GPIO_Init+0x348>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x222>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a50      	ldr	r2, [pc, #320]	; (80022ac <HAL_GPIO_Init+0x34c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x21e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_GPIO_Init+0x350>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x21a>
 8002176:	2309      	movs	r3, #9
 8002178:	e012      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800217a:	230a      	movs	r3, #10
 800217c:	e010      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800217e:	2308      	movs	r3, #8
 8002180:	e00e      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 8002182:	2307      	movs	r3, #7
 8002184:	e00c      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 8002186:	2306      	movs	r3, #6
 8002188:	e00a      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800218a:	2305      	movs	r3, #5
 800218c:	e008      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800218e:	2304      	movs	r3, #4
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 8002192:	2303      	movs	r3, #3
 8002194:	e004      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 8002196:	2302      	movs	r3, #2
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800219e:	2300      	movs	r3, #0
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	f002 0203 	and.w	r2, r2, #3
 80021a6:	0092      	lsls	r2, r2, #2
 80021a8:	4093      	lsls	r3, r2
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021b0:	4935      	ldr	r1, [pc, #212]	; (8002288 <HAL_GPIO_Init+0x328>)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	3302      	adds	r3, #2
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021be:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <HAL_GPIO_Init+0x354>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e2:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <HAL_GPIO_Init+0x354>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <HAL_GPIO_Init+0x354>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800220c:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <HAL_GPIO_Init+0x354>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <HAL_GPIO_Init+0x354>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002236:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <HAL_GPIO_Init+0x354>)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_GPIO_Init+0x354>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <HAL_GPIO_Init+0x354>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3301      	adds	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b0f      	cmp	r3, #15
 8002270:	f67f ae86 	bls.w	8001f80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40013800 	.word	0x40013800
 800228c:	40020000 	.word	0x40020000
 8002290:	40020400 	.word	0x40020400
 8002294:	40020800 	.word	0x40020800
 8002298:	40020c00 	.word	0x40020c00
 800229c:	40021000 	.word	0x40021000
 80022a0:	40021400 	.word	0x40021400
 80022a4:	40021800 	.word	0x40021800
 80022a8:	40021c00 	.word	0x40021c00
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40022400 	.word	0x40022400
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	4013      	ands	r3, r2
 8002302:	041a      	lsls	r2, r3, #16
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43d9      	mvns	r1, r3
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	400b      	ands	r3, r1
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	619a      	str	r2, [r3, #24]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fcd4 	bl	8000cec <HAL_GPIO_EXTI_Callback>
  }
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40013c00 	.word	0x40013c00

08002350 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_PWR_EnterSLEEPMode+0x40>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_PWR_EnterSLEEPMode+0x40>)
 8002362:	f023 0304 	bic.w	r3, r3, #4
 8002366:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002368:	f3bf 8f4f 	dsb	sy
}
 800236c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800236e:	f3bf 8f6f 	isb	sy
}
 8002372:	bf00      	nop
  /* Ensure that all instructions done before entering SLEEP mode */
  __DSB();
  __ISB();

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_PWR_EnterSLEEPMode+0x2e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800237a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800237c:	e002      	b.n	8002384 <HAL_PWR_EnterSLEEPMode+0x34>
    __SEV();
 800237e:	bf40      	sev
    __WFE();
 8002380:	bf20      	wfe
    __WFE();
 8002382:	bf20      	wfe
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800239e:	4b23      	ldr	r3, [pc, #140]	; (800242c <HAL_PWREx_EnableOverDrive+0x98>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_PWREx_EnableOverDrive+0x98>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_PWREx_EnableOverDrive+0x98>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c2:	f7ff f855 	bl	8001470 <HAL_GetTick>
 80023c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023c8:	e009      	b.n	80023de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023ca:	f7ff f851 	bl	8001470 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d8:	d901      	bls.n	80023de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e022      	b.n	8002424 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ea:	d1ee      	bne.n	80023ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0f      	ldr	r2, [pc, #60]	; (8002430 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f8:	f7ff f83a 	bl	8001470 <HAL_GetTick>
 80023fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023fe:	e009      	b.n	8002414 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002400:	f7ff f836 	bl	8001470 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800240e:	d901      	bls.n	8002414 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e007      	b.n	8002424 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002420:	d1ee      	bne.n	8002400 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	40007000 	.word	0x40007000

08002434 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e291      	b.n	800296e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8087 	beq.w	8002566 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002458:	4b96      	ldr	r3, [pc, #600]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b04      	cmp	r3, #4
 8002462:	d00c      	beq.n	800247e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002464:	4b93      	ldr	r3, [pc, #588]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d112      	bne.n	8002496 <HAL_RCC_OscConfig+0x62>
 8002470:	4b90      	ldr	r3, [pc, #576]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247c:	d10b      	bne.n	8002496 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247e:	4b8d      	ldr	r3, [pc, #564]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d06c      	beq.n	8002564 <HAL_RCC_OscConfig+0x130>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d168      	bne.n	8002564 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e26b      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x7a>
 80024a0:	4b84      	ldr	r3, [pc, #528]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a83      	ldr	r2, [pc, #524]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	e02e      	b.n	800250c <HAL_RCC_OscConfig+0xd8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x9c>
 80024b6:	4b7f      	ldr	r3, [pc, #508]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a7e      	ldr	r2, [pc, #504]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b7c      	ldr	r3, [pc, #496]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a7b      	ldr	r2, [pc, #492]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e01d      	b.n	800250c <HAL_RCC_OscConfig+0xd8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0xc0>
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a75      	ldr	r2, [pc, #468]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	4b73      	ldr	r3, [pc, #460]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a72      	ldr	r2, [pc, #456]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e00b      	b.n	800250c <HAL_RCC_OscConfig+0xd8>
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80024fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	4b6c      	ldr	r3, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a6b      	ldr	r2, [pc, #428]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe ffac 	bl	8001470 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe ffa8 	bl	8001470 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e21f      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0xe8>
 800253a:	e014      	b.n	8002566 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe ff98 	bl	8001470 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe ff94 	bl	8001470 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	; 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e20b      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002556:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x110>
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d069      	beq.n	8002646 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002572:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b08      	cmp	r3, #8
 8002588:	d11c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x190>
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d116      	bne.n	80025c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_RCC_OscConfig+0x17a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e1df      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	493d      	ldr	r1, [pc, #244]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	e040      	b.n	8002646 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d023      	beq.n	8002614 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a38      	ldr	r2, [pc, #224]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe ff4a 	bl	8001470 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e0:	f7fe ff46 	bl	8001470 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e1bd      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4929      	ldr	r1, [pc, #164]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
 8002612:	e018      	b.n	8002646 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe ff26 	bl	8001470 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002628:	f7fe ff22 	bl	8001470 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e199      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d038      	beq.n	80026c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d019      	beq.n	800268e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7fe ff03 	bl	8001470 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266e:	f7fe feff 	bl	8001470 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e176      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x23a>
 800268c:	e01a      	b.n	80026c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <HAL_RCC_OscConfig+0x280>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7fe fee9 	bl	8001470 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a2:	f7fe fee5 	bl	8001470 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d903      	bls.n	80026b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e15c      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
 80026b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1ee      	bne.n	80026a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80a4 	beq.w	800281a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b8b      	ldr	r3, [pc, #556]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a87      	ldr	r2, [pc, #540]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b85      	ldr	r3, [pc, #532]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f6:	2301      	movs	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fa:	4b82      	ldr	r3, [pc, #520]	; (8002904 <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d118      	bne.n	8002738 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002706:	4b7f      	ldr	r3, [pc, #508]	; (8002904 <HAL_RCC_OscConfig+0x4d0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a7e      	ldr	r2, [pc, #504]	; (8002904 <HAL_RCC_OscConfig+0x4d0>)
 800270c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002712:	f7fe fead 	bl	8001470 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271a:	f7fe fea9 	bl	8001470 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	; 0x64
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e120      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272c:	4b75      	ldr	r3, [pc, #468]	; (8002904 <HAL_RCC_OscConfig+0x4d0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x31a>
 8002740:	4b6f      	ldr	r3, [pc, #444]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a6e      	ldr	r2, [pc, #440]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	e02d      	b.n	80027aa <HAL_RCC_OscConfig+0x376>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x33c>
 8002756:	4b6a      	ldr	r3, [pc, #424]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a69      	ldr	r2, [pc, #420]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
 8002762:	4b67      	ldr	r3, [pc, #412]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a66      	ldr	r2, [pc, #408]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	e01c      	b.n	80027aa <HAL_RCC_OscConfig+0x376>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b05      	cmp	r3, #5
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_OscConfig+0x35e>
 8002778:	4b61      	ldr	r3, [pc, #388]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a60      	ldr	r2, [pc, #384]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
 8002784:	4b5e      	ldr	r3, [pc, #376]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a5d      	ldr	r2, [pc, #372]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
 8002790:	e00b      	b.n	80027aa <HAL_RCC_OscConfig+0x376>
 8002792:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a5a      	ldr	r2, [pc, #360]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	4b58      	ldr	r3, [pc, #352]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a57      	ldr	r2, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d015      	beq.n	80027de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe fe5d 	bl	8001470 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe fe59 	bl	8001470 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0ce      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ee      	beq.n	80027ba <HAL_RCC_OscConfig+0x386>
 80027dc:	e014      	b.n	8002808 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe fe47 	bl	8001470 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fe43 	bl	8001470 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e0b8      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	4b40      	ldr	r3, [pc, #256]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ee      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d105      	bne.n	800281a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280e:	4b3c      	ldr	r3, [pc, #240]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a3b      	ldr	r2, [pc, #236]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 80a4 	beq.w	800296c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002824:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d06b      	beq.n	8002908 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d149      	bne.n	80028cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a30      	ldr	r2, [pc, #192]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 800283e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7fe fe14 	bl	8001470 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe fe10 	bl	8001470 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e087      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	019b      	lsls	r3, r3, #6
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	3b01      	subs	r3, #1
 8002884:	041b      	lsls	r3, r3, #16
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	4313      	orrs	r3, r2
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 8002892:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002896:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a18      	ldr	r2, [pc, #96]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fde4 	bl	8001470 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fde0 	bl	8001470 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e057      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x478>
 80028ca:	e04f      	b.n	800296c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fdca 	bl	8001470 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fdc6 	bl	8001470 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e03d      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_RCC_OscConfig+0x4cc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4ac>
 80028fe:	e035      	b.n	800296c <HAL_RCC_OscConfig+0x538>
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_RCC_OscConfig+0x544>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d028      	beq.n	8002968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d121      	bne.n	8002968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d11a      	bne.n	8002968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002938:	4013      	ands	r3, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800293e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002940:	4293      	cmp	r3, r2
 8002942:	d111      	bne.n	8002968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	3b01      	subs	r3, #1
 8002952:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d107      	bne.n	8002968 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800

0800297c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0d0      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d910      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 020f 	bic.w	r2, r3, #15
 80029aa:	4965      	ldr	r1, [pc, #404]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 80029e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d040      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d115      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e073      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06b      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4936      	ldr	r1, [pc, #216]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a70:	f7fe fcfe 	bl	8001470 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7fe fcfa 	bl	8001470 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e053      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b2d      	ldr	r3, [pc, #180]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d210      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 020f 	bic.w	r2, r3, #15
 8002ab6:	4922      	ldr	r1, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4602      	mov	r2, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x1cc>)
 8002b20:	5ccb      	ldrb	r3, [r1, r3]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1d0>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1d4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fc5a 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00
 8002b44:	40023800 	.word	0x40023800
 8002b48:	0800663c 	.word	0x0800663c
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b090      	sub	sp, #64	; 0x40
 8002b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b60:	2300      	movs	r3, #0
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6c:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d00d      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x40>
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	f200 80a1 	bhi.w	8002cc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x34>
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b86:	e09b      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b8c:	e09b      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002b90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b92:	e098      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b94:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b9e:	4b4d      	ldr	r3, [pc, #308]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d028      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002baa:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	627a      	str	r2, [r7, #36]	; 0x24
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4b47      	ldr	r3, [pc, #284]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002bc0:	fb03 f201 	mul.w	r2, r3, r1
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	fb00 f303 	mul.w	r3, r0, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a43      	ldr	r2, [pc, #268]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8002bce:	fba0 1202 	umull	r1, r2, r0, r2
 8002bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bd4:	460a      	mov	r2, r1
 8002bd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bda:	4413      	add	r3, r2
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	2200      	movs	r2, #0
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	61fa      	str	r2, [r7, #28]
 8002be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bee:	f7fd fb5f 	bl	80002b0 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfa:	e053      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	617a      	str	r2, [r7, #20]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c0e:	f04f 0b00 	mov.w	fp, #0
 8002c12:	4652      	mov	r2, sl
 8002c14:	465b      	mov	r3, fp
 8002c16:	f04f 0000 	mov.w	r0, #0
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	0159      	lsls	r1, r3, #5
 8002c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c24:	0150      	lsls	r0, r2, #5
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c2e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c46:	ebb2 0408 	subs.w	r4, r2, r8
 8002c4a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	00eb      	lsls	r3, r5, #3
 8002c58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5c:	00e2      	lsls	r2, r4, #3
 8002c5e:	4614      	mov	r4, r2
 8002c60:	461d      	mov	r5, r3
 8002c62:	eb14 030a 	adds.w	r3, r4, sl
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	eb45 030b 	adc.w	r3, r5, fp
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	028b      	lsls	r3, r1, #10
 8002c7e:	4621      	mov	r1, r4
 8002c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c84:	4621      	mov	r1, r4
 8002c86:	028a      	lsls	r2, r1, #10
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	60fa      	str	r2, [r7, #12]
 8002c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c98:	f7fd fb0a 	bl	80002b0 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002cb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3740      	adds	r7, #64	; 0x40
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	00f42400 	.word	0x00f42400
 8002cdc:	017d7840 	.word	0x017d7840

08002ce0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000

08002cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cfc:	f7ff fff0 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0a9b      	lsrs	r3, r3, #10
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4903      	ldr	r1, [pc, #12]	; (8002d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	0800664c 	.word	0x0800664c

08002d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d24:	f7ff ffdc 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0b5b      	lsrs	r3, r3, #13
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	0800664c 	.word	0x0800664c

08002d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d012      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d70:	4b69      	ldr	r3, [pc, #420]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a68      	ldr	r2, [pc, #416]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d7a:	6093      	str	r3, [r2, #8]
 8002d7c:	4b66      	ldr	r3, [pc, #408]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	4964      	ldr	r1, [pc, #400]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d017      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002da2:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	4959      	ldr	r1, [pc, #356]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d017      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dde:	4b4e      	ldr	r3, [pc, #312]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	494a      	ldr	r1, [pc, #296]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 808b 	beq.w	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	4a39      	ldr	r2, [pc, #228]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e36:	6413      	str	r3, [r2, #64]	; 0x40
 8002e38:	4b37      	ldr	r3, [pc, #220]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a34      	ldr	r2, [pc, #208]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e50:	f7fe fb0e 	bl	8001470 <HAL_GetTick>
 8002e54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e58:	f7fe fb0a 	bl	8001470 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e357      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e6a:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e76:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d035      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d02e      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e94:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a1a      	ldr	r2, [pc, #104]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002eb6:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ebc:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d114      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fad2 	bl	8001470 <HAL_GetTick>
 8002ecc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7fe face 	bl	8001470 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e319      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0ee      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002efe:	d111      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f0e:	400b      	ands	r3, r1
 8002f10:	4901      	ldr	r1, [pc, #4]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	0ffffcff 	.word	0x0ffffcff
 8002f24:	4baa      	ldr	r3, [pc, #680]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4aa9      	ldr	r2, [pc, #676]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f2e:	6093      	str	r3, [r2, #8]
 8002f30:	4ba7      	ldr	r3, [pc, #668]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	49a4      	ldr	r1, [pc, #656]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f4e:	4ba0      	ldr	r3, [pc, #640]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f54:	4a9e      	ldr	r2, [pc, #632]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f5e:	4b9c      	ldr	r3, [pc, #624]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	4999      	ldr	r1, [pc, #612]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f7c:	4b94      	ldr	r3, [pc, #592]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8a:	4991      	ldr	r1, [pc, #580]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f9e:	4b8c      	ldr	r3, [pc, #560]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fac:	4988      	ldr	r1, [pc, #544]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fc0:	4b83      	ldr	r3, [pc, #524]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fce:	4980      	ldr	r1, [pc, #512]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fe2:	4b7b      	ldr	r3, [pc, #492]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4977      	ldr	r1, [pc, #476]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003004:	4b72      	ldr	r3, [pc, #456]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	496f      	ldr	r1, [pc, #444]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003026:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302c:	f023 020c 	bic.w	r2, r3, #12
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003034:	4966      	ldr	r1, [pc, #408]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003048:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	495e      	ldr	r1, [pc, #376]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800306a:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003078:	4955      	ldr	r1, [pc, #340]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003092:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	494d      	ldr	r1, [pc, #308]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030ae:	4b48      	ldr	r3, [pc, #288]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	4944      	ldr	r1, [pc, #272]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030d0:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	493c      	ldr	r1, [pc, #240]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030f2:	4b37      	ldr	r3, [pc, #220]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003100:	4933      	ldr	r1, [pc, #204]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003114:	4b2e      	ldr	r3, [pc, #184]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003122:	492b      	ldr	r1, [pc, #172]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d011      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003144:	4922      	ldr	r1, [pc, #136]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003154:	d101      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003166:	2301      	movs	r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003184:	4912      	ldr	r1, [pc, #72]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a8:	4909      	ldr	r1, [pc, #36]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d006      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80d9 	beq.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031c4:	4b02      	ldr	r3, [pc, #8]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a01      	ldr	r2, [pc, #4]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031ce:	e001      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80031d0:	40023800 	.word	0x40023800
 80031d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d6:	f7fe f94b 	bl	8001470 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031dc:	e008      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031de:	f7fe f947 	bl	8001470 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e194      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031f0:	4b6c      	ldr	r3, [pc, #432]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d021      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2b00      	cmp	r3, #0
 800320e:	d11d      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003210:	4b64      	ldr	r3, [pc, #400]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003216:	0c1b      	lsrs	r3, r3, #16
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800321e:	4b61      	ldr	r3, [pc, #388]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003224:	0e1b      	lsrs	r3, r3, #24
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	019a      	lsls	r2, r3, #6
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	041b      	lsls	r3, r3, #16
 8003236:	431a      	orrs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	061b      	lsls	r3, r3, #24
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	071b      	lsls	r3, r3, #28
 8003244:	4957      	ldr	r1, [pc, #348]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800326a:	2b00      	cmp	r3, #0
 800326c:	d02e      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003276:	d129      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003278:	4b4a      	ldr	r3, [pc, #296]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800327a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003286:	4b47      	ldr	r3, [pc, #284]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328c:	0f1b      	lsrs	r3, r3, #28
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	019a      	lsls	r2, r3, #6
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	431a      	orrs	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	071b      	lsls	r3, r3, #28
 80032ac:	493d      	ldr	r1, [pc, #244]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032b4:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ba:	f023 021f 	bic.w	r2, r3, #31
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	3b01      	subs	r3, #1
 80032c4:	4937      	ldr	r1, [pc, #220]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01d      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032d8:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032de:	0e1b      	lsrs	r3, r3, #24
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032e6:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ec:	0f1b      	lsrs	r3, r3, #28
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	019a      	lsls	r2, r3, #6
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	431a      	orrs	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	071b      	lsls	r3, r3, #28
 800330c:	4925      	ldr	r1, [pc, #148]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d011      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	019a      	lsls	r2, r3, #6
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	061b      	lsls	r3, r3, #24
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	071b      	lsls	r3, r3, #28
 800333c:	4919      	ldr	r1, [pc, #100]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003344:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a16      	ldr	r2, [pc, #88]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800334a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800334e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003350:	f7fe f88e 	bl	8001470 <HAL_GetTick>
 8003354:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003358:	f7fe f88a 	bl	8001470 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	; 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0d7      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800336a:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b01      	cmp	r3, #1
 800337a:	f040 80cd 	bne.w	8003518 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338a:	f7fe f871 	bl	8001470 <HAL_GetTick>
 800338e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003392:	f7fe f86d 	bl	8001470 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b64      	cmp	r3, #100	; 0x64
 800339e:	d903      	bls.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e0ba      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80033a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033a8:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b4:	d0ed      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d02e      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d12a      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033de:	4b51      	ldr	r3, [pc, #324]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033ec:	4b4d      	ldr	r3, [pc, #308]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	0f1b      	lsrs	r3, r3, #28
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	019a      	lsls	r2, r3, #6
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	061b      	lsls	r3, r3, #24
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	071b      	lsls	r3, r3, #28
 8003412:	4944      	ldr	r1, [pc, #272]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800341a:	4b42      	ldr	r3, [pc, #264]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800341c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003420:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	493d      	ldr	r1, [pc, #244]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d022      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003448:	d11d      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	0e1b      	lsrs	r3, r3, #24
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003458:	4b32      	ldr	r3, [pc, #200]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	0f1b      	lsrs	r3, r3, #28
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	019a      	lsls	r2, r3, #6
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	431a      	orrs	r2, r3
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	061b      	lsls	r3, r3, #24
 8003478:	431a      	orrs	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	071b      	lsls	r3, r3, #28
 800347e:	4929      	ldr	r1, [pc, #164]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d028      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	0e1b      	lsrs	r3, r3, #24
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	0c1b      	lsrs	r3, r3, #16
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	019a      	lsls	r2, r3, #6
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	431a      	orrs	r2, r3
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	061b      	lsls	r3, r3, #24
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	071b      	lsls	r3, r3, #28
 80034c6:	4917      	ldr	r1, [pc, #92]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	4911      	ldr	r1, [pc, #68]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0e      	ldr	r2, [pc, #56]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f0:	f7fd ffbe 	bl	8001470 <HAL_GetTick>
 80034f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034f8:	f7fd ffba 	bl	8001470 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e007      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003516:	d1ef      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800

08003528 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e081      	b.n	800363e <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	7f5b      	ldrb	r3, [r3, #29]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fc5a 	bl	8000e04 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	22ca      	movs	r2, #202	; 0xca
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2253      	movs	r2, #83	; 0x53
 8003564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 faac 	bl	8003ac4 <RTC_EnterInitMode>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	22ff      	movs	r2, #255	; 0xff
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2204      	movs	r2, #4
 800357e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e05c      	b.n	800363e <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6899      	ldr	r1, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <HAL_RTC_Init+0x120>)
 8003590:	400b      	ands	r3, r1
 8003592:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6899      	ldr	r1, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68d2      	ldr	r2, [r2, #12]
 80035ba:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6919      	ldr	r1, [r3, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	041a      	lsls	r2, r3, #16
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035de:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10e      	bne.n	800360c <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fa40 	bl	8003a74 <HAL_RTC_WaitForSynchro>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	22ff      	movs	r2, #255	; 0xff
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2204      	movs	r2, #4
 8003606:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e018      	b.n	800363e <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0208 	bic.w	r2, r2, #8
 800361a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	22ff      	movs	r2, #255	; 0xff
 8003634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800363c:	2300      	movs	r3, #0
  }
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	ff8fffbf 	.word	0xff8fffbf

0800364c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	7f1b      	ldrb	r3, [r3, #28]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_RTC_SetTime+0x1c>
 8003664:	2302      	movs	r3, #2
 8003666:	e0a8      	b.n	80037ba <HAL_RTC_SetTime+0x16e>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2202      	movs	r2, #2
 8003672:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d126      	bne.n	80036c8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fa42 	bl	8003b1c <RTC_ByteToBcd2>
 8003698:	4603      	mov	r3, r0
 800369a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fa3b 	bl	8003b1c <RTC_ByteToBcd2>
 80036a6:	4603      	mov	r3, r0
 80036a8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80036aa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	789b      	ldrb	r3, [r3, #2]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fa33 	bl	8003b1c <RTC_ByteToBcd2>
 80036b6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80036b8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	7b1b      	ldrb	r3, [r3, #12]
 80036c0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e018      	b.n	80036fa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d102      	bne.n	80036dc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2200      	movs	r2, #0
 80036da:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	785b      	ldrb	r3, [r3, #1]
 80036e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80036e8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80036ee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	7b1b      	ldrb	r3, [r3, #12]
 80036f4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	22ca      	movs	r2, #202	; 0xca
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2253      	movs	r2, #83	; 0x53
 8003708:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f9da 	bl	8003ac4 <RTC_EnterInitMode>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2204      	movs	r2, #4
 8003722:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e045      	b.n	80037ba <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	6979      	ldr	r1, [r7, #20]
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_RTC_SetTime+0x178>)
 8003736:	400b      	ands	r3, r1
 8003738:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003748:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6899      	ldr	r1, [r3, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	691a      	ldr	r2, [r3, #16]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003770:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d111      	bne.n	80037a4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f977 	bl	8003a74 <HAL_RTC_WaitForSynchro>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	22ff      	movs	r2, #255	; 0xff
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2204      	movs	r2, #4
 8003798:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e00a      	b.n	80037ba <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	22ff      	movs	r2, #255	; 0xff
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80037b8:	2300      	movs	r3, #0
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd90      	pop	{r4, r7, pc}
 80037c2:	bf00      	nop
 80037c4:	007f7f7f 	.word	0x007f7f7f

080037c8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b22      	ldr	r3, [pc, #136]	; (8003880 <HAL_RTC_GetTime+0xb8>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003824:	b2da      	uxtb	r2, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	0c1b      	lsrs	r3, r3, #16
 800382e:	b2db      	uxtb	r3, r3
 8003830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d11a      	bne.n	8003876 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f987 	bl	8003b58 <RTC_Bcd2ToByte>
 800384a:	4603      	mov	r3, r0
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	785b      	ldrb	r3, [r3, #1]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f97e 	bl	8003b58 <RTC_Bcd2ToByte>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	789b      	ldrb	r3, [r3, #2]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 f975 	bl	8003b58 <RTC_Bcd2ToByte>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	007f7f7f 	.word	0x007f7f7f

08003884 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	7f1b      	ldrb	r3, [r3, #28]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_RTC_SetDate+0x1c>
 800389c:	2302      	movs	r3, #2
 800389e:	e092      	b.n	80039c6 <HAL_RTC_SetDate+0x142>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2202      	movs	r2, #2
 80038aa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10e      	bne.n	80038d0 <HAL_RTC_SetDate+0x4c>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	785b      	ldrb	r3, [r3, #1]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	f023 0310 	bic.w	r3, r3, #16
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	330a      	adds	r3, #10
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11c      	bne.n	8003910 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	78db      	ldrb	r3, [r3, #3]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f91e 	bl	8003b1c <RTC_ByteToBcd2>
 80038e0:	4603      	mov	r3, r0
 80038e2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f917 	bl	8003b1c <RTC_ByteToBcd2>
 80038ee:	4603      	mov	r3, r0
 80038f0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80038f2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	789b      	ldrb	r3, [r3, #2]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 f90f 	bl	8003b1c <RTC_ByteToBcd2>
 80038fe:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8003900:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e00e      	b.n	800392e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	78db      	ldrb	r3, [r3, #3]
 8003914:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	785b      	ldrb	r3, [r3, #1]
 800391a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800391c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8003922:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	22ca      	movs	r2, #202	; 0xca
 8003934:	625a      	str	r2, [r3, #36]	; 0x24
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2253      	movs	r2, #83	; 0x53
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f8c0 	bl	8003ac4 <RTC_EnterInitMode>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	22ff      	movs	r2, #255	; 0xff
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2204      	movs	r2, #4
 8003956:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e031      	b.n	80039c6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	6979      	ldr	r1, [r7, #20]
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RTC_SetDate+0x14c>)
 800396a:	400b      	ands	r3, r1
 800396c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800397c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b00      	cmp	r3, #0
 800398a:	d111      	bne.n	80039b0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f871 	bl	8003a74 <HAL_RTC_WaitForSynchro>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	22ff      	movs	r2, #255	; 0xff
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2204      	movs	r2, #4
 80039a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e00a      	b.n	80039c6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	22ff      	movs	r2, #255	; 0xff
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd90      	pop	{r4, r7, pc}
 80039ce:	bf00      	nop
 80039d0:	00ffff3f 	.word	0x00ffff3f

080039d4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <HAL_RTC_GetDate+0x9c>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	0b5b      	lsrs	r3, r3, #13
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d11a      	bne.n	8003a64 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	78db      	ldrb	r3, [r3, #3]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f890 	bl	8003b58 <RTC_Bcd2ToByte>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	785b      	ldrb	r3, [r3, #1]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f887 	bl	8003b58 <RTC_Bcd2ToByte>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	789b      	ldrb	r3, [r3, #2]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f87e 	bl	8003b58 <RTC_Bcd2ToByte>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	00ffff3f 	.word	0x00ffff3f

08003a74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a8e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a90:	f7fd fcee 	bl	8001470 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a96:	e009      	b.n	8003aac <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a98:	f7fd fcea 	bl	8001470 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa6:	d901      	bls.n	8003aac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e007      	b.n	8003abc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0ee      	beq.n	8003a98 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d119      	bne.n	8003b12 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ae6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae8:	f7fd fcc2 	bl	8001470 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003aee:	e009      	b.n	8003b04 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003af0:	f7fd fcbe 	bl	8001470 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003afe:	d901      	bls.n	8003b04 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e007      	b.n	8003b14 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ee      	beq.n	8003af0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8003b2a:	e005      	b.n	8003b38 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	3b0a      	subs	r3, #10
 8003b36:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	d8f6      	bhi.n	8003b2c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	b2db      	uxtb	r3, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	b2db      	uxtb	r3, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3350      	adds	r3, #80	; 0x50
 8003baa:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	601a      	str	r2, [r3, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e049      	b.n	8003c6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fd fad6 	bl	80011a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f000 f9f6 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d001      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e054      	b.n	8003d3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a26      	ldr	r2, [pc, #152]	; (8003d48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d022      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cba:	d01d      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <HAL_TIM_Base_Start_IT+0xd4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d018      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a21      	ldr	r2, [pc, #132]	; (8003d50 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1f      	ldr	r2, [pc, #124]	; (8003d54 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00e      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <HAL_TIM_Base_Start_IT+0xe4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x80>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1b      	ldr	r2, [pc, #108]	; (8003d60 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d115      	bne.n	8003d24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_TIM_Base_Start_IT+0xec>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d015      	beq.n	8003d36 <HAL_TIM_Base_Start_IT+0xbe>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d011      	beq.n	8003d36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	e008      	b.n	8003d36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e000      	b.n	8003d38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40010400 	.word	0x40010400
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40001800 	.word	0x40001800
 8003d64:	00010007 	.word	0x00010007

08003d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d122      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0202 	mvn.w	r2, #2
 8003d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f905 	bl	8003fba <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8f7 	bl	8003fa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f908 	bl	8003fce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0204 	mvn.w	r2, #4
 8003de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8db 	bl	8003fba <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f8cd 	bl	8003fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f8de 	bl	8003fce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0208 	mvn.w	r2, #8
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2204      	movs	r2, #4
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f8b1 	bl	8003fba <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8a3 	bl	8003fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8b4 	bl	8003fce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b10      	cmp	r3, #16
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0210 	mvn.w	r2, #16
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2208      	movs	r2, #8
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f887 	bl	8003fba <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f879 	bl	8003fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f88a 	bl	8003fce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d10e      	bne.n	8003eec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d107      	bne.n	8003eec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0201 	mvn.w	r2, #1
 8003ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fc ff14 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d10e      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9a8 	bl	8004268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	d10e      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	d107      	bne.n	8003f46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f99b 	bl	800427c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b40      	cmp	r3, #64	; 0x40
 8003f52:	d10e      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b40      	cmp	r3, #64	; 0x40
 8003f60:	d107      	bne.n	8003f72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f838 	bl	8003fe2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d10e      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f06f 0220 	mvn.w	r2, #32
 8003f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f95b 	bl	8004254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a40      	ldr	r2, [pc, #256]	; (800410c <TIM_Base_SetConfig+0x114>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d00f      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3d      	ldr	r2, [pc, #244]	; (8004110 <TIM_Base_SetConfig+0x118>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3c      	ldr	r2, [pc, #240]	; (8004114 <TIM_Base_SetConfig+0x11c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3b      	ldr	r2, [pc, #236]	; (8004118 <TIM_Base_SetConfig+0x120>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3a      	ldr	r2, [pc, #232]	; (800411c <TIM_Base_SetConfig+0x124>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d108      	bne.n	800404a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2f      	ldr	r2, [pc, #188]	; (800410c <TIM_Base_SetConfig+0x114>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02b      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d027      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2c      	ldr	r2, [pc, #176]	; (8004110 <TIM_Base_SetConfig+0x118>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d023      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2b      	ldr	r2, [pc, #172]	; (8004114 <TIM_Base_SetConfig+0x11c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01f      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2a      	ldr	r2, [pc, #168]	; (8004118 <TIM_Base_SetConfig+0x120>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01b      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a29      	ldr	r2, [pc, #164]	; (800411c <TIM_Base_SetConfig+0x124>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d017      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a28      	ldr	r2, [pc, #160]	; (8004120 <TIM_Base_SetConfig+0x128>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a27      	ldr	r2, [pc, #156]	; (8004124 <TIM_Base_SetConfig+0x12c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00f      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a26      	ldr	r2, [pc, #152]	; (8004128 <TIM_Base_SetConfig+0x130>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00b      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a25      	ldr	r2, [pc, #148]	; (800412c <TIM_Base_SetConfig+0x134>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a24      	ldr	r2, [pc, #144]	; (8004130 <TIM_Base_SetConfig+0x138>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a23      	ldr	r2, [pc, #140]	; (8004134 <TIM_Base_SetConfig+0x13c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a0a      	ldr	r2, [pc, #40]	; (800410c <TIM_Base_SetConfig+0x114>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_Base_SetConfig+0xf8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a0c      	ldr	r2, [pc, #48]	; (800411c <TIM_Base_SetConfig+0x124>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d103      	bne.n	80040f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	615a      	str	r2, [r3, #20]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40010400 	.word	0x40010400
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800
 800412c:	40001800 	.word	0x40001800
 8004130:	40001c00 	.word	0x40001c00
 8004134:	40002000 	.word	0x40002000

08004138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800414c:	2302      	movs	r3, #2
 800414e:	e06d      	b.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a30      	ldr	r2, [pc, #192]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2f      	ldr	r2, [pc, #188]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800418a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a20      	ldr	r2, [pc, #128]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d022      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c2:	d01d      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a15      	ldr	r2, [pc, #84]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a16      	ldr	r2, [pc, #88]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a15      	ldr	r2, [pc, #84]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10c      	bne.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004206:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	4313      	orrs	r3, r2
 8004210:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40010000 	.word	0x40010000
 800423c:	40010400 	.word	0x40010400
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40000c00 	.word	0x40000c00
 800424c:	40014000 	.word	0x40014000
 8004250:	40001800 	.word	0x40001800

08004254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e040      	b.n	8004324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc ffca 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	; 0x24
 80042bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fc42 	bl	8004b58 <UART_SetConfig>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e022      	b.n	8004324 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fe9a 	bl	8005020 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 ff21 	bl	8005164 <UART_CheckIdleState>
 8004322:	4603      	mov	r3, r0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	4613      	mov	r3, r2
 8004338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800433e:	2b20      	cmp	r3, #32
 8004340:	d178      	bne.n	8004434 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_Transmit_DMA+0x22>
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e071      	b.n	8004436 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_UART_Transmit_DMA+0x34>
 800435c:	2302      	movs	r3, #2
 800435e:	e06a      	b.n	8004436 <HAL_UART_Transmit_DMA+0x10a>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	88fa      	ldrh	r2, [r7, #6]
 8004372:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2221      	movs	r2, #33	; 0x21
 800438a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d02b      	beq.n	80043ec <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <HAL_UART_Transmit_DMA+0x114>)
 800439a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a0:	4a28      	ldr	r2, [pc, #160]	; (8004444 <HAL_UART_Transmit_DMA+0x118>)
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a8:	4a27      	ldr	r2, [pc, #156]	; (8004448 <HAL_UART_Transmit_DMA+0x11c>)
 80043aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043b0:	2200      	movs	r2, #0
 80043b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043bc:	4619      	mov	r1, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3328      	adds	r3, #40	; 0x28
 80043c4:	461a      	mov	r2, r3
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	f7fd fa62 	bl	8001890 <HAL_DMA_Start_IT>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00c      	beq.n	80043ec <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2210      	movs	r2, #16
 80043d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e024      	b.n	8004436 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2240      	movs	r2, #64	; 0x40
 80043f2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3308      	adds	r3, #8
 8004402:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	613b      	str	r3, [r7, #16]
   return(result);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3308      	adds	r3, #8
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	623a      	str	r2, [r7, #32]
 800441e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	69f9      	ldr	r1, [r7, #28]
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	61bb      	str	r3, [r7, #24]
   return(result);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e5      	bne.n	80043fc <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3728      	adds	r7, #40	; 0x28
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	08005465 	.word	0x08005465
 8004444:	080054fb 	.word	0x080054fb
 8004448:	08005517 	.word	0x08005517

0800444c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b090      	sub	sp, #64	; 0x40
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800446a:	2b80      	cmp	r3, #128	; 0x80
 800446c:	d139      	bne.n	80044e2 <HAL_UART_DMAStop+0x96>
 800446e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004470:	2b21      	cmp	r3, #33	; 0x21
 8004472:	d136      	bne.n	80044e2 <HAL_UART_DMAStop+0x96>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	61fb      	str	r3, [r7, #28]
   return(result);
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3308      	adds	r3, #8
 8004492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004494:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800449a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e5      	bne.n	8004474 <HAL_UART_DMAStop+0x28>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_UART_DMAStop+0x90>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fd fa4b 	bl	8001950 <HAL_DMA_Abort>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00d      	beq.n	80044dc <HAL_UART_DMAStop+0x90>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fd fc5f 	bl	8001d88 <HAL_DMA_GetError>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d105      	bne.n	80044dc <HAL_UART_DMAStop+0x90>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2210      	movs	r2, #16
 80044d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e044      	b.n	8004566 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 ff38 	bl	8005352 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d139      	bne.n	8004564 <HAL_UART_DMAStop+0x118>
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	2b22      	cmp	r3, #34	; 0x22
 80044f4:	d136      	bne.n	8004564 <HAL_UART_DMAStop+0x118>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	60bb      	str	r3, [r7, #8]
   return(result);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3308      	adds	r3, #8
 8004514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004516:	61ba      	str	r2, [r7, #24]
 8004518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6979      	ldr	r1, [r7, #20]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	613b      	str	r3, [r7, #16]
   return(result);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e5      	bne.n	80044f6 <HAL_UART_DMAStop+0xaa>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452e:	2b00      	cmp	r3, #0
 8004530:	d015      	beq.n	800455e <HAL_UART_DMAStop+0x112>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd fa0a 	bl	8001950 <HAL_DMA_Abort>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <HAL_UART_DMAStop+0x112>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4618      	mov	r0, r3
 8004548:	f7fd fc1e 	bl	8001d88 <HAL_DMA_GetError>
 800454c:	4603      	mov	r3, r0
 800454e:	2b20      	cmp	r3, #32
 8004550:	d105      	bne.n	800455e <HAL_UART_DMAStop+0x112>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2210      	movs	r2, #16
 8004556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e003      	b.n	8004566 <HAL_UART_DMAStop+0x11a>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 ff1d 	bl	800539e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3740      	adds	r7, #64	; 0x40
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
	...

08004570 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b0ba      	sub	sp, #232	; 0xe8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004596:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800459a:	f640 030f 	movw	r3, #2063	; 0x80f
 800459e:	4013      	ands	r3, r2
 80045a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d115      	bne.n	80045d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00f      	beq.n	80045d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 828f 	beq.w	8004aec <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	4798      	blx	r3
      }
      return;
 80045d6:	e289      	b.n	8004aec <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8117 	beq.w	8004810 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80045f2:	4b85      	ldr	r3, [pc, #532]	; (8004808 <HAL_UART_IRQHandler+0x298>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 810a 	beq.w	8004810 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d011      	beq.n	800462c <HAL_UART_IRQHandler+0xbc>
 8004608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00b      	beq.n	800462c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2201      	movs	r2, #1
 800461a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800462c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d011      	beq.n	800465c <HAL_UART_IRQHandler+0xec>
 8004638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00b      	beq.n	800465c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2202      	movs	r2, #2
 800464a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004652:	f043 0204 	orr.w	r2, r3, #4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800465c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d011      	beq.n	800468c <HAL_UART_IRQHandler+0x11c>
 8004668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00b      	beq.n	800468c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2204      	movs	r2, #4
 800467a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004682:	f043 0202 	orr.w	r2, r3, #2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d017      	beq.n	80046c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2208      	movs	r2, #8
 80046b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046be:	f043 0208 	orr.w	r2, r3, #8
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d012      	beq.n	80046fa <HAL_UART_IRQHandler+0x18a>
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00c      	beq.n	80046fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 81f5 	beq.w	8004af0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d007      	beq.n	800472e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004734:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b40      	cmp	r3, #64	; 0x40
 8004744:	d005      	beq.n	8004752 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800474a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800474e:	2b00      	cmp	r3, #0
 8004750:	d04f      	beq.n	80047f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fe23 	bl	800539e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b40      	cmp	r3, #64	; 0x40
 8004764:	d141      	bne.n	80047ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3308      	adds	r3, #8
 800476c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800477c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004792:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800479e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1d9      	bne.n	8004766 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d013      	beq.n	80047e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	4a13      	ldr	r2, [pc, #76]	; (800480c <HAL_UART_IRQHandler+0x29c>)
 80047c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fd f932 	bl	8001a30 <HAL_DMA_Abort_IT>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d017      	beq.n	8004802 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80047dc:	4610      	mov	r0, r2
 80047de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	e00f      	b.n	8004802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9a2 	bl	8004b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	e00b      	b.n	8004802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f99e 	bl	8004b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	e007      	b.n	8004802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f99a 	bl	8004b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004800:	e176      	b.n	8004af0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004802:	bf00      	nop
    return;
 8004804:	e174      	b.n	8004af0 <HAL_UART_IRQHandler+0x580>
 8004806:	bf00      	nop
 8004808:	04000120 	.word	0x04000120
 800480c:	08005593 	.word	0x08005593

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	2b01      	cmp	r3, #1
 8004816:	f040 8144 	bne.w	8004aa2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 813d 	beq.w	8004aa2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8136 	beq.w	8004aa2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2210      	movs	r2, #16
 800483c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	f040 80b2 	bne.w	80049b2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800485a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8148 	beq.w	8004af4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800486a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800486e:	429a      	cmp	r2, r3
 8004870:	f080 8140 	bcs.w	8004af4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800487a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004888:	f000 8085 	beq.w	8004996 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1da      	bne.n	800488c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3308      	adds	r3, #8
 80048dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004902:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800490c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e1      	bne.n	80048d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3308      	adds	r3, #8
 8004932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004936:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004938:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800493c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e3      	bne.n	8004912 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004966:	f023 0310 	bic.w	r3, r3, #16
 800496a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004978:	65bb      	str	r3, [r7, #88]	; 0x58
 800497a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800497e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004980:	e841 2300 	strex	r3, r2, [r1]
 8004984:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1e4      	bne.n	8004956 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4618      	mov	r0, r3
 8004992:	f7fc ffdd 	bl	8001950 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f8c8 	bl	8004b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049b0:	e0a0      	b.n	8004af4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8092 	beq.w	8004af8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80049d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 808d 	beq.w	8004af8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a00:	647b      	str	r3, [r7, #68]	; 0x44
 8004a02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e4      	bne.n	80049de <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	623b      	str	r3, [r7, #32]
   return(result);
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3308      	adds	r3, #8
 8004a34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a38:	633a      	str	r2, [r7, #48]	; 0x30
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e3      	bne.n	8004a14 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0310 	bic.w	r3, r3, #16
 8004a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	69fa      	ldr	r2, [r7, #28]
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e4      	bne.n	8004a5e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f850 	bl	8004b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aa0:	e02a      	b.n	8004af8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01c      	beq.n	8004afc <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
    }
    return;
 8004aca:	e017      	b.n	8004afc <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d012      	beq.n	8004afe <HAL_UART_IRQHandler+0x58e>
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00c      	beq.n	8004afe <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fd6a 	bl	80055be <UART_EndTransmit_IT>
    return;
 8004aea:	e008      	b.n	8004afe <HAL_UART_IRQHandler+0x58e>
      return;
 8004aec:	bf00      	nop
 8004aee:	e006      	b.n	8004afe <HAL_UART_IRQHandler+0x58e>
    return;
 8004af0:	bf00      	nop
 8004af2:	e004      	b.n	8004afe <HAL_UART_IRQHandler+0x58e>
      return;
 8004af4:	bf00      	nop
 8004af6:	e002      	b.n	8004afe <HAL_UART_IRQHandler+0x58e>
      return;
 8004af8:	bf00      	nop
 8004afa:	e000      	b.n	8004afe <HAL_UART_IRQHandler+0x58e>
    return;
 8004afc:	bf00      	nop
  }

}
 8004afe:	37e8      	adds	r7, #232	; 0xe8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4ba6      	ldr	r3, [pc, #664]	; (8004e1c <UART_SetConfig+0x2c4>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	6979      	ldr	r1, [r7, #20]
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a94      	ldr	r2, [pc, #592]	; (8004e20 <UART_SetConfig+0x2c8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d120      	bne.n	8004c16 <UART_SetConfig+0xbe>
 8004bd4:	4b93      	ldr	r3, [pc, #588]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d816      	bhi.n	8004c10 <UART_SetConfig+0xb8>
 8004be2:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <UART_SetConfig+0x90>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004bf9 	.word	0x08004bf9
 8004bec:	08004c05 	.word	0x08004c05
 8004bf0:	08004bff 	.word	0x08004bff
 8004bf4:	08004c0b 	.word	0x08004c0b
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e150      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e14d      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004c04:	2304      	movs	r3, #4
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e14a      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e147      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004c10:	2310      	movs	r3, #16
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e144      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a83      	ldr	r2, [pc, #524]	; (8004e28 <UART_SetConfig+0x2d0>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d132      	bne.n	8004c86 <UART_SetConfig+0x12e>
 8004c20:	4b80      	ldr	r3, [pc, #512]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f003 030c 	and.w	r3, r3, #12
 8004c2a:	2b0c      	cmp	r3, #12
 8004c2c:	d828      	bhi.n	8004c80 <UART_SetConfig+0x128>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0xdc>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c69 	.word	0x08004c69
 8004c38:	08004c81 	.word	0x08004c81
 8004c3c:	08004c81 	.word	0x08004c81
 8004c40:	08004c81 	.word	0x08004c81
 8004c44:	08004c75 	.word	0x08004c75
 8004c48:	08004c81 	.word	0x08004c81
 8004c4c:	08004c81 	.word	0x08004c81
 8004c50:	08004c81 	.word	0x08004c81
 8004c54:	08004c6f 	.word	0x08004c6f
 8004c58:	08004c81 	.word	0x08004c81
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c81 	.word	0x08004c81
 8004c64:	08004c7b 	.word	0x08004c7b
 8004c68:	2300      	movs	r3, #0
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e118      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e115      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004c74:	2304      	movs	r3, #4
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e112      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004c7a:	2308      	movs	r3, #8
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e10f      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004c80:	2310      	movs	r3, #16
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e10c      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a68      	ldr	r2, [pc, #416]	; (8004e2c <UART_SetConfig+0x2d4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d120      	bne.n	8004cd2 <UART_SetConfig+0x17a>
 8004c90:	4b64      	ldr	r3, [pc, #400]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c9a:	2b30      	cmp	r3, #48	; 0x30
 8004c9c:	d013      	beq.n	8004cc6 <UART_SetConfig+0x16e>
 8004c9e:	2b30      	cmp	r3, #48	; 0x30
 8004ca0:	d814      	bhi.n	8004ccc <UART_SetConfig+0x174>
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d009      	beq.n	8004cba <UART_SetConfig+0x162>
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d810      	bhi.n	8004ccc <UART_SetConfig+0x174>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <UART_SetConfig+0x15c>
 8004cae:	2b10      	cmp	r3, #16
 8004cb0:	d006      	beq.n	8004cc0 <UART_SetConfig+0x168>
 8004cb2:	e00b      	b.n	8004ccc <UART_SetConfig+0x174>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e0f2      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	77fb      	strb	r3, [r7, #31]
 8004cbe:	e0ef      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e0ec      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	77fb      	strb	r3, [r7, #31]
 8004cca:	e0e9      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e0e6      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a56      	ldr	r2, [pc, #344]	; (8004e30 <UART_SetConfig+0x2d8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d120      	bne.n	8004d1e <UART_SetConfig+0x1c6>
 8004cdc:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ce8:	d013      	beq.n	8004d12 <UART_SetConfig+0x1ba>
 8004cea:	2bc0      	cmp	r3, #192	; 0xc0
 8004cec:	d814      	bhi.n	8004d18 <UART_SetConfig+0x1c0>
 8004cee:	2b80      	cmp	r3, #128	; 0x80
 8004cf0:	d009      	beq.n	8004d06 <UART_SetConfig+0x1ae>
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d810      	bhi.n	8004d18 <UART_SetConfig+0x1c0>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <UART_SetConfig+0x1a8>
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d006      	beq.n	8004d0c <UART_SetConfig+0x1b4>
 8004cfe:	e00b      	b.n	8004d18 <UART_SetConfig+0x1c0>
 8004d00:	2300      	movs	r3, #0
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e0cc      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d06:	2302      	movs	r3, #2
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e0c9      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e0c6      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d12:	2308      	movs	r3, #8
 8004d14:	77fb      	strb	r3, [r7, #31]
 8004d16:	e0c3      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e0c0      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a44      	ldr	r2, [pc, #272]	; (8004e34 <UART_SetConfig+0x2dc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d125      	bne.n	8004d74 <UART_SetConfig+0x21c>
 8004d28:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d36:	d017      	beq.n	8004d68 <UART_SetConfig+0x210>
 8004d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d3c:	d817      	bhi.n	8004d6e <UART_SetConfig+0x216>
 8004d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d42:	d00b      	beq.n	8004d5c <UART_SetConfig+0x204>
 8004d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d48:	d811      	bhi.n	8004d6e <UART_SetConfig+0x216>
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <UART_SetConfig+0x1fe>
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d52:	d006      	beq.n	8004d62 <UART_SetConfig+0x20a>
 8004d54:	e00b      	b.n	8004d6e <UART_SetConfig+0x216>
 8004d56:	2300      	movs	r3, #0
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e0a1      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e09e      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d62:	2304      	movs	r3, #4
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e09b      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d68:	2308      	movs	r3, #8
 8004d6a:	77fb      	strb	r3, [r7, #31]
 8004d6c:	e098      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d6e:	2310      	movs	r3, #16
 8004d70:	77fb      	strb	r3, [r7, #31]
 8004d72:	e095      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <UART_SetConfig+0x2e0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d125      	bne.n	8004dca <UART_SetConfig+0x272>
 8004d7e:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d8c:	d017      	beq.n	8004dbe <UART_SetConfig+0x266>
 8004d8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d92:	d817      	bhi.n	8004dc4 <UART_SetConfig+0x26c>
 8004d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d98:	d00b      	beq.n	8004db2 <UART_SetConfig+0x25a>
 8004d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9e:	d811      	bhi.n	8004dc4 <UART_SetConfig+0x26c>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <UART_SetConfig+0x254>
 8004da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da8:	d006      	beq.n	8004db8 <UART_SetConfig+0x260>
 8004daa:	e00b      	b.n	8004dc4 <UART_SetConfig+0x26c>
 8004dac:	2301      	movs	r3, #1
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e076      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004db2:	2302      	movs	r3, #2
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e073      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004db8:	2304      	movs	r3, #4
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e070      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	77fb      	strb	r3, [r7, #31]
 8004dc2:	e06d      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	77fb      	strb	r3, [r7, #31]
 8004dc8:	e06a      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <UART_SetConfig+0x2e4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d138      	bne.n	8004e46 <UART_SetConfig+0x2ee>
 8004dd4:	4b13      	ldr	r3, [pc, #76]	; (8004e24 <UART_SetConfig+0x2cc>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004dde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004de2:	d017      	beq.n	8004e14 <UART_SetConfig+0x2bc>
 8004de4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004de8:	d82a      	bhi.n	8004e40 <UART_SetConfig+0x2e8>
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	d00b      	beq.n	8004e08 <UART_SetConfig+0x2b0>
 8004df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df4:	d824      	bhi.n	8004e40 <UART_SetConfig+0x2e8>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <UART_SetConfig+0x2aa>
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d006      	beq.n	8004e0e <UART_SetConfig+0x2b6>
 8004e00:	e01e      	b.n	8004e40 <UART_SetConfig+0x2e8>
 8004e02:	2300      	movs	r3, #0
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e04b      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e048      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e0e:	2304      	movs	r3, #4
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e045      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e14:	2308      	movs	r3, #8
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e042      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e1a:	bf00      	nop
 8004e1c:	efff69f3 	.word	0xefff69f3
 8004e20:	40011000 	.word	0x40011000
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40004400 	.word	0x40004400
 8004e2c:	40004800 	.word	0x40004800
 8004e30:	40004c00 	.word	0x40004c00
 8004e34:	40005000 	.word	0x40005000
 8004e38:	40011400 	.word	0x40011400
 8004e3c:	40007800 	.word	0x40007800
 8004e40:	2310      	movs	r3, #16
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e02c      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a72      	ldr	r2, [pc, #456]	; (8005014 <UART_SetConfig+0x4bc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d125      	bne.n	8004e9c <UART_SetConfig+0x344>
 8004e50:	4b71      	ldr	r3, [pc, #452]	; (8005018 <UART_SetConfig+0x4c0>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e5e:	d017      	beq.n	8004e90 <UART_SetConfig+0x338>
 8004e60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e64:	d817      	bhi.n	8004e96 <UART_SetConfig+0x33e>
 8004e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6a:	d00b      	beq.n	8004e84 <UART_SetConfig+0x32c>
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e70:	d811      	bhi.n	8004e96 <UART_SetConfig+0x33e>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <UART_SetConfig+0x326>
 8004e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e7a:	d006      	beq.n	8004e8a <UART_SetConfig+0x332>
 8004e7c:	e00b      	b.n	8004e96 <UART_SetConfig+0x33e>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e00d      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e84:	2302      	movs	r3, #2
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e00a      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e007      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e90:	2308      	movs	r3, #8
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e004      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e96:	2310      	movs	r3, #16
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e001      	b.n	8004ea0 <UART_SetConfig+0x348>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ea8:	d15b      	bne.n	8004f62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004eaa:	7ffb      	ldrb	r3, [r7, #31]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d828      	bhi.n	8004f02 <UART_SetConfig+0x3aa>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x360>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004eed 	.word	0x08004eed
 8004ec4:	08004f03 	.word	0x08004f03
 8004ec8:	08004ef3 	.word	0x08004ef3
 8004ecc:	08004f03 	.word	0x08004f03
 8004ed0:	08004f03 	.word	0x08004f03
 8004ed4:	08004f03 	.word	0x08004f03
 8004ed8:	08004efb 	.word	0x08004efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004edc:	f7fd ff0c 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8004ee0:	61b8      	str	r0, [r7, #24]
        break;
 8004ee2:	e013      	b.n	8004f0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee4:	f7fd ff1c 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 8004ee8:	61b8      	str	r0, [r7, #24]
        break;
 8004eea:	e00f      	b.n	8004f0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eec:	4b4b      	ldr	r3, [pc, #300]	; (800501c <UART_SetConfig+0x4c4>)
 8004eee:	61bb      	str	r3, [r7, #24]
        break;
 8004ef0:	e00c      	b.n	8004f0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef2:	f7fd fe2f 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8004ef6:	61b8      	str	r0, [r7, #24]
        break;
 8004ef8:	e008      	b.n	8004f0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efe:	61bb      	str	r3, [r7, #24]
        break;
 8004f00:	e004      	b.n	8004f0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	77bb      	strb	r3, [r7, #30]
        break;
 8004f0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d074      	beq.n	8004ffc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	005a      	lsls	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	441a      	add	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	d916      	bls.n	8004f5c <UART_SetConfig+0x404>
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f34:	d212      	bcs.n	8004f5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f023 030f 	bic.w	r3, r3, #15
 8004f3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	89fb      	ldrh	r3, [r7, #14]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	89fa      	ldrh	r2, [r7, #14]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	e04f      	b.n	8004ffc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	77bb      	strb	r3, [r7, #30]
 8004f60:	e04c      	b.n	8004ffc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d828      	bhi.n	8004fba <UART_SetConfig+0x462>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <UART_SetConfig+0x418>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004f9d 	.word	0x08004f9d
 8004f78:	08004fa5 	.word	0x08004fa5
 8004f7c:	08004fbb 	.word	0x08004fbb
 8004f80:	08004fab 	.word	0x08004fab
 8004f84:	08004fbb 	.word	0x08004fbb
 8004f88:	08004fbb 	.word	0x08004fbb
 8004f8c:	08004fbb 	.word	0x08004fbb
 8004f90:	08004fb3 	.word	0x08004fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f94:	f7fd feb0 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8004f98:	61b8      	str	r0, [r7, #24]
        break;
 8004f9a:	e013      	b.n	8004fc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f9c:	f7fd fec0 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 8004fa0:	61b8      	str	r0, [r7, #24]
        break;
 8004fa2:	e00f      	b.n	8004fc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa4:	4b1d      	ldr	r3, [pc, #116]	; (800501c <UART_SetConfig+0x4c4>)
 8004fa6:	61bb      	str	r3, [r7, #24]
        break;
 8004fa8:	e00c      	b.n	8004fc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004faa:	f7fd fdd3 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8004fae:	61b8      	str	r0, [r7, #24]
        break;
 8004fb0:	e008      	b.n	8004fc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb6:	61bb      	str	r3, [r7, #24]
        break;
 8004fb8:	e004      	b.n	8004fc4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	77bb      	strb	r3, [r7, #30]
        break;
 8004fc2:	bf00      	nop
    }

    if (pclk != 0U)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d018      	beq.n	8004ffc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	085a      	lsrs	r2, r3, #1
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	441a      	add	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b0f      	cmp	r3, #15
 8004fe2:	d909      	bls.n	8004ff8 <UART_SetConfig+0x4a0>
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fea:	d205      	bcs.n	8004ff8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60da      	str	r2, [r3, #12]
 8004ff6:	e001      	b.n	8004ffc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005008:	7fbb      	ldrb	r3, [r7, #30]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40007c00 	.word	0x40007c00
 8005018:	40023800 	.word	0x40023800
 800501c:	00f42400 	.word	0x00f42400

08005020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01a      	beq.n	8005136 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511e:	d10a      	bne.n	8005136 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  }
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af02      	add	r7, sp, #8
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005174:	f7fc f97c 	bl	8001470 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b08      	cmp	r3, #8
 8005186:	d10e      	bne.n	80051a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f817 	bl	80051ca <UART_WaitOnFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e00d      	b.n	80051c2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b09c      	sub	sp, #112	; 0x70
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	4613      	mov	r3, r2
 80051d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051da:	e0a5      	b.n	8005328 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e2:	f000 80a1 	beq.w	8005328 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e6:	f7fc f943 	bl	8001470 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d302      	bcc.n	80051fc <UART_WaitOnFlagUntilTimeout+0x32>
 80051f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d13e      	bne.n	800527a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800520a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005210:	667b      	str	r3, [r7, #100]	; 0x64
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800521a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800521c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005220:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e6      	bne.n	80051fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3308      	adds	r3, #8
 8005234:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	663b      	str	r3, [r7, #96]	; 0x60
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3308      	adds	r3, #8
 800524c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800524e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005250:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800525c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e5      	bne.n	800522e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e067      	b.n	800534a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d04f      	beq.n	8005328 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005296:	d147      	bne.n	8005328 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
 80052c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e6      	bne.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3308      	adds	r3, #8
 80052da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	613b      	str	r3, [r7, #16]
   return(result);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3308      	adds	r3, #8
 80052f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052f4:	623a      	str	r2, [r7, #32]
 80052f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	69f9      	ldr	r1, [r7, #28]
 80052fa:	6a3a      	ldr	r2, [r7, #32]
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	61bb      	str	r3, [r7, #24]
   return(result);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e5      	bne.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2220      	movs	r2, #32
 8005312:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e010      	b.n	800534a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	429a      	cmp	r2, r3
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	429a      	cmp	r2, r3
 8005344:	f43f af4a 	beq.w	80051dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3770      	adds	r7, #112	; 0x70
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005352:	b480      	push	{r7}
 8005354:	b089      	sub	sp, #36	; 0x24
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	60bb      	str	r3, [r7, #8]
   return(result);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6979      	ldr	r1, [r7, #20]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	613b      	str	r3, [r7, #16]
   return(result);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e6      	bne.n	800535a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005392:	bf00      	nop
 8005394:	3724      	adds	r7, #36	; 0x24
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800539e:	b480      	push	{r7}
 80053a0:	b095      	sub	sp, #84	; 0x54
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c4:	643b      	str	r3, [r7, #64]	; 0x40
 80053c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e6      	bne.n	80053a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3308      	adds	r3, #8
 80053de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e5      	bne.n	80053d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005410:	2b01      	cmp	r3, #1
 8005412:	d118      	bne.n	8005446 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	60bb      	str	r3, [r7, #8]
   return(result);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f023 0310 	bic.w	r3, r3, #16
 8005428:	647b      	str	r3, [r7, #68]	; 0x44
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6979      	ldr	r1, [r7, #20]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	613b      	str	r3, [r7, #16]
   return(result);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e6      	bne.n	8005414 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005458:	bf00      	nop
 800545a:	3754      	adds	r7, #84	; 0x54
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b090      	sub	sp, #64	; 0x40
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d037      	beq.n	80054ec <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800547c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547e:	2200      	movs	r2, #0
 8005480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3308      	adds	r3, #8
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	623b      	str	r3, [r7, #32]
   return(result);
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549a:	63bb      	str	r3, [r7, #56]	; 0x38
 800549c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3308      	adds	r3, #8
 80054a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054a4:	633a      	str	r2, [r7, #48]	; 0x30
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e5      	bne.n	8005484 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34
 80054ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	61fb      	str	r3, [r7, #28]
 80054d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	69b9      	ldr	r1, [r7, #24]
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	617b      	str	r3, [r7, #20]
   return(result);
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e6      	bne.n	80054b8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054ea:	e002      	b.n	80054f2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80054ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80054ee:	f7ff fb09 	bl	8004b04 <HAL_UART_TxCpltCallback>
}
 80054f2:	bf00      	nop
 80054f4:	3740      	adds	r7, #64	; 0x40
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff fb05 	bl	8004b18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005528:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800552e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d109      	bne.n	8005552 <UART_DMAError+0x3c>
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b21      	cmp	r3, #33	; 0x21
 8005542:	d106      	bne.n	8005552 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2200      	movs	r2, #0
 8005548:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800554c:	6978      	ldr	r0, [r7, #20]
 800554e:	f7ff ff00 	bl	8005352 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d109      	bne.n	8005574 <UART_DMAError+0x5e>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b22      	cmp	r3, #34	; 0x22
 8005564:	d106      	bne.n	8005574 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2200      	movs	r2, #0
 800556a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800556e:	6978      	ldr	r0, [r7, #20]
 8005570:	f7ff ff15 	bl	800539e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557a:	f043 0210 	orr.w	r2, r3, #16
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005584:	6978      	ldr	r0, [r7, #20]
 8005586:	f7ff fad1 	bl	8004b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800558a:	bf00      	nop
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f7ff fabb 	bl	8004b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055b6:	bf00      	nop
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b088      	sub	sp, #32
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	461a      	mov	r2, r3
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e6      	bne.n	80055c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff fa7d 	bl	8004b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800560a:	bf00      	nop
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <__errno>:
 8005614:	4b01      	ldr	r3, [pc, #4]	; (800561c <__errno+0x8>)
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	2000000c 	.word	0x2000000c

08005620 <__libc_init_array>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4d0d      	ldr	r5, [pc, #52]	; (8005658 <__libc_init_array+0x38>)
 8005624:	4c0d      	ldr	r4, [pc, #52]	; (800565c <__libc_init_array+0x3c>)
 8005626:	1b64      	subs	r4, r4, r5
 8005628:	10a4      	asrs	r4, r4, #2
 800562a:	2600      	movs	r6, #0
 800562c:	42a6      	cmp	r6, r4
 800562e:	d109      	bne.n	8005644 <__libc_init_array+0x24>
 8005630:	4d0b      	ldr	r5, [pc, #44]	; (8005660 <__libc_init_array+0x40>)
 8005632:	4c0c      	ldr	r4, [pc, #48]	; (8005664 <__libc_init_array+0x44>)
 8005634:	f000 ffae 	bl	8006594 <_init>
 8005638:	1b64      	subs	r4, r4, r5
 800563a:	10a4      	asrs	r4, r4, #2
 800563c:	2600      	movs	r6, #0
 800563e:	42a6      	cmp	r6, r4
 8005640:	d105      	bne.n	800564e <__libc_init_array+0x2e>
 8005642:	bd70      	pop	{r4, r5, r6, pc}
 8005644:	f855 3b04 	ldr.w	r3, [r5], #4
 8005648:	4798      	blx	r3
 800564a:	3601      	adds	r6, #1
 800564c:	e7ee      	b.n	800562c <__libc_init_array+0xc>
 800564e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005652:	4798      	blx	r3
 8005654:	3601      	adds	r6, #1
 8005656:	e7f2      	b.n	800563e <__libc_init_array+0x1e>
 8005658:	080066fc 	.word	0x080066fc
 800565c:	080066fc 	.word	0x080066fc
 8005660:	080066fc 	.word	0x080066fc
 8005664:	08006700 	.word	0x08006700

08005668 <memset>:
 8005668:	4402      	add	r2, r0
 800566a:	4603      	mov	r3, r0
 800566c:	4293      	cmp	r3, r2
 800566e:	d100      	bne.n	8005672 <memset+0xa>
 8005670:	4770      	bx	lr
 8005672:	f803 1b01 	strb.w	r1, [r3], #1
 8005676:	e7f9      	b.n	800566c <memset+0x4>

08005678 <iprintf>:
 8005678:	b40f      	push	{r0, r1, r2, r3}
 800567a:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <iprintf+0x2c>)
 800567c:	b513      	push	{r0, r1, r4, lr}
 800567e:	681c      	ldr	r4, [r3, #0]
 8005680:	b124      	cbz	r4, 800568c <iprintf+0x14>
 8005682:	69a3      	ldr	r3, [r4, #24]
 8005684:	b913      	cbnz	r3, 800568c <iprintf+0x14>
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f866 	bl	8005758 <__sinit>
 800568c:	ab05      	add	r3, sp, #20
 800568e:	9a04      	ldr	r2, [sp, #16]
 8005690:	68a1      	ldr	r1, [r4, #8]
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	4620      	mov	r0, r4
 8005696:	f000 f9bd 	bl	8005a14 <_vfiprintf_r>
 800569a:	b002      	add	sp, #8
 800569c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a0:	b004      	add	sp, #16
 80056a2:	4770      	bx	lr
 80056a4:	2000000c 	.word	0x2000000c

080056a8 <std>:
 80056a8:	2300      	movs	r3, #0
 80056aa:	b510      	push	{r4, lr}
 80056ac:	4604      	mov	r4, r0
 80056ae:	e9c0 3300 	strd	r3, r3, [r0]
 80056b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056b6:	6083      	str	r3, [r0, #8]
 80056b8:	8181      	strh	r1, [r0, #12]
 80056ba:	6643      	str	r3, [r0, #100]	; 0x64
 80056bc:	81c2      	strh	r2, [r0, #14]
 80056be:	6183      	str	r3, [r0, #24]
 80056c0:	4619      	mov	r1, r3
 80056c2:	2208      	movs	r2, #8
 80056c4:	305c      	adds	r0, #92	; 0x5c
 80056c6:	f7ff ffcf 	bl	8005668 <memset>
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <std+0x38>)
 80056cc:	6263      	str	r3, [r4, #36]	; 0x24
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <std+0x3c>)
 80056d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <std+0x40>)
 80056d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056d6:	4b05      	ldr	r3, [pc, #20]	; (80056ec <std+0x44>)
 80056d8:	6224      	str	r4, [r4, #32]
 80056da:	6323      	str	r3, [r4, #48]	; 0x30
 80056dc:	bd10      	pop	{r4, pc}
 80056de:	bf00      	nop
 80056e0:	08005fbd 	.word	0x08005fbd
 80056e4:	08005fdf 	.word	0x08005fdf
 80056e8:	08006017 	.word	0x08006017
 80056ec:	0800603b 	.word	0x0800603b

080056f0 <_cleanup_r>:
 80056f0:	4901      	ldr	r1, [pc, #4]	; (80056f8 <_cleanup_r+0x8>)
 80056f2:	f000 b8af 	b.w	8005854 <_fwalk_reent>
 80056f6:	bf00      	nop
 80056f8:	08006315 	.word	0x08006315

080056fc <__sfmoreglue>:
 80056fc:	b570      	push	{r4, r5, r6, lr}
 80056fe:	2268      	movs	r2, #104	; 0x68
 8005700:	1e4d      	subs	r5, r1, #1
 8005702:	4355      	muls	r5, r2
 8005704:	460e      	mov	r6, r1
 8005706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800570a:	f000 f8e5 	bl	80058d8 <_malloc_r>
 800570e:	4604      	mov	r4, r0
 8005710:	b140      	cbz	r0, 8005724 <__sfmoreglue+0x28>
 8005712:	2100      	movs	r1, #0
 8005714:	e9c0 1600 	strd	r1, r6, [r0]
 8005718:	300c      	adds	r0, #12
 800571a:	60a0      	str	r0, [r4, #8]
 800571c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005720:	f7ff ffa2 	bl	8005668 <memset>
 8005724:	4620      	mov	r0, r4
 8005726:	bd70      	pop	{r4, r5, r6, pc}

08005728 <__sfp_lock_acquire>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__sfp_lock_acquire+0x8>)
 800572a:	f000 b8b3 	b.w	8005894 <__retarget_lock_acquire_recursive>
 800572e:	bf00      	nop
 8005730:	200011bd 	.word	0x200011bd

08005734 <__sfp_lock_release>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__sfp_lock_release+0x8>)
 8005736:	f000 b8ae 	b.w	8005896 <__retarget_lock_release_recursive>
 800573a:	bf00      	nop
 800573c:	200011bd 	.word	0x200011bd

08005740 <__sinit_lock_acquire>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__sinit_lock_acquire+0x8>)
 8005742:	f000 b8a7 	b.w	8005894 <__retarget_lock_acquire_recursive>
 8005746:	bf00      	nop
 8005748:	200011be 	.word	0x200011be

0800574c <__sinit_lock_release>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__sinit_lock_release+0x8>)
 800574e:	f000 b8a2 	b.w	8005896 <__retarget_lock_release_recursive>
 8005752:	bf00      	nop
 8005754:	200011be 	.word	0x200011be

08005758 <__sinit>:
 8005758:	b510      	push	{r4, lr}
 800575a:	4604      	mov	r4, r0
 800575c:	f7ff fff0 	bl	8005740 <__sinit_lock_acquire>
 8005760:	69a3      	ldr	r3, [r4, #24]
 8005762:	b11b      	cbz	r3, 800576c <__sinit+0x14>
 8005764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005768:	f7ff bff0 	b.w	800574c <__sinit_lock_release>
 800576c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005770:	6523      	str	r3, [r4, #80]	; 0x50
 8005772:	4b13      	ldr	r3, [pc, #76]	; (80057c0 <__sinit+0x68>)
 8005774:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <__sinit+0x6c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	62a2      	str	r2, [r4, #40]	; 0x28
 800577a:	42a3      	cmp	r3, r4
 800577c:	bf04      	itt	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	61a3      	streq	r3, [r4, #24]
 8005782:	4620      	mov	r0, r4
 8005784:	f000 f820 	bl	80057c8 <__sfp>
 8005788:	6060      	str	r0, [r4, #4]
 800578a:	4620      	mov	r0, r4
 800578c:	f000 f81c 	bl	80057c8 <__sfp>
 8005790:	60a0      	str	r0, [r4, #8]
 8005792:	4620      	mov	r0, r4
 8005794:	f000 f818 	bl	80057c8 <__sfp>
 8005798:	2200      	movs	r2, #0
 800579a:	60e0      	str	r0, [r4, #12]
 800579c:	2104      	movs	r1, #4
 800579e:	6860      	ldr	r0, [r4, #4]
 80057a0:	f7ff ff82 	bl	80056a8 <std>
 80057a4:	68a0      	ldr	r0, [r4, #8]
 80057a6:	2201      	movs	r2, #1
 80057a8:	2109      	movs	r1, #9
 80057aa:	f7ff ff7d 	bl	80056a8 <std>
 80057ae:	68e0      	ldr	r0, [r4, #12]
 80057b0:	2202      	movs	r2, #2
 80057b2:	2112      	movs	r1, #18
 80057b4:	f7ff ff78 	bl	80056a8 <std>
 80057b8:	2301      	movs	r3, #1
 80057ba:	61a3      	str	r3, [r4, #24]
 80057bc:	e7d2      	b.n	8005764 <__sinit+0xc>
 80057be:	bf00      	nop
 80057c0:	0800665c 	.word	0x0800665c
 80057c4:	080056f1 	.word	0x080056f1

080057c8 <__sfp>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	4607      	mov	r7, r0
 80057cc:	f7ff ffac 	bl	8005728 <__sfp_lock_acquire>
 80057d0:	4b1e      	ldr	r3, [pc, #120]	; (800584c <__sfp+0x84>)
 80057d2:	681e      	ldr	r6, [r3, #0]
 80057d4:	69b3      	ldr	r3, [r6, #24]
 80057d6:	b913      	cbnz	r3, 80057de <__sfp+0x16>
 80057d8:	4630      	mov	r0, r6
 80057da:	f7ff ffbd 	bl	8005758 <__sinit>
 80057de:	3648      	adds	r6, #72	; 0x48
 80057e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	d503      	bpl.n	80057f0 <__sfp+0x28>
 80057e8:	6833      	ldr	r3, [r6, #0]
 80057ea:	b30b      	cbz	r3, 8005830 <__sfp+0x68>
 80057ec:	6836      	ldr	r6, [r6, #0]
 80057ee:	e7f7      	b.n	80057e0 <__sfp+0x18>
 80057f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057f4:	b9d5      	cbnz	r5, 800582c <__sfp+0x64>
 80057f6:	4b16      	ldr	r3, [pc, #88]	; (8005850 <__sfp+0x88>)
 80057f8:	60e3      	str	r3, [r4, #12]
 80057fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057fe:	6665      	str	r5, [r4, #100]	; 0x64
 8005800:	f000 f847 	bl	8005892 <__retarget_lock_init_recursive>
 8005804:	f7ff ff96 	bl	8005734 <__sfp_lock_release>
 8005808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800580c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005810:	6025      	str	r5, [r4, #0]
 8005812:	61a5      	str	r5, [r4, #24]
 8005814:	2208      	movs	r2, #8
 8005816:	4629      	mov	r1, r5
 8005818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800581c:	f7ff ff24 	bl	8005668 <memset>
 8005820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005828:	4620      	mov	r0, r4
 800582a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800582c:	3468      	adds	r4, #104	; 0x68
 800582e:	e7d9      	b.n	80057e4 <__sfp+0x1c>
 8005830:	2104      	movs	r1, #4
 8005832:	4638      	mov	r0, r7
 8005834:	f7ff ff62 	bl	80056fc <__sfmoreglue>
 8005838:	4604      	mov	r4, r0
 800583a:	6030      	str	r0, [r6, #0]
 800583c:	2800      	cmp	r0, #0
 800583e:	d1d5      	bne.n	80057ec <__sfp+0x24>
 8005840:	f7ff ff78 	bl	8005734 <__sfp_lock_release>
 8005844:	230c      	movs	r3, #12
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	e7ee      	b.n	8005828 <__sfp+0x60>
 800584a:	bf00      	nop
 800584c:	0800665c 	.word	0x0800665c
 8005850:	ffff0001 	.word	0xffff0001

08005854 <_fwalk_reent>:
 8005854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005858:	4606      	mov	r6, r0
 800585a:	4688      	mov	r8, r1
 800585c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005860:	2700      	movs	r7, #0
 8005862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005866:	f1b9 0901 	subs.w	r9, r9, #1
 800586a:	d505      	bpl.n	8005878 <_fwalk_reent+0x24>
 800586c:	6824      	ldr	r4, [r4, #0]
 800586e:	2c00      	cmp	r4, #0
 8005870:	d1f7      	bne.n	8005862 <_fwalk_reent+0xe>
 8005872:	4638      	mov	r0, r7
 8005874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005878:	89ab      	ldrh	r3, [r5, #12]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d907      	bls.n	800588e <_fwalk_reent+0x3a>
 800587e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005882:	3301      	adds	r3, #1
 8005884:	d003      	beq.n	800588e <_fwalk_reent+0x3a>
 8005886:	4629      	mov	r1, r5
 8005888:	4630      	mov	r0, r6
 800588a:	47c0      	blx	r8
 800588c:	4307      	orrs	r7, r0
 800588e:	3568      	adds	r5, #104	; 0x68
 8005890:	e7e9      	b.n	8005866 <_fwalk_reent+0x12>

08005892 <__retarget_lock_init_recursive>:
 8005892:	4770      	bx	lr

08005894 <__retarget_lock_acquire_recursive>:
 8005894:	4770      	bx	lr

08005896 <__retarget_lock_release_recursive>:
 8005896:	4770      	bx	lr

08005898 <sbrk_aligned>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	4e0e      	ldr	r6, [pc, #56]	; (80058d4 <sbrk_aligned+0x3c>)
 800589c:	460c      	mov	r4, r1
 800589e:	6831      	ldr	r1, [r6, #0]
 80058a0:	4605      	mov	r5, r0
 80058a2:	b911      	cbnz	r1, 80058aa <sbrk_aligned+0x12>
 80058a4:	f000 fb7a 	bl	8005f9c <_sbrk_r>
 80058a8:	6030      	str	r0, [r6, #0]
 80058aa:	4621      	mov	r1, r4
 80058ac:	4628      	mov	r0, r5
 80058ae:	f000 fb75 	bl	8005f9c <_sbrk_r>
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	d00a      	beq.n	80058cc <sbrk_aligned+0x34>
 80058b6:	1cc4      	adds	r4, r0, #3
 80058b8:	f024 0403 	bic.w	r4, r4, #3
 80058bc:	42a0      	cmp	r0, r4
 80058be:	d007      	beq.n	80058d0 <sbrk_aligned+0x38>
 80058c0:	1a21      	subs	r1, r4, r0
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 fb6a 	bl	8005f9c <_sbrk_r>
 80058c8:	3001      	adds	r0, #1
 80058ca:	d101      	bne.n	80058d0 <sbrk_aligned+0x38>
 80058cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058d0:	4620      	mov	r0, r4
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	200011c4 	.word	0x200011c4

080058d8 <_malloc_r>:
 80058d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058dc:	1ccd      	adds	r5, r1, #3
 80058de:	f025 0503 	bic.w	r5, r5, #3
 80058e2:	3508      	adds	r5, #8
 80058e4:	2d0c      	cmp	r5, #12
 80058e6:	bf38      	it	cc
 80058e8:	250c      	movcc	r5, #12
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	4607      	mov	r7, r0
 80058ee:	db01      	blt.n	80058f4 <_malloc_r+0x1c>
 80058f0:	42a9      	cmp	r1, r5
 80058f2:	d905      	bls.n	8005900 <_malloc_r+0x28>
 80058f4:	230c      	movs	r3, #12
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	2600      	movs	r6, #0
 80058fa:	4630      	mov	r0, r6
 80058fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005900:	4e2e      	ldr	r6, [pc, #184]	; (80059bc <_malloc_r+0xe4>)
 8005902:	f000 fdbb 	bl	800647c <__malloc_lock>
 8005906:	6833      	ldr	r3, [r6, #0]
 8005908:	461c      	mov	r4, r3
 800590a:	bb34      	cbnz	r4, 800595a <_malloc_r+0x82>
 800590c:	4629      	mov	r1, r5
 800590e:	4638      	mov	r0, r7
 8005910:	f7ff ffc2 	bl	8005898 <sbrk_aligned>
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	4604      	mov	r4, r0
 8005918:	d14d      	bne.n	80059b6 <_malloc_r+0xde>
 800591a:	6834      	ldr	r4, [r6, #0]
 800591c:	4626      	mov	r6, r4
 800591e:	2e00      	cmp	r6, #0
 8005920:	d140      	bne.n	80059a4 <_malloc_r+0xcc>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	4631      	mov	r1, r6
 8005926:	4638      	mov	r0, r7
 8005928:	eb04 0803 	add.w	r8, r4, r3
 800592c:	f000 fb36 	bl	8005f9c <_sbrk_r>
 8005930:	4580      	cmp	r8, r0
 8005932:	d13a      	bne.n	80059aa <_malloc_r+0xd2>
 8005934:	6821      	ldr	r1, [r4, #0]
 8005936:	3503      	adds	r5, #3
 8005938:	1a6d      	subs	r5, r5, r1
 800593a:	f025 0503 	bic.w	r5, r5, #3
 800593e:	3508      	adds	r5, #8
 8005940:	2d0c      	cmp	r5, #12
 8005942:	bf38      	it	cc
 8005944:	250c      	movcc	r5, #12
 8005946:	4629      	mov	r1, r5
 8005948:	4638      	mov	r0, r7
 800594a:	f7ff ffa5 	bl	8005898 <sbrk_aligned>
 800594e:	3001      	adds	r0, #1
 8005950:	d02b      	beq.n	80059aa <_malloc_r+0xd2>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	442b      	add	r3, r5
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	e00e      	b.n	8005978 <_malloc_r+0xa0>
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	1b52      	subs	r2, r2, r5
 800595e:	d41e      	bmi.n	800599e <_malloc_r+0xc6>
 8005960:	2a0b      	cmp	r2, #11
 8005962:	d916      	bls.n	8005992 <_malloc_r+0xba>
 8005964:	1961      	adds	r1, r4, r5
 8005966:	42a3      	cmp	r3, r4
 8005968:	6025      	str	r5, [r4, #0]
 800596a:	bf18      	it	ne
 800596c:	6059      	strne	r1, [r3, #4]
 800596e:	6863      	ldr	r3, [r4, #4]
 8005970:	bf08      	it	eq
 8005972:	6031      	streq	r1, [r6, #0]
 8005974:	5162      	str	r2, [r4, r5]
 8005976:	604b      	str	r3, [r1, #4]
 8005978:	4638      	mov	r0, r7
 800597a:	f104 060b 	add.w	r6, r4, #11
 800597e:	f000 fd83 	bl	8006488 <__malloc_unlock>
 8005982:	f026 0607 	bic.w	r6, r6, #7
 8005986:	1d23      	adds	r3, r4, #4
 8005988:	1af2      	subs	r2, r6, r3
 800598a:	d0b6      	beq.n	80058fa <_malloc_r+0x22>
 800598c:	1b9b      	subs	r3, r3, r6
 800598e:	50a3      	str	r3, [r4, r2]
 8005990:	e7b3      	b.n	80058fa <_malloc_r+0x22>
 8005992:	6862      	ldr	r2, [r4, #4]
 8005994:	42a3      	cmp	r3, r4
 8005996:	bf0c      	ite	eq
 8005998:	6032      	streq	r2, [r6, #0]
 800599a:	605a      	strne	r2, [r3, #4]
 800599c:	e7ec      	b.n	8005978 <_malloc_r+0xa0>
 800599e:	4623      	mov	r3, r4
 80059a0:	6864      	ldr	r4, [r4, #4]
 80059a2:	e7b2      	b.n	800590a <_malloc_r+0x32>
 80059a4:	4634      	mov	r4, r6
 80059a6:	6876      	ldr	r6, [r6, #4]
 80059a8:	e7b9      	b.n	800591e <_malloc_r+0x46>
 80059aa:	230c      	movs	r3, #12
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4638      	mov	r0, r7
 80059b0:	f000 fd6a 	bl	8006488 <__malloc_unlock>
 80059b4:	e7a1      	b.n	80058fa <_malloc_r+0x22>
 80059b6:	6025      	str	r5, [r4, #0]
 80059b8:	e7de      	b.n	8005978 <_malloc_r+0xa0>
 80059ba:	bf00      	nop
 80059bc:	200011c0 	.word	0x200011c0

080059c0 <__sfputc_r>:
 80059c0:	6893      	ldr	r3, [r2, #8]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	b410      	push	{r4}
 80059c8:	6093      	str	r3, [r2, #8]
 80059ca:	da08      	bge.n	80059de <__sfputc_r+0x1e>
 80059cc:	6994      	ldr	r4, [r2, #24]
 80059ce:	42a3      	cmp	r3, r4
 80059d0:	db01      	blt.n	80059d6 <__sfputc_r+0x16>
 80059d2:	290a      	cmp	r1, #10
 80059d4:	d103      	bne.n	80059de <__sfputc_r+0x1e>
 80059d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059da:	f000 bb33 	b.w	8006044 <__swbuf_r>
 80059de:	6813      	ldr	r3, [r2, #0]
 80059e0:	1c58      	adds	r0, r3, #1
 80059e2:	6010      	str	r0, [r2, #0]
 80059e4:	7019      	strb	r1, [r3, #0]
 80059e6:	4608      	mov	r0, r1
 80059e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <__sfputs_r>:
 80059ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f0:	4606      	mov	r6, r0
 80059f2:	460f      	mov	r7, r1
 80059f4:	4614      	mov	r4, r2
 80059f6:	18d5      	adds	r5, r2, r3
 80059f8:	42ac      	cmp	r4, r5
 80059fa:	d101      	bne.n	8005a00 <__sfputs_r+0x12>
 80059fc:	2000      	movs	r0, #0
 80059fe:	e007      	b.n	8005a10 <__sfputs_r+0x22>
 8005a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a04:	463a      	mov	r2, r7
 8005a06:	4630      	mov	r0, r6
 8005a08:	f7ff ffda 	bl	80059c0 <__sfputc_r>
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d1f3      	bne.n	80059f8 <__sfputs_r+0xa>
 8005a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a14 <_vfiprintf_r>:
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	460d      	mov	r5, r1
 8005a1a:	b09d      	sub	sp, #116	; 0x74
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	4698      	mov	r8, r3
 8005a20:	4606      	mov	r6, r0
 8005a22:	b118      	cbz	r0, 8005a2c <_vfiprintf_r+0x18>
 8005a24:	6983      	ldr	r3, [r0, #24]
 8005a26:	b90b      	cbnz	r3, 8005a2c <_vfiprintf_r+0x18>
 8005a28:	f7ff fe96 	bl	8005758 <__sinit>
 8005a2c:	4b89      	ldr	r3, [pc, #548]	; (8005c54 <_vfiprintf_r+0x240>)
 8005a2e:	429d      	cmp	r5, r3
 8005a30:	d11b      	bne.n	8005a6a <_vfiprintf_r+0x56>
 8005a32:	6875      	ldr	r5, [r6, #4]
 8005a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a36:	07d9      	lsls	r1, r3, #31
 8005a38:	d405      	bmi.n	8005a46 <_vfiprintf_r+0x32>
 8005a3a:	89ab      	ldrh	r3, [r5, #12]
 8005a3c:	059a      	lsls	r2, r3, #22
 8005a3e:	d402      	bmi.n	8005a46 <_vfiprintf_r+0x32>
 8005a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a42:	f7ff ff27 	bl	8005894 <__retarget_lock_acquire_recursive>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	071b      	lsls	r3, r3, #28
 8005a4a:	d501      	bpl.n	8005a50 <_vfiprintf_r+0x3c>
 8005a4c:	692b      	ldr	r3, [r5, #16]
 8005a4e:	b9eb      	cbnz	r3, 8005a8c <_vfiprintf_r+0x78>
 8005a50:	4629      	mov	r1, r5
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 fb5a 	bl	800610c <__swsetup_r>
 8005a58:	b1c0      	cbz	r0, 8005a8c <_vfiprintf_r+0x78>
 8005a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a5c:	07dc      	lsls	r4, r3, #31
 8005a5e:	d50e      	bpl.n	8005a7e <_vfiprintf_r+0x6a>
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a64:	b01d      	add	sp, #116	; 0x74
 8005a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6a:	4b7b      	ldr	r3, [pc, #492]	; (8005c58 <_vfiprintf_r+0x244>)
 8005a6c:	429d      	cmp	r5, r3
 8005a6e:	d101      	bne.n	8005a74 <_vfiprintf_r+0x60>
 8005a70:	68b5      	ldr	r5, [r6, #8]
 8005a72:	e7df      	b.n	8005a34 <_vfiprintf_r+0x20>
 8005a74:	4b79      	ldr	r3, [pc, #484]	; (8005c5c <_vfiprintf_r+0x248>)
 8005a76:	429d      	cmp	r5, r3
 8005a78:	bf08      	it	eq
 8005a7a:	68f5      	ldreq	r5, [r6, #12]
 8005a7c:	e7da      	b.n	8005a34 <_vfiprintf_r+0x20>
 8005a7e:	89ab      	ldrh	r3, [r5, #12]
 8005a80:	0598      	lsls	r0, r3, #22
 8005a82:	d4ed      	bmi.n	8005a60 <_vfiprintf_r+0x4c>
 8005a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a86:	f7ff ff06 	bl	8005896 <__retarget_lock_release_recursive>
 8005a8a:	e7e9      	b.n	8005a60 <_vfiprintf_r+0x4c>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a90:	2320      	movs	r3, #32
 8005a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a9a:	2330      	movs	r3, #48	; 0x30
 8005a9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c60 <_vfiprintf_r+0x24c>
 8005aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aa4:	f04f 0901 	mov.w	r9, #1
 8005aa8:	4623      	mov	r3, r4
 8005aaa:	469a      	mov	sl, r3
 8005aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ab0:	b10a      	cbz	r2, 8005ab6 <_vfiprintf_r+0xa2>
 8005ab2:	2a25      	cmp	r2, #37	; 0x25
 8005ab4:	d1f9      	bne.n	8005aaa <_vfiprintf_r+0x96>
 8005ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8005aba:	d00b      	beq.n	8005ad4 <_vfiprintf_r+0xc0>
 8005abc:	465b      	mov	r3, fp
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7ff ff93 	bl	80059ee <__sfputs_r>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	f000 80aa 	beq.w	8005c22 <_vfiprintf_r+0x20e>
 8005ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad0:	445a      	add	r2, fp
 8005ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80a2 	beq.w	8005c22 <_vfiprintf_r+0x20e>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae8:	f10a 0a01 	add.w	sl, sl, #1
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	9307      	str	r3, [sp, #28]
 8005af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005af4:	931a      	str	r3, [sp, #104]	; 0x68
 8005af6:	4654      	mov	r4, sl
 8005af8:	2205      	movs	r2, #5
 8005afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afe:	4858      	ldr	r0, [pc, #352]	; (8005c60 <_vfiprintf_r+0x24c>)
 8005b00:	f7fa fb86 	bl	8000210 <memchr>
 8005b04:	9a04      	ldr	r2, [sp, #16]
 8005b06:	b9d8      	cbnz	r0, 8005b40 <_vfiprintf_r+0x12c>
 8005b08:	06d1      	lsls	r1, r2, #27
 8005b0a:	bf44      	itt	mi
 8005b0c:	2320      	movmi	r3, #32
 8005b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b12:	0713      	lsls	r3, r2, #28
 8005b14:	bf44      	itt	mi
 8005b16:	232b      	movmi	r3, #43	; 0x2b
 8005b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b20:	2b2a      	cmp	r3, #42	; 0x2a
 8005b22:	d015      	beq.n	8005b50 <_vfiprintf_r+0x13c>
 8005b24:	9a07      	ldr	r2, [sp, #28]
 8005b26:	4654      	mov	r4, sl
 8005b28:	2000      	movs	r0, #0
 8005b2a:	f04f 0c0a 	mov.w	ip, #10
 8005b2e:	4621      	mov	r1, r4
 8005b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b34:	3b30      	subs	r3, #48	; 0x30
 8005b36:	2b09      	cmp	r3, #9
 8005b38:	d94e      	bls.n	8005bd8 <_vfiprintf_r+0x1c4>
 8005b3a:	b1b0      	cbz	r0, 8005b6a <_vfiprintf_r+0x156>
 8005b3c:	9207      	str	r2, [sp, #28]
 8005b3e:	e014      	b.n	8005b6a <_vfiprintf_r+0x156>
 8005b40:	eba0 0308 	sub.w	r3, r0, r8
 8005b44:	fa09 f303 	lsl.w	r3, r9, r3
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	46a2      	mov	sl, r4
 8005b4e:	e7d2      	b.n	8005af6 <_vfiprintf_r+0xe2>
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	1d19      	adds	r1, r3, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	9103      	str	r1, [sp, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bfbb      	ittet	lt
 8005b5c:	425b      	neglt	r3, r3
 8005b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b62:	9307      	strge	r3, [sp, #28]
 8005b64:	9307      	strlt	r3, [sp, #28]
 8005b66:	bfb8      	it	lt
 8005b68:	9204      	strlt	r2, [sp, #16]
 8005b6a:	7823      	ldrb	r3, [r4, #0]
 8005b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b6e:	d10c      	bne.n	8005b8a <_vfiprintf_r+0x176>
 8005b70:	7863      	ldrb	r3, [r4, #1]
 8005b72:	2b2a      	cmp	r3, #42	; 0x2a
 8005b74:	d135      	bne.n	8005be2 <_vfiprintf_r+0x1ce>
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	1d1a      	adds	r2, r3, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	9203      	str	r2, [sp, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfb8      	it	lt
 8005b82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b86:	3402      	adds	r4, #2
 8005b88:	9305      	str	r3, [sp, #20]
 8005b8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c70 <_vfiprintf_r+0x25c>
 8005b8e:	7821      	ldrb	r1, [r4, #0]
 8005b90:	2203      	movs	r2, #3
 8005b92:	4650      	mov	r0, sl
 8005b94:	f7fa fb3c 	bl	8000210 <memchr>
 8005b98:	b140      	cbz	r0, 8005bac <_vfiprintf_r+0x198>
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	eba0 000a 	sub.w	r0, r0, sl
 8005ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8005ba4:	9b04      	ldr	r3, [sp, #16]
 8005ba6:	4303      	orrs	r3, r0
 8005ba8:	3401      	adds	r4, #1
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb0:	482c      	ldr	r0, [pc, #176]	; (8005c64 <_vfiprintf_r+0x250>)
 8005bb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bb6:	2206      	movs	r2, #6
 8005bb8:	f7fa fb2a 	bl	8000210 <memchr>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d03f      	beq.n	8005c40 <_vfiprintf_r+0x22c>
 8005bc0:	4b29      	ldr	r3, [pc, #164]	; (8005c68 <_vfiprintf_r+0x254>)
 8005bc2:	bb1b      	cbnz	r3, 8005c0c <_vfiprintf_r+0x1f8>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	3307      	adds	r3, #7
 8005bc8:	f023 0307 	bic.w	r3, r3, #7
 8005bcc:	3308      	adds	r3, #8
 8005bce:	9303      	str	r3, [sp, #12]
 8005bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd2:	443b      	add	r3, r7
 8005bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd6:	e767      	b.n	8005aa8 <_vfiprintf_r+0x94>
 8005bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bdc:	460c      	mov	r4, r1
 8005bde:	2001      	movs	r0, #1
 8005be0:	e7a5      	b.n	8005b2e <_vfiprintf_r+0x11a>
 8005be2:	2300      	movs	r3, #0
 8005be4:	3401      	adds	r4, #1
 8005be6:	9305      	str	r3, [sp, #20]
 8005be8:	4619      	mov	r1, r3
 8005bea:	f04f 0c0a 	mov.w	ip, #10
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bf4:	3a30      	subs	r2, #48	; 0x30
 8005bf6:	2a09      	cmp	r2, #9
 8005bf8:	d903      	bls.n	8005c02 <_vfiprintf_r+0x1ee>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0c5      	beq.n	8005b8a <_vfiprintf_r+0x176>
 8005bfe:	9105      	str	r1, [sp, #20]
 8005c00:	e7c3      	b.n	8005b8a <_vfiprintf_r+0x176>
 8005c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c06:	4604      	mov	r4, r0
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e7f0      	b.n	8005bee <_vfiprintf_r+0x1da>
 8005c0c:	ab03      	add	r3, sp, #12
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	462a      	mov	r2, r5
 8005c12:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <_vfiprintf_r+0x258>)
 8005c14:	a904      	add	r1, sp, #16
 8005c16:	4630      	mov	r0, r6
 8005c18:	f3af 8000 	nop.w
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	1c78      	adds	r0, r7, #1
 8005c20:	d1d6      	bne.n	8005bd0 <_vfiprintf_r+0x1bc>
 8005c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c24:	07d9      	lsls	r1, r3, #31
 8005c26:	d405      	bmi.n	8005c34 <_vfiprintf_r+0x220>
 8005c28:	89ab      	ldrh	r3, [r5, #12]
 8005c2a:	059a      	lsls	r2, r3, #22
 8005c2c:	d402      	bmi.n	8005c34 <_vfiprintf_r+0x220>
 8005c2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c30:	f7ff fe31 	bl	8005896 <__retarget_lock_release_recursive>
 8005c34:	89ab      	ldrh	r3, [r5, #12]
 8005c36:	065b      	lsls	r3, r3, #25
 8005c38:	f53f af12 	bmi.w	8005a60 <_vfiprintf_r+0x4c>
 8005c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c3e:	e711      	b.n	8005a64 <_vfiprintf_r+0x50>
 8005c40:	ab03      	add	r3, sp, #12
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	462a      	mov	r2, r5
 8005c46:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <_vfiprintf_r+0x258>)
 8005c48:	a904      	add	r1, sp, #16
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f000 f880 	bl	8005d50 <_printf_i>
 8005c50:	e7e4      	b.n	8005c1c <_vfiprintf_r+0x208>
 8005c52:	bf00      	nop
 8005c54:	08006680 	.word	0x08006680
 8005c58:	080066a0 	.word	0x080066a0
 8005c5c:	08006660 	.word	0x08006660
 8005c60:	080066c0 	.word	0x080066c0
 8005c64:	080066ca 	.word	0x080066ca
 8005c68:	00000000 	.word	0x00000000
 8005c6c:	080059ef 	.word	0x080059ef
 8005c70:	080066c6 	.word	0x080066c6

08005c74 <_printf_common>:
 8005c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	4616      	mov	r6, r2
 8005c7a:	4699      	mov	r9, r3
 8005c7c:	688a      	ldr	r2, [r1, #8]
 8005c7e:	690b      	ldr	r3, [r1, #16]
 8005c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	bfb8      	it	lt
 8005c88:	4613      	movlt	r3, r2
 8005c8a:	6033      	str	r3, [r6, #0]
 8005c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c90:	4607      	mov	r7, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	b10a      	cbz	r2, 8005c9a <_printf_common+0x26>
 8005c96:	3301      	adds	r3, #1
 8005c98:	6033      	str	r3, [r6, #0]
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	0699      	lsls	r1, r3, #26
 8005c9e:	bf42      	ittt	mi
 8005ca0:	6833      	ldrmi	r3, [r6, #0]
 8005ca2:	3302      	addmi	r3, #2
 8005ca4:	6033      	strmi	r3, [r6, #0]
 8005ca6:	6825      	ldr	r5, [r4, #0]
 8005ca8:	f015 0506 	ands.w	r5, r5, #6
 8005cac:	d106      	bne.n	8005cbc <_printf_common+0x48>
 8005cae:	f104 0a19 	add.w	sl, r4, #25
 8005cb2:	68e3      	ldr	r3, [r4, #12]
 8005cb4:	6832      	ldr	r2, [r6, #0]
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	42ab      	cmp	r3, r5
 8005cba:	dc26      	bgt.n	8005d0a <_printf_common+0x96>
 8005cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc0:	1e13      	subs	r3, r2, #0
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	bf18      	it	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	0692      	lsls	r2, r2, #26
 8005cca:	d42b      	bmi.n	8005d24 <_printf_common+0xb0>
 8005ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	47c0      	blx	r8
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d01e      	beq.n	8005d18 <_printf_common+0xa4>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	68e5      	ldr	r5, [r4, #12]
 8005cde:	6832      	ldr	r2, [r6, #0]
 8005ce0:	f003 0306 	and.w	r3, r3, #6
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	bf08      	it	eq
 8005ce8:	1aad      	subeq	r5, r5, r2
 8005cea:	68a3      	ldr	r3, [r4, #8]
 8005cec:	6922      	ldr	r2, [r4, #16]
 8005cee:	bf0c      	ite	eq
 8005cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf4:	2500      	movne	r5, #0
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	bfc4      	itt	gt
 8005cfa:	1a9b      	subgt	r3, r3, r2
 8005cfc:	18ed      	addgt	r5, r5, r3
 8005cfe:	2600      	movs	r6, #0
 8005d00:	341a      	adds	r4, #26
 8005d02:	42b5      	cmp	r5, r6
 8005d04:	d11a      	bne.n	8005d3c <_printf_common+0xc8>
 8005d06:	2000      	movs	r0, #0
 8005d08:	e008      	b.n	8005d1c <_printf_common+0xa8>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	4649      	mov	r1, r9
 8005d10:	4638      	mov	r0, r7
 8005d12:	47c0      	blx	r8
 8005d14:	3001      	adds	r0, #1
 8005d16:	d103      	bne.n	8005d20 <_printf_common+0xac>
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d20:	3501      	adds	r5, #1
 8005d22:	e7c6      	b.n	8005cb2 <_printf_common+0x3e>
 8005d24:	18e1      	adds	r1, r4, r3
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	2030      	movs	r0, #48	; 0x30
 8005d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d2e:	4422      	add	r2, r4
 8005d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d38:	3302      	adds	r3, #2
 8005d3a:	e7c7      	b.n	8005ccc <_printf_common+0x58>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4622      	mov	r2, r4
 8005d40:	4649      	mov	r1, r9
 8005d42:	4638      	mov	r0, r7
 8005d44:	47c0      	blx	r8
 8005d46:	3001      	adds	r0, #1
 8005d48:	d0e6      	beq.n	8005d18 <_printf_common+0xa4>
 8005d4a:	3601      	adds	r6, #1
 8005d4c:	e7d9      	b.n	8005d02 <_printf_common+0x8e>
	...

08005d50 <_printf_i>:
 8005d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d54:	7e0f      	ldrb	r7, [r1, #24]
 8005d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d58:	2f78      	cmp	r7, #120	; 0x78
 8005d5a:	4691      	mov	r9, r2
 8005d5c:	4680      	mov	r8, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	469a      	mov	sl, r3
 8005d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d66:	d807      	bhi.n	8005d78 <_printf_i+0x28>
 8005d68:	2f62      	cmp	r7, #98	; 0x62
 8005d6a:	d80a      	bhi.n	8005d82 <_printf_i+0x32>
 8005d6c:	2f00      	cmp	r7, #0
 8005d6e:	f000 80d8 	beq.w	8005f22 <_printf_i+0x1d2>
 8005d72:	2f58      	cmp	r7, #88	; 0x58
 8005d74:	f000 80a3 	beq.w	8005ebe <_printf_i+0x16e>
 8005d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d80:	e03a      	b.n	8005df8 <_printf_i+0xa8>
 8005d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d86:	2b15      	cmp	r3, #21
 8005d88:	d8f6      	bhi.n	8005d78 <_printf_i+0x28>
 8005d8a:	a101      	add	r1, pc, #4	; (adr r1, 8005d90 <_printf_i+0x40>)
 8005d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d90:	08005de9 	.word	0x08005de9
 8005d94:	08005dfd 	.word	0x08005dfd
 8005d98:	08005d79 	.word	0x08005d79
 8005d9c:	08005d79 	.word	0x08005d79
 8005da0:	08005d79 	.word	0x08005d79
 8005da4:	08005d79 	.word	0x08005d79
 8005da8:	08005dfd 	.word	0x08005dfd
 8005dac:	08005d79 	.word	0x08005d79
 8005db0:	08005d79 	.word	0x08005d79
 8005db4:	08005d79 	.word	0x08005d79
 8005db8:	08005d79 	.word	0x08005d79
 8005dbc:	08005f09 	.word	0x08005f09
 8005dc0:	08005e2d 	.word	0x08005e2d
 8005dc4:	08005eeb 	.word	0x08005eeb
 8005dc8:	08005d79 	.word	0x08005d79
 8005dcc:	08005d79 	.word	0x08005d79
 8005dd0:	08005f2b 	.word	0x08005f2b
 8005dd4:	08005d79 	.word	0x08005d79
 8005dd8:	08005e2d 	.word	0x08005e2d
 8005ddc:	08005d79 	.word	0x08005d79
 8005de0:	08005d79 	.word	0x08005d79
 8005de4:	08005ef3 	.word	0x08005ef3
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	1d1a      	adds	r2, r3, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	602a      	str	r2, [r5, #0]
 8005df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0a3      	b.n	8005f44 <_printf_i+0x1f4>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	6829      	ldr	r1, [r5, #0]
 8005e00:	0606      	lsls	r6, r0, #24
 8005e02:	f101 0304 	add.w	r3, r1, #4
 8005e06:	d50a      	bpl.n	8005e1e <_printf_i+0xce>
 8005e08:	680e      	ldr	r6, [r1, #0]
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	2e00      	cmp	r6, #0
 8005e0e:	da03      	bge.n	8005e18 <_printf_i+0xc8>
 8005e10:	232d      	movs	r3, #45	; 0x2d
 8005e12:	4276      	negs	r6, r6
 8005e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e18:	485e      	ldr	r0, [pc, #376]	; (8005f94 <_printf_i+0x244>)
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	e019      	b.n	8005e52 <_printf_i+0x102>
 8005e1e:	680e      	ldr	r6, [r1, #0]
 8005e20:	602b      	str	r3, [r5, #0]
 8005e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e26:	bf18      	it	ne
 8005e28:	b236      	sxthne	r6, r6
 8005e2a:	e7ef      	b.n	8005e0c <_printf_i+0xbc>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	6820      	ldr	r0, [r4, #0]
 8005e30:	1d19      	adds	r1, r3, #4
 8005e32:	6029      	str	r1, [r5, #0]
 8005e34:	0601      	lsls	r1, r0, #24
 8005e36:	d501      	bpl.n	8005e3c <_printf_i+0xec>
 8005e38:	681e      	ldr	r6, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <_printf_i+0xf2>
 8005e3c:	0646      	lsls	r6, r0, #25
 8005e3e:	d5fb      	bpl.n	8005e38 <_printf_i+0xe8>
 8005e40:	881e      	ldrh	r6, [r3, #0]
 8005e42:	4854      	ldr	r0, [pc, #336]	; (8005f94 <_printf_i+0x244>)
 8005e44:	2f6f      	cmp	r7, #111	; 0x6f
 8005e46:	bf0c      	ite	eq
 8005e48:	2308      	moveq	r3, #8
 8005e4a:	230a      	movne	r3, #10
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e52:	6865      	ldr	r5, [r4, #4]
 8005e54:	60a5      	str	r5, [r4, #8]
 8005e56:	2d00      	cmp	r5, #0
 8005e58:	bfa2      	ittt	ge
 8005e5a:	6821      	ldrge	r1, [r4, #0]
 8005e5c:	f021 0104 	bicge.w	r1, r1, #4
 8005e60:	6021      	strge	r1, [r4, #0]
 8005e62:	b90e      	cbnz	r6, 8005e68 <_printf_i+0x118>
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	d04d      	beq.n	8005f04 <_printf_i+0x1b4>
 8005e68:	4615      	mov	r5, r2
 8005e6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e72:	5dc7      	ldrb	r7, [r0, r7]
 8005e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e78:	4637      	mov	r7, r6
 8005e7a:	42bb      	cmp	r3, r7
 8005e7c:	460e      	mov	r6, r1
 8005e7e:	d9f4      	bls.n	8005e6a <_printf_i+0x11a>
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d10b      	bne.n	8005e9c <_printf_i+0x14c>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	07de      	lsls	r6, r3, #31
 8005e88:	d508      	bpl.n	8005e9c <_printf_i+0x14c>
 8005e8a:	6923      	ldr	r3, [r4, #16]
 8005e8c:	6861      	ldr	r1, [r4, #4]
 8005e8e:	4299      	cmp	r1, r3
 8005e90:	bfde      	ittt	le
 8005e92:	2330      	movle	r3, #48	; 0x30
 8005e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e9c:	1b52      	subs	r2, r2, r5
 8005e9e:	6122      	str	r2, [r4, #16]
 8005ea0:	f8cd a000 	str.w	sl, [sp]
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	aa03      	add	r2, sp, #12
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4640      	mov	r0, r8
 8005eac:	f7ff fee2 	bl	8005c74 <_printf_common>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d14c      	bne.n	8005f4e <_printf_i+0x1fe>
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eb8:	b004      	add	sp, #16
 8005eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebe:	4835      	ldr	r0, [pc, #212]	; (8005f94 <_printf_i+0x244>)
 8005ec0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ec4:	6829      	ldr	r1, [r5, #0]
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ecc:	6029      	str	r1, [r5, #0]
 8005ece:	061d      	lsls	r5, r3, #24
 8005ed0:	d514      	bpl.n	8005efc <_printf_i+0x1ac>
 8005ed2:	07df      	lsls	r7, r3, #31
 8005ed4:	bf44      	itt	mi
 8005ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8005eda:	6023      	strmi	r3, [r4, #0]
 8005edc:	b91e      	cbnz	r6, 8005ee6 <_printf_i+0x196>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f023 0320 	bic.w	r3, r3, #32
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	2310      	movs	r3, #16
 8005ee8:	e7b0      	b.n	8005e4c <_printf_i+0xfc>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	f043 0320 	orr.w	r3, r3, #32
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	2378      	movs	r3, #120	; 0x78
 8005ef4:	4828      	ldr	r0, [pc, #160]	; (8005f98 <_printf_i+0x248>)
 8005ef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005efa:	e7e3      	b.n	8005ec4 <_printf_i+0x174>
 8005efc:	0659      	lsls	r1, r3, #25
 8005efe:	bf48      	it	mi
 8005f00:	b2b6      	uxthmi	r6, r6
 8005f02:	e7e6      	b.n	8005ed2 <_printf_i+0x182>
 8005f04:	4615      	mov	r5, r2
 8005f06:	e7bb      	b.n	8005e80 <_printf_i+0x130>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	6826      	ldr	r6, [r4, #0]
 8005f0c:	6961      	ldr	r1, [r4, #20]
 8005f0e:	1d18      	adds	r0, r3, #4
 8005f10:	6028      	str	r0, [r5, #0]
 8005f12:	0635      	lsls	r5, r6, #24
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	d501      	bpl.n	8005f1c <_printf_i+0x1cc>
 8005f18:	6019      	str	r1, [r3, #0]
 8005f1a:	e002      	b.n	8005f22 <_printf_i+0x1d2>
 8005f1c:	0670      	lsls	r0, r6, #25
 8005f1e:	d5fb      	bpl.n	8005f18 <_printf_i+0x1c8>
 8005f20:	8019      	strh	r1, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	4615      	mov	r5, r2
 8005f28:	e7ba      	b.n	8005ea0 <_printf_i+0x150>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	602a      	str	r2, [r5, #0]
 8005f30:	681d      	ldr	r5, [r3, #0]
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	2100      	movs	r1, #0
 8005f36:	4628      	mov	r0, r5
 8005f38:	f7fa f96a 	bl	8000210 <memchr>
 8005f3c:	b108      	cbz	r0, 8005f42 <_printf_i+0x1f2>
 8005f3e:	1b40      	subs	r0, r0, r5
 8005f40:	6060      	str	r0, [r4, #4]
 8005f42:	6863      	ldr	r3, [r4, #4]
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	2300      	movs	r3, #0
 8005f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4c:	e7a8      	b.n	8005ea0 <_printf_i+0x150>
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	462a      	mov	r2, r5
 8005f52:	4649      	mov	r1, r9
 8005f54:	4640      	mov	r0, r8
 8005f56:	47d0      	blx	sl
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d0ab      	beq.n	8005eb4 <_printf_i+0x164>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	079b      	lsls	r3, r3, #30
 8005f60:	d413      	bmi.n	8005f8a <_printf_i+0x23a>
 8005f62:	68e0      	ldr	r0, [r4, #12]
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	4298      	cmp	r0, r3
 8005f68:	bfb8      	it	lt
 8005f6a:	4618      	movlt	r0, r3
 8005f6c:	e7a4      	b.n	8005eb8 <_printf_i+0x168>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4632      	mov	r2, r6
 8005f72:	4649      	mov	r1, r9
 8005f74:	4640      	mov	r0, r8
 8005f76:	47d0      	blx	sl
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d09b      	beq.n	8005eb4 <_printf_i+0x164>
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	68e3      	ldr	r3, [r4, #12]
 8005f80:	9903      	ldr	r1, [sp, #12]
 8005f82:	1a5b      	subs	r3, r3, r1
 8005f84:	42ab      	cmp	r3, r5
 8005f86:	dcf2      	bgt.n	8005f6e <_printf_i+0x21e>
 8005f88:	e7eb      	b.n	8005f62 <_printf_i+0x212>
 8005f8a:	2500      	movs	r5, #0
 8005f8c:	f104 0619 	add.w	r6, r4, #25
 8005f90:	e7f5      	b.n	8005f7e <_printf_i+0x22e>
 8005f92:	bf00      	nop
 8005f94:	080066d1 	.word	0x080066d1
 8005f98:	080066e2 	.word	0x080066e2

08005f9c <_sbrk_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4d06      	ldr	r5, [pc, #24]	; (8005fb8 <_sbrk_r+0x1c>)
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4608      	mov	r0, r1
 8005fa6:	602b      	str	r3, [r5, #0]
 8005fa8:	f7fb f87a 	bl	80010a0 <_sbrk>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d102      	bne.n	8005fb6 <_sbrk_r+0x1a>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b103      	cbz	r3, 8005fb6 <_sbrk_r+0x1a>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	200011c8 	.word	0x200011c8

08005fbc <__sread>:
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc4:	f000 fab2 	bl	800652c <_read_r>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	bfab      	itete	ge
 8005fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fce:	89a3      	ldrhlt	r3, [r4, #12]
 8005fd0:	181b      	addge	r3, r3, r0
 8005fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fd6:	bfac      	ite	ge
 8005fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fda:	81a3      	strhlt	r3, [r4, #12]
 8005fdc:	bd10      	pop	{r4, pc}

08005fde <__swrite>:
 8005fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe2:	461f      	mov	r7, r3
 8005fe4:	898b      	ldrh	r3, [r1, #12]
 8005fe6:	05db      	lsls	r3, r3, #23
 8005fe8:	4605      	mov	r5, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	4616      	mov	r6, r2
 8005fee:	d505      	bpl.n	8005ffc <__swrite+0x1e>
 8005ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f000 f9c8 	bl	800638c <_lseek_r>
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006006:	81a3      	strh	r3, [r4, #12]
 8006008:	4632      	mov	r2, r6
 800600a:	463b      	mov	r3, r7
 800600c:	4628      	mov	r0, r5
 800600e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006012:	f000 b869 	b.w	80060e8 <_write_r>

08006016 <__sseek>:
 8006016:	b510      	push	{r4, lr}
 8006018:	460c      	mov	r4, r1
 800601a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800601e:	f000 f9b5 	bl	800638c <_lseek_r>
 8006022:	1c43      	adds	r3, r0, #1
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	bf15      	itete	ne
 8006028:	6560      	strne	r0, [r4, #84]	; 0x54
 800602a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800602e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006032:	81a3      	strheq	r3, [r4, #12]
 8006034:	bf18      	it	ne
 8006036:	81a3      	strhne	r3, [r4, #12]
 8006038:	bd10      	pop	{r4, pc}

0800603a <__sclose>:
 800603a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603e:	f000 b8d3 	b.w	80061e8 <_close_r>
	...

08006044 <__swbuf_r>:
 8006044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006046:	460e      	mov	r6, r1
 8006048:	4614      	mov	r4, r2
 800604a:	4605      	mov	r5, r0
 800604c:	b118      	cbz	r0, 8006056 <__swbuf_r+0x12>
 800604e:	6983      	ldr	r3, [r0, #24]
 8006050:	b90b      	cbnz	r3, 8006056 <__swbuf_r+0x12>
 8006052:	f7ff fb81 	bl	8005758 <__sinit>
 8006056:	4b21      	ldr	r3, [pc, #132]	; (80060dc <__swbuf_r+0x98>)
 8006058:	429c      	cmp	r4, r3
 800605a:	d12b      	bne.n	80060b4 <__swbuf_r+0x70>
 800605c:	686c      	ldr	r4, [r5, #4]
 800605e:	69a3      	ldr	r3, [r4, #24]
 8006060:	60a3      	str	r3, [r4, #8]
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	071a      	lsls	r2, r3, #28
 8006066:	d52f      	bpl.n	80060c8 <__swbuf_r+0x84>
 8006068:	6923      	ldr	r3, [r4, #16]
 800606a:	b36b      	cbz	r3, 80060c8 <__swbuf_r+0x84>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	6820      	ldr	r0, [r4, #0]
 8006070:	1ac0      	subs	r0, r0, r3
 8006072:	6963      	ldr	r3, [r4, #20]
 8006074:	b2f6      	uxtb	r6, r6
 8006076:	4283      	cmp	r3, r0
 8006078:	4637      	mov	r7, r6
 800607a:	dc04      	bgt.n	8006086 <__swbuf_r+0x42>
 800607c:	4621      	mov	r1, r4
 800607e:	4628      	mov	r0, r5
 8006080:	f000 f948 	bl	8006314 <_fflush_r>
 8006084:	bb30      	cbnz	r0, 80060d4 <__swbuf_r+0x90>
 8006086:	68a3      	ldr	r3, [r4, #8]
 8006088:	3b01      	subs	r3, #1
 800608a:	60a3      	str	r3, [r4, #8]
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	6022      	str	r2, [r4, #0]
 8006092:	701e      	strb	r6, [r3, #0]
 8006094:	6963      	ldr	r3, [r4, #20]
 8006096:	3001      	adds	r0, #1
 8006098:	4283      	cmp	r3, r0
 800609a:	d004      	beq.n	80060a6 <__swbuf_r+0x62>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	07db      	lsls	r3, r3, #31
 80060a0:	d506      	bpl.n	80060b0 <__swbuf_r+0x6c>
 80060a2:	2e0a      	cmp	r6, #10
 80060a4:	d104      	bne.n	80060b0 <__swbuf_r+0x6c>
 80060a6:	4621      	mov	r1, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 f933 	bl	8006314 <_fflush_r>
 80060ae:	b988      	cbnz	r0, 80060d4 <__swbuf_r+0x90>
 80060b0:	4638      	mov	r0, r7
 80060b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <__swbuf_r+0x9c>)
 80060b6:	429c      	cmp	r4, r3
 80060b8:	d101      	bne.n	80060be <__swbuf_r+0x7a>
 80060ba:	68ac      	ldr	r4, [r5, #8]
 80060bc:	e7cf      	b.n	800605e <__swbuf_r+0x1a>
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <__swbuf_r+0xa0>)
 80060c0:	429c      	cmp	r4, r3
 80060c2:	bf08      	it	eq
 80060c4:	68ec      	ldreq	r4, [r5, #12]
 80060c6:	e7ca      	b.n	800605e <__swbuf_r+0x1a>
 80060c8:	4621      	mov	r1, r4
 80060ca:	4628      	mov	r0, r5
 80060cc:	f000 f81e 	bl	800610c <__swsetup_r>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d0cb      	beq.n	800606c <__swbuf_r+0x28>
 80060d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80060d8:	e7ea      	b.n	80060b0 <__swbuf_r+0x6c>
 80060da:	bf00      	nop
 80060dc:	08006680 	.word	0x08006680
 80060e0:	080066a0 	.word	0x080066a0
 80060e4:	08006660 	.word	0x08006660

080060e8 <_write_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d07      	ldr	r5, [pc, #28]	; (8006108 <_write_r+0x20>)
 80060ec:	4604      	mov	r4, r0
 80060ee:	4608      	mov	r0, r1
 80060f0:	4611      	mov	r1, r2
 80060f2:	2200      	movs	r2, #0
 80060f4:	602a      	str	r2, [r5, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f7fa fbdc 	bl	80008b4 <_write>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_write_r+0x1e>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_write_r+0x1e>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	200011c8 	.word	0x200011c8

0800610c <__swsetup_r>:
 800610c:	4b32      	ldr	r3, [pc, #200]	; (80061d8 <__swsetup_r+0xcc>)
 800610e:	b570      	push	{r4, r5, r6, lr}
 8006110:	681d      	ldr	r5, [r3, #0]
 8006112:	4606      	mov	r6, r0
 8006114:	460c      	mov	r4, r1
 8006116:	b125      	cbz	r5, 8006122 <__swsetup_r+0x16>
 8006118:	69ab      	ldr	r3, [r5, #24]
 800611a:	b913      	cbnz	r3, 8006122 <__swsetup_r+0x16>
 800611c:	4628      	mov	r0, r5
 800611e:	f7ff fb1b 	bl	8005758 <__sinit>
 8006122:	4b2e      	ldr	r3, [pc, #184]	; (80061dc <__swsetup_r+0xd0>)
 8006124:	429c      	cmp	r4, r3
 8006126:	d10f      	bne.n	8006148 <__swsetup_r+0x3c>
 8006128:	686c      	ldr	r4, [r5, #4]
 800612a:	89a3      	ldrh	r3, [r4, #12]
 800612c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006130:	0719      	lsls	r1, r3, #28
 8006132:	d42c      	bmi.n	800618e <__swsetup_r+0x82>
 8006134:	06dd      	lsls	r5, r3, #27
 8006136:	d411      	bmi.n	800615c <__swsetup_r+0x50>
 8006138:	2309      	movs	r3, #9
 800613a:	6033      	str	r3, [r6, #0]
 800613c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006140:	81a3      	strh	r3, [r4, #12]
 8006142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006146:	e03e      	b.n	80061c6 <__swsetup_r+0xba>
 8006148:	4b25      	ldr	r3, [pc, #148]	; (80061e0 <__swsetup_r+0xd4>)
 800614a:	429c      	cmp	r4, r3
 800614c:	d101      	bne.n	8006152 <__swsetup_r+0x46>
 800614e:	68ac      	ldr	r4, [r5, #8]
 8006150:	e7eb      	b.n	800612a <__swsetup_r+0x1e>
 8006152:	4b24      	ldr	r3, [pc, #144]	; (80061e4 <__swsetup_r+0xd8>)
 8006154:	429c      	cmp	r4, r3
 8006156:	bf08      	it	eq
 8006158:	68ec      	ldreq	r4, [r5, #12]
 800615a:	e7e6      	b.n	800612a <__swsetup_r+0x1e>
 800615c:	0758      	lsls	r0, r3, #29
 800615e:	d512      	bpl.n	8006186 <__swsetup_r+0x7a>
 8006160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006162:	b141      	cbz	r1, 8006176 <__swsetup_r+0x6a>
 8006164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006168:	4299      	cmp	r1, r3
 800616a:	d002      	beq.n	8006172 <__swsetup_r+0x66>
 800616c:	4630      	mov	r0, r6
 800616e:	f000 f991 	bl	8006494 <_free_r>
 8006172:	2300      	movs	r3, #0
 8006174:	6363      	str	r3, [r4, #52]	; 0x34
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	2300      	movs	r3, #0
 8006180:	6063      	str	r3, [r4, #4]
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	f043 0308 	orr.w	r3, r3, #8
 800618c:	81a3      	strh	r3, [r4, #12]
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	b94b      	cbnz	r3, 80061a6 <__swsetup_r+0x9a>
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619c:	d003      	beq.n	80061a6 <__swsetup_r+0x9a>
 800619e:	4621      	mov	r1, r4
 80061a0:	4630      	mov	r0, r6
 80061a2:	f000 f92b 	bl	80063fc <__smakebuf_r>
 80061a6:	89a0      	ldrh	r0, [r4, #12]
 80061a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061ac:	f010 0301 	ands.w	r3, r0, #1
 80061b0:	d00a      	beq.n	80061c8 <__swsetup_r+0xbc>
 80061b2:	2300      	movs	r3, #0
 80061b4:	60a3      	str	r3, [r4, #8]
 80061b6:	6963      	ldr	r3, [r4, #20]
 80061b8:	425b      	negs	r3, r3
 80061ba:	61a3      	str	r3, [r4, #24]
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	b943      	cbnz	r3, 80061d2 <__swsetup_r+0xc6>
 80061c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061c4:	d1ba      	bne.n	800613c <__swsetup_r+0x30>
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	0781      	lsls	r1, r0, #30
 80061ca:	bf58      	it	pl
 80061cc:	6963      	ldrpl	r3, [r4, #20]
 80061ce:	60a3      	str	r3, [r4, #8]
 80061d0:	e7f4      	b.n	80061bc <__swsetup_r+0xb0>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e7f7      	b.n	80061c6 <__swsetup_r+0xba>
 80061d6:	bf00      	nop
 80061d8:	2000000c 	.word	0x2000000c
 80061dc:	08006680 	.word	0x08006680
 80061e0:	080066a0 	.word	0x080066a0
 80061e4:	08006660 	.word	0x08006660

080061e8 <_close_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d06      	ldr	r5, [pc, #24]	; (8006204 <_close_r+0x1c>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	f7fa ff1f 	bl	8001036 <_close>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_close_r+0x1a>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_close_r+0x1a>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	200011c8 	.word	0x200011c8

08006208 <__sflush_r>:
 8006208:	898a      	ldrh	r2, [r1, #12]
 800620a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620e:	4605      	mov	r5, r0
 8006210:	0710      	lsls	r0, r2, #28
 8006212:	460c      	mov	r4, r1
 8006214:	d458      	bmi.n	80062c8 <__sflush_r+0xc0>
 8006216:	684b      	ldr	r3, [r1, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	dc05      	bgt.n	8006228 <__sflush_r+0x20>
 800621c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	dc02      	bgt.n	8006228 <__sflush_r+0x20>
 8006222:	2000      	movs	r0, #0
 8006224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800622a:	2e00      	cmp	r6, #0
 800622c:	d0f9      	beq.n	8006222 <__sflush_r+0x1a>
 800622e:	2300      	movs	r3, #0
 8006230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006234:	682f      	ldr	r7, [r5, #0]
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	d032      	beq.n	80062a0 <__sflush_r+0x98>
 800623a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	075a      	lsls	r2, r3, #29
 8006240:	d505      	bpl.n	800624e <__sflush_r+0x46>
 8006242:	6863      	ldr	r3, [r4, #4]
 8006244:	1ac0      	subs	r0, r0, r3
 8006246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006248:	b10b      	cbz	r3, 800624e <__sflush_r+0x46>
 800624a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800624c:	1ac0      	subs	r0, r0, r3
 800624e:	2300      	movs	r3, #0
 8006250:	4602      	mov	r2, r0
 8006252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006254:	6a21      	ldr	r1, [r4, #32]
 8006256:	4628      	mov	r0, r5
 8006258:	47b0      	blx	r6
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	d106      	bne.n	800626e <__sflush_r+0x66>
 8006260:	6829      	ldr	r1, [r5, #0]
 8006262:	291d      	cmp	r1, #29
 8006264:	d82c      	bhi.n	80062c0 <__sflush_r+0xb8>
 8006266:	4a2a      	ldr	r2, [pc, #168]	; (8006310 <__sflush_r+0x108>)
 8006268:	40ca      	lsrs	r2, r1
 800626a:	07d6      	lsls	r6, r2, #31
 800626c:	d528      	bpl.n	80062c0 <__sflush_r+0xb8>
 800626e:	2200      	movs	r2, #0
 8006270:	6062      	str	r2, [r4, #4]
 8006272:	04d9      	lsls	r1, r3, #19
 8006274:	6922      	ldr	r2, [r4, #16]
 8006276:	6022      	str	r2, [r4, #0]
 8006278:	d504      	bpl.n	8006284 <__sflush_r+0x7c>
 800627a:	1c42      	adds	r2, r0, #1
 800627c:	d101      	bne.n	8006282 <__sflush_r+0x7a>
 800627e:	682b      	ldr	r3, [r5, #0]
 8006280:	b903      	cbnz	r3, 8006284 <__sflush_r+0x7c>
 8006282:	6560      	str	r0, [r4, #84]	; 0x54
 8006284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006286:	602f      	str	r7, [r5, #0]
 8006288:	2900      	cmp	r1, #0
 800628a:	d0ca      	beq.n	8006222 <__sflush_r+0x1a>
 800628c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006290:	4299      	cmp	r1, r3
 8006292:	d002      	beq.n	800629a <__sflush_r+0x92>
 8006294:	4628      	mov	r0, r5
 8006296:	f000 f8fd 	bl	8006494 <_free_r>
 800629a:	2000      	movs	r0, #0
 800629c:	6360      	str	r0, [r4, #52]	; 0x34
 800629e:	e7c1      	b.n	8006224 <__sflush_r+0x1c>
 80062a0:	6a21      	ldr	r1, [r4, #32]
 80062a2:	2301      	movs	r3, #1
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b0      	blx	r6
 80062a8:	1c41      	adds	r1, r0, #1
 80062aa:	d1c7      	bne.n	800623c <__sflush_r+0x34>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0c4      	beq.n	800623c <__sflush_r+0x34>
 80062b2:	2b1d      	cmp	r3, #29
 80062b4:	d001      	beq.n	80062ba <__sflush_r+0xb2>
 80062b6:	2b16      	cmp	r3, #22
 80062b8:	d101      	bne.n	80062be <__sflush_r+0xb6>
 80062ba:	602f      	str	r7, [r5, #0]
 80062bc:	e7b1      	b.n	8006222 <__sflush_r+0x1a>
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062c4:	81a3      	strh	r3, [r4, #12]
 80062c6:	e7ad      	b.n	8006224 <__sflush_r+0x1c>
 80062c8:	690f      	ldr	r7, [r1, #16]
 80062ca:	2f00      	cmp	r7, #0
 80062cc:	d0a9      	beq.n	8006222 <__sflush_r+0x1a>
 80062ce:	0793      	lsls	r3, r2, #30
 80062d0:	680e      	ldr	r6, [r1, #0]
 80062d2:	bf08      	it	eq
 80062d4:	694b      	ldreq	r3, [r1, #20]
 80062d6:	600f      	str	r7, [r1, #0]
 80062d8:	bf18      	it	ne
 80062da:	2300      	movne	r3, #0
 80062dc:	eba6 0807 	sub.w	r8, r6, r7
 80062e0:	608b      	str	r3, [r1, #8]
 80062e2:	f1b8 0f00 	cmp.w	r8, #0
 80062e6:	dd9c      	ble.n	8006222 <__sflush_r+0x1a>
 80062e8:	6a21      	ldr	r1, [r4, #32]
 80062ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062ec:	4643      	mov	r3, r8
 80062ee:	463a      	mov	r2, r7
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b0      	blx	r6
 80062f4:	2800      	cmp	r0, #0
 80062f6:	dc06      	bgt.n	8006306 <__sflush_r+0xfe>
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062fe:	81a3      	strh	r3, [r4, #12]
 8006300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006304:	e78e      	b.n	8006224 <__sflush_r+0x1c>
 8006306:	4407      	add	r7, r0
 8006308:	eba8 0800 	sub.w	r8, r8, r0
 800630c:	e7e9      	b.n	80062e2 <__sflush_r+0xda>
 800630e:	bf00      	nop
 8006310:	20400001 	.word	0x20400001

08006314 <_fflush_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	690b      	ldr	r3, [r1, #16]
 8006318:	4605      	mov	r5, r0
 800631a:	460c      	mov	r4, r1
 800631c:	b913      	cbnz	r3, 8006324 <_fflush_r+0x10>
 800631e:	2500      	movs	r5, #0
 8006320:	4628      	mov	r0, r5
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	b118      	cbz	r0, 800632e <_fflush_r+0x1a>
 8006326:	6983      	ldr	r3, [r0, #24]
 8006328:	b90b      	cbnz	r3, 800632e <_fflush_r+0x1a>
 800632a:	f7ff fa15 	bl	8005758 <__sinit>
 800632e:	4b14      	ldr	r3, [pc, #80]	; (8006380 <_fflush_r+0x6c>)
 8006330:	429c      	cmp	r4, r3
 8006332:	d11b      	bne.n	800636c <_fflush_r+0x58>
 8006334:	686c      	ldr	r4, [r5, #4]
 8006336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0ef      	beq.n	800631e <_fflush_r+0xa>
 800633e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006340:	07d0      	lsls	r0, r2, #31
 8006342:	d404      	bmi.n	800634e <_fflush_r+0x3a>
 8006344:	0599      	lsls	r1, r3, #22
 8006346:	d402      	bmi.n	800634e <_fflush_r+0x3a>
 8006348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800634a:	f7ff faa3 	bl	8005894 <__retarget_lock_acquire_recursive>
 800634e:	4628      	mov	r0, r5
 8006350:	4621      	mov	r1, r4
 8006352:	f7ff ff59 	bl	8006208 <__sflush_r>
 8006356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006358:	07da      	lsls	r2, r3, #31
 800635a:	4605      	mov	r5, r0
 800635c:	d4e0      	bmi.n	8006320 <_fflush_r+0xc>
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	059b      	lsls	r3, r3, #22
 8006362:	d4dd      	bmi.n	8006320 <_fflush_r+0xc>
 8006364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006366:	f7ff fa96 	bl	8005896 <__retarget_lock_release_recursive>
 800636a:	e7d9      	b.n	8006320 <_fflush_r+0xc>
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <_fflush_r+0x70>)
 800636e:	429c      	cmp	r4, r3
 8006370:	d101      	bne.n	8006376 <_fflush_r+0x62>
 8006372:	68ac      	ldr	r4, [r5, #8]
 8006374:	e7df      	b.n	8006336 <_fflush_r+0x22>
 8006376:	4b04      	ldr	r3, [pc, #16]	; (8006388 <_fflush_r+0x74>)
 8006378:	429c      	cmp	r4, r3
 800637a:	bf08      	it	eq
 800637c:	68ec      	ldreq	r4, [r5, #12]
 800637e:	e7da      	b.n	8006336 <_fflush_r+0x22>
 8006380:	08006680 	.word	0x08006680
 8006384:	080066a0 	.word	0x080066a0
 8006388:	08006660 	.word	0x08006660

0800638c <_lseek_r>:
 800638c:	b538      	push	{r3, r4, r5, lr}
 800638e:	4d07      	ldr	r5, [pc, #28]	; (80063ac <_lseek_r+0x20>)
 8006390:	4604      	mov	r4, r0
 8006392:	4608      	mov	r0, r1
 8006394:	4611      	mov	r1, r2
 8006396:	2200      	movs	r2, #0
 8006398:	602a      	str	r2, [r5, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	f7fa fe72 	bl	8001084 <_lseek>
 80063a0:	1c43      	adds	r3, r0, #1
 80063a2:	d102      	bne.n	80063aa <_lseek_r+0x1e>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	b103      	cbz	r3, 80063aa <_lseek_r+0x1e>
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	200011c8 	.word	0x200011c8

080063b0 <__swhatbuf_r>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	460e      	mov	r6, r1
 80063b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b8:	2900      	cmp	r1, #0
 80063ba:	b096      	sub	sp, #88	; 0x58
 80063bc:	4614      	mov	r4, r2
 80063be:	461d      	mov	r5, r3
 80063c0:	da08      	bge.n	80063d4 <__swhatbuf_r+0x24>
 80063c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	602a      	str	r2, [r5, #0]
 80063ca:	061a      	lsls	r2, r3, #24
 80063cc:	d410      	bmi.n	80063f0 <__swhatbuf_r+0x40>
 80063ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d2:	e00e      	b.n	80063f2 <__swhatbuf_r+0x42>
 80063d4:	466a      	mov	r2, sp
 80063d6:	f000 f8bb 	bl	8006550 <_fstat_r>
 80063da:	2800      	cmp	r0, #0
 80063dc:	dbf1      	blt.n	80063c2 <__swhatbuf_r+0x12>
 80063de:	9a01      	ldr	r2, [sp, #4]
 80063e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80063e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80063e8:	425a      	negs	r2, r3
 80063ea:	415a      	adcs	r2, r3
 80063ec:	602a      	str	r2, [r5, #0]
 80063ee:	e7ee      	b.n	80063ce <__swhatbuf_r+0x1e>
 80063f0:	2340      	movs	r3, #64	; 0x40
 80063f2:	2000      	movs	r0, #0
 80063f4:	6023      	str	r3, [r4, #0]
 80063f6:	b016      	add	sp, #88	; 0x58
 80063f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080063fc <__smakebuf_r>:
 80063fc:	898b      	ldrh	r3, [r1, #12]
 80063fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006400:	079d      	lsls	r5, r3, #30
 8006402:	4606      	mov	r6, r0
 8006404:	460c      	mov	r4, r1
 8006406:	d507      	bpl.n	8006418 <__smakebuf_r+0x1c>
 8006408:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	2301      	movs	r3, #1
 8006412:	6163      	str	r3, [r4, #20]
 8006414:	b002      	add	sp, #8
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	ab01      	add	r3, sp, #4
 800641a:	466a      	mov	r2, sp
 800641c:	f7ff ffc8 	bl	80063b0 <__swhatbuf_r>
 8006420:	9900      	ldr	r1, [sp, #0]
 8006422:	4605      	mov	r5, r0
 8006424:	4630      	mov	r0, r6
 8006426:	f7ff fa57 	bl	80058d8 <_malloc_r>
 800642a:	b948      	cbnz	r0, 8006440 <__smakebuf_r+0x44>
 800642c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006430:	059a      	lsls	r2, r3, #22
 8006432:	d4ef      	bmi.n	8006414 <__smakebuf_r+0x18>
 8006434:	f023 0303 	bic.w	r3, r3, #3
 8006438:	f043 0302 	orr.w	r3, r3, #2
 800643c:	81a3      	strh	r3, [r4, #12]
 800643e:	e7e3      	b.n	8006408 <__smakebuf_r+0xc>
 8006440:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <__smakebuf_r+0x7c>)
 8006442:	62b3      	str	r3, [r6, #40]	; 0x28
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	6020      	str	r0, [r4, #0]
 8006448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644c:	81a3      	strh	r3, [r4, #12]
 800644e:	9b00      	ldr	r3, [sp, #0]
 8006450:	6163      	str	r3, [r4, #20]
 8006452:	9b01      	ldr	r3, [sp, #4]
 8006454:	6120      	str	r0, [r4, #16]
 8006456:	b15b      	cbz	r3, 8006470 <__smakebuf_r+0x74>
 8006458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800645c:	4630      	mov	r0, r6
 800645e:	f000 f889 	bl	8006574 <_isatty_r>
 8006462:	b128      	cbz	r0, 8006470 <__smakebuf_r+0x74>
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	81a3      	strh	r3, [r4, #12]
 8006470:	89a0      	ldrh	r0, [r4, #12]
 8006472:	4305      	orrs	r5, r0
 8006474:	81a5      	strh	r5, [r4, #12]
 8006476:	e7cd      	b.n	8006414 <__smakebuf_r+0x18>
 8006478:	080056f1 	.word	0x080056f1

0800647c <__malloc_lock>:
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <__malloc_lock+0x8>)
 800647e:	f7ff ba09 	b.w	8005894 <__retarget_lock_acquire_recursive>
 8006482:	bf00      	nop
 8006484:	200011bc 	.word	0x200011bc

08006488 <__malloc_unlock>:
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <__malloc_unlock+0x8>)
 800648a:	f7ff ba04 	b.w	8005896 <__retarget_lock_release_recursive>
 800648e:	bf00      	nop
 8006490:	200011bc 	.word	0x200011bc

08006494 <_free_r>:
 8006494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006496:	2900      	cmp	r1, #0
 8006498:	d044      	beq.n	8006524 <_free_r+0x90>
 800649a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800649e:	9001      	str	r0, [sp, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f1a1 0404 	sub.w	r4, r1, #4
 80064a6:	bfb8      	it	lt
 80064a8:	18e4      	addlt	r4, r4, r3
 80064aa:	f7ff ffe7 	bl	800647c <__malloc_lock>
 80064ae:	4a1e      	ldr	r2, [pc, #120]	; (8006528 <_free_r+0x94>)
 80064b0:	9801      	ldr	r0, [sp, #4]
 80064b2:	6813      	ldr	r3, [r2, #0]
 80064b4:	b933      	cbnz	r3, 80064c4 <_free_r+0x30>
 80064b6:	6063      	str	r3, [r4, #4]
 80064b8:	6014      	str	r4, [r2, #0]
 80064ba:	b003      	add	sp, #12
 80064bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064c0:	f7ff bfe2 	b.w	8006488 <__malloc_unlock>
 80064c4:	42a3      	cmp	r3, r4
 80064c6:	d908      	bls.n	80064da <_free_r+0x46>
 80064c8:	6825      	ldr	r5, [r4, #0]
 80064ca:	1961      	adds	r1, r4, r5
 80064cc:	428b      	cmp	r3, r1
 80064ce:	bf01      	itttt	eq
 80064d0:	6819      	ldreq	r1, [r3, #0]
 80064d2:	685b      	ldreq	r3, [r3, #4]
 80064d4:	1949      	addeq	r1, r1, r5
 80064d6:	6021      	streq	r1, [r4, #0]
 80064d8:	e7ed      	b.n	80064b6 <_free_r+0x22>
 80064da:	461a      	mov	r2, r3
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	b10b      	cbz	r3, 80064e4 <_free_r+0x50>
 80064e0:	42a3      	cmp	r3, r4
 80064e2:	d9fa      	bls.n	80064da <_free_r+0x46>
 80064e4:	6811      	ldr	r1, [r2, #0]
 80064e6:	1855      	adds	r5, r2, r1
 80064e8:	42a5      	cmp	r5, r4
 80064ea:	d10b      	bne.n	8006504 <_free_r+0x70>
 80064ec:	6824      	ldr	r4, [r4, #0]
 80064ee:	4421      	add	r1, r4
 80064f0:	1854      	adds	r4, r2, r1
 80064f2:	42a3      	cmp	r3, r4
 80064f4:	6011      	str	r1, [r2, #0]
 80064f6:	d1e0      	bne.n	80064ba <_free_r+0x26>
 80064f8:	681c      	ldr	r4, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	6053      	str	r3, [r2, #4]
 80064fe:	4421      	add	r1, r4
 8006500:	6011      	str	r1, [r2, #0]
 8006502:	e7da      	b.n	80064ba <_free_r+0x26>
 8006504:	d902      	bls.n	800650c <_free_r+0x78>
 8006506:	230c      	movs	r3, #12
 8006508:	6003      	str	r3, [r0, #0]
 800650a:	e7d6      	b.n	80064ba <_free_r+0x26>
 800650c:	6825      	ldr	r5, [r4, #0]
 800650e:	1961      	adds	r1, r4, r5
 8006510:	428b      	cmp	r3, r1
 8006512:	bf04      	itt	eq
 8006514:	6819      	ldreq	r1, [r3, #0]
 8006516:	685b      	ldreq	r3, [r3, #4]
 8006518:	6063      	str	r3, [r4, #4]
 800651a:	bf04      	itt	eq
 800651c:	1949      	addeq	r1, r1, r5
 800651e:	6021      	streq	r1, [r4, #0]
 8006520:	6054      	str	r4, [r2, #4]
 8006522:	e7ca      	b.n	80064ba <_free_r+0x26>
 8006524:	b003      	add	sp, #12
 8006526:	bd30      	pop	{r4, r5, pc}
 8006528:	200011c0 	.word	0x200011c0

0800652c <_read_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4d07      	ldr	r5, [pc, #28]	; (800654c <_read_r+0x20>)
 8006530:	4604      	mov	r4, r0
 8006532:	4608      	mov	r0, r1
 8006534:	4611      	mov	r1, r2
 8006536:	2200      	movs	r2, #0
 8006538:	602a      	str	r2, [r5, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	f7fa fd5e 	bl	8000ffc <_read>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_read_r+0x1e>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_read_r+0x1e>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	200011c8 	.word	0x200011c8

08006550 <_fstat_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d07      	ldr	r5, [pc, #28]	; (8006570 <_fstat_r+0x20>)
 8006554:	2300      	movs	r3, #0
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	4611      	mov	r1, r2
 800655c:	602b      	str	r3, [r5, #0]
 800655e:	f7fa fd76 	bl	800104e <_fstat>
 8006562:	1c43      	adds	r3, r0, #1
 8006564:	d102      	bne.n	800656c <_fstat_r+0x1c>
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	b103      	cbz	r3, 800656c <_fstat_r+0x1c>
 800656a:	6023      	str	r3, [r4, #0]
 800656c:	bd38      	pop	{r3, r4, r5, pc}
 800656e:	bf00      	nop
 8006570:	200011c8 	.word	0x200011c8

08006574 <_isatty_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d06      	ldr	r5, [pc, #24]	; (8006590 <_isatty_r+0x1c>)
 8006578:	2300      	movs	r3, #0
 800657a:	4604      	mov	r4, r0
 800657c:	4608      	mov	r0, r1
 800657e:	602b      	str	r3, [r5, #0]
 8006580:	f7fa fd75 	bl	800106e <_isatty>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_isatty_r+0x1a>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_isatty_r+0x1a>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	200011c8 	.word	0x200011c8

08006594 <_init>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr

080065a0 <_fini>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr
