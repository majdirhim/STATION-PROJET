
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007138  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007308  08007308  00017308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007724  08007724  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007724  08007724  00017724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800772c  0800772c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001e0  08007914  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08007914  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010823  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002244  00000000  00000000  00030a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00032c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00033a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027101  00000000  00000000  000346d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114c3  00000000  00000000  0005b7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0fb1  00000000  00000000  0006cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015dc45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  0015dc98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080072f0 	.word	0x080072f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080072f0 	.word	0x080072f0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fa2:	4b8b      	ldr	r3, [pc, #556]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a8a      	ldr	r2, [pc, #552]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b88      	ldr	r3, [pc, #544]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fba:	4b85      	ldr	r3, [pc, #532]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a84      	ldr	r2, [pc, #528]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b82      	ldr	r3, [pc, #520]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b7f      	ldr	r3, [pc, #508]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a7e      	ldr	r2, [pc, #504]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b7c      	ldr	r3, [pc, #496]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	4b79      	ldr	r3, [pc, #484]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a78      	ldr	r2, [pc, #480]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b76      	ldr	r3, [pc, #472]	; (80011d0 <MX_GPIO_Init+0x244>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a72      	ldr	r2, [pc, #456]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b70      	ldr	r3, [pc, #448]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b6d      	ldr	r3, [pc, #436]	; (80011d0 <MX_GPIO_Init+0x244>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a6c      	ldr	r2, [pc, #432]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b6a      	ldr	r3, [pc, #424]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001032:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a66      	ldr	r2, [pc, #408]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b64      	ldr	r3, [pc, #400]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800104a:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <MX_GPIO_Init+0x244>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a60      	ldr	r2, [pc, #384]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b5e      	ldr	r3, [pc, #376]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001062:	4b5b      	ldr	r3, [pc, #364]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107a:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <MX_GPIO_Init+0x244>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a54      	ldr	r2, [pc, #336]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001080:	f043 0320 	orr.w	r3, r3, #32
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a4e      	ldr	r2, [pc, #312]	; (80011d0 <MX_GPIO_Init+0x244>)
 8001098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <MX_GPIO_Init+0x244>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 80010aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b0:	2303      	movs	r3, #3
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	4845      	ldr	r0, [pc, #276]	; (80011d4 <MX_GPIO_Init+0x248>)
 80010c0:	f000 fdf4 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 80010c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ca:	2303      	movs	r3, #3
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d6:	4619      	mov	r1, r3
 80010d8:	483f      	ldr	r0, [pc, #252]	; (80011d8 <MX_GPIO_Init+0x24c>)
 80010da:	f000 fde7 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80010de:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e4:	2303      	movs	r3, #3
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	483a      	ldr	r0, [pc, #232]	; (80011dc <MX_GPIO_Init+0x250>)
 80010f4:	f000 fdda 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD2
                           PD15 PD10 PD14 PD9
                           PD8 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 80010f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	4834      	ldr	r0, [pc, #208]	; (80011e0 <MX_GPIO_Init+0x254>)
 800110e:	f000 fdcd 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 8001112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001118:	2303      	movs	r3, #3
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001124:	4619      	mov	r1, r3
 8001126:	482f      	ldr	r0, [pc, #188]	; (80011e4 <MX_GPIO_Init+0x258>)
 8001128:	f000 fdc0 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 800112c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001132:	2303      	movs	r3, #3
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800113a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113e:	4619      	mov	r1, r3
 8001140:	4829      	ldr	r0, [pc, #164]	; (80011e8 <MX_GPIO_Init+0x25c>)
 8001142:	f000 fdb3 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 PA10 PA8
                           PA1 PA0 PA4 PA2
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8
 8001146:	f641 53ff 	movw	r3, #7679	; 0x1dff
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114c:	2303      	movs	r3, #3
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001158:	4619      	mov	r1, r3
 800115a:	4824      	ldr	r0, [pc, #144]	; (80011ec <MX_GPIO_Init+0x260>)
 800115c:	f000 fda6 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800116e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001172:	4619      	mov	r1, r3
 8001174:	481e      	ldr	r0, [pc, #120]	; (80011f0 <MX_GPIO_Init+0x264>)
 8001176:	f000 fd99 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800117a:	23ff      	movs	r3, #255	; 0xff
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	4819      	ldr	r0, [pc, #100]	; (80011f4 <MX_GPIO_Init+0x268>)
 800118e:	f000 fd8d 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4814      	ldr	r0, [pc, #80]	; (80011f8 <MX_GPIO_Init+0x26c>)
 80011a8:	f000 fd80 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 80011ac:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	480e      	ldr	r0, [pc, #56]	; (80011fc <MX_GPIO_Init+0x270>)
 80011c2:	f000 fd73 	bl	8001cac <HAL_GPIO_Init>

}
 80011c6:	bf00      	nop
 80011c8:	3740      	adds	r7, #64	; 0x40
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40021800 	.word	0x40021800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40022400 	.word	0x40022400
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40022800 	.word	0x40022800
 80011f8:	40021400 	.word	0x40021400
 80011fc:	40021c00 	.word	0x40021c00

08001200 <_write>:
#define NO_WIND 0.3
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file ,char*ptr,int len){
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	b29a      	uxth	r2, r3
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	4803      	ldr	r0, [pc, #12]	; (8001224 <_write+0x24>)
 8001216:	f002 fe79 	bl	8003f0c <HAL_UART_Transmit>
	return len;
 800121a:	687b      	ldr	r3, [r7, #4]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000264 	.word	0x20000264

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122c:	f000 fbcf 	bl	80019ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001230:	f000 f8a0 	bl	8001374 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Tim2_Freq=HAL_RCC_GetPCLK1Freq()*2; //APB1_PSC=2 et TIM_psc=1
 8001234:	f001 fb98 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8001238:	4603      	mov	r3, r0
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4a44      	ldr	r2, [pc, #272]	; (8001350 <main+0x128>)
 800123e:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f7ff fea4 	bl	8000f8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001244:	f000 fae6 	bl	8001814 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001248:	f000 fa46 	bl	80016d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800124c:	2100      	movs	r1, #0
 800124e:	4841      	ldr	r0, [pc, #260]	; (8001354 <main+0x12c>)
 8001250:	f001 fffa 	bl	8003248 <HAL_TIM_IC_Start_IT>
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE ); // to detect timer overflow
 8001254:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <main+0x12c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	4b3e      	ldr	r3, [pc, #248]	; (8001354 <main+0x12c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	60da      	str	r2, [r3, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TIM2_IC_IT_Flag){
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <main+0x130>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0fa      	beq.n	8001264 <main+0x3c>
		  // la vitesse du vent correspond à la fréqunce du signal capturée multipliée par une constante
		  Frequency = ccr1>=ccr0?(float)Tim2_Freq/(ccr1-ccr0):(float)Tim2_Freq/((TIM2->ARR+ccr1)-ccr0);
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <main+0x134>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <main+0x138>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d311      	bcc.n	800129e <main+0x76>
 800127a:	4b35      	ldr	r3, [pc, #212]	; (8001350 <main+0x128>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001286:	4b35      	ldr	r3, [pc, #212]	; (800135c <main+0x134>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b35      	ldr	r3, [pc, #212]	; (8001360 <main+0x138>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129c:	e014      	b.n	80012c8 <main+0xa0>
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <main+0x128>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b0:	4b2a      	ldr	r3, [pc, #168]	; (800135c <main+0x134>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	441a      	add	r2, r3
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <main+0x138>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <main+0x13c>)
 80012ca:	edc3 7a00 	vstr	s15, [r3]
		  Wind_Speed=1.492*Frequency;
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <main+0x13c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f958 	bl	8000588 <__aeabi_f2d>
 80012d8:	a319      	add	r3, pc, #100	; (adr r3, 8001340 <main+0x118>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f9ab 	bl	8000638 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc7d 	bl	8000be8 <__aeabi_d2f>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a1d      	ldr	r2, [pc, #116]	; (8001368 <main+0x140>)
 80012f2:	6013      	str	r3, [r2, #0]
		  ccr0=ccr1;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <main+0x134>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a19      	ldr	r2, [pc, #100]	; (8001360 <main+0x138>)
 80012fa:	6013      	str	r3, [r2, #0]
		  Wind_Speed>NO_WIND?printf("Wind_Speed = %.3f\n\r",Wind_Speed):printf("Wind_Speed = 0.0\n\r");
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <main+0x140>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f941 	bl	8000588 <__aeabi_f2d>
 8001306:	a310      	add	r3, pc, #64	; (adr r3, 8001348 <main+0x120>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff fc24 	bl	8000b58 <__aeabi_dcmpgt>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00a      	beq.n	800132c <main+0x104>
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <main+0x140>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f934 	bl	8000588 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <main+0x144>)
 8001326:	f003 ff1f 	bl	8005168 <iprintf>
 800132a:	e002      	b.n	8001332 <main+0x10a>
 800132c:	4810      	ldr	r0, [pc, #64]	; (8001370 <main+0x148>)
 800132e:	f003 ff1b 	bl	8005168 <iprintf>
		  TIM2_IC_IT_Flag=0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <main+0x130>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
	  if(TIM2_IC_IT_Flag){
 8001338:	e794      	b.n	8001264 <main+0x3c>
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	645a1cac 	.word	0x645a1cac
 8001344:	3ff7df3b 	.word	0x3ff7df3b
 8001348:	33333333 	.word	0x33333333
 800134c:	3fd33333 	.word	0x3fd33333
 8001350:	20000210 	.word	0x20000210
 8001354:	20000218 	.word	0x20000218
 8001358:	200001fc 	.word	0x200001fc
 800135c:	20000204 	.word	0x20000204
 8001360:	20000200 	.word	0x20000200
 8001364:	2000020c 	.word	0x2000020c
 8001368:	20000208 	.word	0x20000208
 800136c:	08007308 	.word	0x08007308
 8001370:	0800731c 	.word	0x0800731c

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	; 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	2230      	movs	r2, #48	; 0x30
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fa7e 	bl	8004884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <SystemClock_Config+0xd4>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <SystemClock_Config+0xd4>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b28      	ldr	r3, [pc, #160]	; (8001448 <SystemClock_Config+0xd4>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <SystemClock_Config+0xd8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013b8:	4a24      	ldr	r2, [pc, #144]	; (800144c <SystemClock_Config+0xd8>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <SystemClock_Config+0xd8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	2302      	movs	r3, #2
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80013e0:	230c      	movs	r3, #12
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80013e4:	2360      	movs	r3, #96	; 0x60
 80013e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 fe55 	bl	80020a4 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001400:	f000 f850 	bl	80014a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001404:	f000 fdfe 	bl	8002004 <HAL_PWREx_EnableOverDrive>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800140e:	f000 f849 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	2302      	movs	r3, #2
 8001418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001422:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2103      	movs	r1, #3
 8001430:	4618      	mov	r0, r3
 8001432:	f001 f8db 	bl	80025ec <HAL_RCC_ClockConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800143c:	f000 f832 	bl	80014a4 <Error_Handler>
  }
}
 8001440:	bf00      	nop
 8001442:	3750      	adds	r7, #80	; 0x50
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000

08001450 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if(FIRST_IMP){
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x44>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00a      	beq.n	8001478 <HAL_TIM_IC_CaptureCallback+0x28>
		ccr0=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001462:	2100      	movs	r1, #0
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f002 f9fb 	bl	8003860 <HAL_TIM_ReadCapturedValue>
 800146a:	4603      	mov	r3, r0
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_TIM_IC_CaptureCallback+0x48>)
 800146e:	6013      	str	r3, [r2, #0]
		FIRST_IMP=0;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
	else{
		ccr1=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		TIM2_IC_IT_Flag=1;
	}

}
 8001476:	e009      	b.n	800148c <HAL_TIM_IC_CaptureCallback+0x3c>
		ccr1=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001478:	2100      	movs	r1, #0
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f002 f9f0 	bl	8003860 <HAL_TIM_ReadCapturedValue>
 8001480:	4603      	mov	r3, r0
 8001482:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001484:	6013      	str	r3, [r2, #0]
		TIM2_IC_IT_Flag=1;
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000000 	.word	0x20000000
 8001498:	20000200 	.word	0x20000200
 800149c:	20000204 	.word	0x20000204
 80014a0:	200001fc 	.word	0x200001fc

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	e7fe      	b.n	80014ac <Error_Handler+0x8>
	...

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_MspInit+0x44>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_MspInit+0x44>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_MspInit+0x44>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_MspInit+0x44>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_MspInit+0x44>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_MspInit+0x44>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <NMI_Handler+0x4>

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 fa80 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <TIM2_IRQHandler+0x10>)
 8001552:	f001 ffc9 	bl	80034e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000218 	.word	0x20000218

08001560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_kill>:

int _kill(int pid, int sig)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800157a:	f003 f959 	bl	8004830 <__errno>
 800157e:	4603      	mov	r3, r0
 8001580:	2216      	movs	r2, #22
 8001582:	601a      	str	r2, [r3, #0]
	return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffe7 	bl	8001570 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015a2:	e7fe      	b.n	80015a2 <_exit+0x12>

080015a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	e00a      	b.n	80015cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015b6:	f3af 8000 	nop.w
 80015ba:	4601      	mov	r1, r0
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60ba      	str	r2, [r7, #8]
 80015c2:	b2ca      	uxtb	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbf0      	blt.n	80015b6 <_read+0x12>
	}

return len;
 80015d4:	687b      	ldr	r3, [r7, #4]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_close>:
	}
	return len;
}

int _close(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	return -1;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001606:	605a      	str	r2, [r3, #4]
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_isatty>:

int _isatty(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
	return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001650:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <_sbrk+0x5c>)
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <_sbrk+0x60>)
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_sbrk+0x64>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <_sbrk+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d207      	bcs.n	8001688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001678:	f003 f8da 	bl	8004830 <__errno>
 800167c:	4603      	mov	r3, r0
 800167e:	220c      	movs	r2, #12
 8001680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001682:	f04f 33ff 	mov.w	r3, #4294967295
 8001686:	e009      	b.n	800169c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <_sbrk+0x64>)
 8001698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20050000 	.word	0x20050000
 80016a8:	00000400 	.word	0x00000400
 80016ac:	20000214 	.word	0x20000214
 80016b0:	20000300 	.word	0x20000300

080016b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <SystemInit+0x20>)
 80016ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <SystemInit+0x20>)
 80016c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <MX_TIM2_Init+0xa0>)
 80016f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_TIM2_Init+0xa0>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_TIM2_Init+0xa0>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000000000;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_TIM2_Init+0xa0>)
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <MX_TIM2_Init+0xa4>)
 800170e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_TIM2_Init+0xa0>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <MX_TIM2_Init+0xa0>)
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800171c:	4816      	ldr	r0, [pc, #88]	; (8001778 <MX_TIM2_Init+0xa0>)
 800171e:	f001 fd3b 	bl	8003198 <HAL_TIM_IC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001728:	f7ff febc 	bl	80014a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800172c:	2320      	movs	r3, #32
 800172e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	480f      	ldr	r0, [pc, #60]	; (8001778 <MX_TIM2_Init+0xa0>)
 800173c:	f002 faec 	bl	8003d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001746:	f7ff fead 	bl	80014a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800174e:	2301      	movs	r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_TIM2_Init+0xa0>)
 8001762:	f001 ffe0 	bl	8003726 <HAL_TIM_IC_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800176c:	f7ff fe9a 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000218 	.word	0x20000218
 800177c:	b2d05e00 	.word	0xb2d05e00

08001780 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a0:	d130      	bne.n	8001804 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_TIM_IC_MspInit+0x8c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_TIM_IC_MspInit+0x8c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_TIM_IC_MspInit+0x8c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_TIM_IC_MspInit+0x8c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <HAL_TIM_IC_MspInit+0x8c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_TIM_IC_MspInit+0x8c>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017e4:	2301      	movs	r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	4808      	ldr	r0, [pc, #32]	; (8001810 <HAL_TIM_IC_MspInit+0x90>)
 80017f0:	f000 fa5c 	bl	8001cac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	201c      	movs	r0, #28
 80017fa:	f000 fa20 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017fe:	201c      	movs	r0, #28
 8001800:	f000 fa39 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	; 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000

08001814 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <MX_USART1_UART_Init+0x60>)
 800181c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 8001820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 8001828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800182c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 8001836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_USART1_UART_Init+0x5c>)
 800185c:	f002 fb08 	bl	8003e70 <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001866:	f7ff fe1d 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000264 	.word	0x20000264
 8001874:	40011000 	.word	0x40011000

08001878 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b0ac      	sub	sp, #176	; 0xb0
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	2284      	movs	r2, #132	; 0x84
 8001896:	2100      	movs	r1, #0
 8001898:	4618      	mov	r0, r3
 800189a:	f002 fff3 	bl	8004884 <memset>
  if(uartHandle->Instance==USART1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a32      	ldr	r2, [pc, #200]	; (800196c <HAL_UART_MspInit+0xf4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d15c      	bne.n	8001962 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018a8:	2340      	movs	r3, #64	; 0x40
 80018aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018ac:	2300      	movs	r3, #0
 80018ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b0:	f107 0318 	add.w	r3, r7, #24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 f87f 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018c0:	f7ff fdf0 	bl	80014a4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c4:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	4a29      	ldr	r2, [pc, #164]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018ca:	f043 0310 	orr.w	r3, r3, #16
 80018ce:	6453      	str	r3, [r2, #68]	; 0x44
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018dc:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4a23      	ldr	r2, [pc, #140]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	6313      	str	r3, [r2, #48]	; 0x30
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_UART_MspInit+0xf8>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_UART_MspInit+0xf8>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001924:	2307      	movs	r3, #7
 8001926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800192e:	4619      	mov	r1, r3
 8001930:	4810      	ldr	r0, [pc, #64]	; (8001974 <HAL_UART_MspInit+0xfc>)
 8001932:	f000 f9bb 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001950:	2307      	movs	r3, #7
 8001952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800195a:	4619      	mov	r1, r3
 800195c:	4806      	ldr	r0, [pc, #24]	; (8001978 <HAL_UART_MspInit+0x100>)
 800195e:	f000 f9a5 	bl	8001cac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001962:	bf00      	nop
 8001964:	37b0      	adds	r7, #176	; 0xb0
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40011000 	.word	0x40011000
 8001970:	40023800 	.word	0x40023800
 8001974:	40020400 	.word	0x40020400
 8001978:	40020000 	.word	0x40020000

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019a6:	f7ff fe85 	bl	80016b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f002 ff47 	bl	800483c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff fc3b 	bl	8001228 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019c0:	08007734 	.word	0x08007734
  ldr r2, =_sbss
 80019c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019c8:	200002fc 	.word	0x200002fc

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>

080019ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f000 f928 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 f805 	bl	80019e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019de:	f7ff fd67 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_InitTick+0x54>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x58>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f943 	bl	8001c92 <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00e      	b.n	8001a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d80a      	bhi.n	8001a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 f90b 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_InitTick+0x5c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	2000000c 	.word	0x2000000c
 8001a44:	20000008 	.word	0x20000008

08001a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_IncTick+0x20>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_IncTick+0x24>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2000000c 	.word	0x2000000c
 8001a6c:	200002e8 	.word	0x200002e8

08001a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_GetTick+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200002e8 	.word	0x200002e8

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	05fa0000 	.word	0x05fa0000

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff3e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff8e 	bl	8001b7c <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e175      	b.n	8001fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 8164 	bne.w	8001fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d005      	beq.n	8001d02 <HAL_GPIO_Init+0x56>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d130      	bne.n	8001d64 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d017      	beq.n	8001da0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d123      	bne.n	8001df4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80be 	beq.w	8001fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e4e:	4a61      	ldr	r2, [pc, #388]	; (8001fd4 <HAL_GPIO_Init+0x328>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a58      	ldr	r2, [pc, #352]	; (8001fd8 <HAL_GPIO_Init+0x32c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d037      	beq.n	8001eea <HAL_GPIO_Init+0x23e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <HAL_GPIO_Init+0x330>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d031      	beq.n	8001ee6 <HAL_GPIO_Init+0x23a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a56      	ldr	r2, [pc, #344]	; (8001fe0 <HAL_GPIO_Init+0x334>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d02b      	beq.n	8001ee2 <HAL_GPIO_Init+0x236>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a55      	ldr	r2, [pc, #340]	; (8001fe4 <HAL_GPIO_Init+0x338>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d025      	beq.n	8001ede <HAL_GPIO_Init+0x232>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a54      	ldr	r2, [pc, #336]	; (8001fe8 <HAL_GPIO_Init+0x33c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01f      	beq.n	8001eda <HAL_GPIO_Init+0x22e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a53      	ldr	r2, [pc, #332]	; (8001fec <HAL_GPIO_Init+0x340>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d019      	beq.n	8001ed6 <HAL_GPIO_Init+0x22a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_GPIO_Init+0x344>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0x226>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a51      	ldr	r2, [pc, #324]	; (8001ff4 <HAL_GPIO_Init+0x348>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00d      	beq.n	8001ece <HAL_GPIO_Init+0x222>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a50      	ldr	r2, [pc, #320]	; (8001ff8 <HAL_GPIO_Init+0x34c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x21e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4f      	ldr	r2, [pc, #316]	; (8001ffc <HAL_GPIO_Init+0x350>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_GPIO_Init+0x21a>
 8001ec2:	2309      	movs	r3, #9
 8001ec4:	e012      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	e010      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001eca:	2308      	movs	r3, #8
 8001ecc:	e00e      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e00c      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ed2:	2306      	movs	r3, #6
 8001ed4:	e00a      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	e008      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001eda:	2304      	movs	r3, #4
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x240>
 8001eea:	2300      	movs	r3, #0
 8001eec:	69fa      	ldr	r2, [r7, #28]
 8001eee:	f002 0203 	and.w	r2, r2, #3
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001efc:	4935      	ldr	r1, [pc, #212]	; (8001fd4 <HAL_GPIO_Init+0x328>)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	4b3d      	ldr	r3, [pc, #244]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2e:	4a34      	ldr	r2, [pc, #208]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5e:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f82:	4a1f      	ldr	r2, [pc, #124]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <HAL_GPIO_Init+0x354>)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	2b0f      	cmp	r3, #15
 8001fbc:	f67f ae86 	bls.w	8001ccc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	40020000 	.word	0x40020000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020c00 	.word	0x40020c00
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40021400 	.word	0x40021400
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40021c00 	.word	0x40021c00
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40022400 	.word	0x40022400
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_PWREx_EnableOverDrive+0x98>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	4a22      	ldr	r2, [pc, #136]	; (800209c <HAL_PWREx_EnableOverDrive+0x98>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	6413      	str	r3, [r2, #64]	; 0x40
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_PWREx_EnableOverDrive+0x98>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1d      	ldr	r2, [pc, #116]	; (80020a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002032:	f7ff fd1d 	bl	8001a70 <HAL_GetTick>
 8002036:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002038:	e009      	b.n	800204e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800203a:	f7ff fd19 	bl	8001a70 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002048:	d901      	bls.n	800204e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e022      	b.n	8002094 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205a:	d1ee      	bne.n	800203a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002066:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002068:	f7ff fd02 	bl	8001a70 <HAL_GetTick>
 800206c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800206e:	e009      	b.n	8002084 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002070:	f7ff fcfe 	bl	8001a70 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800207e:	d901      	bls.n	8002084 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e007      	b.n	8002094 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002090:	d1ee      	bne.n	8002070 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	40007000 	.word	0x40007000

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e291      	b.n	80025de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c8:	4b96      	ldr	r3, [pc, #600]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d00c      	beq.n	80020ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d4:	4b93      	ldr	r3, [pc, #588]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d112      	bne.n	8002106 <HAL_RCC_OscConfig+0x62>
 80020e0:	4b90      	ldr	r3, [pc, #576]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ec:	d10b      	bne.n	8002106 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ee:	4b8d      	ldr	r3, [pc, #564]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d06c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x130>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d168      	bne.n	80021d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e26b      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x7a>
 8002110:	4b84      	ldr	r3, [pc, #528]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a83      	ldr	r2, [pc, #524]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e02e      	b.n	800217c <HAL_RCC_OscConfig+0xd8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x9c>
 8002126:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a7e      	ldr	r2, [pc, #504]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 800212c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b7c      	ldr	r3, [pc, #496]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7b      	ldr	r2, [pc, #492]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0xd8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0xc0>
 800214a:	4b76      	ldr	r3, [pc, #472]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a75      	ldr	r2, [pc, #468]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b73      	ldr	r3, [pc, #460]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a72      	ldr	r2, [pc, #456]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xd8>
 8002164:	4b6f      	ldr	r3, [pc, #444]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a6e      	ldr	r2, [pc, #440]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b6c      	ldr	r3, [pc, #432]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6b      	ldr	r2, [pc, #428]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff fc74 	bl	8001a70 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fc70 	bl	8001a70 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e21f      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0xe8>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc60 	bl	8001a70 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fc5c 	bl	8001a70 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e20b      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	4b57      	ldr	r3, [pc, #348]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x110>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d069      	beq.n	80022b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e2:	4b50      	ldr	r3, [pc, #320]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ee:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d11c      	bne.n	8002234 <HAL_RCC_OscConfig+0x190>
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	4b47      	ldr	r3, [pc, #284]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x17a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1df      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	493d      	ldr	r1, [pc, #244]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	e040      	b.n	80022b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d023      	beq.n	8002284 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223c:	4b39      	ldr	r3, [pc, #228]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a38      	ldr	r2, [pc, #224]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff fc12 	bl	8001a70 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7ff fc0e 	bl	8001a70 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e1bd      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b30      	ldr	r3, [pc, #192]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4929      	ldr	r1, [pc, #164]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]
 8002282:	e018      	b.n	80022b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff fbee 	bl	8001a70 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002298:	f7ff fbea 	bl	8001a70 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e199      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d038      	beq.n	8002334 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d019      	beq.n	80022fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80022cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ce:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7ff fbcb 	bl	8001a70 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022de:	f7ff fbc7 	bl	8001a70 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e176      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 80022f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x23a>
 80022fc:	e01a      	b.n	8002334 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002302:	4a08      	ldr	r2, [pc, #32]	; (8002324 <HAL_RCC_OscConfig+0x280>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7ff fbb1 	bl	8001a70 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7ff fbad 	bl	8001a70 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d903      	bls.n	8002328 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e15c      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
 8002324:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b91      	ldr	r3, [pc, #580]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ee      	bne.n	8002312 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a4 	beq.w	800248a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002342:	4b8b      	ldr	r3, [pc, #556]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10d      	bne.n	800236a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	4b88      	ldr	r3, [pc, #544]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a87      	ldr	r2, [pc, #540]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b85      	ldr	r3, [pc, #532]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002366:	2301      	movs	r3, #1
 8002368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236a:	4b82      	ldr	r3, [pc, #520]	; (8002574 <HAL_RCC_OscConfig+0x4d0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d118      	bne.n	80023a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002376:	4b7f      	ldr	r3, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a7e      	ldr	r2, [pc, #504]	; (8002574 <HAL_RCC_OscConfig+0x4d0>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002382:	f7ff fb75 	bl	8001a70 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238a:	f7ff fb71 	bl	8001a70 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b64      	cmp	r3, #100	; 0x64
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e120      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239c:	4b75      	ldr	r3, [pc, #468]	; (8002574 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x31a>
 80023b0:	4b6f      	ldr	r3, [pc, #444]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b4:	4a6e      	ldr	r2, [pc, #440]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6713      	str	r3, [r2, #112]	; 0x70
 80023bc:	e02d      	b.n	800241a <HAL_RCC_OscConfig+0x376>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x33c>
 80023c6:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ca:	4a69      	ldr	r2, [pc, #420]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023cc:	f023 0301 	bic.w	r3, r3, #1
 80023d0:	6713      	str	r3, [r2, #112]	; 0x70
 80023d2:	4b67      	ldr	r3, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a66      	ldr	r2, [pc, #408]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	e01c      	b.n	800241a <HAL_RCC_OscConfig+0x376>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_OscConfig+0x35e>
 80023e8:	4b61      	ldr	r3, [pc, #388]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a60      	ldr	r2, [pc, #384]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023ee:	f043 0304 	orr.w	r3, r3, #4
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
 80023f4:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a5d      	ldr	r2, [pc, #372]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	e00b      	b.n	800241a <HAL_RCC_OscConfig+0x376>
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	6713      	str	r3, [r2, #112]	; 0x70
 800240e:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a57      	ldr	r2, [pc, #348]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d015      	beq.n	800244e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7ff fb25 	bl	8001a70 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7ff fb21 	bl	8001a70 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0ce      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	4b4b      	ldr	r3, [pc, #300]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ee      	beq.n	800242a <HAL_RCC_OscConfig+0x386>
 800244c:	e014      	b.n	8002478 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7ff fb0f 	bl	8001a70 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7ff fb0b 	bl	8001a70 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0b8      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a3b      	ldr	r2, [pc, #236]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80a4 	beq.w	80025dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 030c 	and.w	r3, r3, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d06b      	beq.n	8002578 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d149      	bne.n	800253c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a30      	ldr	r2, [pc, #192]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80024ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff fadc 	bl	8001a70 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7ff fad8 	bl	8001a70 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e087      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	019b      	lsls	r3, r3, #6
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	3b01      	subs	r3, #1
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	061b      	lsls	r3, r3, #24
 80024fe:	4313      	orrs	r3, r2
 8002500:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002506:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a18      	ldr	r2, [pc, #96]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7ff faac 	bl	8001a70 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251c:	f7ff faa8 	bl	8001a70 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e057      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x478>
 800253a:	e04f      	b.n	80025dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7ff fa92 	bl	8001a70 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7ff fa8e 	bl	8001a70 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e03d      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_RCC_OscConfig+0x4cc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x4ac>
 800256e:	e035      	b.n	80025dc <HAL_RCC_OscConfig+0x538>
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x544>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d028      	beq.n	80025d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d121      	bne.n	80025d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d11a      	bne.n	80025d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a8:	4013      	ands	r3, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d111      	bne.n	80025d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	3b01      	subs	r3, #1
 80025c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0d0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b6a      	ldr	r3, [pc, #424]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 020f 	bic.w	r2, r3, #15
 800261a:	4965      	ldr	r1, [pc, #404]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d040      	beq.n	8002710 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e073      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4936      	ldr	r1, [pc, #216]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e0:	f7ff f9c6 	bl	8001a70 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7ff f9c2 	bl	8001a70 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e053      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d210      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 020f 	bic.w	r2, r3, #15
 8002726:	4922      	ldr	r1, [pc, #136]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x1d0>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1d4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f922 	bl	80019e8 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	08007330 	.word	0x08007330
 80027bc:	20000004 	.word	0x20000004
 80027c0:	20000008 	.word	0x20000008

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c8:	b090      	sub	sp, #64	; 0x40
 80027ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
 80027d0:	2300      	movs	r3, #0
 80027d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d00d      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x40>
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	f200 80a1 	bhi.w	8002930 <HAL_RCC_GetSysClockFreq+0x16c>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x34>
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x3a>
 80027f6:	e09b      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_GetSysClockFreq+0x184>)
 80027fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027fc:	e09b      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fe:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_GetSysClockFreq+0x188>)
 8002800:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002802:	e098      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800280e:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d028      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	2200      	movs	r2, #0
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	627a      	str	r2, [r7, #36]	; 0x24
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800282c:	2100      	movs	r1, #0
 800282e:	4b47      	ldr	r3, [pc, #284]	; (800294c <HAL_RCC_GetSysClockFreq+0x188>)
 8002830:	fb03 f201 	mul.w	r2, r3, r1
 8002834:	2300      	movs	r3, #0
 8002836:	fb00 f303 	mul.w	r3, r0, r3
 800283a:	4413      	add	r3, r2
 800283c:	4a43      	ldr	r2, [pc, #268]	; (800294c <HAL_RCC_GetSysClockFreq+0x188>)
 800283e:	fba0 1202 	umull	r1, r2, r0, r2
 8002842:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002844:	460a      	mov	r2, r1
 8002846:	62ba      	str	r2, [r7, #40]	; 0x28
 8002848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284a:	4413      	add	r3, r2
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800284e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002850:	2200      	movs	r2, #0
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	61fa      	str	r2, [r7, #28]
 8002856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800285a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800285e:	f7fe fa13 	bl	8000c88 <__aeabi_uldivmod>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4613      	mov	r3, r2
 8002868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286a:	e053      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286c:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	2200      	movs	r2, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	617a      	str	r2, [r7, #20]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800287e:	f04f 0b00 	mov.w	fp, #0
 8002882:	4652      	mov	r2, sl
 8002884:	465b      	mov	r3, fp
 8002886:	f04f 0000 	mov.w	r0, #0
 800288a:	f04f 0100 	mov.w	r1, #0
 800288e:	0159      	lsls	r1, r3, #5
 8002890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002894:	0150      	lsls	r0, r2, #5
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	ebb2 080a 	subs.w	r8, r2, sl
 800289e:	eb63 090b 	sbc.w	r9, r3, fp
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028b6:	ebb2 0408 	subs.w	r4, r2, r8
 80028ba:	eb63 0509 	sbc.w	r5, r3, r9
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	00eb      	lsls	r3, r5, #3
 80028c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028cc:	00e2      	lsls	r2, r4, #3
 80028ce:	4614      	mov	r4, r2
 80028d0:	461d      	mov	r5, r3
 80028d2:	eb14 030a 	adds.w	r3, r4, sl
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	eb45 030b 	adc.w	r3, r5, fp
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ea:	4629      	mov	r1, r5
 80028ec:	028b      	lsls	r3, r1, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f4:	4621      	mov	r1, r4
 80028f6:	028a      	lsls	r2, r1, #10
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	2200      	movs	r2, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002908:	f7fe f9be 	bl	8000c88 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_GetSysClockFreq+0x180>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002924:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800292e:	e002      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetSysClockFreq+0x184>)
 8002932:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002938:	4618      	mov	r0, r3
 800293a:	3740      	adds	r7, #64	; 0x40
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	00f42400 	.word	0x00f42400
 800294c:	017d7840 	.word	0x017d7840

08002950 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_RCC_GetHCLKFreq+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff0 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0a9b      	lsrs	r3, r3, #10
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	08007340 	.word	0x08007340

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002994:	f7ff ffdc 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0b5b      	lsrs	r3, r3, #13
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	08007340 	.word	0x08007340

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029e0:	4b69      	ldr	r3, [pc, #420]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a68      	ldr	r2, [pc, #416]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029ea:	6093      	str	r3, [r2, #8]
 80029ec:	4b66      	ldr	r3, [pc, #408]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f4:	4964      	ldr	r1, [pc, #400]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d017      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a12:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	4959      	ldr	r1, [pc, #356]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a30:	d101      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d017      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a4e:	4b4e      	ldr	r3, [pc, #312]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	494a      	ldr	r1, [pc, #296]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 808b 	beq.w	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a9c:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4a39      	ldr	r2, [pc, #228]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa8:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a34      	ldr	r2, [pc, #208]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac0:	f7fe ffd6 	bl	8001a70 <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac8:	f7fe ffd2 	bl	8001a70 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e357      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d035      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d02e      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b2c:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d114      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe ff9a 	bl	8001a70 <HAL_GetTick>
 8002b3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe ff96 	bl	8001a70 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e319      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ee      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b6e:	d111      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b7e:	400b      	ands	r3, r1
 8002b80:	4901      	ldr	r1, [pc, #4]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	0ffffcff 	.word	0x0ffffcff
 8002b94:	4baa      	ldr	r3, [pc, #680]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4aa9      	ldr	r2, [pc, #676]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b9e:	6093      	str	r3, [r2, #8]
 8002ba0:	4ba7      	ldr	r3, [pc, #668]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	49a4      	ldr	r1, [pc, #656]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bbe:	4ba0      	ldr	r3, [pc, #640]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc4:	4a9e      	ldr	r2, [pc, #632]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bce:	4b9c      	ldr	r3, [pc, #624]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	4999      	ldr	r1, [pc, #612]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bec:	4b94      	ldr	r3, [pc, #592]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bfa:	4991      	ldr	r1, [pc, #580]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c0e:	4b8c      	ldr	r3, [pc, #560]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c1c:	4988      	ldr	r1, [pc, #544]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c30:	4b83      	ldr	r3, [pc, #524]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3e:	4980      	ldr	r1, [pc, #512]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c52:	4b7b      	ldr	r3, [pc, #492]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4977      	ldr	r1, [pc, #476]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c74:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	496f      	ldr	r1, [pc, #444]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c96:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f023 020c 	bic.w	r2, r3, #12
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca4:	4966      	ldr	r1, [pc, #408]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb8:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	495e      	ldr	r1, [pc, #376]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cda:	4b59      	ldr	r3, [pc, #356]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce8:	4955      	ldr	r1, [pc, #340]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cfc:	4b50      	ldr	r3, [pc, #320]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0a:	494d      	ldr	r1, [pc, #308]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d1e:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	4944      	ldr	r1, [pc, #272]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d40:	4b3f      	ldr	r3, [pc, #252]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	493c      	ldr	r1, [pc, #240]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d62:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d70:	4933      	ldr	r1, [pc, #204]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d92:	492b      	ldr	r1, [pc, #172]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d011      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002da6:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db4:	4922      	ldr	r1, [pc, #136]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc4:	d101      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de6:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df4:	4912      	ldr	r1, [pc, #72]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e18:	4909      	ldr	r1, [pc, #36]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d006      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80d9 	beq.w	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e34:	4b02      	ldr	r3, [pc, #8]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a01      	ldr	r2, [pc, #4]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e3e:	e001      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e46:	f7fe fe13 	bl	8001a70 <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e4e:	f7fe fe0f 	bl	8001a70 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	; 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e194      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e60:	4b6c      	ldr	r3, [pc, #432]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d021      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11d      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e80:	4b64      	ldr	r3, [pc, #400]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e8e:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e94:	0e1b      	lsrs	r3, r3, #24
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	019a      	lsls	r2, r3, #6
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	071b      	lsls	r3, r3, #28
 8002eb4:	4957      	ldr	r1, [pc, #348]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d004      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d02e      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee6:	d129      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ee8:	4b4a      	ldr	r3, [pc, #296]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eee:	0c1b      	lsrs	r3, r3, #16
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efc:	0f1b      	lsrs	r3, r3, #28
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	019a      	lsls	r2, r3, #6
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	041b      	lsls	r3, r3, #16
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	431a      	orrs	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	071b      	lsls	r3, r3, #28
 8002f1c:	493d      	ldr	r1, [pc, #244]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f24:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f2a:	f023 021f 	bic.w	r2, r3, #31
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	3b01      	subs	r3, #1
 8002f34:	4937      	ldr	r1, [pc, #220]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01d      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f48:	4b32      	ldr	r3, [pc, #200]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4e:	0e1b      	lsrs	r3, r3, #24
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5c:	0f1b      	lsrs	r3, r3, #28
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	019a      	lsls	r2, r3, #6
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	041b      	lsls	r3, r3, #16
 8002f70:	431a      	orrs	r2, r3
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	071b      	lsls	r3, r3, #28
 8002f7c:	4925      	ldr	r1, [pc, #148]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d011      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	019a      	lsls	r2, r3, #6
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	071b      	lsls	r3, r3, #28
 8002fac:	4919      	ldr	r1, [pc, #100]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fb4:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fd56 	bl	8001a70 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fc8:	f7fe fd52 	bl	8001a70 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e0d7      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	f040 80cd 	bne.w	8003188 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a08      	ldr	r2, [pc, #32]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffa:	f7fe fd39 	bl	8001a70 <HAL_GetTick>
 8002ffe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003002:	f7fe fd35 	bl	8001a70 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b64      	cmp	r3, #100	; 0x64
 800300e:	d903      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0ba      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003014:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003018:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003024:	d0ed      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02e      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d12a      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800304e:	4b51      	ldr	r3, [pc, #324]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800305c:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800305e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003062:	0f1b      	lsrs	r3, r3, #28
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	019a      	lsls	r2, r3, #6
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	041b      	lsls	r3, r3, #16
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	061b      	lsls	r3, r3, #24
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	4944      	ldr	r1, [pc, #272]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800308a:	4b42      	ldr	r3, [pc, #264]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003090:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	3b01      	subs	r3, #1
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	493d      	ldr	r1, [pc, #244]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d022      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030b8:	d11d      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	0e1b      	lsrs	r3, r3, #24
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	0f1b      	lsrs	r3, r3, #28
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	019a      	lsls	r2, r3, #6
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	041b      	lsls	r3, r3, #16
 80030e2:	431a      	orrs	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	071b      	lsls	r3, r3, #28
 80030ee:	4929      	ldr	r1, [pc, #164]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d028      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003102:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	0e1b      	lsrs	r3, r3, #24
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	019a      	lsls	r2, r3, #6
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	041b      	lsls	r3, r3, #16
 8003128:	431a      	orrs	r2, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	071b      	lsls	r3, r3, #28
 8003136:	4917      	ldr	r1, [pc, #92]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4911      	ldr	r1, [pc, #68]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003160:	f7fe fc86 	bl	8001a70 <HAL_GetTick>
 8003164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003168:	f7fe fc82 	bl	8001a70 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e007      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003186:	d1ef      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800

08003198 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e049      	b.n	800323e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fade 	bl	8001780 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 fbae 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003252:	2300      	movs	r3, #0
 8003254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <HAL_TIM_IC_Start_IT+0x1e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e023      	b.n	80032ae <HAL_TIM_IC_Start_IT+0x66>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Start_IT+0x2e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003272:	b2db      	uxtb	r3, r3
 8003274:	e01b      	b.n	80032ae <HAL_TIM_IC_Start_IT+0x66>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b08      	cmp	r3, #8
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start_IT+0x3e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e013      	b.n	80032ae <HAL_TIM_IC_Start_IT+0x66>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d104      	bne.n	8003296 <HAL_TIM_IC_Start_IT+0x4e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e00b      	b.n	80032ae <HAL_TIM_IC_Start_IT+0x66>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b10      	cmp	r3, #16
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_IC_Start_IT+0x5e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e003      	b.n	80032ae <HAL_TIM_IC_Start_IT+0x66>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d104      	bne.n	80032c0 <HAL_TIM_IC_Start_IT+0x78>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e013      	b.n	80032e8 <HAL_TIM_IC_Start_IT+0xa0>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d104      	bne.n	80032d0 <HAL_TIM_IC_Start_IT+0x88>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e00b      	b.n	80032e8 <HAL_TIM_IC_Start_IT+0xa0>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d104      	bne.n	80032e0 <HAL_TIM_IC_Start_IT+0x98>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e003      	b.n	80032e8 <HAL_TIM_IC_Start_IT+0xa0>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032ea:	7bbb      	ldrb	r3, [r7, #14]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d102      	bne.n	80032f6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032f0:	7b7b      	ldrb	r3, [r7, #13]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e0e2      	b.n	80034c0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d104      	bne.n	800330a <HAL_TIM_IC_Start_IT+0xc2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003308:	e023      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x10a>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d104      	bne.n	800331a <HAL_TIM_IC_Start_IT+0xd2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003318:	e01b      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x10a>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d104      	bne.n	800332a <HAL_TIM_IC_Start_IT+0xe2>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003328:	e013      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x10a>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d104      	bne.n	800333a <HAL_TIM_IC_Start_IT+0xf2>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003338:	e00b      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x10a>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b10      	cmp	r3, #16
 800333e:	d104      	bne.n	800334a <HAL_TIM_IC_Start_IT+0x102>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003348:	e003      	b.n	8003352 <HAL_TIM_IC_Start_IT+0x10a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <HAL_TIM_IC_Start_IT+0x11a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003360:	e013      	b.n	800338a <HAL_TIM_IC_Start_IT+0x142>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d104      	bne.n	8003372 <HAL_TIM_IC_Start_IT+0x12a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003370:	e00b      	b.n	800338a <HAL_TIM_IC_Start_IT+0x142>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d104      	bne.n	8003382 <HAL_TIM_IC_Start_IT+0x13a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003380:	e003      	b.n	800338a <HAL_TIM_IC_Start_IT+0x142>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d841      	bhi.n	8003414 <HAL_TIM_IC_Start_IT+0x1cc>
 8003390:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <HAL_TIM_IC_Start_IT+0x150>)
 8003392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003396:	bf00      	nop
 8003398:	080033cd 	.word	0x080033cd
 800339c:	08003415 	.word	0x08003415
 80033a0:	08003415 	.word	0x08003415
 80033a4:	08003415 	.word	0x08003415
 80033a8:	080033df 	.word	0x080033df
 80033ac:	08003415 	.word	0x08003415
 80033b0:	08003415 	.word	0x08003415
 80033b4:	08003415 	.word	0x08003415
 80033b8:	080033f1 	.word	0x080033f1
 80033bc:	08003415 	.word	0x08003415
 80033c0:	08003415 	.word	0x08003415
 80033c4:	08003415 	.word	0x08003415
 80033c8:	08003403 	.word	0x08003403
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0202 	orr.w	r2, r2, #2
 80033da:	60da      	str	r2, [r3, #12]
      break;
 80033dc:	e01d      	b.n	800341a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0204 	orr.w	r2, r2, #4
 80033ec:	60da      	str	r2, [r3, #12]
      break;
 80033ee:	e014      	b.n	800341a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0208 	orr.w	r2, r2, #8
 80033fe:	60da      	str	r2, [r3, #12]
      break;
 8003400:	e00b      	b.n	800341a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0210 	orr.w	r2, r2, #16
 8003410:	60da      	str	r2, [r3, #12]
      break;
 8003412:	e002      	b.n	800341a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
      break;
 8003418:	bf00      	nop
  }

  if (status == HAL_OK)
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d14e      	bne.n	80034be <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2201      	movs	r2, #1
 8003426:	6839      	ldr	r1, [r7, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fc4f 	bl	8003ccc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <HAL_TIM_IC_Start_IT+0x280>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d022      	beq.n	800347e <HAL_TIM_IC_Start_IT+0x236>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d01d      	beq.n	800347e <HAL_TIM_IC_Start_IT+0x236>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a21      	ldr	r2, [pc, #132]	; (80034cc <HAL_TIM_IC_Start_IT+0x284>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d018      	beq.n	800347e <HAL_TIM_IC_Start_IT+0x236>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <HAL_TIM_IC_Start_IT+0x288>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_TIM_IC_Start_IT+0x236>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_TIM_IC_Start_IT+0x28c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_TIM_IC_Start_IT+0x236>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_TIM_IC_Start_IT+0x290>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_TIM_IC_Start_IT+0x236>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_TIM_IC_Start_IT+0x294>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_TIM_IC_Start_IT+0x236>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_TIM_IC_Start_IT+0x298>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d115      	bne.n	80034aa <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <HAL_TIM_IC_Start_IT+0x29c>)
 8003486:	4013      	ands	r3, r2
 8003488:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b06      	cmp	r3, #6
 800348e:	d015      	beq.n	80034bc <HAL_TIM_IC_Start_IT+0x274>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003496:	d011      	beq.n	80034bc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a8:	e008      	b.n	80034bc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e000      	b.n	80034be <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034bc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40010400 	.word	0x40010400
 80034dc:	40014000 	.word	0x40014000
 80034e0:	40001800 	.word	0x40001800
 80034e4:	00010007 	.word	0x00010007

080034e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d122      	bne.n	8003544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d11b      	bne.n	8003544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0202 	mvn.w	r2, #2
 8003514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd ff90 	bl	8001450 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9e2 	bl	80038fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9e9 	bl	8003910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b04      	cmp	r3, #4
 8003550:	d122      	bne.n	8003598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b04      	cmp	r3, #4
 800355e:	d11b      	bne.n	8003598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0204 	mvn.w	r2, #4
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd ff66 	bl	8001450 <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f9b8 	bl	80038fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f9bf 	bl	8003910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d122      	bne.n	80035ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d11b      	bne.n	80035ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0208 	mvn.w	r2, #8
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2204      	movs	r2, #4
 80035c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fd ff3c 	bl	8001450 <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f98e 	bl	80038fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f995 	bl	8003910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	2b10      	cmp	r3, #16
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0210 	mvn.w	r2, #16
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2208      	movs	r2, #8
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd ff12 	bl	8001450 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f964 	bl	80038fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f96b 	bl	8003910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0201 	mvn.w	r2, #1
 8003664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f93e 	bl	80038e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d107      	bne.n	8003698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fbd8 	bl	8003e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a6:	d10e      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b80      	cmp	r3, #128	; 0x80
 80036b4:	d107      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fbcb 	bl	8003e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d10e      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d107      	bne.n	80036f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f919 	bl	8003924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d10e      	bne.n	800371e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b20      	cmp	r3, #32
 800370c:	d107      	bne.n	800371e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f06f 0220 	mvn.w	r2, #32
 8003716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fb8b 	bl	8003e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003740:	2302      	movs	r3, #2
 8003742:	e088      	b.n	8003856 <HAL_TIM_IC_ConfigChannel+0x130>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11b      	bne.n	800378a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f000 f989 	bl	8003a78 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 020c 	bic.w	r2, r2, #12
 8003774:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6999      	ldr	r1, [r3, #24]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	619a      	str	r2, [r3, #24]
 8003788:	e060      	b.n	800384c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11c      	bne.n	80037ca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	6819      	ldr	r1, [r3, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f000 f9de 	bl	8003b60 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6999      	ldr	r1, [r3, #24]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	021a      	lsls	r2, r3, #8
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	619a      	str	r2, [r3, #24]
 80037c8:	e040      	b.n	800384c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	6819      	ldr	r1, [r3, #0]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f000 f9fb 	bl	8003bda <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 020c 	bic.w	r2, r2, #12
 80037f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69d9      	ldr	r1, [r3, #28]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	61da      	str	r2, [r3, #28]
 8003806:	e021      	b.n	800384c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d11c      	bne.n	8003848 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f000 fa18 	bl	8003c52 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003830:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69d9      	ldr	r1, [r3, #28]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	021a      	lsls	r2, r3, #8
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	61da      	str	r2, [r3, #28]
 8003846:	e001      	b.n	800384c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b0c      	cmp	r3, #12
 8003872:	d831      	bhi.n	80038d8 <HAL_TIM_ReadCapturedValue+0x78>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	080038b1 	.word	0x080038b1
 8003880:	080038d9 	.word	0x080038d9
 8003884:	080038d9 	.word	0x080038d9
 8003888:	080038d9 	.word	0x080038d9
 800388c:	080038bb 	.word	0x080038bb
 8003890:	080038d9 	.word	0x080038d9
 8003894:	080038d9 	.word	0x080038d9
 8003898:	080038d9 	.word	0x080038d9
 800389c:	080038c5 	.word	0x080038c5
 80038a0:	080038d9 	.word	0x080038d9
 80038a4:	080038d9 	.word	0x080038d9
 80038a8:	080038d9 	.word	0x080038d9
 80038ac:	080038cf 	.word	0x080038cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	60fb      	str	r3, [r7, #12]

      break;
 80038b8:	e00f      	b.n	80038da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	60fb      	str	r3, [r7, #12]

      break;
 80038c2:	e00a      	b.n	80038da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	60fb      	str	r3, [r7, #12]

      break;
 80038cc:	e005      	b.n	80038da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	60fb      	str	r3, [r7, #12]

      break;
 80038d6:	e000      	b.n	80038da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80038d8:	bf00      	nop
  }

  return tmpreg;
 80038da:	68fb      	ldr	r3, [r7, #12]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a40      	ldr	r2, [pc, #256]	; (8003a4c <TIM_Base_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d00f      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3d      	ldr	r2, [pc, #244]	; (8003a50 <TIM_Base_SetConfig+0x118>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00b      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <TIM_Base_SetConfig+0x11c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <TIM_Base_SetConfig+0x120>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <TIM_Base_SetConfig+0x124>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d108      	bne.n	800398a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <TIM_Base_SetConfig+0x114>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d02b      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d027      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <TIM_Base_SetConfig+0x118>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d023      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <TIM_Base_SetConfig+0x11c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01f      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <TIM_Base_SetConfig+0x120>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01b      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <TIM_Base_SetConfig+0x124>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d017      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <TIM_Base_SetConfig+0x128>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <TIM_Base_SetConfig+0x12c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00f      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a26      	ldr	r2, [pc, #152]	; (8003a68 <TIM_Base_SetConfig+0x130>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00b      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a25      	ldr	r2, [pc, #148]	; (8003a6c <TIM_Base_SetConfig+0x134>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d007      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a24      	ldr	r2, [pc, #144]	; (8003a70 <TIM_Base_SetConfig+0x138>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d003      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a23      	ldr	r2, [pc, #140]	; (8003a74 <TIM_Base_SetConfig+0x13c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d108      	bne.n	80039fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <TIM_Base_SetConfig+0x114>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0xf8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <TIM_Base_SetConfig+0x124>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d103      	bne.n	8003a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	615a      	str	r2, [r3, #20]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800
 8003a58:	40000c00 	.word	0x40000c00
 8003a5c:	40010400 	.word	0x40010400
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800
 8003a6c:	40001800 	.word	0x40001800
 8003a70:	40001c00 	.word	0x40001c00
 8003a74:	40002000 	.word	0x40002000

08003a78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <TIM_TI1_SetConfig+0xcc>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01b      	beq.n	8003ade <TIM_TI1_SetConfig+0x66>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d017      	beq.n	8003ade <TIM_TI1_SetConfig+0x66>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4a25      	ldr	r2, [pc, #148]	; (8003b48 <TIM_TI1_SetConfig+0xd0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <TIM_TI1_SetConfig+0x66>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <TIM_TI1_SetConfig+0xd4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00f      	beq.n	8003ade <TIM_TI1_SetConfig+0x66>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <TIM_TI1_SetConfig+0xd8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_TI1_SetConfig+0x66>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <TIM_TI1_SetConfig+0xdc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_TI1_SetConfig+0x66>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a21      	ldr	r2, [pc, #132]	; (8003b58 <TIM_TI1_SetConfig+0xe0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_TI1_SetConfig+0x66>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <TIM_TI1_SetConfig+0xe4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <TIM_TI1_SetConfig+0x6a>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <TIM_TI1_SetConfig+0x6c>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e003      	b.n	8003b02 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f023 030a 	bic.w	r3, r3, #10
 8003b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f003 030a 	and.w	r3, r3, #10
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40010400 	.word	0x40010400
 8003b58:	40014000 	.word	0x40014000
 8003b5c:	40001800 	.word	0x40001800

08003b60 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0210 	bic.w	r2, r3, #16
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	031b      	lsls	r3, r3, #12
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b087      	sub	sp, #28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b087      	sub	sp, #28
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	031b      	lsls	r3, r3, #12
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	031b      	lsls	r3, r3, #12
 8003caa:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	621a      	str	r2, [r3, #32]
}
 8003cc0:	bf00      	nop
 8003cc2:	371c      	adds	r7, #28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 031f 	and.w	r3, r3, #31
 8003cde:	2201      	movs	r2, #1
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a1a      	ldr	r2, [r3, #32]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	401a      	ands	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e06d      	b.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a30      	ldr	r2, [pc, #192]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2f      	ldr	r2, [pc, #188]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d108      	bne.n	8003d76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d022      	beq.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d01d      	beq.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d018      	beq.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1a      	ldr	r2, [pc, #104]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a15      	ldr	r2, [pc, #84]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a16      	ldr	r2, [pc, #88]	; (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10c      	bne.n	8003dfa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40010400 	.word	0x40010400
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40000c00 	.word	0x40000c00
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40001800 	.word	0x40001800

08003e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e040      	b.n	8003f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fcf0 	bl	8001878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	; 0x24
 8003e9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f8c0 	bl	8004034 <UART_SetConfig>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e022      	b.n	8003f04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fb18 	bl	80044fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fb9f 	bl	8004640 <UART_CheckIdleState>
 8003f02:	4603      	mov	r3, r0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	f040 8081 	bne.w	8004028 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <HAL_UART_Transmit+0x26>
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e079      	b.n	800402a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_UART_Transmit+0x38>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e072      	b.n	800402a <HAL_UART_Transmit+0x11e>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2221      	movs	r2, #33	; 0x21
 8003f58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f5a:	f7fd fd89 	bl	8001a70 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	88fa      	ldrh	r2, [r7, #6]
 8003f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f78:	d108      	bne.n	8003f8c <HAL_UART_Transmit+0x80>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	e003      	b.n	8003f94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f9c:	e02c      	b.n	8003ff8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2180      	movs	r1, #128	; 0x80
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fb7c 	bl	80046a6 <UART_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e038      	b.n	800402a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	e007      	b.n	8003fe6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	781a      	ldrb	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1cc      	bne.n	8003f9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2200      	movs	r2, #0
 800400c:	2140      	movs	r1, #64	; 0x40
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fb49 	bl	80046a6 <UART_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e005      	b.n	800402a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4ba6      	ldr	r3, [pc, #664]	; (80042f8 <UART_SetConfig+0x2c4>)
 8004060:	4013      	ands	r3, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	6979      	ldr	r1, [r7, #20]
 8004068:	430b      	orrs	r3, r1
 800406a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a94      	ldr	r2, [pc, #592]	; (80042fc <UART_SetConfig+0x2c8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d120      	bne.n	80040f2 <UART_SetConfig+0xbe>
 80040b0:	4b93      	ldr	r3, [pc, #588]	; (8004300 <UART_SetConfig+0x2cc>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d816      	bhi.n	80040ec <UART_SetConfig+0xb8>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <UART_SetConfig+0x90>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040e1 	.word	0x080040e1
 80040cc:	080040db 	.word	0x080040db
 80040d0:	080040e7 	.word	0x080040e7
 80040d4:	2301      	movs	r3, #1
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e150      	b.n	800437c <UART_SetConfig+0x348>
 80040da:	2302      	movs	r3, #2
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e14d      	b.n	800437c <UART_SetConfig+0x348>
 80040e0:	2304      	movs	r3, #4
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e14a      	b.n	800437c <UART_SetConfig+0x348>
 80040e6:	2308      	movs	r3, #8
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e147      	b.n	800437c <UART_SetConfig+0x348>
 80040ec:	2310      	movs	r3, #16
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e144      	b.n	800437c <UART_SetConfig+0x348>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a83      	ldr	r2, [pc, #524]	; (8004304 <UART_SetConfig+0x2d0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d132      	bne.n	8004162 <UART_SetConfig+0x12e>
 80040fc:	4b80      	ldr	r3, [pc, #512]	; (8004300 <UART_SetConfig+0x2cc>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d828      	bhi.n	800415c <UART_SetConfig+0x128>
 800410a:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0xdc>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004145 	.word	0x08004145
 8004114:	0800415d 	.word	0x0800415d
 8004118:	0800415d 	.word	0x0800415d
 800411c:	0800415d 	.word	0x0800415d
 8004120:	08004151 	.word	0x08004151
 8004124:	0800415d 	.word	0x0800415d
 8004128:	0800415d 	.word	0x0800415d
 800412c:	0800415d 	.word	0x0800415d
 8004130:	0800414b 	.word	0x0800414b
 8004134:	0800415d 	.word	0x0800415d
 8004138:	0800415d 	.word	0x0800415d
 800413c:	0800415d 	.word	0x0800415d
 8004140:	08004157 	.word	0x08004157
 8004144:	2300      	movs	r3, #0
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e118      	b.n	800437c <UART_SetConfig+0x348>
 800414a:	2302      	movs	r3, #2
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e115      	b.n	800437c <UART_SetConfig+0x348>
 8004150:	2304      	movs	r3, #4
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e112      	b.n	800437c <UART_SetConfig+0x348>
 8004156:	2308      	movs	r3, #8
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e10f      	b.n	800437c <UART_SetConfig+0x348>
 800415c:	2310      	movs	r3, #16
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e10c      	b.n	800437c <UART_SetConfig+0x348>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a68      	ldr	r2, [pc, #416]	; (8004308 <UART_SetConfig+0x2d4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d120      	bne.n	80041ae <UART_SetConfig+0x17a>
 800416c:	4b64      	ldr	r3, [pc, #400]	; (8004300 <UART_SetConfig+0x2cc>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004176:	2b30      	cmp	r3, #48	; 0x30
 8004178:	d013      	beq.n	80041a2 <UART_SetConfig+0x16e>
 800417a:	2b30      	cmp	r3, #48	; 0x30
 800417c:	d814      	bhi.n	80041a8 <UART_SetConfig+0x174>
 800417e:	2b20      	cmp	r3, #32
 8004180:	d009      	beq.n	8004196 <UART_SetConfig+0x162>
 8004182:	2b20      	cmp	r3, #32
 8004184:	d810      	bhi.n	80041a8 <UART_SetConfig+0x174>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d002      	beq.n	8004190 <UART_SetConfig+0x15c>
 800418a:	2b10      	cmp	r3, #16
 800418c:	d006      	beq.n	800419c <UART_SetConfig+0x168>
 800418e:	e00b      	b.n	80041a8 <UART_SetConfig+0x174>
 8004190:	2300      	movs	r3, #0
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e0f2      	b.n	800437c <UART_SetConfig+0x348>
 8004196:	2302      	movs	r3, #2
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e0ef      	b.n	800437c <UART_SetConfig+0x348>
 800419c:	2304      	movs	r3, #4
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e0ec      	b.n	800437c <UART_SetConfig+0x348>
 80041a2:	2308      	movs	r3, #8
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e0e9      	b.n	800437c <UART_SetConfig+0x348>
 80041a8:	2310      	movs	r3, #16
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e0e6      	b.n	800437c <UART_SetConfig+0x348>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a56      	ldr	r2, [pc, #344]	; (800430c <UART_SetConfig+0x2d8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d120      	bne.n	80041fa <UART_SetConfig+0x1c6>
 80041b8:	4b51      	ldr	r3, [pc, #324]	; (8004300 <UART_SetConfig+0x2cc>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041c2:	2bc0      	cmp	r3, #192	; 0xc0
 80041c4:	d013      	beq.n	80041ee <UART_SetConfig+0x1ba>
 80041c6:	2bc0      	cmp	r3, #192	; 0xc0
 80041c8:	d814      	bhi.n	80041f4 <UART_SetConfig+0x1c0>
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d009      	beq.n	80041e2 <UART_SetConfig+0x1ae>
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d810      	bhi.n	80041f4 <UART_SetConfig+0x1c0>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <UART_SetConfig+0x1a8>
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d006      	beq.n	80041e8 <UART_SetConfig+0x1b4>
 80041da:	e00b      	b.n	80041f4 <UART_SetConfig+0x1c0>
 80041dc:	2300      	movs	r3, #0
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e0cc      	b.n	800437c <UART_SetConfig+0x348>
 80041e2:	2302      	movs	r3, #2
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e0c9      	b.n	800437c <UART_SetConfig+0x348>
 80041e8:	2304      	movs	r3, #4
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e0c6      	b.n	800437c <UART_SetConfig+0x348>
 80041ee:	2308      	movs	r3, #8
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e0c3      	b.n	800437c <UART_SetConfig+0x348>
 80041f4:	2310      	movs	r3, #16
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e0c0      	b.n	800437c <UART_SetConfig+0x348>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a44      	ldr	r2, [pc, #272]	; (8004310 <UART_SetConfig+0x2dc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d125      	bne.n	8004250 <UART_SetConfig+0x21c>
 8004204:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <UART_SetConfig+0x2cc>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004212:	d017      	beq.n	8004244 <UART_SetConfig+0x210>
 8004214:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004218:	d817      	bhi.n	800424a <UART_SetConfig+0x216>
 800421a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800421e:	d00b      	beq.n	8004238 <UART_SetConfig+0x204>
 8004220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004224:	d811      	bhi.n	800424a <UART_SetConfig+0x216>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <UART_SetConfig+0x1fe>
 800422a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422e:	d006      	beq.n	800423e <UART_SetConfig+0x20a>
 8004230:	e00b      	b.n	800424a <UART_SetConfig+0x216>
 8004232:	2300      	movs	r3, #0
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e0a1      	b.n	800437c <UART_SetConfig+0x348>
 8004238:	2302      	movs	r3, #2
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e09e      	b.n	800437c <UART_SetConfig+0x348>
 800423e:	2304      	movs	r3, #4
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e09b      	b.n	800437c <UART_SetConfig+0x348>
 8004244:	2308      	movs	r3, #8
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e098      	b.n	800437c <UART_SetConfig+0x348>
 800424a:	2310      	movs	r3, #16
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e095      	b.n	800437c <UART_SetConfig+0x348>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <UART_SetConfig+0x2e0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d125      	bne.n	80042a6 <UART_SetConfig+0x272>
 800425a:	4b29      	ldr	r3, [pc, #164]	; (8004300 <UART_SetConfig+0x2cc>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004264:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004268:	d017      	beq.n	800429a <UART_SetConfig+0x266>
 800426a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800426e:	d817      	bhi.n	80042a0 <UART_SetConfig+0x26c>
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004274:	d00b      	beq.n	800428e <UART_SetConfig+0x25a>
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427a:	d811      	bhi.n	80042a0 <UART_SetConfig+0x26c>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <UART_SetConfig+0x254>
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004284:	d006      	beq.n	8004294 <UART_SetConfig+0x260>
 8004286:	e00b      	b.n	80042a0 <UART_SetConfig+0x26c>
 8004288:	2301      	movs	r3, #1
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e076      	b.n	800437c <UART_SetConfig+0x348>
 800428e:	2302      	movs	r3, #2
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e073      	b.n	800437c <UART_SetConfig+0x348>
 8004294:	2304      	movs	r3, #4
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e070      	b.n	800437c <UART_SetConfig+0x348>
 800429a:	2308      	movs	r3, #8
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e06d      	b.n	800437c <UART_SetConfig+0x348>
 80042a0:	2310      	movs	r3, #16
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e06a      	b.n	800437c <UART_SetConfig+0x348>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <UART_SetConfig+0x2e4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d138      	bne.n	8004322 <UART_SetConfig+0x2ee>
 80042b0:	4b13      	ldr	r3, [pc, #76]	; (8004300 <UART_SetConfig+0x2cc>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042be:	d017      	beq.n	80042f0 <UART_SetConfig+0x2bc>
 80042c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042c4:	d82a      	bhi.n	800431c <UART_SetConfig+0x2e8>
 80042c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ca:	d00b      	beq.n	80042e4 <UART_SetConfig+0x2b0>
 80042cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d0:	d824      	bhi.n	800431c <UART_SetConfig+0x2e8>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <UART_SetConfig+0x2aa>
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d006      	beq.n	80042ea <UART_SetConfig+0x2b6>
 80042dc:	e01e      	b.n	800431c <UART_SetConfig+0x2e8>
 80042de:	2300      	movs	r3, #0
 80042e0:	77fb      	strb	r3, [r7, #31]
 80042e2:	e04b      	b.n	800437c <UART_SetConfig+0x348>
 80042e4:	2302      	movs	r3, #2
 80042e6:	77fb      	strb	r3, [r7, #31]
 80042e8:	e048      	b.n	800437c <UART_SetConfig+0x348>
 80042ea:	2304      	movs	r3, #4
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e045      	b.n	800437c <UART_SetConfig+0x348>
 80042f0:	2308      	movs	r3, #8
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e042      	b.n	800437c <UART_SetConfig+0x348>
 80042f6:	bf00      	nop
 80042f8:	efff69f3 	.word	0xefff69f3
 80042fc:	40011000 	.word	0x40011000
 8004300:	40023800 	.word	0x40023800
 8004304:	40004400 	.word	0x40004400
 8004308:	40004800 	.word	0x40004800
 800430c:	40004c00 	.word	0x40004c00
 8004310:	40005000 	.word	0x40005000
 8004314:	40011400 	.word	0x40011400
 8004318:	40007800 	.word	0x40007800
 800431c:	2310      	movs	r3, #16
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e02c      	b.n	800437c <UART_SetConfig+0x348>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a72      	ldr	r2, [pc, #456]	; (80044f0 <UART_SetConfig+0x4bc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d125      	bne.n	8004378 <UART_SetConfig+0x344>
 800432c:	4b71      	ldr	r3, [pc, #452]	; (80044f4 <UART_SetConfig+0x4c0>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004336:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800433a:	d017      	beq.n	800436c <UART_SetConfig+0x338>
 800433c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004340:	d817      	bhi.n	8004372 <UART_SetConfig+0x33e>
 8004342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004346:	d00b      	beq.n	8004360 <UART_SetConfig+0x32c>
 8004348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800434c:	d811      	bhi.n	8004372 <UART_SetConfig+0x33e>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <UART_SetConfig+0x326>
 8004352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004356:	d006      	beq.n	8004366 <UART_SetConfig+0x332>
 8004358:	e00b      	b.n	8004372 <UART_SetConfig+0x33e>
 800435a:	2300      	movs	r3, #0
 800435c:	77fb      	strb	r3, [r7, #31]
 800435e:	e00d      	b.n	800437c <UART_SetConfig+0x348>
 8004360:	2302      	movs	r3, #2
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e00a      	b.n	800437c <UART_SetConfig+0x348>
 8004366:	2304      	movs	r3, #4
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e007      	b.n	800437c <UART_SetConfig+0x348>
 800436c:	2308      	movs	r3, #8
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e004      	b.n	800437c <UART_SetConfig+0x348>
 8004372:	2310      	movs	r3, #16
 8004374:	77fb      	strb	r3, [r7, #31]
 8004376:	e001      	b.n	800437c <UART_SetConfig+0x348>
 8004378:	2310      	movs	r3, #16
 800437a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004384:	d15b      	bne.n	800443e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004386:	7ffb      	ldrb	r3, [r7, #31]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d828      	bhi.n	80043de <UART_SetConfig+0x3aa>
 800438c:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <UART_SetConfig+0x360>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043c1 	.word	0x080043c1
 800439c:	080043c9 	.word	0x080043c9
 80043a0:	080043df 	.word	0x080043df
 80043a4:	080043cf 	.word	0x080043cf
 80043a8:	080043df 	.word	0x080043df
 80043ac:	080043df 	.word	0x080043df
 80043b0:	080043df 	.word	0x080043df
 80043b4:	080043d7 	.word	0x080043d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b8:	f7fe fad6 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 80043bc:	61b8      	str	r0, [r7, #24]
        break;
 80043be:	e013      	b.n	80043e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043c0:	f7fe fae6 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 80043c4:	61b8      	str	r0, [r7, #24]
        break;
 80043c6:	e00f      	b.n	80043e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c8:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <UART_SetConfig+0x4c4>)
 80043ca:	61bb      	str	r3, [r7, #24]
        break;
 80043cc:	e00c      	b.n	80043e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ce:	f7fe f9f9 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 80043d2:	61b8      	str	r0, [r7, #24]
        break;
 80043d4:	e008      	b.n	80043e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043da:	61bb      	str	r3, [r7, #24]
        break;
 80043dc:	e004      	b.n	80043e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	77bb      	strb	r3, [r7, #30]
        break;
 80043e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d074      	beq.n	80044d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	005a      	lsls	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	441a      	add	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b0f      	cmp	r3, #15
 8004408:	d916      	bls.n	8004438 <UART_SetConfig+0x404>
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004410:	d212      	bcs.n	8004438 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	b29b      	uxth	r3, r3
 8004416:	f023 030f 	bic.w	r3, r3, #15
 800441a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	b29b      	uxth	r3, r3
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	b29a      	uxth	r2, r3
 8004428:	89fb      	ldrh	r3, [r7, #14]
 800442a:	4313      	orrs	r3, r2
 800442c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	89fa      	ldrh	r2, [r7, #14]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	e04f      	b.n	80044d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	77bb      	strb	r3, [r7, #30]
 800443c:	e04c      	b.n	80044d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800443e:	7ffb      	ldrb	r3, [r7, #31]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d828      	bhi.n	8004496 <UART_SetConfig+0x462>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0x418>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004471 	.word	0x08004471
 8004450:	08004479 	.word	0x08004479
 8004454:	08004481 	.word	0x08004481
 8004458:	08004497 	.word	0x08004497
 800445c:	08004487 	.word	0x08004487
 8004460:	08004497 	.word	0x08004497
 8004464:	08004497 	.word	0x08004497
 8004468:	08004497 	.word	0x08004497
 800446c:	0800448f 	.word	0x0800448f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004470:	f7fe fa7a 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8004474:	61b8      	str	r0, [r7, #24]
        break;
 8004476:	e013      	b.n	80044a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7fe fa8a 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 800447c:	61b8      	str	r0, [r7, #24]
        break;
 800447e:	e00f      	b.n	80044a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004480:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <UART_SetConfig+0x4c4>)
 8004482:	61bb      	str	r3, [r7, #24]
        break;
 8004484:	e00c      	b.n	80044a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004486:	f7fe f99d 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 800448a:	61b8      	str	r0, [r7, #24]
        break;
 800448c:	e008      	b.n	80044a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004492:	61bb      	str	r3, [r7, #24]
        break;
 8004494:	e004      	b.n	80044a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	77bb      	strb	r3, [r7, #30]
        break;
 800449e:	bf00      	nop
    }

    if (pclk != 0U)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	085a      	lsrs	r2, r3, #1
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	441a      	add	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d909      	bls.n	80044d4 <UART_SetConfig+0x4a0>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c6:	d205      	bcs.n	80044d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60da      	str	r2, [r3, #12]
 80044d2:	e001      	b.n	80044d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40007c00 	.word	0x40007c00
 80044f4:	40023800 	.word	0x40023800
 80044f8:	00f42400 	.word	0x00f42400

080044fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01a      	beq.n	8004612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fa:	d10a      	bne.n	8004612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af02      	add	r7, sp, #8
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004650:	f7fd fa0e 	bl	8001a70 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b08      	cmp	r3, #8
 8004662:	d10e      	bne.n	8004682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f817 	bl	80046a6 <UART_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e00d      	b.n	800469e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b09c      	sub	sp, #112	; 0x70
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b6:	e0a5      	b.n	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	f000 80a1 	beq.w	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fd f9d5 	bl	8001a70 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d13e      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ec:	667b      	str	r3, [r7, #100]	; 0x64
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e6      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3308      	adds	r3, #8
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	663b      	str	r3, [r7, #96]	; 0x60
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800472a:	64ba      	str	r2, [r7, #72]	; 0x48
 800472c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e067      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d04f      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004772:	d147      	bne.n	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800477c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e6      	bne.n	800477e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	613b      	str	r3, [r7, #16]
   return(result);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047d0:	623a      	str	r2, [r7, #32]
 80047d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	69f9      	ldr	r1, [r7, #28]
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e010      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	429a      	cmp	r2, r3
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	429a      	cmp	r2, r3
 8004820:	f43f af4a 	beq.w	80046b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3770      	adds	r7, #112	; 0x70
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <__errno>:
 8004830:	4b01      	ldr	r3, [pc, #4]	; (8004838 <__errno+0x8>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20000010 	.word	0x20000010

0800483c <__libc_init_array>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	4d0d      	ldr	r5, [pc, #52]	; (8004874 <__libc_init_array+0x38>)
 8004840:	4c0d      	ldr	r4, [pc, #52]	; (8004878 <__libc_init_array+0x3c>)
 8004842:	1b64      	subs	r4, r4, r5
 8004844:	10a4      	asrs	r4, r4, #2
 8004846:	2600      	movs	r6, #0
 8004848:	42a6      	cmp	r6, r4
 800484a:	d109      	bne.n	8004860 <__libc_init_array+0x24>
 800484c:	4d0b      	ldr	r5, [pc, #44]	; (800487c <__libc_init_array+0x40>)
 800484e:	4c0c      	ldr	r4, [pc, #48]	; (8004880 <__libc_init_array+0x44>)
 8004850:	f002 fd4e 	bl	80072f0 <_init>
 8004854:	1b64      	subs	r4, r4, r5
 8004856:	10a4      	asrs	r4, r4, #2
 8004858:	2600      	movs	r6, #0
 800485a:	42a6      	cmp	r6, r4
 800485c:	d105      	bne.n	800486a <__libc_init_array+0x2e>
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	f855 3b04 	ldr.w	r3, [r5], #4
 8004864:	4798      	blx	r3
 8004866:	3601      	adds	r6, #1
 8004868:	e7ee      	b.n	8004848 <__libc_init_array+0xc>
 800486a:	f855 3b04 	ldr.w	r3, [r5], #4
 800486e:	4798      	blx	r3
 8004870:	3601      	adds	r6, #1
 8004872:	e7f2      	b.n	800485a <__libc_init_array+0x1e>
 8004874:	0800772c 	.word	0x0800772c
 8004878:	0800772c 	.word	0x0800772c
 800487c:	0800772c 	.word	0x0800772c
 8004880:	08007730 	.word	0x08007730

08004884 <memset>:
 8004884:	4402      	add	r2, r0
 8004886:	4603      	mov	r3, r0
 8004888:	4293      	cmp	r3, r2
 800488a:	d100      	bne.n	800488e <memset+0xa>
 800488c:	4770      	bx	lr
 800488e:	f803 1b01 	strb.w	r1, [r3], #1
 8004892:	e7f9      	b.n	8004888 <memset+0x4>

08004894 <__cvt>:
 8004894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004898:	ec55 4b10 	vmov	r4, r5, d0
 800489c:	2d00      	cmp	r5, #0
 800489e:	460e      	mov	r6, r1
 80048a0:	4619      	mov	r1, r3
 80048a2:	462b      	mov	r3, r5
 80048a4:	bfbb      	ittet	lt
 80048a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048aa:	461d      	movlt	r5, r3
 80048ac:	2300      	movge	r3, #0
 80048ae:	232d      	movlt	r3, #45	; 0x2d
 80048b0:	700b      	strb	r3, [r1, #0]
 80048b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048b8:	4691      	mov	r9, r2
 80048ba:	f023 0820 	bic.w	r8, r3, #32
 80048be:	bfbc      	itt	lt
 80048c0:	4622      	movlt	r2, r4
 80048c2:	4614      	movlt	r4, r2
 80048c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048c8:	d005      	beq.n	80048d6 <__cvt+0x42>
 80048ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048ce:	d100      	bne.n	80048d2 <__cvt+0x3e>
 80048d0:	3601      	adds	r6, #1
 80048d2:	2102      	movs	r1, #2
 80048d4:	e000      	b.n	80048d8 <__cvt+0x44>
 80048d6:	2103      	movs	r1, #3
 80048d8:	ab03      	add	r3, sp, #12
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	ab02      	add	r3, sp, #8
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	ec45 4b10 	vmov	d0, r4, r5
 80048e4:	4653      	mov	r3, sl
 80048e6:	4632      	mov	r2, r6
 80048e8:	f000 fce2 	bl	80052b0 <_dtoa_r>
 80048ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048f0:	4607      	mov	r7, r0
 80048f2:	d102      	bne.n	80048fa <__cvt+0x66>
 80048f4:	f019 0f01 	tst.w	r9, #1
 80048f8:	d022      	beq.n	8004940 <__cvt+0xac>
 80048fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048fe:	eb07 0906 	add.w	r9, r7, r6
 8004902:	d110      	bne.n	8004926 <__cvt+0x92>
 8004904:	783b      	ldrb	r3, [r7, #0]
 8004906:	2b30      	cmp	r3, #48	; 0x30
 8004908:	d10a      	bne.n	8004920 <__cvt+0x8c>
 800490a:	2200      	movs	r2, #0
 800490c:	2300      	movs	r3, #0
 800490e:	4620      	mov	r0, r4
 8004910:	4629      	mov	r1, r5
 8004912:	f7fc f8f9 	bl	8000b08 <__aeabi_dcmpeq>
 8004916:	b918      	cbnz	r0, 8004920 <__cvt+0x8c>
 8004918:	f1c6 0601 	rsb	r6, r6, #1
 800491c:	f8ca 6000 	str.w	r6, [sl]
 8004920:	f8da 3000 	ldr.w	r3, [sl]
 8004924:	4499      	add	r9, r3
 8004926:	2200      	movs	r2, #0
 8004928:	2300      	movs	r3, #0
 800492a:	4620      	mov	r0, r4
 800492c:	4629      	mov	r1, r5
 800492e:	f7fc f8eb 	bl	8000b08 <__aeabi_dcmpeq>
 8004932:	b108      	cbz	r0, 8004938 <__cvt+0xa4>
 8004934:	f8cd 900c 	str.w	r9, [sp, #12]
 8004938:	2230      	movs	r2, #48	; 0x30
 800493a:	9b03      	ldr	r3, [sp, #12]
 800493c:	454b      	cmp	r3, r9
 800493e:	d307      	bcc.n	8004950 <__cvt+0xbc>
 8004940:	9b03      	ldr	r3, [sp, #12]
 8004942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004944:	1bdb      	subs	r3, r3, r7
 8004946:	4638      	mov	r0, r7
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	b004      	add	sp, #16
 800494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004950:	1c59      	adds	r1, r3, #1
 8004952:	9103      	str	r1, [sp, #12]
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e7f0      	b.n	800493a <__cvt+0xa6>

08004958 <__exponent>:
 8004958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800495a:	4603      	mov	r3, r0
 800495c:	2900      	cmp	r1, #0
 800495e:	bfb8      	it	lt
 8004960:	4249      	neglt	r1, r1
 8004962:	f803 2b02 	strb.w	r2, [r3], #2
 8004966:	bfb4      	ite	lt
 8004968:	222d      	movlt	r2, #45	; 0x2d
 800496a:	222b      	movge	r2, #43	; 0x2b
 800496c:	2909      	cmp	r1, #9
 800496e:	7042      	strb	r2, [r0, #1]
 8004970:	dd2a      	ble.n	80049c8 <__exponent+0x70>
 8004972:	f10d 0407 	add.w	r4, sp, #7
 8004976:	46a4      	mov	ip, r4
 8004978:	270a      	movs	r7, #10
 800497a:	46a6      	mov	lr, r4
 800497c:	460a      	mov	r2, r1
 800497e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004982:	fb07 1516 	mls	r5, r7, r6, r1
 8004986:	3530      	adds	r5, #48	; 0x30
 8004988:	2a63      	cmp	r2, #99	; 0x63
 800498a:	f104 34ff 	add.w	r4, r4, #4294967295
 800498e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004992:	4631      	mov	r1, r6
 8004994:	dcf1      	bgt.n	800497a <__exponent+0x22>
 8004996:	3130      	adds	r1, #48	; 0x30
 8004998:	f1ae 0502 	sub.w	r5, lr, #2
 800499c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049a0:	1c44      	adds	r4, r0, #1
 80049a2:	4629      	mov	r1, r5
 80049a4:	4561      	cmp	r1, ip
 80049a6:	d30a      	bcc.n	80049be <__exponent+0x66>
 80049a8:	f10d 0209 	add.w	r2, sp, #9
 80049ac:	eba2 020e 	sub.w	r2, r2, lr
 80049b0:	4565      	cmp	r5, ip
 80049b2:	bf88      	it	hi
 80049b4:	2200      	movhi	r2, #0
 80049b6:	4413      	add	r3, r2
 80049b8:	1a18      	subs	r0, r3, r0
 80049ba:	b003      	add	sp, #12
 80049bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049c6:	e7ed      	b.n	80049a4 <__exponent+0x4c>
 80049c8:	2330      	movs	r3, #48	; 0x30
 80049ca:	3130      	adds	r1, #48	; 0x30
 80049cc:	7083      	strb	r3, [r0, #2]
 80049ce:	70c1      	strb	r1, [r0, #3]
 80049d0:	1d03      	adds	r3, r0, #4
 80049d2:	e7f1      	b.n	80049b8 <__exponent+0x60>

080049d4 <_printf_float>:
 80049d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d8:	ed2d 8b02 	vpush	{d8}
 80049dc:	b08d      	sub	sp, #52	; 0x34
 80049de:	460c      	mov	r4, r1
 80049e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80049e4:	4616      	mov	r6, r2
 80049e6:	461f      	mov	r7, r3
 80049e8:	4605      	mov	r5, r0
 80049ea:	f001 fb45 	bl	8006078 <_localeconv_r>
 80049ee:	f8d0 a000 	ldr.w	sl, [r0]
 80049f2:	4650      	mov	r0, sl
 80049f4:	f7fb fc0c 	bl	8000210 <strlen>
 80049f8:	2300      	movs	r3, #0
 80049fa:	930a      	str	r3, [sp, #40]	; 0x28
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	9305      	str	r3, [sp, #20]
 8004a00:	f8d8 3000 	ldr.w	r3, [r8]
 8004a04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a08:	3307      	adds	r3, #7
 8004a0a:	f023 0307 	bic.w	r3, r3, #7
 8004a0e:	f103 0208 	add.w	r2, r3, #8
 8004a12:	f8c8 2000 	str.w	r2, [r8]
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a26:	9307      	str	r3, [sp, #28]
 8004a28:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a2c:	ee08 0a10 	vmov	s16, r0
 8004a30:	4b9f      	ldr	r3, [pc, #636]	; (8004cb0 <_printf_float+0x2dc>)
 8004a32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a36:	f04f 32ff 	mov.w	r2, #4294967295
 8004a3a:	f7fc f897 	bl	8000b6c <__aeabi_dcmpun>
 8004a3e:	bb88      	cbnz	r0, 8004aa4 <_printf_float+0xd0>
 8004a40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a44:	4b9a      	ldr	r3, [pc, #616]	; (8004cb0 <_printf_float+0x2dc>)
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4a:	f7fc f871 	bl	8000b30 <__aeabi_dcmple>
 8004a4e:	bb48      	cbnz	r0, 8004aa4 <_printf_float+0xd0>
 8004a50:	2200      	movs	r2, #0
 8004a52:	2300      	movs	r3, #0
 8004a54:	4640      	mov	r0, r8
 8004a56:	4649      	mov	r1, r9
 8004a58:	f7fc f860 	bl	8000b1c <__aeabi_dcmplt>
 8004a5c:	b110      	cbz	r0, 8004a64 <_printf_float+0x90>
 8004a5e:	232d      	movs	r3, #45	; 0x2d
 8004a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a64:	4b93      	ldr	r3, [pc, #588]	; (8004cb4 <_printf_float+0x2e0>)
 8004a66:	4894      	ldr	r0, [pc, #592]	; (8004cb8 <_printf_float+0x2e4>)
 8004a68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a6c:	bf94      	ite	ls
 8004a6e:	4698      	movls	r8, r3
 8004a70:	4680      	movhi	r8, r0
 8004a72:	2303      	movs	r3, #3
 8004a74:	6123      	str	r3, [r4, #16]
 8004a76:	9b05      	ldr	r3, [sp, #20]
 8004a78:	f023 0204 	bic.w	r2, r3, #4
 8004a7c:	6022      	str	r2, [r4, #0]
 8004a7e:	f04f 0900 	mov.w	r9, #0
 8004a82:	9700      	str	r7, [sp, #0]
 8004a84:	4633      	mov	r3, r6
 8004a86:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 f9d8 	bl	8004e40 <_printf_common>
 8004a90:	3001      	adds	r0, #1
 8004a92:	f040 8090 	bne.w	8004bb6 <_printf_float+0x1e2>
 8004a96:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9a:	b00d      	add	sp, #52	; 0x34
 8004a9c:	ecbd 8b02 	vpop	{d8}
 8004aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	4649      	mov	r1, r9
 8004aac:	f7fc f85e 	bl	8000b6c <__aeabi_dcmpun>
 8004ab0:	b140      	cbz	r0, 8004ac4 <_printf_float+0xf0>
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bfbc      	itt	lt
 8004ab8:	232d      	movlt	r3, #45	; 0x2d
 8004aba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004abe:	487f      	ldr	r0, [pc, #508]	; (8004cbc <_printf_float+0x2e8>)
 8004ac0:	4b7f      	ldr	r3, [pc, #508]	; (8004cc0 <_printf_float+0x2ec>)
 8004ac2:	e7d1      	b.n	8004a68 <_printf_float+0x94>
 8004ac4:	6863      	ldr	r3, [r4, #4]
 8004ac6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004aca:	9206      	str	r2, [sp, #24]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	d13f      	bne.n	8004b50 <_printf_float+0x17c>
 8004ad0:	2306      	movs	r3, #6
 8004ad2:	6063      	str	r3, [r4, #4]
 8004ad4:	9b05      	ldr	r3, [sp, #20]
 8004ad6:	6861      	ldr	r1, [r4, #4]
 8004ad8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004adc:	2300      	movs	r3, #0
 8004ade:	9303      	str	r3, [sp, #12]
 8004ae0:	ab0a      	add	r3, sp, #40	; 0x28
 8004ae2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ae6:	ab09      	add	r3, sp, #36	; 0x24
 8004ae8:	ec49 8b10 	vmov	d0, r8, r9
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	6022      	str	r2, [r4, #0]
 8004af0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004af4:	4628      	mov	r0, r5
 8004af6:	f7ff fecd 	bl	8004894 <__cvt>
 8004afa:	9b06      	ldr	r3, [sp, #24]
 8004afc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004afe:	2b47      	cmp	r3, #71	; 0x47
 8004b00:	4680      	mov	r8, r0
 8004b02:	d108      	bne.n	8004b16 <_printf_float+0x142>
 8004b04:	1cc8      	adds	r0, r1, #3
 8004b06:	db02      	blt.n	8004b0e <_printf_float+0x13a>
 8004b08:	6863      	ldr	r3, [r4, #4]
 8004b0a:	4299      	cmp	r1, r3
 8004b0c:	dd41      	ble.n	8004b92 <_printf_float+0x1be>
 8004b0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b12:	fa5f fb8b 	uxtb.w	fp, fp
 8004b16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b1a:	d820      	bhi.n	8004b5e <_printf_float+0x18a>
 8004b1c:	3901      	subs	r1, #1
 8004b1e:	465a      	mov	r2, fp
 8004b20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b24:	9109      	str	r1, [sp, #36]	; 0x24
 8004b26:	f7ff ff17 	bl	8004958 <__exponent>
 8004b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b2c:	1813      	adds	r3, r2, r0
 8004b2e:	2a01      	cmp	r2, #1
 8004b30:	4681      	mov	r9, r0
 8004b32:	6123      	str	r3, [r4, #16]
 8004b34:	dc02      	bgt.n	8004b3c <_printf_float+0x168>
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	07d2      	lsls	r2, r2, #31
 8004b3a:	d501      	bpl.n	8004b40 <_printf_float+0x16c>
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d09c      	beq.n	8004a82 <_printf_float+0xae>
 8004b48:	232d      	movs	r3, #45	; 0x2d
 8004b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b4e:	e798      	b.n	8004a82 <_printf_float+0xae>
 8004b50:	9a06      	ldr	r2, [sp, #24]
 8004b52:	2a47      	cmp	r2, #71	; 0x47
 8004b54:	d1be      	bne.n	8004ad4 <_printf_float+0x100>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1bc      	bne.n	8004ad4 <_printf_float+0x100>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e7b9      	b.n	8004ad2 <_printf_float+0xfe>
 8004b5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b62:	d118      	bne.n	8004b96 <_printf_float+0x1c2>
 8004b64:	2900      	cmp	r1, #0
 8004b66:	6863      	ldr	r3, [r4, #4]
 8004b68:	dd0b      	ble.n	8004b82 <_printf_float+0x1ae>
 8004b6a:	6121      	str	r1, [r4, #16]
 8004b6c:	b913      	cbnz	r3, 8004b74 <_printf_float+0x1a0>
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	07d0      	lsls	r0, r2, #31
 8004b72:	d502      	bpl.n	8004b7a <_printf_float+0x1a6>
 8004b74:	3301      	adds	r3, #1
 8004b76:	440b      	add	r3, r1
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b7c:	f04f 0900 	mov.w	r9, #0
 8004b80:	e7de      	b.n	8004b40 <_printf_float+0x16c>
 8004b82:	b913      	cbnz	r3, 8004b8a <_printf_float+0x1b6>
 8004b84:	6822      	ldr	r2, [r4, #0]
 8004b86:	07d2      	lsls	r2, r2, #31
 8004b88:	d501      	bpl.n	8004b8e <_printf_float+0x1ba>
 8004b8a:	3302      	adds	r3, #2
 8004b8c:	e7f4      	b.n	8004b78 <_printf_float+0x1a4>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e7f2      	b.n	8004b78 <_printf_float+0x1a4>
 8004b92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b98:	4299      	cmp	r1, r3
 8004b9a:	db05      	blt.n	8004ba8 <_printf_float+0x1d4>
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	6121      	str	r1, [r4, #16]
 8004ba0:	07d8      	lsls	r0, r3, #31
 8004ba2:	d5ea      	bpl.n	8004b7a <_printf_float+0x1a6>
 8004ba4:	1c4b      	adds	r3, r1, #1
 8004ba6:	e7e7      	b.n	8004b78 <_printf_float+0x1a4>
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	bfd4      	ite	le
 8004bac:	f1c1 0202 	rsble	r2, r1, #2
 8004bb0:	2201      	movgt	r2, #1
 8004bb2:	4413      	add	r3, r2
 8004bb4:	e7e0      	b.n	8004b78 <_printf_float+0x1a4>
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	055a      	lsls	r2, r3, #21
 8004bba:	d407      	bmi.n	8004bcc <_printf_float+0x1f8>
 8004bbc:	6923      	ldr	r3, [r4, #16]
 8004bbe:	4642      	mov	r2, r8
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	47b8      	blx	r7
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d12c      	bne.n	8004c24 <_printf_float+0x250>
 8004bca:	e764      	b.n	8004a96 <_printf_float+0xc2>
 8004bcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bd0:	f240 80e0 	bls.w	8004d94 <_printf_float+0x3c0>
 8004bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f7fb ff94 	bl	8000b08 <__aeabi_dcmpeq>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d034      	beq.n	8004c4e <_printf_float+0x27a>
 8004be4:	4a37      	ldr	r2, [pc, #220]	; (8004cc4 <_printf_float+0x2f0>)
 8004be6:	2301      	movs	r3, #1
 8004be8:	4631      	mov	r1, r6
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b8      	blx	r7
 8004bee:	3001      	adds	r0, #1
 8004bf0:	f43f af51 	beq.w	8004a96 <_printf_float+0xc2>
 8004bf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	db02      	blt.n	8004c02 <_printf_float+0x22e>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	07d8      	lsls	r0, r3, #31
 8004c00:	d510      	bpl.n	8004c24 <_printf_float+0x250>
 8004c02:	ee18 3a10 	vmov	r3, s16
 8004c06:	4652      	mov	r2, sl
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	47b8      	blx	r7
 8004c0e:	3001      	adds	r0, #1
 8004c10:	f43f af41 	beq.w	8004a96 <_printf_float+0xc2>
 8004c14:	f04f 0800 	mov.w	r8, #0
 8004c18:	f104 091a 	add.w	r9, r4, #26
 8004c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	4543      	cmp	r3, r8
 8004c22:	dc09      	bgt.n	8004c38 <_printf_float+0x264>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	079b      	lsls	r3, r3, #30
 8004c28:	f100 8105 	bmi.w	8004e36 <_printf_float+0x462>
 8004c2c:	68e0      	ldr	r0, [r4, #12]
 8004c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c30:	4298      	cmp	r0, r3
 8004c32:	bfb8      	it	lt
 8004c34:	4618      	movlt	r0, r3
 8004c36:	e730      	b.n	8004a9a <_printf_float+0xc6>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	464a      	mov	r2, r9
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	f43f af27 	beq.w	8004a96 <_printf_float+0xc2>
 8004c48:	f108 0801 	add.w	r8, r8, #1
 8004c4c:	e7e6      	b.n	8004c1c <_printf_float+0x248>
 8004c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	dc39      	bgt.n	8004cc8 <_printf_float+0x2f4>
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <_printf_float+0x2f0>)
 8004c56:	2301      	movs	r3, #1
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f43f af19 	beq.w	8004a96 <_printf_float+0xc2>
 8004c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	d102      	bne.n	8004c72 <_printf_float+0x29e>
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	07d9      	lsls	r1, r3, #31
 8004c70:	d5d8      	bpl.n	8004c24 <_printf_float+0x250>
 8004c72:	ee18 3a10 	vmov	r3, s16
 8004c76:	4652      	mov	r2, sl
 8004c78:	4631      	mov	r1, r6
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f43f af09 	beq.w	8004a96 <_printf_float+0xc2>
 8004c84:	f04f 0900 	mov.w	r9, #0
 8004c88:	f104 0a1a 	add.w	sl, r4, #26
 8004c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c8e:	425b      	negs	r3, r3
 8004c90:	454b      	cmp	r3, r9
 8004c92:	dc01      	bgt.n	8004c98 <_printf_float+0x2c4>
 8004c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c96:	e792      	b.n	8004bbe <_printf_float+0x1ea>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f aef7 	beq.w	8004a96 <_printf_float+0xc2>
 8004ca8:	f109 0901 	add.w	r9, r9, #1
 8004cac:	e7ee      	b.n	8004c8c <_printf_float+0x2b8>
 8004cae:	bf00      	nop
 8004cb0:	7fefffff 	.word	0x7fefffff
 8004cb4:	0800734c 	.word	0x0800734c
 8004cb8:	08007350 	.word	0x08007350
 8004cbc:	08007358 	.word	0x08007358
 8004cc0:	08007354 	.word	0x08007354
 8004cc4:	0800735c 	.word	0x0800735c
 8004cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	bfa8      	it	ge
 8004cd0:	461a      	movge	r2, r3
 8004cd2:	2a00      	cmp	r2, #0
 8004cd4:	4691      	mov	r9, r2
 8004cd6:	dc37      	bgt.n	8004d48 <_printf_float+0x374>
 8004cd8:	f04f 0b00 	mov.w	fp, #0
 8004cdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ce0:	f104 021a 	add.w	r2, r4, #26
 8004ce4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ce6:	9305      	str	r3, [sp, #20]
 8004ce8:	eba3 0309 	sub.w	r3, r3, r9
 8004cec:	455b      	cmp	r3, fp
 8004cee:	dc33      	bgt.n	8004d58 <_printf_float+0x384>
 8004cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	db3b      	blt.n	8004d70 <_printf_float+0x39c>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	07da      	lsls	r2, r3, #31
 8004cfc:	d438      	bmi.n	8004d70 <_printf_float+0x39c>
 8004cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d00:	9a05      	ldr	r2, [sp, #20]
 8004d02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d04:	1a9a      	subs	r2, r3, r2
 8004d06:	eba3 0901 	sub.w	r9, r3, r1
 8004d0a:	4591      	cmp	r9, r2
 8004d0c:	bfa8      	it	ge
 8004d0e:	4691      	movge	r9, r2
 8004d10:	f1b9 0f00 	cmp.w	r9, #0
 8004d14:	dc35      	bgt.n	8004d82 <_printf_float+0x3ae>
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d1e:	f104 0a1a 	add.w	sl, r4, #26
 8004d22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	eba3 0309 	sub.w	r3, r3, r9
 8004d2c:	4543      	cmp	r3, r8
 8004d2e:	f77f af79 	ble.w	8004c24 <_printf_float+0x250>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4652      	mov	r2, sl
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	f43f aeaa 	beq.w	8004a96 <_printf_float+0xc2>
 8004d42:	f108 0801 	add.w	r8, r8, #1
 8004d46:	e7ec      	b.n	8004d22 <_printf_float+0x34e>
 8004d48:	4613      	mov	r3, r2
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	4628      	mov	r0, r5
 8004d50:	47b8      	blx	r7
 8004d52:	3001      	adds	r0, #1
 8004d54:	d1c0      	bne.n	8004cd8 <_printf_float+0x304>
 8004d56:	e69e      	b.n	8004a96 <_printf_float+0xc2>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	9205      	str	r2, [sp, #20]
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	f43f ae97 	beq.w	8004a96 <_printf_float+0xc2>
 8004d68:	9a05      	ldr	r2, [sp, #20]
 8004d6a:	f10b 0b01 	add.w	fp, fp, #1
 8004d6e:	e7b9      	b.n	8004ce4 <_printf_float+0x310>
 8004d70:	ee18 3a10 	vmov	r3, s16
 8004d74:	4652      	mov	r2, sl
 8004d76:	4631      	mov	r1, r6
 8004d78:	4628      	mov	r0, r5
 8004d7a:	47b8      	blx	r7
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d1be      	bne.n	8004cfe <_printf_float+0x32a>
 8004d80:	e689      	b.n	8004a96 <_printf_float+0xc2>
 8004d82:	9a05      	ldr	r2, [sp, #20]
 8004d84:	464b      	mov	r3, r9
 8004d86:	4442      	add	r2, r8
 8004d88:	4631      	mov	r1, r6
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	47b8      	blx	r7
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d1c1      	bne.n	8004d16 <_printf_float+0x342>
 8004d92:	e680      	b.n	8004a96 <_printf_float+0xc2>
 8004d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d96:	2a01      	cmp	r2, #1
 8004d98:	dc01      	bgt.n	8004d9e <_printf_float+0x3ca>
 8004d9a:	07db      	lsls	r3, r3, #31
 8004d9c:	d538      	bpl.n	8004e10 <_printf_float+0x43c>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	4642      	mov	r2, r8
 8004da2:	4631      	mov	r1, r6
 8004da4:	4628      	mov	r0, r5
 8004da6:	47b8      	blx	r7
 8004da8:	3001      	adds	r0, #1
 8004daa:	f43f ae74 	beq.w	8004a96 <_printf_float+0xc2>
 8004dae:	ee18 3a10 	vmov	r3, s16
 8004db2:	4652      	mov	r2, sl
 8004db4:	4631      	mov	r1, r6
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	3001      	adds	r0, #1
 8004dbc:	f43f ae6b 	beq.w	8004a96 <_printf_float+0xc2>
 8004dc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f7fb fe9e 	bl	8000b08 <__aeabi_dcmpeq>
 8004dcc:	b9d8      	cbnz	r0, 8004e06 <_printf_float+0x432>
 8004dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd0:	f108 0201 	add.w	r2, r8, #1
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d10e      	bne.n	8004dfe <_printf_float+0x42a>
 8004de0:	e659      	b.n	8004a96 <_printf_float+0xc2>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4652      	mov	r2, sl
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f ae52 	beq.w	8004a96 <_printf_float+0xc2>
 8004df2:	f108 0801 	add.w	r8, r8, #1
 8004df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	4543      	cmp	r3, r8
 8004dfc:	dcf1      	bgt.n	8004de2 <_printf_float+0x40e>
 8004dfe:	464b      	mov	r3, r9
 8004e00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e04:	e6dc      	b.n	8004bc0 <_printf_float+0x1ec>
 8004e06:	f04f 0800 	mov.w	r8, #0
 8004e0a:	f104 0a1a 	add.w	sl, r4, #26
 8004e0e:	e7f2      	b.n	8004df6 <_printf_float+0x422>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4642      	mov	r2, r8
 8004e14:	e7df      	b.n	8004dd6 <_printf_float+0x402>
 8004e16:	2301      	movs	r3, #1
 8004e18:	464a      	mov	r2, r9
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae38 	beq.w	8004a96 <_printf_float+0xc2>
 8004e26:	f108 0801 	add.w	r8, r8, #1
 8004e2a:	68e3      	ldr	r3, [r4, #12]
 8004e2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e2e:	1a5b      	subs	r3, r3, r1
 8004e30:	4543      	cmp	r3, r8
 8004e32:	dcf0      	bgt.n	8004e16 <_printf_float+0x442>
 8004e34:	e6fa      	b.n	8004c2c <_printf_float+0x258>
 8004e36:	f04f 0800 	mov.w	r8, #0
 8004e3a:	f104 0919 	add.w	r9, r4, #25
 8004e3e:	e7f4      	b.n	8004e2a <_printf_float+0x456>

08004e40 <_printf_common>:
 8004e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	4616      	mov	r6, r2
 8004e46:	4699      	mov	r9, r3
 8004e48:	688a      	ldr	r2, [r1, #8]
 8004e4a:	690b      	ldr	r3, [r1, #16]
 8004e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e50:	4293      	cmp	r3, r2
 8004e52:	bfb8      	it	lt
 8004e54:	4613      	movlt	r3, r2
 8004e56:	6033      	str	r3, [r6, #0]
 8004e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	b10a      	cbz	r2, 8004e66 <_printf_common+0x26>
 8004e62:	3301      	adds	r3, #1
 8004e64:	6033      	str	r3, [r6, #0]
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	0699      	lsls	r1, r3, #26
 8004e6a:	bf42      	ittt	mi
 8004e6c:	6833      	ldrmi	r3, [r6, #0]
 8004e6e:	3302      	addmi	r3, #2
 8004e70:	6033      	strmi	r3, [r6, #0]
 8004e72:	6825      	ldr	r5, [r4, #0]
 8004e74:	f015 0506 	ands.w	r5, r5, #6
 8004e78:	d106      	bne.n	8004e88 <_printf_common+0x48>
 8004e7a:	f104 0a19 	add.w	sl, r4, #25
 8004e7e:	68e3      	ldr	r3, [r4, #12]
 8004e80:	6832      	ldr	r2, [r6, #0]
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	42ab      	cmp	r3, r5
 8004e86:	dc26      	bgt.n	8004ed6 <_printf_common+0x96>
 8004e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e8c:	1e13      	subs	r3, r2, #0
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	bf18      	it	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	0692      	lsls	r2, r2, #26
 8004e96:	d42b      	bmi.n	8004ef0 <_printf_common+0xb0>
 8004e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	47c0      	blx	r8
 8004ea2:	3001      	adds	r0, #1
 8004ea4:	d01e      	beq.n	8004ee4 <_printf_common+0xa4>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	68e5      	ldr	r5, [r4, #12]
 8004eaa:	6832      	ldr	r2, [r6, #0]
 8004eac:	f003 0306 	and.w	r3, r3, #6
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	bf08      	it	eq
 8004eb4:	1aad      	subeq	r5, r5, r2
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	6922      	ldr	r2, [r4, #16]
 8004eba:	bf0c      	ite	eq
 8004ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec0:	2500      	movne	r5, #0
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	bfc4      	itt	gt
 8004ec6:	1a9b      	subgt	r3, r3, r2
 8004ec8:	18ed      	addgt	r5, r5, r3
 8004eca:	2600      	movs	r6, #0
 8004ecc:	341a      	adds	r4, #26
 8004ece:	42b5      	cmp	r5, r6
 8004ed0:	d11a      	bne.n	8004f08 <_printf_common+0xc8>
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	e008      	b.n	8004ee8 <_printf_common+0xa8>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4652      	mov	r2, sl
 8004eda:	4649      	mov	r1, r9
 8004edc:	4638      	mov	r0, r7
 8004ede:	47c0      	blx	r8
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d103      	bne.n	8004eec <_printf_common+0xac>
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eec:	3501      	adds	r5, #1
 8004eee:	e7c6      	b.n	8004e7e <_printf_common+0x3e>
 8004ef0:	18e1      	adds	r1, r4, r3
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	2030      	movs	r0, #48	; 0x30
 8004ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004efa:	4422      	add	r2, r4
 8004efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f04:	3302      	adds	r3, #2
 8004f06:	e7c7      	b.n	8004e98 <_printf_common+0x58>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	4638      	mov	r0, r7
 8004f10:	47c0      	blx	r8
 8004f12:	3001      	adds	r0, #1
 8004f14:	d0e6      	beq.n	8004ee4 <_printf_common+0xa4>
 8004f16:	3601      	adds	r6, #1
 8004f18:	e7d9      	b.n	8004ece <_printf_common+0x8e>
	...

08004f1c <_printf_i>:
 8004f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	7e0f      	ldrb	r7, [r1, #24]
 8004f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f24:	2f78      	cmp	r7, #120	; 0x78
 8004f26:	4691      	mov	r9, r2
 8004f28:	4680      	mov	r8, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	469a      	mov	sl, r3
 8004f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f32:	d807      	bhi.n	8004f44 <_printf_i+0x28>
 8004f34:	2f62      	cmp	r7, #98	; 0x62
 8004f36:	d80a      	bhi.n	8004f4e <_printf_i+0x32>
 8004f38:	2f00      	cmp	r7, #0
 8004f3a:	f000 80d8 	beq.w	80050ee <_printf_i+0x1d2>
 8004f3e:	2f58      	cmp	r7, #88	; 0x58
 8004f40:	f000 80a3 	beq.w	800508a <_printf_i+0x16e>
 8004f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f4c:	e03a      	b.n	8004fc4 <_printf_i+0xa8>
 8004f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f52:	2b15      	cmp	r3, #21
 8004f54:	d8f6      	bhi.n	8004f44 <_printf_i+0x28>
 8004f56:	a101      	add	r1, pc, #4	; (adr r1, 8004f5c <_printf_i+0x40>)
 8004f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f5c:	08004fb5 	.word	0x08004fb5
 8004f60:	08004fc9 	.word	0x08004fc9
 8004f64:	08004f45 	.word	0x08004f45
 8004f68:	08004f45 	.word	0x08004f45
 8004f6c:	08004f45 	.word	0x08004f45
 8004f70:	08004f45 	.word	0x08004f45
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004f45 	.word	0x08004f45
 8004f7c:	08004f45 	.word	0x08004f45
 8004f80:	08004f45 	.word	0x08004f45
 8004f84:	08004f45 	.word	0x08004f45
 8004f88:	080050d5 	.word	0x080050d5
 8004f8c:	08004ff9 	.word	0x08004ff9
 8004f90:	080050b7 	.word	0x080050b7
 8004f94:	08004f45 	.word	0x08004f45
 8004f98:	08004f45 	.word	0x08004f45
 8004f9c:	080050f7 	.word	0x080050f7
 8004fa0:	08004f45 	.word	0x08004f45
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	08004f45 	.word	0x08004f45
 8004fac:	08004f45 	.word	0x08004f45
 8004fb0:	080050bf 	.word	0x080050bf
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	1d1a      	adds	r2, r3, #4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	602a      	str	r2, [r5, #0]
 8004fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0a3      	b.n	8005110 <_printf_i+0x1f4>
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	6829      	ldr	r1, [r5, #0]
 8004fcc:	0606      	lsls	r6, r0, #24
 8004fce:	f101 0304 	add.w	r3, r1, #4
 8004fd2:	d50a      	bpl.n	8004fea <_printf_i+0xce>
 8004fd4:	680e      	ldr	r6, [r1, #0]
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	2e00      	cmp	r6, #0
 8004fda:	da03      	bge.n	8004fe4 <_printf_i+0xc8>
 8004fdc:	232d      	movs	r3, #45	; 0x2d
 8004fde:	4276      	negs	r6, r6
 8004fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe4:	485e      	ldr	r0, [pc, #376]	; (8005160 <_printf_i+0x244>)
 8004fe6:	230a      	movs	r3, #10
 8004fe8:	e019      	b.n	800501e <_printf_i+0x102>
 8004fea:	680e      	ldr	r6, [r1, #0]
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ff2:	bf18      	it	ne
 8004ff4:	b236      	sxthne	r6, r6
 8004ff6:	e7ef      	b.n	8004fd8 <_printf_i+0xbc>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	6820      	ldr	r0, [r4, #0]
 8004ffc:	1d19      	adds	r1, r3, #4
 8004ffe:	6029      	str	r1, [r5, #0]
 8005000:	0601      	lsls	r1, r0, #24
 8005002:	d501      	bpl.n	8005008 <_printf_i+0xec>
 8005004:	681e      	ldr	r6, [r3, #0]
 8005006:	e002      	b.n	800500e <_printf_i+0xf2>
 8005008:	0646      	lsls	r6, r0, #25
 800500a:	d5fb      	bpl.n	8005004 <_printf_i+0xe8>
 800500c:	881e      	ldrh	r6, [r3, #0]
 800500e:	4854      	ldr	r0, [pc, #336]	; (8005160 <_printf_i+0x244>)
 8005010:	2f6f      	cmp	r7, #111	; 0x6f
 8005012:	bf0c      	ite	eq
 8005014:	2308      	moveq	r3, #8
 8005016:	230a      	movne	r3, #10
 8005018:	2100      	movs	r1, #0
 800501a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800501e:	6865      	ldr	r5, [r4, #4]
 8005020:	60a5      	str	r5, [r4, #8]
 8005022:	2d00      	cmp	r5, #0
 8005024:	bfa2      	ittt	ge
 8005026:	6821      	ldrge	r1, [r4, #0]
 8005028:	f021 0104 	bicge.w	r1, r1, #4
 800502c:	6021      	strge	r1, [r4, #0]
 800502e:	b90e      	cbnz	r6, 8005034 <_printf_i+0x118>
 8005030:	2d00      	cmp	r5, #0
 8005032:	d04d      	beq.n	80050d0 <_printf_i+0x1b4>
 8005034:	4615      	mov	r5, r2
 8005036:	fbb6 f1f3 	udiv	r1, r6, r3
 800503a:	fb03 6711 	mls	r7, r3, r1, r6
 800503e:	5dc7      	ldrb	r7, [r0, r7]
 8005040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005044:	4637      	mov	r7, r6
 8005046:	42bb      	cmp	r3, r7
 8005048:	460e      	mov	r6, r1
 800504a:	d9f4      	bls.n	8005036 <_printf_i+0x11a>
 800504c:	2b08      	cmp	r3, #8
 800504e:	d10b      	bne.n	8005068 <_printf_i+0x14c>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	07de      	lsls	r6, r3, #31
 8005054:	d508      	bpl.n	8005068 <_printf_i+0x14c>
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	6861      	ldr	r1, [r4, #4]
 800505a:	4299      	cmp	r1, r3
 800505c:	bfde      	ittt	le
 800505e:	2330      	movle	r3, #48	; 0x30
 8005060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005064:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005068:	1b52      	subs	r2, r2, r5
 800506a:	6122      	str	r2, [r4, #16]
 800506c:	f8cd a000 	str.w	sl, [sp]
 8005070:	464b      	mov	r3, r9
 8005072:	aa03      	add	r2, sp, #12
 8005074:	4621      	mov	r1, r4
 8005076:	4640      	mov	r0, r8
 8005078:	f7ff fee2 	bl	8004e40 <_printf_common>
 800507c:	3001      	adds	r0, #1
 800507e:	d14c      	bne.n	800511a <_printf_i+0x1fe>
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	b004      	add	sp, #16
 8005086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508a:	4835      	ldr	r0, [pc, #212]	; (8005160 <_printf_i+0x244>)
 800508c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005090:	6829      	ldr	r1, [r5, #0]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	f851 6b04 	ldr.w	r6, [r1], #4
 8005098:	6029      	str	r1, [r5, #0]
 800509a:	061d      	lsls	r5, r3, #24
 800509c:	d514      	bpl.n	80050c8 <_printf_i+0x1ac>
 800509e:	07df      	lsls	r7, r3, #31
 80050a0:	bf44      	itt	mi
 80050a2:	f043 0320 	orrmi.w	r3, r3, #32
 80050a6:	6023      	strmi	r3, [r4, #0]
 80050a8:	b91e      	cbnz	r6, 80050b2 <_printf_i+0x196>
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	f023 0320 	bic.w	r3, r3, #32
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	2310      	movs	r3, #16
 80050b4:	e7b0      	b.n	8005018 <_printf_i+0xfc>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	f043 0320 	orr.w	r3, r3, #32
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	2378      	movs	r3, #120	; 0x78
 80050c0:	4828      	ldr	r0, [pc, #160]	; (8005164 <_printf_i+0x248>)
 80050c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050c6:	e7e3      	b.n	8005090 <_printf_i+0x174>
 80050c8:	0659      	lsls	r1, r3, #25
 80050ca:	bf48      	it	mi
 80050cc:	b2b6      	uxthmi	r6, r6
 80050ce:	e7e6      	b.n	800509e <_printf_i+0x182>
 80050d0:	4615      	mov	r5, r2
 80050d2:	e7bb      	b.n	800504c <_printf_i+0x130>
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	6826      	ldr	r6, [r4, #0]
 80050d8:	6961      	ldr	r1, [r4, #20]
 80050da:	1d18      	adds	r0, r3, #4
 80050dc:	6028      	str	r0, [r5, #0]
 80050de:	0635      	lsls	r5, r6, #24
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	d501      	bpl.n	80050e8 <_printf_i+0x1cc>
 80050e4:	6019      	str	r1, [r3, #0]
 80050e6:	e002      	b.n	80050ee <_printf_i+0x1d2>
 80050e8:	0670      	lsls	r0, r6, #25
 80050ea:	d5fb      	bpl.n	80050e4 <_printf_i+0x1c8>
 80050ec:	8019      	strh	r1, [r3, #0]
 80050ee:	2300      	movs	r3, #0
 80050f0:	6123      	str	r3, [r4, #16]
 80050f2:	4615      	mov	r5, r2
 80050f4:	e7ba      	b.n	800506c <_printf_i+0x150>
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	1d1a      	adds	r2, r3, #4
 80050fa:	602a      	str	r2, [r5, #0]
 80050fc:	681d      	ldr	r5, [r3, #0]
 80050fe:	6862      	ldr	r2, [r4, #4]
 8005100:	2100      	movs	r1, #0
 8005102:	4628      	mov	r0, r5
 8005104:	f7fb f88c 	bl	8000220 <memchr>
 8005108:	b108      	cbz	r0, 800510e <_printf_i+0x1f2>
 800510a:	1b40      	subs	r0, r0, r5
 800510c:	6060      	str	r0, [r4, #4]
 800510e:	6863      	ldr	r3, [r4, #4]
 8005110:	6123      	str	r3, [r4, #16]
 8005112:	2300      	movs	r3, #0
 8005114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005118:	e7a8      	b.n	800506c <_printf_i+0x150>
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	462a      	mov	r2, r5
 800511e:	4649      	mov	r1, r9
 8005120:	4640      	mov	r0, r8
 8005122:	47d0      	blx	sl
 8005124:	3001      	adds	r0, #1
 8005126:	d0ab      	beq.n	8005080 <_printf_i+0x164>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	079b      	lsls	r3, r3, #30
 800512c:	d413      	bmi.n	8005156 <_printf_i+0x23a>
 800512e:	68e0      	ldr	r0, [r4, #12]
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	4298      	cmp	r0, r3
 8005134:	bfb8      	it	lt
 8005136:	4618      	movlt	r0, r3
 8005138:	e7a4      	b.n	8005084 <_printf_i+0x168>
 800513a:	2301      	movs	r3, #1
 800513c:	4632      	mov	r2, r6
 800513e:	4649      	mov	r1, r9
 8005140:	4640      	mov	r0, r8
 8005142:	47d0      	blx	sl
 8005144:	3001      	adds	r0, #1
 8005146:	d09b      	beq.n	8005080 <_printf_i+0x164>
 8005148:	3501      	adds	r5, #1
 800514a:	68e3      	ldr	r3, [r4, #12]
 800514c:	9903      	ldr	r1, [sp, #12]
 800514e:	1a5b      	subs	r3, r3, r1
 8005150:	42ab      	cmp	r3, r5
 8005152:	dcf2      	bgt.n	800513a <_printf_i+0x21e>
 8005154:	e7eb      	b.n	800512e <_printf_i+0x212>
 8005156:	2500      	movs	r5, #0
 8005158:	f104 0619 	add.w	r6, r4, #25
 800515c:	e7f5      	b.n	800514a <_printf_i+0x22e>
 800515e:	bf00      	nop
 8005160:	0800735e 	.word	0x0800735e
 8005164:	0800736f 	.word	0x0800736f

08005168 <iprintf>:
 8005168:	b40f      	push	{r0, r1, r2, r3}
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <iprintf+0x2c>)
 800516c:	b513      	push	{r0, r1, r4, lr}
 800516e:	681c      	ldr	r4, [r3, #0]
 8005170:	b124      	cbz	r4, 800517c <iprintf+0x14>
 8005172:	69a3      	ldr	r3, [r4, #24]
 8005174:	b913      	cbnz	r3, 800517c <iprintf+0x14>
 8005176:	4620      	mov	r0, r4
 8005178:	f000 fee0 	bl	8005f3c <__sinit>
 800517c:	ab05      	add	r3, sp, #20
 800517e:	9a04      	ldr	r2, [sp, #16]
 8005180:	68a1      	ldr	r1, [r4, #8]
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	4620      	mov	r0, r4
 8005186:	f001 fc39 	bl	80069fc <_vfiprintf_r>
 800518a:	b002      	add	sp, #8
 800518c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005190:	b004      	add	sp, #16
 8005192:	4770      	bx	lr
 8005194:	20000010 	.word	0x20000010

08005198 <quorem>:
 8005198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	6903      	ldr	r3, [r0, #16]
 800519e:	690c      	ldr	r4, [r1, #16]
 80051a0:	42a3      	cmp	r3, r4
 80051a2:	4607      	mov	r7, r0
 80051a4:	f2c0 8081 	blt.w	80052aa <quorem+0x112>
 80051a8:	3c01      	subs	r4, #1
 80051aa:	f101 0814 	add.w	r8, r1, #20
 80051ae:	f100 0514 	add.w	r5, r0, #20
 80051b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051c0:	3301      	adds	r3, #1
 80051c2:	429a      	cmp	r2, r3
 80051c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80051d0:	d331      	bcc.n	8005236 <quorem+0x9e>
 80051d2:	f04f 0e00 	mov.w	lr, #0
 80051d6:	4640      	mov	r0, r8
 80051d8:	46ac      	mov	ip, r5
 80051da:	46f2      	mov	sl, lr
 80051dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80051e0:	b293      	uxth	r3, r2
 80051e2:	fb06 e303 	mla	r3, r6, r3, lr
 80051e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	ebaa 0303 	sub.w	r3, sl, r3
 80051f0:	f8dc a000 	ldr.w	sl, [ip]
 80051f4:	0c12      	lsrs	r2, r2, #16
 80051f6:	fa13 f38a 	uxtah	r3, r3, sl
 80051fa:	fb06 e202 	mla	r2, r6, r2, lr
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	9b00      	ldr	r3, [sp, #0]
 8005202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005206:	b292      	uxth	r2, r2
 8005208:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800520c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005210:	f8bd 3000 	ldrh.w	r3, [sp]
 8005214:	4581      	cmp	r9, r0
 8005216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800521a:	f84c 3b04 	str.w	r3, [ip], #4
 800521e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005222:	d2db      	bcs.n	80051dc <quorem+0x44>
 8005224:	f855 300b 	ldr.w	r3, [r5, fp]
 8005228:	b92b      	cbnz	r3, 8005236 <quorem+0x9e>
 800522a:	9b01      	ldr	r3, [sp, #4]
 800522c:	3b04      	subs	r3, #4
 800522e:	429d      	cmp	r5, r3
 8005230:	461a      	mov	r2, r3
 8005232:	d32e      	bcc.n	8005292 <quorem+0xfa>
 8005234:	613c      	str	r4, [r7, #16]
 8005236:	4638      	mov	r0, r7
 8005238:	f001 f9be 	bl	80065b8 <__mcmp>
 800523c:	2800      	cmp	r0, #0
 800523e:	db24      	blt.n	800528a <quorem+0xf2>
 8005240:	3601      	adds	r6, #1
 8005242:	4628      	mov	r0, r5
 8005244:	f04f 0c00 	mov.w	ip, #0
 8005248:	f858 2b04 	ldr.w	r2, [r8], #4
 800524c:	f8d0 e000 	ldr.w	lr, [r0]
 8005250:	b293      	uxth	r3, r2
 8005252:	ebac 0303 	sub.w	r3, ip, r3
 8005256:	0c12      	lsrs	r2, r2, #16
 8005258:	fa13 f38e 	uxtah	r3, r3, lr
 800525c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005264:	b29b      	uxth	r3, r3
 8005266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800526a:	45c1      	cmp	r9, r8
 800526c:	f840 3b04 	str.w	r3, [r0], #4
 8005270:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005274:	d2e8      	bcs.n	8005248 <quorem+0xb0>
 8005276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800527a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800527e:	b922      	cbnz	r2, 800528a <quorem+0xf2>
 8005280:	3b04      	subs	r3, #4
 8005282:	429d      	cmp	r5, r3
 8005284:	461a      	mov	r2, r3
 8005286:	d30a      	bcc.n	800529e <quorem+0x106>
 8005288:	613c      	str	r4, [r7, #16]
 800528a:	4630      	mov	r0, r6
 800528c:	b003      	add	sp, #12
 800528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	3b04      	subs	r3, #4
 8005296:	2a00      	cmp	r2, #0
 8005298:	d1cc      	bne.n	8005234 <quorem+0x9c>
 800529a:	3c01      	subs	r4, #1
 800529c:	e7c7      	b.n	800522e <quorem+0x96>
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	3b04      	subs	r3, #4
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	d1f0      	bne.n	8005288 <quorem+0xf0>
 80052a6:	3c01      	subs	r4, #1
 80052a8:	e7eb      	b.n	8005282 <quorem+0xea>
 80052aa:	2000      	movs	r0, #0
 80052ac:	e7ee      	b.n	800528c <quorem+0xf4>
	...

080052b0 <_dtoa_r>:
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	ed2d 8b04 	vpush	{d8-d9}
 80052b8:	ec57 6b10 	vmov	r6, r7, d0
 80052bc:	b093      	sub	sp, #76	; 0x4c
 80052be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052c4:	9106      	str	r1, [sp, #24]
 80052c6:	ee10 aa10 	vmov	sl, s0
 80052ca:	4604      	mov	r4, r0
 80052cc:	9209      	str	r2, [sp, #36]	; 0x24
 80052ce:	930c      	str	r3, [sp, #48]	; 0x30
 80052d0:	46bb      	mov	fp, r7
 80052d2:	b975      	cbnz	r5, 80052f2 <_dtoa_r+0x42>
 80052d4:	2010      	movs	r0, #16
 80052d6:	f000 fed7 	bl	8006088 <malloc>
 80052da:	4602      	mov	r2, r0
 80052dc:	6260      	str	r0, [r4, #36]	; 0x24
 80052de:	b920      	cbnz	r0, 80052ea <_dtoa_r+0x3a>
 80052e0:	4ba7      	ldr	r3, [pc, #668]	; (8005580 <_dtoa_r+0x2d0>)
 80052e2:	21ea      	movs	r1, #234	; 0xea
 80052e4:	48a7      	ldr	r0, [pc, #668]	; (8005584 <_dtoa_r+0x2d4>)
 80052e6:	f001 fddf 	bl	8006ea8 <__assert_func>
 80052ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80052ee:	6005      	str	r5, [r0, #0]
 80052f0:	60c5      	str	r5, [r0, #12]
 80052f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052f4:	6819      	ldr	r1, [r3, #0]
 80052f6:	b151      	cbz	r1, 800530e <_dtoa_r+0x5e>
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	604a      	str	r2, [r1, #4]
 80052fc:	2301      	movs	r3, #1
 80052fe:	4093      	lsls	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
 8005302:	4620      	mov	r0, r4
 8005304:	f000 ff16 	bl	8006134 <_Bfree>
 8005308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	1e3b      	subs	r3, r7, #0
 8005310:	bfaa      	itet	ge
 8005312:	2300      	movge	r3, #0
 8005314:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005318:	f8c8 3000 	strge.w	r3, [r8]
 800531c:	4b9a      	ldr	r3, [pc, #616]	; (8005588 <_dtoa_r+0x2d8>)
 800531e:	bfbc      	itt	lt
 8005320:	2201      	movlt	r2, #1
 8005322:	f8c8 2000 	strlt.w	r2, [r8]
 8005326:	ea33 030b 	bics.w	r3, r3, fp
 800532a:	d11b      	bne.n	8005364 <_dtoa_r+0xb4>
 800532c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800532e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005338:	4333      	orrs	r3, r6
 800533a:	f000 8592 	beq.w	8005e62 <_dtoa_r+0xbb2>
 800533e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005340:	b963      	cbnz	r3, 800535c <_dtoa_r+0xac>
 8005342:	4b92      	ldr	r3, [pc, #584]	; (800558c <_dtoa_r+0x2dc>)
 8005344:	e022      	b.n	800538c <_dtoa_r+0xdc>
 8005346:	4b92      	ldr	r3, [pc, #584]	; (8005590 <_dtoa_r+0x2e0>)
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	3308      	adds	r3, #8
 800534c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800534e:	6013      	str	r3, [r2, #0]
 8005350:	9801      	ldr	r0, [sp, #4]
 8005352:	b013      	add	sp, #76	; 0x4c
 8005354:	ecbd 8b04 	vpop	{d8-d9}
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	4b8b      	ldr	r3, [pc, #556]	; (800558c <_dtoa_r+0x2dc>)
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	3303      	adds	r3, #3
 8005362:	e7f3      	b.n	800534c <_dtoa_r+0x9c>
 8005364:	2200      	movs	r2, #0
 8005366:	2300      	movs	r3, #0
 8005368:	4650      	mov	r0, sl
 800536a:	4659      	mov	r1, fp
 800536c:	f7fb fbcc 	bl	8000b08 <__aeabi_dcmpeq>
 8005370:	ec4b ab19 	vmov	d9, sl, fp
 8005374:	4680      	mov	r8, r0
 8005376:	b158      	cbz	r0, 8005390 <_dtoa_r+0xe0>
 8005378:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800537a:	2301      	movs	r3, #1
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 856b 	beq.w	8005e5c <_dtoa_r+0xbac>
 8005386:	4883      	ldr	r0, [pc, #524]	; (8005594 <_dtoa_r+0x2e4>)
 8005388:	6018      	str	r0, [r3, #0]
 800538a:	1e43      	subs	r3, r0, #1
 800538c:	9301      	str	r3, [sp, #4]
 800538e:	e7df      	b.n	8005350 <_dtoa_r+0xa0>
 8005390:	ec4b ab10 	vmov	d0, sl, fp
 8005394:	aa10      	add	r2, sp, #64	; 0x40
 8005396:	a911      	add	r1, sp, #68	; 0x44
 8005398:	4620      	mov	r0, r4
 800539a:	f001 f9b3 	bl	8006704 <__d2b>
 800539e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80053a2:	ee08 0a10 	vmov	s16, r0
 80053a6:	2d00      	cmp	r5, #0
 80053a8:	f000 8084 	beq.w	80054b4 <_dtoa_r+0x204>
 80053ac:	ee19 3a90 	vmov	r3, s19
 80053b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80053b8:	4656      	mov	r6, sl
 80053ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80053be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80053c6:	4b74      	ldr	r3, [pc, #464]	; (8005598 <_dtoa_r+0x2e8>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	4630      	mov	r0, r6
 80053cc:	4639      	mov	r1, r7
 80053ce:	f7fa ff7b 	bl	80002c8 <__aeabi_dsub>
 80053d2:	a365      	add	r3, pc, #404	; (adr r3, 8005568 <_dtoa_r+0x2b8>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fb f92e 	bl	8000638 <__aeabi_dmul>
 80053dc:	a364      	add	r3, pc, #400	; (adr r3, 8005570 <_dtoa_r+0x2c0>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f7fa ff73 	bl	80002cc <__adddf3>
 80053e6:	4606      	mov	r6, r0
 80053e8:	4628      	mov	r0, r5
 80053ea:	460f      	mov	r7, r1
 80053ec:	f7fb f8ba 	bl	8000564 <__aeabi_i2d>
 80053f0:	a361      	add	r3, pc, #388	; (adr r3, 8005578 <_dtoa_r+0x2c8>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fb f91f 	bl	8000638 <__aeabi_dmul>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4630      	mov	r0, r6
 8005400:	4639      	mov	r1, r7
 8005402:	f7fa ff63 	bl	80002cc <__adddf3>
 8005406:	4606      	mov	r6, r0
 8005408:	460f      	mov	r7, r1
 800540a:	f7fb fbc5 	bl	8000b98 <__aeabi_d2iz>
 800540e:	2200      	movs	r2, #0
 8005410:	9000      	str	r0, [sp, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	4630      	mov	r0, r6
 8005416:	4639      	mov	r1, r7
 8005418:	f7fb fb80 	bl	8000b1c <__aeabi_dcmplt>
 800541c:	b150      	cbz	r0, 8005434 <_dtoa_r+0x184>
 800541e:	9800      	ldr	r0, [sp, #0]
 8005420:	f7fb f8a0 	bl	8000564 <__aeabi_i2d>
 8005424:	4632      	mov	r2, r6
 8005426:	463b      	mov	r3, r7
 8005428:	f7fb fb6e 	bl	8000b08 <__aeabi_dcmpeq>
 800542c:	b910      	cbnz	r0, 8005434 <_dtoa_r+0x184>
 800542e:	9b00      	ldr	r3, [sp, #0]
 8005430:	3b01      	subs	r3, #1
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	9b00      	ldr	r3, [sp, #0]
 8005436:	2b16      	cmp	r3, #22
 8005438:	d85a      	bhi.n	80054f0 <_dtoa_r+0x240>
 800543a:	9a00      	ldr	r2, [sp, #0]
 800543c:	4b57      	ldr	r3, [pc, #348]	; (800559c <_dtoa_r+0x2ec>)
 800543e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	ec51 0b19 	vmov	r0, r1, d9
 800544a:	f7fb fb67 	bl	8000b1c <__aeabi_dcmplt>
 800544e:	2800      	cmp	r0, #0
 8005450:	d050      	beq.n	80054f4 <_dtoa_r+0x244>
 8005452:	9b00      	ldr	r3, [sp, #0]
 8005454:	3b01      	subs	r3, #1
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	2300      	movs	r3, #0
 800545a:	930b      	str	r3, [sp, #44]	; 0x2c
 800545c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800545e:	1b5d      	subs	r5, r3, r5
 8005460:	1e6b      	subs	r3, r5, #1
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	bf45      	ittet	mi
 8005466:	f1c5 0301 	rsbmi	r3, r5, #1
 800546a:	9304      	strmi	r3, [sp, #16]
 800546c:	2300      	movpl	r3, #0
 800546e:	2300      	movmi	r3, #0
 8005470:	bf4c      	ite	mi
 8005472:	9305      	strmi	r3, [sp, #20]
 8005474:	9304      	strpl	r3, [sp, #16]
 8005476:	9b00      	ldr	r3, [sp, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	db3d      	blt.n	80054f8 <_dtoa_r+0x248>
 800547c:	9b05      	ldr	r3, [sp, #20]
 800547e:	9a00      	ldr	r2, [sp, #0]
 8005480:	920a      	str	r2, [sp, #40]	; 0x28
 8005482:	4413      	add	r3, r2
 8005484:	9305      	str	r3, [sp, #20]
 8005486:	2300      	movs	r3, #0
 8005488:	9307      	str	r3, [sp, #28]
 800548a:	9b06      	ldr	r3, [sp, #24]
 800548c:	2b09      	cmp	r3, #9
 800548e:	f200 8089 	bhi.w	80055a4 <_dtoa_r+0x2f4>
 8005492:	2b05      	cmp	r3, #5
 8005494:	bfc4      	itt	gt
 8005496:	3b04      	subgt	r3, #4
 8005498:	9306      	strgt	r3, [sp, #24]
 800549a:	9b06      	ldr	r3, [sp, #24]
 800549c:	f1a3 0302 	sub.w	r3, r3, #2
 80054a0:	bfcc      	ite	gt
 80054a2:	2500      	movgt	r5, #0
 80054a4:	2501      	movle	r5, #1
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	f200 8087 	bhi.w	80055ba <_dtoa_r+0x30a>
 80054ac:	e8df f003 	tbb	[pc, r3]
 80054b0:	59383a2d 	.word	0x59383a2d
 80054b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80054b8:	441d      	add	r5, r3
 80054ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054be:	2b20      	cmp	r3, #32
 80054c0:	bfc1      	itttt	gt
 80054c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80054ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80054ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054d2:	bfda      	itte	le
 80054d4:	f1c3 0320 	rsble	r3, r3, #32
 80054d8:	fa06 f003 	lslle.w	r0, r6, r3
 80054dc:	4318      	orrgt	r0, r3
 80054de:	f7fb f831 	bl	8000544 <__aeabi_ui2d>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4606      	mov	r6, r0
 80054e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80054ea:	3d01      	subs	r5, #1
 80054ec:	930e      	str	r3, [sp, #56]	; 0x38
 80054ee:	e76a      	b.n	80053c6 <_dtoa_r+0x116>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e7b2      	b.n	800545a <_dtoa_r+0x1aa>
 80054f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80054f6:	e7b1      	b.n	800545c <_dtoa_r+0x1ac>
 80054f8:	9b04      	ldr	r3, [sp, #16]
 80054fa:	9a00      	ldr	r2, [sp, #0]
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	9304      	str	r3, [sp, #16]
 8005500:	4253      	negs	r3, r2
 8005502:	9307      	str	r3, [sp, #28]
 8005504:	2300      	movs	r3, #0
 8005506:	930a      	str	r3, [sp, #40]	; 0x28
 8005508:	e7bf      	b.n	800548a <_dtoa_r+0x1da>
 800550a:	2300      	movs	r3, #0
 800550c:	9308      	str	r3, [sp, #32]
 800550e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005510:	2b00      	cmp	r3, #0
 8005512:	dc55      	bgt.n	80055c0 <_dtoa_r+0x310>
 8005514:	2301      	movs	r3, #1
 8005516:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800551a:	461a      	mov	r2, r3
 800551c:	9209      	str	r2, [sp, #36]	; 0x24
 800551e:	e00c      	b.n	800553a <_dtoa_r+0x28a>
 8005520:	2301      	movs	r3, #1
 8005522:	e7f3      	b.n	800550c <_dtoa_r+0x25c>
 8005524:	2300      	movs	r3, #0
 8005526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005528:	9308      	str	r3, [sp, #32]
 800552a:	9b00      	ldr	r3, [sp, #0]
 800552c:	4413      	add	r3, r2
 800552e:	9302      	str	r3, [sp, #8]
 8005530:	3301      	adds	r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	9303      	str	r3, [sp, #12]
 8005536:	bfb8      	it	lt
 8005538:	2301      	movlt	r3, #1
 800553a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800553c:	2200      	movs	r2, #0
 800553e:	6042      	str	r2, [r0, #4]
 8005540:	2204      	movs	r2, #4
 8005542:	f102 0614 	add.w	r6, r2, #20
 8005546:	429e      	cmp	r6, r3
 8005548:	6841      	ldr	r1, [r0, #4]
 800554a:	d93d      	bls.n	80055c8 <_dtoa_r+0x318>
 800554c:	4620      	mov	r0, r4
 800554e:	f000 fdb1 	bl	80060b4 <_Balloc>
 8005552:	9001      	str	r0, [sp, #4]
 8005554:	2800      	cmp	r0, #0
 8005556:	d13b      	bne.n	80055d0 <_dtoa_r+0x320>
 8005558:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <_dtoa_r+0x2f0>)
 800555a:	4602      	mov	r2, r0
 800555c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005560:	e6c0      	b.n	80052e4 <_dtoa_r+0x34>
 8005562:	2301      	movs	r3, #1
 8005564:	e7df      	b.n	8005526 <_dtoa_r+0x276>
 8005566:	bf00      	nop
 8005568:	636f4361 	.word	0x636f4361
 800556c:	3fd287a7 	.word	0x3fd287a7
 8005570:	8b60c8b3 	.word	0x8b60c8b3
 8005574:	3fc68a28 	.word	0x3fc68a28
 8005578:	509f79fb 	.word	0x509f79fb
 800557c:	3fd34413 	.word	0x3fd34413
 8005580:	0800738d 	.word	0x0800738d
 8005584:	080073a4 	.word	0x080073a4
 8005588:	7ff00000 	.word	0x7ff00000
 800558c:	08007389 	.word	0x08007389
 8005590:	08007380 	.word	0x08007380
 8005594:	0800735d 	.word	0x0800735d
 8005598:	3ff80000 	.word	0x3ff80000
 800559c:	080074f8 	.word	0x080074f8
 80055a0:	080073ff 	.word	0x080073ff
 80055a4:	2501      	movs	r5, #1
 80055a6:	2300      	movs	r3, #0
 80055a8:	9306      	str	r3, [sp, #24]
 80055aa:	9508      	str	r5, [sp, #32]
 80055ac:	f04f 33ff 	mov.w	r3, #4294967295
 80055b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	2312      	movs	r3, #18
 80055b8:	e7b0      	b.n	800551c <_dtoa_r+0x26c>
 80055ba:	2301      	movs	r3, #1
 80055bc:	9308      	str	r3, [sp, #32]
 80055be:	e7f5      	b.n	80055ac <_dtoa_r+0x2fc>
 80055c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055c6:	e7b8      	b.n	800553a <_dtoa_r+0x28a>
 80055c8:	3101      	adds	r1, #1
 80055ca:	6041      	str	r1, [r0, #4]
 80055cc:	0052      	lsls	r2, r2, #1
 80055ce:	e7b8      	b.n	8005542 <_dtoa_r+0x292>
 80055d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d2:	9a01      	ldr	r2, [sp, #4]
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	9b03      	ldr	r3, [sp, #12]
 80055d8:	2b0e      	cmp	r3, #14
 80055da:	f200 809d 	bhi.w	8005718 <_dtoa_r+0x468>
 80055de:	2d00      	cmp	r5, #0
 80055e0:	f000 809a 	beq.w	8005718 <_dtoa_r+0x468>
 80055e4:	9b00      	ldr	r3, [sp, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	dd32      	ble.n	8005650 <_dtoa_r+0x3a0>
 80055ea:	4ab7      	ldr	r2, [pc, #732]	; (80058c8 <_dtoa_r+0x618>)
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80055f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055f8:	9b00      	ldr	r3, [sp, #0]
 80055fa:	05d8      	lsls	r0, r3, #23
 80055fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005600:	d516      	bpl.n	8005630 <_dtoa_r+0x380>
 8005602:	4bb2      	ldr	r3, [pc, #712]	; (80058cc <_dtoa_r+0x61c>)
 8005604:	ec51 0b19 	vmov	r0, r1, d9
 8005608:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800560c:	f7fb f93e 	bl	800088c <__aeabi_ddiv>
 8005610:	f007 070f 	and.w	r7, r7, #15
 8005614:	4682      	mov	sl, r0
 8005616:	468b      	mov	fp, r1
 8005618:	2503      	movs	r5, #3
 800561a:	4eac      	ldr	r6, [pc, #688]	; (80058cc <_dtoa_r+0x61c>)
 800561c:	b957      	cbnz	r7, 8005634 <_dtoa_r+0x384>
 800561e:	4642      	mov	r2, r8
 8005620:	464b      	mov	r3, r9
 8005622:	4650      	mov	r0, sl
 8005624:	4659      	mov	r1, fp
 8005626:	f7fb f931 	bl	800088c <__aeabi_ddiv>
 800562a:	4682      	mov	sl, r0
 800562c:	468b      	mov	fp, r1
 800562e:	e028      	b.n	8005682 <_dtoa_r+0x3d2>
 8005630:	2502      	movs	r5, #2
 8005632:	e7f2      	b.n	800561a <_dtoa_r+0x36a>
 8005634:	07f9      	lsls	r1, r7, #31
 8005636:	d508      	bpl.n	800564a <_dtoa_r+0x39a>
 8005638:	4640      	mov	r0, r8
 800563a:	4649      	mov	r1, r9
 800563c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005640:	f7fa fffa 	bl	8000638 <__aeabi_dmul>
 8005644:	3501      	adds	r5, #1
 8005646:	4680      	mov	r8, r0
 8005648:	4689      	mov	r9, r1
 800564a:	107f      	asrs	r7, r7, #1
 800564c:	3608      	adds	r6, #8
 800564e:	e7e5      	b.n	800561c <_dtoa_r+0x36c>
 8005650:	f000 809b 	beq.w	800578a <_dtoa_r+0x4da>
 8005654:	9b00      	ldr	r3, [sp, #0]
 8005656:	4f9d      	ldr	r7, [pc, #628]	; (80058cc <_dtoa_r+0x61c>)
 8005658:	425e      	negs	r6, r3
 800565a:	4b9b      	ldr	r3, [pc, #620]	; (80058c8 <_dtoa_r+0x618>)
 800565c:	f006 020f 	and.w	r2, r6, #15
 8005660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	ec51 0b19 	vmov	r0, r1, d9
 800566c:	f7fa ffe4 	bl	8000638 <__aeabi_dmul>
 8005670:	1136      	asrs	r6, r6, #4
 8005672:	4682      	mov	sl, r0
 8005674:	468b      	mov	fp, r1
 8005676:	2300      	movs	r3, #0
 8005678:	2502      	movs	r5, #2
 800567a:	2e00      	cmp	r6, #0
 800567c:	d17a      	bne.n	8005774 <_dtoa_r+0x4c4>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1d3      	bne.n	800562a <_dtoa_r+0x37a>
 8005682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 8082 	beq.w	800578e <_dtoa_r+0x4de>
 800568a:	4b91      	ldr	r3, [pc, #580]	; (80058d0 <_dtoa_r+0x620>)
 800568c:	2200      	movs	r2, #0
 800568e:	4650      	mov	r0, sl
 8005690:	4659      	mov	r1, fp
 8005692:	f7fb fa43 	bl	8000b1c <__aeabi_dcmplt>
 8005696:	2800      	cmp	r0, #0
 8005698:	d079      	beq.n	800578e <_dtoa_r+0x4de>
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d076      	beq.n	800578e <_dtoa_r+0x4de>
 80056a0:	9b02      	ldr	r3, [sp, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	dd36      	ble.n	8005714 <_dtoa_r+0x464>
 80056a6:	9b00      	ldr	r3, [sp, #0]
 80056a8:	4650      	mov	r0, sl
 80056aa:	4659      	mov	r1, fp
 80056ac:	1e5f      	subs	r7, r3, #1
 80056ae:	2200      	movs	r2, #0
 80056b0:	4b88      	ldr	r3, [pc, #544]	; (80058d4 <_dtoa_r+0x624>)
 80056b2:	f7fa ffc1 	bl	8000638 <__aeabi_dmul>
 80056b6:	9e02      	ldr	r6, [sp, #8]
 80056b8:	4682      	mov	sl, r0
 80056ba:	468b      	mov	fp, r1
 80056bc:	3501      	adds	r5, #1
 80056be:	4628      	mov	r0, r5
 80056c0:	f7fa ff50 	bl	8000564 <__aeabi_i2d>
 80056c4:	4652      	mov	r2, sl
 80056c6:	465b      	mov	r3, fp
 80056c8:	f7fa ffb6 	bl	8000638 <__aeabi_dmul>
 80056cc:	4b82      	ldr	r3, [pc, #520]	; (80058d8 <_dtoa_r+0x628>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	f7fa fdfc 	bl	80002cc <__adddf3>
 80056d4:	46d0      	mov	r8, sl
 80056d6:	46d9      	mov	r9, fp
 80056d8:	4682      	mov	sl, r0
 80056da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80056de:	2e00      	cmp	r6, #0
 80056e0:	d158      	bne.n	8005794 <_dtoa_r+0x4e4>
 80056e2:	4b7e      	ldr	r3, [pc, #504]	; (80058dc <_dtoa_r+0x62c>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	f7fa fded 	bl	80002c8 <__aeabi_dsub>
 80056ee:	4652      	mov	r2, sl
 80056f0:	465b      	mov	r3, fp
 80056f2:	4680      	mov	r8, r0
 80056f4:	4689      	mov	r9, r1
 80056f6:	f7fb fa2f 	bl	8000b58 <__aeabi_dcmpgt>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	f040 8295 	bne.w	8005c2a <_dtoa_r+0x97a>
 8005700:	4652      	mov	r2, sl
 8005702:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005706:	4640      	mov	r0, r8
 8005708:	4649      	mov	r1, r9
 800570a:	f7fb fa07 	bl	8000b1c <__aeabi_dcmplt>
 800570e:	2800      	cmp	r0, #0
 8005710:	f040 8289 	bne.w	8005c26 <_dtoa_r+0x976>
 8005714:	ec5b ab19 	vmov	sl, fp, d9
 8005718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800571a:	2b00      	cmp	r3, #0
 800571c:	f2c0 8148 	blt.w	80059b0 <_dtoa_r+0x700>
 8005720:	9a00      	ldr	r2, [sp, #0]
 8005722:	2a0e      	cmp	r2, #14
 8005724:	f300 8144 	bgt.w	80059b0 <_dtoa_r+0x700>
 8005728:	4b67      	ldr	r3, [pc, #412]	; (80058c8 <_dtoa_r+0x618>)
 800572a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800572e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	f280 80d5 	bge.w	80058e4 <_dtoa_r+0x634>
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f300 80d1 	bgt.w	80058e4 <_dtoa_r+0x634>
 8005742:	f040 826f 	bne.w	8005c24 <_dtoa_r+0x974>
 8005746:	4b65      	ldr	r3, [pc, #404]	; (80058dc <_dtoa_r+0x62c>)
 8005748:	2200      	movs	r2, #0
 800574a:	4640      	mov	r0, r8
 800574c:	4649      	mov	r1, r9
 800574e:	f7fa ff73 	bl	8000638 <__aeabi_dmul>
 8005752:	4652      	mov	r2, sl
 8005754:	465b      	mov	r3, fp
 8005756:	f7fb f9f5 	bl	8000b44 <__aeabi_dcmpge>
 800575a:	9e03      	ldr	r6, [sp, #12]
 800575c:	4637      	mov	r7, r6
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 8245 	bne.w	8005bee <_dtoa_r+0x93e>
 8005764:	9d01      	ldr	r5, [sp, #4]
 8005766:	2331      	movs	r3, #49	; 0x31
 8005768:	f805 3b01 	strb.w	r3, [r5], #1
 800576c:	9b00      	ldr	r3, [sp, #0]
 800576e:	3301      	adds	r3, #1
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	e240      	b.n	8005bf6 <_dtoa_r+0x946>
 8005774:	07f2      	lsls	r2, r6, #31
 8005776:	d505      	bpl.n	8005784 <_dtoa_r+0x4d4>
 8005778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800577c:	f7fa ff5c 	bl	8000638 <__aeabi_dmul>
 8005780:	3501      	adds	r5, #1
 8005782:	2301      	movs	r3, #1
 8005784:	1076      	asrs	r6, r6, #1
 8005786:	3708      	adds	r7, #8
 8005788:	e777      	b.n	800567a <_dtoa_r+0x3ca>
 800578a:	2502      	movs	r5, #2
 800578c:	e779      	b.n	8005682 <_dtoa_r+0x3d2>
 800578e:	9f00      	ldr	r7, [sp, #0]
 8005790:	9e03      	ldr	r6, [sp, #12]
 8005792:	e794      	b.n	80056be <_dtoa_r+0x40e>
 8005794:	9901      	ldr	r1, [sp, #4]
 8005796:	4b4c      	ldr	r3, [pc, #304]	; (80058c8 <_dtoa_r+0x618>)
 8005798:	4431      	add	r1, r6
 800579a:	910d      	str	r1, [sp, #52]	; 0x34
 800579c:	9908      	ldr	r1, [sp, #32]
 800579e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057a6:	2900      	cmp	r1, #0
 80057a8:	d043      	beq.n	8005832 <_dtoa_r+0x582>
 80057aa:	494d      	ldr	r1, [pc, #308]	; (80058e0 <_dtoa_r+0x630>)
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7fb f86d 	bl	800088c <__aeabi_ddiv>
 80057b2:	4652      	mov	r2, sl
 80057b4:	465b      	mov	r3, fp
 80057b6:	f7fa fd87 	bl	80002c8 <__aeabi_dsub>
 80057ba:	9d01      	ldr	r5, [sp, #4]
 80057bc:	4682      	mov	sl, r0
 80057be:	468b      	mov	fp, r1
 80057c0:	4649      	mov	r1, r9
 80057c2:	4640      	mov	r0, r8
 80057c4:	f7fb f9e8 	bl	8000b98 <__aeabi_d2iz>
 80057c8:	4606      	mov	r6, r0
 80057ca:	f7fa fecb 	bl	8000564 <__aeabi_i2d>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4640      	mov	r0, r8
 80057d4:	4649      	mov	r1, r9
 80057d6:	f7fa fd77 	bl	80002c8 <__aeabi_dsub>
 80057da:	3630      	adds	r6, #48	; 0x30
 80057dc:	f805 6b01 	strb.w	r6, [r5], #1
 80057e0:	4652      	mov	r2, sl
 80057e2:	465b      	mov	r3, fp
 80057e4:	4680      	mov	r8, r0
 80057e6:	4689      	mov	r9, r1
 80057e8:	f7fb f998 	bl	8000b1c <__aeabi_dcmplt>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d163      	bne.n	80058b8 <_dtoa_r+0x608>
 80057f0:	4642      	mov	r2, r8
 80057f2:	464b      	mov	r3, r9
 80057f4:	4936      	ldr	r1, [pc, #216]	; (80058d0 <_dtoa_r+0x620>)
 80057f6:	2000      	movs	r0, #0
 80057f8:	f7fa fd66 	bl	80002c8 <__aeabi_dsub>
 80057fc:	4652      	mov	r2, sl
 80057fe:	465b      	mov	r3, fp
 8005800:	f7fb f98c 	bl	8000b1c <__aeabi_dcmplt>
 8005804:	2800      	cmp	r0, #0
 8005806:	f040 80b5 	bne.w	8005974 <_dtoa_r+0x6c4>
 800580a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800580c:	429d      	cmp	r5, r3
 800580e:	d081      	beq.n	8005714 <_dtoa_r+0x464>
 8005810:	4b30      	ldr	r3, [pc, #192]	; (80058d4 <_dtoa_r+0x624>)
 8005812:	2200      	movs	r2, #0
 8005814:	4650      	mov	r0, sl
 8005816:	4659      	mov	r1, fp
 8005818:	f7fa ff0e 	bl	8000638 <__aeabi_dmul>
 800581c:	4b2d      	ldr	r3, [pc, #180]	; (80058d4 <_dtoa_r+0x624>)
 800581e:	4682      	mov	sl, r0
 8005820:	468b      	mov	fp, r1
 8005822:	4640      	mov	r0, r8
 8005824:	4649      	mov	r1, r9
 8005826:	2200      	movs	r2, #0
 8005828:	f7fa ff06 	bl	8000638 <__aeabi_dmul>
 800582c:	4680      	mov	r8, r0
 800582e:	4689      	mov	r9, r1
 8005830:	e7c6      	b.n	80057c0 <_dtoa_r+0x510>
 8005832:	4650      	mov	r0, sl
 8005834:	4659      	mov	r1, fp
 8005836:	f7fa feff 	bl	8000638 <__aeabi_dmul>
 800583a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800583c:	9d01      	ldr	r5, [sp, #4]
 800583e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005840:	4682      	mov	sl, r0
 8005842:	468b      	mov	fp, r1
 8005844:	4649      	mov	r1, r9
 8005846:	4640      	mov	r0, r8
 8005848:	f7fb f9a6 	bl	8000b98 <__aeabi_d2iz>
 800584c:	4606      	mov	r6, r0
 800584e:	f7fa fe89 	bl	8000564 <__aeabi_i2d>
 8005852:	3630      	adds	r6, #48	; 0x30
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	4640      	mov	r0, r8
 800585a:	4649      	mov	r1, r9
 800585c:	f7fa fd34 	bl	80002c8 <__aeabi_dsub>
 8005860:	f805 6b01 	strb.w	r6, [r5], #1
 8005864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005866:	429d      	cmp	r5, r3
 8005868:	4680      	mov	r8, r0
 800586a:	4689      	mov	r9, r1
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	d124      	bne.n	80058bc <_dtoa_r+0x60c>
 8005872:	4b1b      	ldr	r3, [pc, #108]	; (80058e0 <_dtoa_r+0x630>)
 8005874:	4650      	mov	r0, sl
 8005876:	4659      	mov	r1, fp
 8005878:	f7fa fd28 	bl	80002cc <__adddf3>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4640      	mov	r0, r8
 8005882:	4649      	mov	r1, r9
 8005884:	f7fb f968 	bl	8000b58 <__aeabi_dcmpgt>
 8005888:	2800      	cmp	r0, #0
 800588a:	d173      	bne.n	8005974 <_dtoa_r+0x6c4>
 800588c:	4652      	mov	r2, sl
 800588e:	465b      	mov	r3, fp
 8005890:	4913      	ldr	r1, [pc, #76]	; (80058e0 <_dtoa_r+0x630>)
 8005892:	2000      	movs	r0, #0
 8005894:	f7fa fd18 	bl	80002c8 <__aeabi_dsub>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4640      	mov	r0, r8
 800589e:	4649      	mov	r1, r9
 80058a0:	f7fb f93c 	bl	8000b1c <__aeabi_dcmplt>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	f43f af35 	beq.w	8005714 <_dtoa_r+0x464>
 80058aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80058ac:	1e6b      	subs	r3, r5, #1
 80058ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80058b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058b4:	2b30      	cmp	r3, #48	; 0x30
 80058b6:	d0f8      	beq.n	80058aa <_dtoa_r+0x5fa>
 80058b8:	9700      	str	r7, [sp, #0]
 80058ba:	e049      	b.n	8005950 <_dtoa_r+0x6a0>
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <_dtoa_r+0x624>)
 80058be:	f7fa febb 	bl	8000638 <__aeabi_dmul>
 80058c2:	4680      	mov	r8, r0
 80058c4:	4689      	mov	r9, r1
 80058c6:	e7bd      	b.n	8005844 <_dtoa_r+0x594>
 80058c8:	080074f8 	.word	0x080074f8
 80058cc:	080074d0 	.word	0x080074d0
 80058d0:	3ff00000 	.word	0x3ff00000
 80058d4:	40240000 	.word	0x40240000
 80058d8:	401c0000 	.word	0x401c0000
 80058dc:	40140000 	.word	0x40140000
 80058e0:	3fe00000 	.word	0x3fe00000
 80058e4:	9d01      	ldr	r5, [sp, #4]
 80058e6:	4656      	mov	r6, sl
 80058e8:	465f      	mov	r7, fp
 80058ea:	4642      	mov	r2, r8
 80058ec:	464b      	mov	r3, r9
 80058ee:	4630      	mov	r0, r6
 80058f0:	4639      	mov	r1, r7
 80058f2:	f7fa ffcb 	bl	800088c <__aeabi_ddiv>
 80058f6:	f7fb f94f 	bl	8000b98 <__aeabi_d2iz>
 80058fa:	4682      	mov	sl, r0
 80058fc:	f7fa fe32 	bl	8000564 <__aeabi_i2d>
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	f7fa fe98 	bl	8000638 <__aeabi_dmul>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4630      	mov	r0, r6
 800590e:	4639      	mov	r1, r7
 8005910:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005914:	f7fa fcd8 	bl	80002c8 <__aeabi_dsub>
 8005918:	f805 6b01 	strb.w	r6, [r5], #1
 800591c:	9e01      	ldr	r6, [sp, #4]
 800591e:	9f03      	ldr	r7, [sp, #12]
 8005920:	1bae      	subs	r6, r5, r6
 8005922:	42b7      	cmp	r7, r6
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	d135      	bne.n	8005996 <_dtoa_r+0x6e6>
 800592a:	f7fa fccf 	bl	80002cc <__adddf3>
 800592e:	4642      	mov	r2, r8
 8005930:	464b      	mov	r3, r9
 8005932:	4606      	mov	r6, r0
 8005934:	460f      	mov	r7, r1
 8005936:	f7fb f90f 	bl	8000b58 <__aeabi_dcmpgt>
 800593a:	b9d0      	cbnz	r0, 8005972 <_dtoa_r+0x6c2>
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	4630      	mov	r0, r6
 8005942:	4639      	mov	r1, r7
 8005944:	f7fb f8e0 	bl	8000b08 <__aeabi_dcmpeq>
 8005948:	b110      	cbz	r0, 8005950 <_dtoa_r+0x6a0>
 800594a:	f01a 0f01 	tst.w	sl, #1
 800594e:	d110      	bne.n	8005972 <_dtoa_r+0x6c2>
 8005950:	4620      	mov	r0, r4
 8005952:	ee18 1a10 	vmov	r1, s16
 8005956:	f000 fbed 	bl	8006134 <_Bfree>
 800595a:	2300      	movs	r3, #0
 800595c:	9800      	ldr	r0, [sp, #0]
 800595e:	702b      	strb	r3, [r5, #0]
 8005960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005962:	3001      	adds	r0, #1
 8005964:	6018      	str	r0, [r3, #0]
 8005966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005968:	2b00      	cmp	r3, #0
 800596a:	f43f acf1 	beq.w	8005350 <_dtoa_r+0xa0>
 800596e:	601d      	str	r5, [r3, #0]
 8005970:	e4ee      	b.n	8005350 <_dtoa_r+0xa0>
 8005972:	9f00      	ldr	r7, [sp, #0]
 8005974:	462b      	mov	r3, r5
 8005976:	461d      	mov	r5, r3
 8005978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800597c:	2a39      	cmp	r2, #57	; 0x39
 800597e:	d106      	bne.n	800598e <_dtoa_r+0x6de>
 8005980:	9a01      	ldr	r2, [sp, #4]
 8005982:	429a      	cmp	r2, r3
 8005984:	d1f7      	bne.n	8005976 <_dtoa_r+0x6c6>
 8005986:	9901      	ldr	r1, [sp, #4]
 8005988:	2230      	movs	r2, #48	; 0x30
 800598a:	3701      	adds	r7, #1
 800598c:	700a      	strb	r2, [r1, #0]
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	3201      	adds	r2, #1
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	e790      	b.n	80058b8 <_dtoa_r+0x608>
 8005996:	4ba6      	ldr	r3, [pc, #664]	; (8005c30 <_dtoa_r+0x980>)
 8005998:	2200      	movs	r2, #0
 800599a:	f7fa fe4d 	bl	8000638 <__aeabi_dmul>
 800599e:	2200      	movs	r2, #0
 80059a0:	2300      	movs	r3, #0
 80059a2:	4606      	mov	r6, r0
 80059a4:	460f      	mov	r7, r1
 80059a6:	f7fb f8af 	bl	8000b08 <__aeabi_dcmpeq>
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d09d      	beq.n	80058ea <_dtoa_r+0x63a>
 80059ae:	e7cf      	b.n	8005950 <_dtoa_r+0x6a0>
 80059b0:	9a08      	ldr	r2, [sp, #32]
 80059b2:	2a00      	cmp	r2, #0
 80059b4:	f000 80d7 	beq.w	8005b66 <_dtoa_r+0x8b6>
 80059b8:	9a06      	ldr	r2, [sp, #24]
 80059ba:	2a01      	cmp	r2, #1
 80059bc:	f300 80ba 	bgt.w	8005b34 <_dtoa_r+0x884>
 80059c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059c2:	2a00      	cmp	r2, #0
 80059c4:	f000 80b2 	beq.w	8005b2c <_dtoa_r+0x87c>
 80059c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059cc:	9e07      	ldr	r6, [sp, #28]
 80059ce:	9d04      	ldr	r5, [sp, #16]
 80059d0:	9a04      	ldr	r2, [sp, #16]
 80059d2:	441a      	add	r2, r3
 80059d4:	9204      	str	r2, [sp, #16]
 80059d6:	9a05      	ldr	r2, [sp, #20]
 80059d8:	2101      	movs	r1, #1
 80059da:	441a      	add	r2, r3
 80059dc:	4620      	mov	r0, r4
 80059de:	9205      	str	r2, [sp, #20]
 80059e0:	f000 fc60 	bl	80062a4 <__i2b>
 80059e4:	4607      	mov	r7, r0
 80059e6:	2d00      	cmp	r5, #0
 80059e8:	dd0c      	ble.n	8005a04 <_dtoa_r+0x754>
 80059ea:	9b05      	ldr	r3, [sp, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	dd09      	ble.n	8005a04 <_dtoa_r+0x754>
 80059f0:	42ab      	cmp	r3, r5
 80059f2:	9a04      	ldr	r2, [sp, #16]
 80059f4:	bfa8      	it	ge
 80059f6:	462b      	movge	r3, r5
 80059f8:	1ad2      	subs	r2, r2, r3
 80059fa:	9204      	str	r2, [sp, #16]
 80059fc:	9a05      	ldr	r2, [sp, #20]
 80059fe:	1aed      	subs	r5, r5, r3
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	9b07      	ldr	r3, [sp, #28]
 8005a06:	b31b      	cbz	r3, 8005a50 <_dtoa_r+0x7a0>
 8005a08:	9b08      	ldr	r3, [sp, #32]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80af 	beq.w	8005b6e <_dtoa_r+0x8be>
 8005a10:	2e00      	cmp	r6, #0
 8005a12:	dd13      	ble.n	8005a3c <_dtoa_r+0x78c>
 8005a14:	4639      	mov	r1, r7
 8005a16:	4632      	mov	r2, r6
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f000 fd03 	bl	8006424 <__pow5mult>
 8005a1e:	ee18 2a10 	vmov	r2, s16
 8005a22:	4601      	mov	r1, r0
 8005a24:	4607      	mov	r7, r0
 8005a26:	4620      	mov	r0, r4
 8005a28:	f000 fc52 	bl	80062d0 <__multiply>
 8005a2c:	ee18 1a10 	vmov	r1, s16
 8005a30:	4680      	mov	r8, r0
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 fb7e 	bl	8006134 <_Bfree>
 8005a38:	ee08 8a10 	vmov	s16, r8
 8005a3c:	9b07      	ldr	r3, [sp, #28]
 8005a3e:	1b9a      	subs	r2, r3, r6
 8005a40:	d006      	beq.n	8005a50 <_dtoa_r+0x7a0>
 8005a42:	ee18 1a10 	vmov	r1, s16
 8005a46:	4620      	mov	r0, r4
 8005a48:	f000 fcec 	bl	8006424 <__pow5mult>
 8005a4c:	ee08 0a10 	vmov	s16, r0
 8005a50:	2101      	movs	r1, #1
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 fc26 	bl	80062a4 <__i2b>
 8005a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	f340 8088 	ble.w	8005b72 <_dtoa_r+0x8c2>
 8005a62:	461a      	mov	r2, r3
 8005a64:	4601      	mov	r1, r0
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 fcdc 	bl	8006424 <__pow5mult>
 8005a6c:	9b06      	ldr	r3, [sp, #24]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	4606      	mov	r6, r0
 8005a72:	f340 8081 	ble.w	8005b78 <_dtoa_r+0x8c8>
 8005a76:	f04f 0800 	mov.w	r8, #0
 8005a7a:	6933      	ldr	r3, [r6, #16]
 8005a7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a80:	6918      	ldr	r0, [r3, #16]
 8005a82:	f000 fbbf 	bl	8006204 <__hi0bits>
 8005a86:	f1c0 0020 	rsb	r0, r0, #32
 8005a8a:	9b05      	ldr	r3, [sp, #20]
 8005a8c:	4418      	add	r0, r3
 8005a8e:	f010 001f 	ands.w	r0, r0, #31
 8005a92:	f000 8092 	beq.w	8005bba <_dtoa_r+0x90a>
 8005a96:	f1c0 0320 	rsb	r3, r0, #32
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	f340 808a 	ble.w	8005bb4 <_dtoa_r+0x904>
 8005aa0:	f1c0 001c 	rsb	r0, r0, #28
 8005aa4:	9b04      	ldr	r3, [sp, #16]
 8005aa6:	4403      	add	r3, r0
 8005aa8:	9304      	str	r3, [sp, #16]
 8005aaa:	9b05      	ldr	r3, [sp, #20]
 8005aac:	4403      	add	r3, r0
 8005aae:	4405      	add	r5, r0
 8005ab0:	9305      	str	r3, [sp, #20]
 8005ab2:	9b04      	ldr	r3, [sp, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dd07      	ble.n	8005ac8 <_dtoa_r+0x818>
 8005ab8:	ee18 1a10 	vmov	r1, s16
 8005abc:	461a      	mov	r2, r3
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 fd0a 	bl	80064d8 <__lshift>
 8005ac4:	ee08 0a10 	vmov	s16, r0
 8005ac8:	9b05      	ldr	r3, [sp, #20]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	dd05      	ble.n	8005ada <_dtoa_r+0x82a>
 8005ace:	4631      	mov	r1, r6
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 fd00 	bl	80064d8 <__lshift>
 8005ad8:	4606      	mov	r6, r0
 8005ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d06e      	beq.n	8005bbe <_dtoa_r+0x90e>
 8005ae0:	ee18 0a10 	vmov	r0, s16
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	f000 fd67 	bl	80065b8 <__mcmp>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	da67      	bge.n	8005bbe <_dtoa_r+0x90e>
 8005aee:	9b00      	ldr	r3, [sp, #0]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	ee18 1a10 	vmov	r1, s16
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	220a      	movs	r2, #10
 8005afa:	2300      	movs	r3, #0
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fb3b 	bl	8006178 <__multadd>
 8005b02:	9b08      	ldr	r3, [sp, #32]
 8005b04:	ee08 0a10 	vmov	s16, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 81b1 	beq.w	8005e70 <_dtoa_r+0xbc0>
 8005b0e:	2300      	movs	r3, #0
 8005b10:	4639      	mov	r1, r7
 8005b12:	220a      	movs	r2, #10
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 fb2f 	bl	8006178 <__multadd>
 8005b1a:	9b02      	ldr	r3, [sp, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	4607      	mov	r7, r0
 8005b20:	f300 808e 	bgt.w	8005c40 <_dtoa_r+0x990>
 8005b24:	9b06      	ldr	r3, [sp, #24]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	dc51      	bgt.n	8005bce <_dtoa_r+0x91e>
 8005b2a:	e089      	b.n	8005c40 <_dtoa_r+0x990>
 8005b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b32:	e74b      	b.n	80059cc <_dtoa_r+0x71c>
 8005b34:	9b03      	ldr	r3, [sp, #12]
 8005b36:	1e5e      	subs	r6, r3, #1
 8005b38:	9b07      	ldr	r3, [sp, #28]
 8005b3a:	42b3      	cmp	r3, r6
 8005b3c:	bfbf      	itttt	lt
 8005b3e:	9b07      	ldrlt	r3, [sp, #28]
 8005b40:	9607      	strlt	r6, [sp, #28]
 8005b42:	1af2      	sublt	r2, r6, r3
 8005b44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b46:	bfb6      	itet	lt
 8005b48:	189b      	addlt	r3, r3, r2
 8005b4a:	1b9e      	subge	r6, r3, r6
 8005b4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005b4e:	9b03      	ldr	r3, [sp, #12]
 8005b50:	bfb8      	it	lt
 8005b52:	2600      	movlt	r6, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	bfb7      	itett	lt
 8005b58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b60:	1a9d      	sublt	r5, r3, r2
 8005b62:	2300      	movlt	r3, #0
 8005b64:	e734      	b.n	80059d0 <_dtoa_r+0x720>
 8005b66:	9e07      	ldr	r6, [sp, #28]
 8005b68:	9d04      	ldr	r5, [sp, #16]
 8005b6a:	9f08      	ldr	r7, [sp, #32]
 8005b6c:	e73b      	b.n	80059e6 <_dtoa_r+0x736>
 8005b6e:	9a07      	ldr	r2, [sp, #28]
 8005b70:	e767      	b.n	8005a42 <_dtoa_r+0x792>
 8005b72:	9b06      	ldr	r3, [sp, #24]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	dc18      	bgt.n	8005baa <_dtoa_r+0x8fa>
 8005b78:	f1ba 0f00 	cmp.w	sl, #0
 8005b7c:	d115      	bne.n	8005baa <_dtoa_r+0x8fa>
 8005b7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b82:	b993      	cbnz	r3, 8005baa <_dtoa_r+0x8fa>
 8005b84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b88:	0d1b      	lsrs	r3, r3, #20
 8005b8a:	051b      	lsls	r3, r3, #20
 8005b8c:	b183      	cbz	r3, 8005bb0 <_dtoa_r+0x900>
 8005b8e:	9b04      	ldr	r3, [sp, #16]
 8005b90:	3301      	adds	r3, #1
 8005b92:	9304      	str	r3, [sp, #16]
 8005b94:	9b05      	ldr	r3, [sp, #20]
 8005b96:	3301      	adds	r3, #1
 8005b98:	9305      	str	r3, [sp, #20]
 8005b9a:	f04f 0801 	mov.w	r8, #1
 8005b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f47f af6a 	bne.w	8005a7a <_dtoa_r+0x7ca>
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	e76f      	b.n	8005a8a <_dtoa_r+0x7da>
 8005baa:	f04f 0800 	mov.w	r8, #0
 8005bae:	e7f6      	b.n	8005b9e <_dtoa_r+0x8ee>
 8005bb0:	4698      	mov	r8, r3
 8005bb2:	e7f4      	b.n	8005b9e <_dtoa_r+0x8ee>
 8005bb4:	f43f af7d 	beq.w	8005ab2 <_dtoa_r+0x802>
 8005bb8:	4618      	mov	r0, r3
 8005bba:	301c      	adds	r0, #28
 8005bbc:	e772      	b.n	8005aa4 <_dtoa_r+0x7f4>
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	dc37      	bgt.n	8005c34 <_dtoa_r+0x984>
 8005bc4:	9b06      	ldr	r3, [sp, #24]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	dd34      	ble.n	8005c34 <_dtoa_r+0x984>
 8005bca:	9b03      	ldr	r3, [sp, #12]
 8005bcc:	9302      	str	r3, [sp, #8]
 8005bce:	9b02      	ldr	r3, [sp, #8]
 8005bd0:	b96b      	cbnz	r3, 8005bee <_dtoa_r+0x93e>
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	2205      	movs	r2, #5
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f000 face 	bl	8006178 <__multadd>
 8005bdc:	4601      	mov	r1, r0
 8005bde:	4606      	mov	r6, r0
 8005be0:	ee18 0a10 	vmov	r0, s16
 8005be4:	f000 fce8 	bl	80065b8 <__mcmp>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	f73f adbb 	bgt.w	8005764 <_dtoa_r+0x4b4>
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	9d01      	ldr	r5, [sp, #4]
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	f04f 0800 	mov.w	r8, #0
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	f000 fa99 	bl	8006134 <_Bfree>
 8005c02:	2f00      	cmp	r7, #0
 8005c04:	f43f aea4 	beq.w	8005950 <_dtoa_r+0x6a0>
 8005c08:	f1b8 0f00 	cmp.w	r8, #0
 8005c0c:	d005      	beq.n	8005c1a <_dtoa_r+0x96a>
 8005c0e:	45b8      	cmp	r8, r7
 8005c10:	d003      	beq.n	8005c1a <_dtoa_r+0x96a>
 8005c12:	4641      	mov	r1, r8
 8005c14:	4620      	mov	r0, r4
 8005c16:	f000 fa8d 	bl	8006134 <_Bfree>
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f000 fa89 	bl	8006134 <_Bfree>
 8005c22:	e695      	b.n	8005950 <_dtoa_r+0x6a0>
 8005c24:	2600      	movs	r6, #0
 8005c26:	4637      	mov	r7, r6
 8005c28:	e7e1      	b.n	8005bee <_dtoa_r+0x93e>
 8005c2a:	9700      	str	r7, [sp, #0]
 8005c2c:	4637      	mov	r7, r6
 8005c2e:	e599      	b.n	8005764 <_dtoa_r+0x4b4>
 8005c30:	40240000 	.word	0x40240000
 8005c34:	9b08      	ldr	r3, [sp, #32]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 80ca 	beq.w	8005dd0 <_dtoa_r+0xb20>
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	9302      	str	r3, [sp, #8]
 8005c40:	2d00      	cmp	r5, #0
 8005c42:	dd05      	ble.n	8005c50 <_dtoa_r+0x9a0>
 8005c44:	4639      	mov	r1, r7
 8005c46:	462a      	mov	r2, r5
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fc45 	bl	80064d8 <__lshift>
 8005c4e:	4607      	mov	r7, r0
 8005c50:	f1b8 0f00 	cmp.w	r8, #0
 8005c54:	d05b      	beq.n	8005d0e <_dtoa_r+0xa5e>
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 fa2b 	bl	80060b4 <_Balloc>
 8005c5e:	4605      	mov	r5, r0
 8005c60:	b928      	cbnz	r0, 8005c6e <_dtoa_r+0x9be>
 8005c62:	4b87      	ldr	r3, [pc, #540]	; (8005e80 <_dtoa_r+0xbd0>)
 8005c64:	4602      	mov	r2, r0
 8005c66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c6a:	f7ff bb3b 	b.w	80052e4 <_dtoa_r+0x34>
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	3202      	adds	r2, #2
 8005c72:	0092      	lsls	r2, r2, #2
 8005c74:	f107 010c 	add.w	r1, r7, #12
 8005c78:	300c      	adds	r0, #12
 8005c7a:	f000 fa0d 	bl	8006098 <memcpy>
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4629      	mov	r1, r5
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 fc28 	bl	80064d8 <__lshift>
 8005c88:	9b01      	ldr	r3, [sp, #4]
 8005c8a:	f103 0901 	add.w	r9, r3, #1
 8005c8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c92:	4413      	add	r3, r2
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	f00a 0301 	and.w	r3, sl, #1
 8005c9a:	46b8      	mov	r8, r7
 8005c9c:	9304      	str	r3, [sp, #16]
 8005c9e:	4607      	mov	r7, r0
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	ee18 0a10 	vmov	r0, s16
 8005ca6:	f7ff fa77 	bl	8005198 <quorem>
 8005caa:	4641      	mov	r1, r8
 8005cac:	9002      	str	r0, [sp, #8]
 8005cae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005cb2:	ee18 0a10 	vmov	r0, s16
 8005cb6:	f000 fc7f 	bl	80065b8 <__mcmp>
 8005cba:	463a      	mov	r2, r7
 8005cbc:	9003      	str	r0, [sp, #12]
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 fc95 	bl	80065f0 <__mdiff>
 8005cc6:	68c2      	ldr	r2, [r0, #12]
 8005cc8:	f109 3bff 	add.w	fp, r9, #4294967295
 8005ccc:	4605      	mov	r5, r0
 8005cce:	bb02      	cbnz	r2, 8005d12 <_dtoa_r+0xa62>
 8005cd0:	4601      	mov	r1, r0
 8005cd2:	ee18 0a10 	vmov	r0, s16
 8005cd6:	f000 fc6f 	bl	80065b8 <__mcmp>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4620      	mov	r0, r4
 8005ce0:	9207      	str	r2, [sp, #28]
 8005ce2:	f000 fa27 	bl	8006134 <_Bfree>
 8005ce6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005cea:	ea43 0102 	orr.w	r1, r3, r2
 8005cee:	9b04      	ldr	r3, [sp, #16]
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	464d      	mov	r5, r9
 8005cf4:	d10f      	bne.n	8005d16 <_dtoa_r+0xa66>
 8005cf6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005cfa:	d02a      	beq.n	8005d52 <_dtoa_r+0xaa2>
 8005cfc:	9b03      	ldr	r3, [sp, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dd02      	ble.n	8005d08 <_dtoa_r+0xa58>
 8005d02:	9b02      	ldr	r3, [sp, #8]
 8005d04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005d08:	f88b a000 	strb.w	sl, [fp]
 8005d0c:	e775      	b.n	8005bfa <_dtoa_r+0x94a>
 8005d0e:	4638      	mov	r0, r7
 8005d10:	e7ba      	b.n	8005c88 <_dtoa_r+0x9d8>
 8005d12:	2201      	movs	r2, #1
 8005d14:	e7e2      	b.n	8005cdc <_dtoa_r+0xa2c>
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	db04      	blt.n	8005d26 <_dtoa_r+0xa76>
 8005d1c:	9906      	ldr	r1, [sp, #24]
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	9904      	ldr	r1, [sp, #16]
 8005d22:	430b      	orrs	r3, r1
 8005d24:	d122      	bne.n	8005d6c <_dtoa_r+0xabc>
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	ddee      	ble.n	8005d08 <_dtoa_r+0xa58>
 8005d2a:	ee18 1a10 	vmov	r1, s16
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fbd1 	bl	80064d8 <__lshift>
 8005d36:	4631      	mov	r1, r6
 8005d38:	ee08 0a10 	vmov	s16, r0
 8005d3c:	f000 fc3c 	bl	80065b8 <__mcmp>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	dc03      	bgt.n	8005d4c <_dtoa_r+0xa9c>
 8005d44:	d1e0      	bne.n	8005d08 <_dtoa_r+0xa58>
 8005d46:	f01a 0f01 	tst.w	sl, #1
 8005d4a:	d0dd      	beq.n	8005d08 <_dtoa_r+0xa58>
 8005d4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d50:	d1d7      	bne.n	8005d02 <_dtoa_r+0xa52>
 8005d52:	2339      	movs	r3, #57	; 0x39
 8005d54:	f88b 3000 	strb.w	r3, [fp]
 8005d58:	462b      	mov	r3, r5
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d62:	2a39      	cmp	r2, #57	; 0x39
 8005d64:	d071      	beq.n	8005e4a <_dtoa_r+0xb9a>
 8005d66:	3201      	adds	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	e746      	b.n	8005bfa <_dtoa_r+0x94a>
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	dd07      	ble.n	8005d80 <_dtoa_r+0xad0>
 8005d70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d74:	d0ed      	beq.n	8005d52 <_dtoa_r+0xaa2>
 8005d76:	f10a 0301 	add.w	r3, sl, #1
 8005d7a:	f88b 3000 	strb.w	r3, [fp]
 8005d7e:	e73c      	b.n	8005bfa <_dtoa_r+0x94a>
 8005d80:	9b05      	ldr	r3, [sp, #20]
 8005d82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d86:	4599      	cmp	r9, r3
 8005d88:	d047      	beq.n	8005e1a <_dtoa_r+0xb6a>
 8005d8a:	ee18 1a10 	vmov	r1, s16
 8005d8e:	2300      	movs	r3, #0
 8005d90:	220a      	movs	r2, #10
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 f9f0 	bl	8006178 <__multadd>
 8005d98:	45b8      	cmp	r8, r7
 8005d9a:	ee08 0a10 	vmov	s16, r0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	f04f 020a 	mov.w	r2, #10
 8005da6:	4641      	mov	r1, r8
 8005da8:	4620      	mov	r0, r4
 8005daa:	d106      	bne.n	8005dba <_dtoa_r+0xb0a>
 8005dac:	f000 f9e4 	bl	8006178 <__multadd>
 8005db0:	4680      	mov	r8, r0
 8005db2:	4607      	mov	r7, r0
 8005db4:	f109 0901 	add.w	r9, r9, #1
 8005db8:	e772      	b.n	8005ca0 <_dtoa_r+0x9f0>
 8005dba:	f000 f9dd 	bl	8006178 <__multadd>
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	220a      	movs	r2, #10
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 f9d6 	bl	8006178 <__multadd>
 8005dcc:	4607      	mov	r7, r0
 8005dce:	e7f1      	b.n	8005db4 <_dtoa_r+0xb04>
 8005dd0:	9b03      	ldr	r3, [sp, #12]
 8005dd2:	9302      	str	r3, [sp, #8]
 8005dd4:	9d01      	ldr	r5, [sp, #4]
 8005dd6:	ee18 0a10 	vmov	r0, s16
 8005dda:	4631      	mov	r1, r6
 8005ddc:	f7ff f9dc 	bl	8005198 <quorem>
 8005de0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005de4:	9b01      	ldr	r3, [sp, #4]
 8005de6:	f805 ab01 	strb.w	sl, [r5], #1
 8005dea:	1aea      	subs	r2, r5, r3
 8005dec:	9b02      	ldr	r3, [sp, #8]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	dd09      	ble.n	8005e06 <_dtoa_r+0xb56>
 8005df2:	ee18 1a10 	vmov	r1, s16
 8005df6:	2300      	movs	r3, #0
 8005df8:	220a      	movs	r2, #10
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 f9bc 	bl	8006178 <__multadd>
 8005e00:	ee08 0a10 	vmov	s16, r0
 8005e04:	e7e7      	b.n	8005dd6 <_dtoa_r+0xb26>
 8005e06:	9b02      	ldr	r3, [sp, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bfc8      	it	gt
 8005e0c:	461d      	movgt	r5, r3
 8005e0e:	9b01      	ldr	r3, [sp, #4]
 8005e10:	bfd8      	it	le
 8005e12:	2501      	movle	r5, #1
 8005e14:	441d      	add	r5, r3
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	ee18 1a10 	vmov	r1, s16
 8005e1e:	2201      	movs	r2, #1
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 fb59 	bl	80064d8 <__lshift>
 8005e26:	4631      	mov	r1, r6
 8005e28:	ee08 0a10 	vmov	s16, r0
 8005e2c:	f000 fbc4 	bl	80065b8 <__mcmp>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	dc91      	bgt.n	8005d58 <_dtoa_r+0xaa8>
 8005e34:	d102      	bne.n	8005e3c <_dtoa_r+0xb8c>
 8005e36:	f01a 0f01 	tst.w	sl, #1
 8005e3a:	d18d      	bne.n	8005d58 <_dtoa_r+0xaa8>
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	461d      	mov	r5, r3
 8005e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e44:	2a30      	cmp	r2, #48	; 0x30
 8005e46:	d0fa      	beq.n	8005e3e <_dtoa_r+0xb8e>
 8005e48:	e6d7      	b.n	8005bfa <_dtoa_r+0x94a>
 8005e4a:	9a01      	ldr	r2, [sp, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d184      	bne.n	8005d5a <_dtoa_r+0xaaa>
 8005e50:	9b00      	ldr	r3, [sp, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2331      	movs	r3, #49	; 0x31
 8005e58:	7013      	strb	r3, [r2, #0]
 8005e5a:	e6ce      	b.n	8005bfa <_dtoa_r+0x94a>
 8005e5c:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <_dtoa_r+0xbd4>)
 8005e5e:	f7ff ba95 	b.w	800538c <_dtoa_r+0xdc>
 8005e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f47f aa6e 	bne.w	8005346 <_dtoa_r+0x96>
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <_dtoa_r+0xbd8>)
 8005e6c:	f7ff ba8e 	b.w	800538c <_dtoa_r+0xdc>
 8005e70:	9b02      	ldr	r3, [sp, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	dcae      	bgt.n	8005dd4 <_dtoa_r+0xb24>
 8005e76:	9b06      	ldr	r3, [sp, #24]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	f73f aea8 	bgt.w	8005bce <_dtoa_r+0x91e>
 8005e7e:	e7a9      	b.n	8005dd4 <_dtoa_r+0xb24>
 8005e80:	080073ff 	.word	0x080073ff
 8005e84:	0800735c 	.word	0x0800735c
 8005e88:	08007380 	.word	0x08007380

08005e8c <std>:
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	b510      	push	{r4, lr}
 8005e90:	4604      	mov	r4, r0
 8005e92:	e9c0 3300 	strd	r3, r3, [r0]
 8005e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e9a:	6083      	str	r3, [r0, #8]
 8005e9c:	8181      	strh	r1, [r0, #12]
 8005e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8005ea0:	81c2      	strh	r2, [r0, #14]
 8005ea2:	6183      	str	r3, [r0, #24]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	305c      	adds	r0, #92	; 0x5c
 8005eaa:	f7fe fceb 	bl	8004884 <memset>
 8005eae:	4b05      	ldr	r3, [pc, #20]	; (8005ec4 <std+0x38>)
 8005eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <std+0x3c>)
 8005eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <std+0x40>)
 8005eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eba:	4b05      	ldr	r3, [pc, #20]	; (8005ed0 <std+0x44>)
 8005ebc:	6224      	str	r4, [r4, #32]
 8005ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8005ec0:	bd10      	pop	{r4, pc}
 8005ec2:	bf00      	nop
 8005ec4:	08006c7d 	.word	0x08006c7d
 8005ec8:	08006c9f 	.word	0x08006c9f
 8005ecc:	08006cd7 	.word	0x08006cd7
 8005ed0:	08006cfb 	.word	0x08006cfb

08005ed4 <_cleanup_r>:
 8005ed4:	4901      	ldr	r1, [pc, #4]	; (8005edc <_cleanup_r+0x8>)
 8005ed6:	f000 b8af 	b.w	8006038 <_fwalk_reent>
 8005eda:	bf00      	nop
 8005edc:	08007011 	.word	0x08007011

08005ee0 <__sfmoreglue>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	2268      	movs	r2, #104	; 0x68
 8005ee4:	1e4d      	subs	r5, r1, #1
 8005ee6:	4355      	muls	r5, r2
 8005ee8:	460e      	mov	r6, r1
 8005eea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005eee:	f000 fce7 	bl	80068c0 <_malloc_r>
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	b140      	cbz	r0, 8005f08 <__sfmoreglue+0x28>
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	e9c0 1600 	strd	r1, r6, [r0]
 8005efc:	300c      	adds	r0, #12
 8005efe:	60a0      	str	r0, [r4, #8]
 8005f00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f04:	f7fe fcbe 	bl	8004884 <memset>
 8005f08:	4620      	mov	r0, r4
 8005f0a:	bd70      	pop	{r4, r5, r6, pc}

08005f0c <__sfp_lock_acquire>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	; (8005f14 <__sfp_lock_acquire+0x8>)
 8005f0e:	f000 b8b8 	b.w	8006082 <__retarget_lock_acquire_recursive>
 8005f12:	bf00      	nop
 8005f14:	200002ed 	.word	0x200002ed

08005f18 <__sfp_lock_release>:
 8005f18:	4801      	ldr	r0, [pc, #4]	; (8005f20 <__sfp_lock_release+0x8>)
 8005f1a:	f000 b8b3 	b.w	8006084 <__retarget_lock_release_recursive>
 8005f1e:	bf00      	nop
 8005f20:	200002ed 	.word	0x200002ed

08005f24 <__sinit_lock_acquire>:
 8005f24:	4801      	ldr	r0, [pc, #4]	; (8005f2c <__sinit_lock_acquire+0x8>)
 8005f26:	f000 b8ac 	b.w	8006082 <__retarget_lock_acquire_recursive>
 8005f2a:	bf00      	nop
 8005f2c:	200002ee 	.word	0x200002ee

08005f30 <__sinit_lock_release>:
 8005f30:	4801      	ldr	r0, [pc, #4]	; (8005f38 <__sinit_lock_release+0x8>)
 8005f32:	f000 b8a7 	b.w	8006084 <__retarget_lock_release_recursive>
 8005f36:	bf00      	nop
 8005f38:	200002ee 	.word	0x200002ee

08005f3c <__sinit>:
 8005f3c:	b510      	push	{r4, lr}
 8005f3e:	4604      	mov	r4, r0
 8005f40:	f7ff fff0 	bl	8005f24 <__sinit_lock_acquire>
 8005f44:	69a3      	ldr	r3, [r4, #24]
 8005f46:	b11b      	cbz	r3, 8005f50 <__sinit+0x14>
 8005f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f4c:	f7ff bff0 	b.w	8005f30 <__sinit_lock_release>
 8005f50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f54:	6523      	str	r3, [r4, #80]	; 0x50
 8005f56:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <__sinit+0x68>)
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <__sinit+0x6c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f5e:	42a3      	cmp	r3, r4
 8005f60:	bf04      	itt	eq
 8005f62:	2301      	moveq	r3, #1
 8005f64:	61a3      	streq	r3, [r4, #24]
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 f820 	bl	8005fac <__sfp>
 8005f6c:	6060      	str	r0, [r4, #4]
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 f81c 	bl	8005fac <__sfp>
 8005f74:	60a0      	str	r0, [r4, #8]
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 f818 	bl	8005fac <__sfp>
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	60e0      	str	r0, [r4, #12]
 8005f80:	2104      	movs	r1, #4
 8005f82:	6860      	ldr	r0, [r4, #4]
 8005f84:	f7ff ff82 	bl	8005e8c <std>
 8005f88:	68a0      	ldr	r0, [r4, #8]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	2109      	movs	r1, #9
 8005f8e:	f7ff ff7d 	bl	8005e8c <std>
 8005f92:	68e0      	ldr	r0, [r4, #12]
 8005f94:	2202      	movs	r2, #2
 8005f96:	2112      	movs	r1, #18
 8005f98:	f7ff ff78 	bl	8005e8c <std>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	61a3      	str	r3, [r4, #24]
 8005fa0:	e7d2      	b.n	8005f48 <__sinit+0xc>
 8005fa2:	bf00      	nop
 8005fa4:	08007348 	.word	0x08007348
 8005fa8:	08005ed5 	.word	0x08005ed5

08005fac <__sfp>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	4607      	mov	r7, r0
 8005fb0:	f7ff ffac 	bl	8005f0c <__sfp_lock_acquire>
 8005fb4:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <__sfp+0x84>)
 8005fb6:	681e      	ldr	r6, [r3, #0]
 8005fb8:	69b3      	ldr	r3, [r6, #24]
 8005fba:	b913      	cbnz	r3, 8005fc2 <__sfp+0x16>
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f7ff ffbd 	bl	8005f3c <__sinit>
 8005fc2:	3648      	adds	r6, #72	; 0x48
 8005fc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	d503      	bpl.n	8005fd4 <__sfp+0x28>
 8005fcc:	6833      	ldr	r3, [r6, #0]
 8005fce:	b30b      	cbz	r3, 8006014 <__sfp+0x68>
 8005fd0:	6836      	ldr	r6, [r6, #0]
 8005fd2:	e7f7      	b.n	8005fc4 <__sfp+0x18>
 8005fd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fd8:	b9d5      	cbnz	r5, 8006010 <__sfp+0x64>
 8005fda:	4b16      	ldr	r3, [pc, #88]	; (8006034 <__sfp+0x88>)
 8005fdc:	60e3      	str	r3, [r4, #12]
 8005fde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fe2:	6665      	str	r5, [r4, #100]	; 0x64
 8005fe4:	f000 f84c 	bl	8006080 <__retarget_lock_init_recursive>
 8005fe8:	f7ff ff96 	bl	8005f18 <__sfp_lock_release>
 8005fec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ff4:	6025      	str	r5, [r4, #0]
 8005ff6:	61a5      	str	r5, [r4, #24]
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006000:	f7fe fc40 	bl	8004884 <memset>
 8006004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800600c:	4620      	mov	r0, r4
 800600e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006010:	3468      	adds	r4, #104	; 0x68
 8006012:	e7d9      	b.n	8005fc8 <__sfp+0x1c>
 8006014:	2104      	movs	r1, #4
 8006016:	4638      	mov	r0, r7
 8006018:	f7ff ff62 	bl	8005ee0 <__sfmoreglue>
 800601c:	4604      	mov	r4, r0
 800601e:	6030      	str	r0, [r6, #0]
 8006020:	2800      	cmp	r0, #0
 8006022:	d1d5      	bne.n	8005fd0 <__sfp+0x24>
 8006024:	f7ff ff78 	bl	8005f18 <__sfp_lock_release>
 8006028:	230c      	movs	r3, #12
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	e7ee      	b.n	800600c <__sfp+0x60>
 800602e:	bf00      	nop
 8006030:	08007348 	.word	0x08007348
 8006034:	ffff0001 	.word	0xffff0001

08006038 <_fwalk_reent>:
 8006038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800603c:	4606      	mov	r6, r0
 800603e:	4688      	mov	r8, r1
 8006040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006044:	2700      	movs	r7, #0
 8006046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800604a:	f1b9 0901 	subs.w	r9, r9, #1
 800604e:	d505      	bpl.n	800605c <_fwalk_reent+0x24>
 8006050:	6824      	ldr	r4, [r4, #0]
 8006052:	2c00      	cmp	r4, #0
 8006054:	d1f7      	bne.n	8006046 <_fwalk_reent+0xe>
 8006056:	4638      	mov	r0, r7
 8006058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800605c:	89ab      	ldrh	r3, [r5, #12]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d907      	bls.n	8006072 <_fwalk_reent+0x3a>
 8006062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006066:	3301      	adds	r3, #1
 8006068:	d003      	beq.n	8006072 <_fwalk_reent+0x3a>
 800606a:	4629      	mov	r1, r5
 800606c:	4630      	mov	r0, r6
 800606e:	47c0      	blx	r8
 8006070:	4307      	orrs	r7, r0
 8006072:	3568      	adds	r5, #104	; 0x68
 8006074:	e7e9      	b.n	800604a <_fwalk_reent+0x12>
	...

08006078 <_localeconv_r>:
 8006078:	4800      	ldr	r0, [pc, #0]	; (800607c <_localeconv_r+0x4>)
 800607a:	4770      	bx	lr
 800607c:	20000164 	.word	0x20000164

08006080 <__retarget_lock_init_recursive>:
 8006080:	4770      	bx	lr

08006082 <__retarget_lock_acquire_recursive>:
 8006082:	4770      	bx	lr

08006084 <__retarget_lock_release_recursive>:
 8006084:	4770      	bx	lr
	...

08006088 <malloc>:
 8006088:	4b02      	ldr	r3, [pc, #8]	; (8006094 <malloc+0xc>)
 800608a:	4601      	mov	r1, r0
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	f000 bc17 	b.w	80068c0 <_malloc_r>
 8006092:	bf00      	nop
 8006094:	20000010 	.word	0x20000010

08006098 <memcpy>:
 8006098:	440a      	add	r2, r1
 800609a:	4291      	cmp	r1, r2
 800609c:	f100 33ff 	add.w	r3, r0, #4294967295
 80060a0:	d100      	bne.n	80060a4 <memcpy+0xc>
 80060a2:	4770      	bx	lr
 80060a4:	b510      	push	{r4, lr}
 80060a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ae:	4291      	cmp	r1, r2
 80060b0:	d1f9      	bne.n	80060a6 <memcpy+0xe>
 80060b2:	bd10      	pop	{r4, pc}

080060b4 <_Balloc>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060b8:	4604      	mov	r4, r0
 80060ba:	460d      	mov	r5, r1
 80060bc:	b976      	cbnz	r6, 80060dc <_Balloc+0x28>
 80060be:	2010      	movs	r0, #16
 80060c0:	f7ff ffe2 	bl	8006088 <malloc>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6260      	str	r0, [r4, #36]	; 0x24
 80060c8:	b920      	cbnz	r0, 80060d4 <_Balloc+0x20>
 80060ca:	4b18      	ldr	r3, [pc, #96]	; (800612c <_Balloc+0x78>)
 80060cc:	4818      	ldr	r0, [pc, #96]	; (8006130 <_Balloc+0x7c>)
 80060ce:	2166      	movs	r1, #102	; 0x66
 80060d0:	f000 feea 	bl	8006ea8 <__assert_func>
 80060d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060d8:	6006      	str	r6, [r0, #0]
 80060da:	60c6      	str	r6, [r0, #12]
 80060dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060de:	68f3      	ldr	r3, [r6, #12]
 80060e0:	b183      	cbz	r3, 8006104 <_Balloc+0x50>
 80060e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060ea:	b9b8      	cbnz	r0, 800611c <_Balloc+0x68>
 80060ec:	2101      	movs	r1, #1
 80060ee:	fa01 f605 	lsl.w	r6, r1, r5
 80060f2:	1d72      	adds	r2, r6, #5
 80060f4:	0092      	lsls	r2, r2, #2
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 fb60 	bl	80067bc <_calloc_r>
 80060fc:	b160      	cbz	r0, 8006118 <_Balloc+0x64>
 80060fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006102:	e00e      	b.n	8006122 <_Balloc+0x6e>
 8006104:	2221      	movs	r2, #33	; 0x21
 8006106:	2104      	movs	r1, #4
 8006108:	4620      	mov	r0, r4
 800610a:	f000 fb57 	bl	80067bc <_calloc_r>
 800610e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006110:	60f0      	str	r0, [r6, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e4      	bne.n	80060e2 <_Balloc+0x2e>
 8006118:	2000      	movs	r0, #0
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	6802      	ldr	r2, [r0, #0]
 800611e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006122:	2300      	movs	r3, #0
 8006124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006128:	e7f7      	b.n	800611a <_Balloc+0x66>
 800612a:	bf00      	nop
 800612c:	0800738d 	.word	0x0800738d
 8006130:	08007470 	.word	0x08007470

08006134 <_Bfree>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006138:	4605      	mov	r5, r0
 800613a:	460c      	mov	r4, r1
 800613c:	b976      	cbnz	r6, 800615c <_Bfree+0x28>
 800613e:	2010      	movs	r0, #16
 8006140:	f7ff ffa2 	bl	8006088 <malloc>
 8006144:	4602      	mov	r2, r0
 8006146:	6268      	str	r0, [r5, #36]	; 0x24
 8006148:	b920      	cbnz	r0, 8006154 <_Bfree+0x20>
 800614a:	4b09      	ldr	r3, [pc, #36]	; (8006170 <_Bfree+0x3c>)
 800614c:	4809      	ldr	r0, [pc, #36]	; (8006174 <_Bfree+0x40>)
 800614e:	218a      	movs	r1, #138	; 0x8a
 8006150:	f000 feaa 	bl	8006ea8 <__assert_func>
 8006154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006158:	6006      	str	r6, [r0, #0]
 800615a:	60c6      	str	r6, [r0, #12]
 800615c:	b13c      	cbz	r4, 800616e <_Bfree+0x3a>
 800615e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006160:	6862      	ldr	r2, [r4, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006168:	6021      	str	r1, [r4, #0]
 800616a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	0800738d 	.word	0x0800738d
 8006174:	08007470 	.word	0x08007470

08006178 <__multadd>:
 8006178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800617c:	690d      	ldr	r5, [r1, #16]
 800617e:	4607      	mov	r7, r0
 8006180:	460c      	mov	r4, r1
 8006182:	461e      	mov	r6, r3
 8006184:	f101 0c14 	add.w	ip, r1, #20
 8006188:	2000      	movs	r0, #0
 800618a:	f8dc 3000 	ldr.w	r3, [ip]
 800618e:	b299      	uxth	r1, r3
 8006190:	fb02 6101 	mla	r1, r2, r1, r6
 8006194:	0c1e      	lsrs	r6, r3, #16
 8006196:	0c0b      	lsrs	r3, r1, #16
 8006198:	fb02 3306 	mla	r3, r2, r6, r3
 800619c:	b289      	uxth	r1, r1
 800619e:	3001      	adds	r0, #1
 80061a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061a4:	4285      	cmp	r5, r0
 80061a6:	f84c 1b04 	str.w	r1, [ip], #4
 80061aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061ae:	dcec      	bgt.n	800618a <__multadd+0x12>
 80061b0:	b30e      	cbz	r6, 80061f6 <__multadd+0x7e>
 80061b2:	68a3      	ldr	r3, [r4, #8]
 80061b4:	42ab      	cmp	r3, r5
 80061b6:	dc19      	bgt.n	80061ec <__multadd+0x74>
 80061b8:	6861      	ldr	r1, [r4, #4]
 80061ba:	4638      	mov	r0, r7
 80061bc:	3101      	adds	r1, #1
 80061be:	f7ff ff79 	bl	80060b4 <_Balloc>
 80061c2:	4680      	mov	r8, r0
 80061c4:	b928      	cbnz	r0, 80061d2 <__multadd+0x5a>
 80061c6:	4602      	mov	r2, r0
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <__multadd+0x84>)
 80061ca:	480d      	ldr	r0, [pc, #52]	; (8006200 <__multadd+0x88>)
 80061cc:	21b5      	movs	r1, #181	; 0xb5
 80061ce:	f000 fe6b 	bl	8006ea8 <__assert_func>
 80061d2:	6922      	ldr	r2, [r4, #16]
 80061d4:	3202      	adds	r2, #2
 80061d6:	f104 010c 	add.w	r1, r4, #12
 80061da:	0092      	lsls	r2, r2, #2
 80061dc:	300c      	adds	r0, #12
 80061de:	f7ff ff5b 	bl	8006098 <memcpy>
 80061e2:	4621      	mov	r1, r4
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff ffa5 	bl	8006134 <_Bfree>
 80061ea:	4644      	mov	r4, r8
 80061ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061f0:	3501      	adds	r5, #1
 80061f2:	615e      	str	r6, [r3, #20]
 80061f4:	6125      	str	r5, [r4, #16]
 80061f6:	4620      	mov	r0, r4
 80061f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061fc:	080073ff 	.word	0x080073ff
 8006200:	08007470 	.word	0x08007470

08006204 <__hi0bits>:
 8006204:	0c03      	lsrs	r3, r0, #16
 8006206:	041b      	lsls	r3, r3, #16
 8006208:	b9d3      	cbnz	r3, 8006240 <__hi0bits+0x3c>
 800620a:	0400      	lsls	r0, r0, #16
 800620c:	2310      	movs	r3, #16
 800620e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006212:	bf04      	itt	eq
 8006214:	0200      	lsleq	r0, r0, #8
 8006216:	3308      	addeq	r3, #8
 8006218:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800621c:	bf04      	itt	eq
 800621e:	0100      	lsleq	r0, r0, #4
 8006220:	3304      	addeq	r3, #4
 8006222:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006226:	bf04      	itt	eq
 8006228:	0080      	lsleq	r0, r0, #2
 800622a:	3302      	addeq	r3, #2
 800622c:	2800      	cmp	r0, #0
 800622e:	db05      	blt.n	800623c <__hi0bits+0x38>
 8006230:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006234:	f103 0301 	add.w	r3, r3, #1
 8006238:	bf08      	it	eq
 800623a:	2320      	moveq	r3, #32
 800623c:	4618      	mov	r0, r3
 800623e:	4770      	bx	lr
 8006240:	2300      	movs	r3, #0
 8006242:	e7e4      	b.n	800620e <__hi0bits+0xa>

08006244 <__lo0bits>:
 8006244:	6803      	ldr	r3, [r0, #0]
 8006246:	f013 0207 	ands.w	r2, r3, #7
 800624a:	4601      	mov	r1, r0
 800624c:	d00b      	beq.n	8006266 <__lo0bits+0x22>
 800624e:	07da      	lsls	r2, r3, #31
 8006250:	d423      	bmi.n	800629a <__lo0bits+0x56>
 8006252:	0798      	lsls	r0, r3, #30
 8006254:	bf49      	itett	mi
 8006256:	085b      	lsrmi	r3, r3, #1
 8006258:	089b      	lsrpl	r3, r3, #2
 800625a:	2001      	movmi	r0, #1
 800625c:	600b      	strmi	r3, [r1, #0]
 800625e:	bf5c      	itt	pl
 8006260:	600b      	strpl	r3, [r1, #0]
 8006262:	2002      	movpl	r0, #2
 8006264:	4770      	bx	lr
 8006266:	b298      	uxth	r0, r3
 8006268:	b9a8      	cbnz	r0, 8006296 <__lo0bits+0x52>
 800626a:	0c1b      	lsrs	r3, r3, #16
 800626c:	2010      	movs	r0, #16
 800626e:	b2da      	uxtb	r2, r3
 8006270:	b90a      	cbnz	r2, 8006276 <__lo0bits+0x32>
 8006272:	3008      	adds	r0, #8
 8006274:	0a1b      	lsrs	r3, r3, #8
 8006276:	071a      	lsls	r2, r3, #28
 8006278:	bf04      	itt	eq
 800627a:	091b      	lsreq	r3, r3, #4
 800627c:	3004      	addeq	r0, #4
 800627e:	079a      	lsls	r2, r3, #30
 8006280:	bf04      	itt	eq
 8006282:	089b      	lsreq	r3, r3, #2
 8006284:	3002      	addeq	r0, #2
 8006286:	07da      	lsls	r2, r3, #31
 8006288:	d403      	bmi.n	8006292 <__lo0bits+0x4e>
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	f100 0001 	add.w	r0, r0, #1
 8006290:	d005      	beq.n	800629e <__lo0bits+0x5a>
 8006292:	600b      	str	r3, [r1, #0]
 8006294:	4770      	bx	lr
 8006296:	4610      	mov	r0, r2
 8006298:	e7e9      	b.n	800626e <__lo0bits+0x2a>
 800629a:	2000      	movs	r0, #0
 800629c:	4770      	bx	lr
 800629e:	2020      	movs	r0, #32
 80062a0:	4770      	bx	lr
	...

080062a4 <__i2b>:
 80062a4:	b510      	push	{r4, lr}
 80062a6:	460c      	mov	r4, r1
 80062a8:	2101      	movs	r1, #1
 80062aa:	f7ff ff03 	bl	80060b4 <_Balloc>
 80062ae:	4602      	mov	r2, r0
 80062b0:	b928      	cbnz	r0, 80062be <__i2b+0x1a>
 80062b2:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <__i2b+0x24>)
 80062b4:	4805      	ldr	r0, [pc, #20]	; (80062cc <__i2b+0x28>)
 80062b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062ba:	f000 fdf5 	bl	8006ea8 <__assert_func>
 80062be:	2301      	movs	r3, #1
 80062c0:	6144      	str	r4, [r0, #20]
 80062c2:	6103      	str	r3, [r0, #16]
 80062c4:	bd10      	pop	{r4, pc}
 80062c6:	bf00      	nop
 80062c8:	080073ff 	.word	0x080073ff
 80062cc:	08007470 	.word	0x08007470

080062d0 <__multiply>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	4691      	mov	r9, r2
 80062d6:	690a      	ldr	r2, [r1, #16]
 80062d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062dc:	429a      	cmp	r2, r3
 80062de:	bfb8      	it	lt
 80062e0:	460b      	movlt	r3, r1
 80062e2:	460c      	mov	r4, r1
 80062e4:	bfbc      	itt	lt
 80062e6:	464c      	movlt	r4, r9
 80062e8:	4699      	movlt	r9, r3
 80062ea:	6927      	ldr	r7, [r4, #16]
 80062ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062f0:	68a3      	ldr	r3, [r4, #8]
 80062f2:	6861      	ldr	r1, [r4, #4]
 80062f4:	eb07 060a 	add.w	r6, r7, sl
 80062f8:	42b3      	cmp	r3, r6
 80062fa:	b085      	sub	sp, #20
 80062fc:	bfb8      	it	lt
 80062fe:	3101      	addlt	r1, #1
 8006300:	f7ff fed8 	bl	80060b4 <_Balloc>
 8006304:	b930      	cbnz	r0, 8006314 <__multiply+0x44>
 8006306:	4602      	mov	r2, r0
 8006308:	4b44      	ldr	r3, [pc, #272]	; (800641c <__multiply+0x14c>)
 800630a:	4845      	ldr	r0, [pc, #276]	; (8006420 <__multiply+0x150>)
 800630c:	f240 115d 	movw	r1, #349	; 0x15d
 8006310:	f000 fdca 	bl	8006ea8 <__assert_func>
 8006314:	f100 0514 	add.w	r5, r0, #20
 8006318:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800631c:	462b      	mov	r3, r5
 800631e:	2200      	movs	r2, #0
 8006320:	4543      	cmp	r3, r8
 8006322:	d321      	bcc.n	8006368 <__multiply+0x98>
 8006324:	f104 0314 	add.w	r3, r4, #20
 8006328:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800632c:	f109 0314 	add.w	r3, r9, #20
 8006330:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006334:	9202      	str	r2, [sp, #8]
 8006336:	1b3a      	subs	r2, r7, r4
 8006338:	3a15      	subs	r2, #21
 800633a:	f022 0203 	bic.w	r2, r2, #3
 800633e:	3204      	adds	r2, #4
 8006340:	f104 0115 	add.w	r1, r4, #21
 8006344:	428f      	cmp	r7, r1
 8006346:	bf38      	it	cc
 8006348:	2204      	movcc	r2, #4
 800634a:	9201      	str	r2, [sp, #4]
 800634c:	9a02      	ldr	r2, [sp, #8]
 800634e:	9303      	str	r3, [sp, #12]
 8006350:	429a      	cmp	r2, r3
 8006352:	d80c      	bhi.n	800636e <__multiply+0x9e>
 8006354:	2e00      	cmp	r6, #0
 8006356:	dd03      	ble.n	8006360 <__multiply+0x90>
 8006358:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05a      	beq.n	8006416 <__multiply+0x146>
 8006360:	6106      	str	r6, [r0, #16]
 8006362:	b005      	add	sp, #20
 8006364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006368:	f843 2b04 	str.w	r2, [r3], #4
 800636c:	e7d8      	b.n	8006320 <__multiply+0x50>
 800636e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006372:	f1ba 0f00 	cmp.w	sl, #0
 8006376:	d024      	beq.n	80063c2 <__multiply+0xf2>
 8006378:	f104 0e14 	add.w	lr, r4, #20
 800637c:	46a9      	mov	r9, r5
 800637e:	f04f 0c00 	mov.w	ip, #0
 8006382:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006386:	f8d9 1000 	ldr.w	r1, [r9]
 800638a:	fa1f fb82 	uxth.w	fp, r2
 800638e:	b289      	uxth	r1, r1
 8006390:	fb0a 110b 	mla	r1, sl, fp, r1
 8006394:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006398:	f8d9 2000 	ldr.w	r2, [r9]
 800639c:	4461      	add	r1, ip
 800639e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063a2:	fb0a c20b 	mla	r2, sl, fp, ip
 80063a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063aa:	b289      	uxth	r1, r1
 80063ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063b0:	4577      	cmp	r7, lr
 80063b2:	f849 1b04 	str.w	r1, [r9], #4
 80063b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063ba:	d8e2      	bhi.n	8006382 <__multiply+0xb2>
 80063bc:	9a01      	ldr	r2, [sp, #4]
 80063be:	f845 c002 	str.w	ip, [r5, r2]
 80063c2:	9a03      	ldr	r2, [sp, #12]
 80063c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063c8:	3304      	adds	r3, #4
 80063ca:	f1b9 0f00 	cmp.w	r9, #0
 80063ce:	d020      	beq.n	8006412 <__multiply+0x142>
 80063d0:	6829      	ldr	r1, [r5, #0]
 80063d2:	f104 0c14 	add.w	ip, r4, #20
 80063d6:	46ae      	mov	lr, r5
 80063d8:	f04f 0a00 	mov.w	sl, #0
 80063dc:	f8bc b000 	ldrh.w	fp, [ip]
 80063e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063e4:	fb09 220b 	mla	r2, r9, fp, r2
 80063e8:	4492      	add	sl, r2
 80063ea:	b289      	uxth	r1, r1
 80063ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80063f0:	f84e 1b04 	str.w	r1, [lr], #4
 80063f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80063f8:	f8be 1000 	ldrh.w	r1, [lr]
 80063fc:	0c12      	lsrs	r2, r2, #16
 80063fe:	fb09 1102 	mla	r1, r9, r2, r1
 8006402:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006406:	4567      	cmp	r7, ip
 8006408:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800640c:	d8e6      	bhi.n	80063dc <__multiply+0x10c>
 800640e:	9a01      	ldr	r2, [sp, #4]
 8006410:	50a9      	str	r1, [r5, r2]
 8006412:	3504      	adds	r5, #4
 8006414:	e79a      	b.n	800634c <__multiply+0x7c>
 8006416:	3e01      	subs	r6, #1
 8006418:	e79c      	b.n	8006354 <__multiply+0x84>
 800641a:	bf00      	nop
 800641c:	080073ff 	.word	0x080073ff
 8006420:	08007470 	.word	0x08007470

08006424 <__pow5mult>:
 8006424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006428:	4615      	mov	r5, r2
 800642a:	f012 0203 	ands.w	r2, r2, #3
 800642e:	4606      	mov	r6, r0
 8006430:	460f      	mov	r7, r1
 8006432:	d007      	beq.n	8006444 <__pow5mult+0x20>
 8006434:	4c25      	ldr	r4, [pc, #148]	; (80064cc <__pow5mult+0xa8>)
 8006436:	3a01      	subs	r2, #1
 8006438:	2300      	movs	r3, #0
 800643a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800643e:	f7ff fe9b 	bl	8006178 <__multadd>
 8006442:	4607      	mov	r7, r0
 8006444:	10ad      	asrs	r5, r5, #2
 8006446:	d03d      	beq.n	80064c4 <__pow5mult+0xa0>
 8006448:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800644a:	b97c      	cbnz	r4, 800646c <__pow5mult+0x48>
 800644c:	2010      	movs	r0, #16
 800644e:	f7ff fe1b 	bl	8006088 <malloc>
 8006452:	4602      	mov	r2, r0
 8006454:	6270      	str	r0, [r6, #36]	; 0x24
 8006456:	b928      	cbnz	r0, 8006464 <__pow5mult+0x40>
 8006458:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <__pow5mult+0xac>)
 800645a:	481e      	ldr	r0, [pc, #120]	; (80064d4 <__pow5mult+0xb0>)
 800645c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006460:	f000 fd22 	bl	8006ea8 <__assert_func>
 8006464:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006468:	6004      	str	r4, [r0, #0]
 800646a:	60c4      	str	r4, [r0, #12]
 800646c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006470:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006474:	b94c      	cbnz	r4, 800648a <__pow5mult+0x66>
 8006476:	f240 2171 	movw	r1, #625	; 0x271
 800647a:	4630      	mov	r0, r6
 800647c:	f7ff ff12 	bl	80062a4 <__i2b>
 8006480:	2300      	movs	r3, #0
 8006482:	f8c8 0008 	str.w	r0, [r8, #8]
 8006486:	4604      	mov	r4, r0
 8006488:	6003      	str	r3, [r0, #0]
 800648a:	f04f 0900 	mov.w	r9, #0
 800648e:	07eb      	lsls	r3, r5, #31
 8006490:	d50a      	bpl.n	80064a8 <__pow5mult+0x84>
 8006492:	4639      	mov	r1, r7
 8006494:	4622      	mov	r2, r4
 8006496:	4630      	mov	r0, r6
 8006498:	f7ff ff1a 	bl	80062d0 <__multiply>
 800649c:	4639      	mov	r1, r7
 800649e:	4680      	mov	r8, r0
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7ff fe47 	bl	8006134 <_Bfree>
 80064a6:	4647      	mov	r7, r8
 80064a8:	106d      	asrs	r5, r5, #1
 80064aa:	d00b      	beq.n	80064c4 <__pow5mult+0xa0>
 80064ac:	6820      	ldr	r0, [r4, #0]
 80064ae:	b938      	cbnz	r0, 80064c0 <__pow5mult+0x9c>
 80064b0:	4622      	mov	r2, r4
 80064b2:	4621      	mov	r1, r4
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff ff0b 	bl	80062d0 <__multiply>
 80064ba:	6020      	str	r0, [r4, #0]
 80064bc:	f8c0 9000 	str.w	r9, [r0]
 80064c0:	4604      	mov	r4, r0
 80064c2:	e7e4      	b.n	800648e <__pow5mult+0x6a>
 80064c4:	4638      	mov	r0, r7
 80064c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ca:	bf00      	nop
 80064cc:	080075c0 	.word	0x080075c0
 80064d0:	0800738d 	.word	0x0800738d
 80064d4:	08007470 	.word	0x08007470

080064d8 <__lshift>:
 80064d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064dc:	460c      	mov	r4, r1
 80064de:	6849      	ldr	r1, [r1, #4]
 80064e0:	6923      	ldr	r3, [r4, #16]
 80064e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064e6:	68a3      	ldr	r3, [r4, #8]
 80064e8:	4607      	mov	r7, r0
 80064ea:	4691      	mov	r9, r2
 80064ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064f0:	f108 0601 	add.w	r6, r8, #1
 80064f4:	42b3      	cmp	r3, r6
 80064f6:	db0b      	blt.n	8006510 <__lshift+0x38>
 80064f8:	4638      	mov	r0, r7
 80064fa:	f7ff fddb 	bl	80060b4 <_Balloc>
 80064fe:	4605      	mov	r5, r0
 8006500:	b948      	cbnz	r0, 8006516 <__lshift+0x3e>
 8006502:	4602      	mov	r2, r0
 8006504:	4b2a      	ldr	r3, [pc, #168]	; (80065b0 <__lshift+0xd8>)
 8006506:	482b      	ldr	r0, [pc, #172]	; (80065b4 <__lshift+0xdc>)
 8006508:	f240 11d9 	movw	r1, #473	; 0x1d9
 800650c:	f000 fccc 	bl	8006ea8 <__assert_func>
 8006510:	3101      	adds	r1, #1
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	e7ee      	b.n	80064f4 <__lshift+0x1c>
 8006516:	2300      	movs	r3, #0
 8006518:	f100 0114 	add.w	r1, r0, #20
 800651c:	f100 0210 	add.w	r2, r0, #16
 8006520:	4618      	mov	r0, r3
 8006522:	4553      	cmp	r3, sl
 8006524:	db37      	blt.n	8006596 <__lshift+0xbe>
 8006526:	6920      	ldr	r0, [r4, #16]
 8006528:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800652c:	f104 0314 	add.w	r3, r4, #20
 8006530:	f019 091f 	ands.w	r9, r9, #31
 8006534:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006538:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800653c:	d02f      	beq.n	800659e <__lshift+0xc6>
 800653e:	f1c9 0e20 	rsb	lr, r9, #32
 8006542:	468a      	mov	sl, r1
 8006544:	f04f 0c00 	mov.w	ip, #0
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	fa02 f209 	lsl.w	r2, r2, r9
 800654e:	ea42 020c 	orr.w	r2, r2, ip
 8006552:	f84a 2b04 	str.w	r2, [sl], #4
 8006556:	f853 2b04 	ldr.w	r2, [r3], #4
 800655a:	4298      	cmp	r0, r3
 800655c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006560:	d8f2      	bhi.n	8006548 <__lshift+0x70>
 8006562:	1b03      	subs	r3, r0, r4
 8006564:	3b15      	subs	r3, #21
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	3304      	adds	r3, #4
 800656c:	f104 0215 	add.w	r2, r4, #21
 8006570:	4290      	cmp	r0, r2
 8006572:	bf38      	it	cc
 8006574:	2304      	movcc	r3, #4
 8006576:	f841 c003 	str.w	ip, [r1, r3]
 800657a:	f1bc 0f00 	cmp.w	ip, #0
 800657e:	d001      	beq.n	8006584 <__lshift+0xac>
 8006580:	f108 0602 	add.w	r6, r8, #2
 8006584:	3e01      	subs	r6, #1
 8006586:	4638      	mov	r0, r7
 8006588:	612e      	str	r6, [r5, #16]
 800658a:	4621      	mov	r1, r4
 800658c:	f7ff fdd2 	bl	8006134 <_Bfree>
 8006590:	4628      	mov	r0, r5
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006596:	f842 0f04 	str.w	r0, [r2, #4]!
 800659a:	3301      	adds	r3, #1
 800659c:	e7c1      	b.n	8006522 <__lshift+0x4a>
 800659e:	3904      	subs	r1, #4
 80065a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80065a8:	4298      	cmp	r0, r3
 80065aa:	d8f9      	bhi.n	80065a0 <__lshift+0xc8>
 80065ac:	e7ea      	b.n	8006584 <__lshift+0xac>
 80065ae:	bf00      	nop
 80065b0:	080073ff 	.word	0x080073ff
 80065b4:	08007470 	.word	0x08007470

080065b8 <__mcmp>:
 80065b8:	b530      	push	{r4, r5, lr}
 80065ba:	6902      	ldr	r2, [r0, #16]
 80065bc:	690c      	ldr	r4, [r1, #16]
 80065be:	1b12      	subs	r2, r2, r4
 80065c0:	d10e      	bne.n	80065e0 <__mcmp+0x28>
 80065c2:	f100 0314 	add.w	r3, r0, #20
 80065c6:	3114      	adds	r1, #20
 80065c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80065cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80065d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80065d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80065d8:	42a5      	cmp	r5, r4
 80065da:	d003      	beq.n	80065e4 <__mcmp+0x2c>
 80065dc:	d305      	bcc.n	80065ea <__mcmp+0x32>
 80065de:	2201      	movs	r2, #1
 80065e0:	4610      	mov	r0, r2
 80065e2:	bd30      	pop	{r4, r5, pc}
 80065e4:	4283      	cmp	r3, r0
 80065e6:	d3f3      	bcc.n	80065d0 <__mcmp+0x18>
 80065e8:	e7fa      	b.n	80065e0 <__mcmp+0x28>
 80065ea:	f04f 32ff 	mov.w	r2, #4294967295
 80065ee:	e7f7      	b.n	80065e0 <__mcmp+0x28>

080065f0 <__mdiff>:
 80065f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	460c      	mov	r4, r1
 80065f6:	4606      	mov	r6, r0
 80065f8:	4611      	mov	r1, r2
 80065fa:	4620      	mov	r0, r4
 80065fc:	4690      	mov	r8, r2
 80065fe:	f7ff ffdb 	bl	80065b8 <__mcmp>
 8006602:	1e05      	subs	r5, r0, #0
 8006604:	d110      	bne.n	8006628 <__mdiff+0x38>
 8006606:	4629      	mov	r1, r5
 8006608:	4630      	mov	r0, r6
 800660a:	f7ff fd53 	bl	80060b4 <_Balloc>
 800660e:	b930      	cbnz	r0, 800661e <__mdiff+0x2e>
 8006610:	4b3a      	ldr	r3, [pc, #232]	; (80066fc <__mdiff+0x10c>)
 8006612:	4602      	mov	r2, r0
 8006614:	f240 2132 	movw	r1, #562	; 0x232
 8006618:	4839      	ldr	r0, [pc, #228]	; (8006700 <__mdiff+0x110>)
 800661a:	f000 fc45 	bl	8006ea8 <__assert_func>
 800661e:	2301      	movs	r3, #1
 8006620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006628:	bfa4      	itt	ge
 800662a:	4643      	movge	r3, r8
 800662c:	46a0      	movge	r8, r4
 800662e:	4630      	mov	r0, r6
 8006630:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006634:	bfa6      	itte	ge
 8006636:	461c      	movge	r4, r3
 8006638:	2500      	movge	r5, #0
 800663a:	2501      	movlt	r5, #1
 800663c:	f7ff fd3a 	bl	80060b4 <_Balloc>
 8006640:	b920      	cbnz	r0, 800664c <__mdiff+0x5c>
 8006642:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <__mdiff+0x10c>)
 8006644:	4602      	mov	r2, r0
 8006646:	f44f 7110 	mov.w	r1, #576	; 0x240
 800664a:	e7e5      	b.n	8006618 <__mdiff+0x28>
 800664c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006650:	6926      	ldr	r6, [r4, #16]
 8006652:	60c5      	str	r5, [r0, #12]
 8006654:	f104 0914 	add.w	r9, r4, #20
 8006658:	f108 0514 	add.w	r5, r8, #20
 800665c:	f100 0e14 	add.w	lr, r0, #20
 8006660:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006664:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006668:	f108 0210 	add.w	r2, r8, #16
 800666c:	46f2      	mov	sl, lr
 800666e:	2100      	movs	r1, #0
 8006670:	f859 3b04 	ldr.w	r3, [r9], #4
 8006674:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006678:	fa1f f883 	uxth.w	r8, r3
 800667c:	fa11 f18b 	uxtah	r1, r1, fp
 8006680:	0c1b      	lsrs	r3, r3, #16
 8006682:	eba1 0808 	sub.w	r8, r1, r8
 8006686:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800668a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800668e:	fa1f f888 	uxth.w	r8, r8
 8006692:	1419      	asrs	r1, r3, #16
 8006694:	454e      	cmp	r6, r9
 8006696:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800669a:	f84a 3b04 	str.w	r3, [sl], #4
 800669e:	d8e7      	bhi.n	8006670 <__mdiff+0x80>
 80066a0:	1b33      	subs	r3, r6, r4
 80066a2:	3b15      	subs	r3, #21
 80066a4:	f023 0303 	bic.w	r3, r3, #3
 80066a8:	3304      	adds	r3, #4
 80066aa:	3415      	adds	r4, #21
 80066ac:	42a6      	cmp	r6, r4
 80066ae:	bf38      	it	cc
 80066b0:	2304      	movcc	r3, #4
 80066b2:	441d      	add	r5, r3
 80066b4:	4473      	add	r3, lr
 80066b6:	469e      	mov	lr, r3
 80066b8:	462e      	mov	r6, r5
 80066ba:	4566      	cmp	r6, ip
 80066bc:	d30e      	bcc.n	80066dc <__mdiff+0xec>
 80066be:	f10c 0203 	add.w	r2, ip, #3
 80066c2:	1b52      	subs	r2, r2, r5
 80066c4:	f022 0203 	bic.w	r2, r2, #3
 80066c8:	3d03      	subs	r5, #3
 80066ca:	45ac      	cmp	ip, r5
 80066cc:	bf38      	it	cc
 80066ce:	2200      	movcc	r2, #0
 80066d0:	441a      	add	r2, r3
 80066d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80066d6:	b17b      	cbz	r3, 80066f8 <__mdiff+0x108>
 80066d8:	6107      	str	r7, [r0, #16]
 80066da:	e7a3      	b.n	8006624 <__mdiff+0x34>
 80066dc:	f856 8b04 	ldr.w	r8, [r6], #4
 80066e0:	fa11 f288 	uxtah	r2, r1, r8
 80066e4:	1414      	asrs	r4, r2, #16
 80066e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066ea:	b292      	uxth	r2, r2
 80066ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80066f0:	f84e 2b04 	str.w	r2, [lr], #4
 80066f4:	1421      	asrs	r1, r4, #16
 80066f6:	e7e0      	b.n	80066ba <__mdiff+0xca>
 80066f8:	3f01      	subs	r7, #1
 80066fa:	e7ea      	b.n	80066d2 <__mdiff+0xe2>
 80066fc:	080073ff 	.word	0x080073ff
 8006700:	08007470 	.word	0x08007470

08006704 <__d2b>:
 8006704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006708:	4689      	mov	r9, r1
 800670a:	2101      	movs	r1, #1
 800670c:	ec57 6b10 	vmov	r6, r7, d0
 8006710:	4690      	mov	r8, r2
 8006712:	f7ff fccf 	bl	80060b4 <_Balloc>
 8006716:	4604      	mov	r4, r0
 8006718:	b930      	cbnz	r0, 8006728 <__d2b+0x24>
 800671a:	4602      	mov	r2, r0
 800671c:	4b25      	ldr	r3, [pc, #148]	; (80067b4 <__d2b+0xb0>)
 800671e:	4826      	ldr	r0, [pc, #152]	; (80067b8 <__d2b+0xb4>)
 8006720:	f240 310a 	movw	r1, #778	; 0x30a
 8006724:	f000 fbc0 	bl	8006ea8 <__assert_func>
 8006728:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800672c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006730:	bb35      	cbnz	r5, 8006780 <__d2b+0x7c>
 8006732:	2e00      	cmp	r6, #0
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	d028      	beq.n	800678a <__d2b+0x86>
 8006738:	4668      	mov	r0, sp
 800673a:	9600      	str	r6, [sp, #0]
 800673c:	f7ff fd82 	bl	8006244 <__lo0bits>
 8006740:	9900      	ldr	r1, [sp, #0]
 8006742:	b300      	cbz	r0, 8006786 <__d2b+0x82>
 8006744:	9a01      	ldr	r2, [sp, #4]
 8006746:	f1c0 0320 	rsb	r3, r0, #32
 800674a:	fa02 f303 	lsl.w	r3, r2, r3
 800674e:	430b      	orrs	r3, r1
 8006750:	40c2      	lsrs	r2, r0
 8006752:	6163      	str	r3, [r4, #20]
 8006754:	9201      	str	r2, [sp, #4]
 8006756:	9b01      	ldr	r3, [sp, #4]
 8006758:	61a3      	str	r3, [r4, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	bf14      	ite	ne
 800675e:	2202      	movne	r2, #2
 8006760:	2201      	moveq	r2, #1
 8006762:	6122      	str	r2, [r4, #16]
 8006764:	b1d5      	cbz	r5, 800679c <__d2b+0x98>
 8006766:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800676a:	4405      	add	r5, r0
 800676c:	f8c9 5000 	str.w	r5, [r9]
 8006770:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006774:	f8c8 0000 	str.w	r0, [r8]
 8006778:	4620      	mov	r0, r4
 800677a:	b003      	add	sp, #12
 800677c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006784:	e7d5      	b.n	8006732 <__d2b+0x2e>
 8006786:	6161      	str	r1, [r4, #20]
 8006788:	e7e5      	b.n	8006756 <__d2b+0x52>
 800678a:	a801      	add	r0, sp, #4
 800678c:	f7ff fd5a 	bl	8006244 <__lo0bits>
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	6163      	str	r3, [r4, #20]
 8006794:	2201      	movs	r2, #1
 8006796:	6122      	str	r2, [r4, #16]
 8006798:	3020      	adds	r0, #32
 800679a:	e7e3      	b.n	8006764 <__d2b+0x60>
 800679c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067a4:	f8c9 0000 	str.w	r0, [r9]
 80067a8:	6918      	ldr	r0, [r3, #16]
 80067aa:	f7ff fd2b 	bl	8006204 <__hi0bits>
 80067ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067b2:	e7df      	b.n	8006774 <__d2b+0x70>
 80067b4:	080073ff 	.word	0x080073ff
 80067b8:	08007470 	.word	0x08007470

080067bc <_calloc_r>:
 80067bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067be:	fba1 2402 	umull	r2, r4, r1, r2
 80067c2:	b94c      	cbnz	r4, 80067d8 <_calloc_r+0x1c>
 80067c4:	4611      	mov	r1, r2
 80067c6:	9201      	str	r2, [sp, #4]
 80067c8:	f000 f87a 	bl	80068c0 <_malloc_r>
 80067cc:	9a01      	ldr	r2, [sp, #4]
 80067ce:	4605      	mov	r5, r0
 80067d0:	b930      	cbnz	r0, 80067e0 <_calloc_r+0x24>
 80067d2:	4628      	mov	r0, r5
 80067d4:	b003      	add	sp, #12
 80067d6:	bd30      	pop	{r4, r5, pc}
 80067d8:	220c      	movs	r2, #12
 80067da:	6002      	str	r2, [r0, #0]
 80067dc:	2500      	movs	r5, #0
 80067de:	e7f8      	b.n	80067d2 <_calloc_r+0x16>
 80067e0:	4621      	mov	r1, r4
 80067e2:	f7fe f84f 	bl	8004884 <memset>
 80067e6:	e7f4      	b.n	80067d2 <_calloc_r+0x16>

080067e8 <_free_r>:
 80067e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067ea:	2900      	cmp	r1, #0
 80067ec:	d044      	beq.n	8006878 <_free_r+0x90>
 80067ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f2:	9001      	str	r0, [sp, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f1a1 0404 	sub.w	r4, r1, #4
 80067fa:	bfb8      	it	lt
 80067fc:	18e4      	addlt	r4, r4, r3
 80067fe:	f000 fcdf 	bl	80071c0 <__malloc_lock>
 8006802:	4a1e      	ldr	r2, [pc, #120]	; (800687c <_free_r+0x94>)
 8006804:	9801      	ldr	r0, [sp, #4]
 8006806:	6813      	ldr	r3, [r2, #0]
 8006808:	b933      	cbnz	r3, 8006818 <_free_r+0x30>
 800680a:	6063      	str	r3, [r4, #4]
 800680c:	6014      	str	r4, [r2, #0]
 800680e:	b003      	add	sp, #12
 8006810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006814:	f000 bcda 	b.w	80071cc <__malloc_unlock>
 8006818:	42a3      	cmp	r3, r4
 800681a:	d908      	bls.n	800682e <_free_r+0x46>
 800681c:	6825      	ldr	r5, [r4, #0]
 800681e:	1961      	adds	r1, r4, r5
 8006820:	428b      	cmp	r3, r1
 8006822:	bf01      	itttt	eq
 8006824:	6819      	ldreq	r1, [r3, #0]
 8006826:	685b      	ldreq	r3, [r3, #4]
 8006828:	1949      	addeq	r1, r1, r5
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	e7ed      	b.n	800680a <_free_r+0x22>
 800682e:	461a      	mov	r2, r3
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	b10b      	cbz	r3, 8006838 <_free_r+0x50>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d9fa      	bls.n	800682e <_free_r+0x46>
 8006838:	6811      	ldr	r1, [r2, #0]
 800683a:	1855      	adds	r5, r2, r1
 800683c:	42a5      	cmp	r5, r4
 800683e:	d10b      	bne.n	8006858 <_free_r+0x70>
 8006840:	6824      	ldr	r4, [r4, #0]
 8006842:	4421      	add	r1, r4
 8006844:	1854      	adds	r4, r2, r1
 8006846:	42a3      	cmp	r3, r4
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	d1e0      	bne.n	800680e <_free_r+0x26>
 800684c:	681c      	ldr	r4, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	6053      	str	r3, [r2, #4]
 8006852:	4421      	add	r1, r4
 8006854:	6011      	str	r1, [r2, #0]
 8006856:	e7da      	b.n	800680e <_free_r+0x26>
 8006858:	d902      	bls.n	8006860 <_free_r+0x78>
 800685a:	230c      	movs	r3, #12
 800685c:	6003      	str	r3, [r0, #0]
 800685e:	e7d6      	b.n	800680e <_free_r+0x26>
 8006860:	6825      	ldr	r5, [r4, #0]
 8006862:	1961      	adds	r1, r4, r5
 8006864:	428b      	cmp	r3, r1
 8006866:	bf04      	itt	eq
 8006868:	6819      	ldreq	r1, [r3, #0]
 800686a:	685b      	ldreq	r3, [r3, #4]
 800686c:	6063      	str	r3, [r4, #4]
 800686e:	bf04      	itt	eq
 8006870:	1949      	addeq	r1, r1, r5
 8006872:	6021      	streq	r1, [r4, #0]
 8006874:	6054      	str	r4, [r2, #4]
 8006876:	e7ca      	b.n	800680e <_free_r+0x26>
 8006878:	b003      	add	sp, #12
 800687a:	bd30      	pop	{r4, r5, pc}
 800687c:	200002f0 	.word	0x200002f0

08006880 <sbrk_aligned>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	4e0e      	ldr	r6, [pc, #56]	; (80068bc <sbrk_aligned+0x3c>)
 8006884:	460c      	mov	r4, r1
 8006886:	6831      	ldr	r1, [r6, #0]
 8006888:	4605      	mov	r5, r0
 800688a:	b911      	cbnz	r1, 8006892 <sbrk_aligned+0x12>
 800688c:	f000 f9e6 	bl	8006c5c <_sbrk_r>
 8006890:	6030      	str	r0, [r6, #0]
 8006892:	4621      	mov	r1, r4
 8006894:	4628      	mov	r0, r5
 8006896:	f000 f9e1 	bl	8006c5c <_sbrk_r>
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	d00a      	beq.n	80068b4 <sbrk_aligned+0x34>
 800689e:	1cc4      	adds	r4, r0, #3
 80068a0:	f024 0403 	bic.w	r4, r4, #3
 80068a4:	42a0      	cmp	r0, r4
 80068a6:	d007      	beq.n	80068b8 <sbrk_aligned+0x38>
 80068a8:	1a21      	subs	r1, r4, r0
 80068aa:	4628      	mov	r0, r5
 80068ac:	f000 f9d6 	bl	8006c5c <_sbrk_r>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d101      	bne.n	80068b8 <sbrk_aligned+0x38>
 80068b4:	f04f 34ff 	mov.w	r4, #4294967295
 80068b8:	4620      	mov	r0, r4
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	200002f4 	.word	0x200002f4

080068c0 <_malloc_r>:
 80068c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c4:	1ccd      	adds	r5, r1, #3
 80068c6:	f025 0503 	bic.w	r5, r5, #3
 80068ca:	3508      	adds	r5, #8
 80068cc:	2d0c      	cmp	r5, #12
 80068ce:	bf38      	it	cc
 80068d0:	250c      	movcc	r5, #12
 80068d2:	2d00      	cmp	r5, #0
 80068d4:	4607      	mov	r7, r0
 80068d6:	db01      	blt.n	80068dc <_malloc_r+0x1c>
 80068d8:	42a9      	cmp	r1, r5
 80068da:	d905      	bls.n	80068e8 <_malloc_r+0x28>
 80068dc:	230c      	movs	r3, #12
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	2600      	movs	r6, #0
 80068e2:	4630      	mov	r0, r6
 80068e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e8:	4e2e      	ldr	r6, [pc, #184]	; (80069a4 <_malloc_r+0xe4>)
 80068ea:	f000 fc69 	bl	80071c0 <__malloc_lock>
 80068ee:	6833      	ldr	r3, [r6, #0]
 80068f0:	461c      	mov	r4, r3
 80068f2:	bb34      	cbnz	r4, 8006942 <_malloc_r+0x82>
 80068f4:	4629      	mov	r1, r5
 80068f6:	4638      	mov	r0, r7
 80068f8:	f7ff ffc2 	bl	8006880 <sbrk_aligned>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	4604      	mov	r4, r0
 8006900:	d14d      	bne.n	800699e <_malloc_r+0xde>
 8006902:	6834      	ldr	r4, [r6, #0]
 8006904:	4626      	mov	r6, r4
 8006906:	2e00      	cmp	r6, #0
 8006908:	d140      	bne.n	800698c <_malloc_r+0xcc>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	4631      	mov	r1, r6
 800690e:	4638      	mov	r0, r7
 8006910:	eb04 0803 	add.w	r8, r4, r3
 8006914:	f000 f9a2 	bl	8006c5c <_sbrk_r>
 8006918:	4580      	cmp	r8, r0
 800691a:	d13a      	bne.n	8006992 <_malloc_r+0xd2>
 800691c:	6821      	ldr	r1, [r4, #0]
 800691e:	3503      	adds	r5, #3
 8006920:	1a6d      	subs	r5, r5, r1
 8006922:	f025 0503 	bic.w	r5, r5, #3
 8006926:	3508      	adds	r5, #8
 8006928:	2d0c      	cmp	r5, #12
 800692a:	bf38      	it	cc
 800692c:	250c      	movcc	r5, #12
 800692e:	4629      	mov	r1, r5
 8006930:	4638      	mov	r0, r7
 8006932:	f7ff ffa5 	bl	8006880 <sbrk_aligned>
 8006936:	3001      	adds	r0, #1
 8006938:	d02b      	beq.n	8006992 <_malloc_r+0xd2>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	442b      	add	r3, r5
 800693e:	6023      	str	r3, [r4, #0]
 8006940:	e00e      	b.n	8006960 <_malloc_r+0xa0>
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	1b52      	subs	r2, r2, r5
 8006946:	d41e      	bmi.n	8006986 <_malloc_r+0xc6>
 8006948:	2a0b      	cmp	r2, #11
 800694a:	d916      	bls.n	800697a <_malloc_r+0xba>
 800694c:	1961      	adds	r1, r4, r5
 800694e:	42a3      	cmp	r3, r4
 8006950:	6025      	str	r5, [r4, #0]
 8006952:	bf18      	it	ne
 8006954:	6059      	strne	r1, [r3, #4]
 8006956:	6863      	ldr	r3, [r4, #4]
 8006958:	bf08      	it	eq
 800695a:	6031      	streq	r1, [r6, #0]
 800695c:	5162      	str	r2, [r4, r5]
 800695e:	604b      	str	r3, [r1, #4]
 8006960:	4638      	mov	r0, r7
 8006962:	f104 060b 	add.w	r6, r4, #11
 8006966:	f000 fc31 	bl	80071cc <__malloc_unlock>
 800696a:	f026 0607 	bic.w	r6, r6, #7
 800696e:	1d23      	adds	r3, r4, #4
 8006970:	1af2      	subs	r2, r6, r3
 8006972:	d0b6      	beq.n	80068e2 <_malloc_r+0x22>
 8006974:	1b9b      	subs	r3, r3, r6
 8006976:	50a3      	str	r3, [r4, r2]
 8006978:	e7b3      	b.n	80068e2 <_malloc_r+0x22>
 800697a:	6862      	ldr	r2, [r4, #4]
 800697c:	42a3      	cmp	r3, r4
 800697e:	bf0c      	ite	eq
 8006980:	6032      	streq	r2, [r6, #0]
 8006982:	605a      	strne	r2, [r3, #4]
 8006984:	e7ec      	b.n	8006960 <_malloc_r+0xa0>
 8006986:	4623      	mov	r3, r4
 8006988:	6864      	ldr	r4, [r4, #4]
 800698a:	e7b2      	b.n	80068f2 <_malloc_r+0x32>
 800698c:	4634      	mov	r4, r6
 800698e:	6876      	ldr	r6, [r6, #4]
 8006990:	e7b9      	b.n	8006906 <_malloc_r+0x46>
 8006992:	230c      	movs	r3, #12
 8006994:	603b      	str	r3, [r7, #0]
 8006996:	4638      	mov	r0, r7
 8006998:	f000 fc18 	bl	80071cc <__malloc_unlock>
 800699c:	e7a1      	b.n	80068e2 <_malloc_r+0x22>
 800699e:	6025      	str	r5, [r4, #0]
 80069a0:	e7de      	b.n	8006960 <_malloc_r+0xa0>
 80069a2:	bf00      	nop
 80069a4:	200002f0 	.word	0x200002f0

080069a8 <__sfputc_r>:
 80069a8:	6893      	ldr	r3, [r2, #8]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	b410      	push	{r4}
 80069b0:	6093      	str	r3, [r2, #8]
 80069b2:	da08      	bge.n	80069c6 <__sfputc_r+0x1e>
 80069b4:	6994      	ldr	r4, [r2, #24]
 80069b6:	42a3      	cmp	r3, r4
 80069b8:	db01      	blt.n	80069be <__sfputc_r+0x16>
 80069ba:	290a      	cmp	r1, #10
 80069bc:	d103      	bne.n	80069c6 <__sfputc_r+0x1e>
 80069be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c2:	f000 b99f 	b.w	8006d04 <__swbuf_r>
 80069c6:	6813      	ldr	r3, [r2, #0]
 80069c8:	1c58      	adds	r0, r3, #1
 80069ca:	6010      	str	r0, [r2, #0]
 80069cc:	7019      	strb	r1, [r3, #0]
 80069ce:	4608      	mov	r0, r1
 80069d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <__sfputs_r>:
 80069d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d8:	4606      	mov	r6, r0
 80069da:	460f      	mov	r7, r1
 80069dc:	4614      	mov	r4, r2
 80069de:	18d5      	adds	r5, r2, r3
 80069e0:	42ac      	cmp	r4, r5
 80069e2:	d101      	bne.n	80069e8 <__sfputs_r+0x12>
 80069e4:	2000      	movs	r0, #0
 80069e6:	e007      	b.n	80069f8 <__sfputs_r+0x22>
 80069e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ec:	463a      	mov	r2, r7
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7ff ffda 	bl	80069a8 <__sfputc_r>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d1f3      	bne.n	80069e0 <__sfputs_r+0xa>
 80069f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069fc <_vfiprintf_r>:
 80069fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a00:	460d      	mov	r5, r1
 8006a02:	b09d      	sub	sp, #116	; 0x74
 8006a04:	4614      	mov	r4, r2
 8006a06:	4698      	mov	r8, r3
 8006a08:	4606      	mov	r6, r0
 8006a0a:	b118      	cbz	r0, 8006a14 <_vfiprintf_r+0x18>
 8006a0c:	6983      	ldr	r3, [r0, #24]
 8006a0e:	b90b      	cbnz	r3, 8006a14 <_vfiprintf_r+0x18>
 8006a10:	f7ff fa94 	bl	8005f3c <__sinit>
 8006a14:	4b89      	ldr	r3, [pc, #548]	; (8006c3c <_vfiprintf_r+0x240>)
 8006a16:	429d      	cmp	r5, r3
 8006a18:	d11b      	bne.n	8006a52 <_vfiprintf_r+0x56>
 8006a1a:	6875      	ldr	r5, [r6, #4]
 8006a1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a1e:	07d9      	lsls	r1, r3, #31
 8006a20:	d405      	bmi.n	8006a2e <_vfiprintf_r+0x32>
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	059a      	lsls	r2, r3, #22
 8006a26:	d402      	bmi.n	8006a2e <_vfiprintf_r+0x32>
 8006a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a2a:	f7ff fb2a 	bl	8006082 <__retarget_lock_acquire_recursive>
 8006a2e:	89ab      	ldrh	r3, [r5, #12]
 8006a30:	071b      	lsls	r3, r3, #28
 8006a32:	d501      	bpl.n	8006a38 <_vfiprintf_r+0x3c>
 8006a34:	692b      	ldr	r3, [r5, #16]
 8006a36:	b9eb      	cbnz	r3, 8006a74 <_vfiprintf_r+0x78>
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f000 f9c6 	bl	8006dcc <__swsetup_r>
 8006a40:	b1c0      	cbz	r0, 8006a74 <_vfiprintf_r+0x78>
 8006a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a44:	07dc      	lsls	r4, r3, #31
 8006a46:	d50e      	bpl.n	8006a66 <_vfiprintf_r+0x6a>
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	b01d      	add	sp, #116	; 0x74
 8006a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a52:	4b7b      	ldr	r3, [pc, #492]	; (8006c40 <_vfiprintf_r+0x244>)
 8006a54:	429d      	cmp	r5, r3
 8006a56:	d101      	bne.n	8006a5c <_vfiprintf_r+0x60>
 8006a58:	68b5      	ldr	r5, [r6, #8]
 8006a5a:	e7df      	b.n	8006a1c <_vfiprintf_r+0x20>
 8006a5c:	4b79      	ldr	r3, [pc, #484]	; (8006c44 <_vfiprintf_r+0x248>)
 8006a5e:	429d      	cmp	r5, r3
 8006a60:	bf08      	it	eq
 8006a62:	68f5      	ldreq	r5, [r6, #12]
 8006a64:	e7da      	b.n	8006a1c <_vfiprintf_r+0x20>
 8006a66:	89ab      	ldrh	r3, [r5, #12]
 8006a68:	0598      	lsls	r0, r3, #22
 8006a6a:	d4ed      	bmi.n	8006a48 <_vfiprintf_r+0x4c>
 8006a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a6e:	f7ff fb09 	bl	8006084 <__retarget_lock_release_recursive>
 8006a72:	e7e9      	b.n	8006a48 <_vfiprintf_r+0x4c>
 8006a74:	2300      	movs	r3, #0
 8006a76:	9309      	str	r3, [sp, #36]	; 0x24
 8006a78:	2320      	movs	r3, #32
 8006a7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a82:	2330      	movs	r3, #48	; 0x30
 8006a84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c48 <_vfiprintf_r+0x24c>
 8006a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a8c:	f04f 0901 	mov.w	r9, #1
 8006a90:	4623      	mov	r3, r4
 8006a92:	469a      	mov	sl, r3
 8006a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a98:	b10a      	cbz	r2, 8006a9e <_vfiprintf_r+0xa2>
 8006a9a:	2a25      	cmp	r2, #37	; 0x25
 8006a9c:	d1f9      	bne.n	8006a92 <_vfiprintf_r+0x96>
 8006a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8006aa2:	d00b      	beq.n	8006abc <_vfiprintf_r+0xc0>
 8006aa4:	465b      	mov	r3, fp
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7ff ff93 	bl	80069d6 <__sfputs_r>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f000 80aa 	beq.w	8006c0a <_vfiprintf_r+0x20e>
 8006ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab8:	445a      	add	r2, fp
 8006aba:	9209      	str	r2, [sp, #36]	; 0x24
 8006abc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 80a2 	beq.w	8006c0a <_vfiprintf_r+0x20e>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8006acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ad0:	f10a 0a01 	add.w	sl, sl, #1
 8006ad4:	9304      	str	r3, [sp, #16]
 8006ad6:	9307      	str	r3, [sp, #28]
 8006ad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006adc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ade:	4654      	mov	r4, sl
 8006ae0:	2205      	movs	r2, #5
 8006ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae6:	4858      	ldr	r0, [pc, #352]	; (8006c48 <_vfiprintf_r+0x24c>)
 8006ae8:	f7f9 fb9a 	bl	8000220 <memchr>
 8006aec:	9a04      	ldr	r2, [sp, #16]
 8006aee:	b9d8      	cbnz	r0, 8006b28 <_vfiprintf_r+0x12c>
 8006af0:	06d1      	lsls	r1, r2, #27
 8006af2:	bf44      	itt	mi
 8006af4:	2320      	movmi	r3, #32
 8006af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006afa:	0713      	lsls	r3, r2, #28
 8006afc:	bf44      	itt	mi
 8006afe:	232b      	movmi	r3, #43	; 0x2b
 8006b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b04:	f89a 3000 	ldrb.w	r3, [sl]
 8006b08:	2b2a      	cmp	r3, #42	; 0x2a
 8006b0a:	d015      	beq.n	8006b38 <_vfiprintf_r+0x13c>
 8006b0c:	9a07      	ldr	r2, [sp, #28]
 8006b0e:	4654      	mov	r4, sl
 8006b10:	2000      	movs	r0, #0
 8006b12:	f04f 0c0a 	mov.w	ip, #10
 8006b16:	4621      	mov	r1, r4
 8006b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b1c:	3b30      	subs	r3, #48	; 0x30
 8006b1e:	2b09      	cmp	r3, #9
 8006b20:	d94e      	bls.n	8006bc0 <_vfiprintf_r+0x1c4>
 8006b22:	b1b0      	cbz	r0, 8006b52 <_vfiprintf_r+0x156>
 8006b24:	9207      	str	r2, [sp, #28]
 8006b26:	e014      	b.n	8006b52 <_vfiprintf_r+0x156>
 8006b28:	eba0 0308 	sub.w	r3, r0, r8
 8006b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b30:	4313      	orrs	r3, r2
 8006b32:	9304      	str	r3, [sp, #16]
 8006b34:	46a2      	mov	sl, r4
 8006b36:	e7d2      	b.n	8006ade <_vfiprintf_r+0xe2>
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	1d19      	adds	r1, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	9103      	str	r1, [sp, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bfbb      	ittet	lt
 8006b44:	425b      	neglt	r3, r3
 8006b46:	f042 0202 	orrlt.w	r2, r2, #2
 8006b4a:	9307      	strge	r3, [sp, #28]
 8006b4c:	9307      	strlt	r3, [sp, #28]
 8006b4e:	bfb8      	it	lt
 8006b50:	9204      	strlt	r2, [sp, #16]
 8006b52:	7823      	ldrb	r3, [r4, #0]
 8006b54:	2b2e      	cmp	r3, #46	; 0x2e
 8006b56:	d10c      	bne.n	8006b72 <_vfiprintf_r+0x176>
 8006b58:	7863      	ldrb	r3, [r4, #1]
 8006b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b5c:	d135      	bne.n	8006bca <_vfiprintf_r+0x1ce>
 8006b5e:	9b03      	ldr	r3, [sp, #12]
 8006b60:	1d1a      	adds	r2, r3, #4
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	9203      	str	r2, [sp, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bfb8      	it	lt
 8006b6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b6e:	3402      	adds	r4, #2
 8006b70:	9305      	str	r3, [sp, #20]
 8006b72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c58 <_vfiprintf_r+0x25c>
 8006b76:	7821      	ldrb	r1, [r4, #0]
 8006b78:	2203      	movs	r2, #3
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	f7f9 fb50 	bl	8000220 <memchr>
 8006b80:	b140      	cbz	r0, 8006b94 <_vfiprintf_r+0x198>
 8006b82:	2340      	movs	r3, #64	; 0x40
 8006b84:	eba0 000a 	sub.w	r0, r0, sl
 8006b88:	fa03 f000 	lsl.w	r0, r3, r0
 8006b8c:	9b04      	ldr	r3, [sp, #16]
 8006b8e:	4303      	orrs	r3, r0
 8006b90:	3401      	adds	r4, #1
 8006b92:	9304      	str	r3, [sp, #16]
 8006b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b98:	482c      	ldr	r0, [pc, #176]	; (8006c4c <_vfiprintf_r+0x250>)
 8006b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b9e:	2206      	movs	r2, #6
 8006ba0:	f7f9 fb3e 	bl	8000220 <memchr>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d03f      	beq.n	8006c28 <_vfiprintf_r+0x22c>
 8006ba8:	4b29      	ldr	r3, [pc, #164]	; (8006c50 <_vfiprintf_r+0x254>)
 8006baa:	bb1b      	cbnz	r3, 8006bf4 <_vfiprintf_r+0x1f8>
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	3307      	adds	r3, #7
 8006bb0:	f023 0307 	bic.w	r3, r3, #7
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	9303      	str	r3, [sp, #12]
 8006bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bba:	443b      	add	r3, r7
 8006bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bbe:	e767      	b.n	8006a90 <_vfiprintf_r+0x94>
 8006bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	e7a5      	b.n	8006b16 <_vfiprintf_r+0x11a>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	3401      	adds	r4, #1
 8006bce:	9305      	str	r3, [sp, #20]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	f04f 0c0a 	mov.w	ip, #10
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bdc:	3a30      	subs	r2, #48	; 0x30
 8006bde:	2a09      	cmp	r2, #9
 8006be0:	d903      	bls.n	8006bea <_vfiprintf_r+0x1ee>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0c5      	beq.n	8006b72 <_vfiprintf_r+0x176>
 8006be6:	9105      	str	r1, [sp, #20]
 8006be8:	e7c3      	b.n	8006b72 <_vfiprintf_r+0x176>
 8006bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bee:	4604      	mov	r4, r0
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e7f0      	b.n	8006bd6 <_vfiprintf_r+0x1da>
 8006bf4:	ab03      	add	r3, sp, #12
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	4b16      	ldr	r3, [pc, #88]	; (8006c54 <_vfiprintf_r+0x258>)
 8006bfc:	a904      	add	r1, sp, #16
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f7fd fee8 	bl	80049d4 <_printf_float>
 8006c04:	4607      	mov	r7, r0
 8006c06:	1c78      	adds	r0, r7, #1
 8006c08:	d1d6      	bne.n	8006bb8 <_vfiprintf_r+0x1bc>
 8006c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c0c:	07d9      	lsls	r1, r3, #31
 8006c0e:	d405      	bmi.n	8006c1c <_vfiprintf_r+0x220>
 8006c10:	89ab      	ldrh	r3, [r5, #12]
 8006c12:	059a      	lsls	r2, r3, #22
 8006c14:	d402      	bmi.n	8006c1c <_vfiprintf_r+0x220>
 8006c16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c18:	f7ff fa34 	bl	8006084 <__retarget_lock_release_recursive>
 8006c1c:	89ab      	ldrh	r3, [r5, #12]
 8006c1e:	065b      	lsls	r3, r3, #25
 8006c20:	f53f af12 	bmi.w	8006a48 <_vfiprintf_r+0x4c>
 8006c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c26:	e711      	b.n	8006a4c <_vfiprintf_r+0x50>
 8006c28:	ab03      	add	r3, sp, #12
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	462a      	mov	r2, r5
 8006c2e:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <_vfiprintf_r+0x258>)
 8006c30:	a904      	add	r1, sp, #16
 8006c32:	4630      	mov	r0, r6
 8006c34:	f7fe f972 	bl	8004f1c <_printf_i>
 8006c38:	e7e4      	b.n	8006c04 <_vfiprintf_r+0x208>
 8006c3a:	bf00      	nop
 8006c3c:	08007430 	.word	0x08007430
 8006c40:	08007450 	.word	0x08007450
 8006c44:	08007410 	.word	0x08007410
 8006c48:	080075cc 	.word	0x080075cc
 8006c4c:	080075d6 	.word	0x080075d6
 8006c50:	080049d5 	.word	0x080049d5
 8006c54:	080069d7 	.word	0x080069d7
 8006c58:	080075d2 	.word	0x080075d2

08006c5c <_sbrk_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d06      	ldr	r5, [pc, #24]	; (8006c78 <_sbrk_r+0x1c>)
 8006c60:	2300      	movs	r3, #0
 8006c62:	4604      	mov	r4, r0
 8006c64:	4608      	mov	r0, r1
 8006c66:	602b      	str	r3, [r5, #0]
 8006c68:	f7fa fcee 	bl	8001648 <_sbrk>
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	d102      	bne.n	8006c76 <_sbrk_r+0x1a>
 8006c70:	682b      	ldr	r3, [r5, #0]
 8006c72:	b103      	cbz	r3, 8006c76 <_sbrk_r+0x1a>
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	200002f8 	.word	0x200002f8

08006c7c <__sread>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	460c      	mov	r4, r1
 8006c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c84:	f000 faa8 	bl	80071d8 <_read_r>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	bfab      	itete	ge
 8006c8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c90:	181b      	addge	r3, r3, r0
 8006c92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c96:	bfac      	ite	ge
 8006c98:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c9a:	81a3      	strhlt	r3, [r4, #12]
 8006c9c:	bd10      	pop	{r4, pc}

08006c9e <__swrite>:
 8006c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca2:	461f      	mov	r7, r3
 8006ca4:	898b      	ldrh	r3, [r1, #12]
 8006ca6:	05db      	lsls	r3, r3, #23
 8006ca8:	4605      	mov	r5, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	4616      	mov	r6, r2
 8006cae:	d505      	bpl.n	8006cbc <__swrite+0x1e>
 8006cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f000 f9f8 	bl	80070ac <_lseek_r>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	4632      	mov	r2, r6
 8006cca:	463b      	mov	r3, r7
 8006ccc:	4628      	mov	r0, r5
 8006cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd2:	f000 b869 	b.w	8006da8 <_write_r>

08006cd6 <__sseek>:
 8006cd6:	b510      	push	{r4, lr}
 8006cd8:	460c      	mov	r4, r1
 8006cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cde:	f000 f9e5 	bl	80070ac <_lseek_r>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	bf15      	itete	ne
 8006ce8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cf2:	81a3      	strheq	r3, [r4, #12]
 8006cf4:	bf18      	it	ne
 8006cf6:	81a3      	strhne	r3, [r4, #12]
 8006cf8:	bd10      	pop	{r4, pc}

08006cfa <__sclose>:
 8006cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfe:	f000 b8f1 	b.w	8006ee4 <_close_r>
	...

08006d04 <__swbuf_r>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	460e      	mov	r6, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	b118      	cbz	r0, 8006d16 <__swbuf_r+0x12>
 8006d0e:	6983      	ldr	r3, [r0, #24]
 8006d10:	b90b      	cbnz	r3, 8006d16 <__swbuf_r+0x12>
 8006d12:	f7ff f913 	bl	8005f3c <__sinit>
 8006d16:	4b21      	ldr	r3, [pc, #132]	; (8006d9c <__swbuf_r+0x98>)
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	d12b      	bne.n	8006d74 <__swbuf_r+0x70>
 8006d1c:	686c      	ldr	r4, [r5, #4]
 8006d1e:	69a3      	ldr	r3, [r4, #24]
 8006d20:	60a3      	str	r3, [r4, #8]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	071a      	lsls	r2, r3, #28
 8006d26:	d52f      	bpl.n	8006d88 <__swbuf_r+0x84>
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	b36b      	cbz	r3, 8006d88 <__swbuf_r+0x84>
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	6820      	ldr	r0, [r4, #0]
 8006d30:	1ac0      	subs	r0, r0, r3
 8006d32:	6963      	ldr	r3, [r4, #20]
 8006d34:	b2f6      	uxtb	r6, r6
 8006d36:	4283      	cmp	r3, r0
 8006d38:	4637      	mov	r7, r6
 8006d3a:	dc04      	bgt.n	8006d46 <__swbuf_r+0x42>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f966 	bl	8007010 <_fflush_r>
 8006d44:	bb30      	cbnz	r0, 8006d94 <__swbuf_r+0x90>
 8006d46:	68a3      	ldr	r3, [r4, #8]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	60a3      	str	r3, [r4, #8]
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	6022      	str	r2, [r4, #0]
 8006d52:	701e      	strb	r6, [r3, #0]
 8006d54:	6963      	ldr	r3, [r4, #20]
 8006d56:	3001      	adds	r0, #1
 8006d58:	4283      	cmp	r3, r0
 8006d5a:	d004      	beq.n	8006d66 <__swbuf_r+0x62>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	07db      	lsls	r3, r3, #31
 8006d60:	d506      	bpl.n	8006d70 <__swbuf_r+0x6c>
 8006d62:	2e0a      	cmp	r6, #10
 8006d64:	d104      	bne.n	8006d70 <__swbuf_r+0x6c>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f000 f951 	bl	8007010 <_fflush_r>
 8006d6e:	b988      	cbnz	r0, 8006d94 <__swbuf_r+0x90>
 8006d70:	4638      	mov	r0, r7
 8006d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d74:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <__swbuf_r+0x9c>)
 8006d76:	429c      	cmp	r4, r3
 8006d78:	d101      	bne.n	8006d7e <__swbuf_r+0x7a>
 8006d7a:	68ac      	ldr	r4, [r5, #8]
 8006d7c:	e7cf      	b.n	8006d1e <__swbuf_r+0x1a>
 8006d7e:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <__swbuf_r+0xa0>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	bf08      	it	eq
 8006d84:	68ec      	ldreq	r4, [r5, #12]
 8006d86:	e7ca      	b.n	8006d1e <__swbuf_r+0x1a>
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 f81e 	bl	8006dcc <__swsetup_r>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d0cb      	beq.n	8006d2c <__swbuf_r+0x28>
 8006d94:	f04f 37ff 	mov.w	r7, #4294967295
 8006d98:	e7ea      	b.n	8006d70 <__swbuf_r+0x6c>
 8006d9a:	bf00      	nop
 8006d9c:	08007430 	.word	0x08007430
 8006da0:	08007450 	.word	0x08007450
 8006da4:	08007410 	.word	0x08007410

08006da8 <_write_r>:
 8006da8:	b538      	push	{r3, r4, r5, lr}
 8006daa:	4d07      	ldr	r5, [pc, #28]	; (8006dc8 <_write_r+0x20>)
 8006dac:	4604      	mov	r4, r0
 8006dae:	4608      	mov	r0, r1
 8006db0:	4611      	mov	r1, r2
 8006db2:	2200      	movs	r2, #0
 8006db4:	602a      	str	r2, [r5, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	f7fa fa22 	bl	8001200 <_write>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_write_r+0x1e>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_write_r+0x1e>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	200002f8 	.word	0x200002f8

08006dcc <__swsetup_r>:
 8006dcc:	4b32      	ldr	r3, [pc, #200]	; (8006e98 <__swsetup_r+0xcc>)
 8006dce:	b570      	push	{r4, r5, r6, lr}
 8006dd0:	681d      	ldr	r5, [r3, #0]
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	b125      	cbz	r5, 8006de2 <__swsetup_r+0x16>
 8006dd8:	69ab      	ldr	r3, [r5, #24]
 8006dda:	b913      	cbnz	r3, 8006de2 <__swsetup_r+0x16>
 8006ddc:	4628      	mov	r0, r5
 8006dde:	f7ff f8ad 	bl	8005f3c <__sinit>
 8006de2:	4b2e      	ldr	r3, [pc, #184]	; (8006e9c <__swsetup_r+0xd0>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d10f      	bne.n	8006e08 <__swsetup_r+0x3c>
 8006de8:	686c      	ldr	r4, [r5, #4]
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006df0:	0719      	lsls	r1, r3, #28
 8006df2:	d42c      	bmi.n	8006e4e <__swsetup_r+0x82>
 8006df4:	06dd      	lsls	r5, r3, #27
 8006df6:	d411      	bmi.n	8006e1c <__swsetup_r+0x50>
 8006df8:	2309      	movs	r3, #9
 8006dfa:	6033      	str	r3, [r6, #0]
 8006dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	f04f 30ff 	mov.w	r0, #4294967295
 8006e06:	e03e      	b.n	8006e86 <__swsetup_r+0xba>
 8006e08:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <__swsetup_r+0xd4>)
 8006e0a:	429c      	cmp	r4, r3
 8006e0c:	d101      	bne.n	8006e12 <__swsetup_r+0x46>
 8006e0e:	68ac      	ldr	r4, [r5, #8]
 8006e10:	e7eb      	b.n	8006dea <__swsetup_r+0x1e>
 8006e12:	4b24      	ldr	r3, [pc, #144]	; (8006ea4 <__swsetup_r+0xd8>)
 8006e14:	429c      	cmp	r4, r3
 8006e16:	bf08      	it	eq
 8006e18:	68ec      	ldreq	r4, [r5, #12]
 8006e1a:	e7e6      	b.n	8006dea <__swsetup_r+0x1e>
 8006e1c:	0758      	lsls	r0, r3, #29
 8006e1e:	d512      	bpl.n	8006e46 <__swsetup_r+0x7a>
 8006e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e22:	b141      	cbz	r1, 8006e36 <__swsetup_r+0x6a>
 8006e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e28:	4299      	cmp	r1, r3
 8006e2a:	d002      	beq.n	8006e32 <__swsetup_r+0x66>
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff fcdb 	bl	80067e8 <_free_r>
 8006e32:	2300      	movs	r3, #0
 8006e34:	6363      	str	r3, [r4, #52]	; 0x34
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6063      	str	r3, [r4, #4]
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	f043 0308 	orr.w	r3, r3, #8
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	b94b      	cbnz	r3, 8006e66 <__swsetup_r+0x9a>
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5c:	d003      	beq.n	8006e66 <__swsetup_r+0x9a>
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4630      	mov	r0, r6
 8006e62:	f000 f95b 	bl	800711c <__smakebuf_r>
 8006e66:	89a0      	ldrh	r0, [r4, #12]
 8006e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e6c:	f010 0301 	ands.w	r3, r0, #1
 8006e70:	d00a      	beq.n	8006e88 <__swsetup_r+0xbc>
 8006e72:	2300      	movs	r3, #0
 8006e74:	60a3      	str	r3, [r4, #8]
 8006e76:	6963      	ldr	r3, [r4, #20]
 8006e78:	425b      	negs	r3, r3
 8006e7a:	61a3      	str	r3, [r4, #24]
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	b943      	cbnz	r3, 8006e92 <__swsetup_r+0xc6>
 8006e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e84:	d1ba      	bne.n	8006dfc <__swsetup_r+0x30>
 8006e86:	bd70      	pop	{r4, r5, r6, pc}
 8006e88:	0781      	lsls	r1, r0, #30
 8006e8a:	bf58      	it	pl
 8006e8c:	6963      	ldrpl	r3, [r4, #20]
 8006e8e:	60a3      	str	r3, [r4, #8]
 8006e90:	e7f4      	b.n	8006e7c <__swsetup_r+0xb0>
 8006e92:	2000      	movs	r0, #0
 8006e94:	e7f7      	b.n	8006e86 <__swsetup_r+0xba>
 8006e96:	bf00      	nop
 8006e98:	20000010 	.word	0x20000010
 8006e9c:	08007430 	.word	0x08007430
 8006ea0:	08007450 	.word	0x08007450
 8006ea4:	08007410 	.word	0x08007410

08006ea8 <__assert_func>:
 8006ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eaa:	4614      	mov	r4, r2
 8006eac:	461a      	mov	r2, r3
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <__assert_func+0x2c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	68d8      	ldr	r0, [r3, #12]
 8006eb6:	b14c      	cbz	r4, 8006ecc <__assert_func+0x24>
 8006eb8:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <__assert_func+0x30>)
 8006eba:	9100      	str	r1, [sp, #0]
 8006ebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ec0:	4906      	ldr	r1, [pc, #24]	; (8006edc <__assert_func+0x34>)
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	f000 f8e0 	bl	8007088 <fiprintf>
 8006ec8:	f000 f9a5 	bl	8007216 <abort>
 8006ecc:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <__assert_func+0x38>)
 8006ece:	461c      	mov	r4, r3
 8006ed0:	e7f3      	b.n	8006eba <__assert_func+0x12>
 8006ed2:	bf00      	nop
 8006ed4:	20000010 	.word	0x20000010
 8006ed8:	080075dd 	.word	0x080075dd
 8006edc:	080075ea 	.word	0x080075ea
 8006ee0:	08007618 	.word	0x08007618

08006ee4 <_close_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d06      	ldr	r5, [pc, #24]	; (8006f00 <_close_r+0x1c>)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4604      	mov	r4, r0
 8006eec:	4608      	mov	r0, r1
 8006eee:	602b      	str	r3, [r5, #0]
 8006ef0:	f7fa fb75 	bl	80015de <_close>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_close_r+0x1a>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_close_r+0x1a>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	200002f8 	.word	0x200002f8

08006f04 <__sflush_r>:
 8006f04:	898a      	ldrh	r2, [r1, #12]
 8006f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	0710      	lsls	r0, r2, #28
 8006f0e:	460c      	mov	r4, r1
 8006f10:	d458      	bmi.n	8006fc4 <__sflush_r+0xc0>
 8006f12:	684b      	ldr	r3, [r1, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	dc05      	bgt.n	8006f24 <__sflush_r+0x20>
 8006f18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dc02      	bgt.n	8006f24 <__sflush_r+0x20>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f26:	2e00      	cmp	r6, #0
 8006f28:	d0f9      	beq.n	8006f1e <__sflush_r+0x1a>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f30:	682f      	ldr	r7, [r5, #0]
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	d032      	beq.n	8006f9c <__sflush_r+0x98>
 8006f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	075a      	lsls	r2, r3, #29
 8006f3c:	d505      	bpl.n	8006f4a <__sflush_r+0x46>
 8006f3e:	6863      	ldr	r3, [r4, #4]
 8006f40:	1ac0      	subs	r0, r0, r3
 8006f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f44:	b10b      	cbz	r3, 8006f4a <__sflush_r+0x46>
 8006f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f48:	1ac0      	subs	r0, r0, r3
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f50:	6a21      	ldr	r1, [r4, #32]
 8006f52:	4628      	mov	r0, r5
 8006f54:	47b0      	blx	r6
 8006f56:	1c43      	adds	r3, r0, #1
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	d106      	bne.n	8006f6a <__sflush_r+0x66>
 8006f5c:	6829      	ldr	r1, [r5, #0]
 8006f5e:	291d      	cmp	r1, #29
 8006f60:	d82c      	bhi.n	8006fbc <__sflush_r+0xb8>
 8006f62:	4a2a      	ldr	r2, [pc, #168]	; (800700c <__sflush_r+0x108>)
 8006f64:	40ca      	lsrs	r2, r1
 8006f66:	07d6      	lsls	r6, r2, #31
 8006f68:	d528      	bpl.n	8006fbc <__sflush_r+0xb8>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	6062      	str	r2, [r4, #4]
 8006f6e:	04d9      	lsls	r1, r3, #19
 8006f70:	6922      	ldr	r2, [r4, #16]
 8006f72:	6022      	str	r2, [r4, #0]
 8006f74:	d504      	bpl.n	8006f80 <__sflush_r+0x7c>
 8006f76:	1c42      	adds	r2, r0, #1
 8006f78:	d101      	bne.n	8006f7e <__sflush_r+0x7a>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	b903      	cbnz	r3, 8006f80 <__sflush_r+0x7c>
 8006f7e:	6560      	str	r0, [r4, #84]	; 0x54
 8006f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f82:	602f      	str	r7, [r5, #0]
 8006f84:	2900      	cmp	r1, #0
 8006f86:	d0ca      	beq.n	8006f1e <__sflush_r+0x1a>
 8006f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f8c:	4299      	cmp	r1, r3
 8006f8e:	d002      	beq.n	8006f96 <__sflush_r+0x92>
 8006f90:	4628      	mov	r0, r5
 8006f92:	f7ff fc29 	bl	80067e8 <_free_r>
 8006f96:	2000      	movs	r0, #0
 8006f98:	6360      	str	r0, [r4, #52]	; 0x34
 8006f9a:	e7c1      	b.n	8006f20 <__sflush_r+0x1c>
 8006f9c:	6a21      	ldr	r1, [r4, #32]
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b0      	blx	r6
 8006fa4:	1c41      	adds	r1, r0, #1
 8006fa6:	d1c7      	bne.n	8006f38 <__sflush_r+0x34>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0c4      	beq.n	8006f38 <__sflush_r+0x34>
 8006fae:	2b1d      	cmp	r3, #29
 8006fb0:	d001      	beq.n	8006fb6 <__sflush_r+0xb2>
 8006fb2:	2b16      	cmp	r3, #22
 8006fb4:	d101      	bne.n	8006fba <__sflush_r+0xb6>
 8006fb6:	602f      	str	r7, [r5, #0]
 8006fb8:	e7b1      	b.n	8006f1e <__sflush_r+0x1a>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc0:	81a3      	strh	r3, [r4, #12]
 8006fc2:	e7ad      	b.n	8006f20 <__sflush_r+0x1c>
 8006fc4:	690f      	ldr	r7, [r1, #16]
 8006fc6:	2f00      	cmp	r7, #0
 8006fc8:	d0a9      	beq.n	8006f1e <__sflush_r+0x1a>
 8006fca:	0793      	lsls	r3, r2, #30
 8006fcc:	680e      	ldr	r6, [r1, #0]
 8006fce:	bf08      	it	eq
 8006fd0:	694b      	ldreq	r3, [r1, #20]
 8006fd2:	600f      	str	r7, [r1, #0]
 8006fd4:	bf18      	it	ne
 8006fd6:	2300      	movne	r3, #0
 8006fd8:	eba6 0807 	sub.w	r8, r6, r7
 8006fdc:	608b      	str	r3, [r1, #8]
 8006fde:	f1b8 0f00 	cmp.w	r8, #0
 8006fe2:	dd9c      	ble.n	8006f1e <__sflush_r+0x1a>
 8006fe4:	6a21      	ldr	r1, [r4, #32]
 8006fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fe8:	4643      	mov	r3, r8
 8006fea:	463a      	mov	r2, r7
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b0      	blx	r6
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	dc06      	bgt.n	8007002 <__sflush_r+0xfe>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8007000:	e78e      	b.n	8006f20 <__sflush_r+0x1c>
 8007002:	4407      	add	r7, r0
 8007004:	eba8 0800 	sub.w	r8, r8, r0
 8007008:	e7e9      	b.n	8006fde <__sflush_r+0xda>
 800700a:	bf00      	nop
 800700c:	20400001 	.word	0x20400001

08007010 <_fflush_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	690b      	ldr	r3, [r1, #16]
 8007014:	4605      	mov	r5, r0
 8007016:	460c      	mov	r4, r1
 8007018:	b913      	cbnz	r3, 8007020 <_fflush_r+0x10>
 800701a:	2500      	movs	r5, #0
 800701c:	4628      	mov	r0, r5
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	b118      	cbz	r0, 800702a <_fflush_r+0x1a>
 8007022:	6983      	ldr	r3, [r0, #24]
 8007024:	b90b      	cbnz	r3, 800702a <_fflush_r+0x1a>
 8007026:	f7fe ff89 	bl	8005f3c <__sinit>
 800702a:	4b14      	ldr	r3, [pc, #80]	; (800707c <_fflush_r+0x6c>)
 800702c:	429c      	cmp	r4, r3
 800702e:	d11b      	bne.n	8007068 <_fflush_r+0x58>
 8007030:	686c      	ldr	r4, [r5, #4]
 8007032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0ef      	beq.n	800701a <_fflush_r+0xa>
 800703a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800703c:	07d0      	lsls	r0, r2, #31
 800703e:	d404      	bmi.n	800704a <_fflush_r+0x3a>
 8007040:	0599      	lsls	r1, r3, #22
 8007042:	d402      	bmi.n	800704a <_fflush_r+0x3a>
 8007044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007046:	f7ff f81c 	bl	8006082 <__retarget_lock_acquire_recursive>
 800704a:	4628      	mov	r0, r5
 800704c:	4621      	mov	r1, r4
 800704e:	f7ff ff59 	bl	8006f04 <__sflush_r>
 8007052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007054:	07da      	lsls	r2, r3, #31
 8007056:	4605      	mov	r5, r0
 8007058:	d4e0      	bmi.n	800701c <_fflush_r+0xc>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	059b      	lsls	r3, r3, #22
 800705e:	d4dd      	bmi.n	800701c <_fflush_r+0xc>
 8007060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007062:	f7ff f80f 	bl	8006084 <__retarget_lock_release_recursive>
 8007066:	e7d9      	b.n	800701c <_fflush_r+0xc>
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <_fflush_r+0x70>)
 800706a:	429c      	cmp	r4, r3
 800706c:	d101      	bne.n	8007072 <_fflush_r+0x62>
 800706e:	68ac      	ldr	r4, [r5, #8]
 8007070:	e7df      	b.n	8007032 <_fflush_r+0x22>
 8007072:	4b04      	ldr	r3, [pc, #16]	; (8007084 <_fflush_r+0x74>)
 8007074:	429c      	cmp	r4, r3
 8007076:	bf08      	it	eq
 8007078:	68ec      	ldreq	r4, [r5, #12]
 800707a:	e7da      	b.n	8007032 <_fflush_r+0x22>
 800707c:	08007430 	.word	0x08007430
 8007080:	08007450 	.word	0x08007450
 8007084:	08007410 	.word	0x08007410

08007088 <fiprintf>:
 8007088:	b40e      	push	{r1, r2, r3}
 800708a:	b503      	push	{r0, r1, lr}
 800708c:	4601      	mov	r1, r0
 800708e:	ab03      	add	r3, sp, #12
 8007090:	4805      	ldr	r0, [pc, #20]	; (80070a8 <fiprintf+0x20>)
 8007092:	f853 2b04 	ldr.w	r2, [r3], #4
 8007096:	6800      	ldr	r0, [r0, #0]
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	f7ff fcaf 	bl	80069fc <_vfiprintf_r>
 800709e:	b002      	add	sp, #8
 80070a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a4:	b003      	add	sp, #12
 80070a6:	4770      	bx	lr
 80070a8:	20000010 	.word	0x20000010

080070ac <_lseek_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4d07      	ldr	r5, [pc, #28]	; (80070cc <_lseek_r+0x20>)
 80070b0:	4604      	mov	r4, r0
 80070b2:	4608      	mov	r0, r1
 80070b4:	4611      	mov	r1, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	602a      	str	r2, [r5, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f7fa fab6 	bl	800162c <_lseek>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_lseek_r+0x1e>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_lseek_r+0x1e>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	200002f8 	.word	0x200002f8

080070d0 <__swhatbuf_r>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	460e      	mov	r6, r1
 80070d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d8:	2900      	cmp	r1, #0
 80070da:	b096      	sub	sp, #88	; 0x58
 80070dc:	4614      	mov	r4, r2
 80070de:	461d      	mov	r5, r3
 80070e0:	da08      	bge.n	80070f4 <__swhatbuf_r+0x24>
 80070e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	602a      	str	r2, [r5, #0]
 80070ea:	061a      	lsls	r2, r3, #24
 80070ec:	d410      	bmi.n	8007110 <__swhatbuf_r+0x40>
 80070ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f2:	e00e      	b.n	8007112 <__swhatbuf_r+0x42>
 80070f4:	466a      	mov	r2, sp
 80070f6:	f000 f895 	bl	8007224 <_fstat_r>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	dbf1      	blt.n	80070e2 <__swhatbuf_r+0x12>
 80070fe:	9a01      	ldr	r2, [sp, #4]
 8007100:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007104:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007108:	425a      	negs	r2, r3
 800710a:	415a      	adcs	r2, r3
 800710c:	602a      	str	r2, [r5, #0]
 800710e:	e7ee      	b.n	80070ee <__swhatbuf_r+0x1e>
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	2000      	movs	r0, #0
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	b016      	add	sp, #88	; 0x58
 8007118:	bd70      	pop	{r4, r5, r6, pc}
	...

0800711c <__smakebuf_r>:
 800711c:	898b      	ldrh	r3, [r1, #12]
 800711e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007120:	079d      	lsls	r5, r3, #30
 8007122:	4606      	mov	r6, r0
 8007124:	460c      	mov	r4, r1
 8007126:	d507      	bpl.n	8007138 <__smakebuf_r+0x1c>
 8007128:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	6123      	str	r3, [r4, #16]
 8007130:	2301      	movs	r3, #1
 8007132:	6163      	str	r3, [r4, #20]
 8007134:	b002      	add	sp, #8
 8007136:	bd70      	pop	{r4, r5, r6, pc}
 8007138:	ab01      	add	r3, sp, #4
 800713a:	466a      	mov	r2, sp
 800713c:	f7ff ffc8 	bl	80070d0 <__swhatbuf_r>
 8007140:	9900      	ldr	r1, [sp, #0]
 8007142:	4605      	mov	r5, r0
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff fbbb 	bl	80068c0 <_malloc_r>
 800714a:	b948      	cbnz	r0, 8007160 <__smakebuf_r+0x44>
 800714c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007150:	059a      	lsls	r2, r3, #22
 8007152:	d4ef      	bmi.n	8007134 <__smakebuf_r+0x18>
 8007154:	f023 0303 	bic.w	r3, r3, #3
 8007158:	f043 0302 	orr.w	r3, r3, #2
 800715c:	81a3      	strh	r3, [r4, #12]
 800715e:	e7e3      	b.n	8007128 <__smakebuf_r+0xc>
 8007160:	4b0d      	ldr	r3, [pc, #52]	; (8007198 <__smakebuf_r+0x7c>)
 8007162:	62b3      	str	r3, [r6, #40]	; 0x28
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	6020      	str	r0, [r4, #0]
 8007168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716c:	81a3      	strh	r3, [r4, #12]
 800716e:	9b00      	ldr	r3, [sp, #0]
 8007170:	6163      	str	r3, [r4, #20]
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	6120      	str	r0, [r4, #16]
 8007176:	b15b      	cbz	r3, 8007190 <__smakebuf_r+0x74>
 8007178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800717c:	4630      	mov	r0, r6
 800717e:	f000 f863 	bl	8007248 <_isatty_r>
 8007182:	b128      	cbz	r0, 8007190 <__smakebuf_r+0x74>
 8007184:	89a3      	ldrh	r3, [r4, #12]
 8007186:	f023 0303 	bic.w	r3, r3, #3
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	81a3      	strh	r3, [r4, #12]
 8007190:	89a0      	ldrh	r0, [r4, #12]
 8007192:	4305      	orrs	r5, r0
 8007194:	81a5      	strh	r5, [r4, #12]
 8007196:	e7cd      	b.n	8007134 <__smakebuf_r+0x18>
 8007198:	08005ed5 	.word	0x08005ed5

0800719c <__ascii_mbtowc>:
 800719c:	b082      	sub	sp, #8
 800719e:	b901      	cbnz	r1, 80071a2 <__ascii_mbtowc+0x6>
 80071a0:	a901      	add	r1, sp, #4
 80071a2:	b142      	cbz	r2, 80071b6 <__ascii_mbtowc+0x1a>
 80071a4:	b14b      	cbz	r3, 80071ba <__ascii_mbtowc+0x1e>
 80071a6:	7813      	ldrb	r3, [r2, #0]
 80071a8:	600b      	str	r3, [r1, #0]
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	1e10      	subs	r0, r2, #0
 80071ae:	bf18      	it	ne
 80071b0:	2001      	movne	r0, #1
 80071b2:	b002      	add	sp, #8
 80071b4:	4770      	bx	lr
 80071b6:	4610      	mov	r0, r2
 80071b8:	e7fb      	b.n	80071b2 <__ascii_mbtowc+0x16>
 80071ba:	f06f 0001 	mvn.w	r0, #1
 80071be:	e7f8      	b.n	80071b2 <__ascii_mbtowc+0x16>

080071c0 <__malloc_lock>:
 80071c0:	4801      	ldr	r0, [pc, #4]	; (80071c8 <__malloc_lock+0x8>)
 80071c2:	f7fe bf5e 	b.w	8006082 <__retarget_lock_acquire_recursive>
 80071c6:	bf00      	nop
 80071c8:	200002ec 	.word	0x200002ec

080071cc <__malloc_unlock>:
 80071cc:	4801      	ldr	r0, [pc, #4]	; (80071d4 <__malloc_unlock+0x8>)
 80071ce:	f7fe bf59 	b.w	8006084 <__retarget_lock_release_recursive>
 80071d2:	bf00      	nop
 80071d4:	200002ec 	.word	0x200002ec

080071d8 <_read_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4d07      	ldr	r5, [pc, #28]	; (80071f8 <_read_r+0x20>)
 80071dc:	4604      	mov	r4, r0
 80071de:	4608      	mov	r0, r1
 80071e0:	4611      	mov	r1, r2
 80071e2:	2200      	movs	r2, #0
 80071e4:	602a      	str	r2, [r5, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f7fa f9dc 	bl	80015a4 <_read>
 80071ec:	1c43      	adds	r3, r0, #1
 80071ee:	d102      	bne.n	80071f6 <_read_r+0x1e>
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	b103      	cbz	r3, 80071f6 <_read_r+0x1e>
 80071f4:	6023      	str	r3, [r4, #0]
 80071f6:	bd38      	pop	{r3, r4, r5, pc}
 80071f8:	200002f8 	.word	0x200002f8

080071fc <__ascii_wctomb>:
 80071fc:	b149      	cbz	r1, 8007212 <__ascii_wctomb+0x16>
 80071fe:	2aff      	cmp	r2, #255	; 0xff
 8007200:	bf85      	ittet	hi
 8007202:	238a      	movhi	r3, #138	; 0x8a
 8007204:	6003      	strhi	r3, [r0, #0]
 8007206:	700a      	strbls	r2, [r1, #0]
 8007208:	f04f 30ff 	movhi.w	r0, #4294967295
 800720c:	bf98      	it	ls
 800720e:	2001      	movls	r0, #1
 8007210:	4770      	bx	lr
 8007212:	4608      	mov	r0, r1
 8007214:	4770      	bx	lr

08007216 <abort>:
 8007216:	b508      	push	{r3, lr}
 8007218:	2006      	movs	r0, #6
 800721a:	f000 f84d 	bl	80072b8 <raise>
 800721e:	2001      	movs	r0, #1
 8007220:	f7fa f9b6 	bl	8001590 <_exit>

08007224 <_fstat_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d07      	ldr	r5, [pc, #28]	; (8007244 <_fstat_r+0x20>)
 8007228:	2300      	movs	r3, #0
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	f7fa f9e0 	bl	80015f6 <_fstat>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	d102      	bne.n	8007240 <_fstat_r+0x1c>
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	b103      	cbz	r3, 8007240 <_fstat_r+0x1c>
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	bd38      	pop	{r3, r4, r5, pc}
 8007242:	bf00      	nop
 8007244:	200002f8 	.word	0x200002f8

08007248 <_isatty_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d06      	ldr	r5, [pc, #24]	; (8007264 <_isatty_r+0x1c>)
 800724c:	2300      	movs	r3, #0
 800724e:	4604      	mov	r4, r0
 8007250:	4608      	mov	r0, r1
 8007252:	602b      	str	r3, [r5, #0]
 8007254:	f7fa f9df 	bl	8001616 <_isatty>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_isatty_r+0x1a>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_isatty_r+0x1a>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	200002f8 	.word	0x200002f8

08007268 <_raise_r>:
 8007268:	291f      	cmp	r1, #31
 800726a:	b538      	push	{r3, r4, r5, lr}
 800726c:	4604      	mov	r4, r0
 800726e:	460d      	mov	r5, r1
 8007270:	d904      	bls.n	800727c <_raise_r+0x14>
 8007272:	2316      	movs	r3, #22
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	f04f 30ff 	mov.w	r0, #4294967295
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800727e:	b112      	cbz	r2, 8007286 <_raise_r+0x1e>
 8007280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007284:	b94b      	cbnz	r3, 800729a <_raise_r+0x32>
 8007286:	4620      	mov	r0, r4
 8007288:	f000 f830 	bl	80072ec <_getpid_r>
 800728c:	462a      	mov	r2, r5
 800728e:	4601      	mov	r1, r0
 8007290:	4620      	mov	r0, r4
 8007292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007296:	f000 b817 	b.w	80072c8 <_kill_r>
 800729a:	2b01      	cmp	r3, #1
 800729c:	d00a      	beq.n	80072b4 <_raise_r+0x4c>
 800729e:	1c59      	adds	r1, r3, #1
 80072a0:	d103      	bne.n	80072aa <_raise_r+0x42>
 80072a2:	2316      	movs	r3, #22
 80072a4:	6003      	str	r3, [r0, #0]
 80072a6:	2001      	movs	r0, #1
 80072a8:	e7e7      	b.n	800727a <_raise_r+0x12>
 80072aa:	2400      	movs	r4, #0
 80072ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072b0:	4628      	mov	r0, r5
 80072b2:	4798      	blx	r3
 80072b4:	2000      	movs	r0, #0
 80072b6:	e7e0      	b.n	800727a <_raise_r+0x12>

080072b8 <raise>:
 80072b8:	4b02      	ldr	r3, [pc, #8]	; (80072c4 <raise+0xc>)
 80072ba:	4601      	mov	r1, r0
 80072bc:	6818      	ldr	r0, [r3, #0]
 80072be:	f7ff bfd3 	b.w	8007268 <_raise_r>
 80072c2:	bf00      	nop
 80072c4:	20000010 	.word	0x20000010

080072c8 <_kill_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4d07      	ldr	r5, [pc, #28]	; (80072e8 <_kill_r+0x20>)
 80072cc:	2300      	movs	r3, #0
 80072ce:	4604      	mov	r4, r0
 80072d0:	4608      	mov	r0, r1
 80072d2:	4611      	mov	r1, r2
 80072d4:	602b      	str	r3, [r5, #0]
 80072d6:	f7fa f94b 	bl	8001570 <_kill>
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	d102      	bne.n	80072e4 <_kill_r+0x1c>
 80072de:	682b      	ldr	r3, [r5, #0]
 80072e0:	b103      	cbz	r3, 80072e4 <_kill_r+0x1c>
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	bd38      	pop	{r3, r4, r5, pc}
 80072e6:	bf00      	nop
 80072e8:	200002f8 	.word	0x200002f8

080072ec <_getpid_r>:
 80072ec:	f7fa b938 	b.w	8001560 <_getpid>

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
