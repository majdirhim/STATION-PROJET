
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad94  0800ad94  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad94  0800ad94  0001ad94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad9c  0800ad9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad9c  0800ad9c  0001ad9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ada0  0800ada0  0001ada0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ada4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  20000070  0800ae14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  0800ae14  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4c4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a98  00000000  00000000  0003a564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003e000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a642  00000000  00000000  00040988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d908  00000000  00000000  0006afca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8105  00000000  00000000  000888d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001809d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d8  00000000  00000000  00180a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ab80 	.word	0x0800ab80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800ab80 	.word	0x0800ab80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <WR_TO_Sd>:
/**
 * @brief Ecriture dans le fichier
 * @param : file_name : nom du fichier
 * @param : Wtext : data à transmettre
 */
FRESULT WR_TO_Sd(const char* file_name,const char* fmt, ...) {
 80005c4:	b40e      	push	{r1, r2, r3}
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b09f      	sub	sp, #124	; 0x7c
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
	char wtext[100];
    va_list arg;
    va_start(arg, fmt);
 80005ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d2:	60fb      	str	r3, [r7, #12]
    vsprintf(wtext,fmt, arg);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80005de:	4618      	mov	r0, r3
 80005e0:	f009 f992 	bl	8009908 <vsiprintf>

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */

	//Open file for writing (Create)
	if (f_open(&SDFile, file_name, FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
 80005e4:	2232      	movs	r2, #50	; 0x32
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	4816      	ldr	r0, [pc, #88]	; (8000644 <WR_TO_Sd+0x80>)
 80005ea:	f008 f8c9 	bl	8008780 <f_open>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <WR_TO_Sd+0x34>
		Error_Handler();
 80005f4:	f000 fa86 	bl	8000b04 <Error_Handler>
	}
	//Write to the text file
	res = f_write(&SDFile, wtext, strlen(wtext), (void*) &byteswritten);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fe07 	bl	8000210 <strlen>
 8000602:	4602      	mov	r2, r0
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	f107 0110 	add.w	r1, r7, #16
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <WR_TO_Sd+0x80>)
 800060e:	f008 fa75 	bl	8008afc <f_write>
 8000612:	4603      	mov	r3, r0
 8000614:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if ((byteswritten == 0) || (res != FR_OK)) {
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d003      	beq.n	8000626 <WR_TO_Sd+0x62>
 800061e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000622:	2b00      	cmp	r3, #0
 8000624:	d002      	beq.n	800062c <WR_TO_Sd+0x68>
		Error_Handler();
 8000626:	f000 fa6d 	bl	8000b04 <Error_Handler>
 800062a:	e002      	b.n	8000632 <WR_TO_Sd+0x6e>
	} else {

		f_close(&SDFile); // Close file object
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <WR_TO_Sd+0x80>)
 800062e:	f008 fc58 	bl	8008ee2 <f_close>
	}
	//f_mount(&SDFatFS, (TCHAR const*) NULL, 0); //unmount file system object
	return res;
 8000632:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8000636:	4618      	mov	r0, r3
 8000638:	377c      	adds	r7, #124	; 0x7c
 800063a:	46bd      	mov	sp, r7
 800063c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000640:	b003      	add	sp, #12
 8000642:	4770      	bx	lr
 8000644:	2000052c 	.word	0x2000052c

08000648 <Fat_Init>:

/**
 * @brief : Initialiser un espace de travail dans la carte Sd
 */

void Fat_Init() {
 8000648:	b580      	push	{r7, lr}
 800064a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800064e:	af02      	add	r7, sp, #8

	uint8_t rtext[_MAX_SS];/* File read buffer */
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8000650:	2200      	movs	r2, #0
 8000652:	4910      	ldr	r1, [pc, #64]	; (8000694 <Fat_Init+0x4c>)
 8000654:	4810      	ldr	r0, [pc, #64]	; (8000698 <Fat_Init+0x50>)
 8000656:	f008 f84d 	bl	80086f4 <f_mount>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <Fat_Init+0x1e>
		Error_Handler();
 8000660:	f000 fa50 	bl	8000b04 <Error_Handler>
		FRESULT res = f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext));
		if (res!= FR_OK){ //creates a FAT volume on the logical drive)
			Error_Handler(); // error handler
		}
	}
}
 8000664:	e011      	b.n	800068a <Fat_Init+0x42>
		FRESULT res = f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	9200      	str	r2, [sp, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	2107      	movs	r1, #7
 8000672:	4808      	ldr	r0, [pc, #32]	; (8000694 <Fat_Init+0x4c>)
 8000674:	f008 fc60 	bl	8008f38 <f_mkfs>
 8000678:	4603      	mov	r3, r0
 800067a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (res!= FR_OK){ //creates a FAT volume on the logical drive)
 800067e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <Fat_Init+0x42>
			Error_Handler(); // error handler
 8000686:	f000 fa3d 	bl	8000b04 <Error_Handler>
}
 800068a:	bf00      	nop
 800068c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200002f8 	.word	0x200002f8
 8000698:	200002fc 	.word	0x200002fc

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_DMA_Init+0x48>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <MX_DMA_Init+0x48>)
 80006a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_DMA_Init+0x48>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	203b      	movs	r0, #59	; 0x3b
 80006c0:	f000 ff85 	bl	80015ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80006c4:	203b      	movs	r0, #59	; 0x3b
 80006c6:	f000 ff9e 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2045      	movs	r0, #69	; 0x45
 80006d0:	f000 ff7d 	bl	80015ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006d4:	2045      	movs	r0, #69	; 0x45
 80006d6:	f000 ff96 	bl	8001606 <HAL_NVIC_EnableIRQ>

}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800

080006e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b090      	sub	sp, #64	; 0x40
 80006ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	4b91      	ldr	r3, [pc, #580]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a90      	ldr	r2, [pc, #576]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000704:	f043 0310 	orr.w	r3, r3, #16
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b8e      	ldr	r3, [pc, #568]	; (8000944 <MX_GPIO_Init+0x25c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
 8000714:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000716:	4b8b      	ldr	r3, [pc, #556]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a8a      	ldr	r2, [pc, #552]	; (8000944 <MX_GPIO_Init+0x25c>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b88      	ldr	r3, [pc, #544]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b85      	ldr	r3, [pc, #532]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a84      	ldr	r2, [pc, #528]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b82      	ldr	r3, [pc, #520]	; (8000944 <MX_GPIO_Init+0x25c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	623b      	str	r3, [r7, #32]
 8000744:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	4b7f      	ldr	r3, [pc, #508]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a7e      	ldr	r2, [pc, #504]	; (8000944 <MX_GPIO_Init+0x25c>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b7c      	ldr	r3, [pc, #496]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	61fb      	str	r3, [r7, #28]
 800075c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b79      	ldr	r3, [pc, #484]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a78      	ldr	r2, [pc, #480]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b76      	ldr	r3, [pc, #472]	; (8000944 <MX_GPIO_Init+0x25c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b73      	ldr	r3, [pc, #460]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a72      	ldr	r2, [pc, #456]	; (8000944 <MX_GPIO_Init+0x25c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b70      	ldr	r3, [pc, #448]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800078e:	4b6d      	ldr	r3, [pc, #436]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6c      	ldr	r2, [pc, #432]	; (8000944 <MX_GPIO_Init+0x25c>)
 8000794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b6a      	ldr	r3, [pc, #424]	; (8000944 <MX_GPIO_Init+0x25c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007a6:	4b67      	ldr	r3, [pc, #412]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a66      	ldr	r2, [pc, #408]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b64      	ldr	r3, [pc, #400]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80007be:	4b61      	ldr	r3, [pc, #388]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a60      	ldr	r2, [pc, #384]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b5e      	ldr	r3, [pc, #376]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d6:	4b5b      	ldr	r3, [pc, #364]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a5a      	ldr	r2, [pc, #360]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b58      	ldr	r3, [pc, #352]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0320 	and.w	r3, r3, #32
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b55      	ldr	r3, [pc, #340]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a54      	ldr	r2, [pc, #336]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b52      	ldr	r3, [pc, #328]	; (8000944 <MX_GPIO_Init+0x25c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 8000806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	4619      	mov	r1, r3
 800081a:	484b      	ldr	r0, [pc, #300]	; (8000948 <MX_GPIO_Init+0x260>)
 800081c:	f001 fab4 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 8000820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000826:	2303      	movs	r3, #3
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000832:	4619      	mov	r1, r3
 8000834:	4845      	ldr	r0, [pc, #276]	; (800094c <MX_GPIO_Init+0x264>)
 8000836:	f001 faa7 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB13 PB12 PB2
                           PB10 PB1 PB0 PB11
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 800083a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2
                          |GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000840:	2303      	movs	r3, #3
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084c:	4619      	mov	r1, r3
 800084e:	4840      	ldr	r0, [pc, #256]	; (8000950 <MX_GPIO_Init+0x268>)
 8000850:	f001 fa9a 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD15
                           PD10 PD14 PD9 PD8
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 8000854:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000858:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15
                          |GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000866:	4619      	mov	r1, r3
 8000868:	483a      	ldr	r0, [pc, #232]	; (8000954 <MX_GPIO_Init+0x26c>)
 800086a:	f001 fa8d 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA9 PA1 PA0 PA4
                           PA2 PA6 PA5 PA3
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 800086e:	f649 63ff 	movw	r3, #40703	; 0x9eff
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
                          |GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000874:	2303      	movs	r3, #3
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000880:	4619      	mov	r1, r3
 8000882:	4835      	ldr	r0, [pc, #212]	; (8000958 <MX_GPIO_Init+0x270>)
 8000884:	f001 fa80 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8000888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088e:	2303      	movs	r3, #3
 8000890:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089a:	4619      	mov	r1, r3
 800089c:	482f      	ldr	r0, [pc, #188]	; (800095c <MX_GPIO_Init+0x274>)
 800089e:	f001 fa73 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 80008a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_GPIO_Init+0x278>)
 80008b8:	f001 fa66 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80008bc:	23ff      	movs	r3, #255	; 0xff
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c0:	2303      	movs	r3, #3
 80008c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008cc:	4619      	mov	r1, r3
 80008ce:	4825      	ldr	r0, [pc, #148]	; (8000964 <MX_GPIO_Init+0x27c>)
 80008d0:	f001 fa5a 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008e6:	4619      	mov	r1, r3
 80008e8:	481f      	ldr	r0, [pc, #124]	; (8000968 <MX_GPIO_Init+0x280>)
 80008ea:	f001 fa4d 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	2303      	movs	r3, #3
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000900:	4619      	mov	r1, r3
 8000902:	481a      	ldr	r0, [pc, #104]	; (800096c <MX_GPIO_Init+0x284>)
 8000904:	f001 fa40 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8000908:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090e:	2303      	movs	r3, #3
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800091a:	4619      	mov	r1, r3
 800091c:	4814      	ldr	r0, [pc, #80]	; (8000970 <MX_GPIO_Init+0x288>)
 800091e:	f001 fa33 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC7 PC6
                           PC3 PC0 PC1 PC2
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_6
 8000922:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000928:	2303      	movs	r3, #3
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000934:	4619      	mov	r1, r3
 8000936:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_GPIO_Init+0x280>)
 8000938:	f001 fa26 	bl	8001d88 <HAL_GPIO_Init>

}
 800093c:	bf00      	nop
 800093e:	3740      	adds	r7, #64	; 0x40
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40021000 	.word	0x40021000
 800094c:	40021800 	.word	0x40021800
 8000950:	40020400 	.word	0x40020400
 8000954:	40020c00 	.word	0x40020c00
 8000958:	40020000 	.word	0x40020000
 800095c:	40022400 	.word	0x40022400
 8000960:	40022000 	.word	0x40022000
 8000964:	40022800 	.word	0x40022800
 8000968:	40020800 	.word	0x40020800
 800096c:	40021400 	.word	0x40021400
 8000970:	40021c00 	.word	0x40021c00

08000974 <_write>:
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int _write(int file, char *ptr, int len) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 100);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	b29a      	uxth	r2, r3
 8000984:	2364      	movs	r3, #100	; 0x64
 8000986:	68b9      	ldr	r1, [r7, #8]
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <_write+0x24>)
 800098a:	f004 fd0b 	bl	80053a4 <HAL_UART_Transmit>
	return len;
 800098e:	687b      	ldr	r3, [r7, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000026c 	.word	0x2000026c

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fcb8 	bl	8001316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f831 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f7ff fe9d 	bl	80006e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ae:	f7ff fe75 	bl	800069c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80009b2:	f000 f8ad 	bl	8000b10 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80009b6:	f005 fefd 	bl	80067b4 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 80009ba:	f000 fbf5 	bl	80011a8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80009be:	f000 fb49 	bl	8001054 <MX_TIM6_Init>
  MX_TIM1_Init();
 80009c2:	f000 faed 	bl	8000fa0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Fat_Init();
 80009c6:	f7ff fe3f 	bl	8000648 <Fat_Init>
  /* USER CODE END 2 */
  int  Wind_Speed_KMH=0,Min_Wind=0, Max_Wind=1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	2301      	movs	r3, #1
 80009d4:	607b      	str	r3, [r7, #4]
  uint8_t Force =5;
 80009d6:	2305      	movs	r3, #5
 80009d8:	70fb      	strb	r3, [r7, #3]
  WR_TO_Sd("test6.csv","Average_Wind_Speed,Min,Max,Force,\n");
 80009da:	4909      	ldr	r1, [pc, #36]	; (8000a00 <main+0x64>)
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <main+0x68>)
 80009de:	f7ff fdf1 	bl	80005c4 <WR_TO_Sd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  WR_TO_Sd("test6.csv","%d km/h,%d,%d,%u\n", Wind_Speed_KMH, Min_Wind, Max_Wind, Force);
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	9301      	str	r3, [sp, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	68fa      	ldr	r2, [r7, #12]
 80009ee:	4906      	ldr	r1, [pc, #24]	; (8000a08 <main+0x6c>)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <main+0x68>)
 80009f2:	f7ff fde7 	bl	80005c4 <WR_TO_Sd>
	  HAL_Delay(1000);
 80009f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fa:	f000 fce9 	bl	80013d0 <HAL_Delay>
	  WR_TO_Sd("test6.csv","%d km/h,%d,%d,%u\n", Wind_Speed_KMH, Min_Wind, Max_Wind, Force);
 80009fe:	e7f0      	b.n	80009e2 <main+0x46>
 8000a00:	0800ab98 	.word	0x0800ab98
 8000a04:	0800abbc 	.word	0x0800abbc
 8000a08:	0800abc8 	.word	0x0800abc8

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	; 0x50
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	2230      	movs	r2, #48	; 0x30
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f008 ff3e 	bl	800989c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <SystemClock_Config+0xd4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a2a      	ldr	r2, [pc, #168]	; (8000ae0 <SystemClock_Config+0xd4>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <SystemClock_Config+0xd4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a50:	4a24      	ldr	r2, [pc, #144]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fb8f 	bl	80021b0 <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a98:	f000 f834 	bl	8000b04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a9c:	f001 fb38 	bl	8002110 <HAL_PWREx_EnableOverDrive>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 f82d 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	2103      	movs	r1, #3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 fe15 	bl	80026f8 <HAL_RCC_ClockConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ad4:	f000 f816 	bl	8000b04 <Error_Handler>
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3750      	adds	r7, #80	; 0x50
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40007000 	.word	0x40007000

08000ae8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	printf("hey\n\r");
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000af2:	f008 fedb 	bl	80098ac <iprintf>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	0800abdc 	.word	0x0800abdc

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SDMMC1_SD_Init+0x38>)
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <MX_SDMMC1_SD_Init+0x3c>)
 8000b18:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_SDMMC1_SD_Init+0x38>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SDMMC1_SD_Init+0x38>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_SDMMC1_SD_Init+0x38>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SDMMC1_SD_Init+0x38>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <MX_SDMMC1_SD_Init+0x38>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <MX_SDMMC1_SD_Init+0x38>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	2000008c 	.word	0x2000008c
 8000b4c:	40012c00 	.word	0x40012c00

08000b50 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b0ac      	sub	sp, #176	; 0xb0
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	2284      	movs	r2, #132	; 0x84
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f008 fe93 	bl	800989c <memset>
  if(sdHandle->Instance==SDMMC1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a74      	ldr	r2, [pc, #464]	; (8000d4c <HAL_SD_MspInit+0x1fc>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	f040 80e0 	bne.w	8000d42 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000b82:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000b86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 ff93 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8000ba4:	f7ff ffae 	bl	8000b04 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000ba8:	4b69      	ldr	r3, [pc, #420]	; (8000d50 <HAL_SD_MspInit+0x200>)
 8000baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bac:	4a68      	ldr	r2, [pc, #416]	; (8000d50 <HAL_SD_MspInit+0x200>)
 8000bae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb4:	4b66      	ldr	r3, [pc, #408]	; (8000d50 <HAL_SD_MspInit+0x200>)
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	4b63      	ldr	r3, [pc, #396]	; (8000d50 <HAL_SD_MspInit+0x200>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a62      	ldr	r2, [pc, #392]	; (8000d50 <HAL_SD_MspInit+0x200>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b60      	ldr	r3, [pc, #384]	; (8000d50 <HAL_SD_MspInit+0x200>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd8:	4b5d      	ldr	r3, [pc, #372]	; (8000d50 <HAL_SD_MspInit+0x200>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a5c      	ldr	r2, [pc, #368]	; (8000d50 <HAL_SD_MspInit+0x200>)
 8000bde:	f043 0308 	orr.w	r3, r3, #8
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b5a      	ldr	r3, [pc, #360]	; (8000d50 <HAL_SD_MspInit+0x200>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 0308 	and.w	r3, r3, #8
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8000bf0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c14:	4619      	mov	r1, r3
 8000c16:	484f      	ldr	r0, [pc, #316]	; (8000d54 <HAL_SD_MspInit+0x204>)
 8000c18:	f001 f8b6 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c34:	230c      	movs	r3, #12
 8000c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4845      	ldr	r0, [pc, #276]	; (8000d58 <HAL_SD_MspInit+0x208>)
 8000c42:	f001 f8a1 	bl	8001d88 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000c46:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c48:	4a45      	ldr	r2, [pc, #276]	; (8000d60 <HAL_SD_MspInit+0x210>)
 8000c4a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c52:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c54:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c60:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c66:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c68:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c6e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c76:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000c78:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c7e:	4b37      	ldr	r3, [pc, #220]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c84:	4b35      	ldr	r3, [pc, #212]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000c9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000ca0:	482e      	ldr	r0, [pc, #184]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000ca2:	f000 fccb 	bl	800163c <HAL_DMA_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000cac:	f7ff ff2a 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000cb4:	641a      	str	r2, [r3, #64]	; 0x40
 8000cb6:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <HAL_SD_MspInit+0x20c>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000cbe:	4a2a      	ldr	r2, [pc, #168]	; (8000d68 <HAL_SD_MspInit+0x218>)
 8000cc0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000cc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000ccc:	2240      	movs	r2, #64	; 0x40
 8000cce:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cdc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000ce8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cec:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000d08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000d10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d14:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000d16:	4813      	ldr	r0, [pc, #76]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000d18:	f000 fc90 	bl	800163c <HAL_DMA_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000d22:	f7ff feef 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_SD_MspInit+0x214>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	2031      	movs	r0, #49	; 0x31
 8000d38:	f000 fc49 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000d3c:	2031      	movs	r0, #49	; 0x31
 8000d3e:	f000 fc62 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000d42:	bf00      	nop
 8000d44:	37b0      	adds	r7, #176	; 0xb0
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40012c00 	.word	0x40012c00
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	20000110 	.word	0x20000110
 8000d60:	40026458 	.word	0x40026458
 8000d64:	20000170 	.word	0x20000170
 8000d68:	400264a0 	.word	0x400264a0

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <NMI_Handler+0x4>

08000dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 fac6 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM1_CC_IRQHandler+0x10>)
 8000e0e:	f003 fe22 	bl	8004a56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200001d4 	.word	0x200001d4

08000e1c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <SDMMC1_IRQHandler+0x10>)
 8000e22:	f002 fcbf 	bl	80037a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000008c 	.word	0x2000008c

08000e30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM6_DAC_IRQHandler+0x10>)
 8000e36:	f003 fe0e 	bl	8004a56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000220 	.word	0x20000220

08000e44 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <DMA2_Stream3_IRQHandler+0x10>)
 8000e4a:	f000 fd27 	bl	800189c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000110 	.word	0x20000110

08000e58 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <DMA2_Stream6_IRQHandler+0x10>)
 8000e5e:	f000 fd1d 	bl	800189c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000170 	.word	0x20000170

08000e6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e00a      	b.n	8000e94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e7e:	f3af 8000 	nop.w
 8000e82:	4601      	mov	r1, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf0      	blt.n	8000e7e <_read+0x12>
	}

return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ece:	605a      	str	r2, [r3, #4]
	return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_isatty>:

int _isatty(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f008 fc82 	bl	8009848 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20050000 	.word	0x20050000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	200001d0 	.word	0x200001d0
 8000f78:	200007a8 	.word	0x200007a8

08000f7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <MX_TIM1_Init+0xac>)
 8000fc0:	4a23      	ldr	r2, [pc, #140]	; (8001050 <MX_TIM1_Init+0xb0>)
 8000fc2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <MX_TIM1_Init+0xac>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	4b20      	ldr	r3, [pc, #128]	; (800104c <MX_TIM1_Init+0xac>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <MX_TIM1_Init+0xac>)
 8000fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_TIM1_Init+0xac>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_TIM1_Init+0xac>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_TIM1_Init+0xac>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000fea:	4818      	ldr	r0, [pc, #96]	; (800104c <MX_TIM1_Init+0xac>)
 8000fec:	f003 fcdc 	bl	80049a8 <HAL_TIM_IC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ff6:	f7ff fd85 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480f      	ldr	r0, [pc, #60]	; (800104c <MX_TIM1_Init+0xac>)
 800100e:	f004 f8cf 	bl	80051b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001018:	f7ff fd74 	bl	8000b04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001020:	2301      	movs	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <MX_TIM1_Init+0xac>)
 8001034:	f003 fe2e 	bl	8004c94 <HAL_TIM_IC_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800103e:	f7ff fd61 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001d4 	.word	0x200001d4
 8001050:	40010000 	.word	0x40010000

08001054 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_TIM6_Init+0x68>)
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <MX_TIM6_Init+0x6c>)
 8001068:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_TIM6_Init+0x68>)
 800106c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001070:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_TIM6_Init+0x68>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <MX_TIM6_Init+0x68>)
 800107a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800107e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_TIM6_Init+0x68>)
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_TIM6_Init+0x68>)
 8001088:	f003 fc37 	bl	80048fa <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001092:	f7ff fd37 	bl	8000b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_TIM6_Init+0x68>)
 80010a4:	f004 f884 	bl	80051b0 <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80010ae:	f7ff fd29 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000220 	.word	0x20000220
 80010c0:	40001000 	.word	0x40001000

080010c4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_TIM_IC_MspInit+0x8c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d130      	bne.n	8001148 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_TIM_IC_MspInit+0x90>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <HAL_TIM_IC_MspInit+0x90>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_TIM_IC_MspInit+0x90>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_TIM_IC_MspInit+0x90>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a14      	ldr	r2, [pc, #80]	; (8001154 <HAL_TIM_IC_MspInit+0x90>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_TIM_IC_MspInit+0x90>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4809      	ldr	r0, [pc, #36]	; (8001158 <HAL_TIM_IC_MspInit+0x94>)
 8001134:	f000 fe28 	bl	8001d88 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	201b      	movs	r0, #27
 800113e:	f000 fa46 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001142:	201b      	movs	r0, #27
 8001144:	f000 fa5f 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40010000 	.word	0x40010000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000

0800115c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_TIM_Base_MspInit+0x44>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d113      	bne.n	8001196 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_TIM_Base_MspInit+0x48>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <HAL_TIM_Base_MspInit+0x48>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_TIM_Base_MspInit+0x48>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001186:	2200      	movs	r2, #0
 8001188:	2100      	movs	r1, #0
 800118a:	2036      	movs	r0, #54	; 0x36
 800118c:	f000 fa1f 	bl	80015ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001190:	2036      	movs	r0, #54	; 0x36
 8001192:	f000 fa38 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40001000 	.word	0x40001000
 80011a4:	40023800 	.word	0x40023800

080011a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <MX_USART1_UART_Init+0x5c>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART1_UART_Init+0x58>)
 80011ec:	f004 f88c 	bl	8005308 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011f6:	f7ff fc85 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000026c 	.word	0x2000026c
 8001204:	40011000 	.word	0x40011000

08001208 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0aa      	sub	sp, #168	; 0xa8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	2284      	movs	r2, #132	; 0x84
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f008 fb37 	bl	800989c <memset>
  if(uartHandle->Instance==USART1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a21      	ldr	r2, [pc, #132]	; (80012b8 <HAL_UART_MspInit+0xb0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d13a      	bne.n	80012ae <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001238:	2340      	movs	r3, #64	; 0x40
 800123a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800123c:	2300      	movs	r3, #0
 800123e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fc3d 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001250:	f7ff fc58 	bl	8000b04 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_UART_MspInit+0xb4>)
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_UART_MspInit+0xb4>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6453      	str	r3, [r2, #68]	; 0x44
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_UART_MspInit+0xb4>)
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_UART_MspInit+0xb4>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <HAL_UART_MspInit+0xb4>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_UART_MspInit+0xb4>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001284:	23c0      	movs	r3, #192	; 0xc0
 8001286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800129c:	2307      	movs	r3, #7
 800129e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_UART_MspInit+0xb8>)
 80012aa:	f000 fd6d 	bl	8001d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012ae:	bf00      	nop
 80012b0:	37a8      	adds	r7, #168	; 0xa8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40011000 	.word	0x40011000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e0:	4c0b      	ldr	r4, [pc, #44]	; (8001310 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ee:	f7ff fe45 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f008 faaf 	bl	8009854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff fb51 	bl	800099c <main>
  bx  lr    
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001308:	0800ada4 	.word	0x0800ada4
  ldr r2, =_sbss
 800130c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001310:	200007a8 	.word	0x200007a8

08001314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>

08001316 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131a:	2003      	movs	r0, #3
 800131c:	f000 f94c 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001320:	2000      	movs	r0, #0
 8001322:	f000 f805 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001326:	f7ff fd21 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f967 	bl	8001622 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f92f 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200002f0 	.word	0x200002f0

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200002f0 	.word	0x200002f0

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff ffee 	bl	80013b8 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffde 	bl	80013b8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	4313      	orrs	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	05fa0000 	.word	0x05fa0000

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff29 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff3e 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff8e 	bl	800150c <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5d 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff31 	bl	800147c <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa2 	bl	8001574 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff feb6 	bl	80013b8 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e099      	b.n	800178c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001678:	e00f      	b.n	800169a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800167a:	f7ff fe9d 	bl	80013b8 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b05      	cmp	r3, #5
 8001686:	d908      	bls.n	800169a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2220      	movs	r2, #32
 800168c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2203      	movs	r2, #3
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e078      	b.n	800178c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e8      	bne.n	800167a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_DMA_Init+0x158>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d107      	bne.n	8001704 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	4313      	orrs	r3, r2
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4313      	orrs	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f023 0307 	bic.w	r3, r3, #7
 800171a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	4313      	orrs	r3, r2
 8001724:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	2b04      	cmp	r3, #4
 800172c:	d117      	bne.n	800175e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00e      	beq.n	800175e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 faa5 	bl	8001c90 <DMA_CheckFifoParam>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800175a:	2301      	movs	r3, #1
 800175c:	e016      	b.n	800178c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fa5c 	bl	8001c24 <DMA_CalcBaseAndBitshift>
 800176c:	4603      	mov	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	223f      	movs	r2, #63	; 0x3f
 8001776:	409a      	lsls	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	f010803f 	.word	0xf010803f

08001798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_DMA_Start_IT+0x26>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e048      	b.n	8001850 <HAL_DMA_Start_IT+0xb8>
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d137      	bne.n	8001842 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2202      	movs	r2, #2
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 f9ee 	bl	8001bc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f0:	223f      	movs	r2, #63	; 0x3f
 80017f2:	409a      	lsls	r2, r3
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0216 	orr.w	r2, r2, #22
 8001806:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001816:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0208 	orr.w	r2, r2, #8
 800182e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e005      	b.n	800184e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800184a:	2302      	movs	r3, #2
 800184c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800184e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d004      	beq.n	8001876 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00c      	b.n	8001890 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2205      	movs	r2, #5
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0201 	bic.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80018a8:	4b8e      	ldr	r3, [pc, #568]	; (8001ae4 <HAL_DMA_IRQHandler+0x248>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a8e      	ldr	r2, [pc, #568]	; (8001ae8 <HAL_DMA_IRQHandler+0x24c>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0a9b      	lsrs	r3, r3, #10
 80018b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	2208      	movs	r2, #8
 80018c8:	409a      	lsls	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01a      	beq.n	8001908 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0204 	bic.w	r2, r2, #4
 80018ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	2208      	movs	r2, #8
 80018f6:	409a      	lsls	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	2201      	movs	r2, #1
 800190e:	409a      	lsls	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d012      	beq.n	800193e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00b      	beq.n	800193e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	2201      	movs	r2, #1
 800192c:	409a      	lsls	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001936:	f043 0202 	orr.w	r2, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001942:	2204      	movs	r2, #4
 8001944:	409a      	lsls	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d012      	beq.n	8001974 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00b      	beq.n	8001974 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001960:	2204      	movs	r2, #4
 8001962:	409a      	lsls	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196c:	f043 0204 	orr.w	r2, r3, #4
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	2210      	movs	r2, #16
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d043      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d03c      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	2210      	movs	r2, #16
 8001998:	409a      	lsls	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d018      	beq.n	80019de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d108      	bne.n	80019cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d024      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
 80019ca:	e01f      	b.n	8001a0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01b      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
 80019dc:	e016      	b.n	8001a0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0208 	bic.w	r2, r2, #8
 80019fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	2220      	movs	r2, #32
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 808f 	beq.w	8001b3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8087 	beq.w	8001b3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	2220      	movs	r2, #32
 8001a34:	409a      	lsls	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d136      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0216 	bic.w	r2, r2, #22
 8001a54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695a      	ldr	r2, [r3, #20]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d103      	bne.n	8001a76 <HAL_DMA_IRQHandler+0x1da>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0208 	bic.w	r2, r2, #8
 8001a84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8a:	223f      	movs	r2, #63	; 0x3f
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d07e      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
        }
        return;
 8001ab2:	e079      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d01d      	beq.n	8001afe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10d      	bne.n	8001aec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d031      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	4798      	blx	r3
 8001ae0:	e02c      	b.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
 8001ae2:	bf00      	nop
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d023      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
 8001afc:	e01e      	b.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10f      	bne.n	8001b2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0210 	bic.w	r2, r2, #16
 8001b1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d032      	beq.n	8001baa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d022      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2205      	movs	r2, #5
 8001b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d307      	bcc.n	8001b84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f2      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x2cc>
 8001b82:	e000      	b.n	8001b86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
 8001ba6:	e000      	b.n	8001baa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ba8:	bf00      	nop
    }
  }
}
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001be4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d108      	bne.n	8001c08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c06:	e007      	b.n	8001c18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	60da      	str	r2, [r3, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3b10      	subs	r3, #16
 8001c34:	4a13      	ldr	r2, [pc, #76]	; (8001c84 <DMA_CalcBaseAndBitshift+0x60>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	091b      	lsrs	r3, r3, #4
 8001c3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <DMA_CalcBaseAndBitshift+0x64>)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d908      	bls.n	8001c64 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <DMA_CalcBaseAndBitshift+0x68>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	1d1a      	adds	r2, r3, #4
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	659a      	str	r2, [r3, #88]	; 0x58
 8001c62:	e006      	b.n	8001c72 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <DMA_CalcBaseAndBitshift+0x68>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	aaaaaaab 	.word	0xaaaaaaab
 8001c88:	0800ac40 	.word	0x0800ac40
 8001c8c:	fffffc00 	.word	0xfffffc00

08001c90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d11f      	bne.n	8001cea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d856      	bhi.n	8001d5e <DMA_CheckFifoParam+0xce>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <DMA_CheckFifoParam+0x28>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001cc9 	.word	0x08001cc9
 8001cbc:	08001cdb 	.word	0x08001cdb
 8001cc0:	08001cc9 	.word	0x08001cc9
 8001cc4:	08001d5f 	.word	0x08001d5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d046      	beq.n	8001d62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cd8:	e043      	b.n	8001d62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ce2:	d140      	bne.n	8001d66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ce8:	e03d      	b.n	8001d66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf2:	d121      	bne.n	8001d38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d837      	bhi.n	8001d6a <DMA_CheckFifoParam+0xda>
 8001cfa:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <DMA_CheckFifoParam+0x70>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d17 	.word	0x08001d17
 8001d08:	08001d11 	.word	0x08001d11
 8001d0c:	08001d29 	.word	0x08001d29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	73fb      	strb	r3, [r7, #15]
      break;
 8001d14:	e030      	b.n	8001d78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d025      	beq.n	8001d6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d26:	e022      	b.n	8001d6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d30:	d11f      	bne.n	8001d72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d36:	e01c      	b.n	8001d72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d903      	bls.n	8001d46 <DMA_CheckFifoParam+0xb6>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d003      	beq.n	8001d4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d44:	e018      	b.n	8001d78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
      break;
 8001d4a:	e015      	b.n	8001d78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d5c:	e00b      	b.n	8001d76 <DMA_CheckFifoParam+0xe6>
      break;
 8001d5e:	bf00      	nop
 8001d60:	e00a      	b.n	8001d78 <DMA_CheckFifoParam+0xe8>
      break;
 8001d62:	bf00      	nop
 8001d64:	e008      	b.n	8001d78 <DMA_CheckFifoParam+0xe8>
      break;
 8001d66:	bf00      	nop
 8001d68:	e006      	b.n	8001d78 <DMA_CheckFifoParam+0xe8>
      break;
 8001d6a:	bf00      	nop
 8001d6c:	e004      	b.n	8001d78 <DMA_CheckFifoParam+0xe8>
      break;
 8001d6e:	bf00      	nop
 8001d70:	e002      	b.n	8001d78 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d72:	bf00      	nop
 8001d74:	e000      	b.n	8001d78 <DMA_CheckFifoParam+0xe8>
      break;
 8001d76:	bf00      	nop
    }
  } 
  
  return status; 
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	e175      	b.n	8002094 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f040 8164 	bne.w	800208e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d005      	beq.n	8001dde <HAL_GPIO_Init+0x56>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d130      	bne.n	8001e40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e14:	2201      	movs	r2, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 0201 	and.w	r2, r3, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d017      	beq.n	8001e7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d123      	bne.n	8001ed0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	08da      	lsrs	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3208      	adds	r2, #8
 8001e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	08da      	lsrs	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3208      	adds	r2, #8
 8001eca:	69b9      	ldr	r1, [r7, #24]
 8001ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80be 	beq.w	800208e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	4b66      	ldr	r3, [pc, #408]	; (80020ac <HAL_GPIO_Init+0x324>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a65      	ldr	r2, [pc, #404]	; (80020ac <HAL_GPIO_Init+0x324>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b63      	ldr	r3, [pc, #396]	; (80020ac <HAL_GPIO_Init+0x324>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f2a:	4a61      	ldr	r2, [pc, #388]	; (80020b0 <HAL_GPIO_Init+0x328>)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_GPIO_Init+0x32c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d037      	beq.n	8001fc6 <HAL_GPIO_Init+0x23e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a57      	ldr	r2, [pc, #348]	; (80020b8 <HAL_GPIO_Init+0x330>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d031      	beq.n	8001fc2 <HAL_GPIO_Init+0x23a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a56      	ldr	r2, [pc, #344]	; (80020bc <HAL_GPIO_Init+0x334>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d02b      	beq.n	8001fbe <HAL_GPIO_Init+0x236>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a55      	ldr	r2, [pc, #340]	; (80020c0 <HAL_GPIO_Init+0x338>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d025      	beq.n	8001fba <HAL_GPIO_Init+0x232>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a54      	ldr	r2, [pc, #336]	; (80020c4 <HAL_GPIO_Init+0x33c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01f      	beq.n	8001fb6 <HAL_GPIO_Init+0x22e>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a53      	ldr	r2, [pc, #332]	; (80020c8 <HAL_GPIO_Init+0x340>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d019      	beq.n	8001fb2 <HAL_GPIO_Init+0x22a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a52      	ldr	r2, [pc, #328]	; (80020cc <HAL_GPIO_Init+0x344>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0x226>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a51      	ldr	r2, [pc, #324]	; (80020d0 <HAL_GPIO_Init+0x348>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_GPIO_Init+0x222>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a50      	ldr	r2, [pc, #320]	; (80020d4 <HAL_GPIO_Init+0x34c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x21e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4f      	ldr	r2, [pc, #316]	; (80020d8 <HAL_GPIO_Init+0x350>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_GPIO_Init+0x21a>
 8001f9e:	2309      	movs	r3, #9
 8001fa0:	e012      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001fa2:	230a      	movs	r3, #10
 8001fa4:	e010      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	e00e      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001faa:	2307      	movs	r3, #7
 8001fac:	e00c      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001fae:	2306      	movs	r3, #6
 8001fb0:	e00a      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	e008      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e004      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e002      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_GPIO_Init+0x240>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	69fa      	ldr	r2, [r7, #28]
 8001fca:	f002 0203 	and.w	r2, r2, #3
 8001fce:	0092      	lsls	r2, r2, #2
 8001fd0:	4093      	lsls	r3, r2
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fd8:	4935      	ldr	r1, [pc, #212]	; (80020b0 <HAL_GPIO_Init+0x328>)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_GPIO_Init+0x354>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800200a:	4a34      	ldr	r2, [pc, #208]	; (80020dc <HAL_GPIO_Init+0x354>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002010:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_GPIO_Init+0x354>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <HAL_GPIO_Init+0x354>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_GPIO_Init+0x354>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800205e:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_GPIO_Init+0x354>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002064:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_GPIO_Init+0x354>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_GPIO_Init+0x354>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3301      	adds	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b0f      	cmp	r3, #15
 8002098:	f67f ae86 	bls.w	8001da8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40013800 	.word	0x40013800
 80020b4:	40020000 	.word	0x40020000
 80020b8:	40020400 	.word	0x40020400
 80020bc:	40020800 	.word	0x40020800
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40021400 	.word	0x40021400
 80020cc:	40021800 	.word	0x40021800
 80020d0:	40021c00 	.word	0x40021c00
 80020d4:	40022000 	.word	0x40022000
 80020d8:	40022400 	.word	0x40022400
 80020dc:	40013c00 	.word	0x40013c00

080020e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	e001      	b.n	8002102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800213c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800213e:	f7ff f93b 	bl	80013b8 <HAL_GetTick>
 8002142:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002144:	e009      	b.n	800215a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002146:	f7ff f937 	bl	80013b8 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002154:	d901      	bls.n	800215a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e022      	b.n	80021a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002166:	d1ee      	bne.n	8002146 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002168:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800216e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002172:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002174:	f7ff f920 	bl	80013b8 <HAL_GetTick>
 8002178:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800217a:	e009      	b.n	8002190 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800217c:	f7ff f91c 	bl	80013b8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800218a:	d901      	bls.n	8002190 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e007      	b.n	80021a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800219c:	d1ee      	bne.n	800217c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40007000 	.word	0x40007000

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e291      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8087 	beq.w	80022e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d4:	4b96      	ldr	r3, [pc, #600]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d00c      	beq.n	80021fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e0:	4b93      	ldr	r3, [pc, #588]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d112      	bne.n	8002212 <HAL_RCC_OscConfig+0x62>
 80021ec:	4b90      	ldr	r3, [pc, #576]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f8:	d10b      	bne.n	8002212 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	4b8d      	ldr	r3, [pc, #564]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d06c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x130>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d168      	bne.n	80022e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e26b      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x7a>
 800221c:	4b84      	ldr	r3, [pc, #528]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a83      	ldr	r2, [pc, #524]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e02e      	b.n	8002288 <HAL_RCC_OscConfig+0xd8>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x9c>
 8002232:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7e      	ldr	r2, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7b      	ldr	r2, [pc, #492]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xd8>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0xc0>
 8002256:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a75      	ldr	r2, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b73      	ldr	r3, [pc, #460]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a72      	ldr	r2, [pc, #456]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xd8>
 8002270:	4b6f      	ldr	r3, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6e      	ldr	r2, [pc, #440]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b6c      	ldr	r3, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6b      	ldr	r2, [pc, #428]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff f892 	bl	80013b8 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff f88e 	bl	80013b8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e21f      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xe8>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff f87e 	bl	80013b8 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff f87a 	bl	80013b8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e20b      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b57      	ldr	r3, [pc, #348]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x110>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d069      	beq.n	80023c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ee:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022fa:	4b4d      	ldr	r3, [pc, #308]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x190>
 8002306:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x17a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1df      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	493d      	ldr	r1, [pc, #244]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e040      	b.n	80023c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d023      	beq.n	8002390 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b39      	ldr	r3, [pc, #228]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a38      	ldr	r2, [pc, #224]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7ff f830 	bl	80013b8 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235c:	f7ff f82c 	bl	80013b8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1bd      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4929      	ldr	r1, [pc, #164]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
 800238e:	e018      	b.n	80023c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a26      	ldr	r2, [pc, #152]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7ff f80c 	bl	80013b8 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a4:	f7ff f808 	bl	80013b8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e199      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d038      	beq.n	8002440 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d019      	beq.n	800240a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d6:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80023d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7fe ffe9 	bl	80013b8 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ea:	f7fe ffe5 	bl	80013b8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e176      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x23a>
 8002408:	e01a      	b.n	8002440 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 800240c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240e:	4a08      	ldr	r2, [pc, #32]	; (8002430 <HAL_RCC_OscConfig+0x280>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002416:	f7fe ffcf 	bl	80013b8 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	e00a      	b.n	8002434 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241e:	f7fe ffcb 	bl	80013b8 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d903      	bls.n	8002434 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e15c      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
 8002430:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b91      	ldr	r3, [pc, #580]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ee      	bne.n	800241e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a4 	beq.w	8002596 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244e:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a87      	ldr	r2, [pc, #540]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002472:	2301      	movs	r3, #1
 8002474:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d118      	bne.n	80024b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7e      	ldr	r2, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe ff93 	bl	80013b8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002496:	f7fe ff8f 	bl	80013b8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b64      	cmp	r3, #100	; 0x64
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e120      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a8:	4b75      	ldr	r3, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x4d0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x31a>
 80024bc:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	6713      	str	r3, [r2, #112]	; 0x70
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_OscConfig+0x376>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x33c>
 80024d2:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a69      	ldr	r2, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a66      	ldr	r2, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ea:	e01c      	b.n	8002526 <HAL_RCC_OscConfig+0x376>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b05      	cmp	r3, #5
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x35e>
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a60      	ldr	r2, [pc, #384]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002500:	4b5e      	ldr	r3, [pc, #376]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a5d      	ldr	r2, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0x376>
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a5a      	ldr	r2, [pc, #360]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
 800251a:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a57      	ldr	r2, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d015      	beq.n	800255a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252e:	f7fe ff43 	bl	80013b8 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002536:	f7fe ff3f 	bl	80013b8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f241 3288 	movw	r2, #5000	; 0x1388
 8002544:	4293      	cmp	r3, r2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0ce      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ee      	beq.n	8002536 <HAL_RCC_OscConfig+0x386>
 8002558:	e014      	b.n	8002584 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255a:	f7fe ff2d 	bl	80013b8 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe ff29 	bl	80013b8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0b8      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	4b40      	ldr	r3, [pc, #256]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002584:	7dfb      	ldrb	r3, [r7, #23]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b3c      	ldr	r3, [pc, #240]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a3b      	ldr	r2, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80a4 	beq.w	80026e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a0:	4b36      	ldr	r3, [pc, #216]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d06b      	beq.n	8002684 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d149      	bne.n	8002648 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b4:	4b31      	ldr	r3, [pc, #196]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a30      	ldr	r2, [pc, #192]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fefa 	bl	80013b8 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fef6 	bl	80013b8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e087      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	3b01      	subs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	4313      	orrs	r3, r2
 800260c:	4a1b      	ldr	r2, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800260e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002612:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800261a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe feca 	bl	80013b8 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fec6 	bl	80013b8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e057      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x478>
 8002646:	e04f      	b.n	80026e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0b      	ldr	r2, [pc, #44]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 800264e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe feb0 	bl	80013b8 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe feac 	bl	80013b8 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e03d      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCC_OscConfig+0x4cc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x4ac>
 800267a:	e035      	b.n	80026e8 <HAL_RCC_OscConfig+0x538>
 800267c:	40023800 	.word	0x40023800
 8002680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x544>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d028      	beq.n	80026e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d121      	bne.n	80026e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d11a      	bne.n	80026e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026b4:	4013      	ands	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026bc:	4293      	cmp	r3, r2
 80026be:	d111      	bne.n	80026e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800

080026f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d0      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 020f 	bic.w	r2, r3, #15
 8002726:	4965      	ldr	r1, [pc, #404]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002762:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800277a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d040      	beq.n	800281c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e073      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4936      	ldr	r1, [pc, #216]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fde4 	bl	80013b8 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fde0 	bl	80013b8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e053      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d210      	bcs.n	800284c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 020f 	bic.w	r2, r3, #15
 8002832:	4922      	ldr	r1, [pc, #136]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4602      	mov	r2, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	490a      	ldr	r1, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1cc>)
 800289c:	5ccb      	ldrb	r3, [r1, r3]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1d0>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1d4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fd40 	bl	8001330 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023c00 	.word	0x40023c00
 80028c0:	40023800 	.word	0x40023800
 80028c4:	0800ac28 	.word	0x0800ac28
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000004 	.word	0x20000004

080028d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d4:	b090      	sub	sp, #64	; 0x40
 80028d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
 80028dc:	2300      	movs	r3, #0
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e0:	2300      	movs	r3, #0
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e8:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d00d      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x40>
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	f200 80a1 	bhi.w	8002a3c <HAL_RCC_GetSysClockFreq+0x16c>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x34>
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x3a>
 8002902:	e09b      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x184>)
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002908:	e09b      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800290a:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x188>)
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800290e:	e098      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002910:	4b4f      	ldr	r3, [pc, #316]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800291a:	4b4d      	ldr	r3, [pc, #308]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x180>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d028      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002926:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	099b      	lsrs	r3, r3, #6
 800292c:	2200      	movs	r2, #0
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	627a      	str	r2, [r7, #36]	; 0x24
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002938:	2100      	movs	r1, #0
 800293a:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x188>)
 800293c:	fb03 f201 	mul.w	r2, r3, r1
 8002940:	2300      	movs	r3, #0
 8002942:	fb00 f303 	mul.w	r3, r0, r3
 8002946:	4413      	add	r3, r2
 8002948:	4a43      	ldr	r2, [pc, #268]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x188>)
 800294a:	fba0 1202 	umull	r1, r2, r0, r2
 800294e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002950:	460a      	mov	r2, r1
 8002952:	62ba      	str	r2, [r7, #40]	; 0x28
 8002954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002956:	4413      	add	r3, r2
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295c:	2200      	movs	r2, #0
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	61fa      	str	r2, [r7, #28]
 8002962:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002966:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800296a:	f7fd fca9 	bl	80002c0 <__aeabi_uldivmod>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4613      	mov	r3, r2
 8002974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002976:	e053      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002978:	4b35      	ldr	r3, [pc, #212]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x180>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	2200      	movs	r2, #0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	617a      	str	r2, [r7, #20]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800298a:	f04f 0b00 	mov.w	fp, #0
 800298e:	4652      	mov	r2, sl
 8002990:	465b      	mov	r3, fp
 8002992:	f04f 0000 	mov.w	r0, #0
 8002996:	f04f 0100 	mov.w	r1, #0
 800299a:	0159      	lsls	r1, r3, #5
 800299c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a0:	0150      	lsls	r0, r2, #5
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	ebb2 080a 	subs.w	r8, r2, sl
 80029aa:	eb63 090b 	sbc.w	r9, r3, fp
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029c2:	ebb2 0408 	subs.w	r4, r2, r8
 80029c6:	eb63 0509 	sbc.w	r5, r3, r9
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	00eb      	lsls	r3, r5, #3
 80029d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d8:	00e2      	lsls	r2, r4, #3
 80029da:	4614      	mov	r4, r2
 80029dc:	461d      	mov	r5, r3
 80029de:	eb14 030a 	adds.w	r3, r4, sl
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	eb45 030b 	adc.w	r3, r5, fp
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029f6:	4629      	mov	r1, r5
 80029f8:	028b      	lsls	r3, r1, #10
 80029fa:	4621      	mov	r1, r4
 80029fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a00:	4621      	mov	r1, r4
 8002a02:	028a      	lsls	r2, r1, #10
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	60fa      	str	r2, [r7, #12]
 8002a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a14:	f7fd fc54 	bl	80002c0 <__aeabi_uldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002a30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a3a:	e002      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3740      	adds	r7, #64	; 0x40
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	00f42400 	.word	0x00f42400
 8002a58:	017d7840 	.word	0x017d7840

08002a5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000000 	.word	0x20000000

08002a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a78:	f7ff fff0 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	0a9b      	lsrs	r3, r3, #10
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4903      	ldr	r1, [pc, #12]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8a:	5ccb      	ldrb	r3, [r1, r3]
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40023800 	.word	0x40023800
 8002a98:	0800ac38 	.word	0x0800ac38

08002a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa0:	f7ff ffdc 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0b5b      	lsrs	r3, r3, #13
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	0800ac38 	.word	0x0800ac38

08002ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d012      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002aec:	4b69      	ldr	r3, [pc, #420]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a68      	ldr	r2, [pc, #416]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002af6:	6093      	str	r3, [r2, #8]
 8002af8:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b00:	4964      	ldr	r1, [pc, #400]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d017      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b1e:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	4959      	ldr	r1, [pc, #356]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b5a:	4b4e      	ldr	r3, [pc, #312]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	494a      	ldr	r1, [pc, #296]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b78:	d101      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 808b 	beq.w	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	4a39      	ldr	r2, [pc, #228]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb4:	4b37      	ldr	r3, [pc, #220]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bc0:	4b35      	ldr	r3, [pc, #212]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bcc:	f7fe fbf4 	bl	80013b8 <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7fe fbf0 	bl	80013b8 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	; 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e357      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bf2:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d035      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d02e      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c10:	4b20      	ldr	r3, [pc, #128]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a1a      	ldr	r2, [pc, #104]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c32:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d114      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fbb8 	bl	80013b8 <HAL_GetTick>
 8002c48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fbb4 	bl	80013b8 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e319      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c62:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0ee      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7a:	d111      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	4901      	ldr	r1, [pc, #4]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
 8002c92:	e00b      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	0ffffcff 	.word	0x0ffffcff
 8002ca0:	4baa      	ldr	r3, [pc, #680]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4aa9      	ldr	r2, [pc, #676]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002caa:	6093      	str	r3, [r2, #8]
 8002cac:	4ba7      	ldr	r3, [pc, #668]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	49a4      	ldr	r1, [pc, #656]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cca:	4ba0      	ldr	r3, [pc, #640]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd0:	4a9e      	ldr	r2, [pc, #632]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cda:	4b9c      	ldr	r3, [pc, #624]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	4999      	ldr	r1, [pc, #612]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf8:	4b94      	ldr	r3, [pc, #592]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d06:	4991      	ldr	r1, [pc, #580]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d1a:	4b8c      	ldr	r3, [pc, #560]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d28:	4988      	ldr	r1, [pc, #544]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d3c:	4b83      	ldr	r3, [pc, #524]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4a:	4980      	ldr	r1, [pc, #512]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d5e:	4b7b      	ldr	r3, [pc, #492]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4977      	ldr	r1, [pc, #476]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d80:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	496f      	ldr	r1, [pc, #444]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da2:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f023 020c 	bic.w	r2, r3, #12
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	4966      	ldr	r1, [pc, #408]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc4:	4b61      	ldr	r3, [pc, #388]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	495e      	ldr	r1, [pc, #376]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002de6:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df4:	4955      	ldr	r1, [pc, #340]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e08:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	494d      	ldr	r1, [pc, #308]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e2a:	4b48      	ldr	r3, [pc, #288]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	4944      	ldr	r1, [pc, #272]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e4c:	4b3f      	ldr	r3, [pc, #252]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	493c      	ldr	r1, [pc, #240]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7c:	4933      	ldr	r1, [pc, #204]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9e:	492b      	ldr	r1, [pc, #172]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d011      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec0:	4922      	ldr	r1, [pc, #136]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ef2:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	4912      	ldr	r1, [pc, #72]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f24:	4909      	ldr	r1, [pc, #36]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d006      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80d9 	beq.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f40:	4b02      	ldr	r3, [pc, #8]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a01      	ldr	r2, [pc, #4]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f4a:	e001      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f52:	f7fe fa31 	bl	80013b8 <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f5a:	f7fe fa2d 	bl	80013b8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b64      	cmp	r3, #100	; 0x64
 8002f66:	d901      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e194      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f6c:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d021      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11d      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f8c:	4b64      	ldr	r3, [pc, #400]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f9a:	4b61      	ldr	r3, [pc, #388]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa0:	0e1b      	lsrs	r3, r3, #24
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	019a      	lsls	r2, r3, #6
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	061b      	lsls	r3, r3, #24
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	071b      	lsls	r3, r3, #28
 8002fc0:	4957      	ldr	r1, [pc, #348]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d02e      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff2:	d129      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ff4:	4b4a      	ldr	r3, [pc, #296]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003008:	0f1b      	lsrs	r3, r3, #28
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	019a      	lsls	r2, r3, #6
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	071b      	lsls	r3, r3, #28
 8003028:	493d      	ldr	r1, [pc, #244]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003030:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003036:	f023 021f 	bic.w	r2, r3, #31
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	3b01      	subs	r3, #1
 8003040:	4937      	ldr	r1, [pc, #220]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01d      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	0e1b      	lsrs	r3, r3, #24
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003062:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003068:	0f1b      	lsrs	r3, r3, #28
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	019a      	lsls	r2, r3, #6
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	431a      	orrs	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	431a      	orrs	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	071b      	lsls	r3, r3, #28
 8003088:	4925      	ldr	r1, [pc, #148]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d011      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	019a      	lsls	r2, r3, #6
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	071b      	lsls	r3, r3, #28
 80030b8:	4919      	ldr	r1, [pc, #100]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030cc:	f7fe f974 	bl	80013b8 <HAL_GetTick>
 80030d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030d4:	f7fe f970 	bl	80013b8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	; 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0d7      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0f0      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 80cd 	bne.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fe f957 	bl	80013b8 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800310c:	e00a      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800310e:	f7fe f953 	bl	80013b8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b64      	cmp	r3, #100	; 0x64
 800311a:	d903      	bls.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0ba      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003120:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800312c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003130:	d0ed      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02e      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12a      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800315a:	4b51      	ldr	r3, [pc, #324]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003168:	4b4d      	ldr	r3, [pc, #308]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	0f1b      	lsrs	r3, r3, #28
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	019a      	lsls	r2, r3, #6
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	061b      	lsls	r3, r3, #24
 8003188:	431a      	orrs	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	071b      	lsls	r3, r3, #28
 800318e:	4944      	ldr	r1, [pc, #272]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003196:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	493d      	ldr	r1, [pc, #244]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d022      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c4:	d11d      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031c6:	4b36      	ldr	r3, [pc, #216]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031cc:	0e1b      	lsrs	r3, r3, #24
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	0f1b      	lsrs	r3, r3, #28
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	019a      	lsls	r2, r3, #6
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	431a      	orrs	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	071b      	lsls	r3, r3, #28
 80031fa:	4929      	ldr	r1, [pc, #164]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d028      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	0e1b      	lsrs	r3, r3, #24
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800321c:	4b20      	ldr	r3, [pc, #128]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	019a      	lsls	r2, r3, #6
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	431a      	orrs	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	061b      	lsls	r3, r3, #24
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	071b      	lsls	r3, r3, #28
 8003242:	4917      	ldr	r1, [pc, #92]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800324c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003250:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	4911      	ldr	r1, [pc, #68]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fe f8a4 	bl	80013b8 <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003274:	f7fe f8a0 	bl	80013b8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e007      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800328e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003292:	d1ef      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800

080032a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e022      	b.n	80032fc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fd fc41 	bl	8000b50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2203      	movs	r2, #3
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f814 	bl	8003304 <HAL_SD_InitCard>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00a      	b.n	80032fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b08e      	sub	sp, #56	; 0x38
 8003308:	af04      	add	r7, sp, #16
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003320:	2376      	movs	r3, #118	; 0x76
 8003322:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681d      	ldr	r5, [r3, #0]
 8003328:	466c      	mov	r4, sp
 800332a:	f107 0314 	add.w	r3, r7, #20
 800332e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003332:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333c:	4628      	mov	r0, r5
 800333e:	f002 fcc3 	bl	8005cc8 <SDMMC_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e059      	b.n	8003408 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003362:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 fcf7 	bl	8005d5c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800337c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800337e:	2002      	movs	r0, #2
 8003380:	f7fe f826 	bl	80013d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fff3 	bl	8004370 <SD_PowerON>
 800338a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e02e      	b.n	8003408 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 ff12 	bl	80041d4 <SD_InitCard>
 80033b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00b      	beq.n	80033d0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e01b      	b.n	8003408 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033d8:	4618      	mov	r0, r3
 80033da:	f002 fd51 	bl	8005e80 <SDMMC_CmdBlockLength>
 80033de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00f      	beq.n	8003406 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_SD_InitCard+0x10c>)
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3728      	adds	r7, #40	; 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bdb0      	pop	{r4, r5, r7, pc}
 8003410:	004005ff 	.word	0x004005ff

08003414 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08c      	sub	sp, #48	; 0x30
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0c3      	b.n	80035c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 80bc 	bne.w	80035c2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	441a      	add	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	429a      	cmp	r2, r3
 800345c:	d907      	bls.n	800346e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0aa      	b.n	80035c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2203      	movs	r2, #3
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2200      	movs	r2, #0
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800348c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a4e      	ldr	r2, [pc, #312]	; (80035cc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4a4d      	ldr	r2, [pc, #308]	; (80035d0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800349c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	2200      	movs	r2, #0
 80034a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3380      	adds	r3, #128	; 0x80
 80034d4:	4619      	mov	r1, r3
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	025b      	lsls	r3, r3, #9
 80034dc:	089b      	lsrs	r3, r3, #2
 80034de:	f7fe f95b 	bl	8001798 <HAL_DMA_Start_IT>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a35      	ldr	r2, [pc, #212]	; (80035d4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e055      	b.n	80035c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0208 	orr.w	r2, r2, #8
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	2b01      	cmp	r3, #1
 800352e:	d002      	beq.n	8003536 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	025b      	lsls	r3, r3, #9
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
 800353a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	025b      	lsls	r3, r3, #9
 8003540:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003542:	2390      	movs	r3, #144	; 0x90
 8003544:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003546:	2302      	movs	r3, #2
 8003548:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800354a:	2300      	movs	r3, #0
 800354c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800354e:	2301      	movs	r3, #1
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f107 0210 	add.w	r2, r7, #16
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f002 fc63 	bl	8005e28 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d90a      	bls.n	800357e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2282      	movs	r2, #130	; 0x82
 800356c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003574:	4618      	mov	r0, r3
 8003576:	f002 fcc7 	bl	8005f08 <SDMMC_CmdReadMultiBlock>
 800357a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800357c:	e009      	b.n	8003592 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2281      	movs	r2, #129	; 0x81
 8003582:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800358a:	4618      	mov	r0, r3
 800358c:	f002 fc9a 	bl	8005ec4 <SDMMC_CmdReadSingleBlock>
 8003590:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d012      	beq.n	80035be <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e002      	b.n	80035c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e000      	b.n	80035c4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3730      	adds	r7, #48	; 0x30
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	08003fe3 	.word	0x08003fe3
 80035d0:	08004055 	.word	0x08004055
 80035d4:	004005ff 	.word	0x004005ff

080035d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d107      	bne.n	8003600 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0c6      	b.n	800378e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	f040 80bf 	bne.w	800378c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	441a      	add	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361e:	429a      	cmp	r2, r3
 8003620:	d907      	bls.n	8003632 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0ad      	b.n	800378e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2203      	movs	r2, #3
 8003636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 021a 	orr.w	r2, r2, #26
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	4a50      	ldr	r2, [pc, #320]	; (8003798 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	4a4f      	ldr	r2, [pc, #316]	; (800379c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003660:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	2200      	movs	r2, #0
 8003668:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	2b01      	cmp	r3, #1
 8003670:	d002      	beq.n	8003678 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	025b      	lsls	r3, r3, #9
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d90a      	bls.n	8003694 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	22a0      	movs	r2, #160	; 0xa0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368a:	4618      	mov	r0, r3
 800368c:	f002 fc80 	bl	8005f90 <SDMMC_CmdWriteMultiBlock>
 8003690:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003692:	e009      	b.n	80036a8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2290      	movs	r2, #144	; 0x90
 8003698:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036a0:	4618      	mov	r0, r3
 80036a2:	f002 fc53 	bl	8005f4c <SDMMC_CmdWriteSingleBlock>
 80036a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3b      	ldr	r2, [pc, #236]	; (80037a0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80036b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e05c      	b.n	800378e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0208 	orr.w	r2, r2, #8
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	2240      	movs	r2, #64	; 0x40
 80036ea:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3380      	adds	r3, #128	; 0x80
 8003714:	461a      	mov	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	025b      	lsls	r3, r3, #9
 800371a:	089b      	lsrs	r3, r3, #2
 800371c:	f7fe f83c 	bl	8001798 <HAL_DMA_Start_IT>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01a      	beq.n	800375c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 021a 	bic.w	r2, r2, #26
 8003734:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003742:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e018      	b.n	800378e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
 8003760:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	025b      	lsls	r3, r3, #9
 8003766:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003768:	2390      	movs	r3, #144	; 0x90
 800376a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800376c:	2300      	movs	r3, #0
 800376e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003770:	2300      	movs	r3, #0
 8003772:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003774:	2301      	movs	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f107 0210 	add.w	r2, r7, #16
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f002 fb50 	bl	8005e28 <SDMMC_ConfigData>

      return HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	e000      	b.n	800378e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3730      	adds	r7, #48	; 0x30
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	08003fb9 	.word	0x08003fb9
 800379c:	08004055 	.word	0x08004055
 80037a0:	004005ff 	.word	0x004005ff

080037a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_SD_IRQHandler+0x2e>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 ffef 	bl	80047ae <SD_Read_IT>
 80037d0:	e15a      	b.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 808d 	beq.w	80038fc <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b9a      	ldr	r3, [pc, #616]	; (8003a60 <HAL_SD_IRQHandler+0x2bc>)
 80037f8:	400b      	ands	r3, r1
 80037fa:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d039      	beq.n	800388a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_SD_IRQHandler+0x86>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d011      	beq.n	800384e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f002 fbd0 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8003834:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f921 	bl	8003a90 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f240 523a 	movw	r2, #1338	; 0x53a
 8003856:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <HAL_SD_IRQHandler+0xd6>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f003 f840 	bl	8006900 <HAL_SD_RxCpltCallback>
 8003880:	e102      	b.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f003 f832 	bl	80068ec <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003888:	e0fe      	b.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80f9 	beq.w	8003a88 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d011      	beq.n	80038c4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f002 fb95 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 80038aa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8e6 	bl	8003a90 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 80dc 	bne.w	8003a88 <HAL_SD_IRQHandler+0x2e4>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 80d6 	bne.w	8003a88 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0208 	bic.w	r2, r2, #8
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f002 fff9 	bl	80068ec <HAL_SD_TxCpltCallback>
}
 80038fa:	e0c5      	b.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_SD_IRQHandler+0x178>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 ff9b 	bl	8004850 <SD_Write_IT>
 800391a:	e0b5      	b.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003922:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80ae 	beq.w	8003a88 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	f043 0208 	orr.w	r2, r3, #8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	f043 0210 	orr.w	r2, r3, #16
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f240 523a 	movw	r2, #1338	; 0x53a
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f002 fb0e 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f857 	bl	8003a90 <HAL_SD_ErrorCallback>
}
 80039e2:	e051      	b.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d04c      	beq.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d104      	bne.n	8003a02 <HAL_SD_IRQHandler+0x25e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d011      	beq.n	8003a26 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_SD_IRQHandler+0x2c0>)
 8003a08:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd ff22 	bl	8001858 <HAL_DMA_Abort_IT>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d036      	beq.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fb6a 	bl	80040f8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a24:	e030      	b.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d104      	bne.n	8003a3a <HAL_SD_IRQHandler+0x296>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d018      	beq.n	8003a6c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <HAL_SD_IRQHandler+0x2c4>)
 8003a40:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd ff06 	bl	8001858 <HAL_DMA_Abort_IT>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01a      	beq.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fb85 	bl	8004166 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a5c:	e014      	b.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
 8003a5e:	bf00      	nop
 8003a60:	ffff3ec5 	.word	0xffff3ec5
 8003a64:	080040f9 	.word	0x080040f9
 8003a68:	08004167 	.word	0x08004167
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f002 ff29 	bl	80068d8 <HAL_SD_AbortCallback>
}
 8003a86:	e7ff      	b.n	8003a88 <HAL_SD_IRQHandler+0x2e4>
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab2:	0f9b      	lsrs	r3, r3, #30
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003abe:	0e9b      	lsrs	r3, r3, #26
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad0:	0e1b      	lsrs	r3, r3, #24
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b04:	0d1b      	lsrs	r3, r3, #20
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b22:	0bdb      	lsrs	r3, r3, #15
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b34:	0b9b      	lsrs	r3, r3, #14
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b46:	0b5b      	lsrs	r3, r3, #13
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b58:	0b1b      	lsrs	r3, r3, #12
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d163      	bne.n	8003c3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b78:	009a      	lsls	r2, r3, #2
 8003b7a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b7e:	4013      	ands	r3, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b84:	0f92      	lsrs	r2, r2, #30
 8003b86:	431a      	orrs	r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b90:	0edb      	lsrs	r3, r3, #27
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba2:	0e1b      	lsrs	r3, r3, #24
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb4:	0d5b      	lsrs	r3, r3, #21
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc6:	0c9b      	lsrs	r3, r3, #18
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd8:	0bdb      	lsrs	r3, r3, #15
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	7e1b      	ldrb	r3, [r3, #24]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c06:	fb03 f202 	mul.w	r2, r3, r2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	7a1b      	ldrb	r3, [r3, #8]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	2201      	movs	r2, #1
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c28:	0a52      	lsrs	r2, r2, #9
 8003c2a:	fb03 f202 	mul.w	r2, r3, r2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c38:	661a      	str	r2, [r3, #96]	; 0x60
 8003c3a:	e031      	b.n	8003ca0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d11d      	bne.n	8003c80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c52:	0c1b      	lsrs	r3, r3, #16
 8003c54:	431a      	orrs	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	029a      	lsls	r2, r3, #10
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c74:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60
 8003c7e:	e00f      	b.n	8003ca0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <HAL_SD_GetCardCSD+0x344>)
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e09d      	b.n	8003ddc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca4:	0b9b      	lsrs	r3, r3, #14
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb6:	09db      	lsrs	r3, r3, #7
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	0fdb      	lsrs	r3, r3, #31
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	0f5b      	lsrs	r3, r3, #29
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	0e9b      	lsrs	r3, r3, #26
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	0d9b      	lsrs	r3, r3, #22
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	0d5b      	lsrs	r3, r3, #21
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	0c1b      	lsrs	r3, r3, #16
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	0bdb      	lsrs	r3, r3, #15
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	0b9b      	lsrs	r3, r3, #14
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	0b5b      	lsrs	r3, r3, #13
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	0b1b      	lsrs	r3, r3, #12
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	0a9b      	lsrs	r3, r3, #10
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	004005ff 	.word	0x004005ff

08003dec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003e44:	b5b0      	push	{r4, r5, r7, lr}
 8003e46:	b08e      	sub	sp, #56	; 0x38
 8003e48:	af04      	add	r7, sp, #16
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2203      	movs	r2, #3
 8003e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d02e      	beq.n	8003ec2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	d106      	bne.n	8003e7a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
 8003e78:	e029      	b.n	8003ece <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e80:	d10a      	bne.n	8003e98 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fb2a 	bl	80044dc <SD_WideBus_Enable>
 8003e88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
 8003e96:	e01a      	b.n	8003ece <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fb67 	bl	8004572 <SD_WideBus_Disable>
 8003ea4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8003eb2:	e00c      	b.n	8003ece <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec0:	e005      	b.n	8003ece <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003eec:	e01f      	b.n	8003f2e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681d      	ldr	r5, [r3, #0]
 8003f14:	466c      	mov	r4, sp
 8003f16:	f107 0314 	add.w	r3, r7, #20
 8003f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f001 fecd 	bl	8005cc8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 ffa2 	bl	8005e80 <SDMMC_CmdBlockLength>
 8003f3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00c      	beq.n	8003f5e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3728      	adds	r7, #40	; 0x28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bdb0      	pop	{r4, r5, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	004005ff 	.word	0x004005ff

08003f78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003f84:	f107 030c 	add.w	r3, r7, #12
 8003f88:	4619      	mov	r1, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fa7e 	bl	800448c <SD_SendStatus>
 8003f90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	0a5b      	lsrs	r3, r3, #9
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003fae:	693b      	ldr	r3, [r7, #16]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff4:	2b82      	cmp	r3, #130	; 0x82
 8003ff6:	d111      	bne.n	800401c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 ffe9 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 8004002:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7ff fd3a 	bl	8003a90 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0208 	bic.w	r2, r2, #8
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f240 523a 	movw	r2, #1338	; 0x53a
 8004034:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f002 fc5b 	bl	8006900 <HAL_SD_RxCpltCallback>
#endif
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fda4 	bl	8001bb0 <HAL_DMA_GetError>
 8004068:	4603      	mov	r3, r0
 800406a:	2b02      	cmp	r3, #2
 800406c:	d03e      	beq.n	80040ec <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d002      	beq.n	800408a <SD_DMAError+0x36>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d12d      	bne.n	80040e6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <SD_DMAError+0xa0>)
 8004090:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80040a0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80040ae:	6978      	ldr	r0, [r7, #20]
 80040b0:	f7ff ff62 	bl	8003f78 <HAL_SD_GetCardState>
 80040b4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b06      	cmp	r3, #6
 80040ba:	d002      	beq.n	80040c2 <SD_DMAError+0x6e>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d10a      	bne.n	80040d8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 ff84 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 80040cc:	4602      	mov	r2, r0
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	431a      	orrs	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80040e6:	6978      	ldr	r0, [r7, #20]
 80040e8:	f7ff fcd2 	bl	8003a90 <HAL_SD_ErrorCallback>
#endif
  }
}
 80040ec:	bf00      	nop
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	004005ff 	.word	0x004005ff

080040f8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f240 523a 	movw	r2, #1338	; 0x53a
 800410e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7ff ff31 	bl	8003f78 <HAL_SD_GetCardState>
 8004116:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b06      	cmp	r3, #6
 800412a:	d002      	beq.n	8004132 <SD_DMATxAbort+0x3a>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b05      	cmp	r3, #5
 8004130:	d10a      	bne.n	8004148 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f001 ff4c 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	431a      	orrs	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f002 fbc1 	bl	80068d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004156:	e002      	b.n	800415e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fc99 	bl	8003a90 <HAL_SD_ErrorCallback>
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f240 523a 	movw	r2, #1338	; 0x53a
 800417c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff fefa 	bl	8003f78 <HAL_SD_GetCardState>
 8004184:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b06      	cmp	r3, #6
 8004198:	d002      	beq.n	80041a0 <SD_DMARxAbort+0x3a>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b05      	cmp	r3, #5
 800419e:	d10a      	bne.n	80041b6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 ff15 	bl	8005fd4 <SDMMC_CmdStopTransfer>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f002 fb8a 	bl	80068d8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80041c4:	e002      	b.n	80041cc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f7ff fc62 	bl	8003a90 <HAL_SD_ErrorCallback>
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b094      	sub	sp, #80	; 0x50
 80041d8:	af04      	add	r7, sp, #16
 80041da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80041dc:	2301      	movs	r3, #1
 80041de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fdc7 	bl	8005d78 <SDMMC_GetPowerState>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d102      	bne.n	80041f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041f4:	e0b8      	b.n	8004368 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d02f      	beq.n	800425e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fff1 	bl	80061ea <SDMMC_CmdSendCID>
 8004208:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800420a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <SD_InitCard+0x40>
    {
      return errorstate;
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	e0a9      	b.n	8004368 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f001 fdf1 	bl	8005e02 <SDMMC_GetResponse>
 8004220:	4602      	mov	r2, r0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2104      	movs	r1, #4
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fde8 	bl	8005e02 <SDMMC_GetResponse>
 8004232:	4602      	mov	r2, r0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2108      	movs	r1, #8
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fddf 	bl	8005e02 <SDMMC_GetResponse>
 8004244:	4602      	mov	r2, r0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	210c      	movs	r1, #12
 8004250:	4618      	mov	r0, r3
 8004252:	f001 fdd6 	bl	8005e02 <SDMMC_GetResponse>
 8004256:	4602      	mov	r2, r0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	2b03      	cmp	r3, #3
 8004264:	d00d      	beq.n	8004282 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f107 020e 	add.w	r2, r7, #14
 800426e:	4611      	mov	r1, r2
 8004270:	4618      	mov	r0, r3
 8004272:	f001 fff7 	bl	8006264 <SDMMC_CmdSetRelAdd>
 8004276:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <SD_InitCard+0xae>
    {
      return errorstate;
 800427e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004280:	e072      	b.n	8004368 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	2b03      	cmp	r3, #3
 8004288:	d036      	beq.n	80042f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800428a:	89fb      	ldrh	r3, [r7, #14]
 800428c:	461a      	mov	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f001 ffc1 	bl	8006226 <SDMMC_CmdSendCSD>
 80042a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80042ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ae:	e05b      	b.n	8004368 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2100      	movs	r1, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 fda3 	bl	8005e02 <SDMMC_GetResponse>
 80042bc:	4602      	mov	r2, r0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2104      	movs	r1, #4
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fd9a 	bl	8005e02 <SDMMC_GetResponse>
 80042ce:	4602      	mov	r2, r0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2108      	movs	r1, #8
 80042da:	4618      	mov	r0, r3
 80042dc:	f001 fd91 	bl	8005e02 <SDMMC_GetResponse>
 80042e0:	4602      	mov	r2, r0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	210c      	movs	r1, #12
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 fd88 	bl	8005e02 <SDMMC_GetResponse>
 80042f2:	4602      	mov	r2, r0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2104      	movs	r1, #4
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 fd7f 	bl	8005e02 <SDMMC_GetResponse>
 8004304:	4603      	mov	r3, r0
 8004306:	0d1a      	lsrs	r2, r3, #20
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800430c:	f107 0310 	add.w	r3, r7, #16
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff fbc6 	bl	8003aa4 <HAL_SD_GetCardCSD>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800431e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004322:	e021      	b.n	8004368 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	2200      	movs	r2, #0
 8004330:	461c      	mov	r4, r3
 8004332:	4615      	mov	r5, r2
 8004334:	4622      	mov	r2, r4
 8004336:	462b      	mov	r3, r5
 8004338:	4608      	mov	r0, r1
 800433a:	f001 fe6d 	bl	8006018 <SDMMC_CmdSelDesel>
 800433e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <SD_InitCard+0x176>
  {
    return errorstate;
 8004346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004348:	e00e      	b.n	8004368 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681d      	ldr	r5, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	466c      	mov	r4, sp
 8004352:	f103 0210 	add.w	r2, r3, #16
 8004356:	ca07      	ldmia	r2, {r0, r1, r2}
 8004358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800435c:	3304      	adds	r3, #4
 800435e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004360:	4628      	mov	r0, r5
 8004362:	f001 fcb1 	bl	8005cc8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3740      	adds	r7, #64	; 0x40
 800436c:	46bd      	mov	sp, r7
 800436e:	bdb0      	pop	{r4, r5, r7, pc}

08004370 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	2300      	movs	r3, #0
 8004382:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f001 fe68 	bl	800605e <SDMMC_CmdGoIdleState>
 800438e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	e072      	b.n	8004480 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 fe7b 	bl	800609a <SDMMC_CmdOperCond>
 80043a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f001 fe51 	bl	800605e <SDMMC_CmdGoIdleState>
 80043bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <SD_PowerON+0x5e>
    {
      return errorstate;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	e05b      	b.n	8004480 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d137      	bne.n	8004446 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 fe7b 	bl	80060d8 <SDMMC_CmdAppCommand>
 80043e2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d02d      	beq.n	8004446 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043ee:	e047      	b.n	8004480 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 fe6e 	bl	80060d8 <SDMMC_CmdAppCommand>
 80043fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <SD_PowerON+0x98>
    {
      return errorstate;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	e03b      	b.n	8004480 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	491e      	ldr	r1, [pc, #120]	; (8004488 <SD_PowerON+0x118>)
 800440e:	4618      	mov	r0, r3
 8004410:	f001 fe84 	bl	800611c <SDMMC_CmdAppOperCommand>
 8004414:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800441c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004420:	e02e      	b.n	8004480 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f001 fcea 	bl	8005e02 <SDMMC_GetResponse>
 800442e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	0fdb      	lsrs	r3, r3, #31
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <SD_PowerON+0xcc>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <SD_PowerON+0xce>
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]

    count++;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	3301      	adds	r3, #1
 8004444:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800444c:	4293      	cmp	r3, r2
 800444e:	d802      	bhi.n	8004456 <SD_PowerON+0xe6>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0cc      	beq.n	80043f0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800445c:	4293      	cmp	r3, r2
 800445e:	d902      	bls.n	8004466 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004464:	e00c      	b.n	8004480 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	645a      	str	r2, [r3, #68]	; 0x44
 8004476:	e002      	b.n	800447e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	c1100000 	.word	0xc1100000

0800448c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800449c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044a0:	e018      	b.n	80044d4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f001 fef9 	bl	80062a6 <SDMMC_CmdSendStatus>
 80044b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	e009      	b.n	80044d4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2100      	movs	r1, #0
 80044c6:	4618      	mov	r0, r3
 80044c8:	f001 fc9b 	bl	8005e02 <SDMMC_GetResponse>
 80044cc:	4602      	mov	r2, r0
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 fc85 	bl	8005e02 <SDMMC_GetResponse>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004502:	d102      	bne.n	800450a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004508:	e02f      	b.n	800456a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800450a:	f107 030c 	add.w	r3, r7, #12
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f879 	bl	8004608 <SD_FindSCR>
 8004516:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	e023      	b.n	800456a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01c      	beq.n	8004566 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	4619      	mov	r1, r3
 8004538:	4610      	mov	r0, r2
 800453a:	f001 fdcd 	bl	80060d8 <SDMMC_CmdAppCommand>
 800453e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	e00f      	b.n	800456a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2102      	movs	r1, #2
 8004550:	4618      	mov	r0, r3
 8004552:	f001 fe07 	bl	8006164 <SDMMC_CmdBusWidth>
 8004556:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	e003      	b.n	800456a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004562:	2300      	movs	r3, #0
 8004564:	e001      	b.n	800456a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004566:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f001 fc3a 	bl	8005e02 <SDMMC_GetResponse>
 800458e:	4603      	mov	r3, r0
 8004590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004598:	d102      	bne.n	80045a0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800459a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800459e:	e02f      	b.n	8004600 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f82e 	bl	8004608 <SD_FindSCR>
 80045ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	e023      	b.n	8004600 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01c      	beq.n	80045fc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f001 fd82 	bl	80060d8 <SDMMC_CmdAppCommand>
 80045d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	e00f      	b.n	8004600 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 fdbc 	bl	8006164 <SDMMC_CmdBusWidth>
 80045ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	e003      	b.n	8004600 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e001      	b.n	8004600 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b08f      	sub	sp, #60	; 0x3c
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004612:	f7fc fed1 	bl	80013b8 <HAL_GetTick>
 8004616:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800461c:	2300      	movs	r3, #0
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2108      	movs	r1, #8
 800462e:	4618      	mov	r0, r3
 8004630:	f001 fc26 	bl	8005e80 <SDMMC_CmdBlockLength>
 8004634:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <SD_FindSCR+0x38>
  {
    return errorstate;
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	e0b2      	b.n	80047a6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f001 fd43 	bl	80060d8 <SDMMC_CmdAppCommand>
 8004652:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <SD_FindSCR+0x56>
  {
    return errorstate;
 800465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465c:	e0a3      	b.n	80047a6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004664:	2308      	movs	r3, #8
 8004666:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004668:	2330      	movs	r3, #48	; 0x30
 800466a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800466c:	2302      	movs	r3, #2
 800466e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004670:	2300      	movs	r3, #0
 8004672:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004674:	2301      	movs	r3, #1
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f107 0210 	add.w	r2, r7, #16
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f001 fbd0 	bl	8005e28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f001 fd8b 	bl	80061a8 <SDMMC_CmdSendSCR>
 8004692:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d02a      	beq.n	80046f0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	e083      	b.n	80047a6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00f      	beq.n	80046cc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6819      	ldr	r1, [r3, #0]
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	f107 0208 	add.w	r2, r7, #8
 80046b8:	18d4      	adds	r4, r2, r3
 80046ba:	4608      	mov	r0, r1
 80046bc:	f001 fb30 	bl	8005d20 <SDMMC_ReadFIFO>
 80046c0:	4603      	mov	r3, r0
 80046c2:	6023      	str	r3, [r4, #0]
      index++;
 80046c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c6:	3301      	adds	r3, #1
 80046c8:	637b      	str	r3, [r7, #52]	; 0x34
 80046ca:	e006      	b.n	80046da <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d012      	beq.n	8004700 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80046da:	f7fc fe6d 	bl	80013b8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d102      	bne.n	80046f0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80046ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046ee:	e05a      	b.n	80047a6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0cf      	beq.n	800469e <SD_FindSCR+0x96>
 80046fe:	e000      	b.n	8004702 <SD_FindSCR+0xfa>
      break;
 8004700:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2208      	movs	r2, #8
 8004716:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004718:	2308      	movs	r3, #8
 800471a:	e044      	b.n	80047a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2202      	movs	r2, #2
 8004730:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004732:	2302      	movs	r3, #2
 8004734:	e037      	b.n	80047a6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2220      	movs	r2, #32
 800474a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800474c:	2320      	movs	r3, #32
 800474e:	e02a      	b.n	80047a6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f240 523a 	movw	r2, #1338	; 0x53a
 8004758:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	061a      	lsls	r2, r3, #24
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004766:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004770:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	0e1b      	lsrs	r3, r3, #24
 8004776:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	601a      	str	r2, [r3, #0]
    scr++;
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	3304      	adds	r3, #4
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	061a      	lsls	r2, r3, #24
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800478e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004798:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	0e1b      	lsrs	r3, r3, #24
 800479e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	373c      	adds	r7, #60	; 0x3c
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd90      	pop	{r4, r7, pc}

080047ae <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b086      	sub	sp, #24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d03f      	beq.n	8004848 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	e033      	b.n	8004836 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 faa4 	bl	8005d20 <SDMMC_ReadFIFO>
 80047d8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3301      	adds	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3b01      	subs	r3, #1
 8004802:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	0c1b      	lsrs	r3, r3, #16
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3301      	adds	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	3b01      	subs	r3, #1
 8004818:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	0e1b      	lsrs	r3, r3, #24
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3b01      	subs	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	3301      	adds	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b07      	cmp	r3, #7
 800483a:	d9c8      	bls.n	80047ce <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004848:	bf00      	nop
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d043      	beq.n	80048f2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e037      	b.n	80048e0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	3b01      	subs	r3, #1
 8004880:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	021a      	lsls	r2, r3, #8
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3301      	adds	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	3b01      	subs	r3, #1
 8004898:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	041a      	lsls	r2, r3, #16
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	061a      	lsls	r2, r3, #24
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f107 0208 	add.w	r2, r7, #8
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fa30 	bl	8005d3a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	3301      	adds	r3, #1
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b07      	cmp	r3, #7
 80048e4:	d9c4      	bls.n	8004870 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e049      	b.n	80049a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fc fc1b 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f000 fa6f 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e049      	b.n	8004a4e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fb78 	bl	80010c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 fa18 	bl	8004e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d122      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d11b      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0202 	mvn.w	r2, #2
 8004a82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f9a1 	bl	8004de0 <HAL_TIM_IC_CaptureCallback>
 8004a9e:	e005      	b.n	8004aac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f993 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f9a4 	bl	8004df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d122      	bne.n	8004b06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d11b      	bne.n	8004b06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0204 	mvn.w	r2, #4
 8004ad6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f977 	bl	8004de0 <HAL_TIM_IC_CaptureCallback>
 8004af2:	e005      	b.n	8004b00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f969 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f97a 	bl	8004df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d122      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d11b      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f06f 0208 	mvn.w	r2, #8
 8004b2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f94d 	bl	8004de0 <HAL_TIM_IC_CaptureCallback>
 8004b46:	e005      	b.n	8004b54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f93f 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f950 	bl	8004df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d122      	bne.n	8004bae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d11b      	bne.n	8004bae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0210 	mvn.w	r2, #16
 8004b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2208      	movs	r2, #8
 8004b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f923 	bl	8004de0 <HAL_TIM_IC_CaptureCallback>
 8004b9a:	e005      	b.n	8004ba8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f915 	bl	8004dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f926 	bl	8004df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d10e      	bne.n	8004bda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0201 	mvn.w	r2, #1
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7fb ff87 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b80      	cmp	r3, #128	; 0x80
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fb6d 	bl	80052e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c14:	d10e      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d107      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fb60 	bl	80052f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d10e      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d107      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8d4 	bl	8004e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d10e      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d107      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0220 	mvn.w	r2, #32
 8004c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb20 	bl	80052cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e088      	b.n	8004dc4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d11b      	bne.n	8004cf8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6819      	ldr	r1, [r3, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f000 f944 	bl	8004f5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 020c 	bic.w	r2, r2, #12
 8004ce2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6999      	ldr	r1, [r3, #24]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	619a      	str	r2, [r3, #24]
 8004cf6:	e060      	b.n	8004dba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d11c      	bne.n	8004d38 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6819      	ldr	r1, [r3, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f000 f999 	bl	8005044 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699a      	ldr	r2, [r3, #24]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6999      	ldr	r1, [r3, #24]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	021a      	lsls	r2, r3, #8
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	619a      	str	r2, [r3, #24]
 8004d36:	e040      	b.n	8004dba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d11b      	bne.n	8004d76 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6819      	ldr	r1, [r3, #0]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f000 f9b6 	bl	80050be <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 020c 	bic.w	r2, r2, #12
 8004d60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69d9      	ldr	r1, [r3, #28]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	61da      	str	r2, [r3, #28]
 8004d74:	e021      	b.n	8004dba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	d11c      	bne.n	8004db6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6818      	ldr	r0, [r3, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6819      	ldr	r1, [r3, #0]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f000 f9d3 	bl	8005136 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69d9      	ldr	r1, [r3, #28]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	021a      	lsls	r2, r3, #8
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	61da      	str	r2, [r3, #28]
 8004db4:	e001      	b.n	8004dba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a40      	ldr	r2, [pc, #256]	; (8004f30 <TIM_Base_SetConfig+0x114>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d00f      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3d      	ldr	r2, [pc, #244]	; (8004f34 <TIM_Base_SetConfig+0x118>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3c      	ldr	r2, [pc, #240]	; (8004f38 <TIM_Base_SetConfig+0x11c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d007      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <TIM_Base_SetConfig+0x120>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3a      	ldr	r2, [pc, #232]	; (8004f40 <TIM_Base_SetConfig+0x124>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d108      	bne.n	8004e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2f      	ldr	r2, [pc, #188]	; (8004f30 <TIM_Base_SetConfig+0x114>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d02b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7c:	d027      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2c      	ldr	r2, [pc, #176]	; (8004f34 <TIM_Base_SetConfig+0x118>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d023      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2b      	ldr	r2, [pc, #172]	; (8004f38 <TIM_Base_SetConfig+0x11c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01f      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <TIM_Base_SetConfig+0x120>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <TIM_Base_SetConfig+0x124>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d017      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a28      	ldr	r2, [pc, #160]	; (8004f44 <TIM_Base_SetConfig+0x128>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a27      	ldr	r2, [pc, #156]	; (8004f48 <TIM_Base_SetConfig+0x12c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <TIM_Base_SetConfig+0x130>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a25      	ldr	r2, [pc, #148]	; (8004f50 <TIM_Base_SetConfig+0x134>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a24      	ldr	r2, [pc, #144]	; (8004f54 <TIM_Base_SetConfig+0x138>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a23      	ldr	r2, [pc, #140]	; (8004f58 <TIM_Base_SetConfig+0x13c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a0a      	ldr	r2, [pc, #40]	; (8004f30 <TIM_Base_SetConfig+0x114>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_Base_SetConfig+0xf8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a0c      	ldr	r2, [pc, #48]	; (8004f40 <TIM_Base_SetConfig+0x124>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d103      	bne.n	8004f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	615a      	str	r2, [r3, #20]
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800
 8004f50:	40001800 	.word	0x40001800
 8004f54:	40001c00 	.word	0x40001c00
 8004f58:	40002000 	.word	0x40002000

08004f5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4a28      	ldr	r2, [pc, #160]	; (8005028 <TIM_TI1_SetConfig+0xcc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01b      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x66>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f90:	d017      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x66>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a25      	ldr	r2, [pc, #148]	; (800502c <TIM_TI1_SetConfig+0xd0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d013      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x66>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	4a24      	ldr	r2, [pc, #144]	; (8005030 <TIM_TI1_SetConfig+0xd4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00f      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x66>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4a23      	ldr	r2, [pc, #140]	; (8005034 <TIM_TI1_SetConfig+0xd8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x66>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <TIM_TI1_SetConfig+0xdc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x66>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a21      	ldr	r2, [pc, #132]	; (800503c <TIM_TI1_SetConfig+0xe0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x66>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a20      	ldr	r2, [pc, #128]	; (8005040 <TIM_TI1_SetConfig+0xe4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <TIM_TI1_SetConfig+0x6a>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <TIM_TI1_SetConfig+0x6c>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e003      	b.n	8004fe6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f023 030a 	bic.w	r3, r3, #10
 8005000:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f003 030a 	and.w	r3, r3, #10
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010000 	.word	0x40010000
 800502c:	40000400 	.word	0x40000400
 8005030:	40000800 	.word	0x40000800
 8005034:	40000c00 	.word	0x40000c00
 8005038:	40010400 	.word	0x40010400
 800503c:	40014000 	.word	0x40014000
 8005040:	40001800 	.word	0x40001800

08005044 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
 8005050:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	f023 0210 	bic.w	r2, r3, #16
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005082:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	031b      	lsls	r3, r3, #12
 8005088:	b29b      	uxth	r3, r3
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005096:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	621a      	str	r2, [r3, #32]
}
 80050b2:	bf00      	nop
 80050b4:	371c      	adds	r7, #28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050be:	b480      	push	{r7}
 80050c0:	b087      	sub	sp, #28
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	b2db      	uxtb	r3, r3
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800510e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005136:	b480      	push	{r7}
 8005138:	b087      	sub	sp, #28
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
 8005142:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005174:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	031b      	lsls	r3, r3, #12
 800517a:	b29b      	uxth	r3, r3
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005188:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e06d      	b.n	80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a30      	ldr	r2, [pc, #192]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d004      	beq.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a2f      	ldr	r2, [pc, #188]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d108      	bne.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005202:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d022      	beq.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d01d      	beq.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d009      	beq.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d10c      	bne.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	4313      	orrs	r3, r2
 8005288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40001800 	.word	0x40001800

080052cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e040      	b.n	800539c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fb ff6c 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2224      	movs	r2, #36	; 0x24
 8005334:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8c0 	bl	80054cc <UART_SetConfig>
 800534c:	4603      	mov	r3, r0
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e022      	b.n	800539c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fb18 	bl	8005994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fb9f 	bl	8005ad8 <UART_CheckIdleState>
 800539a:	4603      	mov	r3, r0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	f040 8081 	bne.w	80054c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d002      	beq.n	80053ca <HAL_UART_Transmit+0x26>
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e079      	b.n	80054c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_UART_Transmit+0x38>
 80053d8:	2302      	movs	r3, #2
 80053da:	e072      	b.n	80054c2 <HAL_UART_Transmit+0x11e>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2221      	movs	r2, #33	; 0x21
 80053f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053f2:	f7fb ffe1 	bl	80013b8 <HAL_GetTick>
 80053f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	88fa      	ldrh	r2, [r7, #6]
 8005404:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005410:	d108      	bne.n	8005424 <HAL_UART_Transmit+0x80>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d104      	bne.n	8005424 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	e003      	b.n	800542c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005434:	e02c      	b.n	8005490 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2200      	movs	r2, #0
 800543e:	2180      	movs	r1, #128	; 0x80
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fb7c 	bl	8005b3e <UART_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e038      	b.n	80054c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005464:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	3302      	adds	r3, #2
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e007      	b.n	800547e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	3301      	adds	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1cc      	bne.n	8005436 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2200      	movs	r2, #0
 80054a4:	2140      	movs	r1, #64	; 0x40
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fb49 	bl	8005b3e <UART_WaitOnFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e005      	b.n	80054c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e000      	b.n	80054c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80054c0:	2302      	movs	r3, #2
  }
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3720      	adds	r7, #32
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	431a      	orrs	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4ba6      	ldr	r3, [pc, #664]	; (8005790 <UART_SetConfig+0x2c4>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	6979      	ldr	r1, [r7, #20]
 8005500:	430b      	orrs	r3, r1
 8005502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	430a      	orrs	r2, r1
 800553c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a94      	ldr	r2, [pc, #592]	; (8005794 <UART_SetConfig+0x2c8>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d120      	bne.n	800558a <UART_SetConfig+0xbe>
 8005548:	4b93      	ldr	r3, [pc, #588]	; (8005798 <UART_SetConfig+0x2cc>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	2b03      	cmp	r3, #3
 8005554:	d816      	bhi.n	8005584 <UART_SetConfig+0xb8>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x90>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	0800556d 	.word	0x0800556d
 8005560:	08005579 	.word	0x08005579
 8005564:	08005573 	.word	0x08005573
 8005568:	0800557f 	.word	0x0800557f
 800556c:	2301      	movs	r3, #1
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e150      	b.n	8005814 <UART_SetConfig+0x348>
 8005572:	2302      	movs	r3, #2
 8005574:	77fb      	strb	r3, [r7, #31]
 8005576:	e14d      	b.n	8005814 <UART_SetConfig+0x348>
 8005578:	2304      	movs	r3, #4
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	e14a      	b.n	8005814 <UART_SetConfig+0x348>
 800557e:	2308      	movs	r3, #8
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e147      	b.n	8005814 <UART_SetConfig+0x348>
 8005584:	2310      	movs	r3, #16
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e144      	b.n	8005814 <UART_SetConfig+0x348>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a83      	ldr	r2, [pc, #524]	; (800579c <UART_SetConfig+0x2d0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d132      	bne.n	80055fa <UART_SetConfig+0x12e>
 8005594:	4b80      	ldr	r3, [pc, #512]	; (8005798 <UART_SetConfig+0x2cc>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f003 030c 	and.w	r3, r3, #12
 800559e:	2b0c      	cmp	r3, #12
 80055a0:	d828      	bhi.n	80055f4 <UART_SetConfig+0x128>
 80055a2:	a201      	add	r2, pc, #4	; (adr r2, 80055a8 <UART_SetConfig+0xdc>)
 80055a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a8:	080055dd 	.word	0x080055dd
 80055ac:	080055f5 	.word	0x080055f5
 80055b0:	080055f5 	.word	0x080055f5
 80055b4:	080055f5 	.word	0x080055f5
 80055b8:	080055e9 	.word	0x080055e9
 80055bc:	080055f5 	.word	0x080055f5
 80055c0:	080055f5 	.word	0x080055f5
 80055c4:	080055f5 	.word	0x080055f5
 80055c8:	080055e3 	.word	0x080055e3
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	080055f5 	.word	0x080055f5
 80055d4:	080055f5 	.word	0x080055f5
 80055d8:	080055ef 	.word	0x080055ef
 80055dc:	2300      	movs	r3, #0
 80055de:	77fb      	strb	r3, [r7, #31]
 80055e0:	e118      	b.n	8005814 <UART_SetConfig+0x348>
 80055e2:	2302      	movs	r3, #2
 80055e4:	77fb      	strb	r3, [r7, #31]
 80055e6:	e115      	b.n	8005814 <UART_SetConfig+0x348>
 80055e8:	2304      	movs	r3, #4
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e112      	b.n	8005814 <UART_SetConfig+0x348>
 80055ee:	2308      	movs	r3, #8
 80055f0:	77fb      	strb	r3, [r7, #31]
 80055f2:	e10f      	b.n	8005814 <UART_SetConfig+0x348>
 80055f4:	2310      	movs	r3, #16
 80055f6:	77fb      	strb	r3, [r7, #31]
 80055f8:	e10c      	b.n	8005814 <UART_SetConfig+0x348>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a68      	ldr	r2, [pc, #416]	; (80057a0 <UART_SetConfig+0x2d4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d120      	bne.n	8005646 <UART_SetConfig+0x17a>
 8005604:	4b64      	ldr	r3, [pc, #400]	; (8005798 <UART_SetConfig+0x2cc>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800560e:	2b30      	cmp	r3, #48	; 0x30
 8005610:	d013      	beq.n	800563a <UART_SetConfig+0x16e>
 8005612:	2b30      	cmp	r3, #48	; 0x30
 8005614:	d814      	bhi.n	8005640 <UART_SetConfig+0x174>
 8005616:	2b20      	cmp	r3, #32
 8005618:	d009      	beq.n	800562e <UART_SetConfig+0x162>
 800561a:	2b20      	cmp	r3, #32
 800561c:	d810      	bhi.n	8005640 <UART_SetConfig+0x174>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <UART_SetConfig+0x15c>
 8005622:	2b10      	cmp	r3, #16
 8005624:	d006      	beq.n	8005634 <UART_SetConfig+0x168>
 8005626:	e00b      	b.n	8005640 <UART_SetConfig+0x174>
 8005628:	2300      	movs	r3, #0
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e0f2      	b.n	8005814 <UART_SetConfig+0x348>
 800562e:	2302      	movs	r3, #2
 8005630:	77fb      	strb	r3, [r7, #31]
 8005632:	e0ef      	b.n	8005814 <UART_SetConfig+0x348>
 8005634:	2304      	movs	r3, #4
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e0ec      	b.n	8005814 <UART_SetConfig+0x348>
 800563a:	2308      	movs	r3, #8
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e0e9      	b.n	8005814 <UART_SetConfig+0x348>
 8005640:	2310      	movs	r3, #16
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e0e6      	b.n	8005814 <UART_SetConfig+0x348>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a56      	ldr	r2, [pc, #344]	; (80057a4 <UART_SetConfig+0x2d8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d120      	bne.n	8005692 <UART_SetConfig+0x1c6>
 8005650:	4b51      	ldr	r3, [pc, #324]	; (8005798 <UART_SetConfig+0x2cc>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800565a:	2bc0      	cmp	r3, #192	; 0xc0
 800565c:	d013      	beq.n	8005686 <UART_SetConfig+0x1ba>
 800565e:	2bc0      	cmp	r3, #192	; 0xc0
 8005660:	d814      	bhi.n	800568c <UART_SetConfig+0x1c0>
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d009      	beq.n	800567a <UART_SetConfig+0x1ae>
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d810      	bhi.n	800568c <UART_SetConfig+0x1c0>
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <UART_SetConfig+0x1a8>
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d006      	beq.n	8005680 <UART_SetConfig+0x1b4>
 8005672:	e00b      	b.n	800568c <UART_SetConfig+0x1c0>
 8005674:	2300      	movs	r3, #0
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e0cc      	b.n	8005814 <UART_SetConfig+0x348>
 800567a:	2302      	movs	r3, #2
 800567c:	77fb      	strb	r3, [r7, #31]
 800567e:	e0c9      	b.n	8005814 <UART_SetConfig+0x348>
 8005680:	2304      	movs	r3, #4
 8005682:	77fb      	strb	r3, [r7, #31]
 8005684:	e0c6      	b.n	8005814 <UART_SetConfig+0x348>
 8005686:	2308      	movs	r3, #8
 8005688:	77fb      	strb	r3, [r7, #31]
 800568a:	e0c3      	b.n	8005814 <UART_SetConfig+0x348>
 800568c:	2310      	movs	r3, #16
 800568e:	77fb      	strb	r3, [r7, #31]
 8005690:	e0c0      	b.n	8005814 <UART_SetConfig+0x348>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a44      	ldr	r2, [pc, #272]	; (80057a8 <UART_SetConfig+0x2dc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d125      	bne.n	80056e8 <UART_SetConfig+0x21c>
 800569c:	4b3e      	ldr	r3, [pc, #248]	; (8005798 <UART_SetConfig+0x2cc>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056aa:	d017      	beq.n	80056dc <UART_SetConfig+0x210>
 80056ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b0:	d817      	bhi.n	80056e2 <UART_SetConfig+0x216>
 80056b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b6:	d00b      	beq.n	80056d0 <UART_SetConfig+0x204>
 80056b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056bc:	d811      	bhi.n	80056e2 <UART_SetConfig+0x216>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <UART_SetConfig+0x1fe>
 80056c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c6:	d006      	beq.n	80056d6 <UART_SetConfig+0x20a>
 80056c8:	e00b      	b.n	80056e2 <UART_SetConfig+0x216>
 80056ca:	2300      	movs	r3, #0
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e0a1      	b.n	8005814 <UART_SetConfig+0x348>
 80056d0:	2302      	movs	r3, #2
 80056d2:	77fb      	strb	r3, [r7, #31]
 80056d4:	e09e      	b.n	8005814 <UART_SetConfig+0x348>
 80056d6:	2304      	movs	r3, #4
 80056d8:	77fb      	strb	r3, [r7, #31]
 80056da:	e09b      	b.n	8005814 <UART_SetConfig+0x348>
 80056dc:	2308      	movs	r3, #8
 80056de:	77fb      	strb	r3, [r7, #31]
 80056e0:	e098      	b.n	8005814 <UART_SetConfig+0x348>
 80056e2:	2310      	movs	r3, #16
 80056e4:	77fb      	strb	r3, [r7, #31]
 80056e6:	e095      	b.n	8005814 <UART_SetConfig+0x348>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2f      	ldr	r2, [pc, #188]	; (80057ac <UART_SetConfig+0x2e0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d125      	bne.n	800573e <UART_SetConfig+0x272>
 80056f2:	4b29      	ldr	r3, [pc, #164]	; (8005798 <UART_SetConfig+0x2cc>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005700:	d017      	beq.n	8005732 <UART_SetConfig+0x266>
 8005702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005706:	d817      	bhi.n	8005738 <UART_SetConfig+0x26c>
 8005708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570c:	d00b      	beq.n	8005726 <UART_SetConfig+0x25a>
 800570e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005712:	d811      	bhi.n	8005738 <UART_SetConfig+0x26c>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <UART_SetConfig+0x254>
 8005718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800571c:	d006      	beq.n	800572c <UART_SetConfig+0x260>
 800571e:	e00b      	b.n	8005738 <UART_SetConfig+0x26c>
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
 8005724:	e076      	b.n	8005814 <UART_SetConfig+0x348>
 8005726:	2302      	movs	r3, #2
 8005728:	77fb      	strb	r3, [r7, #31]
 800572a:	e073      	b.n	8005814 <UART_SetConfig+0x348>
 800572c:	2304      	movs	r3, #4
 800572e:	77fb      	strb	r3, [r7, #31]
 8005730:	e070      	b.n	8005814 <UART_SetConfig+0x348>
 8005732:	2308      	movs	r3, #8
 8005734:	77fb      	strb	r3, [r7, #31]
 8005736:	e06d      	b.n	8005814 <UART_SetConfig+0x348>
 8005738:	2310      	movs	r3, #16
 800573a:	77fb      	strb	r3, [r7, #31]
 800573c:	e06a      	b.n	8005814 <UART_SetConfig+0x348>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <UART_SetConfig+0x2e4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d138      	bne.n	80057ba <UART_SetConfig+0x2ee>
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <UART_SetConfig+0x2cc>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005756:	d017      	beq.n	8005788 <UART_SetConfig+0x2bc>
 8005758:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800575c:	d82a      	bhi.n	80057b4 <UART_SetConfig+0x2e8>
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005762:	d00b      	beq.n	800577c <UART_SetConfig+0x2b0>
 8005764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005768:	d824      	bhi.n	80057b4 <UART_SetConfig+0x2e8>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <UART_SetConfig+0x2aa>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	d006      	beq.n	8005782 <UART_SetConfig+0x2b6>
 8005774:	e01e      	b.n	80057b4 <UART_SetConfig+0x2e8>
 8005776:	2300      	movs	r3, #0
 8005778:	77fb      	strb	r3, [r7, #31]
 800577a:	e04b      	b.n	8005814 <UART_SetConfig+0x348>
 800577c:	2302      	movs	r3, #2
 800577e:	77fb      	strb	r3, [r7, #31]
 8005780:	e048      	b.n	8005814 <UART_SetConfig+0x348>
 8005782:	2304      	movs	r3, #4
 8005784:	77fb      	strb	r3, [r7, #31]
 8005786:	e045      	b.n	8005814 <UART_SetConfig+0x348>
 8005788:	2308      	movs	r3, #8
 800578a:	77fb      	strb	r3, [r7, #31]
 800578c:	e042      	b.n	8005814 <UART_SetConfig+0x348>
 800578e:	bf00      	nop
 8005790:	efff69f3 	.word	0xefff69f3
 8005794:	40011000 	.word	0x40011000
 8005798:	40023800 	.word	0x40023800
 800579c:	40004400 	.word	0x40004400
 80057a0:	40004800 	.word	0x40004800
 80057a4:	40004c00 	.word	0x40004c00
 80057a8:	40005000 	.word	0x40005000
 80057ac:	40011400 	.word	0x40011400
 80057b0:	40007800 	.word	0x40007800
 80057b4:	2310      	movs	r3, #16
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e02c      	b.n	8005814 <UART_SetConfig+0x348>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a72      	ldr	r2, [pc, #456]	; (8005988 <UART_SetConfig+0x4bc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d125      	bne.n	8005810 <UART_SetConfig+0x344>
 80057c4:	4b71      	ldr	r3, [pc, #452]	; (800598c <UART_SetConfig+0x4c0>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057d2:	d017      	beq.n	8005804 <UART_SetConfig+0x338>
 80057d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057d8:	d817      	bhi.n	800580a <UART_SetConfig+0x33e>
 80057da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057de:	d00b      	beq.n	80057f8 <UART_SetConfig+0x32c>
 80057e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e4:	d811      	bhi.n	800580a <UART_SetConfig+0x33e>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <UART_SetConfig+0x326>
 80057ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ee:	d006      	beq.n	80057fe <UART_SetConfig+0x332>
 80057f0:	e00b      	b.n	800580a <UART_SetConfig+0x33e>
 80057f2:	2300      	movs	r3, #0
 80057f4:	77fb      	strb	r3, [r7, #31]
 80057f6:	e00d      	b.n	8005814 <UART_SetConfig+0x348>
 80057f8:	2302      	movs	r3, #2
 80057fa:	77fb      	strb	r3, [r7, #31]
 80057fc:	e00a      	b.n	8005814 <UART_SetConfig+0x348>
 80057fe:	2304      	movs	r3, #4
 8005800:	77fb      	strb	r3, [r7, #31]
 8005802:	e007      	b.n	8005814 <UART_SetConfig+0x348>
 8005804:	2308      	movs	r3, #8
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e004      	b.n	8005814 <UART_SetConfig+0x348>
 800580a:	2310      	movs	r3, #16
 800580c:	77fb      	strb	r3, [r7, #31]
 800580e:	e001      	b.n	8005814 <UART_SetConfig+0x348>
 8005810:	2310      	movs	r3, #16
 8005812:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581c:	d15b      	bne.n	80058d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800581e:	7ffb      	ldrb	r3, [r7, #31]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d828      	bhi.n	8005876 <UART_SetConfig+0x3aa>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <UART_SetConfig+0x360>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	08005877 	.word	0x08005877
 800583c:	08005867 	.word	0x08005867
 8005840:	08005877 	.word	0x08005877
 8005844:	08005877 	.word	0x08005877
 8005848:	08005877 	.word	0x08005877
 800584c:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005850:	f7fd f910 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8005854:	61b8      	str	r0, [r7, #24]
        break;
 8005856:	e013      	b.n	8005880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fd f920 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 800585c:	61b8      	str	r0, [r7, #24]
        break;
 800585e:	e00f      	b.n	8005880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <UART_SetConfig+0x4c4>)
 8005862:	61bb      	str	r3, [r7, #24]
        break;
 8005864:	e00c      	b.n	8005880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fd f833 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800586a:	61b8      	str	r0, [r7, #24]
        break;
 800586c:	e008      	b.n	8005880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	61bb      	str	r3, [r7, #24]
        break;
 8005874:	e004      	b.n	8005880 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	77bb      	strb	r3, [r7, #30]
        break;
 800587e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d074      	beq.n	8005970 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	005a      	lsls	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	441a      	add	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	fbb2 f3f3 	udiv	r3, r2, r3
 800589a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b0f      	cmp	r3, #15
 80058a0:	d916      	bls.n	80058d0 <UART_SetConfig+0x404>
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a8:	d212      	bcs.n	80058d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f023 030f 	bic.w	r3, r3, #15
 80058b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	b29a      	uxth	r2, r3
 80058c0:	89fb      	ldrh	r3, [r7, #14]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	89fa      	ldrh	r2, [r7, #14]
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	e04f      	b.n	8005970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	77bb      	strb	r3, [r7, #30]
 80058d4:	e04c      	b.n	8005970 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058d6:	7ffb      	ldrb	r3, [r7, #31]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d828      	bhi.n	800592e <UART_SetConfig+0x462>
 80058dc:	a201      	add	r2, pc, #4	; (adr r2, 80058e4 <UART_SetConfig+0x418>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005919 	.word	0x08005919
 80058f0:	0800592f 	.word	0x0800592f
 80058f4:	0800591f 	.word	0x0800591f
 80058f8:	0800592f 	.word	0x0800592f
 80058fc:	0800592f 	.word	0x0800592f
 8005900:	0800592f 	.word	0x0800592f
 8005904:	08005927 	.word	0x08005927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005908:	f7fd f8b4 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 800590c:	61b8      	str	r0, [r7, #24]
        break;
 800590e:	e013      	b.n	8005938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005910:	f7fd f8c4 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 8005914:	61b8      	str	r0, [r7, #24]
        break;
 8005916:	e00f      	b.n	8005938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005918:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <UART_SetConfig+0x4c4>)
 800591a:	61bb      	str	r3, [r7, #24]
        break;
 800591c:	e00c      	b.n	8005938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591e:	f7fc ffd7 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 8005922:	61b8      	str	r0, [r7, #24]
        break;
 8005924:	e008      	b.n	8005938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592a:	61bb      	str	r3, [r7, #24]
        break;
 800592c:	e004      	b.n	8005938 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	77bb      	strb	r3, [r7, #30]
        break;
 8005936:	bf00      	nop
    }

    if (pclk != 0U)
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d018      	beq.n	8005970 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	085a      	lsrs	r2, r3, #1
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	441a      	add	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b0f      	cmp	r3, #15
 8005956:	d909      	bls.n	800596c <UART_SetConfig+0x4a0>
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595e:	d205      	bcs.n	800596c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	e001      	b.n	8005970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800597c:	7fbb      	ldrb	r3, [r7, #30]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40007c00 	.word	0x40007c00
 800598c:	40023800 	.word	0x40023800
 8005990:	00f42400 	.word	0x00f42400

08005994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a92:	d10a      	bne.n	8005aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ae8:	f7fb fc66 	bl	80013b8 <HAL_GetTick>
 8005aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d10e      	bne.n	8005b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f817 	bl	8005b3e <UART_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e00d      	b.n	8005b36 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b09c      	sub	sp, #112	; 0x70
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	603b      	str	r3, [r7, #0]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b4e:	e0a5      	b.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	f000 80a1 	beq.w	8005c9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5a:	f7fb fc2d 	bl	80013b8 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d302      	bcc.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d13e      	bne.n	8005bee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b84:	667b      	str	r3, [r7, #100]	; 0x64
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e6      	bne.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e5      	bne.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e067      	b.n	8005cbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d04f      	beq.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c0a:	d147      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	461a      	mov	r2, r3
 8005c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34
 8005c36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e6      	bne.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	613b      	str	r3, [r7, #16]
   return(result);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c68:	623a      	str	r2, [r7, #32]
 8005c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	69f9      	ldr	r1, [r7, #28]
 8005c6e:	6a3a      	ldr	r2, [r7, #32]
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e010      	b.n	8005cbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69da      	ldr	r2, [r3, #28]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	f43f af4a 	beq.w	8005b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3770      	adds	r7, #112	; 0x70
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005cc8:	b084      	sub	sp, #16
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	f107 001c 	add.w	r0, r7, #28
 8005cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005cde:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005ce2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005ce6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005cea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005cee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005cf2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <SDMMC_Init+0x54>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	431a      	orrs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	b004      	add	sp, #16
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	ffff8100 	.word	0xffff8100

08005d20 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2203      	movs	r2, #3
 8005d68:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0303 	and.w	r3, r3, #3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005db2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005db8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005dbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <SDMMC_SendCommand+0x50>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	fffff000 	.word	0xfffff000

08005de8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	b2db      	uxtb	r3, r3
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3314      	adds	r3, #20
 8005e10:	461a      	mov	r2, r3
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	4413      	add	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
}  
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e4e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005e54:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005e5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0

}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005e8e:	2310      	movs	r3, #16
 8005e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e92:	2340      	movs	r3, #64	; 0x40
 8005e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ea0:	f107 0308 	add.w	r3, r7, #8
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff ff74 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb0:	2110      	movs	r1, #16
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa1a 	bl	80062ec <SDMMC_GetCmdResp1>
 8005eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eba:	69fb      	ldr	r3, [r7, #28]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005ed2:	2311      	movs	r3, #17
 8005ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ed6:	2340      	movs	r3, #64	; 0x40
 8005ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ee2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ee4:	f107 0308 	add.w	r3, r7, #8
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff ff52 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef4:	2111      	movs	r1, #17
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f9f8 	bl	80062ec <SDMMC_GetCmdResp1>
 8005efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005efe:	69fb      	ldr	r3, [r7, #28]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3720      	adds	r7, #32
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005f16:	2312      	movs	r3, #18
 8005f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f28:	f107 0308 	add.w	r3, r7, #8
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff ff30 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f38:	2112      	movs	r1, #18
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9d6 	bl	80062ec <SDMMC_GetCmdResp1>
 8005f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f42:	69fb      	ldr	r3, [r7, #28]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f5a:	2318      	movs	r3, #24
 8005f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f6c:	f107 0308 	add.w	r3, r7, #8
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff ff0e 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7c:	2118      	movs	r1, #24
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f9b4 	bl	80062ec <SDMMC_GetCmdResp1>
 8005f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f86:	69fb      	ldr	r3, [r7, #28]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b088      	sub	sp, #32
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005f9e:	2319      	movs	r3, #25
 8005fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fa2:	2340      	movs	r3, #64	; 0x40
 8005fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff feec 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc0:	2119      	movs	r1, #25
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f992 	bl	80062ec <SDMMC_GetCmdResp1>
 8005fc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fca:	69fb      	ldr	r3, [r7, #28]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3720      	adds	r7, #32
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005fe0:	230c      	movs	r3, #12
 8005fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005fe4:	2340      	movs	r3, #64	; 0x40
 8005fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff fecb 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8005ffe:	4a05      	ldr	r2, [pc, #20]	; (8006014 <SDMMC_CmdStopTransfer+0x40>)
 8006000:	210c      	movs	r1, #12
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f972 	bl	80062ec <SDMMC_GetCmdResp1>
 8006008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800600a:	69fb      	ldr	r3, [r7, #28]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	05f5e100 	.word	0x05f5e100

08006018 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006028:	2307      	movs	r3, #7
 800602a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800602c:	2340      	movs	r3, #64	; 0x40
 800602e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006038:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800603a:	f107 0310 	add.w	r3, r7, #16
 800603e:	4619      	mov	r1, r3
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f7ff fea7 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	2107      	movs	r1, #7
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f94d 	bl	80062ec <SDMMC_GetCmdResp1>
 8006052:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006056:	4618      	mov	r0, r3
 8006058:	3728      	adds	r7, #40	; 0x28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b088      	sub	sp, #32
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800607a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800607c:	f107 0308 	add.w	r3, r7, #8
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fe86 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fb67 	bl	800675c <SDMMC_GetCmdError>
 800608e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006090:	69fb      	ldr	r3, [r7, #28]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3720      	adds	r7, #32
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b088      	sub	sp, #32
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80060a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80060a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80060a8:	2308      	movs	r3, #8
 80060aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060ac:	2340      	movs	r3, #64	; 0x40
 80060ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060b0:	2300      	movs	r3, #0
 80060b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff fe67 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fafa 	bl	80066c0 <SDMMC_GetCmdResp7>
 80060cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ce:	69fb      	ldr	r3, [r7, #28]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80060e6:	2337      	movs	r3, #55	; 0x37
 80060e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80060ea:	2340      	movs	r3, #64	; 0x40
 80060ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80060f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80060f8:	f107 0308 	add.w	r3, r7, #8
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff fe48 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8006104:	f241 3288 	movw	r2, #5000	; 0x1388
 8006108:	2137      	movs	r1, #55	; 0x37
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8ee 	bl	80062ec <SDMMC_GetCmdResp1>
 8006110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006112:	69fb      	ldr	r3, [r7, #28]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3720      	adds	r7, #32
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <SDMMC_CmdAppOperCommand+0x44>)
 800612a:	4313      	orrs	r3, r2
 800612c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800612e:	2329      	movs	r3, #41	; 0x29
 8006130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006132:	2340      	movs	r3, #64	; 0x40
 8006134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800613a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800613e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006140:	f107 0308 	add.w	r3, r7, #8
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7ff fe24 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fa03 	bl	8006558 <SDMMC_GetCmdResp3>
 8006152:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006154:	69fb      	ldr	r3, [r7, #28]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3720      	adds	r7, #32
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	80100000 	.word	0x80100000

08006164 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006172:	2306      	movs	r3, #6
 8006174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006176:	2340      	movs	r3, #64	; 0x40
 8006178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800617a:	2300      	movs	r3, #0
 800617c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800617e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006182:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006184:	f107 0308 	add.w	r3, r7, #8
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff fe02 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006190:	f241 3288 	movw	r2, #5000	; 0x1388
 8006194:	2106      	movs	r1, #6
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8a8 	bl	80062ec <SDMMC_GetCmdResp1>
 800619c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800619e:	69fb      	ldr	r3, [r7, #28]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3720      	adds	r7, #32
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80061b4:	2333      	movs	r3, #51	; 0x33
 80061b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061b8:	2340      	movs	r3, #64	; 0x40
 80061ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061bc:	2300      	movs	r3, #0
 80061be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061c6:	f107 0308 	add.w	r3, r7, #8
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fde1 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80061d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d6:	2133      	movs	r1, #51	; 0x33
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f887 	bl	80062ec <SDMMC_GetCmdResp1>
 80061de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061e0:	69fb      	ldr	r3, [r7, #28]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b088      	sub	sp, #32
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80061f6:	2302      	movs	r3, #2
 80061f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80061fa:	23c0      	movs	r3, #192	; 0xc0
 80061fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006206:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006208:	f107 0308 	add.w	r3, r7, #8
 800620c:	4619      	mov	r1, r3
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff fdc0 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f957 	bl	80064c8 <SDMMC_GetCmdResp2>
 800621a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800621c:	69fb      	ldr	r3, [r7, #28]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b088      	sub	sp, #32
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006234:	2309      	movs	r3, #9
 8006236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8006238:	23c0      	movs	r3, #192	; 0xc0
 800623a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006244:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006246:	f107 0308 	add.w	r3, r7, #8
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fda1 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f938 	bl	80064c8 <SDMMC_GetCmdResp2>
 8006258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800625a:	69fb      	ldr	r3, [r7, #28]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006272:	2303      	movs	r3, #3
 8006274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800627e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006284:	f107 0308 	add.w	r3, r7, #8
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff fd82 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	2103      	movs	r1, #3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f99d 	bl	80065d4 <SDMMC_GetCmdResp6>
 800629a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800629c:	69fb      	ldr	r3, [r7, #28]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b088      	sub	sp, #32
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80062b4:	230d      	movs	r3, #13
 80062b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062b8:	2340      	movs	r3, #64	; 0x40
 80062ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062c6:	f107 0308 	add.w	r3, r7, #8
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff fd61 	bl	8005d94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80062d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d6:	210d      	movs	r1, #13
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f807 	bl	80062ec <SDMMC_GetCmdResp1>
 80062de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062e0:	69fb      	ldr	r3, [r7, #28]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3720      	adds	r7, #32
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	460b      	mov	r3, r1
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80062fa:	4b70      	ldr	r3, [pc, #448]	; (80064bc <SDMMC_GetCmdResp1+0x1d0>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a70      	ldr	r2, [pc, #448]	; (80064c0 <SDMMC_GetCmdResp1+0x1d4>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	0a5a      	lsrs	r2, r3, #9
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	fb02 f303 	mul.w	r3, r2, r3
 800630c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	1e5a      	subs	r2, r3, #1
 8006312:	61fa      	str	r2, [r7, #28]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d102      	bne.n	800631e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006318:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800631c:	e0c9      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006322:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0ef      	beq.n	800630e <SDMMC_GetCmdResp1+0x22>
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1ea      	bne.n	800630e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2204      	movs	r2, #4
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800634a:	2304      	movs	r3, #4
 800634c:	e0b1      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d004      	beq.n	8006364 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006360:	2301      	movs	r3, #1
 8006362:	e0a6      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	22c5      	movs	r2, #197	; 0xc5
 8006368:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff fd3c 	bl	8005de8 <SDMMC_GetCommandResponse>
 8006370:	4603      	mov	r3, r0
 8006372:	461a      	mov	r2, r3
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	4293      	cmp	r3, r2
 8006378:	d001      	beq.n	800637e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800637a:	2301      	movs	r3, #1
 800637c:	e099      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800637e:	2100      	movs	r1, #0
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f7ff fd3e 	bl	8005e02 <SDMMC_GetResponse>
 8006386:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4b4e      	ldr	r3, [pc, #312]	; (80064c4 <SDMMC_GetCmdResp1+0x1d8>)
 800638c:	4013      	ands	r3, r2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006392:	2300      	movs	r3, #0
 8006394:	e08d      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	da02      	bge.n	80063a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800639c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063a0:	e087      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80063ac:	2340      	movs	r3, #64	; 0x40
 80063ae:	e080      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80063ba:	2380      	movs	r3, #128	; 0x80
 80063bc:	e079      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80063c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063cc:	e071      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80063d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063dc:	e069      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80063e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063ec:	e061      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80063f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063fc:	e059      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800640c:	e051      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800641c:	e049      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006428:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800642c:	e041      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643c:	e039      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800644c:	e031      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006458:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800645c:	e029      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006468:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800646c:	e021      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006478:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800647c:	e019      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006488:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800648c:	e011      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006498:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800649c:	e009      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80064a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80064ac:	e001      	b.n	80064b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000000 	.word	0x20000000
 80064c0:	10624dd3 	.word	0x10624dd3
 80064c4:	fdffe008 	.word	0xfdffe008

080064c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064d0:	4b1f      	ldr	r3, [pc, #124]	; (8006550 <SDMMC_GetCmdResp2+0x88>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <SDMMC_GetCmdResp2+0x8c>)
 80064d6:	fba2 2303 	umull	r2, r3, r2, r3
 80064da:	0a5b      	lsrs	r3, r3, #9
 80064dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
 80064e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1e5a      	subs	r2, r3, #1
 80064ea:	60fa      	str	r2, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064f4:	e026      	b.n	8006544 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0ef      	beq.n	80064e6 <SDMMC_GetCmdResp2+0x1e>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1ea      	bne.n	80064e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d004      	beq.n	8006526 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2204      	movs	r2, #4
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006522:	2304      	movs	r3, #4
 8006524:	e00e      	b.n	8006544 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006538:	2301      	movs	r3, #1
 800653a:	e003      	b.n	8006544 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	22c5      	movs	r2, #197	; 0xc5
 8006540:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	20000000 	.word	0x20000000
 8006554:	10624dd3 	.word	0x10624dd3

08006558 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006560:	4b1a      	ldr	r3, [pc, #104]	; (80065cc <SDMMC_GetCmdResp3+0x74>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1a      	ldr	r2, [pc, #104]	; (80065d0 <SDMMC_GetCmdResp3+0x78>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	0a5b      	lsrs	r3, r3, #9
 800656c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006570:	fb02 f303 	mul.w	r3, r2, r3
 8006574:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	1e5a      	subs	r2, r3, #1
 800657a:	60fa      	str	r2, [r7, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d102      	bne.n	8006586 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006584:	e01b      	b.n	80065be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0ef      	beq.n	8006576 <SDMMC_GetCmdResp3+0x1e>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1ea      	bne.n	8006576 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2204      	movs	r2, #4
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065b2:	2304      	movs	r3, #4
 80065b4:	e003      	b.n	80065be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	22c5      	movs	r2, #197	; 0xc5
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	20000000 	.word	0x20000000
 80065d0:	10624dd3 	.word	0x10624dd3

080065d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	460b      	mov	r3, r1
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065e2:	4b35      	ldr	r3, [pc, #212]	; (80066b8 <SDMMC_GetCmdResp6+0xe4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a35      	ldr	r2, [pc, #212]	; (80066bc <SDMMC_GetCmdResp6+0xe8>)
 80065e8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ec:	0a5b      	lsrs	r3, r3, #9
 80065ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f2:	fb02 f303 	mul.w	r3, r2, r3
 80065f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	1e5a      	subs	r2, r3, #1
 80065fc:	61fa      	str	r2, [r7, #28]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006602:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006606:	e052      	b.n	80066ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ef      	beq.n	80065f8 <SDMMC_GetCmdResp6+0x24>
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ea      	bne.n	80065f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2204      	movs	r2, #4
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006634:	2304      	movs	r3, #4
 8006636:	e03a      	b.n	80066ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800664a:	2301      	movs	r3, #1
 800664c:	e02f      	b.n	80066ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7ff fbca 	bl	8005de8 <SDMMC_GetCommandResponse>
 8006654:	4603      	mov	r3, r0
 8006656:	461a      	mov	r2, r3
 8006658:	7afb      	ldrb	r3, [r7, #11]
 800665a:	4293      	cmp	r3, r2
 800665c:	d001      	beq.n	8006662 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800665e:	2301      	movs	r3, #1
 8006660:	e025      	b.n	80066ae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	22c5      	movs	r2, #197	; 0xc5
 8006666:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006668:	2100      	movs	r1, #0
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff fbc9 	bl	8005e02 <SDMMC_GetResponse>
 8006670:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	0c1b      	lsrs	r3, r3, #16
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006686:	2300      	movs	r3, #0
 8006688:	e011      	b.n	80066ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006698:	e009      	b.n	80066ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066a8:	e001      	b.n	80066ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80066aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000000 	.word	0x20000000
 80066bc:	10624dd3 	.word	0x10624dd3

080066c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066c8:	4b22      	ldr	r3, [pc, #136]	; (8006754 <SDMMC_GetCmdResp7+0x94>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a22      	ldr	r2, [pc, #136]	; (8006758 <SDMMC_GetCmdResp7+0x98>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	0a5b      	lsrs	r3, r3, #9
 80066d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d8:	fb02 f303 	mul.w	r3, r2, r3
 80066dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	1e5a      	subs	r2, r3, #1
 80066e2:	60fa      	str	r2, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066ec:	e02c      	b.n	8006748 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0ef      	beq.n	80066de <SDMMC_GetCmdResp7+0x1e>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ea      	bne.n	80066de <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2204      	movs	r2, #4
 8006718:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800671a:	2304      	movs	r3, #4
 800671c:	e014      	b.n	8006748 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006730:	2301      	movs	r3, #1
 8006732:	e009      	b.n	8006748 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2240      	movs	r2, #64	; 0x40
 8006744:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006746:	2300      	movs	r3, #0
  
}
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	20000000 	.word	0x20000000
 8006758:	10624dd3 	.word	0x10624dd3

0800675c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006764:	4b11      	ldr	r3, [pc, #68]	; (80067ac <SDMMC_GetCmdError+0x50>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a11      	ldr	r2, [pc, #68]	; (80067b0 <SDMMC_GetCmdError+0x54>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0a5b      	lsrs	r3, r3, #9
 8006770:	f241 3288 	movw	r2, #5000	; 0x1388
 8006774:	fb02 f303 	mul.w	r3, r2, r3
 8006778:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1e5a      	subs	r2, r3, #1
 800677e:	60fa      	str	r2, [r7, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006788:	e009      	b.n	800679e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f1      	beq.n	800677a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	22c5      	movs	r2, #197	; 0xc5
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	20000000 	.word	0x20000000
 80067b0:	10624dd3 	.word	0x10624dd3

080067b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80067b8:	4904      	ldr	r1, [pc, #16]	; (80067cc <MX_FATFS_Init+0x18>)
 80067ba:	4805      	ldr	r0, [pc, #20]	; (80067d0 <MX_FATFS_Init+0x1c>)
 80067bc:	f003 f834 	bl	8009828 <FATFS_LinkDriver>
 80067c0:	4603      	mov	r3, r0
 80067c2:	461a      	mov	r2, r3
 80067c4:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <MX_FATFS_Init+0x20>)
 80067c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80067c8:	bf00      	nop
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	200002f8 	.word	0x200002f8
 80067d0:	0800ac48 	.word	0x0800ac48
 80067d4:	200002f4 	.word	0x200002f4

080067d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80067dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80067de:	4618      	mov	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80067f2:	f000 f896 	bl	8006922 <BSP_SD_IsDetected>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d001      	beq.n	8006800 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80067fc:	2302      	movs	r3, #2
 80067fe:	e012      	b.n	8006826 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006800:	480b      	ldr	r0, [pc, #44]	; (8006830 <BSP_SD_Init+0x48>)
 8006802:	f7fc fd4f 	bl	80032a4 <HAL_SD_Init>
 8006806:	4603      	mov	r3, r0
 8006808:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d109      	bne.n	8006824 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8006810:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006814:	4806      	ldr	r0, [pc, #24]	; (8006830 <BSP_SD_Init+0x48>)
 8006816:	f7fd fb15 	bl	8003e44 <HAL_SD_ConfigWideBusOperation>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006824:	79fb      	ldrb	r3, [r7, #7]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	2000008c 	.word	0x2000008c

08006834 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	68f9      	ldr	r1, [r7, #12]
 800684a:	4806      	ldr	r0, [pc, #24]	; (8006864 <BSP_SD_ReadBlocks_DMA+0x30>)
 800684c:	f7fc fde2 	bl	8003414 <HAL_SD_ReadBlocks_DMA>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800685a:	7dfb      	ldrb	r3, [r7, #23]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	2000008c 	.word	0x2000008c

08006868 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	68f9      	ldr	r1, [r7, #12]
 800687e:	4806      	ldr	r0, [pc, #24]	; (8006898 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006880:	f7fc feaa 	bl	80035d8 <HAL_SD_WriteBlocks_DMA>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800688e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	2000008c 	.word	0x2000008c

0800689c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80068a0:	4805      	ldr	r0, [pc, #20]	; (80068b8 <BSP_SD_GetCardState+0x1c>)
 80068a2:	f7fd fb69 	bl	8003f78 <HAL_SD_GetCardState>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	bf14      	ite	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	2300      	moveq	r3, #0
 80068b0:	b2db      	uxtb	r3, r3
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	2000008c 	.word	0x2000008c

080068bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4803      	ldr	r0, [pc, #12]	; (80068d4 <BSP_SD_GetCardInfo+0x18>)
 80068c8:	f7fd fa90 	bl	8003dec <HAL_SD_GetCardInfo>
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	2000008c 	.word	0x2000008c

080068d8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80068e0:	f000 f818 	bl	8006914 <BSP_SD_AbortCallback>
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80068f4:	f000 f9a8 	bl	8006c48 <BSP_SD_WriteCpltCallback>
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006908:	f000 f9aa 	bl	8006c60 <BSP_SD_ReadCpltCallback>
}
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0

}
 8006918:	bf00      	nop
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006928:	2301      	movs	r3, #1
 800692a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800692c:	f000 f80c 	bl	8006948 <BSP_PlatformIsDetected>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006936:	2300      	movs	r3, #0
 8006938:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	b2db      	uxtb	r3, r3
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800694e:	2301      	movs	r3, #1
 8006950:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006956:	4806      	ldr	r0, [pc, #24]	; (8006970 <BSP_PlatformIsDetected+0x28>)
 8006958:	f7fb fbc2 	bl	80020e0 <HAL_GPIO_ReadPin>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006962:	2300      	movs	r3, #0
 8006964:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006966:	79fb      	ldrb	r3, [r7, #7]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40020800 	.word	0x40020800

08006974 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800697c:	f7fa fd1c 	bl	80013b8 <HAL_GetTick>
 8006980:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006982:	e006      	b.n	8006992 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006984:	f7ff ff8a 	bl	800689c <BSP_SD_GetCardState>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800698e:	2300      	movs	r3, #0
 8006990:	e009      	b.n	80069a6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006992:	f7fa fd11 	bl	80013b8 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d8f0      	bhi.n	8006984 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <SD_CheckStatus+0x38>)
 80069bc:	2201      	movs	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80069c0:	f7ff ff6c 	bl	800689c <BSP_SD_GetCardState>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d107      	bne.n	80069da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80069ca:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <SD_CheckStatus+0x38>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f023 0301 	bic.w	r3, r3, #1
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <SD_CheckStatus+0x38>)
 80069d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80069da:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <SD_CheckStatus+0x38>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	b2db      	uxtb	r3, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20000009 	.word	0x20000009

080069ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80069f6:	f7ff fef7 	bl	80067e8 <BSP_SD_Init>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d107      	bne.n	8006a10 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006a00:	79fb      	ldrb	r3, [r7, #7]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff ffd4 	bl	80069b0 <SD_CheckStatus>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <SD_initialize+0x34>)
 8006a0e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006a10:	4b03      	ldr	r3, [pc, #12]	; (8006a20 <SD_initialize+0x34>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b2db      	uxtb	r3, r3
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000009 	.word	0x20000009

08006a24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff ffbd 	bl	80069b0 <SD_CheckStatus>
 8006a36:	4603      	mov	r3, r0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006a54:	f247 5030 	movw	r0, #30000	; 0x7530
 8006a58:	f7ff ff8c 	bl	8006974 <SD_CheckStatusWithTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	da01      	bge.n	8006a66 <SD_read+0x26>
  {
    return res;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	e03b      	b.n	8006ade <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	68b8      	ldr	r0, [r7, #8]
 8006a6c:	f7ff fee2 	bl	8006834 <BSP_SD_ReadBlocks_DMA>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d132      	bne.n	8006adc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006a76:	4b1c      	ldr	r3, [pc, #112]	; (8006ae8 <SD_read+0xa8>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006a7c:	f7fa fc9c 	bl	80013b8 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006a82:	bf00      	nop
 8006a84:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <SD_read+0xa8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d108      	bne.n	8006a9e <SD_read+0x5e>
 8006a8c:	f7fa fc94 	bl	80013b8 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f247 522f 	movw	r2, #29999	; 0x752f
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d9f2      	bls.n	8006a84 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <SD_read+0xa8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d102      	bne.n	8006aac <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	75fb      	strb	r3, [r7, #23]
 8006aaa:	e017      	b.n	8006adc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006aac:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <SD_read+0xa8>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006ab2:	f7fa fc81 	bl	80013b8 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006ab8:	e007      	b.n	8006aca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006aba:	f7ff feef 	bl	800689c <BSP_SD_GetCardState>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <SD_read+0x8a>
          {
            res = RES_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006ac8:	e008      	b.n	8006adc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006aca:	f7fa fc75 	bl	80013b8 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	f247 522f 	movw	r2, #29999	; 0x752f
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d9ee      	bls.n	8006aba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3718      	adds	r7, #24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000760 	.word	0x20000760

08006aec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006b00:	4b24      	ldr	r3, [pc, #144]	; (8006b94 <SD_write+0xa8>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006b06:	f247 5030 	movw	r0, #30000	; 0x7530
 8006b0a:	f7ff ff33 	bl	8006974 <SD_CheckStatusWithTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	da01      	bge.n	8006b18 <SD_write+0x2c>
  {
    return res;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	e038      	b.n	8006b8a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	68b8      	ldr	r0, [r7, #8]
 8006b1e:	f7ff fea3 	bl	8006868 <BSP_SD_WriteBlocks_DMA>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d12f      	bne.n	8006b88 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006b28:	f7fa fc46 	bl	80013b8 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006b2e:	bf00      	nop
 8006b30:	4b18      	ldr	r3, [pc, #96]	; (8006b94 <SD_write+0xa8>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d108      	bne.n	8006b4a <SD_write+0x5e>
 8006b38:	f7fa fc3e 	bl	80013b8 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d9f2      	bls.n	8006b30 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006b4a:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <SD_write+0xa8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	75fb      	strb	r3, [r7, #23]
 8006b56:	e017      	b.n	8006b88 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006b58:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <SD_write+0xa8>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006b5e:	f7fa fc2b 	bl	80013b8 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b64:	e007      	b.n	8006b76 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006b66:	f7ff fe99 	bl	800689c <BSP_SD_GetCardState>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <SD_write+0x8a>
          {
            res = RES_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	75fb      	strb	r3, [r7, #23]
            break;
 8006b74:	e008      	b.n	8006b88 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006b76:	f7fa fc1f 	bl	80013b8 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	f247 522f 	movw	r2, #29999	; 0x752f
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d9ee      	bls.n	8006b66 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	2000075c 	.word	0x2000075c

08006b98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08c      	sub	sp, #48	; 0x30
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	603a      	str	r2, [r7, #0]
 8006ba2:	71fb      	strb	r3, [r7, #7]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006bae:	4b25      	ldr	r3, [pc, #148]	; (8006c44 <SD_ioctl+0xac>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <SD_ioctl+0x28>
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e03c      	b.n	8006c3a <SD_ioctl+0xa2>

  switch (cmd)
 8006bc0:	79bb      	ldrb	r3, [r7, #6]
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d834      	bhi.n	8006c30 <SD_ioctl+0x98>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <SD_ioctl+0x34>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006be5 	.word	0x08006be5
 8006bd4:	08006bfd 	.word	0x08006bfd
 8006bd8:	08006c17 	.word	0x08006c17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006be2:	e028      	b.n	8006c36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006be4:	f107 030c 	add.w	r3, r7, #12
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff fe67 	bl	80068bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006bfa:	e01c      	b.n	8006c36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006bfc:	f107 030c 	add.w	r3, r7, #12
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7ff fe5b 	bl	80068bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006c14:	e00f      	b.n	8006c36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006c16:	f107 030c 	add.w	r3, r7, #12
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff fe4e 	bl	80068bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	0a5a      	lsrs	r2, r3, #9
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006c2e:	e002      	b.n	8006c36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006c30:	2304      	movs	r3, #4
 8006c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006c36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3730      	adds	r7, #48	; 0x30
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000009 	.word	0x20000009

08006c48 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006c4c:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <BSP_SD_WriteCpltCallback+0x14>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
}
 8006c52:	bf00      	nop
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	2000075c 	.word	0x2000075c

08006c60 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006c64:	4b03      	ldr	r3, [pc, #12]	; (8006c74 <BSP_SD_ReadCpltCallback+0x14>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	601a      	str	r2, [r3, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	20000760 	.word	0x20000760

08006c78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <disk_status+0x30>)
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	79fa      	ldrb	r2, [r7, #7]
 8006c90:	4905      	ldr	r1, [pc, #20]	; (8006ca8 <disk_status+0x30>)
 8006c92:	440a      	add	r2, r1
 8006c94:	7a12      	ldrb	r2, [r2, #8]
 8006c96:	4610      	mov	r0, r2
 8006c98:	4798      	blx	r3
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	2000078c 	.word	0x2000078c

08006cac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	4a0d      	ldr	r2, [pc, #52]	; (8006cf4 <disk_initialize+0x48>)
 8006cbe:	5cd3      	ldrb	r3, [r2, r3]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d111      	bne.n	8006ce8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	4a0b      	ldr	r2, [pc, #44]	; (8006cf4 <disk_initialize+0x48>)
 8006cc8:	2101      	movs	r1, #1
 8006cca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	4a09      	ldr	r2, [pc, #36]	; (8006cf4 <disk_initialize+0x48>)
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	79fa      	ldrb	r2, [r7, #7]
 8006cda:	4906      	ldr	r1, [pc, #24]	; (8006cf4 <disk_initialize+0x48>)
 8006cdc:	440a      	add	r2, r1
 8006cde:	7a12      	ldrb	r2, [r2, #8]
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4798      	blx	r3
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	2000078c 	.word	0x2000078c

08006cf8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	4603      	mov	r3, r0
 8006d06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	4a0a      	ldr	r2, [pc, #40]	; (8006d34 <disk_read+0x3c>)
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	689c      	ldr	r4, [r3, #8]
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <disk_read+0x3c>)
 8006d18:	4413      	add	r3, r2
 8006d1a:	7a18      	ldrb	r0, [r3, #8]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	47a0      	blx	r4
 8006d24:	4603      	mov	r3, r0
 8006d26:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd90      	pop	{r4, r7, pc}
 8006d32:	bf00      	nop
 8006d34:	2000078c 	.word	0x2000078c

08006d38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d38:	b590      	push	{r4, r7, lr}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	607a      	str	r2, [r7, #4]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	4a0a      	ldr	r2, [pc, #40]	; (8006d74 <disk_write+0x3c>)
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	68dc      	ldr	r4, [r3, #12]
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	4a07      	ldr	r2, [pc, #28]	; (8006d74 <disk_write+0x3c>)
 8006d58:	4413      	add	r3, r2
 8006d5a:	7a18      	ldrb	r0, [r3, #8]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	47a0      	blx	r4
 8006d64:	4603      	mov	r3, r0
 8006d66:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd90      	pop	{r4, r7, pc}
 8006d72:	bf00      	nop
 8006d74:	2000078c 	.word	0x2000078c

08006d78 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	603a      	str	r2, [r7, #0]
 8006d82:	71fb      	strb	r3, [r7, #7]
 8006d84:	460b      	mov	r3, r1
 8006d86:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d88:	79fb      	ldrb	r3, [r7, #7]
 8006d8a:	4a09      	ldr	r2, [pc, #36]	; (8006db0 <disk_ioctl+0x38>)
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	79fa      	ldrb	r2, [r7, #7]
 8006d96:	4906      	ldr	r1, [pc, #24]	; (8006db0 <disk_ioctl+0x38>)
 8006d98:	440a      	add	r2, r1
 8006d9a:	7a10      	ldrb	r0, [r2, #8]
 8006d9c:	79b9      	ldrb	r1, [r7, #6]
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	4798      	blx	r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	73fb      	strb	r3, [r7, #15]
  return res;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	2000078c 	.word	0x2000078c

08006db4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006dc4:	89fb      	ldrh	r3, [r7, #14]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	b21a      	sxth	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	b21b      	sxth	r3, r3
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	b21b      	sxth	r3, r3
 8006dd4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006dd6:	89fb      	ldrh	r3, [r7, #14]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3303      	adds	r3, #3
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	021b      	lsls	r3, r3, #8
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	3202      	adds	r2, #2
 8006dfc:	7812      	ldrb	r2, [r2, #0]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	3201      	adds	r2, #1
 8006e0a:	7812      	ldrb	r2, [r2, #0]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	021b      	lsls	r3, r3, #8
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7812      	ldrb	r2, [r2, #0]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
	return rv;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	460b      	mov	r3, r1
 8006e34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	887a      	ldrh	r2, [r7, #2]
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	887b      	ldrh	r3, [r7, #2]
 8006e44:	0a1b      	lsrs	r3, r3, #8
 8006e46:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	607a      	str	r2, [r7, #4]
 8006e4e:	887a      	ldrh	r2, [r7, #2]
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	0a1b      	lsrs	r3, r3, #8
 8006e7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	607a      	str	r2, [r7, #4]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	1c53      	adds	r3, r2, #1
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	1c59      	adds	r1, r3, #1
 8006edc:	6179      	str	r1, [r7, #20]
 8006ede:	7812      	ldrb	r2, [r2, #0]
 8006ee0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	607b      	str	r3, [r7, #4]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f1      	bne.n	8006ed2 <mem_cpy+0x1a>
	}
}
 8006eee:	bf00      	nop
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006efa:	b480      	push	{r7}
 8006efc:	b087      	sub	sp, #28
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	617a      	str	r2, [r7, #20]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	607b      	str	r3, [r7, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f3      	bne.n	8006f0a <mem_set+0x10>
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006f30:	b480      	push	{r7}
 8006f32:	b089      	sub	sp, #36	; 0x24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	61fa      	str	r2, [r7, #28]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	61ba      	str	r2, [r7, #24]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	1acb      	subs	r3, r1, r3
 8006f5c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	607b      	str	r3, [r7, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <mem_cmp+0x40>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0eb      	beq.n	8006f48 <mem_cmp+0x18>

	return r;
 8006f70:	697b      	ldr	r3, [r7, #20]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3724      	adds	r7, #36	; 0x24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006f88:	e002      	b.n	8006f90 <chk_chr+0x12>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	607b      	str	r3, [r7, #4]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <chk_chr+0x26>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d1f2      	bne.n	8006f8a <chk_chr+0xc>
	return *str;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60bb      	str	r3, [r7, #8]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	e029      	b.n	800701c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006fc8:	4a27      	ldr	r2, [pc, #156]	; (8007068 <chk_lock+0xb4>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	4413      	add	r3, r2
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01d      	beq.n	8007012 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006fd6:	4a24      	ldr	r2, [pc, #144]	; (8007068 <chk_lock+0xb4>)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	4413      	add	r3, r2
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d116      	bne.n	8007016 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006fe8:	4a1f      	ldr	r2, [pc, #124]	; (8007068 <chk_lock+0xb4>)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	4413      	add	r3, r2
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d10c      	bne.n	8007016 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ffc:	4a1a      	ldr	r2, [pc, #104]	; (8007068 <chk_lock+0xb4>)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	011b      	lsls	r3, r3, #4
 8007002:	4413      	add	r3, r2
 8007004:	3308      	adds	r3, #8
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800700c:	429a      	cmp	r2, r3
 800700e:	d102      	bne.n	8007016 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007010:	e007      	b.n	8007022 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007012:	2301      	movs	r3, #1
 8007014:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d9d2      	bls.n	8006fc8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d109      	bne.n	800703c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d102      	bne.n	8007034 <chk_lock+0x80>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d101      	bne.n	8007038 <chk_lock+0x84>
 8007034:	2300      	movs	r3, #0
 8007036:	e010      	b.n	800705a <chk_lock+0xa6>
 8007038:	2312      	movs	r3, #18
 800703a:	e00e      	b.n	800705a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d108      	bne.n	8007054 <chk_lock+0xa0>
 8007042:	4a09      	ldr	r2, [pc, #36]	; (8007068 <chk_lock+0xb4>)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	4413      	add	r3, r2
 800704a:	330c      	adds	r3, #12
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007052:	d101      	bne.n	8007058 <chk_lock+0xa4>
 8007054:	2310      	movs	r3, #16
 8007056:	e000      	b.n	800705a <chk_lock+0xa6>
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	2000076c 	.word	0x2000076c

0800706c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007072:	2300      	movs	r3, #0
 8007074:	607b      	str	r3, [r7, #4]
 8007076:	e002      	b.n	800707e <enq_lock+0x12>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3301      	adds	r3, #1
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d806      	bhi.n	8007092 <enq_lock+0x26>
 8007084:	4a09      	ldr	r2, [pc, #36]	; (80070ac <enq_lock+0x40>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	011b      	lsls	r3, r3, #4
 800708a:	4413      	add	r3, r2
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f2      	bne.n	8007078 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b02      	cmp	r3, #2
 8007096:	bf14      	ite	ne
 8007098:	2301      	movne	r3, #1
 800709a:	2300      	moveq	r3, #0
 800709c:	b2db      	uxtb	r3, r3
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	2000076c 	.word	0x2000076c

080070b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	e01f      	b.n	8007100 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80070c0:	4a41      	ldr	r2, [pc, #260]	; (80071c8 <inc_lock+0x118>)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	4413      	add	r3, r2
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d113      	bne.n	80070fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80070d2:	4a3d      	ldr	r2, [pc, #244]	; (80071c8 <inc_lock+0x118>)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	4413      	add	r3, r2
 80070da:	3304      	adds	r3, #4
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d109      	bne.n	80070fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80070e6:	4a38      	ldr	r2, [pc, #224]	; (80071c8 <inc_lock+0x118>)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	4413      	add	r3, r2
 80070ee:	3308      	adds	r3, #8
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d006      	beq.n	8007108 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3301      	adds	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d9dc      	bls.n	80070c0 <inc_lock+0x10>
 8007106:	e000      	b.n	800710a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007108:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d132      	bne.n	8007176 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	e002      	b.n	800711c <inc_lock+0x6c>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	3301      	adds	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d806      	bhi.n	8007130 <inc_lock+0x80>
 8007122:	4a29      	ldr	r2, [pc, #164]	; (80071c8 <inc_lock+0x118>)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	4413      	add	r3, r2
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f2      	bne.n	8007116 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d101      	bne.n	800713a <inc_lock+0x8a>
 8007136:	2300      	movs	r3, #0
 8007138:	e040      	b.n	80071bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	4922      	ldr	r1, [pc, #136]	; (80071c8 <inc_lock+0x118>)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	440b      	add	r3, r1
 8007146:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	491e      	ldr	r1, [pc, #120]	; (80071c8 <inc_lock+0x118>)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	011b      	lsls	r3, r3, #4
 8007152:	440b      	add	r3, r1
 8007154:	3304      	adds	r3, #4
 8007156:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	695a      	ldr	r2, [r3, #20]
 800715c:	491a      	ldr	r1, [pc, #104]	; (80071c8 <inc_lock+0x118>)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	440b      	add	r3, r1
 8007164:	3308      	adds	r3, #8
 8007166:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007168:	4a17      	ldr	r2, [pc, #92]	; (80071c8 <inc_lock+0x118>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	4413      	add	r3, r2
 8007170:	330c      	adds	r3, #12
 8007172:	2200      	movs	r2, #0
 8007174:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <inc_lock+0xe0>
 800717c:	4a12      	ldr	r2, [pc, #72]	; (80071c8 <inc_lock+0x118>)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	4413      	add	r3, r2
 8007184:	330c      	adds	r3, #12
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <inc_lock+0xe0>
 800718c:	2300      	movs	r3, #0
 800718e:	e015      	b.n	80071bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d108      	bne.n	80071a8 <inc_lock+0xf8>
 8007196:	4a0c      	ldr	r2, [pc, #48]	; (80071c8 <inc_lock+0x118>)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	011b      	lsls	r3, r3, #4
 800719c:	4413      	add	r3, r2
 800719e:	330c      	adds	r3, #12
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	e001      	b.n	80071ac <inc_lock+0xfc>
 80071a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071ac:	4906      	ldr	r1, [pc, #24]	; (80071c8 <inc_lock+0x118>)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	440b      	add	r3, r1
 80071b4:	330c      	adds	r3, #12
 80071b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	2000076c 	.word	0x2000076c

080071cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d825      	bhi.n	800722c <dec_lock+0x60>
		n = Files[i].ctr;
 80071e0:	4a17      	ldr	r2, [pc, #92]	; (8007240 <dec_lock+0x74>)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	4413      	add	r3, r2
 80071e8:	330c      	adds	r3, #12
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80071ee:	89fb      	ldrh	r3, [r7, #14]
 80071f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f4:	d101      	bne.n	80071fa <dec_lock+0x2e>
 80071f6:	2300      	movs	r3, #0
 80071f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80071fa:	89fb      	ldrh	r3, [r7, #14]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <dec_lock+0x3a>
 8007200:	89fb      	ldrh	r3, [r7, #14]
 8007202:	3b01      	subs	r3, #1
 8007204:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007206:	4a0e      	ldr	r2, [pc, #56]	; (8007240 <dec_lock+0x74>)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	011b      	lsls	r3, r3, #4
 800720c:	4413      	add	r3, r2
 800720e:	330c      	adds	r3, #12
 8007210:	89fa      	ldrh	r2, [r7, #14]
 8007212:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007214:	89fb      	ldrh	r3, [r7, #14]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d105      	bne.n	8007226 <dec_lock+0x5a>
 800721a:	4a09      	ldr	r2, [pc, #36]	; (8007240 <dec_lock+0x74>)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	4413      	add	r3, r2
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	737b      	strb	r3, [r7, #13]
 800722a:	e001      	b.n	8007230 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800722c:	2302      	movs	r3, #2
 800722e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007230:	7b7b      	ldrb	r3, [r7, #13]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	2000076c 	.word	0x2000076c

08007244 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	e010      	b.n	8007274 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007252:	4a0d      	ldr	r2, [pc, #52]	; (8007288 <clear_lock+0x44>)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	4413      	add	r3, r2
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	429a      	cmp	r2, r3
 8007260:	d105      	bne.n	800726e <clear_lock+0x2a>
 8007262:	4a09      	ldr	r2, [pc, #36]	; (8007288 <clear_lock+0x44>)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	4413      	add	r3, r2
 800726a:	2200      	movs	r2, #0
 800726c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3301      	adds	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d9eb      	bls.n	8007252 <clear_lock+0xe>
	}
}
 800727a:	bf00      	nop
 800727c:	bf00      	nop
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	2000076c 	.word	0x2000076c

0800728c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	78db      	ldrb	r3, [r3, #3]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d034      	beq.n	800730a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	7858      	ldrb	r0, [r3, #1]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072b0:	2301      	movs	r3, #1
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	f7ff fd40 	bl	8006d38 <disk_write>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80072be:	2301      	movs	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
 80072c2:	e022      	b.n	800730a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	1ad2      	subs	r2, r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d217      	bcs.n	800730a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	789b      	ldrb	r3, [r3, #2]
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	e010      	b.n	8007304 <sync_window+0x78>
					wsect += fs->fsize;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4413      	add	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	7858      	ldrb	r0, [r3, #1]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072f6:	2301      	movs	r3, #1
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	f7ff fd1d 	bl	8006d38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	3b01      	subs	r3, #1
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d8eb      	bhi.n	80072e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d01b      	beq.n	8007364 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7ff ffad 	bl	800728c <sync_window>
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d113      	bne.n	8007364 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	7858      	ldrb	r0, [r3, #1]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007346:	2301      	movs	r3, #1
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	f7ff fcd5 	bl	8006cf8 <disk_read>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007354:	f04f 33ff 	mov.w	r3, #4294967295
 8007358:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff ff87 	bl	800728c <sync_window>
 800737e:	4603      	mov	r3, r0
 8007380:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007382:	7bfb      	ldrb	r3, [r7, #15]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d158      	bne.n	800743a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b03      	cmp	r3, #3
 800738e:	d148      	bne.n	8007422 <sync_fs+0xb2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	791b      	ldrb	r3, [r3, #4]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d144      	bne.n	8007422 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	3330      	adds	r3, #48	; 0x30
 800739c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073a0:	2100      	movs	r1, #0
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fda9 	bl	8006efa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3330      	adds	r3, #48	; 0x30
 80073ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073b0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fd38 	bl	8006e2a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3330      	adds	r3, #48	; 0x30
 80073be:	4921      	ldr	r1, [pc, #132]	; (8007444 <sync_fs+0xd4>)
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff fd4d 	bl	8006e60 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3330      	adds	r3, #48	; 0x30
 80073ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073ce:	491e      	ldr	r1, [pc, #120]	; (8007448 <sync_fs+0xd8>)
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff fd45 	bl	8006e60 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3330      	adds	r3, #48	; 0x30
 80073da:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f7ff fd3b 	bl	8006e60 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3330      	adds	r3, #48	; 0x30
 80073ee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7ff fd31 	bl	8006e60 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	7858      	ldrb	r0, [r3, #1]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007416:	2301      	movs	r3, #1
 8007418:	f7ff fc8e 	bl	8006d38 <disk_write>
			fs->fsi_flag = 0;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2200      	movs	r2, #0
 8007428:	2100      	movs	r1, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fca4 	bl	8006d78 <disk_ioctl>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <sync_fs+0xca>
 8007436:	2301      	movs	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	41615252 	.word	0x41615252
 8007448:	61417272 	.word	0x61417272

0800744c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	3b02      	subs	r3, #2
 800745a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	3b02      	subs	r3, #2
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d301      	bcc.n	800746c <clust2sect+0x20>
 8007468:	2300      	movs	r3, #0
 800746a:	e008      	b.n	800747e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	895b      	ldrh	r3, [r3, #10]
 8007470:	461a      	mov	r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	fb03 f202 	mul.w	r2, r3, r2
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	4413      	add	r3, r2
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b086      	sub	sp, #24
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d904      	bls.n	80074aa <get_fat+0x20>
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d302      	bcc.n	80074b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80074aa:	2301      	movs	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	e08f      	b.n	80075d0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074b0:	f04f 33ff 	mov.w	r3, #4294967295
 80074b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d062      	beq.n	8007584 <get_fat+0xfa>
 80074be:	2b03      	cmp	r3, #3
 80074c0:	dc7c      	bgt.n	80075bc <get_fat+0x132>
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d002      	beq.n	80074cc <get_fat+0x42>
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d042      	beq.n	8007550 <get_fat+0xc6>
 80074ca:	e077      	b.n	80075bc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	085b      	lsrs	r3, r3, #1
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4413      	add	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	0a5b      	lsrs	r3, r3, #9
 80074e2:	4413      	add	r3, r2
 80074e4:	4619      	mov	r1, r3
 80074e6:	6938      	ldr	r0, [r7, #16]
 80074e8:	f7ff ff14 	bl	8007314 <move_window>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d167      	bne.n	80075c2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	60fa      	str	r2, [r7, #12]
 80074f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4413      	add	r3, r2
 8007500:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007504:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	6a1a      	ldr	r2, [r3, #32]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	0a5b      	lsrs	r3, r3, #9
 800750e:	4413      	add	r3, r2
 8007510:	4619      	mov	r1, r3
 8007512:	6938      	ldr	r0, [r7, #16]
 8007514:	f7ff fefe 	bl	8007314 <move_window>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d153      	bne.n	80075c6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4413      	add	r3, r2
 8007528:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800752c:	021b      	lsls	r3, r3, #8
 800752e:	461a      	mov	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4313      	orrs	r3, r2
 8007534:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <get_fat+0xbc>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	091b      	lsrs	r3, r3, #4
 8007544:	e002      	b.n	800754c <get_fat+0xc2>
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800754c:	617b      	str	r3, [r7, #20]
			break;
 800754e:	e03f      	b.n	80075d0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	0a1b      	lsrs	r3, r3, #8
 8007558:	4413      	add	r3, r2
 800755a:	4619      	mov	r1, r3
 800755c:	6938      	ldr	r0, [r7, #16]
 800755e:	f7ff fed9 	bl	8007314 <move_window>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d130      	bne.n	80075ca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007576:	4413      	add	r3, r2
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff fc1b 	bl	8006db4 <ld_word>
 800757e:	4603      	mov	r3, r0
 8007580:	617b      	str	r3, [r7, #20]
			break;
 8007582:	e025      	b.n	80075d0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6a1a      	ldr	r2, [r3, #32]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	09db      	lsrs	r3, r3, #7
 800758c:	4413      	add	r3, r2
 800758e:	4619      	mov	r1, r3
 8007590:	6938      	ldr	r0, [r7, #16]
 8007592:	f7ff febf 	bl	8007314 <move_window>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d118      	bne.n	80075ce <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075aa:	4413      	add	r3, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fc19 	bl	8006de4 <ld_dword>
 80075b2:	4603      	mov	r3, r0
 80075b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80075b8:	617b      	str	r3, [r7, #20]
			break;
 80075ba:	e009      	b.n	80075d0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80075bc:	2301      	movs	r3, #1
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	e006      	b.n	80075d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075c2:	bf00      	nop
 80075c4:	e004      	b.n	80075d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075c6:	bf00      	nop
 80075c8:	e002      	b.n	80075d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075ca:	bf00      	nop
 80075cc:	e000      	b.n	80075d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075ce:	bf00      	nop
		}
	}

	return val;
 80075d0:	697b      	ldr	r3, [r7, #20]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80075da:	b590      	push	{r4, r7, lr}
 80075dc:	b089      	sub	sp, #36	; 0x24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80075e6:	2302      	movs	r3, #2
 80075e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	f240 80d2 	bls.w	8007796 <put_fat+0x1bc>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	f080 80cc 	bcs.w	8007796 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b03      	cmp	r3, #3
 8007604:	f000 8096 	beq.w	8007734 <put_fat+0x15a>
 8007608:	2b03      	cmp	r3, #3
 800760a:	f300 80cd 	bgt.w	80077a8 <put_fat+0x1ce>
 800760e:	2b01      	cmp	r3, #1
 8007610:	d002      	beq.n	8007618 <put_fat+0x3e>
 8007612:	2b02      	cmp	r3, #2
 8007614:	d06e      	beq.n	80076f4 <put_fat+0x11a>
 8007616:	e0c7      	b.n	80077a8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	61bb      	str	r3, [r7, #24]
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	085b      	lsrs	r3, r3, #1
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4413      	add	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a1a      	ldr	r2, [r3, #32]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	0a5b      	lsrs	r3, r3, #9
 800762e:	4413      	add	r3, r2
 8007630:	4619      	mov	r1, r3
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fe6e 	bl	8007314 <move_window>
 8007638:	4603      	mov	r3, r0
 800763a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800763c:	7ffb      	ldrb	r3, [r7, #31]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f040 80ab 	bne.w	800779a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	1c59      	adds	r1, r3, #1
 800764e:	61b9      	str	r1, [r7, #24]
 8007650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007654:	4413      	add	r3, r2
 8007656:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00d      	beq.n	800767e <put_fat+0xa4>
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	b25b      	sxtb	r3, r3
 8007668:	f003 030f 	and.w	r3, r3, #15
 800766c:	b25a      	sxtb	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	b25b      	sxtb	r3, r3
 8007676:	4313      	orrs	r3, r2
 8007678:	b25b      	sxtb	r3, r3
 800767a:	b2db      	uxtb	r3, r3
 800767c:	e001      	b.n	8007682 <put_fat+0xa8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a1a      	ldr	r2, [r3, #32]
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	0a5b      	lsrs	r3, r3, #9
 8007694:	4413      	add	r3, r2
 8007696:	4619      	mov	r1, r3
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7ff fe3b 	bl	8007314 <move_window>
 800769e:	4603      	mov	r3, r0
 80076a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076a2:	7ffb      	ldrb	r3, [r7, #31]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d17a      	bne.n	800779e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b4:	4413      	add	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <put_fat+0xf0>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	091b      	lsrs	r3, r3, #4
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	e00e      	b.n	80076e8 <put_fat+0x10e>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	b25b      	sxtb	r3, r3
 80076d0:	f023 030f 	bic.w	r3, r3, #15
 80076d4:	b25a      	sxtb	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	0a1b      	lsrs	r3, r3, #8
 80076da:	b25b      	sxtb	r3, r3
 80076dc:	f003 030f 	and.w	r3, r3, #15
 80076e0:	b25b      	sxtb	r3, r3
 80076e2:	4313      	orrs	r3, r2
 80076e4:	b25b      	sxtb	r3, r3
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	70da      	strb	r2, [r3, #3]
			break;
 80076f2:	e059      	b.n	80077a8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a1a      	ldr	r2, [r3, #32]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	0a1b      	lsrs	r3, r3, #8
 80076fc:	4413      	add	r3, r2
 80076fe:	4619      	mov	r1, r3
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f7ff fe07 	bl	8007314 <move_window>
 8007706:	4603      	mov	r3, r0
 8007708:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800770a:	7ffb      	ldrb	r3, [r7, #31]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d148      	bne.n	80077a2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800771e:	4413      	add	r3, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	b292      	uxth	r2, r2
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fb7f 	bl	8006e2a <st_word>
			fs->wflag = 1;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	70da      	strb	r2, [r3, #3]
			break;
 8007732:	e039      	b.n	80077a8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6a1a      	ldr	r2, [r3, #32]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	09db      	lsrs	r3, r3, #7
 800773c:	4413      	add	r3, r2
 800773e:	4619      	mov	r1, r3
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff fde7 	bl	8007314 <move_window>
 8007746:	4603      	mov	r3, r0
 8007748:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800774a:	7ffb      	ldrb	r3, [r7, #31]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d12a      	bne.n	80077a6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007764:	4413      	add	r3, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fb3c 	bl	8006de4 <ld_dword>
 800776c:	4603      	mov	r3, r0
 800776e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007772:	4323      	orrs	r3, r4
 8007774:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007784:	4413      	add	r3, r2
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4618      	mov	r0, r3
 800778a:	f7ff fb69 	bl	8006e60 <st_dword>
			fs->wflag = 1;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	70da      	strb	r2, [r3, #3]
			break;
 8007794:	e008      	b.n	80077a8 <put_fat+0x1ce>
		}
	}
 8007796:	bf00      	nop
 8007798:	e006      	b.n	80077a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800779a:	bf00      	nop
 800779c:	e004      	b.n	80077a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800779e:	bf00      	nop
 80077a0:	e002      	b.n	80077a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077a2:	bf00      	nop
 80077a4:	e000      	b.n	80077a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077a6:	bf00      	nop
	return res;
 80077a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3724      	adds	r7, #36	; 0x24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd90      	pop	{r4, r7, pc}

080077b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b088      	sub	sp, #32
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d904      	bls.n	80077d8 <remove_chain+0x26>
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d301      	bcc.n	80077dc <remove_chain+0x2a>
 80077d8:	2302      	movs	r3, #2
 80077da:	e04b      	b.n	8007874 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00c      	beq.n	80077fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80077e2:	f04f 32ff 	mov.w	r2, #4294967295
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	69b8      	ldr	r0, [r7, #24]
 80077ea:	f7ff fef6 	bl	80075da <put_fat>
 80077ee:	4603      	mov	r3, r0
 80077f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80077f2:	7ffb      	ldrb	r3, [r7, #31]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <remove_chain+0x4a>
 80077f8:	7ffb      	ldrb	r3, [r7, #31]
 80077fa:	e03b      	b.n	8007874 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff fe43 	bl	800748a <get_fat>
 8007804:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d031      	beq.n	8007870 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d101      	bne.n	8007816 <remove_chain+0x64>
 8007812:	2302      	movs	r3, #2
 8007814:	e02e      	b.n	8007874 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781c:	d101      	bne.n	8007822 <remove_chain+0x70>
 800781e:	2301      	movs	r3, #1
 8007820:	e028      	b.n	8007874 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007822:	2200      	movs	r2, #0
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	69b8      	ldr	r0, [r7, #24]
 8007828:	f7ff fed7 	bl	80075da <put_fat>
 800782c:	4603      	mov	r3, r0
 800782e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007830:	7ffb      	ldrb	r3, [r7, #31]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <remove_chain+0x88>
 8007836:	7ffb      	ldrb	r3, [r7, #31]
 8007838:	e01c      	b.n	8007874 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	691a      	ldr	r2, [r3, #16]
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	3b02      	subs	r3, #2
 8007844:	429a      	cmp	r2, r3
 8007846:	d20b      	bcs.n	8007860 <remove_chain+0xae>
			fs->free_clst++;
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	791b      	ldrb	r3, [r3, #4]
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	b2da      	uxtb	r2, r3
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	429a      	cmp	r2, r3
 800786c:	d3c6      	bcc.n	80077fc <remove_chain+0x4a>
 800786e:	e000      	b.n	8007872 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007870:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3720      	adds	r7, #32
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10d      	bne.n	80078ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d004      	beq.n	80078a8 <create_chain+0x2c>
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d31b      	bcc.n	80078e0 <create_chain+0x64>
 80078a8:	2301      	movs	r3, #1
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	e018      	b.n	80078e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff fdea 	bl	800748a <get_fat>
 80078b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d801      	bhi.n	80078c2 <create_chain+0x46>
 80078be:	2301      	movs	r3, #1
 80078c0:	e070      	b.n	80079a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d101      	bne.n	80078ce <create_chain+0x52>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	e06a      	b.n	80079a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d201      	bcs.n	80078dc <create_chain+0x60>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	e063      	b.n	80079a4 <create_chain+0x128>
		scl = clst;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	3301      	adds	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d307      	bcc.n	8007904 <create_chain+0x88>
				ncl = 2;
 80078f4:	2302      	movs	r3, #2
 80078f6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d901      	bls.n	8007904 <create_chain+0x88>
 8007900:	2300      	movs	r3, #0
 8007902:	e04f      	b.n	80079a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007904:	69f9      	ldr	r1, [r7, #28]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fdbf 	bl	800748a <get_fat>
 800790c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00e      	beq.n	8007932 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d003      	beq.n	8007922 <create_chain+0xa6>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d101      	bne.n	8007926 <create_chain+0xaa>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	e03e      	b.n	80079a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	429a      	cmp	r2, r3
 800792c:	d1da      	bne.n	80078e4 <create_chain+0x68>
 800792e:	2300      	movs	r3, #0
 8007930:	e038      	b.n	80079a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007932:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007934:	f04f 32ff 	mov.w	r2, #4294967295
 8007938:	69f9      	ldr	r1, [r7, #28]
 800793a:	6938      	ldr	r0, [r7, #16]
 800793c:	f7ff fe4d 	bl	80075da <put_fat>
 8007940:	4603      	mov	r3, r0
 8007942:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d109      	bne.n	800795e <create_chain+0xe2>
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d006      	beq.n	800795e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6938      	ldr	r0, [r7, #16]
 8007956:	f7ff fe40 	bl	80075da <put_fat>
 800795a:	4603      	mov	r3, r0
 800795c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800795e:	7dfb      	ldrb	r3, [r7, #23]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d116      	bne.n	8007992 <create_chain+0x116>
		fs->last_clst = ncl;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	691a      	ldr	r2, [r3, #16]
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	3b02      	subs	r3, #2
 8007974:	429a      	cmp	r2, r3
 8007976:	d804      	bhi.n	8007982 <create_chain+0x106>
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	1e5a      	subs	r2, r3, #1
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	791b      	ldrb	r3, [r3, #4]
 8007986:	f043 0301 	orr.w	r3, r3, #1
 800798a:	b2da      	uxtb	r2, r3
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	711a      	strb	r2, [r3, #4]
 8007990:	e007      	b.n	80079a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d102      	bne.n	800799e <create_chain+0x122>
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
 800799c:	e000      	b.n	80079a0 <create_chain+0x124>
 800799e:	2301      	movs	r3, #1
 80079a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80079a2:	69fb      	ldr	r3, [r7, #28]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3720      	adds	r7, #32
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	3304      	adds	r3, #4
 80079c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	0a5b      	lsrs	r3, r3, #9
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	8952      	ldrh	r2, [r2, #10]
 80079cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1d1a      	adds	r2, r3, #4
 80079d6:	613a      	str	r2, [r7, #16]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <clmt_clust+0x3a>
 80079e2:	2300      	movs	r3, #0
 80079e4:	e010      	b.n	8007a08 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d307      	bcc.n	80079fe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	617b      	str	r3, [r7, #20]
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	3304      	adds	r3, #4
 80079fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079fc:	e7e9      	b.n	80079d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80079fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	4413      	add	r3, r2
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a2a:	d204      	bcs.n	8007a36 <dir_sdi+0x22>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007a36:	2302      	movs	r3, #2
 8007a38:	e063      	b.n	8007b02 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d106      	bne.n	8007a5a <dir_sdi+0x46>
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d902      	bls.n	8007a5a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10c      	bne.n	8007a7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	095b      	lsrs	r3, r3, #5
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	8912      	ldrh	r2, [r2, #8]
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d301      	bcc.n	8007a70 <dir_sdi+0x5c>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e048      	b.n	8007b02 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	61da      	str	r2, [r3, #28]
 8007a78:	e029      	b.n	8007ace <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	895b      	ldrh	r3, [r3, #10]
 8007a7e:	025b      	lsls	r3, r3, #9
 8007a80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a82:	e019      	b.n	8007ab8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6979      	ldr	r1, [r7, #20]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff fcfe 	bl	800748a <get_fat>
 8007a8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d101      	bne.n	8007a9c <dir_sdi+0x88>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e032      	b.n	8007b02 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d904      	bls.n	8007aac <dir_sdi+0x98>
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d301      	bcc.n	8007ab0 <dir_sdi+0x9c>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e028      	b.n	8007b02 <dir_sdi+0xee>
			ofs -= csz;
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d2e1      	bcs.n	8007a84 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007ac0:	6979      	ldr	r1, [r7, #20]
 8007ac2:	6938      	ldr	r0, [r7, #16]
 8007ac4:	f7ff fcc2 	bl	800744c <clust2sect>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <dir_sdi+0xcc>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e010      	b.n	8007b02 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	0a5b      	lsrs	r3, r3, #9
 8007ae8:	441a      	add	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afa:	441a      	add	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b086      	sub	sp, #24
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	3320      	adds	r3, #32
 8007b20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <dir_next+0x28>
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b30:	d301      	bcc.n	8007b36 <dir_next+0x2c>
 8007b32:	2304      	movs	r3, #4
 8007b34:	e0aa      	b.n	8007c8c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f040 8098 	bne.w	8007c72 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10b      	bne.n	8007b6c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	8912      	ldrh	r2, [r2, #8]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	f0c0 8088 	bcc.w	8007c72 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	61da      	str	r2, [r3, #28]
 8007b68:	2304      	movs	r3, #4
 8007b6a:	e08f      	b.n	8007c8c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	0a5b      	lsrs	r3, r3, #9
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	8952      	ldrh	r2, [r2, #10]
 8007b74:	3a01      	subs	r2, #1
 8007b76:	4013      	ands	r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d17a      	bne.n	8007c72 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7ff fc80 	bl	800748a <get_fat>
 8007b8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d801      	bhi.n	8007b96 <dir_next+0x8c>
 8007b92:	2302      	movs	r3, #2
 8007b94:	e07a      	b.n	8007c8c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9c:	d101      	bne.n	8007ba2 <dir_next+0x98>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e074      	b.n	8007c8c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d358      	bcc.n	8007c5e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d104      	bne.n	8007bbc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	61da      	str	r2, [r3, #28]
 8007bb8:	2304      	movs	r3, #4
 8007bba:	e067      	b.n	8007c8c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4610      	mov	r0, r2
 8007bc6:	f7ff fe59 	bl	800787c <create_chain>
 8007bca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <dir_next+0xcc>
 8007bd2:	2307      	movs	r3, #7
 8007bd4:	e05a      	b.n	8007c8c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <dir_next+0xd6>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e055      	b.n	8007c8c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be6:	d101      	bne.n	8007bec <dir_next+0xe2>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e04f      	b.n	8007c8c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f7ff fb4d 	bl	800728c <sync_window>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <dir_next+0xf2>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e047      	b.n	8007c8c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3330      	adds	r3, #48	; 0x30
 8007c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff f977 	bl	8006efa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	6979      	ldr	r1, [r7, #20]
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff fc1a 	bl	800744c <clust2sect>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c1e:	e012      	b.n	8007c46 <dir_next+0x13c>
						fs->wflag = 1;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7ff fb30 	bl	800728c <sync_window>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <dir_next+0x12c>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e02a      	b.n	8007c8c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	613b      	str	r3, [r7, #16]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	895b      	ldrh	r3, [r3, #10]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d3e6      	bcc.n	8007c20 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad2      	subs	r2, r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007c64:	6979      	ldr	r1, [r7, #20]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fbf0 	bl	800744c <clust2sect>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c84:	441a      	add	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff feb4 	bl	8007a14 <dir_sdi>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d12b      	bne.n	8007d0e <dir_alloc+0x7a>
		n = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff fb27 	bl	8007314 <move_window>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d11d      	bne.n	8007d0c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2be5      	cmp	r3, #229	; 0xe5
 8007cd8:	d004      	beq.n	8007ce4 <dir_alloc+0x50>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d107      	bne.n	8007cf4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	613b      	str	r3, [r7, #16]
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d102      	bne.n	8007cf8 <dir_alloc+0x64>
 8007cf2:	e00c      	b.n	8007d0e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff ff05 	bl	8007b0a <dir_next>
 8007d00:	4603      	mov	r3, r0
 8007d02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0d7      	beq.n	8007cba <dir_alloc+0x26>
 8007d0a:	e000      	b.n	8007d0e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007d0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d101      	bne.n	8007d18 <dir_alloc+0x84>
 8007d14:	2307      	movs	r3, #7
 8007d16:	75fb      	strb	r3, [r7, #23]
	return res;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	331a      	adds	r3, #26
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff f83f 	bl	8006db4 <ld_word>
 8007d36:	4603      	mov	r3, r0
 8007d38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d109      	bne.n	8007d56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	3314      	adds	r3, #20
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff f834 	bl	8006db4 <ld_word>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	041b      	lsls	r3, r3, #16
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007d56:	68fb      	ldr	r3, [r7, #12]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	331a      	adds	r3, #26
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	b292      	uxth	r2, r2
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff f857 	bl	8006e2a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d109      	bne.n	8007d98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f103 0214 	add.w	r2, r3, #20
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	0c1b      	lsrs	r3, r3, #16
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	4610      	mov	r0, r2
 8007d94:	f7ff f849 	bl	8006e2a <st_word>
	}
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007dae:	2100      	movs	r1, #0
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff fe2f 	bl	8007a14 <dir_sdi>
 8007db6:	4603      	mov	r3, r0
 8007db8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <dir_find+0x24>
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	e03e      	b.n	8007e42 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6938      	ldr	r0, [r7, #16]
 8007dcc:	f7ff faa2 	bl	8007314 <move_window>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d12f      	bne.n	8007e3a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <dir_find+0x4e>
 8007de8:	2304      	movs	r3, #4
 8007dea:	75fb      	strb	r3, [r7, #23]
 8007dec:	e028      	b.n	8007e40 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	330b      	adds	r3, #11
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a1b      	ldr	r3, [r3, #32]
 8007e04:	330b      	adds	r3, #11
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	f003 0308 	and.w	r3, r3, #8
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <dir_find+0x86>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a18      	ldr	r0, [r3, #32]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3324      	adds	r3, #36	; 0x24
 8007e18:	220b      	movs	r2, #11
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	f7ff f888 	bl	8006f30 <mem_cmp>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007e26:	2100      	movs	r1, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff fe6e 	bl	8007b0a <dir_next>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0c5      	beq.n	8007dc4 <dir_find+0x24>
 8007e38:	e002      	b.n	8007e40 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e3e:	bf00      	nop

	return res;
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b084      	sub	sp, #16
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007e58:	2101      	movs	r1, #1
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff ff1a 	bl	8007c94 <dir_alloc>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d11c      	bne.n	8007ea4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	68b8      	ldr	r0, [r7, #8]
 8007e72:	f7ff fa4f 	bl	8007314 <move_window>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d111      	bne.n	8007ea4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	2220      	movs	r2, #32
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff f836 	bl	8006efa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a18      	ldr	r0, [r3, #32]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3324      	adds	r3, #36	; 0x24
 8007e96:	220b      	movs	r2, #11
 8007e98:	4619      	mov	r1, r3
 8007e9a:	f7ff f80d 	bl	8006eb8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3324      	adds	r3, #36	; 0x24
 8007ec4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007ec6:	220b      	movs	r2, #11
 8007ec8:	2120      	movs	r1, #32
 8007eca:	68b8      	ldr	r0, [r7, #8]
 8007ecc:	f7ff f815 	bl	8006efa <mem_set>
	si = i = 0; ni = 8;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	613b      	str	r3, [r7, #16]
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	2308      	movs	r3, #8
 8007eda:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	61fa      	str	r2, [r7, #28]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007eea:	7efb      	ldrb	r3, [r7, #27]
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d94e      	bls.n	8007f8e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007ef0:	7efb      	ldrb	r3, [r7, #27]
 8007ef2:	2b2f      	cmp	r3, #47	; 0x2f
 8007ef4:	d006      	beq.n	8007f04 <create_name+0x54>
 8007ef6:	7efb      	ldrb	r3, [r7, #27]
 8007ef8:	2b5c      	cmp	r3, #92	; 0x5c
 8007efa:	d110      	bne.n	8007f1e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007efc:	e002      	b.n	8007f04 <create_name+0x54>
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	3301      	adds	r3, #1
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	4413      	add	r3, r2
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b2f      	cmp	r3, #47	; 0x2f
 8007f0e:	d0f6      	beq.n	8007efe <create_name+0x4e>
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b5c      	cmp	r3, #92	; 0x5c
 8007f1a:	d0f0      	beq.n	8007efe <create_name+0x4e>
			break;
 8007f1c:	e038      	b.n	8007f90 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007f1e:	7efb      	ldrb	r3, [r7, #27]
 8007f20:	2b2e      	cmp	r3, #46	; 0x2e
 8007f22:	d003      	beq.n	8007f2c <create_name+0x7c>
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d30c      	bcc.n	8007f46 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b0b      	cmp	r3, #11
 8007f30:	d002      	beq.n	8007f38 <create_name+0x88>
 8007f32:	7efb      	ldrb	r3, [r7, #27]
 8007f34:	2b2e      	cmp	r3, #46	; 0x2e
 8007f36:	d001      	beq.n	8007f3c <create_name+0x8c>
 8007f38:	2306      	movs	r3, #6
 8007f3a:	e044      	b.n	8007fc6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007f3c:	2308      	movs	r3, #8
 8007f3e:	613b      	str	r3, [r7, #16]
 8007f40:	230b      	movs	r3, #11
 8007f42:	617b      	str	r3, [r7, #20]
			continue;
 8007f44:	e022      	b.n	8007f8c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007f46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	da04      	bge.n	8007f58 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007f4e:	7efb      	ldrb	r3, [r7, #27]
 8007f50:	3b80      	subs	r3, #128	; 0x80
 8007f52:	4a1f      	ldr	r2, [pc, #124]	; (8007fd0 <create_name+0x120>)
 8007f54:	5cd3      	ldrb	r3, [r2, r3]
 8007f56:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007f58:	7efb      	ldrb	r3, [r7, #27]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	481d      	ldr	r0, [pc, #116]	; (8007fd4 <create_name+0x124>)
 8007f5e:	f7ff f80e 	bl	8006f7e <chk_chr>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <create_name+0xbc>
 8007f68:	2306      	movs	r3, #6
 8007f6a:	e02c      	b.n	8007fc6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007f6c:	7efb      	ldrb	r3, [r7, #27]
 8007f6e:	2b60      	cmp	r3, #96	; 0x60
 8007f70:	d905      	bls.n	8007f7e <create_name+0xce>
 8007f72:	7efb      	ldrb	r3, [r7, #27]
 8007f74:	2b7a      	cmp	r3, #122	; 0x7a
 8007f76:	d802      	bhi.n	8007f7e <create_name+0xce>
 8007f78:	7efb      	ldrb	r3, [r7, #27]
 8007f7a:	3b20      	subs	r3, #32
 8007f7c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1c5a      	adds	r2, r3, #1
 8007f82:	613a      	str	r2, [r7, #16]
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	4413      	add	r3, r2
 8007f88:	7efa      	ldrb	r2, [r7, #27]
 8007f8a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007f8c:	e7a6      	b.n	8007edc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f8e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	441a      	add	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <create_name+0xf4>
 8007fa0:	2306      	movs	r3, #6
 8007fa2:	e010      	b.n	8007fc6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2be5      	cmp	r3, #229	; 0xe5
 8007faa:	d102      	bne.n	8007fb2 <create_name+0x102>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2205      	movs	r2, #5
 8007fb0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007fb2:	7efb      	ldrb	r3, [r7, #27]
 8007fb4:	2b20      	cmp	r3, #32
 8007fb6:	d801      	bhi.n	8007fbc <create_name+0x10c>
 8007fb8:	2204      	movs	r2, #4
 8007fba:	e000      	b.n	8007fbe <create_name+0x10e>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	330b      	adds	r3, #11
 8007fc2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007fc4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	0800ac5c 	.word	0x0800ac5c
 8007fd4:	0800abe4 	.word	0x0800abe4

08007fd8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007fec:	e002      	b.n	8007ff4 <follow_path+0x1c>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b2f      	cmp	r3, #47	; 0x2f
 8007ffa:	d0f8      	beq.n	8007fee <follow_path+0x16>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b5c      	cmp	r3, #92	; 0x5c
 8008002:	d0f4      	beq.n	8007fee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	2200      	movs	r2, #0
 8008008:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	2b1f      	cmp	r3, #31
 8008010:	d80a      	bhi.n	8008028 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2280      	movs	r2, #128	; 0x80
 8008016:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800801a:	2100      	movs	r1, #0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7ff fcf9 	bl	8007a14 <dir_sdi>
 8008022:	4603      	mov	r3, r0
 8008024:	75fb      	strb	r3, [r7, #23]
 8008026:	e043      	b.n	80080b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008028:	463b      	mov	r3, r7
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff ff3f 	bl	8007eb0 <create_name>
 8008032:	4603      	mov	r3, r0
 8008034:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d134      	bne.n	80080a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff feaf 	bl	8007da0 <dir_find>
 8008042:	4603      	mov	r3, r0
 8008044:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800804c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00a      	beq.n	800806a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008054:	7dfb      	ldrb	r3, [r7, #23]
 8008056:	2b04      	cmp	r3, #4
 8008058:	d127      	bne.n	80080aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800805a:	7afb      	ldrb	r3, [r7, #11]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d122      	bne.n	80080aa <follow_path+0xd2>
 8008064:	2305      	movs	r3, #5
 8008066:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008068:	e01f      	b.n	80080aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800806a:	7afb      	ldrb	r3, [r7, #11]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11c      	bne.n	80080ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	799b      	ldrb	r3, [r3, #6]
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008080:	2305      	movs	r3, #5
 8008082:	75fb      	strb	r3, [r7, #23]
 8008084:	e014      	b.n	80080b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008094:	4413      	add	r3, r2
 8008096:	4619      	mov	r1, r3
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff fe42 	bl	8007d22 <ld_clust>
 800809e:	4602      	mov	r2, r0
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080a4:	e7c0      	b.n	8008028 <follow_path+0x50>
			if (res != FR_OK) break;
 80080a6:	bf00      	nop
 80080a8:	e002      	b.n	80080b0 <follow_path+0xd8>
				break;
 80080aa:	bf00      	nop
 80080ac:	e000      	b.n	80080b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80080ae:	bf00      	nop
			}
		}
	}

	return res;
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b087      	sub	sp, #28
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80080c2:	f04f 33ff 	mov.w	r3, #4294967295
 80080c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d031      	beq.n	8008134 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	e002      	b.n	80080de <get_ldnumber+0x24>
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	3301      	adds	r3, #1
 80080dc:	617b      	str	r3, [r7, #20]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d903      	bls.n	80080ee <get_ldnumber+0x34>
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b3a      	cmp	r3, #58	; 0x3a
 80080ec:	d1f4      	bne.n	80080d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	2b3a      	cmp	r3, #58	; 0x3a
 80080f4:	d11c      	bne.n	8008130 <get_ldnumber+0x76>
			tp = *path;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	60fa      	str	r2, [r7, #12]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	3b30      	subs	r3, #48	; 0x30
 8008106:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2b09      	cmp	r3, #9
 800810c:	d80e      	bhi.n	800812c <get_ldnumber+0x72>
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	429a      	cmp	r2, r3
 8008114:	d10a      	bne.n	800812c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d107      	bne.n	800812c <get_ldnumber+0x72>
					vol = (int)i;
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	3301      	adds	r3, #1
 8008124:	617b      	str	r3, [r7, #20]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	e002      	b.n	8008136 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008130:	2300      	movs	r3, #0
 8008132:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008134:	693b      	ldr	r3, [r7, #16]
}
 8008136:	4618      	mov	r0, r3
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	70da      	strb	r2, [r3, #3]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff f8d8 	bl	8007314 <move_window>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <check_fs+0x2a>
 800816a:	2304      	movs	r3, #4
 800816c:	e038      	b.n	80081e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	3330      	adds	r3, #48	; 0x30
 8008172:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fe1c 	bl	8006db4 <ld_word>
 800817c:	4603      	mov	r3, r0
 800817e:	461a      	mov	r2, r3
 8008180:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008184:	429a      	cmp	r2, r3
 8008186:	d001      	beq.n	800818c <check_fs+0x48>
 8008188:	2303      	movs	r3, #3
 800818a:	e029      	b.n	80081e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008192:	2be9      	cmp	r3, #233	; 0xe9
 8008194:	d009      	beq.n	80081aa <check_fs+0x66>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800819c:	2beb      	cmp	r3, #235	; 0xeb
 800819e:	d11e      	bne.n	80081de <check_fs+0x9a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80081a6:	2b90      	cmp	r3, #144	; 0x90
 80081a8:	d119      	bne.n	80081de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3330      	adds	r3, #48	; 0x30
 80081ae:	3336      	adds	r3, #54	; 0x36
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe fe17 	bl	8006de4 <ld_dword>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081bc:	4a0a      	ldr	r2, [pc, #40]	; (80081e8 <check_fs+0xa4>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d101      	bne.n	80081c6 <check_fs+0x82>
 80081c2:	2300      	movs	r3, #0
 80081c4:	e00c      	b.n	80081e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3330      	adds	r3, #48	; 0x30
 80081ca:	3352      	adds	r3, #82	; 0x52
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe fe09 	bl	8006de4 <ld_dword>
 80081d2:	4603      	mov	r3, r0
 80081d4:	4a05      	ldr	r2, [pc, #20]	; (80081ec <check_fs+0xa8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d101      	bne.n	80081de <check_fs+0x9a>
 80081da:	2300      	movs	r3, #0
 80081dc:	e000      	b.n	80081e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80081de:	2302      	movs	r3, #2
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	00544146 	.word	0x00544146
 80081ec:	33544146 	.word	0x33544146

080081f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b096      	sub	sp, #88	; 0x58
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff ff58 	bl	80080ba <get_ldnumber>
 800820a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800820c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820e:	2b00      	cmp	r3, #0
 8008210:	da01      	bge.n	8008216 <find_volume+0x26>
 8008212:	230b      	movs	r3, #11
 8008214:	e22d      	b.n	8008672 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008216:	4aa1      	ldr	r2, [pc, #644]	; (800849c <find_volume+0x2ac>)
 8008218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800821e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <find_volume+0x3a>
 8008226:	230c      	movs	r3, #12
 8008228:	e223      	b.n	8008672 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800822e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	f023 0301 	bic.w	r3, r3, #1
 8008236:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01a      	beq.n	8008276 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	4618      	mov	r0, r3
 8008246:	f7fe fd17 	bl	8006c78 <disk_status>
 800824a:	4603      	mov	r3, r0
 800824c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008250:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10c      	bne.n	8008276 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d007      	beq.n	8008272 <find_volume+0x82>
 8008262:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800826e:	230a      	movs	r3, #10
 8008270:	e1ff      	b.n	8008672 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008272:	2300      	movs	r3, #0
 8008274:	e1fd      	b.n	8008672 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	2200      	movs	r2, #0
 800827a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800827c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827e:	b2da      	uxtb	r2, r3
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fd0f 	bl	8006cac <disk_initialize>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80082a0:	2303      	movs	r3, #3
 80082a2:	e1e6      	b.n	8008672 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <find_volume+0xca>
 80082aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80082b6:	230a      	movs	r3, #10
 80082b8:	e1db      	b.n	8008672 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80082be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082c2:	f7ff ff3f 	bl	8008144 <check_fs>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80082cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d149      	bne.n	8008368 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082d4:	2300      	movs	r3, #0
 80082d6:	643b      	str	r3, [r7, #64]	; 0x40
 80082d8:	e01e      	b.n	8008318 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e2:	011b      	lsls	r3, r3, #4
 80082e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80082e8:	4413      	add	r3, r2
 80082ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	3304      	adds	r3, #4
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d006      	beq.n	8008304 <find_volume+0x114>
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	3308      	adds	r3, #8
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe fd72 	bl	8006de4 <ld_dword>
 8008300:	4602      	mov	r2, r0
 8008302:	e000      	b.n	8008306 <find_volume+0x116>
 8008304:	2200      	movs	r2, #0
 8008306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	3358      	adds	r3, #88	; 0x58
 800830c:	443b      	add	r3, r7
 800830e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008314:	3301      	adds	r3, #1
 8008316:	643b      	str	r3, [r7, #64]	; 0x40
 8008318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800831a:	2b03      	cmp	r3, #3
 800831c:	d9dd      	bls.n	80082da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800831e:	2300      	movs	r3, #0
 8008320:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <find_volume+0x13e>
 8008328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832a:	3b01      	subs	r3, #1
 800832c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800832e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	3358      	adds	r3, #88	; 0x58
 8008334:	443b      	add	r3, r7
 8008336:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800833a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800833c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800833e:	2b00      	cmp	r3, #0
 8008340:	d005      	beq.n	800834e <find_volume+0x15e>
 8008342:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008346:	f7ff fefd 	bl	8008144 <check_fs>
 800834a:	4603      	mov	r3, r0
 800834c:	e000      	b.n	8008350 <find_volume+0x160>
 800834e:	2303      	movs	r3, #3
 8008350:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008358:	2b01      	cmp	r3, #1
 800835a:	d905      	bls.n	8008368 <find_volume+0x178>
 800835c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800835e:	3301      	adds	r3, #1
 8008360:	643b      	str	r3, [r7, #64]	; 0x40
 8008362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008364:	2b03      	cmp	r3, #3
 8008366:	d9e2      	bls.n	800832e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800836c:	2b04      	cmp	r3, #4
 800836e:	d101      	bne.n	8008374 <find_volume+0x184>
 8008370:	2301      	movs	r3, #1
 8008372:	e17e      	b.n	8008672 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008378:	2b01      	cmp	r3, #1
 800837a:	d901      	bls.n	8008380 <find_volume+0x190>
 800837c:	230d      	movs	r3, #13
 800837e:	e178      	b.n	8008672 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	3330      	adds	r3, #48	; 0x30
 8008384:	330b      	adds	r3, #11
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe fd14 	bl	8006db4 <ld_word>
 800838c:	4603      	mov	r3, r0
 800838e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008392:	d001      	beq.n	8008398 <find_volume+0x1a8>
 8008394:	230d      	movs	r3, #13
 8008396:	e16c      	b.n	8008672 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	3330      	adds	r3, #48	; 0x30
 800839c:	3316      	adds	r3, #22
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe fd08 	bl	8006db4 <ld_word>
 80083a4:	4603      	mov	r3, r0
 80083a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80083a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d106      	bne.n	80083bc <find_volume+0x1cc>
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	3330      	adds	r3, #48	; 0x30
 80083b2:	3324      	adds	r3, #36	; 0x24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe fd15 	bl	8006de4 <ld_dword>
 80083ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	789b      	ldrb	r3, [r3, #2]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d005      	beq.n	80083e0 <find_volume+0x1f0>
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	789b      	ldrb	r3, [r3, #2]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d001      	beq.n	80083e0 <find_volume+0x1f0>
 80083dc:	230d      	movs	r3, #13
 80083de:	e148      	b.n	8008672 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	789b      	ldrb	r3, [r3, #2]
 80083e4:	461a      	mov	r2, r3
 80083e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e8:	fb02 f303 	mul.w	r3, r2, r3
 80083ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	895b      	ldrh	r3, [r3, #10]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d008      	beq.n	8008414 <find_volume+0x224>
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	895b      	ldrh	r3, [r3, #10]
 8008406:	461a      	mov	r2, r3
 8008408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840a:	895b      	ldrh	r3, [r3, #10]
 800840c:	3b01      	subs	r3, #1
 800840e:	4013      	ands	r3, r2
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <find_volume+0x228>
 8008414:	230d      	movs	r3, #13
 8008416:	e12c      	b.n	8008672 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	3330      	adds	r3, #48	; 0x30
 800841c:	3311      	adds	r3, #17
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fcc8 	bl	8006db4 <ld_word>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	891b      	ldrh	r3, [r3, #8]
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	b29b      	uxth	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <find_volume+0x24e>
 800843a:	230d      	movs	r3, #13
 800843c:	e119      	b.n	8008672 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	3330      	adds	r3, #48	; 0x30
 8008442:	3313      	adds	r3, #19
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fcb5 	bl	8006db4 <ld_word>
 800844a:	4603      	mov	r3, r0
 800844c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800844e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <find_volume+0x272>
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	3330      	adds	r3, #48	; 0x30
 8008458:	3320      	adds	r3, #32
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe fcc2 	bl	8006de4 <ld_dword>
 8008460:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	3330      	adds	r3, #48	; 0x30
 8008466:	330e      	adds	r3, #14
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe fca3 	bl	8006db4 <ld_word>
 800846e:	4603      	mov	r3, r0
 8008470:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008472:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <find_volume+0x28c>
 8008478:	230d      	movs	r3, #13
 800847a:	e0fa      	b.n	8008672 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800847c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800847e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008480:	4413      	add	r3, r2
 8008482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008484:	8912      	ldrh	r2, [r2, #8]
 8008486:	0912      	lsrs	r2, r2, #4
 8008488:	b292      	uxth	r2, r2
 800848a:	4413      	add	r3, r2
 800848c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800848e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	429a      	cmp	r2, r3
 8008494:	d204      	bcs.n	80084a0 <find_volume+0x2b0>
 8008496:	230d      	movs	r3, #13
 8008498:	e0eb      	b.n	8008672 <find_volume+0x482>
 800849a:	bf00      	nop
 800849c:	20000764 	.word	0x20000764
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80084a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a8:	8952      	ldrh	r2, [r2, #10]
 80084aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <find_volume+0x2ca>
 80084b6:	230d      	movs	r3, #13
 80084b8:	e0db      	b.n	8008672 <find_volume+0x482>
		fmt = FS_FAT32;
 80084ba:	2303      	movs	r3, #3
 80084bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d802      	bhi.n	80084d0 <find_volume+0x2e0>
 80084ca:	2302      	movs	r3, #2
 80084cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d802      	bhi.n	80084e0 <find_volume+0x2f0>
 80084da:	2301      	movs	r3, #1
 80084dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80084e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e2:	1c9a      	adds	r2, r3, #2
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80084ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f2:	441a      	add	r2, r3
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80084f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	441a      	add	r2, r3
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008506:	2b03      	cmp	r3, #3
 8008508:	d11e      	bne.n	8008548 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	3330      	adds	r3, #48	; 0x30
 800850e:	332a      	adds	r3, #42	; 0x2a
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe fc4f 	bl	8006db4 <ld_word>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <find_volume+0x330>
 800851c:	230d      	movs	r3, #13
 800851e:	e0a8      	b.n	8008672 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	891b      	ldrh	r3, [r3, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <find_volume+0x33c>
 8008528:	230d      	movs	r3, #13
 800852a:	e0a2      	b.n	8008672 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	3330      	adds	r3, #48	; 0x30
 8008530:	332c      	adds	r3, #44	; 0x2c
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fc56 	bl	8006de4 <ld_dword>
 8008538:	4602      	mov	r2, r0
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	647b      	str	r3, [r7, #68]	; 0x44
 8008546:	e01f      	b.n	8008588 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	891b      	ldrh	r3, [r3, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <find_volume+0x364>
 8008550:	230d      	movs	r3, #13
 8008552:	e08e      	b.n	8008672 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	6a1a      	ldr	r2, [r3, #32]
 8008558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800855a:	441a      	add	r2, r3
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008560:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008564:	2b02      	cmp	r3, #2
 8008566:	d103      	bne.n	8008570 <find_volume+0x380>
 8008568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	e00a      	b.n	8008586 <find_volume+0x396>
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	695a      	ldr	r2, [r3, #20]
 8008574:	4613      	mov	r3, r2
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	4413      	add	r3, r2
 800857a:	085a      	lsrs	r2, r3, #1
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008586:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800858e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008592:	0a5b      	lsrs	r3, r3, #9
 8008594:	429a      	cmp	r2, r3
 8008596:	d201      	bcs.n	800859c <find_volume+0x3ac>
 8008598:	230d      	movs	r3, #13
 800859a:	e06a      	b.n	8008672 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	f04f 32ff 	mov.w	r2, #4294967295
 80085a2:	611a      	str	r2, [r3, #16]
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	691a      	ldr	r2, [r3, #16]
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	2280      	movs	r2, #128	; 0x80
 80085b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80085b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d149      	bne.n	800864e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	3330      	adds	r3, #48	; 0x30
 80085be:	3330      	adds	r3, #48	; 0x30
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fe fbf7 	bl	8006db4 <ld_word>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d140      	bne.n	800864e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80085cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ce:	3301      	adds	r3, #1
 80085d0:	4619      	mov	r1, r3
 80085d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085d4:	f7fe fe9e 	bl	8007314 <move_window>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d137      	bne.n	800864e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	2200      	movs	r2, #0
 80085e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	3330      	adds	r3, #48	; 0x30
 80085e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fe fbe1 	bl	8006db4 <ld_word>
 80085f2:	4603      	mov	r3, r0
 80085f4:	461a      	mov	r2, r3
 80085f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d127      	bne.n	800864e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	3330      	adds	r3, #48	; 0x30
 8008602:	4618      	mov	r0, r3
 8008604:	f7fe fbee 	bl	8006de4 <ld_dword>
 8008608:	4603      	mov	r3, r0
 800860a:	4a1c      	ldr	r2, [pc, #112]	; (800867c <find_volume+0x48c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d11e      	bne.n	800864e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	3330      	adds	r3, #48	; 0x30
 8008614:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fbe3 	bl	8006de4 <ld_dword>
 800861e:	4603      	mov	r3, r0
 8008620:	4a17      	ldr	r2, [pc, #92]	; (8008680 <find_volume+0x490>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d113      	bne.n	800864e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008628:	3330      	adds	r3, #48	; 0x30
 800862a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe fbd8 	bl	8006de4 <ld_dword>
 8008634:	4602      	mov	r2, r0
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	3330      	adds	r3, #48	; 0x30
 800863e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fbce 	bl	8006de4 <ld_dword>
 8008648:	4602      	mov	r2, r0
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800864e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008650:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008654:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008656:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <find_volume+0x494>)
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	4b09      	ldr	r3, [pc, #36]	; (8008684 <find_volume+0x494>)
 8008660:	801a      	strh	r2, [r3, #0]
 8008662:	4b08      	ldr	r3, [pc, #32]	; (8008684 <find_volume+0x494>)
 8008664:	881a      	ldrh	r2, [r3, #0]
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800866a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800866c:	f7fe fdea 	bl	8007244 <clear_lock>
#endif
	return FR_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3758      	adds	r7, #88	; 0x58
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	41615252 	.word	0x41615252
 8008680:	61417272 	.word	0x61417272
 8008684:	20000768 	.word	0x20000768

08008688 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008692:	2309      	movs	r3, #9
 8008694:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01c      	beq.n	80086d6 <validate+0x4e>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d018      	beq.n	80086d6 <validate+0x4e>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d013      	beq.n	80086d6 <validate+0x4e>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	889a      	ldrh	r2, [r3, #4]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	88db      	ldrh	r3, [r3, #6]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d10c      	bne.n	80086d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fad8 	bl	8006c78 <disk_status>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <validate+0x4e>
			res = FR_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <validate+0x5a>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	e000      	b.n	80086e4 <validate+0x5c>
 80086e2:	2300      	movs	r3, #0
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	6013      	str	r3, [r2, #0]
	return res;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	4613      	mov	r3, r2
 8008700:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008706:	f107 0310 	add.w	r3, r7, #16
 800870a:	4618      	mov	r0, r3
 800870c:	f7ff fcd5 	bl	80080ba <get_ldnumber>
 8008710:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	2b00      	cmp	r3, #0
 8008716:	da01      	bge.n	800871c <f_mount+0x28>
 8008718:	230b      	movs	r3, #11
 800871a:	e02b      	b.n	8008774 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800871c:	4a17      	ldr	r2, [pc, #92]	; (800877c <f_mount+0x88>)
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008724:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800872c:	69b8      	ldr	r0, [r7, #24]
 800872e:	f7fe fd89 	bl	8007244 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	2200      	movs	r2, #0
 8008736:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	490d      	ldr	r1, [pc, #52]	; (800877c <f_mount+0x88>)
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <f_mount+0x66>
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d001      	beq.n	800875e <f_mount+0x6a>
 800875a:	2300      	movs	r3, #0
 800875c:	e00a      	b.n	8008774 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800875e:	f107 010c 	add.w	r1, r7, #12
 8008762:	f107 0308 	add.w	r3, r7, #8
 8008766:	2200      	movs	r2, #0
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fd41 	bl	80081f0 <find_volume>
 800876e:	4603      	mov	r3, r0
 8008770:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008772:	7dfb      	ldrb	r3, [r7, #23]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3720      	adds	r7, #32
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20000764 	.word	0x20000764

08008780 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b098      	sub	sp, #96	; 0x60
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <f_open+0x18>
 8008794:	2309      	movs	r3, #9
 8008796:	e1ad      	b.n	8008af4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800879e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80087a0:	79fa      	ldrb	r2, [r7, #7]
 80087a2:	f107 0110 	add.w	r1, r7, #16
 80087a6:	f107 0308 	add.w	r3, r7, #8
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff fd20 	bl	80081f0 <find_volume>
 80087b0:	4603      	mov	r3, r0
 80087b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80087b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f040 8191 	bne.w	8008ae2 <f_open+0x362>
		dj.obj.fs = fs;
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	f107 0314 	add.w	r3, r7, #20
 80087ca:	4611      	mov	r1, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fc03 	bl	8007fd8 <follow_path>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80087d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d11a      	bne.n	8008816 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80087e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087e4:	b25b      	sxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	da03      	bge.n	80087f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80087ea:	2306      	movs	r3, #6
 80087ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087f0:	e011      	b.n	8008816 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	f023 0301 	bic.w	r3, r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	bf14      	ite	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	2300      	moveq	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	461a      	mov	r2, r3
 8008804:	f107 0314 	add.w	r3, r7, #20
 8008808:	4611      	mov	r1, r2
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe fbd2 	bl	8006fb4 <chk_lock>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	f003 031c 	and.w	r3, r3, #28
 800881c:	2b00      	cmp	r3, #0
 800881e:	d07f      	beq.n	8008920 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008824:	2b00      	cmp	r3, #0
 8008826:	d017      	beq.n	8008858 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800882c:	2b04      	cmp	r3, #4
 800882e:	d10e      	bne.n	800884e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008830:	f7fe fc1c 	bl	800706c <enq_lock>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d006      	beq.n	8008848 <f_open+0xc8>
 800883a:	f107 0314 	add.w	r3, r7, #20
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff fb03 	bl	8007e4a <dir_register>
 8008844:	4603      	mov	r3, r0
 8008846:	e000      	b.n	800884a <f_open+0xca>
 8008848:	2312      	movs	r3, #18
 800884a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	f043 0308 	orr.w	r3, r3, #8
 8008854:	71fb      	strb	r3, [r7, #7]
 8008856:	e010      	b.n	800887a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008858:	7ebb      	ldrb	r3, [r7, #26]
 800885a:	f003 0311 	and.w	r3, r3, #17
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <f_open+0xea>
					res = FR_DENIED;
 8008862:	2307      	movs	r3, #7
 8008864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008868:	e007      	b.n	800887a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	f003 0304 	and.w	r3, r3, #4
 8008870:	2b00      	cmp	r3, #0
 8008872:	d002      	beq.n	800887a <f_open+0xfa>
 8008874:	2308      	movs	r3, #8
 8008876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800887a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800887e:	2b00      	cmp	r3, #0
 8008880:	d168      	bne.n	8008954 <f_open+0x1d4>
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d063      	beq.n	8008954 <f_open+0x1d4>
				dw = GET_FATTIME();
 800888c:	f7fd ffa4 	bl	80067d8 <get_fattime>
 8008890:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008894:	330e      	adds	r3, #14
 8008896:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fae1 	bl	8006e60 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a0:	3316      	adds	r3, #22
 80088a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe fadb 	bl	8006e60 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80088aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ac:	330b      	adds	r3, #11
 80088ae:	2220      	movs	r2, #32
 80088b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff fa32 	bl	8007d22 <ld_clust>
 80088be:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088c4:	2200      	movs	r2, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fa4a 	bl	8007d60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80088cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ce:	331c      	adds	r3, #28
 80088d0:	2100      	movs	r1, #0
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe fac4 	bl	8006e60 <st_dword>
					fs->wflag = 1;
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2201      	movs	r2, #1
 80088dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80088de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d037      	beq.n	8008954 <f_open+0x1d4>
						dw = fs->winsect;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80088ea:	f107 0314 	add.w	r3, r7, #20
 80088ee:	2200      	movs	r2, #0
 80088f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe ff5d 	bl	80077b2 <remove_chain>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80088fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008902:	2b00      	cmp	r3, #0
 8008904:	d126      	bne.n	8008954 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fd02 	bl	8007314 <move_window>
 8008910:	4603      	mov	r3, r0
 8008912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800891a:	3a01      	subs	r2, #1
 800891c:	60da      	str	r2, [r3, #12]
 800891e:	e019      	b.n	8008954 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008924:	2b00      	cmp	r3, #0
 8008926:	d115      	bne.n	8008954 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008928:	7ebb      	ldrb	r3, [r7, #26]
 800892a:	f003 0310 	and.w	r3, r3, #16
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008932:	2304      	movs	r3, #4
 8008934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008938:	e00c      	b.n	8008954 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d007      	beq.n	8008954 <f_open+0x1d4>
 8008944:	7ebb      	ldrb	r3, [r7, #26]
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <f_open+0x1d4>
						res = FR_DENIED;
 800894e:	2307      	movs	r3, #7
 8008950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008958:	2b00      	cmp	r3, #0
 800895a:	d128      	bne.n	80089ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800895c:	79fb      	ldrb	r3, [r7, #7]
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	f023 0301 	bic.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	bf14      	ite	ne
 8008986:	2301      	movne	r3, #1
 8008988:	2300      	moveq	r3, #0
 800898a:	b2db      	uxtb	r3, r3
 800898c:	461a      	mov	r2, r3
 800898e:	f107 0314 	add.w	r3, r7, #20
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f7fe fb8b 	bl	80070b0 <inc_lock>
 800899a:	4602      	mov	r2, r0
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d102      	bne.n	80089ae <f_open+0x22e>
 80089a8:	2302      	movs	r3, #2
 80089aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80089ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f040 8095 	bne.w	8008ae2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089bc:	4611      	mov	r1, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	f7ff f9af 	bl	8007d22 <ld_clust>
 80089c4:	4602      	mov	r2, r0
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	331c      	adds	r3, #28
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fa08 	bl	8006de4 <ld_dword>
 80089d4:	4602      	mov	r2, r0
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	88da      	ldrh	r2, [r3, #6]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	79fa      	ldrb	r2, [r7, #7]
 80089f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3330      	adds	r3, #48	; 0x30
 8008a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a0e:	2100      	movs	r1, #0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe fa72 	bl	8006efa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008a16:	79fb      	ldrb	r3, [r7, #7]
 8008a18:	f003 0320 	and.w	r3, r3, #32
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d060      	beq.n	8008ae2 <f_open+0x362>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d05c      	beq.n	8008ae2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68da      	ldr	r2, [r3, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	895b      	ldrh	r3, [r3, #10]
 8008a34:	025b      	lsls	r3, r3, #9
 8008a36:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	657b      	str	r3, [r7, #84]	; 0x54
 8008a44:	e016      	b.n	8008a74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fd1d 	bl	800748a <get_fat>
 8008a50:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d802      	bhi.n	8008a5e <f_open+0x2de>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d102      	bne.n	8008a6c <f_open+0x2ec>
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	657b      	str	r3, [r7, #84]	; 0x54
 8008a74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d103      	bne.n	8008a84 <f_open+0x304>
 8008a7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d8e0      	bhi.n	8008a46 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d127      	bne.n	8008ae2 <f_open+0x362>
 8008a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d022      	beq.n	8008ae2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fcd3 	bl	800744c <clust2sect>
 8008aa6:	6478      	str	r0, [r7, #68]	; 0x44
 8008aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d103      	bne.n	8008ab6 <f_open+0x336>
						res = FR_INT_ERR;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ab4:	e015      	b.n	8008ae2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab8:	0a5a      	lsrs	r2, r3, #9
 8008aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008abc:	441a      	add	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	7858      	ldrb	r0, [r3, #1]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a1a      	ldr	r2, [r3, #32]
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f7fe f911 	bl	8006cf8 <disk_read>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <f_open+0x362>
 8008adc:	2301      	movs	r3, #1
 8008ade:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <f_open+0x370>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008af0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3760      	adds	r7, #96	; 0x60
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08c      	sub	sp, #48	; 0x30
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
 8008b08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f107 0210 	add.w	r2, r7, #16
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff fdb3 	bl	8008688 <validate>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d107      	bne.n	8008b40 <f_write+0x44>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	7d5b      	ldrb	r3, [r3, #21]
 8008b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <f_write+0x4a>
 8008b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b44:	e14b      	b.n	8008dde <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	7d1b      	ldrb	r3, [r3, #20]
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <f_write+0x5a>
 8008b52:	2307      	movs	r3, #7
 8008b54:	e143      	b.n	8008dde <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	699a      	ldr	r2, [r3, #24]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	441a      	add	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	f080 812d 	bcs.w	8008dc2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	699b      	ldr	r3, [r3, #24]
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b70:	e127      	b.n	8008dc2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f040 80e3 	bne.w	8008d46 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	0a5b      	lsrs	r3, r3, #9
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	8952      	ldrh	r2, [r2, #10]
 8008b8a:	3a01      	subs	r2, #1
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d143      	bne.n	8008c1e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10c      	bne.n	8008bb8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d11a      	bne.n	8008be0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2100      	movs	r1, #0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe fe64 	bl	800787c <create_chain>
 8008bb4:	62b8      	str	r0, [r7, #40]	; 0x28
 8008bb6:	e013      	b.n	8008be0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7fe fef0 	bl	80079ac <clmt_clust>
 8008bcc:	62b8      	str	r0, [r7, #40]	; 0x28
 8008bce:	e007      	b.n	8008be0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f7fe fe4f 	bl	800787c <create_chain>
 8008bde:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f000 80f2 	beq.w	8008dcc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d104      	bne.n	8008bf8 <f_write+0xfc>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	755a      	strb	r2, [r3, #21]
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e0f2      	b.n	8008dde <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfe:	d104      	bne.n	8008c0a <f_write+0x10e>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	755a      	strb	r2, [r3, #21]
 8008c06:	2301      	movs	r3, #1
 8008c08:	e0e9      	b.n	8008dde <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c0e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d102      	bne.n	8008c1e <f_write+0x122>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c1c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	7d1b      	ldrb	r3, [r3, #20]
 8008c22:	b25b      	sxtb	r3, r3
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	da18      	bge.n	8008c5a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	7858      	ldrb	r0, [r3, #1]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a1a      	ldr	r2, [r3, #32]
 8008c36:	2301      	movs	r3, #1
 8008c38:	f7fe f87e 	bl	8006d38 <disk_write>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <f_write+0x150>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2201      	movs	r2, #1
 8008c46:	755a      	strb	r2, [r3, #21]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e0c8      	b.n	8008dde <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	7d1b      	ldrb	r3, [r3, #20]
 8008c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f7fe fbf2 	bl	800744c <clust2sect>
 8008c68:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d104      	bne.n	8008c7a <f_write+0x17e>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2202      	movs	r2, #2
 8008c74:	755a      	strb	r2, [r3, #21]
 8008c76:	2302      	movs	r3, #2
 8008c78:	e0b1      	b.n	8008dde <f_write+0x2e2>
			sect += csect;
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	4413      	add	r3, r2
 8008c80:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	0a5b      	lsrs	r3, r3, #9
 8008c86:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d03c      	beq.n	8008d08 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	4413      	add	r3, r2
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	8952      	ldrh	r2, [r2, #10]
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d905      	bls.n	8008ca8 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	895b      	ldrh	r3, [r3, #10]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	7858      	ldrb	r0, [r3, #1]
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	69f9      	ldr	r1, [r7, #28]
 8008cb2:	f7fe f841 	bl	8006d38 <disk_write>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d004      	beq.n	8008cc6 <f_write+0x1ca>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	755a      	strb	r2, [r3, #21]
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e08b      	b.n	8008dde <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1a      	ldr	r2, [r3, #32]
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	6a3a      	ldr	r2, [r7, #32]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d915      	bls.n	8008d00 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a1a      	ldr	r2, [r3, #32]
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	025b      	lsls	r3, r3, #9
 8008ce4:	69fa      	ldr	r2, [r7, #28]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cec:	4619      	mov	r1, r3
 8008cee:	f7fe f8e3 	bl	8006eb8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	7d1b      	ldrb	r3, [r3, #20]
 8008cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	025b      	lsls	r3, r3, #9
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008d06:	e03f      	b.n	8008d88 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d016      	beq.n	8008d40 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	699a      	ldr	r2, [r3, #24]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d210      	bcs.n	8008d40 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	7858      	ldrb	r0, [r3, #1]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d28:	2301      	movs	r3, #1
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	f7fd ffe4 	bl	8006cf8 <disk_read>
 8008d30:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	755a      	strb	r2, [r3, #21]
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e04e      	b.n	8008dde <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d901      	bls.n	8008d60 <f_write+0x264>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	4413      	add	r3, r2
 8008d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d72:	69f9      	ldr	r1, [r7, #28]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fe f89f 	bl	8006eb8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	7d1b      	ldrb	r3, [r3, #20]
 8008d7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	4413      	add	r3, r2
 8008d8e:	61fb      	str	r3, [r7, #28]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	441a      	add	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	619a      	str	r2, [r3, #24]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	68da      	ldr	r2, [r3, #12]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	bf38      	it	cc
 8008da8:	461a      	movcc	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	60da      	str	r2, [r3, #12]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	441a      	add	r2, r3
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f47f aed4 	bne.w	8008b72 <f_write+0x76>
 8008dca:	e000      	b.n	8008dce <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008dcc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	7d1b      	ldrb	r3, [r3, #20]
 8008dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3730      	adds	r7, #48	; 0x30
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b086      	sub	sp, #24
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f107 0208 	add.w	r2, r7, #8
 8008df4:	4611      	mov	r1, r2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff fc46 	bl	8008688 <validate>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d168      	bne.n	8008ed8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	7d1b      	ldrb	r3, [r3, #20]
 8008e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d062      	beq.n	8008ed8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7d1b      	ldrb	r3, [r3, #20]
 8008e16:	b25b      	sxtb	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	da15      	bge.n	8008e48 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	7858      	ldrb	r0, [r3, #1]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a1a      	ldr	r2, [r3, #32]
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f7fd ff84 	bl	8006d38 <disk_write>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <f_sync+0x54>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e04f      	b.n	8008eda <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	7d1b      	ldrb	r3, [r3, #20]
 8008e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e48:	f7fd fcc6 	bl	80067d8 <get_fattime>
 8008e4c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7fe fa5c 	bl	8007314 <move_window>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d138      	bne.n	8008ed8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	330b      	adds	r3, #11
 8008e70:	781a      	ldrb	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	330b      	adds	r3, #11
 8008e76:	f042 0220 	orr.w	r2, r2, #32
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6818      	ldr	r0, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	461a      	mov	r2, r3
 8008e88:	68f9      	ldr	r1, [r7, #12]
 8008e8a:	f7fe ff69 	bl	8007d60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f103 021c 	add.w	r2, r3, #28
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f7fd ffe0 	bl	8006e60 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3316      	adds	r3, #22
 8008ea4:	6939      	ldr	r1, [r7, #16]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fd ffda 	bl	8006e60 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3312      	adds	r3, #18
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fd ffb9 	bl	8006e2a <st_word>
					fs->wflag = 1;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fe fa55 	bl	8007370 <sync_fs>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7d1b      	ldrb	r3, [r3, #20]
 8008ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff ff7b 	bl	8008de6 <f_sync>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d118      	bne.n	8008f2c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f107 0208 	add.w	r2, r7, #8
 8008f00:	4611      	mov	r1, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff fbc0 	bl	8008688 <validate>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10c      	bne.n	8008f2c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fe f958 	bl	80071cc <dec_lock>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8008f38:	b590      	push	{r4, r7, lr}
 8008f3a:	b09d      	sub	sp, #116	; 0x74
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	607a      	str	r2, [r7, #4]
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	460b      	mov	r3, r1
 8008f46:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8008f48:	2301      	movs	r3, #1
 8008f4a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8008f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f50:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8008f52:	f107 030c 	add.w	r3, r7, #12
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff f8af 	bl	80080ba <get_ldnumber>
 8008f5c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	da02      	bge.n	8008f6a <f_mkfs+0x32>
 8008f64:	230b      	movs	r3, #11
 8008f66:	f000 bc0d 	b.w	8009784 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8008f6a:	4a94      	ldr	r2, [pc, #592]	; (80091bc <f_mkfs+0x284>)
 8008f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <f_mkfs+0x4a>
 8008f76:	4a91      	ldr	r2, [pc, #580]	; (80091bc <f_mkfs+0x284>)
 8008f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8008f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8008f8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fd fe8a 	bl	8006cac <disk_initialize>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8008f9e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <f_mkfs+0x76>
 8008faa:	2303      	movs	r3, #3
 8008fac:	e3ea      	b.n	8009784 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8008fae:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <f_mkfs+0x86>
 8008fba:	230a      	movs	r3, #10
 8008fbc:	e3e2      	b.n	8009784 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8008fbe:	f107 0214 	add.w	r2, r7, #20
 8008fc2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008fc6:	2103      	movs	r1, #3
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fd fed5 	bl	8006d78 <disk_ioctl>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10c      	bne.n	8008fee <f_mkfs+0xb6>
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <f_mkfs+0xb6>
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe0:	d805      	bhi.n	8008fee <f_mkfs+0xb6>
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	1e5a      	subs	r2, r3, #1
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <f_mkfs+0xba>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8008ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ff6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <f_mkfs+0xce>
 8008ffe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	429a      	cmp	r2, r3
 8009004:	d309      	bcc.n	800901a <f_mkfs+0xe2>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800900c:	d805      	bhi.n	800901a <f_mkfs+0xe2>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	1e5a      	subs	r2, r3, #1
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4013      	ands	r3, r2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <f_mkfs+0xe6>
 800901a:	2313      	movs	r3, #19
 800901c:	e3b2      	b.n	8009784 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800901e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	fbb2 f3f3 	udiv	r3, r2, r3
 8009026:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800902c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800902e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009032:	fbb2 f3f3 	udiv	r3, r2, r3
 8009036:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8009038:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	fb02 f303 	mul.w	r3, r2, r3
 8009040:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8009042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009044:	2b00      	cmp	r3, #0
 8009046:	d101      	bne.n	800904c <f_mkfs+0x114>
 8009048:	230e      	movs	r3, #14
 800904a:	e39b      	b.n	8009784 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800904c:	f107 0210 	add.w	r2, r7, #16
 8009050:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009054:	2101      	movs	r1, #1
 8009056:	4618      	mov	r0, r3
 8009058:	f7fd fe8e 	bl	8006d78 <disk_ioctl>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <f_mkfs+0x12e>
 8009062:	2301      	movs	r3, #1
 8009064:	e38e      	b.n	8009784 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	f003 0308 	and.w	r3, r3, #8
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <f_mkfs+0x13c>
 8009070:	2300      	movs	r3, #0
 8009072:	e000      	b.n	8009076 <f_mkfs+0x13e>
 8009074:	233f      	movs	r3, #63	; 0x3f
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907c:	429a      	cmp	r2, r3
 800907e:	d901      	bls.n	8009084 <f_mkfs+0x14c>
 8009080:	230e      	movs	r3, #14
 8009082:	e37f      	b.n	8009784 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	2b7f      	cmp	r3, #127	; 0x7f
 8009090:	d801      	bhi.n	8009096 <f_mkfs+0x15e>
 8009092:	230e      	movs	r3, #14
 8009094:	e376      	b.n	8009784 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2b80      	cmp	r3, #128	; 0x80
 800909a:	d901      	bls.n	80090a0 <f_mkfs+0x168>
 800909c:	2313      	movs	r3, #19
 800909e:	e371      	b.n	8009784 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00d      	beq.n	80090c6 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80090aa:	7afb      	ldrb	r3, [r7, #11]
 80090ac:	f003 0307 	and.w	r3, r3, #7
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d004      	beq.n	80090be <f_mkfs+0x186>
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d103      	bne.n	80090c6 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80090be:	2303      	movs	r3, #3
 80090c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80090c4:	e009      	b.n	80090da <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80090c6:	7afb      	ldrb	r3, [r7, #11]
 80090c8:	f003 0301 	and.w	r3, r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <f_mkfs+0x19c>
 80090d0:	2313      	movs	r3, #19
 80090d2:	e357      	b.n	8009784 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80090d4:	2302      	movs	r3, #2
 80090d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80090de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d13c      	bne.n	8009160 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80090e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d11b      	bne.n	8009124 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	0c5b      	lsrs	r3, r3, #17
 80090f0:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80090f2:	2300      	movs	r3, #0
 80090f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090f6:	2301      	movs	r3, #1
 80090f8:	653b      	str	r3, [r7, #80]	; 0x50
 80090fa:	e005      	b.n	8009108 <f_mkfs+0x1d0>
 80090fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fe:	3301      	adds	r3, #1
 8009100:	64bb      	str	r3, [r7, #72]	; 0x48
 8009102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	653b      	str	r3, [r7, #80]	; 0x50
 8009108:	4a2d      	ldr	r2, [pc, #180]	; (80091c0 <f_mkfs+0x288>)
 800910a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800910c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d007      	beq.n	8009124 <f_mkfs+0x1ec>
 8009114:	4a2a      	ldr	r2, [pc, #168]	; (80091c0 <f_mkfs+0x288>)
 8009116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800911c:	461a      	mov	r2, r3
 800911e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009120:	4293      	cmp	r3, r2
 8009122:	d2eb      	bcs.n	80090fc <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009128:	fbb2 f3f3 	udiv	r3, r2, r3
 800912c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	3302      	adds	r3, #2
 8009132:	009a      	lsls	r2, r3, #2
 8009134:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009136:	4413      	add	r3, r2
 8009138:	1e5a      	subs	r2, r3, #1
 800913a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800913c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009140:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8009142:	2320      	movs	r3, #32
 8009144:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8009146:	2300      	movs	r3, #0
 8009148:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009150:	4293      	cmp	r3, r2
 8009152:	d903      	bls.n	800915c <f_mkfs+0x224>
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	4a1b      	ldr	r2, [pc, #108]	; (80091c4 <f_mkfs+0x28c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d952      	bls.n	8009202 <f_mkfs+0x2ca>
 800915c:	230e      	movs	r3, #14
 800915e:	e311      	b.n	8009784 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8009160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009162:	2b00      	cmp	r3, #0
 8009164:	d11b      	bne.n	800919e <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	0b1b      	lsrs	r3, r3, #12
 800916a:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800916c:	2300      	movs	r3, #0
 800916e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009170:	2301      	movs	r3, #1
 8009172:	653b      	str	r3, [r7, #80]	; 0x50
 8009174:	e005      	b.n	8009182 <f_mkfs+0x24a>
 8009176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009178:	3301      	adds	r3, #1
 800917a:	64bb      	str	r3, [r7, #72]	; 0x48
 800917c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	653b      	str	r3, [r7, #80]	; 0x50
 8009182:	4a11      	ldr	r2, [pc, #68]	; (80091c8 <f_mkfs+0x290>)
 8009184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d007      	beq.n	800919e <f_mkfs+0x266>
 800918e:	4a0e      	ldr	r2, [pc, #56]	; (80091c8 <f_mkfs+0x290>)
 8009190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009196:	461a      	mov	r2, r3
 8009198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800919a:	4293      	cmp	r3, r2
 800919c:	d2eb      	bcs.n	8009176 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	f640 72f5 	movw	r2, #4085	; 0xff5
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d90c      	bls.n	80091cc <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	3302      	adds	r3, #2
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ba:	e012      	b.n	80091e2 <f_mkfs+0x2aa>
 80091bc:	20000764 	.word	0x20000764
 80091c0:	0800acdc 	.word	0x0800acdc
 80091c4:	0ffffff5 	.word	0x0ffffff5
 80091c8:	0800acec 	.word	0x0800acec
				} else {
					fmt = FS_FAT12;
 80091cc:	2301      	movs	r3, #1
 80091ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80091d2:	6a3a      	ldr	r2, [r7, #32]
 80091d4:	4613      	mov	r3, r2
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	4413      	add	r3, r2
 80091da:	3301      	adds	r3, #1
 80091dc:	085b      	lsrs	r3, r3, #1
 80091de:	3303      	adds	r3, #3
 80091e0:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80091e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80091e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e6:	4413      	add	r3, r2
 80091e8:	1e5a      	subs	r2, r3, #1
 80091ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f0:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80091f2:	2301      	movs	r3, #1
 80091f4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80091f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009200:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8009202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009206:	4413      	add	r3, r2
 8009208:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800920a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800920c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800920e:	fb03 f202 	mul.w	r2, r3, r2
 8009212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009214:	4413      	add	r3, r2
 8009216:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009218:	4413      	add	r3, r2
 800921a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	4413      	add	r3, r2
 8009222:	1e5a      	subs	r2, r3, #1
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	425b      	negs	r3, r3
 8009228:	401a      	ands	r2, r3
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8009230:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009234:	2b03      	cmp	r3, #3
 8009236:	d108      	bne.n	800924a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8009238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800923a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800923c:	4413      	add	r3, r2
 800923e:	657b      	str	r3, [r7, #84]	; 0x54
 8009240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009244:	4413      	add	r3, r2
 8009246:	65bb      	str	r3, [r7, #88]	; 0x58
 8009248:	e006      	b.n	8009258 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800924a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800924c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009254:	4413      	add	r3, r2
 8009256:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8009258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800925a:	011a      	lsls	r2, r3, #4
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	441a      	add	r2, r3
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	429a      	cmp	r2, r3
 8009268:	d901      	bls.n	800926e <f_mkfs+0x336>
 800926a:	230e      	movs	r3, #14
 800926c:	e28a      	b.n	8009784 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009272:	1ad2      	subs	r2, r2, r3
 8009274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009278:	fb01 f303 	mul.w	r3, r1, r3
 800927c:	1ad2      	subs	r2, r2, r3
 800927e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009280:	1ad2      	subs	r2, r2, r3
 8009282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009284:	fbb2 f3f3 	udiv	r3, r2, r3
 8009288:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800928a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800928e:	2b03      	cmp	r3, #3
 8009290:	d10f      	bne.n	80092b2 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009298:	4293      	cmp	r3, r2
 800929a:	d80a      	bhi.n	80092b2 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d105      	bne.n	80092ae <f_mkfs+0x376>
 80092a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a4:	085b      	lsrs	r3, r3, #1
 80092a6:	607b      	str	r3, [r7, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d144      	bne.n	8009338 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80092ae:	230e      	movs	r3, #14
 80092b0:	e268      	b.n	8009784 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80092b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d133      	bne.n	8009322 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d91e      	bls.n	8009302 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d107      	bne.n	80092da <f_mkfs+0x3a2>
 80092ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	2b40      	cmp	r3, #64	; 0x40
 80092d0:	d803      	bhi.n	80092da <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80092d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	607b      	str	r3, [r7, #4]
 80092d8:	e033      	b.n	8009342 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80092da:	7afb      	ldrb	r3, [r7, #11]
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80092e4:	2303      	movs	r3, #3
 80092e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80092ea:	e02a      	b.n	8009342 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <f_mkfs+0x3c6>
 80092f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	607b      	str	r3, [r7, #4]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b80      	cmp	r3, #128	; 0x80
 80092fc:	d91e      	bls.n	800933c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80092fe:	230e      	movs	r3, #14
 8009300:	e240      	b.n	8009784 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009308:	4293      	cmp	r3, r2
 800930a:	d80a      	bhi.n	8009322 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <f_mkfs+0x3e6>
 8009312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	607b      	str	r3, [r7, #4]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b80      	cmp	r3, #128	; 0x80
 800931c:	d910      	bls.n	8009340 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800931e:	230e      	movs	r3, #14
 8009320:	e230      	b.n	8009784 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8009322:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009326:	2b01      	cmp	r3, #1
 8009328:	d10c      	bne.n	8009344 <f_mkfs+0x40c>
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009330:	4293      	cmp	r3, r2
 8009332:	d907      	bls.n	8009344 <f_mkfs+0x40c>
 8009334:	230e      	movs	r3, #14
 8009336:	e225      	b.n	8009784 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8009338:	bf00      	nop
 800933a:	e6ce      	b.n	80090da <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800933c:	bf00      	nop
 800933e:	e6cc      	b.n	80090da <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8009340:	bf00      	nop
			pau = au;
 8009342:	e6ca      	b.n	80090da <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8009344:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8009346:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009348:	461a      	mov	r2, r3
 800934a:	2100      	movs	r1, #0
 800934c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800934e:	f7fd fdd4 	bl	8006efa <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8009352:	220b      	movs	r2, #11
 8009354:	49b2      	ldr	r1, [pc, #712]	; (8009620 <f_mkfs+0x6e8>)
 8009356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009358:	f7fd fdae 	bl	8006eb8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	330b      	adds	r3, #11
 8009360:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7fd fd60 	bl	8006e2a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	330d      	adds	r3, #13
 800936e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009370:	b2d2      	uxtb	r2, r2
 8009372:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	330e      	adds	r3, #14
 8009378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800937a:	b292      	uxth	r2, r2
 800937c:	4611      	mov	r1, r2
 800937e:	4618      	mov	r0, r3
 8009380:	f7fd fd53 	bl	8006e2a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	3310      	adds	r3, #16
 8009388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800938a:	b2d2      	uxtb	r2, r2
 800938c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	f103 0211 	add.w	r2, r3, #17
 8009394:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009398:	2b03      	cmp	r3, #3
 800939a:	d002      	beq.n	80093a2 <f_mkfs+0x46a>
 800939c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939e:	b29b      	uxth	r3, r3
 80093a0:	e000      	b.n	80093a4 <f_mkfs+0x46c>
 80093a2:	2300      	movs	r3, #0
 80093a4:	4619      	mov	r1, r3
 80093a6:	4610      	mov	r0, r2
 80093a8:	f7fd fd3f 	bl	8006e2a <st_word>
		if (sz_vol < 0x10000) {
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b2:	d208      	bcs.n	80093c6 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80093b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b6:	3313      	adds	r3, #19
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	b292      	uxth	r2, r2
 80093bc:	4611      	mov	r1, r2
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fd fd33 	bl	8006e2a <st_word>
 80093c4:	e006      	b.n	80093d4 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	3320      	adds	r3, #32
 80093ca:	693a      	ldr	r2, [r7, #16]
 80093cc:	4611      	mov	r1, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fd fd46 	bl	8006e60 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80093d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d6:	3315      	adds	r3, #21
 80093d8:	22f8      	movs	r2, #248	; 0xf8
 80093da:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80093dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093de:	3318      	adds	r3, #24
 80093e0:	213f      	movs	r1, #63	; 0x3f
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fd fd21 	bl	8006e2a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	331a      	adds	r3, #26
 80093ec:	21ff      	movs	r1, #255	; 0xff
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fd fd1b 	bl	8006e2a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	331c      	adds	r3, #28
 80093f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fd fd30 	bl	8006e60 <st_dword>
		if (fmt == FS_FAT32) {
 8009400:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009404:	2b03      	cmp	r3, #3
 8009406:	d131      	bne.n	800946c <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800940e:	f7fd f9e3 	bl	80067d8 <get_fattime>
 8009412:	4603      	mov	r3, r0
 8009414:	4619      	mov	r1, r3
 8009416:	4620      	mov	r0, r4
 8009418:	f7fd fd22 	bl	8006e60 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	3324      	adds	r3, #36	; 0x24
 8009420:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009422:	4618      	mov	r0, r3
 8009424:	f7fd fd1c 	bl	8006e60 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	332c      	adds	r3, #44	; 0x2c
 800942c:	2102      	movs	r1, #2
 800942e:	4618      	mov	r0, r3
 8009430:	f7fd fd16 	bl	8006e60 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8009434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009436:	3330      	adds	r3, #48	; 0x30
 8009438:	2101      	movs	r1, #1
 800943a:	4618      	mov	r0, r3
 800943c:	f7fd fcf5 	bl	8006e2a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	3332      	adds	r3, #50	; 0x32
 8009444:	2106      	movs	r1, #6
 8009446:	4618      	mov	r0, r3
 8009448:	f7fd fcef 	bl	8006e2a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	3340      	adds	r3, #64	; 0x40
 8009450:	2280      	movs	r2, #128	; 0x80
 8009452:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8009454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009456:	3342      	adds	r3, #66	; 0x42
 8009458:	2229      	movs	r2, #41	; 0x29
 800945a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	3347      	adds	r3, #71	; 0x47
 8009460:	2213      	movs	r2, #19
 8009462:	4970      	ldr	r1, [pc, #448]	; (8009624 <f_mkfs+0x6ec>)
 8009464:	4618      	mov	r0, r3
 8009466:	f7fd fd27 	bl	8006eb8 <mem_cpy>
 800946a:	e020      	b.n	80094ae <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946e:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8009472:	f7fd f9b1 	bl	80067d8 <get_fattime>
 8009476:	4603      	mov	r3, r0
 8009478:	4619      	mov	r1, r3
 800947a:	4620      	mov	r0, r4
 800947c:	f7fd fcf0 	bl	8006e60 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	3316      	adds	r3, #22
 8009484:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009486:	b292      	uxth	r2, r2
 8009488:	4611      	mov	r1, r2
 800948a:	4618      	mov	r0, r3
 800948c:	f7fd fccd 	bl	8006e2a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	3324      	adds	r3, #36	; 0x24
 8009494:	2280      	movs	r2, #128	; 0x80
 8009496:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8009498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949a:	3326      	adds	r3, #38	; 0x26
 800949c:	2229      	movs	r2, #41	; 0x29
 800949e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	332b      	adds	r3, #43	; 0x2b
 80094a4:	2213      	movs	r2, #19
 80094a6:	4960      	ldr	r1, [pc, #384]	; (8009628 <f_mkfs+0x6f0>)
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fd fd05 	bl	8006eb8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094b4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fd fcb6 	bl	8006e2a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80094be:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80094c2:	2301      	movs	r3, #1
 80094c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094c8:	f7fd fc36 	bl	8006d38 <disk_write>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <f_mkfs+0x59e>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e156      	b.n	8009784 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80094d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d140      	bne.n	8009560 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	1d9a      	adds	r2, r3, #6
 80094e2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80094e6:	2301      	movs	r3, #1
 80094e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094ea:	f7fd fc25 	bl	8006d38 <disk_write>
			mem_set(buf, 0, ss);
 80094ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80094f0:	461a      	mov	r2, r3
 80094f2:	2100      	movs	r1, #0
 80094f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f6:	f7fd fd00 	bl	8006efa <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80094fa:	494c      	ldr	r1, [pc, #304]	; (800962c <f_mkfs+0x6f4>)
 80094fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094fe:	f7fd fcaf 	bl	8006e60 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009508:	4949      	ldr	r1, [pc, #292]	; (8009630 <f_mkfs+0x6f8>)
 800950a:	4618      	mov	r0, r3
 800950c:	f7fd fca8 	bl	8006e60 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	3b01      	subs	r3, #1
 800951a:	4619      	mov	r1, r3
 800951c:	4610      	mov	r0, r2
 800951e:	f7fd fc9f 	bl	8006e60 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009528:	2102      	movs	r1, #2
 800952a:	4618      	mov	r0, r3
 800952c:	f7fd fc98 	bl	8006e60 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009536:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800953a:	4618      	mov	r0, r3
 800953c:	f7fd fc75 	bl	8006e2a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	1dda      	adds	r2, r3, #7
 8009544:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009548:	2301      	movs	r3, #1
 800954a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800954c:	f7fd fbf4 	bl	8006d38 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009558:	2301      	movs	r3, #1
 800955a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800955c:	f7fd fbec 	bl	8006d38 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8009560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009562:	2100      	movs	r1, #0
 8009564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009566:	f7fd fcc8 	bl	8006efa <mem_set>
		sect = b_fat;		/* FAT start sector */
 800956a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800956c:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800956e:	2300      	movs	r3, #0
 8009570:	64bb      	str	r3, [r7, #72]	; 0x48
 8009572:	e04b      	b.n	800960c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8009574:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009578:	2b03      	cmp	r3, #3
 800957a:	d113      	bne.n	80095a4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800957c:	f06f 0107 	mvn.w	r1, #7
 8009580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009582:	f7fd fc6d 	bl	8006e60 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8009586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009588:	3304      	adds	r3, #4
 800958a:	f04f 31ff 	mov.w	r1, #4294967295
 800958e:	4618      	mov	r0, r3
 8009590:	f7fd fc66 	bl	8006e60 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	3308      	adds	r3, #8
 8009598:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800959c:	4618      	mov	r0, r3
 800959e:	f7fd fc5f 	bl	8006e60 <st_dword>
 80095a2:	e00b      	b.n	80095bc <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80095a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d101      	bne.n	80095b0 <f_mkfs+0x678>
 80095ac:	4b21      	ldr	r3, [pc, #132]	; (8009634 <f_mkfs+0x6fc>)
 80095ae:	e001      	b.n	80095b4 <f_mkfs+0x67c>
 80095b0:	f06f 0307 	mvn.w	r3, #7
 80095b4:	4619      	mov	r1, r3
 80095b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095b8:	f7fd fc52 	bl	8006e60 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80095bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095be:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80095c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c4:	4293      	cmp	r3, r2
 80095c6:	bf28      	it	cs
 80095c8:	4613      	movcs	r3, r2
 80095ca:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80095cc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80095d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095d6:	f7fd fbaf 	bl	8006d38 <disk_write>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d001      	beq.n	80095e4 <f_mkfs+0x6ac>
 80095e0:	2301      	movs	r3, #1
 80095e2:	e0cf      	b.n	8009784 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80095e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80095e6:	461a      	mov	r2, r3
 80095e8:	2100      	movs	r1, #0
 80095ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ec:	f7fd fc85 	bl	8006efa <mem_set>
				sect += n; nsect -= n;
 80095f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095f4:	4413      	add	r3, r2
 80095f6:	667b      	str	r3, [r7, #100]	; 0x64
 80095f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8009600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1dc      	bne.n	80095c0 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8009606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009608:	3301      	adds	r3, #1
 800960a:	64bb      	str	r3, [r7, #72]	; 0x48
 800960c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800960e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009610:	429a      	cmp	r2, r3
 8009612:	d3af      	bcc.n	8009574 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8009614:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009618:	2b03      	cmp	r3, #3
 800961a:	d10d      	bne.n	8009638 <f_mkfs+0x700>
 800961c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961e:	e00c      	b.n	800963a <f_mkfs+0x702>
 8009620:	0800abf4 	.word	0x0800abf4
 8009624:	0800ac00 	.word	0x0800ac00
 8009628:	0800ac14 	.word	0x0800ac14
 800962c:	41615252 	.word	0x41615252
 8009630:	61417272 	.word	0x61417272
 8009634:	00fffff8 	.word	0x00fffff8
 8009638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800963a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800963c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	4293      	cmp	r3, r2
 8009642:	bf28      	it	cs
 8009644:	4613      	movcs	r3, r2
 8009646:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8009648:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800964c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800964e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009650:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009652:	f7fd fb71 	bl	8006d38 <disk_write>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <f_mkfs+0x728>
 800965c:	2301      	movs	r3, #1
 800965e:	e091      	b.n	8009784 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8009660:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009664:	4413      	add	r3, r2
 8009666:	667b      	str	r3, [r7, #100]	; 0x64
 8009668:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800966a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8009670:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009672:	2b00      	cmp	r3, #0
 8009674:	d1e2      	bne.n	800963c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8009676:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800967a:	2b03      	cmp	r3, #3
 800967c:	d103      	bne.n	8009686 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800967e:	230c      	movs	r3, #12
 8009680:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009684:	e010      	b.n	80096a8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800968c:	d303      	bcc.n	8009696 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800968e:	2306      	movs	r3, #6
 8009690:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8009694:	e008      	b.n	80096a8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8009696:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800969a:	2b02      	cmp	r3, #2
 800969c:	d101      	bne.n	80096a2 <f_mkfs+0x76a>
 800969e:	2304      	movs	r3, #4
 80096a0:	e000      	b.n	80096a4 <f_mkfs+0x76c>
 80096a2:	2301      	movs	r3, #1
 80096a4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	f003 0308 	and.w	r3, r3, #8
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d15b      	bne.n	800976a <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80096b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096b4:	461a      	mov	r2, r3
 80096b6:	2100      	movs	r1, #0
 80096b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ba:	f7fd fc1e 	bl	8006efa <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80096c4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fd fbae 	bl	8006e2a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80096d4:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	2200      	movs	r2, #0
 80096da:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	3301      	adds	r3, #1
 80096e0:	2201      	movs	r2, #1
 80096e2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	3302      	adds	r3, #2
 80096e8:	2201      	movs	r2, #1
 80096ea:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	3303      	adds	r3, #3
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	3304      	adds	r3, #4
 80096f8:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80096fc:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	441a      	add	r2, r3
 8009704:	4b21      	ldr	r3, [pc, #132]	; (800978c <f_mkfs+0x854>)
 8009706:	fba3 1302 	umull	r1, r3, r3, r2
 800970a:	1ad2      	subs	r2, r2, r3
 800970c:	0852      	lsrs	r2, r2, #1
 800970e:	4413      	add	r3, r2
 8009710:	0b5b      	lsrs	r3, r3, #13
 8009712:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	3305      	adds	r3, #5
 8009718:	22fe      	movs	r2, #254	; 0xfe
 800971a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800971c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800971e:	089b      	lsrs	r3, r3, #2
 8009720:	b2da      	uxtb	r2, r3
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	3306      	adds	r3, #6
 8009726:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800972a:	b2d2      	uxtb	r2, r2
 800972c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	3307      	adds	r3, #7
 8009732:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009734:	b2d2      	uxtb	r2, r2
 8009736:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	3308      	adds	r3, #8
 800973c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800973e:	4618      	mov	r0, r3
 8009740:	f7fd fb8e 	bl	8006e60 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	330c      	adds	r3, #12
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f7fd fb87 	bl	8006e60 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8009752:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8009756:	2301      	movs	r3, #1
 8009758:	2200      	movs	r2, #0
 800975a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800975c:	f7fd faec 	bl	8006d38 <disk_write>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <f_mkfs+0x832>
 8009766:	2301      	movs	r3, #1
 8009768:	e00c      	b.n	8009784 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800976a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800976e:	2200      	movs	r2, #0
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f7fd fb00 	bl	8006d78 <disk_ioctl>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <f_mkfs+0x84a>
 800977e:	2301      	movs	r3, #1
 8009780:	e000      	b.n	8009784 <f_mkfs+0x84c>

	return FR_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3774      	adds	r7, #116	; 0x74
 8009788:	46bd      	mov	sp, r7
 800978a:	bd90      	pop	{r4, r7, pc}
 800978c:	0515565b 	.word	0x0515565b

08009790 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009790:	b480      	push	{r7}
 8009792:	b087      	sub	sp, #28
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4613      	mov	r3, r2
 800979c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800979e:	2301      	movs	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80097a6:	4b1f      	ldr	r3, [pc, #124]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097a8:	7a5b      	ldrb	r3, [r3, #9]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d131      	bne.n	8009814 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80097b0:	4b1c      	ldr	r3, [pc, #112]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097b2:	7a5b      	ldrb	r3, [r3, #9]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	461a      	mov	r2, r3
 80097b8:	4b1a      	ldr	r3, [pc, #104]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097ba:	2100      	movs	r1, #0
 80097bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80097be:	4b19      	ldr	r3, [pc, #100]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097c0:	7a5b      	ldrb	r3, [r3, #9]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	4a17      	ldr	r2, [pc, #92]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097d0:	7a5b      	ldrb	r3, [r3, #9]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	461a      	mov	r2, r3
 80097d6:	4b13      	ldr	r3, [pc, #76]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097d8:	4413      	add	r3, r2
 80097da:	79fa      	ldrb	r2, [r7, #7]
 80097dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80097de:	4b11      	ldr	r3, [pc, #68]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097e0:	7a5b      	ldrb	r3, [r3, #9]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	b2d1      	uxtb	r1, r2
 80097e8:	4a0e      	ldr	r2, [pc, #56]	; (8009824 <FATFS_LinkDriverEx+0x94>)
 80097ea:	7251      	strb	r1, [r2, #9]
 80097ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80097ee:	7dbb      	ldrb	r3, [r7, #22]
 80097f0:	3330      	adds	r3, #48	; 0x30
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	3301      	adds	r3, #1
 80097fc:	223a      	movs	r2, #58	; 0x3a
 80097fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	3302      	adds	r3, #2
 8009804:	222f      	movs	r2, #47	; 0x2f
 8009806:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	3303      	adds	r3, #3
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
}
 8009816:	4618      	mov	r0, r3
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	2000078c 	.word	0x2000078c

08009828 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009832:	2200      	movs	r2, #0
 8009834:	6839      	ldr	r1, [r7, #0]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7ff ffaa 	bl	8009790 <FATFS_LinkDriverEx>
 800983c:	4603      	mov	r3, r0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3708      	adds	r7, #8
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <__errno>:
 8009848:	4b01      	ldr	r3, [pc, #4]	; (8009850 <__errno+0x8>)
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	2000000c 	.word	0x2000000c

08009854 <__libc_init_array>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	4d0d      	ldr	r5, [pc, #52]	; (800988c <__libc_init_array+0x38>)
 8009858:	4c0d      	ldr	r4, [pc, #52]	; (8009890 <__libc_init_array+0x3c>)
 800985a:	1b64      	subs	r4, r4, r5
 800985c:	10a4      	asrs	r4, r4, #2
 800985e:	2600      	movs	r6, #0
 8009860:	42a6      	cmp	r6, r4
 8009862:	d109      	bne.n	8009878 <__libc_init_array+0x24>
 8009864:	4d0b      	ldr	r5, [pc, #44]	; (8009894 <__libc_init_array+0x40>)
 8009866:	4c0c      	ldr	r4, [pc, #48]	; (8009898 <__libc_init_array+0x44>)
 8009868:	f001 f98a 	bl	800ab80 <_init>
 800986c:	1b64      	subs	r4, r4, r5
 800986e:	10a4      	asrs	r4, r4, #2
 8009870:	2600      	movs	r6, #0
 8009872:	42a6      	cmp	r6, r4
 8009874:	d105      	bne.n	8009882 <__libc_init_array+0x2e>
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	f855 3b04 	ldr.w	r3, [r5], #4
 800987c:	4798      	blx	r3
 800987e:	3601      	adds	r6, #1
 8009880:	e7ee      	b.n	8009860 <__libc_init_array+0xc>
 8009882:	f855 3b04 	ldr.w	r3, [r5], #4
 8009886:	4798      	blx	r3
 8009888:	3601      	adds	r6, #1
 800988a:	e7f2      	b.n	8009872 <__libc_init_array+0x1e>
 800988c:	0800ad9c 	.word	0x0800ad9c
 8009890:	0800ad9c 	.word	0x0800ad9c
 8009894:	0800ad9c 	.word	0x0800ad9c
 8009898:	0800ada0 	.word	0x0800ada0

0800989c <memset>:
 800989c:	4402      	add	r2, r0
 800989e:	4603      	mov	r3, r0
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d100      	bne.n	80098a6 <memset+0xa>
 80098a4:	4770      	bx	lr
 80098a6:	f803 1b01 	strb.w	r1, [r3], #1
 80098aa:	e7f9      	b.n	80098a0 <memset+0x4>

080098ac <iprintf>:
 80098ac:	b40f      	push	{r0, r1, r2, r3}
 80098ae:	4b0a      	ldr	r3, [pc, #40]	; (80098d8 <iprintf+0x2c>)
 80098b0:	b513      	push	{r0, r1, r4, lr}
 80098b2:	681c      	ldr	r4, [r3, #0]
 80098b4:	b124      	cbz	r4, 80098c0 <iprintf+0x14>
 80098b6:	69a3      	ldr	r3, [r4, #24]
 80098b8:	b913      	cbnz	r3, 80098c0 <iprintf+0x14>
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 f886 	bl	80099cc <__sinit>
 80098c0:	ab05      	add	r3, sp, #20
 80098c2:	9a04      	ldr	r2, [sp, #16]
 80098c4:	68a1      	ldr	r1, [r4, #8]
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fb39 	bl	8009f40 <_vfiprintf_r>
 80098ce:	b002      	add	sp, #8
 80098d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d4:	b004      	add	sp, #16
 80098d6:	4770      	bx	lr
 80098d8:	2000000c 	.word	0x2000000c

080098dc <_vsiprintf_r>:
 80098dc:	b500      	push	{lr}
 80098de:	b09b      	sub	sp, #108	; 0x6c
 80098e0:	9100      	str	r1, [sp, #0]
 80098e2:	9104      	str	r1, [sp, #16]
 80098e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098e8:	9105      	str	r1, [sp, #20]
 80098ea:	9102      	str	r1, [sp, #8]
 80098ec:	4905      	ldr	r1, [pc, #20]	; (8009904 <_vsiprintf_r+0x28>)
 80098ee:	9103      	str	r1, [sp, #12]
 80098f0:	4669      	mov	r1, sp
 80098f2:	f000 f9fb 	bl	8009cec <_svfiprintf_r>
 80098f6:	9b00      	ldr	r3, [sp, #0]
 80098f8:	2200      	movs	r2, #0
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	b01b      	add	sp, #108	; 0x6c
 80098fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009902:	bf00      	nop
 8009904:	ffff0208 	.word	0xffff0208

08009908 <vsiprintf>:
 8009908:	4613      	mov	r3, r2
 800990a:	460a      	mov	r2, r1
 800990c:	4601      	mov	r1, r0
 800990e:	4802      	ldr	r0, [pc, #8]	; (8009918 <vsiprintf+0x10>)
 8009910:	6800      	ldr	r0, [r0, #0]
 8009912:	f7ff bfe3 	b.w	80098dc <_vsiprintf_r>
 8009916:	bf00      	nop
 8009918:	2000000c 	.word	0x2000000c

0800991c <std>:
 800991c:	2300      	movs	r3, #0
 800991e:	b510      	push	{r4, lr}
 8009920:	4604      	mov	r4, r0
 8009922:	e9c0 3300 	strd	r3, r3, [r0]
 8009926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800992a:	6083      	str	r3, [r0, #8]
 800992c:	8181      	strh	r1, [r0, #12]
 800992e:	6643      	str	r3, [r0, #100]	; 0x64
 8009930:	81c2      	strh	r2, [r0, #14]
 8009932:	6183      	str	r3, [r0, #24]
 8009934:	4619      	mov	r1, r3
 8009936:	2208      	movs	r2, #8
 8009938:	305c      	adds	r0, #92	; 0x5c
 800993a:	f7ff ffaf 	bl	800989c <memset>
 800993e:	4b05      	ldr	r3, [pc, #20]	; (8009954 <std+0x38>)
 8009940:	6263      	str	r3, [r4, #36]	; 0x24
 8009942:	4b05      	ldr	r3, [pc, #20]	; (8009958 <std+0x3c>)
 8009944:	62a3      	str	r3, [r4, #40]	; 0x28
 8009946:	4b05      	ldr	r3, [pc, #20]	; (800995c <std+0x40>)
 8009948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800994a:	4b05      	ldr	r3, [pc, #20]	; (8009960 <std+0x44>)
 800994c:	6224      	str	r4, [r4, #32]
 800994e:	6323      	str	r3, [r4, #48]	; 0x30
 8009950:	bd10      	pop	{r4, pc}
 8009952:	bf00      	nop
 8009954:	0800a4e9 	.word	0x0800a4e9
 8009958:	0800a50b 	.word	0x0800a50b
 800995c:	0800a543 	.word	0x0800a543
 8009960:	0800a567 	.word	0x0800a567

08009964 <_cleanup_r>:
 8009964:	4901      	ldr	r1, [pc, #4]	; (800996c <_cleanup_r+0x8>)
 8009966:	f000 b8af 	b.w	8009ac8 <_fwalk_reent>
 800996a:	bf00      	nop
 800996c:	0800a841 	.word	0x0800a841

08009970 <__sfmoreglue>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	2268      	movs	r2, #104	; 0x68
 8009974:	1e4d      	subs	r5, r1, #1
 8009976:	4355      	muls	r5, r2
 8009978:	460e      	mov	r6, r1
 800997a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800997e:	f000 f8e5 	bl	8009b4c <_malloc_r>
 8009982:	4604      	mov	r4, r0
 8009984:	b140      	cbz	r0, 8009998 <__sfmoreglue+0x28>
 8009986:	2100      	movs	r1, #0
 8009988:	e9c0 1600 	strd	r1, r6, [r0]
 800998c:	300c      	adds	r0, #12
 800998e:	60a0      	str	r0, [r4, #8]
 8009990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009994:	f7ff ff82 	bl	800989c <memset>
 8009998:	4620      	mov	r0, r4
 800999a:	bd70      	pop	{r4, r5, r6, pc}

0800999c <__sfp_lock_acquire>:
 800999c:	4801      	ldr	r0, [pc, #4]	; (80099a4 <__sfp_lock_acquire+0x8>)
 800999e:	f000 b8b3 	b.w	8009b08 <__retarget_lock_acquire_recursive>
 80099a2:	bf00      	nop
 80099a4:	20000799 	.word	0x20000799

080099a8 <__sfp_lock_release>:
 80099a8:	4801      	ldr	r0, [pc, #4]	; (80099b0 <__sfp_lock_release+0x8>)
 80099aa:	f000 b8ae 	b.w	8009b0a <__retarget_lock_release_recursive>
 80099ae:	bf00      	nop
 80099b0:	20000799 	.word	0x20000799

080099b4 <__sinit_lock_acquire>:
 80099b4:	4801      	ldr	r0, [pc, #4]	; (80099bc <__sinit_lock_acquire+0x8>)
 80099b6:	f000 b8a7 	b.w	8009b08 <__retarget_lock_acquire_recursive>
 80099ba:	bf00      	nop
 80099bc:	2000079a 	.word	0x2000079a

080099c0 <__sinit_lock_release>:
 80099c0:	4801      	ldr	r0, [pc, #4]	; (80099c8 <__sinit_lock_release+0x8>)
 80099c2:	f000 b8a2 	b.w	8009b0a <__retarget_lock_release_recursive>
 80099c6:	bf00      	nop
 80099c8:	2000079a 	.word	0x2000079a

080099cc <__sinit>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4604      	mov	r4, r0
 80099d0:	f7ff fff0 	bl	80099b4 <__sinit_lock_acquire>
 80099d4:	69a3      	ldr	r3, [r4, #24]
 80099d6:	b11b      	cbz	r3, 80099e0 <__sinit+0x14>
 80099d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099dc:	f7ff bff0 	b.w	80099c0 <__sinit_lock_release>
 80099e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099e4:	6523      	str	r3, [r4, #80]	; 0x50
 80099e6:	4b13      	ldr	r3, [pc, #76]	; (8009a34 <__sinit+0x68>)
 80099e8:	4a13      	ldr	r2, [pc, #76]	; (8009a38 <__sinit+0x6c>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	bf04      	itt	eq
 80099f2:	2301      	moveq	r3, #1
 80099f4:	61a3      	streq	r3, [r4, #24]
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 f820 	bl	8009a3c <__sfp>
 80099fc:	6060      	str	r0, [r4, #4]
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 f81c 	bl	8009a3c <__sfp>
 8009a04:	60a0      	str	r0, [r4, #8]
 8009a06:	4620      	mov	r0, r4
 8009a08:	f000 f818 	bl	8009a3c <__sfp>
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	60e0      	str	r0, [r4, #12]
 8009a10:	2104      	movs	r1, #4
 8009a12:	6860      	ldr	r0, [r4, #4]
 8009a14:	f7ff ff82 	bl	800991c <std>
 8009a18:	68a0      	ldr	r0, [r4, #8]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	2109      	movs	r1, #9
 8009a1e:	f7ff ff7d 	bl	800991c <std>
 8009a22:	68e0      	ldr	r0, [r4, #12]
 8009a24:	2202      	movs	r2, #2
 8009a26:	2112      	movs	r1, #18
 8009a28:	f7ff ff78 	bl	800991c <std>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	61a3      	str	r3, [r4, #24]
 8009a30:	e7d2      	b.n	80099d8 <__sinit+0xc>
 8009a32:	bf00      	nop
 8009a34:	0800acfc 	.word	0x0800acfc
 8009a38:	08009965 	.word	0x08009965

08009a3c <__sfp>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	4607      	mov	r7, r0
 8009a40:	f7ff ffac 	bl	800999c <__sfp_lock_acquire>
 8009a44:	4b1e      	ldr	r3, [pc, #120]	; (8009ac0 <__sfp+0x84>)
 8009a46:	681e      	ldr	r6, [r3, #0]
 8009a48:	69b3      	ldr	r3, [r6, #24]
 8009a4a:	b913      	cbnz	r3, 8009a52 <__sfp+0x16>
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7ff ffbd 	bl	80099cc <__sinit>
 8009a52:	3648      	adds	r6, #72	; 0x48
 8009a54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	d503      	bpl.n	8009a64 <__sfp+0x28>
 8009a5c:	6833      	ldr	r3, [r6, #0]
 8009a5e:	b30b      	cbz	r3, 8009aa4 <__sfp+0x68>
 8009a60:	6836      	ldr	r6, [r6, #0]
 8009a62:	e7f7      	b.n	8009a54 <__sfp+0x18>
 8009a64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a68:	b9d5      	cbnz	r5, 8009aa0 <__sfp+0x64>
 8009a6a:	4b16      	ldr	r3, [pc, #88]	; (8009ac4 <__sfp+0x88>)
 8009a6c:	60e3      	str	r3, [r4, #12]
 8009a6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a72:	6665      	str	r5, [r4, #100]	; 0x64
 8009a74:	f000 f847 	bl	8009b06 <__retarget_lock_init_recursive>
 8009a78:	f7ff ff96 	bl	80099a8 <__sfp_lock_release>
 8009a7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a84:	6025      	str	r5, [r4, #0]
 8009a86:	61a5      	str	r5, [r4, #24]
 8009a88:	2208      	movs	r2, #8
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a90:	f7ff ff04 	bl	800989c <memset>
 8009a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa0:	3468      	adds	r4, #104	; 0x68
 8009aa2:	e7d9      	b.n	8009a58 <__sfp+0x1c>
 8009aa4:	2104      	movs	r1, #4
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f7ff ff62 	bl	8009970 <__sfmoreglue>
 8009aac:	4604      	mov	r4, r0
 8009aae:	6030      	str	r0, [r6, #0]
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d1d5      	bne.n	8009a60 <__sfp+0x24>
 8009ab4:	f7ff ff78 	bl	80099a8 <__sfp_lock_release>
 8009ab8:	230c      	movs	r3, #12
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	e7ee      	b.n	8009a9c <__sfp+0x60>
 8009abe:	bf00      	nop
 8009ac0:	0800acfc 	.word	0x0800acfc
 8009ac4:	ffff0001 	.word	0xffff0001

08009ac8 <_fwalk_reent>:
 8009ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009acc:	4606      	mov	r6, r0
 8009ace:	4688      	mov	r8, r1
 8009ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ad4:	2700      	movs	r7, #0
 8009ad6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ada:	f1b9 0901 	subs.w	r9, r9, #1
 8009ade:	d505      	bpl.n	8009aec <_fwalk_reent+0x24>
 8009ae0:	6824      	ldr	r4, [r4, #0]
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	d1f7      	bne.n	8009ad6 <_fwalk_reent+0xe>
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aec:	89ab      	ldrh	r3, [r5, #12]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d907      	bls.n	8009b02 <_fwalk_reent+0x3a>
 8009af2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009af6:	3301      	adds	r3, #1
 8009af8:	d003      	beq.n	8009b02 <_fwalk_reent+0x3a>
 8009afa:	4629      	mov	r1, r5
 8009afc:	4630      	mov	r0, r6
 8009afe:	47c0      	blx	r8
 8009b00:	4307      	orrs	r7, r0
 8009b02:	3568      	adds	r5, #104	; 0x68
 8009b04:	e7e9      	b.n	8009ada <_fwalk_reent+0x12>

08009b06 <__retarget_lock_init_recursive>:
 8009b06:	4770      	bx	lr

08009b08 <__retarget_lock_acquire_recursive>:
 8009b08:	4770      	bx	lr

08009b0a <__retarget_lock_release_recursive>:
 8009b0a:	4770      	bx	lr

08009b0c <sbrk_aligned>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	4e0e      	ldr	r6, [pc, #56]	; (8009b48 <sbrk_aligned+0x3c>)
 8009b10:	460c      	mov	r4, r1
 8009b12:	6831      	ldr	r1, [r6, #0]
 8009b14:	4605      	mov	r5, r0
 8009b16:	b911      	cbnz	r1, 8009b1e <sbrk_aligned+0x12>
 8009b18:	f000 fcd6 	bl	800a4c8 <_sbrk_r>
 8009b1c:	6030      	str	r0, [r6, #0]
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 fcd1 	bl	800a4c8 <_sbrk_r>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	d00a      	beq.n	8009b40 <sbrk_aligned+0x34>
 8009b2a:	1cc4      	adds	r4, r0, #3
 8009b2c:	f024 0403 	bic.w	r4, r4, #3
 8009b30:	42a0      	cmp	r0, r4
 8009b32:	d007      	beq.n	8009b44 <sbrk_aligned+0x38>
 8009b34:	1a21      	subs	r1, r4, r0
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 fcc6 	bl	800a4c8 <_sbrk_r>
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d101      	bne.n	8009b44 <sbrk_aligned+0x38>
 8009b40:	f04f 34ff 	mov.w	r4, #4294967295
 8009b44:	4620      	mov	r0, r4
 8009b46:	bd70      	pop	{r4, r5, r6, pc}
 8009b48:	200007a0 	.word	0x200007a0

08009b4c <_malloc_r>:
 8009b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b50:	1ccd      	adds	r5, r1, #3
 8009b52:	f025 0503 	bic.w	r5, r5, #3
 8009b56:	3508      	adds	r5, #8
 8009b58:	2d0c      	cmp	r5, #12
 8009b5a:	bf38      	it	cc
 8009b5c:	250c      	movcc	r5, #12
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	4607      	mov	r7, r0
 8009b62:	db01      	blt.n	8009b68 <_malloc_r+0x1c>
 8009b64:	42a9      	cmp	r1, r5
 8009b66:	d905      	bls.n	8009b74 <_malloc_r+0x28>
 8009b68:	230c      	movs	r3, #12
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	2600      	movs	r6, #0
 8009b6e:	4630      	mov	r0, r6
 8009b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b74:	4e2e      	ldr	r6, [pc, #184]	; (8009c30 <_malloc_r+0xe4>)
 8009b76:	f000 ff3f 	bl	800a9f8 <__malloc_lock>
 8009b7a:	6833      	ldr	r3, [r6, #0]
 8009b7c:	461c      	mov	r4, r3
 8009b7e:	bb34      	cbnz	r4, 8009bce <_malloc_r+0x82>
 8009b80:	4629      	mov	r1, r5
 8009b82:	4638      	mov	r0, r7
 8009b84:	f7ff ffc2 	bl	8009b0c <sbrk_aligned>
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	d14d      	bne.n	8009c2a <_malloc_r+0xde>
 8009b8e:	6834      	ldr	r4, [r6, #0]
 8009b90:	4626      	mov	r6, r4
 8009b92:	2e00      	cmp	r6, #0
 8009b94:	d140      	bne.n	8009c18 <_malloc_r+0xcc>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	4631      	mov	r1, r6
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	eb04 0803 	add.w	r8, r4, r3
 8009ba0:	f000 fc92 	bl	800a4c8 <_sbrk_r>
 8009ba4:	4580      	cmp	r8, r0
 8009ba6:	d13a      	bne.n	8009c1e <_malloc_r+0xd2>
 8009ba8:	6821      	ldr	r1, [r4, #0]
 8009baa:	3503      	adds	r5, #3
 8009bac:	1a6d      	subs	r5, r5, r1
 8009bae:	f025 0503 	bic.w	r5, r5, #3
 8009bb2:	3508      	adds	r5, #8
 8009bb4:	2d0c      	cmp	r5, #12
 8009bb6:	bf38      	it	cc
 8009bb8:	250c      	movcc	r5, #12
 8009bba:	4629      	mov	r1, r5
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f7ff ffa5 	bl	8009b0c <sbrk_aligned>
 8009bc2:	3001      	adds	r0, #1
 8009bc4:	d02b      	beq.n	8009c1e <_malloc_r+0xd2>
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	442b      	add	r3, r5
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	e00e      	b.n	8009bec <_malloc_r+0xa0>
 8009bce:	6822      	ldr	r2, [r4, #0]
 8009bd0:	1b52      	subs	r2, r2, r5
 8009bd2:	d41e      	bmi.n	8009c12 <_malloc_r+0xc6>
 8009bd4:	2a0b      	cmp	r2, #11
 8009bd6:	d916      	bls.n	8009c06 <_malloc_r+0xba>
 8009bd8:	1961      	adds	r1, r4, r5
 8009bda:	42a3      	cmp	r3, r4
 8009bdc:	6025      	str	r5, [r4, #0]
 8009bde:	bf18      	it	ne
 8009be0:	6059      	strne	r1, [r3, #4]
 8009be2:	6863      	ldr	r3, [r4, #4]
 8009be4:	bf08      	it	eq
 8009be6:	6031      	streq	r1, [r6, #0]
 8009be8:	5162      	str	r2, [r4, r5]
 8009bea:	604b      	str	r3, [r1, #4]
 8009bec:	4638      	mov	r0, r7
 8009bee:	f104 060b 	add.w	r6, r4, #11
 8009bf2:	f000 ff07 	bl	800aa04 <__malloc_unlock>
 8009bf6:	f026 0607 	bic.w	r6, r6, #7
 8009bfa:	1d23      	adds	r3, r4, #4
 8009bfc:	1af2      	subs	r2, r6, r3
 8009bfe:	d0b6      	beq.n	8009b6e <_malloc_r+0x22>
 8009c00:	1b9b      	subs	r3, r3, r6
 8009c02:	50a3      	str	r3, [r4, r2]
 8009c04:	e7b3      	b.n	8009b6e <_malloc_r+0x22>
 8009c06:	6862      	ldr	r2, [r4, #4]
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	bf0c      	ite	eq
 8009c0c:	6032      	streq	r2, [r6, #0]
 8009c0e:	605a      	strne	r2, [r3, #4]
 8009c10:	e7ec      	b.n	8009bec <_malloc_r+0xa0>
 8009c12:	4623      	mov	r3, r4
 8009c14:	6864      	ldr	r4, [r4, #4]
 8009c16:	e7b2      	b.n	8009b7e <_malloc_r+0x32>
 8009c18:	4634      	mov	r4, r6
 8009c1a:	6876      	ldr	r6, [r6, #4]
 8009c1c:	e7b9      	b.n	8009b92 <_malloc_r+0x46>
 8009c1e:	230c      	movs	r3, #12
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	4638      	mov	r0, r7
 8009c24:	f000 feee 	bl	800aa04 <__malloc_unlock>
 8009c28:	e7a1      	b.n	8009b6e <_malloc_r+0x22>
 8009c2a:	6025      	str	r5, [r4, #0]
 8009c2c:	e7de      	b.n	8009bec <_malloc_r+0xa0>
 8009c2e:	bf00      	nop
 8009c30:	2000079c 	.word	0x2000079c

08009c34 <__ssputs_r>:
 8009c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c38:	688e      	ldr	r6, [r1, #8]
 8009c3a:	429e      	cmp	r6, r3
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	4690      	mov	r8, r2
 8009c42:	461f      	mov	r7, r3
 8009c44:	d838      	bhi.n	8009cb8 <__ssputs_r+0x84>
 8009c46:	898a      	ldrh	r2, [r1, #12]
 8009c48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c4c:	d032      	beq.n	8009cb4 <__ssputs_r+0x80>
 8009c4e:	6825      	ldr	r5, [r4, #0]
 8009c50:	6909      	ldr	r1, [r1, #16]
 8009c52:	eba5 0901 	sub.w	r9, r5, r1
 8009c56:	6965      	ldr	r5, [r4, #20]
 8009c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c60:	3301      	adds	r3, #1
 8009c62:	444b      	add	r3, r9
 8009c64:	106d      	asrs	r5, r5, #1
 8009c66:	429d      	cmp	r5, r3
 8009c68:	bf38      	it	cc
 8009c6a:	461d      	movcc	r5, r3
 8009c6c:	0553      	lsls	r3, r2, #21
 8009c6e:	d531      	bpl.n	8009cd4 <__ssputs_r+0xa0>
 8009c70:	4629      	mov	r1, r5
 8009c72:	f7ff ff6b 	bl	8009b4c <_malloc_r>
 8009c76:	4606      	mov	r6, r0
 8009c78:	b950      	cbnz	r0, 8009c90 <__ssputs_r+0x5c>
 8009c7a:	230c      	movs	r3, #12
 8009c7c:	f8ca 3000 	str.w	r3, [sl]
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c86:	81a3      	strh	r3, [r4, #12]
 8009c88:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c90:	6921      	ldr	r1, [r4, #16]
 8009c92:	464a      	mov	r2, r9
 8009c94:	f000 fe88 	bl	800a9a8 <memcpy>
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca2:	81a3      	strh	r3, [r4, #12]
 8009ca4:	6126      	str	r6, [r4, #16]
 8009ca6:	6165      	str	r5, [r4, #20]
 8009ca8:	444e      	add	r6, r9
 8009caa:	eba5 0509 	sub.w	r5, r5, r9
 8009cae:	6026      	str	r6, [r4, #0]
 8009cb0:	60a5      	str	r5, [r4, #8]
 8009cb2:	463e      	mov	r6, r7
 8009cb4:	42be      	cmp	r6, r7
 8009cb6:	d900      	bls.n	8009cba <__ssputs_r+0x86>
 8009cb8:	463e      	mov	r6, r7
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	4641      	mov	r1, r8
 8009cc0:	f000 fe80 	bl	800a9c4 <memmove>
 8009cc4:	68a3      	ldr	r3, [r4, #8]
 8009cc6:	1b9b      	subs	r3, r3, r6
 8009cc8:	60a3      	str	r3, [r4, #8]
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	4433      	add	r3, r6
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e7db      	b.n	8009c8c <__ssputs_r+0x58>
 8009cd4:	462a      	mov	r2, r5
 8009cd6:	f000 fee7 	bl	800aaa8 <_realloc_r>
 8009cda:	4606      	mov	r6, r0
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d1e1      	bne.n	8009ca4 <__ssputs_r+0x70>
 8009ce0:	6921      	ldr	r1, [r4, #16]
 8009ce2:	4650      	mov	r0, sl
 8009ce4:	f000 fe94 	bl	800aa10 <_free_r>
 8009ce8:	e7c7      	b.n	8009c7a <__ssputs_r+0x46>
	...

08009cec <_svfiprintf_r>:
 8009cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	4698      	mov	r8, r3
 8009cf2:	898b      	ldrh	r3, [r1, #12]
 8009cf4:	061b      	lsls	r3, r3, #24
 8009cf6:	b09d      	sub	sp, #116	; 0x74
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	4614      	mov	r4, r2
 8009cfe:	d50e      	bpl.n	8009d1e <_svfiprintf_r+0x32>
 8009d00:	690b      	ldr	r3, [r1, #16]
 8009d02:	b963      	cbnz	r3, 8009d1e <_svfiprintf_r+0x32>
 8009d04:	2140      	movs	r1, #64	; 0x40
 8009d06:	f7ff ff21 	bl	8009b4c <_malloc_r>
 8009d0a:	6028      	str	r0, [r5, #0]
 8009d0c:	6128      	str	r0, [r5, #16]
 8009d0e:	b920      	cbnz	r0, 8009d1a <_svfiprintf_r+0x2e>
 8009d10:	230c      	movs	r3, #12
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	e0d1      	b.n	8009ebe <_svfiprintf_r+0x1d2>
 8009d1a:	2340      	movs	r3, #64	; 0x40
 8009d1c:	616b      	str	r3, [r5, #20]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9309      	str	r3, [sp, #36]	; 0x24
 8009d22:	2320      	movs	r3, #32
 8009d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d2c:	2330      	movs	r3, #48	; 0x30
 8009d2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ed8 <_svfiprintf_r+0x1ec>
 8009d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d36:	f04f 0901 	mov.w	r9, #1
 8009d3a:	4623      	mov	r3, r4
 8009d3c:	469a      	mov	sl, r3
 8009d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d42:	b10a      	cbz	r2, 8009d48 <_svfiprintf_r+0x5c>
 8009d44:	2a25      	cmp	r2, #37	; 0x25
 8009d46:	d1f9      	bne.n	8009d3c <_svfiprintf_r+0x50>
 8009d48:	ebba 0b04 	subs.w	fp, sl, r4
 8009d4c:	d00b      	beq.n	8009d66 <_svfiprintf_r+0x7a>
 8009d4e:	465b      	mov	r3, fp
 8009d50:	4622      	mov	r2, r4
 8009d52:	4629      	mov	r1, r5
 8009d54:	4638      	mov	r0, r7
 8009d56:	f7ff ff6d 	bl	8009c34 <__ssputs_r>
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f000 80aa 	beq.w	8009eb4 <_svfiprintf_r+0x1c8>
 8009d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d62:	445a      	add	r2, fp
 8009d64:	9209      	str	r2, [sp, #36]	; 0x24
 8009d66:	f89a 3000 	ldrb.w	r3, [sl]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80a2 	beq.w	8009eb4 <_svfiprintf_r+0x1c8>
 8009d70:	2300      	movs	r3, #0
 8009d72:	f04f 32ff 	mov.w	r2, #4294967295
 8009d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d7a:	f10a 0a01 	add.w	sl, sl, #1
 8009d7e:	9304      	str	r3, [sp, #16]
 8009d80:	9307      	str	r3, [sp, #28]
 8009d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d86:	931a      	str	r3, [sp, #104]	; 0x68
 8009d88:	4654      	mov	r4, sl
 8009d8a:	2205      	movs	r2, #5
 8009d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d90:	4851      	ldr	r0, [pc, #324]	; (8009ed8 <_svfiprintf_r+0x1ec>)
 8009d92:	f7f6 fa45 	bl	8000220 <memchr>
 8009d96:	9a04      	ldr	r2, [sp, #16]
 8009d98:	b9d8      	cbnz	r0, 8009dd2 <_svfiprintf_r+0xe6>
 8009d9a:	06d0      	lsls	r0, r2, #27
 8009d9c:	bf44      	itt	mi
 8009d9e:	2320      	movmi	r3, #32
 8009da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009da4:	0711      	lsls	r1, r2, #28
 8009da6:	bf44      	itt	mi
 8009da8:	232b      	movmi	r3, #43	; 0x2b
 8009daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dae:	f89a 3000 	ldrb.w	r3, [sl]
 8009db2:	2b2a      	cmp	r3, #42	; 0x2a
 8009db4:	d015      	beq.n	8009de2 <_svfiprintf_r+0xf6>
 8009db6:	9a07      	ldr	r2, [sp, #28]
 8009db8:	4654      	mov	r4, sl
 8009dba:	2000      	movs	r0, #0
 8009dbc:	f04f 0c0a 	mov.w	ip, #10
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dc6:	3b30      	subs	r3, #48	; 0x30
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	d94e      	bls.n	8009e6a <_svfiprintf_r+0x17e>
 8009dcc:	b1b0      	cbz	r0, 8009dfc <_svfiprintf_r+0x110>
 8009dce:	9207      	str	r2, [sp, #28]
 8009dd0:	e014      	b.n	8009dfc <_svfiprintf_r+0x110>
 8009dd2:	eba0 0308 	sub.w	r3, r0, r8
 8009dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	46a2      	mov	sl, r4
 8009de0:	e7d2      	b.n	8009d88 <_svfiprintf_r+0x9c>
 8009de2:	9b03      	ldr	r3, [sp, #12]
 8009de4:	1d19      	adds	r1, r3, #4
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	9103      	str	r1, [sp, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	bfbb      	ittet	lt
 8009dee:	425b      	neglt	r3, r3
 8009df0:	f042 0202 	orrlt.w	r2, r2, #2
 8009df4:	9307      	strge	r3, [sp, #28]
 8009df6:	9307      	strlt	r3, [sp, #28]
 8009df8:	bfb8      	it	lt
 8009dfa:	9204      	strlt	r2, [sp, #16]
 8009dfc:	7823      	ldrb	r3, [r4, #0]
 8009dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8009e00:	d10c      	bne.n	8009e1c <_svfiprintf_r+0x130>
 8009e02:	7863      	ldrb	r3, [r4, #1]
 8009e04:	2b2a      	cmp	r3, #42	; 0x2a
 8009e06:	d135      	bne.n	8009e74 <_svfiprintf_r+0x188>
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	1d1a      	adds	r2, r3, #4
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	9203      	str	r2, [sp, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	bfb8      	it	lt
 8009e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e18:	3402      	adds	r4, #2
 8009e1a:	9305      	str	r3, [sp, #20]
 8009e1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ee8 <_svfiprintf_r+0x1fc>
 8009e20:	7821      	ldrb	r1, [r4, #0]
 8009e22:	2203      	movs	r2, #3
 8009e24:	4650      	mov	r0, sl
 8009e26:	f7f6 f9fb 	bl	8000220 <memchr>
 8009e2a:	b140      	cbz	r0, 8009e3e <_svfiprintf_r+0x152>
 8009e2c:	2340      	movs	r3, #64	; 0x40
 8009e2e:	eba0 000a 	sub.w	r0, r0, sl
 8009e32:	fa03 f000 	lsl.w	r0, r3, r0
 8009e36:	9b04      	ldr	r3, [sp, #16]
 8009e38:	4303      	orrs	r3, r0
 8009e3a:	3401      	adds	r4, #1
 8009e3c:	9304      	str	r3, [sp, #16]
 8009e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e42:	4826      	ldr	r0, [pc, #152]	; (8009edc <_svfiprintf_r+0x1f0>)
 8009e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e48:	2206      	movs	r2, #6
 8009e4a:	f7f6 f9e9 	bl	8000220 <memchr>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d038      	beq.n	8009ec4 <_svfiprintf_r+0x1d8>
 8009e52:	4b23      	ldr	r3, [pc, #140]	; (8009ee0 <_svfiprintf_r+0x1f4>)
 8009e54:	bb1b      	cbnz	r3, 8009e9e <_svfiprintf_r+0x1b2>
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	3307      	adds	r3, #7
 8009e5a:	f023 0307 	bic.w	r3, r3, #7
 8009e5e:	3308      	adds	r3, #8
 8009e60:	9303      	str	r3, [sp, #12]
 8009e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e64:	4433      	add	r3, r6
 8009e66:	9309      	str	r3, [sp, #36]	; 0x24
 8009e68:	e767      	b.n	8009d3a <_svfiprintf_r+0x4e>
 8009e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e6e:	460c      	mov	r4, r1
 8009e70:	2001      	movs	r0, #1
 8009e72:	e7a5      	b.n	8009dc0 <_svfiprintf_r+0xd4>
 8009e74:	2300      	movs	r3, #0
 8009e76:	3401      	adds	r4, #1
 8009e78:	9305      	str	r3, [sp, #20]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	f04f 0c0a 	mov.w	ip, #10
 8009e80:	4620      	mov	r0, r4
 8009e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e86:	3a30      	subs	r2, #48	; 0x30
 8009e88:	2a09      	cmp	r2, #9
 8009e8a:	d903      	bls.n	8009e94 <_svfiprintf_r+0x1a8>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d0c5      	beq.n	8009e1c <_svfiprintf_r+0x130>
 8009e90:	9105      	str	r1, [sp, #20]
 8009e92:	e7c3      	b.n	8009e1c <_svfiprintf_r+0x130>
 8009e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e98:	4604      	mov	r4, r0
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e7f0      	b.n	8009e80 <_svfiprintf_r+0x194>
 8009e9e:	ab03      	add	r3, sp, #12
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	462a      	mov	r2, r5
 8009ea4:	4b0f      	ldr	r3, [pc, #60]	; (8009ee4 <_svfiprintf_r+0x1f8>)
 8009ea6:	a904      	add	r1, sp, #16
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f3af 8000 	nop.w
 8009eae:	1c42      	adds	r2, r0, #1
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	d1d6      	bne.n	8009e62 <_svfiprintf_r+0x176>
 8009eb4:	89ab      	ldrh	r3, [r5, #12]
 8009eb6:	065b      	lsls	r3, r3, #25
 8009eb8:	f53f af2c 	bmi.w	8009d14 <_svfiprintf_r+0x28>
 8009ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ebe:	b01d      	add	sp, #116	; 0x74
 8009ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec4:	ab03      	add	r3, sp, #12
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	462a      	mov	r2, r5
 8009eca:	4b06      	ldr	r3, [pc, #24]	; (8009ee4 <_svfiprintf_r+0x1f8>)
 8009ecc:	a904      	add	r1, sp, #16
 8009ece:	4638      	mov	r0, r7
 8009ed0:	f000 f9d4 	bl	800a27c <_printf_i>
 8009ed4:	e7eb      	b.n	8009eae <_svfiprintf_r+0x1c2>
 8009ed6:	bf00      	nop
 8009ed8:	0800ad60 	.word	0x0800ad60
 8009edc:	0800ad6a 	.word	0x0800ad6a
 8009ee0:	00000000 	.word	0x00000000
 8009ee4:	08009c35 	.word	0x08009c35
 8009ee8:	0800ad66 	.word	0x0800ad66

08009eec <__sfputc_r>:
 8009eec:	6893      	ldr	r3, [r2, #8]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	b410      	push	{r4}
 8009ef4:	6093      	str	r3, [r2, #8]
 8009ef6:	da08      	bge.n	8009f0a <__sfputc_r+0x1e>
 8009ef8:	6994      	ldr	r4, [r2, #24]
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	db01      	blt.n	8009f02 <__sfputc_r+0x16>
 8009efe:	290a      	cmp	r1, #10
 8009f00:	d103      	bne.n	8009f0a <__sfputc_r+0x1e>
 8009f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f06:	f000 bb33 	b.w	800a570 <__swbuf_r>
 8009f0a:	6813      	ldr	r3, [r2, #0]
 8009f0c:	1c58      	adds	r0, r3, #1
 8009f0e:	6010      	str	r0, [r2, #0]
 8009f10:	7019      	strb	r1, [r3, #0]
 8009f12:	4608      	mov	r0, r1
 8009f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <__sfputs_r>:
 8009f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	460f      	mov	r7, r1
 8009f20:	4614      	mov	r4, r2
 8009f22:	18d5      	adds	r5, r2, r3
 8009f24:	42ac      	cmp	r4, r5
 8009f26:	d101      	bne.n	8009f2c <__sfputs_r+0x12>
 8009f28:	2000      	movs	r0, #0
 8009f2a:	e007      	b.n	8009f3c <__sfputs_r+0x22>
 8009f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f30:	463a      	mov	r2, r7
 8009f32:	4630      	mov	r0, r6
 8009f34:	f7ff ffda 	bl	8009eec <__sfputc_r>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d1f3      	bne.n	8009f24 <__sfputs_r+0xa>
 8009f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f40 <_vfiprintf_r>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	460d      	mov	r5, r1
 8009f46:	b09d      	sub	sp, #116	; 0x74
 8009f48:	4614      	mov	r4, r2
 8009f4a:	4698      	mov	r8, r3
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	b118      	cbz	r0, 8009f58 <_vfiprintf_r+0x18>
 8009f50:	6983      	ldr	r3, [r0, #24]
 8009f52:	b90b      	cbnz	r3, 8009f58 <_vfiprintf_r+0x18>
 8009f54:	f7ff fd3a 	bl	80099cc <__sinit>
 8009f58:	4b89      	ldr	r3, [pc, #548]	; (800a180 <_vfiprintf_r+0x240>)
 8009f5a:	429d      	cmp	r5, r3
 8009f5c:	d11b      	bne.n	8009f96 <_vfiprintf_r+0x56>
 8009f5e:	6875      	ldr	r5, [r6, #4]
 8009f60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f62:	07d9      	lsls	r1, r3, #31
 8009f64:	d405      	bmi.n	8009f72 <_vfiprintf_r+0x32>
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	059a      	lsls	r2, r3, #22
 8009f6a:	d402      	bmi.n	8009f72 <_vfiprintf_r+0x32>
 8009f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f6e:	f7ff fdcb 	bl	8009b08 <__retarget_lock_acquire_recursive>
 8009f72:	89ab      	ldrh	r3, [r5, #12]
 8009f74:	071b      	lsls	r3, r3, #28
 8009f76:	d501      	bpl.n	8009f7c <_vfiprintf_r+0x3c>
 8009f78:	692b      	ldr	r3, [r5, #16]
 8009f7a:	b9eb      	cbnz	r3, 8009fb8 <_vfiprintf_r+0x78>
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f000 fb5a 	bl	800a638 <__swsetup_r>
 8009f84:	b1c0      	cbz	r0, 8009fb8 <_vfiprintf_r+0x78>
 8009f86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f88:	07dc      	lsls	r4, r3, #31
 8009f8a:	d50e      	bpl.n	8009faa <_vfiprintf_r+0x6a>
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f90:	b01d      	add	sp, #116	; 0x74
 8009f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f96:	4b7b      	ldr	r3, [pc, #492]	; (800a184 <_vfiprintf_r+0x244>)
 8009f98:	429d      	cmp	r5, r3
 8009f9a:	d101      	bne.n	8009fa0 <_vfiprintf_r+0x60>
 8009f9c:	68b5      	ldr	r5, [r6, #8]
 8009f9e:	e7df      	b.n	8009f60 <_vfiprintf_r+0x20>
 8009fa0:	4b79      	ldr	r3, [pc, #484]	; (800a188 <_vfiprintf_r+0x248>)
 8009fa2:	429d      	cmp	r5, r3
 8009fa4:	bf08      	it	eq
 8009fa6:	68f5      	ldreq	r5, [r6, #12]
 8009fa8:	e7da      	b.n	8009f60 <_vfiprintf_r+0x20>
 8009faa:	89ab      	ldrh	r3, [r5, #12]
 8009fac:	0598      	lsls	r0, r3, #22
 8009fae:	d4ed      	bmi.n	8009f8c <_vfiprintf_r+0x4c>
 8009fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fb2:	f7ff fdaa 	bl	8009b0a <__retarget_lock_release_recursive>
 8009fb6:	e7e9      	b.n	8009f8c <_vfiprintf_r+0x4c>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	9309      	str	r3, [sp, #36]	; 0x24
 8009fbc:	2320      	movs	r3, #32
 8009fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fc6:	2330      	movs	r3, #48	; 0x30
 8009fc8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a18c <_vfiprintf_r+0x24c>
 8009fcc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fd0:	f04f 0901 	mov.w	r9, #1
 8009fd4:	4623      	mov	r3, r4
 8009fd6:	469a      	mov	sl, r3
 8009fd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fdc:	b10a      	cbz	r2, 8009fe2 <_vfiprintf_r+0xa2>
 8009fde:	2a25      	cmp	r2, #37	; 0x25
 8009fe0:	d1f9      	bne.n	8009fd6 <_vfiprintf_r+0x96>
 8009fe2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fe6:	d00b      	beq.n	800a000 <_vfiprintf_r+0xc0>
 8009fe8:	465b      	mov	r3, fp
 8009fea:	4622      	mov	r2, r4
 8009fec:	4629      	mov	r1, r5
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f7ff ff93 	bl	8009f1a <__sfputs_r>
 8009ff4:	3001      	adds	r0, #1
 8009ff6:	f000 80aa 	beq.w	800a14e <_vfiprintf_r+0x20e>
 8009ffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ffc:	445a      	add	r2, fp
 8009ffe:	9209      	str	r2, [sp, #36]	; 0x24
 800a000:	f89a 3000 	ldrb.w	r3, [sl]
 800a004:	2b00      	cmp	r3, #0
 800a006:	f000 80a2 	beq.w	800a14e <_vfiprintf_r+0x20e>
 800a00a:	2300      	movs	r3, #0
 800a00c:	f04f 32ff 	mov.w	r2, #4294967295
 800a010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a014:	f10a 0a01 	add.w	sl, sl, #1
 800a018:	9304      	str	r3, [sp, #16]
 800a01a:	9307      	str	r3, [sp, #28]
 800a01c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a020:	931a      	str	r3, [sp, #104]	; 0x68
 800a022:	4654      	mov	r4, sl
 800a024:	2205      	movs	r2, #5
 800a026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a02a:	4858      	ldr	r0, [pc, #352]	; (800a18c <_vfiprintf_r+0x24c>)
 800a02c:	f7f6 f8f8 	bl	8000220 <memchr>
 800a030:	9a04      	ldr	r2, [sp, #16]
 800a032:	b9d8      	cbnz	r0, 800a06c <_vfiprintf_r+0x12c>
 800a034:	06d1      	lsls	r1, r2, #27
 800a036:	bf44      	itt	mi
 800a038:	2320      	movmi	r3, #32
 800a03a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a03e:	0713      	lsls	r3, r2, #28
 800a040:	bf44      	itt	mi
 800a042:	232b      	movmi	r3, #43	; 0x2b
 800a044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a048:	f89a 3000 	ldrb.w	r3, [sl]
 800a04c:	2b2a      	cmp	r3, #42	; 0x2a
 800a04e:	d015      	beq.n	800a07c <_vfiprintf_r+0x13c>
 800a050:	9a07      	ldr	r2, [sp, #28]
 800a052:	4654      	mov	r4, sl
 800a054:	2000      	movs	r0, #0
 800a056:	f04f 0c0a 	mov.w	ip, #10
 800a05a:	4621      	mov	r1, r4
 800a05c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a060:	3b30      	subs	r3, #48	; 0x30
 800a062:	2b09      	cmp	r3, #9
 800a064:	d94e      	bls.n	800a104 <_vfiprintf_r+0x1c4>
 800a066:	b1b0      	cbz	r0, 800a096 <_vfiprintf_r+0x156>
 800a068:	9207      	str	r2, [sp, #28]
 800a06a:	e014      	b.n	800a096 <_vfiprintf_r+0x156>
 800a06c:	eba0 0308 	sub.w	r3, r0, r8
 800a070:	fa09 f303 	lsl.w	r3, r9, r3
 800a074:	4313      	orrs	r3, r2
 800a076:	9304      	str	r3, [sp, #16]
 800a078:	46a2      	mov	sl, r4
 800a07a:	e7d2      	b.n	800a022 <_vfiprintf_r+0xe2>
 800a07c:	9b03      	ldr	r3, [sp, #12]
 800a07e:	1d19      	adds	r1, r3, #4
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	9103      	str	r1, [sp, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	bfbb      	ittet	lt
 800a088:	425b      	neglt	r3, r3
 800a08a:	f042 0202 	orrlt.w	r2, r2, #2
 800a08e:	9307      	strge	r3, [sp, #28]
 800a090:	9307      	strlt	r3, [sp, #28]
 800a092:	bfb8      	it	lt
 800a094:	9204      	strlt	r2, [sp, #16]
 800a096:	7823      	ldrb	r3, [r4, #0]
 800a098:	2b2e      	cmp	r3, #46	; 0x2e
 800a09a:	d10c      	bne.n	800a0b6 <_vfiprintf_r+0x176>
 800a09c:	7863      	ldrb	r3, [r4, #1]
 800a09e:	2b2a      	cmp	r3, #42	; 0x2a
 800a0a0:	d135      	bne.n	800a10e <_vfiprintf_r+0x1ce>
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	1d1a      	adds	r2, r3, #4
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	9203      	str	r2, [sp, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	bfb8      	it	lt
 800a0ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0b2:	3402      	adds	r4, #2
 800a0b4:	9305      	str	r3, [sp, #20]
 800a0b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a19c <_vfiprintf_r+0x25c>
 800a0ba:	7821      	ldrb	r1, [r4, #0]
 800a0bc:	2203      	movs	r2, #3
 800a0be:	4650      	mov	r0, sl
 800a0c0:	f7f6 f8ae 	bl	8000220 <memchr>
 800a0c4:	b140      	cbz	r0, 800a0d8 <_vfiprintf_r+0x198>
 800a0c6:	2340      	movs	r3, #64	; 0x40
 800a0c8:	eba0 000a 	sub.w	r0, r0, sl
 800a0cc:	fa03 f000 	lsl.w	r0, r3, r0
 800a0d0:	9b04      	ldr	r3, [sp, #16]
 800a0d2:	4303      	orrs	r3, r0
 800a0d4:	3401      	adds	r4, #1
 800a0d6:	9304      	str	r3, [sp, #16]
 800a0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0dc:	482c      	ldr	r0, [pc, #176]	; (800a190 <_vfiprintf_r+0x250>)
 800a0de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0e2:	2206      	movs	r2, #6
 800a0e4:	f7f6 f89c 	bl	8000220 <memchr>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d03f      	beq.n	800a16c <_vfiprintf_r+0x22c>
 800a0ec:	4b29      	ldr	r3, [pc, #164]	; (800a194 <_vfiprintf_r+0x254>)
 800a0ee:	bb1b      	cbnz	r3, 800a138 <_vfiprintf_r+0x1f8>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	3307      	adds	r3, #7
 800a0f4:	f023 0307 	bic.w	r3, r3, #7
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	9303      	str	r3, [sp, #12]
 800a0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fe:	443b      	add	r3, r7
 800a100:	9309      	str	r3, [sp, #36]	; 0x24
 800a102:	e767      	b.n	8009fd4 <_vfiprintf_r+0x94>
 800a104:	fb0c 3202 	mla	r2, ip, r2, r3
 800a108:	460c      	mov	r4, r1
 800a10a:	2001      	movs	r0, #1
 800a10c:	e7a5      	b.n	800a05a <_vfiprintf_r+0x11a>
 800a10e:	2300      	movs	r3, #0
 800a110:	3401      	adds	r4, #1
 800a112:	9305      	str	r3, [sp, #20]
 800a114:	4619      	mov	r1, r3
 800a116:	f04f 0c0a 	mov.w	ip, #10
 800a11a:	4620      	mov	r0, r4
 800a11c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a120:	3a30      	subs	r2, #48	; 0x30
 800a122:	2a09      	cmp	r2, #9
 800a124:	d903      	bls.n	800a12e <_vfiprintf_r+0x1ee>
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0c5      	beq.n	800a0b6 <_vfiprintf_r+0x176>
 800a12a:	9105      	str	r1, [sp, #20]
 800a12c:	e7c3      	b.n	800a0b6 <_vfiprintf_r+0x176>
 800a12e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a132:	4604      	mov	r4, r0
 800a134:	2301      	movs	r3, #1
 800a136:	e7f0      	b.n	800a11a <_vfiprintf_r+0x1da>
 800a138:	ab03      	add	r3, sp, #12
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	462a      	mov	r2, r5
 800a13e:	4b16      	ldr	r3, [pc, #88]	; (800a198 <_vfiprintf_r+0x258>)
 800a140:	a904      	add	r1, sp, #16
 800a142:	4630      	mov	r0, r6
 800a144:	f3af 8000 	nop.w
 800a148:	4607      	mov	r7, r0
 800a14a:	1c78      	adds	r0, r7, #1
 800a14c:	d1d6      	bne.n	800a0fc <_vfiprintf_r+0x1bc>
 800a14e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a150:	07d9      	lsls	r1, r3, #31
 800a152:	d405      	bmi.n	800a160 <_vfiprintf_r+0x220>
 800a154:	89ab      	ldrh	r3, [r5, #12]
 800a156:	059a      	lsls	r2, r3, #22
 800a158:	d402      	bmi.n	800a160 <_vfiprintf_r+0x220>
 800a15a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a15c:	f7ff fcd5 	bl	8009b0a <__retarget_lock_release_recursive>
 800a160:	89ab      	ldrh	r3, [r5, #12]
 800a162:	065b      	lsls	r3, r3, #25
 800a164:	f53f af12 	bmi.w	8009f8c <_vfiprintf_r+0x4c>
 800a168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a16a:	e711      	b.n	8009f90 <_vfiprintf_r+0x50>
 800a16c:	ab03      	add	r3, sp, #12
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	462a      	mov	r2, r5
 800a172:	4b09      	ldr	r3, [pc, #36]	; (800a198 <_vfiprintf_r+0x258>)
 800a174:	a904      	add	r1, sp, #16
 800a176:	4630      	mov	r0, r6
 800a178:	f000 f880 	bl	800a27c <_printf_i>
 800a17c:	e7e4      	b.n	800a148 <_vfiprintf_r+0x208>
 800a17e:	bf00      	nop
 800a180:	0800ad20 	.word	0x0800ad20
 800a184:	0800ad40 	.word	0x0800ad40
 800a188:	0800ad00 	.word	0x0800ad00
 800a18c:	0800ad60 	.word	0x0800ad60
 800a190:	0800ad6a 	.word	0x0800ad6a
 800a194:	00000000 	.word	0x00000000
 800a198:	08009f1b 	.word	0x08009f1b
 800a19c:	0800ad66 	.word	0x0800ad66

0800a1a0 <_printf_common>:
 800a1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a4:	4616      	mov	r6, r2
 800a1a6:	4699      	mov	r9, r3
 800a1a8:	688a      	ldr	r2, [r1, #8]
 800a1aa:	690b      	ldr	r3, [r1, #16]
 800a1ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	bfb8      	it	lt
 800a1b4:	4613      	movlt	r3, r2
 800a1b6:	6033      	str	r3, [r6, #0]
 800a1b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1bc:	4607      	mov	r7, r0
 800a1be:	460c      	mov	r4, r1
 800a1c0:	b10a      	cbz	r2, 800a1c6 <_printf_common+0x26>
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	6033      	str	r3, [r6, #0]
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	0699      	lsls	r1, r3, #26
 800a1ca:	bf42      	ittt	mi
 800a1cc:	6833      	ldrmi	r3, [r6, #0]
 800a1ce:	3302      	addmi	r3, #2
 800a1d0:	6033      	strmi	r3, [r6, #0]
 800a1d2:	6825      	ldr	r5, [r4, #0]
 800a1d4:	f015 0506 	ands.w	r5, r5, #6
 800a1d8:	d106      	bne.n	800a1e8 <_printf_common+0x48>
 800a1da:	f104 0a19 	add.w	sl, r4, #25
 800a1de:	68e3      	ldr	r3, [r4, #12]
 800a1e0:	6832      	ldr	r2, [r6, #0]
 800a1e2:	1a9b      	subs	r3, r3, r2
 800a1e4:	42ab      	cmp	r3, r5
 800a1e6:	dc26      	bgt.n	800a236 <_printf_common+0x96>
 800a1e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1ec:	1e13      	subs	r3, r2, #0
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	bf18      	it	ne
 800a1f2:	2301      	movne	r3, #1
 800a1f4:	0692      	lsls	r2, r2, #26
 800a1f6:	d42b      	bmi.n	800a250 <_printf_common+0xb0>
 800a1f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	4638      	mov	r0, r7
 800a200:	47c0      	blx	r8
 800a202:	3001      	adds	r0, #1
 800a204:	d01e      	beq.n	800a244 <_printf_common+0xa4>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	68e5      	ldr	r5, [r4, #12]
 800a20a:	6832      	ldr	r2, [r6, #0]
 800a20c:	f003 0306 	and.w	r3, r3, #6
 800a210:	2b04      	cmp	r3, #4
 800a212:	bf08      	it	eq
 800a214:	1aad      	subeq	r5, r5, r2
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	6922      	ldr	r2, [r4, #16]
 800a21a:	bf0c      	ite	eq
 800a21c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a220:	2500      	movne	r5, #0
 800a222:	4293      	cmp	r3, r2
 800a224:	bfc4      	itt	gt
 800a226:	1a9b      	subgt	r3, r3, r2
 800a228:	18ed      	addgt	r5, r5, r3
 800a22a:	2600      	movs	r6, #0
 800a22c:	341a      	adds	r4, #26
 800a22e:	42b5      	cmp	r5, r6
 800a230:	d11a      	bne.n	800a268 <_printf_common+0xc8>
 800a232:	2000      	movs	r0, #0
 800a234:	e008      	b.n	800a248 <_printf_common+0xa8>
 800a236:	2301      	movs	r3, #1
 800a238:	4652      	mov	r2, sl
 800a23a:	4649      	mov	r1, r9
 800a23c:	4638      	mov	r0, r7
 800a23e:	47c0      	blx	r8
 800a240:	3001      	adds	r0, #1
 800a242:	d103      	bne.n	800a24c <_printf_common+0xac>
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24c:	3501      	adds	r5, #1
 800a24e:	e7c6      	b.n	800a1de <_printf_common+0x3e>
 800a250:	18e1      	adds	r1, r4, r3
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	2030      	movs	r0, #48	; 0x30
 800a256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a25a:	4422      	add	r2, r4
 800a25c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a264:	3302      	adds	r3, #2
 800a266:	e7c7      	b.n	800a1f8 <_printf_common+0x58>
 800a268:	2301      	movs	r3, #1
 800a26a:	4622      	mov	r2, r4
 800a26c:	4649      	mov	r1, r9
 800a26e:	4638      	mov	r0, r7
 800a270:	47c0      	blx	r8
 800a272:	3001      	adds	r0, #1
 800a274:	d0e6      	beq.n	800a244 <_printf_common+0xa4>
 800a276:	3601      	adds	r6, #1
 800a278:	e7d9      	b.n	800a22e <_printf_common+0x8e>
	...

0800a27c <_printf_i>:
 800a27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a280:	7e0f      	ldrb	r7, [r1, #24]
 800a282:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a284:	2f78      	cmp	r7, #120	; 0x78
 800a286:	4691      	mov	r9, r2
 800a288:	4680      	mov	r8, r0
 800a28a:	460c      	mov	r4, r1
 800a28c:	469a      	mov	sl, r3
 800a28e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a292:	d807      	bhi.n	800a2a4 <_printf_i+0x28>
 800a294:	2f62      	cmp	r7, #98	; 0x62
 800a296:	d80a      	bhi.n	800a2ae <_printf_i+0x32>
 800a298:	2f00      	cmp	r7, #0
 800a29a:	f000 80d8 	beq.w	800a44e <_printf_i+0x1d2>
 800a29e:	2f58      	cmp	r7, #88	; 0x58
 800a2a0:	f000 80a3 	beq.w	800a3ea <_printf_i+0x16e>
 800a2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2ac:	e03a      	b.n	800a324 <_printf_i+0xa8>
 800a2ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2b2:	2b15      	cmp	r3, #21
 800a2b4:	d8f6      	bhi.n	800a2a4 <_printf_i+0x28>
 800a2b6:	a101      	add	r1, pc, #4	; (adr r1, 800a2bc <_printf_i+0x40>)
 800a2b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2bc:	0800a315 	.word	0x0800a315
 800a2c0:	0800a329 	.word	0x0800a329
 800a2c4:	0800a2a5 	.word	0x0800a2a5
 800a2c8:	0800a2a5 	.word	0x0800a2a5
 800a2cc:	0800a2a5 	.word	0x0800a2a5
 800a2d0:	0800a2a5 	.word	0x0800a2a5
 800a2d4:	0800a329 	.word	0x0800a329
 800a2d8:	0800a2a5 	.word	0x0800a2a5
 800a2dc:	0800a2a5 	.word	0x0800a2a5
 800a2e0:	0800a2a5 	.word	0x0800a2a5
 800a2e4:	0800a2a5 	.word	0x0800a2a5
 800a2e8:	0800a435 	.word	0x0800a435
 800a2ec:	0800a359 	.word	0x0800a359
 800a2f0:	0800a417 	.word	0x0800a417
 800a2f4:	0800a2a5 	.word	0x0800a2a5
 800a2f8:	0800a2a5 	.word	0x0800a2a5
 800a2fc:	0800a457 	.word	0x0800a457
 800a300:	0800a2a5 	.word	0x0800a2a5
 800a304:	0800a359 	.word	0x0800a359
 800a308:	0800a2a5 	.word	0x0800a2a5
 800a30c:	0800a2a5 	.word	0x0800a2a5
 800a310:	0800a41f 	.word	0x0800a41f
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	1d1a      	adds	r2, r3, #4
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	602a      	str	r2, [r5, #0]
 800a31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a324:	2301      	movs	r3, #1
 800a326:	e0a3      	b.n	800a470 <_printf_i+0x1f4>
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	6829      	ldr	r1, [r5, #0]
 800a32c:	0606      	lsls	r6, r0, #24
 800a32e:	f101 0304 	add.w	r3, r1, #4
 800a332:	d50a      	bpl.n	800a34a <_printf_i+0xce>
 800a334:	680e      	ldr	r6, [r1, #0]
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	2e00      	cmp	r6, #0
 800a33a:	da03      	bge.n	800a344 <_printf_i+0xc8>
 800a33c:	232d      	movs	r3, #45	; 0x2d
 800a33e:	4276      	negs	r6, r6
 800a340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a344:	485e      	ldr	r0, [pc, #376]	; (800a4c0 <_printf_i+0x244>)
 800a346:	230a      	movs	r3, #10
 800a348:	e019      	b.n	800a37e <_printf_i+0x102>
 800a34a:	680e      	ldr	r6, [r1, #0]
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a352:	bf18      	it	ne
 800a354:	b236      	sxthne	r6, r6
 800a356:	e7ef      	b.n	800a338 <_printf_i+0xbc>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	6820      	ldr	r0, [r4, #0]
 800a35c:	1d19      	adds	r1, r3, #4
 800a35e:	6029      	str	r1, [r5, #0]
 800a360:	0601      	lsls	r1, r0, #24
 800a362:	d501      	bpl.n	800a368 <_printf_i+0xec>
 800a364:	681e      	ldr	r6, [r3, #0]
 800a366:	e002      	b.n	800a36e <_printf_i+0xf2>
 800a368:	0646      	lsls	r6, r0, #25
 800a36a:	d5fb      	bpl.n	800a364 <_printf_i+0xe8>
 800a36c:	881e      	ldrh	r6, [r3, #0]
 800a36e:	4854      	ldr	r0, [pc, #336]	; (800a4c0 <_printf_i+0x244>)
 800a370:	2f6f      	cmp	r7, #111	; 0x6f
 800a372:	bf0c      	ite	eq
 800a374:	2308      	moveq	r3, #8
 800a376:	230a      	movne	r3, #10
 800a378:	2100      	movs	r1, #0
 800a37a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a37e:	6865      	ldr	r5, [r4, #4]
 800a380:	60a5      	str	r5, [r4, #8]
 800a382:	2d00      	cmp	r5, #0
 800a384:	bfa2      	ittt	ge
 800a386:	6821      	ldrge	r1, [r4, #0]
 800a388:	f021 0104 	bicge.w	r1, r1, #4
 800a38c:	6021      	strge	r1, [r4, #0]
 800a38e:	b90e      	cbnz	r6, 800a394 <_printf_i+0x118>
 800a390:	2d00      	cmp	r5, #0
 800a392:	d04d      	beq.n	800a430 <_printf_i+0x1b4>
 800a394:	4615      	mov	r5, r2
 800a396:	fbb6 f1f3 	udiv	r1, r6, r3
 800a39a:	fb03 6711 	mls	r7, r3, r1, r6
 800a39e:	5dc7      	ldrb	r7, [r0, r7]
 800a3a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3a4:	4637      	mov	r7, r6
 800a3a6:	42bb      	cmp	r3, r7
 800a3a8:	460e      	mov	r6, r1
 800a3aa:	d9f4      	bls.n	800a396 <_printf_i+0x11a>
 800a3ac:	2b08      	cmp	r3, #8
 800a3ae:	d10b      	bne.n	800a3c8 <_printf_i+0x14c>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	07de      	lsls	r6, r3, #31
 800a3b4:	d508      	bpl.n	800a3c8 <_printf_i+0x14c>
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	6861      	ldr	r1, [r4, #4]
 800a3ba:	4299      	cmp	r1, r3
 800a3bc:	bfde      	ittt	le
 800a3be:	2330      	movle	r3, #48	; 0x30
 800a3c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3c8:	1b52      	subs	r2, r2, r5
 800a3ca:	6122      	str	r2, [r4, #16]
 800a3cc:	f8cd a000 	str.w	sl, [sp]
 800a3d0:	464b      	mov	r3, r9
 800a3d2:	aa03      	add	r2, sp, #12
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	f7ff fee2 	bl	800a1a0 <_printf_common>
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d14c      	bne.n	800a47a <_printf_i+0x1fe>
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e4:	b004      	add	sp, #16
 800a3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ea:	4835      	ldr	r0, [pc, #212]	; (800a4c0 <_printf_i+0x244>)
 800a3ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3f0:	6829      	ldr	r1, [r5, #0]
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3f8:	6029      	str	r1, [r5, #0]
 800a3fa:	061d      	lsls	r5, r3, #24
 800a3fc:	d514      	bpl.n	800a428 <_printf_i+0x1ac>
 800a3fe:	07df      	lsls	r7, r3, #31
 800a400:	bf44      	itt	mi
 800a402:	f043 0320 	orrmi.w	r3, r3, #32
 800a406:	6023      	strmi	r3, [r4, #0]
 800a408:	b91e      	cbnz	r6, 800a412 <_printf_i+0x196>
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	f023 0320 	bic.w	r3, r3, #32
 800a410:	6023      	str	r3, [r4, #0]
 800a412:	2310      	movs	r3, #16
 800a414:	e7b0      	b.n	800a378 <_printf_i+0xfc>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	f043 0320 	orr.w	r3, r3, #32
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	2378      	movs	r3, #120	; 0x78
 800a420:	4828      	ldr	r0, [pc, #160]	; (800a4c4 <_printf_i+0x248>)
 800a422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a426:	e7e3      	b.n	800a3f0 <_printf_i+0x174>
 800a428:	0659      	lsls	r1, r3, #25
 800a42a:	bf48      	it	mi
 800a42c:	b2b6      	uxthmi	r6, r6
 800a42e:	e7e6      	b.n	800a3fe <_printf_i+0x182>
 800a430:	4615      	mov	r5, r2
 800a432:	e7bb      	b.n	800a3ac <_printf_i+0x130>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	6826      	ldr	r6, [r4, #0]
 800a438:	6961      	ldr	r1, [r4, #20]
 800a43a:	1d18      	adds	r0, r3, #4
 800a43c:	6028      	str	r0, [r5, #0]
 800a43e:	0635      	lsls	r5, r6, #24
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	d501      	bpl.n	800a448 <_printf_i+0x1cc>
 800a444:	6019      	str	r1, [r3, #0]
 800a446:	e002      	b.n	800a44e <_printf_i+0x1d2>
 800a448:	0670      	lsls	r0, r6, #25
 800a44a:	d5fb      	bpl.n	800a444 <_printf_i+0x1c8>
 800a44c:	8019      	strh	r1, [r3, #0]
 800a44e:	2300      	movs	r3, #0
 800a450:	6123      	str	r3, [r4, #16]
 800a452:	4615      	mov	r5, r2
 800a454:	e7ba      	b.n	800a3cc <_printf_i+0x150>
 800a456:	682b      	ldr	r3, [r5, #0]
 800a458:	1d1a      	adds	r2, r3, #4
 800a45a:	602a      	str	r2, [r5, #0]
 800a45c:	681d      	ldr	r5, [r3, #0]
 800a45e:	6862      	ldr	r2, [r4, #4]
 800a460:	2100      	movs	r1, #0
 800a462:	4628      	mov	r0, r5
 800a464:	f7f5 fedc 	bl	8000220 <memchr>
 800a468:	b108      	cbz	r0, 800a46e <_printf_i+0x1f2>
 800a46a:	1b40      	subs	r0, r0, r5
 800a46c:	6060      	str	r0, [r4, #4]
 800a46e:	6863      	ldr	r3, [r4, #4]
 800a470:	6123      	str	r3, [r4, #16]
 800a472:	2300      	movs	r3, #0
 800a474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a478:	e7a8      	b.n	800a3cc <_printf_i+0x150>
 800a47a:	6923      	ldr	r3, [r4, #16]
 800a47c:	462a      	mov	r2, r5
 800a47e:	4649      	mov	r1, r9
 800a480:	4640      	mov	r0, r8
 800a482:	47d0      	blx	sl
 800a484:	3001      	adds	r0, #1
 800a486:	d0ab      	beq.n	800a3e0 <_printf_i+0x164>
 800a488:	6823      	ldr	r3, [r4, #0]
 800a48a:	079b      	lsls	r3, r3, #30
 800a48c:	d413      	bmi.n	800a4b6 <_printf_i+0x23a>
 800a48e:	68e0      	ldr	r0, [r4, #12]
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	4298      	cmp	r0, r3
 800a494:	bfb8      	it	lt
 800a496:	4618      	movlt	r0, r3
 800a498:	e7a4      	b.n	800a3e4 <_printf_i+0x168>
 800a49a:	2301      	movs	r3, #1
 800a49c:	4632      	mov	r2, r6
 800a49e:	4649      	mov	r1, r9
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	47d0      	blx	sl
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d09b      	beq.n	800a3e0 <_printf_i+0x164>
 800a4a8:	3501      	adds	r5, #1
 800a4aa:	68e3      	ldr	r3, [r4, #12]
 800a4ac:	9903      	ldr	r1, [sp, #12]
 800a4ae:	1a5b      	subs	r3, r3, r1
 800a4b0:	42ab      	cmp	r3, r5
 800a4b2:	dcf2      	bgt.n	800a49a <_printf_i+0x21e>
 800a4b4:	e7eb      	b.n	800a48e <_printf_i+0x212>
 800a4b6:	2500      	movs	r5, #0
 800a4b8:	f104 0619 	add.w	r6, r4, #25
 800a4bc:	e7f5      	b.n	800a4aa <_printf_i+0x22e>
 800a4be:	bf00      	nop
 800a4c0:	0800ad71 	.word	0x0800ad71
 800a4c4:	0800ad82 	.word	0x0800ad82

0800a4c8 <_sbrk_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d06      	ldr	r5, [pc, #24]	; (800a4e4 <_sbrk_r+0x1c>)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	602b      	str	r3, [r5, #0]
 800a4d4:	f7f6 fd1c 	bl	8000f10 <_sbrk>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d102      	bne.n	800a4e2 <_sbrk_r+0x1a>
 800a4dc:	682b      	ldr	r3, [r5, #0]
 800a4de:	b103      	cbz	r3, 800a4e2 <_sbrk_r+0x1a>
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	200007a4 	.word	0x200007a4

0800a4e8 <__sread>:
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f0:	f000 fb0a 	bl	800ab08 <_read_r>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	bfab      	itete	ge
 800a4f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4fa:	89a3      	ldrhlt	r3, [r4, #12]
 800a4fc:	181b      	addge	r3, r3, r0
 800a4fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a502:	bfac      	ite	ge
 800a504:	6563      	strge	r3, [r4, #84]	; 0x54
 800a506:	81a3      	strhlt	r3, [r4, #12]
 800a508:	bd10      	pop	{r4, pc}

0800a50a <__swrite>:
 800a50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	461f      	mov	r7, r3
 800a510:	898b      	ldrh	r3, [r1, #12]
 800a512:	05db      	lsls	r3, r3, #23
 800a514:	4605      	mov	r5, r0
 800a516:	460c      	mov	r4, r1
 800a518:	4616      	mov	r6, r2
 800a51a:	d505      	bpl.n	800a528 <__swrite+0x1e>
 800a51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a520:	2302      	movs	r3, #2
 800a522:	2200      	movs	r2, #0
 800a524:	f000 f9c8 	bl	800a8b8 <_lseek_r>
 800a528:	89a3      	ldrh	r3, [r4, #12]
 800a52a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a52e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a532:	81a3      	strh	r3, [r4, #12]
 800a534:	4632      	mov	r2, r6
 800a536:	463b      	mov	r3, r7
 800a538:	4628      	mov	r0, r5
 800a53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a53e:	f000 b869 	b.w	800a614 <_write_r>

0800a542 <__sseek>:
 800a542:	b510      	push	{r4, lr}
 800a544:	460c      	mov	r4, r1
 800a546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a54a:	f000 f9b5 	bl	800a8b8 <_lseek_r>
 800a54e:	1c43      	adds	r3, r0, #1
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	bf15      	itete	ne
 800a554:	6560      	strne	r0, [r4, #84]	; 0x54
 800a556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a55a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a55e:	81a3      	strheq	r3, [r4, #12]
 800a560:	bf18      	it	ne
 800a562:	81a3      	strhne	r3, [r4, #12]
 800a564:	bd10      	pop	{r4, pc}

0800a566 <__sclose>:
 800a566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a56a:	f000 b8d3 	b.w	800a714 <_close_r>
	...

0800a570 <__swbuf_r>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	460e      	mov	r6, r1
 800a574:	4614      	mov	r4, r2
 800a576:	4605      	mov	r5, r0
 800a578:	b118      	cbz	r0, 800a582 <__swbuf_r+0x12>
 800a57a:	6983      	ldr	r3, [r0, #24]
 800a57c:	b90b      	cbnz	r3, 800a582 <__swbuf_r+0x12>
 800a57e:	f7ff fa25 	bl	80099cc <__sinit>
 800a582:	4b21      	ldr	r3, [pc, #132]	; (800a608 <__swbuf_r+0x98>)
 800a584:	429c      	cmp	r4, r3
 800a586:	d12b      	bne.n	800a5e0 <__swbuf_r+0x70>
 800a588:	686c      	ldr	r4, [r5, #4]
 800a58a:	69a3      	ldr	r3, [r4, #24]
 800a58c:	60a3      	str	r3, [r4, #8]
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	071a      	lsls	r2, r3, #28
 800a592:	d52f      	bpl.n	800a5f4 <__swbuf_r+0x84>
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	b36b      	cbz	r3, 800a5f4 <__swbuf_r+0x84>
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	6820      	ldr	r0, [r4, #0]
 800a59c:	1ac0      	subs	r0, r0, r3
 800a59e:	6963      	ldr	r3, [r4, #20]
 800a5a0:	b2f6      	uxtb	r6, r6
 800a5a2:	4283      	cmp	r3, r0
 800a5a4:	4637      	mov	r7, r6
 800a5a6:	dc04      	bgt.n	800a5b2 <__swbuf_r+0x42>
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f000 f948 	bl	800a840 <_fflush_r>
 800a5b0:	bb30      	cbnz	r0, 800a600 <__swbuf_r+0x90>
 800a5b2:	68a3      	ldr	r3, [r4, #8]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	60a3      	str	r3, [r4, #8]
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	6022      	str	r2, [r4, #0]
 800a5be:	701e      	strb	r6, [r3, #0]
 800a5c0:	6963      	ldr	r3, [r4, #20]
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	4283      	cmp	r3, r0
 800a5c6:	d004      	beq.n	800a5d2 <__swbuf_r+0x62>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	07db      	lsls	r3, r3, #31
 800a5cc:	d506      	bpl.n	800a5dc <__swbuf_r+0x6c>
 800a5ce:	2e0a      	cmp	r6, #10
 800a5d0:	d104      	bne.n	800a5dc <__swbuf_r+0x6c>
 800a5d2:	4621      	mov	r1, r4
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f000 f933 	bl	800a840 <_fflush_r>
 800a5da:	b988      	cbnz	r0, 800a600 <__swbuf_r+0x90>
 800a5dc:	4638      	mov	r0, r7
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <__swbuf_r+0x9c>)
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d101      	bne.n	800a5ea <__swbuf_r+0x7a>
 800a5e6:	68ac      	ldr	r4, [r5, #8]
 800a5e8:	e7cf      	b.n	800a58a <__swbuf_r+0x1a>
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <__swbuf_r+0xa0>)
 800a5ec:	429c      	cmp	r4, r3
 800a5ee:	bf08      	it	eq
 800a5f0:	68ec      	ldreq	r4, [r5, #12]
 800a5f2:	e7ca      	b.n	800a58a <__swbuf_r+0x1a>
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 f81e 	bl	800a638 <__swsetup_r>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d0cb      	beq.n	800a598 <__swbuf_r+0x28>
 800a600:	f04f 37ff 	mov.w	r7, #4294967295
 800a604:	e7ea      	b.n	800a5dc <__swbuf_r+0x6c>
 800a606:	bf00      	nop
 800a608:	0800ad20 	.word	0x0800ad20
 800a60c:	0800ad40 	.word	0x0800ad40
 800a610:	0800ad00 	.word	0x0800ad00

0800a614 <_write_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	4d07      	ldr	r5, [pc, #28]	; (800a634 <_write_r+0x20>)
 800a618:	4604      	mov	r4, r0
 800a61a:	4608      	mov	r0, r1
 800a61c:	4611      	mov	r1, r2
 800a61e:	2200      	movs	r2, #0
 800a620:	602a      	str	r2, [r5, #0]
 800a622:	461a      	mov	r2, r3
 800a624:	f7f6 f9a6 	bl	8000974 <_write>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_write_r+0x1e>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_write_r+0x1e>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	200007a4 	.word	0x200007a4

0800a638 <__swsetup_r>:
 800a638:	4b32      	ldr	r3, [pc, #200]	; (800a704 <__swsetup_r+0xcc>)
 800a63a:	b570      	push	{r4, r5, r6, lr}
 800a63c:	681d      	ldr	r5, [r3, #0]
 800a63e:	4606      	mov	r6, r0
 800a640:	460c      	mov	r4, r1
 800a642:	b125      	cbz	r5, 800a64e <__swsetup_r+0x16>
 800a644:	69ab      	ldr	r3, [r5, #24]
 800a646:	b913      	cbnz	r3, 800a64e <__swsetup_r+0x16>
 800a648:	4628      	mov	r0, r5
 800a64a:	f7ff f9bf 	bl	80099cc <__sinit>
 800a64e:	4b2e      	ldr	r3, [pc, #184]	; (800a708 <__swsetup_r+0xd0>)
 800a650:	429c      	cmp	r4, r3
 800a652:	d10f      	bne.n	800a674 <__swsetup_r+0x3c>
 800a654:	686c      	ldr	r4, [r5, #4]
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a65c:	0719      	lsls	r1, r3, #28
 800a65e:	d42c      	bmi.n	800a6ba <__swsetup_r+0x82>
 800a660:	06dd      	lsls	r5, r3, #27
 800a662:	d411      	bmi.n	800a688 <__swsetup_r+0x50>
 800a664:	2309      	movs	r3, #9
 800a666:	6033      	str	r3, [r6, #0]
 800a668:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a66c:	81a3      	strh	r3, [r4, #12]
 800a66e:	f04f 30ff 	mov.w	r0, #4294967295
 800a672:	e03e      	b.n	800a6f2 <__swsetup_r+0xba>
 800a674:	4b25      	ldr	r3, [pc, #148]	; (800a70c <__swsetup_r+0xd4>)
 800a676:	429c      	cmp	r4, r3
 800a678:	d101      	bne.n	800a67e <__swsetup_r+0x46>
 800a67a:	68ac      	ldr	r4, [r5, #8]
 800a67c:	e7eb      	b.n	800a656 <__swsetup_r+0x1e>
 800a67e:	4b24      	ldr	r3, [pc, #144]	; (800a710 <__swsetup_r+0xd8>)
 800a680:	429c      	cmp	r4, r3
 800a682:	bf08      	it	eq
 800a684:	68ec      	ldreq	r4, [r5, #12]
 800a686:	e7e6      	b.n	800a656 <__swsetup_r+0x1e>
 800a688:	0758      	lsls	r0, r3, #29
 800a68a:	d512      	bpl.n	800a6b2 <__swsetup_r+0x7a>
 800a68c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a68e:	b141      	cbz	r1, 800a6a2 <__swsetup_r+0x6a>
 800a690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a694:	4299      	cmp	r1, r3
 800a696:	d002      	beq.n	800a69e <__swsetup_r+0x66>
 800a698:	4630      	mov	r0, r6
 800a69a:	f000 f9b9 	bl	800aa10 <_free_r>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	6363      	str	r3, [r4, #52]	; 0x34
 800a6a2:	89a3      	ldrh	r3, [r4, #12]
 800a6a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	6063      	str	r3, [r4, #4]
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	f043 0308 	orr.w	r3, r3, #8
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	6923      	ldr	r3, [r4, #16]
 800a6bc:	b94b      	cbnz	r3, 800a6d2 <__swsetup_r+0x9a>
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6c8:	d003      	beq.n	800a6d2 <__swsetup_r+0x9a>
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f000 f92b 	bl	800a928 <__smakebuf_r>
 800a6d2:	89a0      	ldrh	r0, [r4, #12]
 800a6d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6d8:	f010 0301 	ands.w	r3, r0, #1
 800a6dc:	d00a      	beq.n	800a6f4 <__swsetup_r+0xbc>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	60a3      	str	r3, [r4, #8]
 800a6e2:	6963      	ldr	r3, [r4, #20]
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	61a3      	str	r3, [r4, #24]
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	b943      	cbnz	r3, 800a6fe <__swsetup_r+0xc6>
 800a6ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6f0:	d1ba      	bne.n	800a668 <__swsetup_r+0x30>
 800a6f2:	bd70      	pop	{r4, r5, r6, pc}
 800a6f4:	0781      	lsls	r1, r0, #30
 800a6f6:	bf58      	it	pl
 800a6f8:	6963      	ldrpl	r3, [r4, #20]
 800a6fa:	60a3      	str	r3, [r4, #8]
 800a6fc:	e7f4      	b.n	800a6e8 <__swsetup_r+0xb0>
 800a6fe:	2000      	movs	r0, #0
 800a700:	e7f7      	b.n	800a6f2 <__swsetup_r+0xba>
 800a702:	bf00      	nop
 800a704:	2000000c 	.word	0x2000000c
 800a708:	0800ad20 	.word	0x0800ad20
 800a70c:	0800ad40 	.word	0x0800ad40
 800a710:	0800ad00 	.word	0x0800ad00

0800a714 <_close_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d06      	ldr	r5, [pc, #24]	; (800a730 <_close_r+0x1c>)
 800a718:	2300      	movs	r3, #0
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	602b      	str	r3, [r5, #0]
 800a720:	f7f6 fbc1 	bl	8000ea6 <_close>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_close_r+0x1a>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_close_r+0x1a>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	200007a4 	.word	0x200007a4

0800a734 <__sflush_r>:
 800a734:	898a      	ldrh	r2, [r1, #12]
 800a736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a73a:	4605      	mov	r5, r0
 800a73c:	0710      	lsls	r0, r2, #28
 800a73e:	460c      	mov	r4, r1
 800a740:	d458      	bmi.n	800a7f4 <__sflush_r+0xc0>
 800a742:	684b      	ldr	r3, [r1, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	dc05      	bgt.n	800a754 <__sflush_r+0x20>
 800a748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	dc02      	bgt.n	800a754 <__sflush_r+0x20>
 800a74e:	2000      	movs	r0, #0
 800a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a756:	2e00      	cmp	r6, #0
 800a758:	d0f9      	beq.n	800a74e <__sflush_r+0x1a>
 800a75a:	2300      	movs	r3, #0
 800a75c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a760:	682f      	ldr	r7, [r5, #0]
 800a762:	602b      	str	r3, [r5, #0]
 800a764:	d032      	beq.n	800a7cc <__sflush_r+0x98>
 800a766:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	075a      	lsls	r2, r3, #29
 800a76c:	d505      	bpl.n	800a77a <__sflush_r+0x46>
 800a76e:	6863      	ldr	r3, [r4, #4]
 800a770:	1ac0      	subs	r0, r0, r3
 800a772:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a774:	b10b      	cbz	r3, 800a77a <__sflush_r+0x46>
 800a776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a778:	1ac0      	subs	r0, r0, r3
 800a77a:	2300      	movs	r3, #0
 800a77c:	4602      	mov	r2, r0
 800a77e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a780:	6a21      	ldr	r1, [r4, #32]
 800a782:	4628      	mov	r0, r5
 800a784:	47b0      	blx	r6
 800a786:	1c43      	adds	r3, r0, #1
 800a788:	89a3      	ldrh	r3, [r4, #12]
 800a78a:	d106      	bne.n	800a79a <__sflush_r+0x66>
 800a78c:	6829      	ldr	r1, [r5, #0]
 800a78e:	291d      	cmp	r1, #29
 800a790:	d82c      	bhi.n	800a7ec <__sflush_r+0xb8>
 800a792:	4a2a      	ldr	r2, [pc, #168]	; (800a83c <__sflush_r+0x108>)
 800a794:	40ca      	lsrs	r2, r1
 800a796:	07d6      	lsls	r6, r2, #31
 800a798:	d528      	bpl.n	800a7ec <__sflush_r+0xb8>
 800a79a:	2200      	movs	r2, #0
 800a79c:	6062      	str	r2, [r4, #4]
 800a79e:	04d9      	lsls	r1, r3, #19
 800a7a0:	6922      	ldr	r2, [r4, #16]
 800a7a2:	6022      	str	r2, [r4, #0]
 800a7a4:	d504      	bpl.n	800a7b0 <__sflush_r+0x7c>
 800a7a6:	1c42      	adds	r2, r0, #1
 800a7a8:	d101      	bne.n	800a7ae <__sflush_r+0x7a>
 800a7aa:	682b      	ldr	r3, [r5, #0]
 800a7ac:	b903      	cbnz	r3, 800a7b0 <__sflush_r+0x7c>
 800a7ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7b2:	602f      	str	r7, [r5, #0]
 800a7b4:	2900      	cmp	r1, #0
 800a7b6:	d0ca      	beq.n	800a74e <__sflush_r+0x1a>
 800a7b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7bc:	4299      	cmp	r1, r3
 800a7be:	d002      	beq.n	800a7c6 <__sflush_r+0x92>
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f000 f925 	bl	800aa10 <_free_r>
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a7ca:	e7c1      	b.n	800a750 <__sflush_r+0x1c>
 800a7cc:	6a21      	ldr	r1, [r4, #32]
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	47b0      	blx	r6
 800a7d4:	1c41      	adds	r1, r0, #1
 800a7d6:	d1c7      	bne.n	800a768 <__sflush_r+0x34>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0c4      	beq.n	800a768 <__sflush_r+0x34>
 800a7de:	2b1d      	cmp	r3, #29
 800a7e0:	d001      	beq.n	800a7e6 <__sflush_r+0xb2>
 800a7e2:	2b16      	cmp	r3, #22
 800a7e4:	d101      	bne.n	800a7ea <__sflush_r+0xb6>
 800a7e6:	602f      	str	r7, [r5, #0]
 800a7e8:	e7b1      	b.n	800a74e <__sflush_r+0x1a>
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7f0:	81a3      	strh	r3, [r4, #12]
 800a7f2:	e7ad      	b.n	800a750 <__sflush_r+0x1c>
 800a7f4:	690f      	ldr	r7, [r1, #16]
 800a7f6:	2f00      	cmp	r7, #0
 800a7f8:	d0a9      	beq.n	800a74e <__sflush_r+0x1a>
 800a7fa:	0793      	lsls	r3, r2, #30
 800a7fc:	680e      	ldr	r6, [r1, #0]
 800a7fe:	bf08      	it	eq
 800a800:	694b      	ldreq	r3, [r1, #20]
 800a802:	600f      	str	r7, [r1, #0]
 800a804:	bf18      	it	ne
 800a806:	2300      	movne	r3, #0
 800a808:	eba6 0807 	sub.w	r8, r6, r7
 800a80c:	608b      	str	r3, [r1, #8]
 800a80e:	f1b8 0f00 	cmp.w	r8, #0
 800a812:	dd9c      	ble.n	800a74e <__sflush_r+0x1a>
 800a814:	6a21      	ldr	r1, [r4, #32]
 800a816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a818:	4643      	mov	r3, r8
 800a81a:	463a      	mov	r2, r7
 800a81c:	4628      	mov	r0, r5
 800a81e:	47b0      	blx	r6
 800a820:	2800      	cmp	r0, #0
 800a822:	dc06      	bgt.n	800a832 <__sflush_r+0xfe>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	f04f 30ff 	mov.w	r0, #4294967295
 800a830:	e78e      	b.n	800a750 <__sflush_r+0x1c>
 800a832:	4407      	add	r7, r0
 800a834:	eba8 0800 	sub.w	r8, r8, r0
 800a838:	e7e9      	b.n	800a80e <__sflush_r+0xda>
 800a83a:	bf00      	nop
 800a83c:	20400001 	.word	0x20400001

0800a840 <_fflush_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	690b      	ldr	r3, [r1, #16]
 800a844:	4605      	mov	r5, r0
 800a846:	460c      	mov	r4, r1
 800a848:	b913      	cbnz	r3, 800a850 <_fflush_r+0x10>
 800a84a:	2500      	movs	r5, #0
 800a84c:	4628      	mov	r0, r5
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	b118      	cbz	r0, 800a85a <_fflush_r+0x1a>
 800a852:	6983      	ldr	r3, [r0, #24]
 800a854:	b90b      	cbnz	r3, 800a85a <_fflush_r+0x1a>
 800a856:	f7ff f8b9 	bl	80099cc <__sinit>
 800a85a:	4b14      	ldr	r3, [pc, #80]	; (800a8ac <_fflush_r+0x6c>)
 800a85c:	429c      	cmp	r4, r3
 800a85e:	d11b      	bne.n	800a898 <_fflush_r+0x58>
 800a860:	686c      	ldr	r4, [r5, #4]
 800a862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d0ef      	beq.n	800a84a <_fflush_r+0xa>
 800a86a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a86c:	07d0      	lsls	r0, r2, #31
 800a86e:	d404      	bmi.n	800a87a <_fflush_r+0x3a>
 800a870:	0599      	lsls	r1, r3, #22
 800a872:	d402      	bmi.n	800a87a <_fflush_r+0x3a>
 800a874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a876:	f7ff f947 	bl	8009b08 <__retarget_lock_acquire_recursive>
 800a87a:	4628      	mov	r0, r5
 800a87c:	4621      	mov	r1, r4
 800a87e:	f7ff ff59 	bl	800a734 <__sflush_r>
 800a882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a884:	07da      	lsls	r2, r3, #31
 800a886:	4605      	mov	r5, r0
 800a888:	d4e0      	bmi.n	800a84c <_fflush_r+0xc>
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	059b      	lsls	r3, r3, #22
 800a88e:	d4dd      	bmi.n	800a84c <_fflush_r+0xc>
 800a890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a892:	f7ff f93a 	bl	8009b0a <__retarget_lock_release_recursive>
 800a896:	e7d9      	b.n	800a84c <_fflush_r+0xc>
 800a898:	4b05      	ldr	r3, [pc, #20]	; (800a8b0 <_fflush_r+0x70>)
 800a89a:	429c      	cmp	r4, r3
 800a89c:	d101      	bne.n	800a8a2 <_fflush_r+0x62>
 800a89e:	68ac      	ldr	r4, [r5, #8]
 800a8a0:	e7df      	b.n	800a862 <_fflush_r+0x22>
 800a8a2:	4b04      	ldr	r3, [pc, #16]	; (800a8b4 <_fflush_r+0x74>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	bf08      	it	eq
 800a8a8:	68ec      	ldreq	r4, [r5, #12]
 800a8aa:	e7da      	b.n	800a862 <_fflush_r+0x22>
 800a8ac:	0800ad20 	.word	0x0800ad20
 800a8b0:	0800ad40 	.word	0x0800ad40
 800a8b4:	0800ad00 	.word	0x0800ad00

0800a8b8 <_lseek_r>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	4d07      	ldr	r5, [pc, #28]	; (800a8d8 <_lseek_r+0x20>)
 800a8bc:	4604      	mov	r4, r0
 800a8be:	4608      	mov	r0, r1
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	602a      	str	r2, [r5, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f7f6 fb14 	bl	8000ef4 <_lseek>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	d102      	bne.n	800a8d6 <_lseek_r+0x1e>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	b103      	cbz	r3, 800a8d6 <_lseek_r+0x1e>
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	200007a4 	.word	0x200007a4

0800a8dc <__swhatbuf_r>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	460e      	mov	r6, r1
 800a8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e4:	2900      	cmp	r1, #0
 800a8e6:	b096      	sub	sp, #88	; 0x58
 800a8e8:	4614      	mov	r4, r2
 800a8ea:	461d      	mov	r5, r3
 800a8ec:	da08      	bge.n	800a900 <__swhatbuf_r+0x24>
 800a8ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	602a      	str	r2, [r5, #0]
 800a8f6:	061a      	lsls	r2, r3, #24
 800a8f8:	d410      	bmi.n	800a91c <__swhatbuf_r+0x40>
 800a8fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8fe:	e00e      	b.n	800a91e <__swhatbuf_r+0x42>
 800a900:	466a      	mov	r2, sp
 800a902:	f000 f913 	bl	800ab2c <_fstat_r>
 800a906:	2800      	cmp	r0, #0
 800a908:	dbf1      	blt.n	800a8ee <__swhatbuf_r+0x12>
 800a90a:	9a01      	ldr	r2, [sp, #4]
 800a90c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a910:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a914:	425a      	negs	r2, r3
 800a916:	415a      	adcs	r2, r3
 800a918:	602a      	str	r2, [r5, #0]
 800a91a:	e7ee      	b.n	800a8fa <__swhatbuf_r+0x1e>
 800a91c:	2340      	movs	r3, #64	; 0x40
 800a91e:	2000      	movs	r0, #0
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	b016      	add	sp, #88	; 0x58
 800a924:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a928 <__smakebuf_r>:
 800a928:	898b      	ldrh	r3, [r1, #12]
 800a92a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a92c:	079d      	lsls	r5, r3, #30
 800a92e:	4606      	mov	r6, r0
 800a930:	460c      	mov	r4, r1
 800a932:	d507      	bpl.n	800a944 <__smakebuf_r+0x1c>
 800a934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	6123      	str	r3, [r4, #16]
 800a93c:	2301      	movs	r3, #1
 800a93e:	6163      	str	r3, [r4, #20]
 800a940:	b002      	add	sp, #8
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	ab01      	add	r3, sp, #4
 800a946:	466a      	mov	r2, sp
 800a948:	f7ff ffc8 	bl	800a8dc <__swhatbuf_r>
 800a94c:	9900      	ldr	r1, [sp, #0]
 800a94e:	4605      	mov	r5, r0
 800a950:	4630      	mov	r0, r6
 800a952:	f7ff f8fb 	bl	8009b4c <_malloc_r>
 800a956:	b948      	cbnz	r0, 800a96c <__smakebuf_r+0x44>
 800a958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a95c:	059a      	lsls	r2, r3, #22
 800a95e:	d4ef      	bmi.n	800a940 <__smakebuf_r+0x18>
 800a960:	f023 0303 	bic.w	r3, r3, #3
 800a964:	f043 0302 	orr.w	r3, r3, #2
 800a968:	81a3      	strh	r3, [r4, #12]
 800a96a:	e7e3      	b.n	800a934 <__smakebuf_r+0xc>
 800a96c:	4b0d      	ldr	r3, [pc, #52]	; (800a9a4 <__smakebuf_r+0x7c>)
 800a96e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	6020      	str	r0, [r4, #0]
 800a974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a978:	81a3      	strh	r3, [r4, #12]
 800a97a:	9b00      	ldr	r3, [sp, #0]
 800a97c:	6163      	str	r3, [r4, #20]
 800a97e:	9b01      	ldr	r3, [sp, #4]
 800a980:	6120      	str	r0, [r4, #16]
 800a982:	b15b      	cbz	r3, 800a99c <__smakebuf_r+0x74>
 800a984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a988:	4630      	mov	r0, r6
 800a98a:	f000 f8e1 	bl	800ab50 <_isatty_r>
 800a98e:	b128      	cbz	r0, 800a99c <__smakebuf_r+0x74>
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	f023 0303 	bic.w	r3, r3, #3
 800a996:	f043 0301 	orr.w	r3, r3, #1
 800a99a:	81a3      	strh	r3, [r4, #12]
 800a99c:	89a0      	ldrh	r0, [r4, #12]
 800a99e:	4305      	orrs	r5, r0
 800a9a0:	81a5      	strh	r5, [r4, #12]
 800a9a2:	e7cd      	b.n	800a940 <__smakebuf_r+0x18>
 800a9a4:	08009965 	.word	0x08009965

0800a9a8 <memcpy>:
 800a9a8:	440a      	add	r2, r1
 800a9aa:	4291      	cmp	r1, r2
 800a9ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9b0:	d100      	bne.n	800a9b4 <memcpy+0xc>
 800a9b2:	4770      	bx	lr
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9be:	4291      	cmp	r1, r2
 800a9c0:	d1f9      	bne.n	800a9b6 <memcpy+0xe>
 800a9c2:	bd10      	pop	{r4, pc}

0800a9c4 <memmove>:
 800a9c4:	4288      	cmp	r0, r1
 800a9c6:	b510      	push	{r4, lr}
 800a9c8:	eb01 0402 	add.w	r4, r1, r2
 800a9cc:	d902      	bls.n	800a9d4 <memmove+0x10>
 800a9ce:	4284      	cmp	r4, r0
 800a9d0:	4623      	mov	r3, r4
 800a9d2:	d807      	bhi.n	800a9e4 <memmove+0x20>
 800a9d4:	1e43      	subs	r3, r0, #1
 800a9d6:	42a1      	cmp	r1, r4
 800a9d8:	d008      	beq.n	800a9ec <memmove+0x28>
 800a9da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9e2:	e7f8      	b.n	800a9d6 <memmove+0x12>
 800a9e4:	4402      	add	r2, r0
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	428a      	cmp	r2, r1
 800a9ea:	d100      	bne.n	800a9ee <memmove+0x2a>
 800a9ec:	bd10      	pop	{r4, pc}
 800a9ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9f6:	e7f7      	b.n	800a9e8 <memmove+0x24>

0800a9f8 <__malloc_lock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	; (800aa00 <__malloc_lock+0x8>)
 800a9fa:	f7ff b885 	b.w	8009b08 <__retarget_lock_acquire_recursive>
 800a9fe:	bf00      	nop
 800aa00:	20000798 	.word	0x20000798

0800aa04 <__malloc_unlock>:
 800aa04:	4801      	ldr	r0, [pc, #4]	; (800aa0c <__malloc_unlock+0x8>)
 800aa06:	f7ff b880 	b.w	8009b0a <__retarget_lock_release_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	20000798 	.word	0x20000798

0800aa10 <_free_r>:
 800aa10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa12:	2900      	cmp	r1, #0
 800aa14:	d044      	beq.n	800aaa0 <_free_r+0x90>
 800aa16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa1a:	9001      	str	r0, [sp, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa22:	bfb8      	it	lt
 800aa24:	18e4      	addlt	r4, r4, r3
 800aa26:	f7ff ffe7 	bl	800a9f8 <__malloc_lock>
 800aa2a:	4a1e      	ldr	r2, [pc, #120]	; (800aaa4 <_free_r+0x94>)
 800aa2c:	9801      	ldr	r0, [sp, #4]
 800aa2e:	6813      	ldr	r3, [r2, #0]
 800aa30:	b933      	cbnz	r3, 800aa40 <_free_r+0x30>
 800aa32:	6063      	str	r3, [r4, #4]
 800aa34:	6014      	str	r4, [r2, #0]
 800aa36:	b003      	add	sp, #12
 800aa38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa3c:	f7ff bfe2 	b.w	800aa04 <__malloc_unlock>
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	d908      	bls.n	800aa56 <_free_r+0x46>
 800aa44:	6825      	ldr	r5, [r4, #0]
 800aa46:	1961      	adds	r1, r4, r5
 800aa48:	428b      	cmp	r3, r1
 800aa4a:	bf01      	itttt	eq
 800aa4c:	6819      	ldreq	r1, [r3, #0]
 800aa4e:	685b      	ldreq	r3, [r3, #4]
 800aa50:	1949      	addeq	r1, r1, r5
 800aa52:	6021      	streq	r1, [r4, #0]
 800aa54:	e7ed      	b.n	800aa32 <_free_r+0x22>
 800aa56:	461a      	mov	r2, r3
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	b10b      	cbz	r3, 800aa60 <_free_r+0x50>
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	d9fa      	bls.n	800aa56 <_free_r+0x46>
 800aa60:	6811      	ldr	r1, [r2, #0]
 800aa62:	1855      	adds	r5, r2, r1
 800aa64:	42a5      	cmp	r5, r4
 800aa66:	d10b      	bne.n	800aa80 <_free_r+0x70>
 800aa68:	6824      	ldr	r4, [r4, #0]
 800aa6a:	4421      	add	r1, r4
 800aa6c:	1854      	adds	r4, r2, r1
 800aa6e:	42a3      	cmp	r3, r4
 800aa70:	6011      	str	r1, [r2, #0]
 800aa72:	d1e0      	bne.n	800aa36 <_free_r+0x26>
 800aa74:	681c      	ldr	r4, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	6053      	str	r3, [r2, #4]
 800aa7a:	4421      	add	r1, r4
 800aa7c:	6011      	str	r1, [r2, #0]
 800aa7e:	e7da      	b.n	800aa36 <_free_r+0x26>
 800aa80:	d902      	bls.n	800aa88 <_free_r+0x78>
 800aa82:	230c      	movs	r3, #12
 800aa84:	6003      	str	r3, [r0, #0]
 800aa86:	e7d6      	b.n	800aa36 <_free_r+0x26>
 800aa88:	6825      	ldr	r5, [r4, #0]
 800aa8a:	1961      	adds	r1, r4, r5
 800aa8c:	428b      	cmp	r3, r1
 800aa8e:	bf04      	itt	eq
 800aa90:	6819      	ldreq	r1, [r3, #0]
 800aa92:	685b      	ldreq	r3, [r3, #4]
 800aa94:	6063      	str	r3, [r4, #4]
 800aa96:	bf04      	itt	eq
 800aa98:	1949      	addeq	r1, r1, r5
 800aa9a:	6021      	streq	r1, [r4, #0]
 800aa9c:	6054      	str	r4, [r2, #4]
 800aa9e:	e7ca      	b.n	800aa36 <_free_r+0x26>
 800aaa0:	b003      	add	sp, #12
 800aaa2:	bd30      	pop	{r4, r5, pc}
 800aaa4:	2000079c 	.word	0x2000079c

0800aaa8 <_realloc_r>:
 800aaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaac:	4680      	mov	r8, r0
 800aaae:	4614      	mov	r4, r2
 800aab0:	460e      	mov	r6, r1
 800aab2:	b921      	cbnz	r1, 800aabe <_realloc_r+0x16>
 800aab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	4611      	mov	r1, r2
 800aaba:	f7ff b847 	b.w	8009b4c <_malloc_r>
 800aabe:	b92a      	cbnz	r2, 800aacc <_realloc_r+0x24>
 800aac0:	f7ff ffa6 	bl	800aa10 <_free_r>
 800aac4:	4625      	mov	r5, r4
 800aac6:	4628      	mov	r0, r5
 800aac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aacc:	f000 f850 	bl	800ab70 <_malloc_usable_size_r>
 800aad0:	4284      	cmp	r4, r0
 800aad2:	4607      	mov	r7, r0
 800aad4:	d802      	bhi.n	800aadc <_realloc_r+0x34>
 800aad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aada:	d812      	bhi.n	800ab02 <_realloc_r+0x5a>
 800aadc:	4621      	mov	r1, r4
 800aade:	4640      	mov	r0, r8
 800aae0:	f7ff f834 	bl	8009b4c <_malloc_r>
 800aae4:	4605      	mov	r5, r0
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d0ed      	beq.n	800aac6 <_realloc_r+0x1e>
 800aaea:	42bc      	cmp	r4, r7
 800aaec:	4622      	mov	r2, r4
 800aaee:	4631      	mov	r1, r6
 800aaf0:	bf28      	it	cs
 800aaf2:	463a      	movcs	r2, r7
 800aaf4:	f7ff ff58 	bl	800a9a8 <memcpy>
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4640      	mov	r0, r8
 800aafc:	f7ff ff88 	bl	800aa10 <_free_r>
 800ab00:	e7e1      	b.n	800aac6 <_realloc_r+0x1e>
 800ab02:	4635      	mov	r5, r6
 800ab04:	e7df      	b.n	800aac6 <_realloc_r+0x1e>
	...

0800ab08 <_read_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4d07      	ldr	r5, [pc, #28]	; (800ab28 <_read_r+0x20>)
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	4608      	mov	r0, r1
 800ab10:	4611      	mov	r1, r2
 800ab12:	2200      	movs	r2, #0
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f7f6 f9a8 	bl	8000e6c <_read>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_read_r+0x1e>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_read_r+0x1e>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	200007a4 	.word	0x200007a4

0800ab2c <_fstat_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4d07      	ldr	r5, [pc, #28]	; (800ab4c <_fstat_r+0x20>)
 800ab30:	2300      	movs	r3, #0
 800ab32:	4604      	mov	r4, r0
 800ab34:	4608      	mov	r0, r1
 800ab36:	4611      	mov	r1, r2
 800ab38:	602b      	str	r3, [r5, #0]
 800ab3a:	f7f6 f9c0 	bl	8000ebe <_fstat>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	d102      	bne.n	800ab48 <_fstat_r+0x1c>
 800ab42:	682b      	ldr	r3, [r5, #0]
 800ab44:	b103      	cbz	r3, 800ab48 <_fstat_r+0x1c>
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	bd38      	pop	{r3, r4, r5, pc}
 800ab4a:	bf00      	nop
 800ab4c:	200007a4 	.word	0x200007a4

0800ab50 <_isatty_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d06      	ldr	r5, [pc, #24]	; (800ab6c <_isatty_r+0x1c>)
 800ab54:	2300      	movs	r3, #0
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	f7f6 f9bf 	bl	8000ede <_isatty>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d102      	bne.n	800ab6a <_isatty_r+0x1a>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	b103      	cbz	r3, 800ab6a <_isatty_r+0x1a>
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	200007a4 	.word	0x200007a4

0800ab70 <_malloc_usable_size_r>:
 800ab70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab74:	1f18      	subs	r0, r3, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfbc      	itt	lt
 800ab7a:	580b      	ldrlt	r3, [r1, r0]
 800ab7c:	18c0      	addlt	r0, r0, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_init>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr

0800ab8c <_fini>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	bf00      	nop
 800ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab92:	bc08      	pop	{r3}
 800ab94:	469e      	mov	lr, r3
 800ab96:	4770      	bx	lr
