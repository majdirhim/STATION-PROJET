
STATION-PROJET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005434  08005434  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800543c  0800543c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  080054b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080054b4  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8a1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e9  00000000  00000000  0002d941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  000304f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026baf  00000000  00000000  00030dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc57  00000000  00000000  00057977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec8a0  00000000  00000000  000655ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151e6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f7c  00000000  00000000  00151ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005364 	.word	0x08005364

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005364 	.word	0x08005364

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b974 	b.w	8000efc <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468e      	mov	lr, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14d      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4694      	mov	ip, r2
 8000c3e:	d969      	bls.n	8000d14 <__udivmoddi4+0xe8>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b152      	cbz	r2, 8000c5c <__udivmoddi4+0x30>
 8000c46:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4a:	f1c2 0120 	rsb	r1, r2, #32
 8000c4e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c52:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c56:	ea41 0e03 	orr.w	lr, r1, r3
 8000c5a:	4094      	lsls	r4, r2
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	0c21      	lsrs	r1, r4, #16
 8000c62:	fbbe f6f8 	udiv	r6, lr, r8
 8000c66:	fa1f f78c 	uxth.w	r7, ip
 8000c6a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c72:	fb06 f107 	mul.w	r1, r6, r7
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c82:	f080 811f 	bcs.w	8000ec4 <__udivmoddi4+0x298>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 811c 	bls.w	8000ec4 <__udivmoddi4+0x298>
 8000c8c:	3e02      	subs	r6, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c98:	fb08 3310 	mls	r3, r8, r0, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb00 f707 	mul.w	r7, r0, r7
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	d90a      	bls.n	8000cbe <__udivmoddi4+0x92>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb0:	f080 810a 	bcs.w	8000ec8 <__udivmoddi4+0x29c>
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	f240 8107 	bls.w	8000ec8 <__udivmoddi4+0x29c>
 8000cba:	4464      	add	r4, ip
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc2:	1be4      	subs	r4, r4, r7
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	b11d      	cbz	r5, 8000cd0 <__udivmoddi4+0xa4>
 8000cc8:	40d4      	lsrs	r4, r2
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0xc2>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80ef 	beq.w	8000ebe <__udivmoddi4+0x292>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x160>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xd4>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80f9 	bhi.w	8000ef2 <__udivmoddi4+0x2c6>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0303 	sbc.w	r3, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	469e      	mov	lr, r3
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e0      	beq.n	8000cd0 <__udivmoddi4+0xa4>
 8000d0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d12:	e7dd      	b.n	8000cd0 <__udivmoddi4+0xa4>
 8000d14:	b902      	cbnz	r2, 8000d18 <__udivmoddi4+0xec>
 8000d16:	deff      	udf	#255	; 0xff
 8000d18:	fab2 f282 	clz	r2, r2
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	f040 8092 	bne.w	8000e46 <__udivmoddi4+0x21a>
 8000d22:	eba1 010c 	sub.w	r1, r1, ip
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f fe8c 	uxth.w	lr, ip
 8000d2e:	2601      	movs	r6, #1
 8000d30:	0c20      	lsrs	r0, r4, #16
 8000d32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d36:	fb07 1113 	mls	r1, r7, r3, r1
 8000d3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3e:	fb0e f003 	mul.w	r0, lr, r3
 8000d42:	4288      	cmp	r0, r1
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x12c>
 8000d46:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x12a>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f200 80cb 	bhi.w	8000eec <__udivmoddi4+0x2c0>
 8000d56:	4643      	mov	r3, r8
 8000d58:	1a09      	subs	r1, r1, r0
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d60:	fb07 1110 	mls	r1, r7, r0, r1
 8000d64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d68:	fb0e fe00 	mul.w	lr, lr, r0
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x156>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d78:	d202      	bcs.n	8000d80 <__udivmoddi4+0x154>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	f200 80bb 	bhi.w	8000ef6 <__udivmoddi4+0x2ca>
 8000d80:	4608      	mov	r0, r1
 8000d82:	eba4 040e 	sub.w	r4, r4, lr
 8000d86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d8a:	e79c      	b.n	8000cc6 <__udivmoddi4+0x9a>
 8000d8c:	f1c6 0720 	rsb	r7, r6, #32
 8000d90:	40b3      	lsls	r3, r6
 8000d92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	431c      	orrs	r4, r3
 8000da4:	40f9      	lsrs	r1, r7
 8000da6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000daa:	fa00 f306 	lsl.w	r3, r0, r6
 8000dae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000db2:	0c20      	lsrs	r0, r4, #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dbc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dca:	d90b      	bls.n	8000de4 <__udivmoddi4+0x1b8>
 8000dcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd4:	f080 8088 	bcs.w	8000ee8 <__udivmoddi4+0x2bc>
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	f240 8085 	bls.w	8000ee8 <__udivmoddi4+0x2bc>
 8000dde:	f1a8 0802 	sub.w	r8, r8, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dec:	fb09 1110 	mls	r1, r9, r0, r1
 8000df0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	458e      	cmp	lr, r1
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x1e2>
 8000dfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000e00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e04:	d26c      	bcs.n	8000ee0 <__udivmoddi4+0x2b4>
 8000e06:	458e      	cmp	lr, r1
 8000e08:	d96a      	bls.n	8000ee0 <__udivmoddi4+0x2b4>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	4461      	add	r1, ip
 8000e0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e12:	fba0 9402 	umull	r9, r4, r0, r2
 8000e16:	eba1 010e 	sub.w	r1, r1, lr
 8000e1a:	42a1      	cmp	r1, r4
 8000e1c:	46c8      	mov	r8, r9
 8000e1e:	46a6      	mov	lr, r4
 8000e20:	d356      	bcc.n	8000ed0 <__udivmoddi4+0x2a4>
 8000e22:	d053      	beq.n	8000ecc <__udivmoddi4+0x2a0>
 8000e24:	b15d      	cbz	r5, 8000e3e <__udivmoddi4+0x212>
 8000e26:	ebb3 0208 	subs.w	r2, r3, r8
 8000e2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e32:	fa22 f306 	lsr.w	r3, r2, r6
 8000e36:	40f1      	lsrs	r1, r6
 8000e38:	431f      	orrs	r7, r3
 8000e3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3e:	2600      	movs	r6, #0
 8000e40:	4631      	mov	r1, r6
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	f1c2 0320 	rsb	r3, r2, #32
 8000e4a:	40d8      	lsrs	r0, r3
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	fa21 f303 	lsr.w	r3, r1, r3
 8000e54:	4091      	lsls	r1, r2
 8000e56:	4301      	orrs	r1, r0
 8000e58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e64:	fb07 3610 	mls	r6, r7, r0, r3
 8000e68:	0c0b      	lsrs	r3, r1, #16
 8000e6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e72:	429e      	cmp	r6, r3
 8000e74:	fa04 f402 	lsl.w	r4, r4, r2
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x260>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e82:	d22f      	bcs.n	8000ee4 <__udivmoddi4+0x2b8>
 8000e84:	429e      	cmp	r6, r3
 8000e86:	d92d      	bls.n	8000ee4 <__udivmoddi4+0x2b8>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1b9b      	subs	r3, r3, r6
 8000e8e:	b289      	uxth	r1, r1
 8000e90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e94:	fb07 3316 	mls	r3, r7, r6, r3
 8000e98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x28a>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eac:	d216      	bcs.n	8000edc <__udivmoddi4+0x2b0>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d914      	bls.n	8000edc <__udivmoddi4+0x2b0>
 8000eb2:	3e02      	subs	r6, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ebc:	e738      	b.n	8000d30 <__udivmoddi4+0x104>
 8000ebe:	462e      	mov	r6, r5
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e705      	b.n	8000cd0 <__udivmoddi4+0xa4>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	e6e3      	b.n	8000c90 <__udivmoddi4+0x64>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6f8      	b.n	8000cbe <__udivmoddi4+0x92>
 8000ecc:	454b      	cmp	r3, r9
 8000ece:	d2a9      	bcs.n	8000e24 <__udivmoddi4+0x1f8>
 8000ed0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed8:	3801      	subs	r0, #1
 8000eda:	e7a3      	b.n	8000e24 <__udivmoddi4+0x1f8>
 8000edc:	4646      	mov	r6, r8
 8000ede:	e7ea      	b.n	8000eb6 <__udivmoddi4+0x28a>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	e794      	b.n	8000e0e <__udivmoddi4+0x1e2>
 8000ee4:	4640      	mov	r0, r8
 8000ee6:	e7d1      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ee8:	46d0      	mov	r8, sl
 8000eea:	e77b      	b.n	8000de4 <__udivmoddi4+0x1b8>
 8000eec:	3b02      	subs	r3, #2
 8000eee:	4461      	add	r1, ip
 8000ef0:	e732      	b.n	8000d58 <__udivmoddi4+0x12c>
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	e709      	b.n	8000d0a <__udivmoddi4+0xde>
 8000ef6:	4464      	add	r4, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e742      	b.n	8000d82 <__udivmoddi4+0x156>

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f14:	4a21      	ldr	r2, [pc, #132]	; (8000f9c <MX_ADC1_Init+0x9c>)
 8000f16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <MX_ADC1_Init+0xa0>)
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f62:	f000 fd2f 	bl	80019c4 <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f6c:	f000 faf8 	bl	8001560 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0x98>)
 8000f82:	f000 ff6d 	bl	8001e60 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 fae8 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	40012000 	.word	0x40012000
 8000fa0:	0f000001 	.word	0x0f000001

08000fa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <HAL_ADC_MspInit+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d12b      	bne.n	800101e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a18      	ldr	r2, [pc, #96]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <HAL_ADC_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_ADC_MspInit+0x8c>)
 800100a:	f001 fa95 	bl	8002538 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2012      	movs	r0, #18
 8001014:	f001 fa59 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001018:	2012      	movs	r0, #18
 800101a:	f001 fa72 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40012000 	.word	0x40012000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800104a:	4b8b      	ldr	r3, [pc, #556]	; (8001278 <MX_GPIO_Init+0x244>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a8a      	ldr	r2, [pc, #552]	; (8001278 <MX_GPIO_Init+0x244>)
 8001050:	f043 0310 	orr.w	r3, r3, #16
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b88      	ldr	r3, [pc, #544]	; (8001278 <MX_GPIO_Init+0x244>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001060:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001062:	4b85      	ldr	r3, [pc, #532]	; (8001278 <MX_GPIO_Init+0x244>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a84      	ldr	r2, [pc, #528]	; (8001278 <MX_GPIO_Init+0x244>)
 8001068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b82      	ldr	r3, [pc, #520]	; (8001278 <MX_GPIO_Init+0x244>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b7f      	ldr	r3, [pc, #508]	; (8001278 <MX_GPIO_Init+0x244>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a7e      	ldr	r2, [pc, #504]	; (8001278 <MX_GPIO_Init+0x244>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b7c      	ldr	r3, [pc, #496]	; (8001278 <MX_GPIO_Init+0x244>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	623b      	str	r3, [r7, #32]
 8001090:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b79      	ldr	r3, [pc, #484]	; (8001278 <MX_GPIO_Init+0x244>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a78      	ldr	r2, [pc, #480]	; (8001278 <MX_GPIO_Init+0x244>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b76      	ldr	r3, [pc, #472]	; (8001278 <MX_GPIO_Init+0x244>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b73      	ldr	r3, [pc, #460]	; (8001278 <MX_GPIO_Init+0x244>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a72      	ldr	r2, [pc, #456]	; (8001278 <MX_GPIO_Init+0x244>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b70      	ldr	r3, [pc, #448]	; (8001278 <MX_GPIO_Init+0x244>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b6d      	ldr	r3, [pc, #436]	; (8001278 <MX_GPIO_Init+0x244>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a6c      	ldr	r2, [pc, #432]	; (8001278 <MX_GPIO_Init+0x244>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <MX_GPIO_Init+0x244>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <MX_GPIO_Init+0x244>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a66      	ldr	r2, [pc, #408]	; (8001278 <MX_GPIO_Init+0x244>)
 80010e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b64      	ldr	r3, [pc, #400]	; (8001278 <MX_GPIO_Init+0x244>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010f2:	4b61      	ldr	r3, [pc, #388]	; (8001278 <MX_GPIO_Init+0x244>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a60      	ldr	r2, [pc, #384]	; (8001278 <MX_GPIO_Init+0x244>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b5e      	ldr	r3, [pc, #376]	; (8001278 <MX_GPIO_Init+0x244>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800110a:	4b5b      	ldr	r3, [pc, #364]	; (8001278 <MX_GPIO_Init+0x244>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a5a      	ldr	r2, [pc, #360]	; (8001278 <MX_GPIO_Init+0x244>)
 8001110:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b58      	ldr	r3, [pc, #352]	; (8001278 <MX_GPIO_Init+0x244>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001122:	4b55      	ldr	r3, [pc, #340]	; (8001278 <MX_GPIO_Init+0x244>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a54      	ldr	r2, [pc, #336]	; (8001278 <MX_GPIO_Init+0x244>)
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b52      	ldr	r3, [pc, #328]	; (8001278 <MX_GPIO_Init+0x244>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0320 	and.w	r3, r3, #32
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	4b4f      	ldr	r3, [pc, #316]	; (8001278 <MX_GPIO_Init+0x244>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <MX_GPIO_Init+0x244>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <MX_GPIO_Init+0x244>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE1
                           PE0 PE5 PE6 PE8
                           PE9 PE11 PE14 PE7
                           PE10 PE12 PE15 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1
 8001152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001158:	2303      	movs	r3, #3
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001164:	4619      	mov	r1, r3
 8001166:	4845      	ldr	r0, [pc, #276]	; (800127c <MX_GPIO_Init+0x248>)
 8001168:	f001 f9e6 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG15 PG11
                           PG12 PG10 PG9 PG8
                           PG7 PG6 PG1 PG3
                           PG2 PG0 PG5 PG4 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11
 800116c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001172:	2303      	movs	r3, #3
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117e:	4619      	mov	r1, r3
 8001180:	483f      	ldr	r0, [pc, #252]	; (8001280 <MX_GPIO_Init+0x24c>)
 8001182:	f001 f9d9 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB5 PB4 PB3
                           PB9 PB6 PB13 PB12
                           PB2 PB10 PB1 PB0
                           PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 8001186:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001198:	4619      	mov	r1, r3
 800119a:	483a      	ldr	r0, [pc, #232]	; (8001284 <MX_GPIO_Init+0x250>)
 800119c:	f001 f9cc 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD0 PD5
                           PD3 PD1 PD4 PD2
                           PD15 PD10 PD14 PD9
                           PD8 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_0|GPIO_PIN_5
 80011a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a6:	2303      	movs	r3, #3
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b2:	4619      	mov	r1, r3
 80011b4:	4834      	ldr	r0, [pc, #208]	; (8001288 <MX_GPIO_Init+0x254>)
 80011b6:	f001 f9bf 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC14 PC15 PC9 PC8
                           PC7 PC6 PC3 PC0
                           PC1 PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 80011ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011cc:	4619      	mov	r1, r3
 80011ce:	482f      	ldr	r0, [pc, #188]	; (800128c <MX_GPIO_Init+0x258>)
 80011d0:	f001 f9b2 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA12 PA11 PA10
                           PA8 PA1 PA4 PA2
                           PA6 PA5 PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
 80011d4:	f649 53fe 	movw	r3, #40446	; 0x9dfe
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e6:	4619      	mov	r1, r3
 80011e8:	4829      	ldr	r0, [pc, #164]	; (8001290 <MX_GPIO_Init+0x25c>)
 80011ea:	f001 f9a5 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80011ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001200:	4619      	mov	r1, r3
 8001202:	4824      	ldr	r0, [pc, #144]	; (8001294 <MX_GPIO_Init+0x260>)
 8001204:	f001 f998 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI4 PI3 PI2
                           PI5 PI7 PI10 PI6
                           PI1 PI12 PI9 PI0
                           PI11 PI13 PI15 PI14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_6
                          |GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121a:	4619      	mov	r1, r3
 800121c:	481e      	ldr	r0, [pc, #120]	; (8001298 <MX_GPIO_Init+0x264>)
 800121e:	f001 f98b 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK7 PK6 PK5 PK4
                           PK3 PK1 PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8001222:	23ff      	movs	r3, #255	; 0xff
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800122e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001232:	4619      	mov	r1, r3
 8001234:	4819      	ldr	r0, [pc, #100]	; (800129c <MX_GPIO_Init+0x268>)
 8001236:	f001 f97f 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF7 PF6 PF5
                           PF10 PF9 PF8 PF12
                           PF15 PF13 PF14 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800123a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124c:	4619      	mov	r1, r3
 800124e:	4814      	ldr	r0, [pc, #80]	; (80012a0 <MX_GPIO_Init+0x26c>)
 8001250:	f001 f972 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH15 PH13 PH14 PH4
                           PH5 PH3 PH2 PH12
                           PH7 PH9 PH11 PH6
                           PH8 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_4
 8001254:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_12
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_6
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125a:	2303      	movs	r3, #3
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001266:	4619      	mov	r1, r3
 8001268:	480e      	ldr	r0, [pc, #56]	; (80012a4 <MX_GPIO_Init+0x270>)
 800126a:	f001 f965 	bl	8002538 <HAL_GPIO_Init>

}
 800126e:	bf00      	nop
 8001270:	3740      	adds	r7, #64	; 0x40
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40021000 	.word	0x40021000
 8001280:	40021800 	.word	0x40021800
 8001284:	40020400 	.word	0x40020400
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40020800 	.word	0x40020800
 8001290:	40020000 	.word	0x40020000
 8001294:	40022400 	.word	0x40022400
 8001298:	40022000 	.word	0x40022000
 800129c:	40022800 	.word	0x40022800
 80012a0:	40021400 	.word	0x40021400
 80012a4:	40021c00 	.word	0x40021c00

080012a8 <_write>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
//for debug usage (printf)
int _write(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 100);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <_write+0x24>)
 80012be:	f002 fbff 	bl	8003ac0 <HAL_UART_Transmit>
  return len;
 80012c2:	687b      	ldr	r3, [r7, #4]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000e0 	.word	0x200000e0

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f000 fb18 	bl	800190a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f8bd 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f7ff fea9 	bl	8001034 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012e2:	f7ff fe0d 	bl	8000f00 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80012e6:	f000 fa33 	bl	8001750 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1); // to change it after merge to the IC IRQ
 80012ea:	4857      	ldr	r0, [pc, #348]	; (8001448 <main+0x178>)
 80012ec:	f000 fbae 	bl	8001a4c <HAL_ADC_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  UR=(float)(Wind_Dir_Voltage*3.3/4095);
 80012f0:	4b56      	ldr	r3, [pc, #344]	; (800144c <main+0x17c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f91d 	bl	8000534 <__aeabi_ui2d>
 80012fa:	a341      	add	r3, pc, #260	; (adr r3, 8001400 <main+0x130>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f992 	bl	8000628 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	a33e      	add	r3, pc, #248	; (adr r3, 8001408 <main+0x138>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fab3 	bl	800087c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc1d 	bl	8000b5c <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	603b      	str	r3, [r7, #0]
	  if(Wind_Dir_Flag){
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <main+0x180>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d060      	beq.n	80013f2 <main+0x122>

		  if(UR>=2.6 && UR<=2.700)
 8001330:	6838      	ldr	r0, [r7, #0]
 8001332:	f7ff f921 	bl	8000578 <__aeabi_f2d>
 8001336:	a336      	add	r3, pc, #216	; (adr r3, 8001410 <main+0x140>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff fbfa 	bl	8000b34 <__aeabi_dcmpge>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00d      	beq.n	8001362 <main+0x92>
 8001346:	6838      	ldr	r0, [r7, #0]
 8001348:	f7ff f916 	bl	8000578 <__aeabi_f2d>
 800134c:	a332      	add	r3, pc, #200	; (adr r3, 8001418 <main+0x148>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fbe5 	bl	8000b20 <__aeabi_dcmple>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <main+0x92>
		  	  dir = Nord;
 800135c:	2300      	movs	r3, #0
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	e047      	b.n	80013f2 <main+0x122>
		  else if( UR>=1.359 && UR <=1.365)
 8001362:	6838      	ldr	r0, [r7, #0]
 8001364:	f7ff f908 	bl	8000578 <__aeabi_f2d>
 8001368:	a32d      	add	r3, pc, #180	; (adr r3, 8001420 <main+0x150>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff fbe1 	bl	8000b34 <__aeabi_dcmpge>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00d      	beq.n	8001394 <main+0xc4>
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff f8fd 	bl	8000578 <__aeabi_f2d>
 800137e:	a32a      	add	r3, pc, #168	; (adr r3, 8001428 <main+0x158>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	f7ff fbcc 	bl	8000b20 <__aeabi_dcmple>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d002      	beq.n	8001394 <main+0xc4>
		  	  dir= Sud;
 800138e:	2301      	movs	r3, #1
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	e02e      	b.n	80013f2 <main+0x122>
		  else if( UR>=3.000 && UR<= 3.040)
 8001394:	edd7 7a00 	vldr	s15, [r7]
 8001398:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800139c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a4:	db0d      	blt.n	80013c2 <main+0xf2>
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f7ff f8e6 	bl	8000578 <__aeabi_f2d>
 80013ac:	a320      	add	r3, pc, #128	; (adr r3, 8001430 <main+0x160>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff fbb5 	bl	8000b20 <__aeabi_dcmple>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <main+0xf2>
		  	  dir=West;
 80013bc:	2302      	movs	r3, #2
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	e017      	b.n	80013f2 <main+0x122>
		  else if( UR>=0.770  && UR<= 0.775)
 80013c2:	6838      	ldr	r0, [r7, #0]
 80013c4:	f7ff f8d8 	bl	8000578 <__aeabi_f2d>
 80013c8:	a31b      	add	r3, pc, #108	; (adr r3, 8001438 <main+0x168>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7ff fbb1 	bl	8000b34 <__aeabi_dcmpge>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00c      	beq.n	80013f2 <main+0x122>
 80013d8:	6838      	ldr	r0, [r7, #0]
 80013da:	f7ff f8cd 	bl	8000578 <__aeabi_f2d>
 80013de:	a318      	add	r3, pc, #96	; (adr r3, 8001440 <main+0x170>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7ff fb9c 	bl	8000b20 <__aeabi_dcmple>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <main+0x122>
		  	  dir=East;
 80013ee:	2303      	movs	r3, #3
 80013f0:	71fb      	strb	r3, [r7, #7]
		  }
	  printf("%d\n\r",dir);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4817      	ldr	r0, [pc, #92]	; (8001454 <main+0x184>)
 80013f8:	f003 f826 	bl	8004448 <iprintf>
	  UR=(float)(Wind_Dir_Voltage*3.3/4095);
 80013fc:	e778      	b.n	80012f0 <main+0x20>
 80013fe:	bf00      	nop
 8001400:	66666666 	.word	0x66666666
 8001404:	400a6666 	.word	0x400a6666
 8001408:	00000000 	.word	0x00000000
 800140c:	40affe00 	.word	0x40affe00
 8001410:	cccccccd 	.word	0xcccccccd
 8001414:	4004cccc 	.word	0x4004cccc
 8001418:	9999999a 	.word	0x9999999a
 800141c:	40059999 	.word	0x40059999
 8001420:	c8b43958 	.word	0xc8b43958
 8001424:	3ff5be76 	.word	0x3ff5be76
 8001428:	3d70a3d7 	.word	0x3d70a3d7
 800142c:	3ff5d70a 	.word	0x3ff5d70a
 8001430:	851eb852 	.word	0x851eb852
 8001434:	400851eb 	.word	0x400851eb
 8001438:	0a3d70a4 	.word	0x0a3d70a4
 800143c:	3fe8a3d7 	.word	0x3fe8a3d7
 8001440:	cccccccd 	.word	0xcccccccd
 8001444:	3fe8cccc 	.word	0x3fe8cccc
 8001448:	2000008c 	.word	0x2000008c
 800144c:	200000d4 	.word	0x200000d4
 8001450:	200000d8 	.word	0x200000d8
 8001454:	0800537c 	.word	0x0800537c

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	; 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0320 	add.w	r3, r7, #32
 8001462:	2230      	movs	r2, #48	; 0x30
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f002 ffe6 	bl	8004438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <SystemClock_Config+0xd4>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a2a      	ldr	r2, [pc, #168]	; (800152c <SystemClock_Config+0xd4>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <SystemClock_Config+0xd4>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <SystemClock_Config+0xd8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800149c:	4a24      	ldr	r2, [pc, #144]	; (8001530 <SystemClock_Config+0xd8>)
 800149e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <SystemClock_Config+0xd8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b0:	2301      	movs	r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80014c4:	230c      	movs	r3, #12
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80014c8:	2360      	movs	r3, #96	; 0x60
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014d0:	2302      	movs	r3, #2
 80014d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 0320 	add.w	r3, r7, #32
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 fa29 	bl	8002930 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80014e4:	f000 f83c 	bl	8001560 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014e8:	f001 f9d2 	bl	8002890 <HAL_PWREx_EnableOverDrive>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014f2:	f000 f835 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f6:	230f      	movs	r3, #15
 80014f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fa:	2302      	movs	r3, #2
 80014fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2103      	movs	r1, #3
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fcaf 	bl	8002e78 <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001520:	f000 f81e 	bl	8001560 <Error_Handler>
  }
}
 8001524:	bf00      	nop
 8001526:	3750      	adds	r7, #80	; 0x50
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
Wind_Dir_Voltage= HAL_ADC_GetValue(hadc);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 fc6d 	bl	8001e1c <HAL_ADC_GetValue>
 8001542:	4603      	mov	r3, r0
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_ADC_ConvCpltCallback+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
Wind_Dir_Flag=1;
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <HAL_ADC_ConvCpltCallback+0x28>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200000d4 	.word	0x200000d4
 800155c:	200000d8 	.word	0x200000d8

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	e7fe      	b.n	8001568 <Error_Handler+0x8>
	...

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_MspInit+0x44>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_MspInit+0x44>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_MspInit+0x44>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_MspInit+0x44>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a08      	ldr	r2, [pc, #32]	; (80015b0 <HAL_MspInit+0x44>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <HAL_MspInit+0x44>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 f9c0 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <ADC_IRQHandler+0x10>)
 800160e:	f000 faf5 	bl	8001bfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000008c 	.word	0x2000008c

0800161c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e00a      	b.n	8001644 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800162e:	f3af 8000 	nop.w
 8001632:	4601      	mov	r1, r0
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	60ba      	str	r2, [r7, #8]
 800163a:	b2ca      	uxtb	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf0      	blt.n	800162e <_read+0x12>
	}

return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167e:	605a      	str	r2, [r3, #4]
	return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_isatty>:

int _isatty(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_sbrk+0x5c>)
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_sbrk+0x60>)
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <_sbrk+0x64>)
 80016de:	4a12      	ldr	r2, [pc, #72]	; (8001728 <_sbrk+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d207      	bcs.n	8001700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f0:	f002 fe78 	bl	80043e4 <__errno>
 80016f4:	4603      	mov	r3, r0
 80016f6:	220c      	movs	r2, #12
 80016f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e009      	b.n	8001714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <_sbrk+0x64>)
 8001710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20050000 	.word	0x20050000
 8001720:	00000400 	.word	0x00000400
 8001724:	200000dc 	.word	0x200000dc
 8001728:	20000178 	.word	0x20000178

0800172c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <SystemInit+0x20>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <SystemInit+0x20>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 8001756:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <MX_USART1_UART_Init+0x60>)
 8001758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 800175c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 8001764:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001768:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 8001772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001776:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART1_UART_Init+0x5c>)
 8001798:	f002 f944 	bl	8003a24 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80017a2:	f7ff fedd 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200000e0 	.word	0x200000e0
 80017b0:	40011000 	.word	0x40011000

080017b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b0ac      	sub	sp, #176	; 0xb0
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017cc:	f107 0318 	add.w	r3, r7, #24
 80017d0:	2284      	movs	r2, #132	; 0x84
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fe2f 	bl	8004438 <memset>
  if(uartHandle->Instance==USART1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a32      	ldr	r2, [pc, #200]	; (80018a8 <HAL_UART_MspInit+0xf4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d15c      	bne.n	800189e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017e4:	2340      	movs	r3, #64	; 0x40
 80017e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017e8:	2300      	movs	r3, #0
 80017ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f001 fd27 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017fc:	f7ff feb0 	bl	8001560 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_UART_MspInit+0xf8>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	4a29      	ldr	r2, [pc, #164]	; (80018ac <HAL_UART_MspInit+0xf8>)
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6453      	str	r3, [r2, #68]	; 0x44
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_UART_MspInit+0xf8>)
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_UART_MspInit+0xf8>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a23      	ldr	r2, [pc, #140]	; (80018ac <HAL_UART_MspInit+0xf8>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
 8001824:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_UART_MspInit+0xf8>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_UART_MspInit+0xf8>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <HAL_UART_MspInit+0xf8>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_UART_MspInit+0xf8>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001860:	2307      	movs	r3, #7
 8001862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800186a:	4619      	mov	r1, r3
 800186c:	4810      	ldr	r0, [pc, #64]	; (80018b0 <HAL_UART_MspInit+0xfc>)
 800186e:	f000 fe63 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800188c:	2307      	movs	r3, #7
 800188e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001896:	4619      	mov	r1, r3
 8001898:	4806      	ldr	r0, [pc, #24]	; (80018b4 <HAL_UART_MspInit+0x100>)
 800189a:	f000 fe4d 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800189e:	bf00      	nop
 80018a0:	37b0      	adds	r7, #176	; 0xb0
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40011000 	.word	0x40011000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020000 	.word	0x40020000

080018b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018be:	490e      	ldr	r1, [pc, #56]	; (80018f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d4:	4c0b      	ldr	r4, [pc, #44]	; (8001904 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e2:	f7ff ff23 	bl	800172c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f002 fd83 	bl	80043f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ea:	f7ff fcf1 	bl	80012d0 <main>
  bx  lr    
 80018ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018fc:	08005444 	.word	0x08005444
  ldr r2, =_sbss
 8001900:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001904:	20000178 	.word	0x20000178

08001908 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <CAN1_RX0_IRQHandler>

0800190a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190e:	2003      	movs	r0, #3
 8001910:	f000 fdd0 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001914:	2000      	movs	r0, #0
 8001916:	f000 f805 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800191a:	f7ff fe27 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fdeb 	bl	800251e <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f000 fdb3 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000000 	.word	0x20000000
 800197c:	20000008 	.word	0x20000008
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_IncTick+0x20>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x24>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_IncTick+0x24>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008
 80019a8:	20000164 	.word	0x20000164

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000164 	.word	0x20000164

080019c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e031      	b.n	8001a3e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fade 	bl	8000fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d116      	bne.n	8001a30 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_ADC_Init+0x84>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	f043 0202 	orr.w	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fb7a 	bl	800210c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a2e:	e001      	b.n	8001a34 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	ffffeefd 	.word	0xffffeefd

08001a4c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Start_IT+0x1a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e0b5      	b.n	8001bd2 <HAL_ADC_Start_IT+0x186>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d018      	beq.n	8001aae <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a8c:	4b54      	ldr	r3, [pc, #336]	; (8001be0 <HAL_ADC_Start_IT+0x194>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a54      	ldr	r2, [pc, #336]	; (8001be4 <HAL_ADC_Start_IT+0x198>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	0c9a      	lsrs	r2, r3, #18
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001aa0:	e002      	b.n	8001aa8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f9      	bne.n	8001aa2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d17d      	bne.n	8001bb8 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac0:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <HAL_ADC_Start_IT+0x19c>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d007      	beq.n	8001aea <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af6:	d106      	bne.n	8001b06 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	f023 0206 	bic.w	r2, r3, #6
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	645a      	str	r2, [r3, #68]	; 0x44
 8001b04:	e002      	b.n	8001b0c <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b1c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_ADC_Start_IT+0x1a0>)
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_ADC_Start_IT+0x1a4>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d143      	bne.n	8001bd0 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	e03a      	b.n	8001bd0 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_ADC_Start_IT+0x1a8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d10e      	bne.n	8001b82 <HAL_ADC_Start_IT+0x136>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b80:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b82:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_ADC_Start_IT+0x1a4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d120      	bne.n	8001bd0 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_ADC_Start_IT+0x1ac>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d11b      	bne.n	8001bd0 <HAL_ADC_Start_IT+0x184>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d114      	bne.n	8001bd0 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f043 0210 	orr.w	r2, r3, #16
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000000 	.word	0x20000000
 8001be4:	431bde83 	.word	0x431bde83
 8001be8:	fffff8fe 	.word	0xfffff8fe
 8001bec:	04000020 	.word	0x04000020
 8001bf0:	40012300 	.word	0x40012300
 8001bf4:	40012000 	.word	0x40012000
 8001bf8:	40012200 	.word	0x40012200

08001bfc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d049      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0xca>
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d046      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d12b      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d127      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d119      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0220 	bic.w	r2, r2, #32
 8001c90:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fc3c 	bl	8001534 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0212 	mvn.w	r2, #18
 8001cc4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d057      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x190>
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d054      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d105      	bne.n	8001cfa <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d139      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d12b      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d124      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11d      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d119      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d105      	bne.n	8001d7c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fabf 	bl	8002300 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f06f 020c 	mvn.w	r2, #12
 8001d8a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d017      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x1d6>
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d014      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d10d      	bne.n	8001dd2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f837 	bl	8001e36 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0201 	mvn.w	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d015      	beq.n	8001e14 <HAL_ADC_IRQHandler+0x218>
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d012      	beq.n	8001e14 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f06f 0220 	mvn.w	r2, #32
 8001e02:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f820 	bl	8001e4a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f06f 0220 	mvn.w	r2, #32
 8001e12:	601a      	str	r2, [r3, #0]
  }
}
 8001e14:	bf00      	nop
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1c>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e136      	b.n	80020ea <HAL_ADC_ConfigChannel+0x28a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	d93a      	bls.n	8001f02 <HAL_ADC_ConfigChannel+0xa2>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e94:	d035      	beq.n	8001f02 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68d9      	ldr	r1, [r3, #12]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b1e      	subs	r3, #30
 8001eac:	2207      	movs	r2, #7
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	400a      	ands	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a8d      	ldr	r2, [pc, #564]	; (80020f8 <HAL_ADC_ConfigChannel+0x298>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10a      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68d9      	ldr	r1, [r3, #12]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	061a      	lsls	r2, r3, #24
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eda:	e035      	b.n	8001f48 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68d9      	ldr	r1, [r3, #12]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4403      	add	r3, r0
 8001ef4:	3b1e      	subs	r3, #30
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f00:	e022      	b.n	8001f48 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6919      	ldr	r1, [r3, #16]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	2207      	movs	r2, #7
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	400a      	ands	r2, r1
 8001f24:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6919      	ldr	r1, [r3, #16]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4403      	add	r3, r0
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d824      	bhi.n	8001f9a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b05      	subs	r3, #5
 8001f62:	221f      	movs	r2, #31
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43da      	mvns	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	400a      	ands	r2, r1
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b05      	subs	r3, #5
 8001f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
 8001f98:	e04c      	b.n	8002034 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d824      	bhi.n	8001fec <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b23      	subs	r3, #35	; 0x23
 8001fb4:	221f      	movs	r2, #31
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b23      	subs	r3, #35	; 0x23
 8001fde:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8001fea:	e023      	b.n	8002034 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b41      	subs	r3, #65	; 0x41
 8001ffe:	221f      	movs	r2, #31
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43da      	mvns	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	400a      	ands	r2, r1
 800200c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	4618      	mov	r0, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	3b41      	subs	r3, #65	; 0x41
 8002028:	fa00 f203 	lsl.w	r2, r0, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a30      	ldr	r2, [pc, #192]	; (80020fc <HAL_ADC_ConfigChannel+0x29c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10a      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1f4>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002046:	d105      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a2c      	ldr	r2, [pc, #176]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 800204e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002052:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a28      	ldr	r2, [pc, #160]	; (80020fc <HAL_ADC_ConfigChannel+0x29c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10f      	bne.n	800207e <HAL_ADC_ConfigChannel+0x21e>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b12      	cmp	r3, #18
 8002064:	d10b      	bne.n	800207e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a25      	ldr	r2, [pc, #148]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 800206c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002070:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a22      	ldr	r2, [pc, #136]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 8002078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800207c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_ADC_ConfigChannel+0x29c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d12b      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x280>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1a      	ldr	r2, [pc, #104]	; (80020f8 <HAL_ADC_ConfigChannel+0x298>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d003      	beq.n	800209a <HAL_ADC_ConfigChannel+0x23a>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b11      	cmp	r3, #17
 8002098:	d122      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 80020a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80020a4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a15      	ldr	r2, [pc, #84]	; (8002100 <HAL_ADC_ConfigChannel+0x2a0>)
 80020ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020b0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_ADC_ConfigChannel+0x298>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d111      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020bc:	4b11      	ldr	r3, [pc, #68]	; (8002104 <HAL_ADC_ConfigChannel+0x2a4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_ADC_ConfigChannel+0x2a8>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0c9a      	lsrs	r2, r3, #18
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020d2:	e002      	b.n	80020da <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f9      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	10000012 	.word	0x10000012
 80020fc:	40012000 	.word	0x40012000
 8002100:	40012300 	.word	0x40012300
 8002104:	20000000 	.word	0x20000000
 8002108:	431bde83 	.word	0x431bde83

0800210c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002114:	4b78      	ldr	r3, [pc, #480]	; (80022f8 <ADC_Init+0x1ec>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a77      	ldr	r2, [pc, #476]	; (80022f8 <ADC_Init+0x1ec>)
 800211a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800211e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002120:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <ADC_Init+0x1ec>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4973      	ldr	r1, [pc, #460]	; (80022f8 <ADC_Init+0x1ec>)
 800212a:	4313      	orrs	r3, r2
 800212c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800213c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	021a      	lsls	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6899      	ldr	r1, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	4a58      	ldr	r2, [pc, #352]	; (80022fc <ADC_Init+0x1f0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6899      	ldr	r1, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6899      	ldr	r1, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	e00f      	b.n	8002206 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002204:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0202 	bic.w	r2, r2, #2
 8002214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	005a      	lsls	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01b      	beq.n	800226c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002242:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002252:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6859      	ldr	r1, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	3b01      	subs	r3, #1
 8002260:	035a      	lsls	r2, r3, #13
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	e007      	b.n	800227c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800227a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	3b01      	subs	r3, #1
 8002298:	051a      	lsls	r2, r3, #20
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6899      	ldr	r1, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022be:	025a      	lsls	r2, r3, #9
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6899      	ldr	r1, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	029a      	lsls	r2, r3, #10
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40012300 	.word	0x40012300
 80022fc:	0f000001 	.word	0x0f000001

08002300 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <__NVIC_SetPriorityGrouping+0x40>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	4313      	orrs	r3, r2
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <__NVIC_SetPriorityGrouping+0x40>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00
 8002358:	05fa0000 	.word	0x05fa0000

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	; (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	; (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff3e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff31 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e175      	b.n	8002844 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 8164 	bne.w	800283e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d005      	beq.n	800258e <HAL_GPIO_Init+0x56>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d130      	bne.n	80025f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c4:	2201      	movs	r2, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 0201 	and.w	r2, r3, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d017      	beq.n	800262c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	69b9      	ldr	r1, [r7, #24]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80be 	beq.w	800283e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_GPIO_Init+0x324>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_GPIO_Init+0x324>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <HAL_GPIO_Init+0x324>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026da:	4a61      	ldr	r2, [pc, #388]	; (8002860 <HAL_GPIO_Init+0x328>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a58      	ldr	r2, [pc, #352]	; (8002864 <HAL_GPIO_Init+0x32c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d037      	beq.n	8002776 <HAL_GPIO_Init+0x23e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a57      	ldr	r2, [pc, #348]	; (8002868 <HAL_GPIO_Init+0x330>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d031      	beq.n	8002772 <HAL_GPIO_Init+0x23a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a56      	ldr	r2, [pc, #344]	; (800286c <HAL_GPIO_Init+0x334>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d02b      	beq.n	800276e <HAL_GPIO_Init+0x236>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a55      	ldr	r2, [pc, #340]	; (8002870 <HAL_GPIO_Init+0x338>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d025      	beq.n	800276a <HAL_GPIO_Init+0x232>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a54      	ldr	r2, [pc, #336]	; (8002874 <HAL_GPIO_Init+0x33c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01f      	beq.n	8002766 <HAL_GPIO_Init+0x22e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a53      	ldr	r2, [pc, #332]	; (8002878 <HAL_GPIO_Init+0x340>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d019      	beq.n	8002762 <HAL_GPIO_Init+0x22a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a52      	ldr	r2, [pc, #328]	; (800287c <HAL_GPIO_Init+0x344>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_GPIO_Init+0x226>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a51      	ldr	r2, [pc, #324]	; (8002880 <HAL_GPIO_Init+0x348>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00d      	beq.n	800275a <HAL_GPIO_Init+0x222>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a50      	ldr	r2, [pc, #320]	; (8002884 <HAL_GPIO_Init+0x34c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <HAL_GPIO_Init+0x21e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4f      	ldr	r2, [pc, #316]	; (8002888 <HAL_GPIO_Init+0x350>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d101      	bne.n	8002752 <HAL_GPIO_Init+0x21a>
 800274e:	2309      	movs	r3, #9
 8002750:	e012      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002752:	230a      	movs	r3, #10
 8002754:	e010      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002756:	2308      	movs	r3, #8
 8002758:	e00e      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800275a:	2307      	movs	r3, #7
 800275c:	e00c      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800275e:	2306      	movs	r3, #6
 8002760:	e00a      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002762:	2305      	movs	r3, #5
 8002764:	e008      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002766:	2304      	movs	r3, #4
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800276a:	2303      	movs	r3, #3
 800276c:	e004      	b.n	8002778 <HAL_GPIO_Init+0x240>
 800276e:	2302      	movs	r3, #2
 8002770:	e002      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_GPIO_Init+0x240>
 8002776:	2300      	movs	r3, #0
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f002 0203 	and.w	r2, r2, #3
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	4093      	lsls	r3, r2
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002788:	4935      	ldr	r1, [pc, #212]	; (8002860 <HAL_GPIO_Init+0x328>)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002796:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_GPIO_Init+0x354>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ba:	4a34      	ldr	r2, [pc, #208]	; (800288c <HAL_GPIO_Init+0x354>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c0:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_GPIO_Init+0x354>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e4:	4a29      	ldr	r2, [pc, #164]	; (800288c <HAL_GPIO_Init+0x354>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_GPIO_Init+0x354>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280e:	4a1f      	ldr	r2, [pc, #124]	; (800288c <HAL_GPIO_Init+0x354>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_GPIO_Init+0x354>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_GPIO_Init+0x354>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3301      	adds	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	f67f ae86 	bls.w	8002558 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3724      	adds	r7, #36	; 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40013800 	.word	0x40013800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021400 	.word	0x40021400
 800287c:	40021800 	.word	0x40021800
 8002880:	40021c00 	.word	0x40021c00
 8002884:	40022000 	.word	0x40022000
 8002888:	40022400 	.word	0x40022400
 800288c:	40013c00 	.word	0x40013c00

08002890 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_PWREx_EnableOverDrive+0x98>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_PWREx_EnableOverDrive+0x98>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_PWREx_EnableOverDrive+0x98>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028be:	f7ff f875 	bl	80019ac <HAL_GetTick>
 80028c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028c4:	e009      	b.n	80028da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028c6:	f7ff f871 	bl	80019ac <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d4:	d901      	bls.n	80028da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e022      	b.n	8002920 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e6:	d1ee      	bne.n	80028c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0f      	ldr	r2, [pc, #60]	; (800292c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f4:	f7ff f85a 	bl	80019ac <HAL_GetTick>
 80028f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028fa:	e009      	b.n	8002910 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028fc:	f7ff f856 	bl	80019ac <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290a:	d901      	bls.n	8002910 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e007      	b.n	8002920 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800291c:	d1ee      	bne.n	80028fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000

08002930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e291      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8087 	beq.w	8002a62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002954:	4b96      	ldr	r3, [pc, #600]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b04      	cmp	r3, #4
 800295e:	d00c      	beq.n	800297a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002960:	4b93      	ldr	r3, [pc, #588]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b08      	cmp	r3, #8
 800296a:	d112      	bne.n	8002992 <HAL_RCC_OscConfig+0x62>
 800296c:	4b90      	ldr	r3, [pc, #576]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002978:	d10b      	bne.n	8002992 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297a:	4b8d      	ldr	r3, [pc, #564]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d06c      	beq.n	8002a60 <HAL_RCC_OscConfig+0x130>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d168      	bne.n	8002a60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e26b      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x7a>
 800299c:	4b84      	ldr	r3, [pc, #528]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a83      	ldr	r2, [pc, #524]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e02e      	b.n	8002a08 <HAL_RCC_OscConfig+0xd8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x9c>
 80029b2:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7e      	ldr	r2, [pc, #504]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b7c      	ldr	r3, [pc, #496]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7b      	ldr	r2, [pc, #492]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xd8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0xc0>
 80029d6:	4b76      	ldr	r3, [pc, #472]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a75      	ldr	r2, [pc, #468]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b73      	ldr	r3, [pc, #460]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a72      	ldr	r2, [pc, #456]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xd8>
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a6e      	ldr	r2, [pc, #440]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a6b      	ldr	r2, [pc, #428]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe ffcc 	bl	80019ac <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe ffc8 	bl	80019ac <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e21f      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b61      	ldr	r3, [pc, #388]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xe8>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe ffb8 	bl	80019ac <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe ffb4 	bl	80019ac <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e20b      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	4b57      	ldr	r3, [pc, #348]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x110>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d069      	beq.n	8002b42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6e:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7a:	4b4d      	ldr	r3, [pc, #308]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d11c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x190>
 8002a86:	4b4a      	ldr	r3, [pc, #296]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_RCC_OscConfig+0x17a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e1df      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aaa:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	493d      	ldr	r1, [pc, #244]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	e040      	b.n	8002b42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d023      	beq.n	8002b10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac8:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a38      	ldr	r2, [pc, #224]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe ff6a 	bl	80019ac <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002adc:	f7fe ff66 	bl	80019ac <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1bd      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aee:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
 8002b0e:	e018      	b.n	8002b42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe ff46 	bl	80019ac <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b24:	f7fe ff42 	bl	80019ac <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e199      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d038      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d019      	beq.n	8002b8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	4a15      	ldr	r2, [pc, #84]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b62:	f7fe ff23 	bl	80019ac <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6a:	f7fe ff1f 	bl	80019ac <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e176      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x23a>
 8002b88:	e01a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8a:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	4a08      	ldr	r2, [pc, #32]	; (8002bb0 <HAL_RCC_OscConfig+0x280>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b96:	f7fe ff09 	bl	80019ac <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	e00a      	b.n	8002bb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7fe ff05 	bl	80019ac <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d903      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e15c      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
 8002bb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	4b91      	ldr	r3, [pc, #580]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ee      	bne.n	8002b9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a4 	beq.w	8002d16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bce:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a87      	ldr	r2, [pc, #540]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf6:	4b82      	ldr	r3, [pc, #520]	; (8002e00 <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c02:	4b7f      	ldr	r3, [pc, #508]	; (8002e00 <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7e      	ldr	r2, [pc, #504]	; (8002e00 <HAL_RCC_OscConfig+0x4d0>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fecd 	bl	80019ac <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7fe fec9 	bl	80019ac <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b64      	cmp	r3, #100	; 0x64
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e120      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c28:	4b75      	ldr	r3, [pc, #468]	; (8002e00 <HAL_RCC_OscConfig+0x4d0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x31a>
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a6e      	ldr	r2, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	e02d      	b.n	8002ca6 <HAL_RCC_OscConfig+0x376>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x33c>
 8002c52:	4b6a      	ldr	r3, [pc, #424]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a69      	ldr	r2, [pc, #420]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b67      	ldr	r3, [pc, #412]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a66      	ldr	r2, [pc, #408]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c64:	f023 0304 	bic.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	e01c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x376>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d10c      	bne.n	8002c8e <HAL_RCC_OscConfig+0x35e>
 8002c74:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4a60      	ldr	r2, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c80:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	4a5d      	ldr	r2, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8c:	e00b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x376>
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c94:	f023 0301 	bic.w	r3, r3, #1
 8002c98:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9a:	4b58      	ldr	r3, [pc, #352]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002ca0:	f023 0304 	bic.w	r3, r3, #4
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d015      	beq.n	8002cda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe fe7d 	bl	80019ac <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe fe79 	bl	80019ac <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0ce      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ee      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x386>
 8002cd8:	e014      	b.n	8002d04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7fe fe67 	bl	80019ac <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7fe fe63 	bl	80019ac <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0b8      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ee      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4b3c      	ldr	r3, [pc, #240]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a3b      	ldr	r2, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80a4 	beq.w	8002e68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 030c 	and.w	r3, r3, #12
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d06b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d149      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d34:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a30      	ldr	r2, [pc, #192]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fe34 	bl	80019ac <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7fe fe30 	bl	80019ac <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e087      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5a:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe fe04 	bl	80019ac <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe fe00 	bl	80019ac <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e057      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x478>
 8002dc6:	e04f      	b.n	8002e68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe fdea 	bl	80019ac <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe fde6 	bl	80019ac <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e03d      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCC_OscConfig+0x4cc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4ac>
 8002dfa:	e035      	b.n	8002e68 <HAL_RCC_OscConfig+0x538>
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x544>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d028      	beq.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d121      	bne.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d11a      	bne.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e34:	4013      	ands	r3, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d111      	bne.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0d0      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d910      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b67      	ldr	r3, [pc, #412]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 020f 	bic.w	r2, r3, #15
 8002ea6:	4965      	ldr	r1, [pc, #404]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0b8      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed8:	4b59      	ldr	r3, [pc, #356]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a58      	ldr	r2, [pc, #352]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef0:	4b53      	ldr	r3, [pc, #332]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a52      	ldr	r2, [pc, #328]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002efc:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	494d      	ldr	r1, [pc, #308]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d040      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d115      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07f      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b41      	ldr	r3, [pc, #260]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e073      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e06b      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4936      	ldr	r1, [pc, #216]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f6c:	f7fe fd1e 	bl	80019ac <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7fe fd1a 	bl	80019ac <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e053      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d210      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	4922      	ldr	r1, [pc, #136]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e032      	b.n	8003032 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4916      	ldr	r1, [pc, #88]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	490e      	ldr	r1, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800300a:	f000 f821 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800300e:	4602      	mov	r2, r0
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	490a      	ldr	r1, [pc, #40]	; (8003044 <HAL_RCC_ClockConfig+0x1cc>)
 800301c:	5ccb      	ldrb	r3, [r1, r3]
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	4a09      	ldr	r2, [pc, #36]	; (8003048 <HAL_RCC_ClockConfig+0x1d0>)
 8003024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1d4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fc7a 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023c00 	.word	0x40023c00
 8003040:	40023800 	.word	0x40023800
 8003044:	08005384 	.word	0x08005384
 8003048:	20000000 	.word	0x20000000
 800304c:	20000004 	.word	0x20000004

08003050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003054:	b090      	sub	sp, #64	; 0x40
 8003056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
 800305c:	2300      	movs	r3, #0
 800305e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003060:	2300      	movs	r3, #0
 8003062:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d00d      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x40>
 8003074:	2b08      	cmp	r3, #8
 8003076:	f200 80a1 	bhi.w	80031bc <HAL_RCC_GetSysClockFreq+0x16c>
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x34>
 800307e:	2b04      	cmp	r3, #4
 8003080:	d003      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x3a>
 8003082:	e09b      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003086:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003088:	e09b      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800308a:	4b53      	ldr	r3, [pc, #332]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800308c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800308e:	e098      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003090:	4b4f      	ldr	r3, [pc, #316]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800309a:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d028      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a6:	4b4a      	ldr	r3, [pc, #296]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	2200      	movs	r2, #0
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	627a      	str	r2, [r7, #36]	; 0x24
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030b8:	2100      	movs	r1, #0
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80030bc:	fb03 f201 	mul.w	r2, r3, r1
 80030c0:	2300      	movs	r3, #0
 80030c2:	fb00 f303 	mul.w	r3, r0, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	4a43      	ldr	r2, [pc, #268]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80030ca:	fba0 1202 	umull	r1, r2, r0, r2
 80030ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d0:	460a      	mov	r2, r1
 80030d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80030d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d6:	4413      	add	r3, r2
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030dc:	2200      	movs	r2, #0
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	61fa      	str	r2, [r7, #28]
 80030e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030ea:	f7fd fd87 	bl	8000bfc <__aeabi_uldivmod>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4613      	mov	r3, r2
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f6:	e053      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f8:	4b35      	ldr	r3, [pc, #212]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	2200      	movs	r2, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	617a      	str	r2, [r7, #20]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800310a:	f04f 0b00 	mov.w	fp, #0
 800310e:	4652      	mov	r2, sl
 8003110:	465b      	mov	r3, fp
 8003112:	f04f 0000 	mov.w	r0, #0
 8003116:	f04f 0100 	mov.w	r1, #0
 800311a:	0159      	lsls	r1, r3, #5
 800311c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003120:	0150      	lsls	r0, r2, #5
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	ebb2 080a 	subs.w	r8, r2, sl
 800312a:	eb63 090b 	sbc.w	r9, r3, fp
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800313a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800313e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003142:	ebb2 0408 	subs.w	r4, r2, r8
 8003146:	eb63 0509 	sbc.w	r5, r3, r9
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	00eb      	lsls	r3, r5, #3
 8003154:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003158:	00e2      	lsls	r2, r4, #3
 800315a:	4614      	mov	r4, r2
 800315c:	461d      	mov	r5, r3
 800315e:	eb14 030a 	adds.w	r3, r4, sl
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	eb45 030b 	adc.w	r3, r5, fp
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003176:	4629      	mov	r1, r5
 8003178:	028b      	lsls	r3, r1, #10
 800317a:	4621      	mov	r1, r4
 800317c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003180:	4621      	mov	r1, r4
 8003182:	028a      	lsls	r2, r1, #10
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318a:	2200      	movs	r2, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	60fa      	str	r2, [r7, #12]
 8003190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003194:	f7fd fd32 	bl	8000bfc <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4613      	mov	r3, r2
 800319e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	0c1b      	lsrs	r3, r3, #16
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	3301      	adds	r3, #1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80031b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031ba:	e002      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3740      	adds	r7, #64	; 0x40
 80031c8:	46bd      	mov	sp, r7
 80031ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	00f42400 	.word	0x00f42400
 80031d8:	017d7840 	.word	0x017d7840

080031dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000000 	.word	0x20000000

080031f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f8:	f7ff fff0 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	0a9b      	lsrs	r3, r3, #10
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4903      	ldr	r1, [pc, #12]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	08005394 	.word	0x08005394

0800321c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003220:	f7ff ffdc 	bl	80031dc <HAL_RCC_GetHCLKFreq>
 8003224:	4602      	mov	r2, r0
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0b5b      	lsrs	r3, r3, #13
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4903      	ldr	r1, [pc, #12]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003232:	5ccb      	ldrb	r3, [r1, r3]
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	08005394 	.word	0x08005394

08003244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800326c:	4b69      	ldr	r3, [pc, #420]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a68      	ldr	r2, [pc, #416]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003272:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003276:	6093      	str	r3, [r2, #8]
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	4964      	ldr	r1, [pc, #400]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800328e:	2301      	movs	r3, #1
 8003290:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d017      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800329e:	4b5d      	ldr	r3, [pc, #372]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	4959      	ldr	r1, [pc, #356]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032bc:	d101      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d017      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032da:	4b4e      	ldr	r3, [pc, #312]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	494a      	ldr	r1, [pc, #296]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f8:	d101      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003306:	2301      	movs	r3, #1
 8003308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 808b 	beq.w	800343e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003328:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	4a39      	ldr	r2, [pc, #228]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	6413      	str	r3, [r2, #64]	; 0x40
 8003334:	4b37      	ldr	r3, [pc, #220]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a34      	ldr	r2, [pc, #208]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fe fb2e 	bl	80019ac <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003354:	f7fe fb2a 	bl	80019ac <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e357      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003372:	4b28      	ldr	r3, [pc, #160]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d035      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	429a      	cmp	r2, r3
 800338e:	d02e      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003390:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033b2:	4a18      	ldr	r2, [pc, #96]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033b8:	4b16      	ldr	r3, [pc, #88]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d114      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe faf2 	bl	80019ac <HAL_GetTick>
 80033c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe faee 	bl	80019ac <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e319      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ee      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fa:	d111      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800340a:	400b      	ands	r3, r1
 800340c:	4901      	ldr	r1, [pc, #4]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
 8003412:	e00b      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003414:	40023800 	.word	0x40023800
 8003418:	40007000 	.word	0x40007000
 800341c:	0ffffcff 	.word	0x0ffffcff
 8003420:	4baa      	ldr	r3, [pc, #680]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4aa9      	ldr	r2, [pc, #676]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003426:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800342a:	6093      	str	r3, [r2, #8]
 800342c:	4ba7      	ldr	r3, [pc, #668]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003438:	49a4      	ldr	r1, [pc, #656]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343a:	4313      	orrs	r3, r2
 800343c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d010      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800344a:	4ba0      	ldr	r3, [pc, #640]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003450:	4a9e      	ldr	r2, [pc, #632]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003456:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800345a:	4b9c      	ldr	r3, [pc, #624]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	4999      	ldr	r1, [pc, #612]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003478:	4b94      	ldr	r3, [pc, #592]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003486:	4991      	ldr	r1, [pc, #580]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800349a:	4b8c      	ldr	r3, [pc, #560]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a8:	4988      	ldr	r1, [pc, #544]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034bc:	4b83      	ldr	r3, [pc, #524]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ca:	4980      	ldr	r1, [pc, #512]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034de:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ec:	4977      	ldr	r1, [pc, #476]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003500:	4b72      	ldr	r3, [pc, #456]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	496f      	ldr	r1, [pc, #444]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003522:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f023 020c 	bic.w	r2, r3, #12
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003530:	4966      	ldr	r1, [pc, #408]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003544:	4b61      	ldr	r3, [pc, #388]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	495e      	ldr	r1, [pc, #376]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003566:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	4955      	ldr	r1, [pc, #340]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	494d      	ldr	r1, [pc, #308]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035aa:	4b48      	ldr	r3, [pc, #288]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	4944      	ldr	r1, [pc, #272]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035cc:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035da:	493c      	ldr	r1, [pc, #240]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fc:	4933      	ldr	r1, [pc, #204]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003610:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800361e:	492b      	ldr	r1, [pc, #172]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d011      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003632:	4b26      	ldr	r3, [pc, #152]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003640:	4922      	ldr	r1, [pc, #136]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800364c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003650:	d101      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003652:	2301      	movs	r3, #1
 8003654:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003662:	2301      	movs	r3, #1
 8003664:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003680:	4912      	ldr	r1, [pc, #72]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036a4:	4909      	ldr	r1, [pc, #36]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d006      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80d9 	beq.w	8003872 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a01      	ldr	r2, [pc, #4]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036ca:	e001      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80036cc:	40023800 	.word	0x40023800
 80036d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d2:	f7fe f96b 	bl	80019ac <HAL_GetTick>
 80036d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036da:	f7fe f967 	bl	80019ac <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b64      	cmp	r3, #100	; 0x64
 80036e6:	d901      	bls.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e194      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ec:	4b6c      	ldr	r3, [pc, #432]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d021      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11d      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800370c:	4b64      	ldr	r3, [pc, #400]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800371a:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800371c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003720:	0e1b      	lsrs	r3, r3, #24
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	019a      	lsls	r2, r3, #6
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	041b      	lsls	r3, r3, #16
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	061b      	lsls	r3, r3, #24
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	071b      	lsls	r3, r3, #28
 8003740:	4957      	ldr	r1, [pc, #348]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d004      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02e      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003772:	d129      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003774:	4b4a      	ldr	r3, [pc, #296]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377a:	0c1b      	lsrs	r3, r3, #16
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003788:	0f1b      	lsrs	r3, r3, #28
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	019a      	lsls	r2, r3, #6
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	431a      	orrs	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	071b      	lsls	r3, r3, #28
 80037a8:	493d      	ldr	r1, [pc, #244]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037b0:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037b6:	f023 021f 	bic.w	r2, r3, #31
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	3b01      	subs	r3, #1
 80037c0:	4937      	ldr	r1, [pc, #220]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037d4:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037da:	0e1b      	lsrs	r3, r3, #24
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037e2:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e8:	0f1b      	lsrs	r3, r3, #28
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	019a      	lsls	r2, r3, #6
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	041b      	lsls	r3, r3, #16
 80037fc:	431a      	orrs	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	431a      	orrs	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	071b      	lsls	r3, r3, #28
 8003808:	4925      	ldr	r1, [pc, #148]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d011      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	019a      	lsls	r2, r3, #6
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	041b      	lsls	r3, r3, #16
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	061b      	lsls	r3, r3, #24
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	071b      	lsls	r3, r3, #28
 8003838:	4919      	ldr	r1, [pc, #100]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003846:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800384a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800384c:	f7fe f8ae 	bl	80019ac <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003854:	f7fe f8aa 	bl	80019ac <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0d7      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b01      	cmp	r3, #1
 8003876:	f040 80cd 	bne.w	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003886:	f7fe f891 	bl	80019ac <HAL_GetTick>
 800388a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800388c:	e00a      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800388e:	f7fe f88d 	bl	80019ac <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b64      	cmp	r3, #100	; 0x64
 800389a:	d903      	bls.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0ba      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038a4:	4b5e      	ldr	r3, [pc, #376]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b0:	d0ed      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02e      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d12a      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038da:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	0c1b      	lsrs	r3, r3, #16
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038e8:	4b4d      	ldr	r3, [pc, #308]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ee:	0f1b      	lsrs	r3, r3, #28
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	019a      	lsls	r2, r3, #6
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	061b      	lsls	r3, r3, #24
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	071b      	lsls	r3, r3, #28
 800390e:	4944      	ldr	r1, [pc, #272]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003916:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	493d      	ldr	r1, [pc, #244]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d022      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003944:	d11d      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003946:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394c:	0e1b      	lsrs	r3, r3, #24
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	0f1b      	lsrs	r3, r3, #28
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	019a      	lsls	r2, r3, #6
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	041b      	lsls	r3, r3, #16
 800396e:	431a      	orrs	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	061b      	lsls	r3, r3, #24
 8003974:	431a      	orrs	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	071b      	lsls	r3, r3, #28
 800397a:	4929      	ldr	r1, [pc, #164]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d028      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	019a      	lsls	r2, r3, #6
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	071b      	lsls	r3, r3, #28
 80039c2:	4917      	ldr	r1, [pc, #92]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	4911      	ldr	r1, [pc, #68]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd ffde 	bl	80019ac <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039f4:	f7fd ffda 	bl	80019ac <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e007      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a12:	d1ef      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e040      	b.n	8003ab8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd feb4 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8c0 	bl	8003be8 <UART_SetConfig>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e022      	b.n	8003ab8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fb18 	bl	80040b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fb9f 	bl	80041f4 <UART_CheckIdleState>
 8003ab6:	4603      	mov	r3, r0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	f040 8081 	bne.w	8003bdc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_UART_Transmit+0x26>
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e079      	b.n	8003bde <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Transmit+0x38>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e072      	b.n	8003bde <HAL_UART_Transmit+0x11e>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2221      	movs	r2, #33	; 0x21
 8003b0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b0e:	f7fd ff4d 	bl	80019ac <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d108      	bne.n	8003b40 <HAL_UART_Transmit+0x80>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e003      	b.n	8003b48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b50:	e02c      	b.n	8003bac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fb7c 	bl	800425a <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e038      	b.n	8003bde <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e007      	b.n	8003b9a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1cc      	bne.n	8003b52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fb49 	bl	800425a <UART_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e005      	b.n	8003bde <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4ba6      	ldr	r3, [pc, #664]	; (8003eac <UART_SetConfig+0x2c4>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	6979      	ldr	r1, [r7, #20]
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a94      	ldr	r2, [pc, #592]	; (8003eb0 <UART_SetConfig+0x2c8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d120      	bne.n	8003ca6 <UART_SetConfig+0xbe>
 8003c64:	4b93      	ldr	r3, [pc, #588]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d816      	bhi.n	8003ca0 <UART_SetConfig+0xb8>
 8003c72:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <UART_SetConfig+0x90>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003c95 	.word	0x08003c95
 8003c80:	08003c8f 	.word	0x08003c8f
 8003c84:	08003c9b 	.word	0x08003c9b
 8003c88:	2301      	movs	r3, #1
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e150      	b.n	8003f30 <UART_SetConfig+0x348>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e14d      	b.n	8003f30 <UART_SetConfig+0x348>
 8003c94:	2304      	movs	r3, #4
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e14a      	b.n	8003f30 <UART_SetConfig+0x348>
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e147      	b.n	8003f30 <UART_SetConfig+0x348>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e144      	b.n	8003f30 <UART_SetConfig+0x348>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a83      	ldr	r2, [pc, #524]	; (8003eb8 <UART_SetConfig+0x2d0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d132      	bne.n	8003d16 <UART_SetConfig+0x12e>
 8003cb0:	4b80      	ldr	r3, [pc, #512]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d828      	bhi.n	8003d10 <UART_SetConfig+0x128>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <UART_SetConfig+0xdc>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cf9 	.word	0x08003cf9
 8003cc8:	08003d11 	.word	0x08003d11
 8003ccc:	08003d11 	.word	0x08003d11
 8003cd0:	08003d11 	.word	0x08003d11
 8003cd4:	08003d05 	.word	0x08003d05
 8003cd8:	08003d11 	.word	0x08003d11
 8003cdc:	08003d11 	.word	0x08003d11
 8003ce0:	08003d11 	.word	0x08003d11
 8003ce4:	08003cff 	.word	0x08003cff
 8003ce8:	08003d11 	.word	0x08003d11
 8003cec:	08003d11 	.word	0x08003d11
 8003cf0:	08003d11 	.word	0x08003d11
 8003cf4:	08003d0b 	.word	0x08003d0b
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e118      	b.n	8003f30 <UART_SetConfig+0x348>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e115      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d04:	2304      	movs	r3, #4
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e112      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	77fb      	strb	r3, [r7, #31]
 8003d0e:	e10f      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d10:	2310      	movs	r3, #16
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e10c      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a68      	ldr	r2, [pc, #416]	; (8003ebc <UART_SetConfig+0x2d4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d120      	bne.n	8003d62 <UART_SetConfig+0x17a>
 8003d20:	4b64      	ldr	r3, [pc, #400]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d2a:	2b30      	cmp	r3, #48	; 0x30
 8003d2c:	d013      	beq.n	8003d56 <UART_SetConfig+0x16e>
 8003d2e:	2b30      	cmp	r3, #48	; 0x30
 8003d30:	d814      	bhi.n	8003d5c <UART_SetConfig+0x174>
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d009      	beq.n	8003d4a <UART_SetConfig+0x162>
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d810      	bhi.n	8003d5c <UART_SetConfig+0x174>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <UART_SetConfig+0x15c>
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d006      	beq.n	8003d50 <UART_SetConfig+0x168>
 8003d42:	e00b      	b.n	8003d5c <UART_SetConfig+0x174>
 8003d44:	2300      	movs	r3, #0
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e0f2      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e0ef      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d50:	2304      	movs	r3, #4
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e0ec      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d56:	2308      	movs	r3, #8
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e0e9      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e0e6      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <UART_SetConfig+0x2d8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d120      	bne.n	8003dae <UART_SetConfig+0x1c6>
 8003d6c:	4b51      	ldr	r3, [pc, #324]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d76:	2bc0      	cmp	r3, #192	; 0xc0
 8003d78:	d013      	beq.n	8003da2 <UART_SetConfig+0x1ba>
 8003d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d7c:	d814      	bhi.n	8003da8 <UART_SetConfig+0x1c0>
 8003d7e:	2b80      	cmp	r3, #128	; 0x80
 8003d80:	d009      	beq.n	8003d96 <UART_SetConfig+0x1ae>
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d810      	bhi.n	8003da8 <UART_SetConfig+0x1c0>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <UART_SetConfig+0x1a8>
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d006      	beq.n	8003d9c <UART_SetConfig+0x1b4>
 8003d8e:	e00b      	b.n	8003da8 <UART_SetConfig+0x1c0>
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e0cc      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d96:	2302      	movs	r3, #2
 8003d98:	77fb      	strb	r3, [r7, #31]
 8003d9a:	e0c9      	b.n	8003f30 <UART_SetConfig+0x348>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e0c6      	b.n	8003f30 <UART_SetConfig+0x348>
 8003da2:	2308      	movs	r3, #8
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e0c3      	b.n	8003f30 <UART_SetConfig+0x348>
 8003da8:	2310      	movs	r3, #16
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e0c0      	b.n	8003f30 <UART_SetConfig+0x348>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a44      	ldr	r2, [pc, #272]	; (8003ec4 <UART_SetConfig+0x2dc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d125      	bne.n	8003e04 <UART_SetConfig+0x21c>
 8003db8:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc6:	d017      	beq.n	8003df8 <UART_SetConfig+0x210>
 8003dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dcc:	d817      	bhi.n	8003dfe <UART_SetConfig+0x216>
 8003dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd2:	d00b      	beq.n	8003dec <UART_SetConfig+0x204>
 8003dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd8:	d811      	bhi.n	8003dfe <UART_SetConfig+0x216>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <UART_SetConfig+0x1fe>
 8003dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de2:	d006      	beq.n	8003df2 <UART_SetConfig+0x20a>
 8003de4:	e00b      	b.n	8003dfe <UART_SetConfig+0x216>
 8003de6:	2300      	movs	r3, #0
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e0a1      	b.n	8003f30 <UART_SetConfig+0x348>
 8003dec:	2302      	movs	r3, #2
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e09e      	b.n	8003f30 <UART_SetConfig+0x348>
 8003df2:	2304      	movs	r3, #4
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e09b      	b.n	8003f30 <UART_SetConfig+0x348>
 8003df8:	2308      	movs	r3, #8
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e098      	b.n	8003f30 <UART_SetConfig+0x348>
 8003dfe:	2310      	movs	r3, #16
 8003e00:	77fb      	strb	r3, [r7, #31]
 8003e02:	e095      	b.n	8003f30 <UART_SetConfig+0x348>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <UART_SetConfig+0x2e0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d125      	bne.n	8003e5a <UART_SetConfig+0x272>
 8003e0e:	4b29      	ldr	r3, [pc, #164]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e1c:	d017      	beq.n	8003e4e <UART_SetConfig+0x266>
 8003e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e22:	d817      	bhi.n	8003e54 <UART_SetConfig+0x26c>
 8003e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e28:	d00b      	beq.n	8003e42 <UART_SetConfig+0x25a>
 8003e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2e:	d811      	bhi.n	8003e54 <UART_SetConfig+0x26c>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <UART_SetConfig+0x254>
 8003e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e38:	d006      	beq.n	8003e48 <UART_SetConfig+0x260>
 8003e3a:	e00b      	b.n	8003e54 <UART_SetConfig+0x26c>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e076      	b.n	8003f30 <UART_SetConfig+0x348>
 8003e42:	2302      	movs	r3, #2
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e073      	b.n	8003f30 <UART_SetConfig+0x348>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e070      	b.n	8003f30 <UART_SetConfig+0x348>
 8003e4e:	2308      	movs	r3, #8
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e06d      	b.n	8003f30 <UART_SetConfig+0x348>
 8003e54:	2310      	movs	r3, #16
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e06a      	b.n	8003f30 <UART_SetConfig+0x348>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <UART_SetConfig+0x2e4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d138      	bne.n	8003ed6 <UART_SetConfig+0x2ee>
 8003e64:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e72:	d017      	beq.n	8003ea4 <UART_SetConfig+0x2bc>
 8003e74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e78:	d82a      	bhi.n	8003ed0 <UART_SetConfig+0x2e8>
 8003e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7e:	d00b      	beq.n	8003e98 <UART_SetConfig+0x2b0>
 8003e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e84:	d824      	bhi.n	8003ed0 <UART_SetConfig+0x2e8>
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <UART_SetConfig+0x2aa>
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8e:	d006      	beq.n	8003e9e <UART_SetConfig+0x2b6>
 8003e90:	e01e      	b.n	8003ed0 <UART_SetConfig+0x2e8>
 8003e92:	2300      	movs	r3, #0
 8003e94:	77fb      	strb	r3, [r7, #31]
 8003e96:	e04b      	b.n	8003f30 <UART_SetConfig+0x348>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e048      	b.n	8003f30 <UART_SetConfig+0x348>
 8003e9e:	2304      	movs	r3, #4
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e045      	b.n	8003f30 <UART_SetConfig+0x348>
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e042      	b.n	8003f30 <UART_SetConfig+0x348>
 8003eaa:	bf00      	nop
 8003eac:	efff69f3 	.word	0xefff69f3
 8003eb0:	40011000 	.word	0x40011000
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40004400 	.word	0x40004400
 8003ebc:	40004800 	.word	0x40004800
 8003ec0:	40004c00 	.word	0x40004c00
 8003ec4:	40005000 	.word	0x40005000
 8003ec8:	40011400 	.word	0x40011400
 8003ecc:	40007800 	.word	0x40007800
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e02c      	b.n	8003f30 <UART_SetConfig+0x348>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a72      	ldr	r2, [pc, #456]	; (80040a4 <UART_SetConfig+0x4bc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d125      	bne.n	8003f2c <UART_SetConfig+0x344>
 8003ee0:	4b71      	ldr	r3, [pc, #452]	; (80040a8 <UART_SetConfig+0x4c0>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003eea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003eee:	d017      	beq.n	8003f20 <UART_SetConfig+0x338>
 8003ef0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ef4:	d817      	bhi.n	8003f26 <UART_SetConfig+0x33e>
 8003ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efa:	d00b      	beq.n	8003f14 <UART_SetConfig+0x32c>
 8003efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f00:	d811      	bhi.n	8003f26 <UART_SetConfig+0x33e>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <UART_SetConfig+0x326>
 8003f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f0a:	d006      	beq.n	8003f1a <UART_SetConfig+0x332>
 8003f0c:	e00b      	b.n	8003f26 <UART_SetConfig+0x33e>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	77fb      	strb	r3, [r7, #31]
 8003f12:	e00d      	b.n	8003f30 <UART_SetConfig+0x348>
 8003f14:	2302      	movs	r3, #2
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e00a      	b.n	8003f30 <UART_SetConfig+0x348>
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e007      	b.n	8003f30 <UART_SetConfig+0x348>
 8003f20:	2308      	movs	r3, #8
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e004      	b.n	8003f30 <UART_SetConfig+0x348>
 8003f26:	2310      	movs	r3, #16
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e001      	b.n	8003f30 <UART_SetConfig+0x348>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f38:	d15b      	bne.n	8003ff2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003f3a:	7ffb      	ldrb	r3, [r7, #31]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d828      	bhi.n	8003f92 <UART_SetConfig+0x3aa>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0x360>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003f75 	.word	0x08003f75
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08003f93 	.word	0x08003f93
 8003f58:	08003f83 	.word	0x08003f83
 8003f5c:	08003f93 	.word	0x08003f93
 8003f60:	08003f93 	.word	0x08003f93
 8003f64:	08003f93 	.word	0x08003f93
 8003f68:	08003f8b 	.word	0x08003f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f7ff f942 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8003f70:	61b8      	str	r0, [r7, #24]
        break;
 8003f72:	e013      	b.n	8003f9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f74:	f7ff f952 	bl	800321c <HAL_RCC_GetPCLK2Freq>
 8003f78:	61b8      	str	r0, [r7, #24]
        break;
 8003f7a:	e00f      	b.n	8003f9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <UART_SetConfig+0x4c4>)
 8003f7e:	61bb      	str	r3, [r7, #24]
        break;
 8003f80:	e00c      	b.n	8003f9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f82:	f7ff f865 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 8003f86:	61b8      	str	r0, [r7, #24]
        break;
 8003f88:	e008      	b.n	8003f9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f8e:	61bb      	str	r3, [r7, #24]
        break;
 8003f90:	e004      	b.n	8003f9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	77bb      	strb	r3, [r7, #30]
        break;
 8003f9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d074      	beq.n	800408c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	005a      	lsls	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d916      	bls.n	8003fec <UART_SetConfig+0x404>
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d212      	bcs.n	8003fec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f023 030f 	bic.w	r3, r3, #15
 8003fce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	89fb      	ldrh	r3, [r7, #14]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	89fa      	ldrh	r2, [r7, #14]
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e04f      	b.n	800408c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	77bb      	strb	r3, [r7, #30]
 8003ff0:	e04c      	b.n	800408c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ff2:	7ffb      	ldrb	r3, [r7, #31]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d828      	bhi.n	800404a <UART_SetConfig+0x462>
 8003ff8:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0x418>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004025 	.word	0x08004025
 8004004:	0800402d 	.word	0x0800402d
 8004008:	08004035 	.word	0x08004035
 800400c:	0800404b 	.word	0x0800404b
 8004010:	0800403b 	.word	0x0800403b
 8004014:	0800404b 	.word	0x0800404b
 8004018:	0800404b 	.word	0x0800404b
 800401c:	0800404b 	.word	0x0800404b
 8004020:	08004043 	.word	0x08004043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7ff f8e6 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8004028:	61b8      	str	r0, [r7, #24]
        break;
 800402a:	e013      	b.n	8004054 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800402c:	f7ff f8f6 	bl	800321c <HAL_RCC_GetPCLK2Freq>
 8004030:	61b8      	str	r0, [r7, #24]
        break;
 8004032:	e00f      	b.n	8004054 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <UART_SetConfig+0x4c4>)
 8004036:	61bb      	str	r3, [r7, #24]
        break;
 8004038:	e00c      	b.n	8004054 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7ff f809 	bl	8003050 <HAL_RCC_GetSysClockFreq>
 800403e:	61b8      	str	r0, [r7, #24]
        break;
 8004040:	e008      	b.n	8004054 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	61bb      	str	r3, [r7, #24]
        break;
 8004048:	e004      	b.n	8004054 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	77bb      	strb	r3, [r7, #30]
        break;
 8004052:	bf00      	nop
    }

    if (pclk != 0U)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d018      	beq.n	800408c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	085a      	lsrs	r2, r3, #1
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	441a      	add	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b0f      	cmp	r3, #15
 8004072:	d909      	bls.n	8004088 <UART_SetConfig+0x4a0>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407a:	d205      	bcs.n	8004088 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	b29a      	uxth	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	e001      	b.n	800408c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004098:	7fbb      	ldrb	r3, [r7, #30]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40007c00 	.word	0x40007c00
 80040a8:	40023800 	.word	0x40023800
 80040ac:	00f42400 	.word	0x00f42400

080040b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ae:	d10a      	bne.n	80041c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004204:	f7fd fbd2 	bl	80019ac <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b08      	cmp	r3, #8
 8004216:	d10e      	bne.n	8004236 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f817 	bl	800425a <UART_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e00d      	b.n	8004252 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b09c      	sub	sp, #112	; 0x70
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800426a:	e0a5      	b.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800426c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004272:	f000 80a1 	beq.w	80043b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004276:	f7fd fb99 	bl	80019ac <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <UART_WaitOnFlagUntilTimeout+0x32>
 8004286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004288:	2b00      	cmp	r3, #0
 800428a:	d13e      	bne.n	800430a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800429a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042a0:	667b      	str	r3, [r7, #100]	; 0x64
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e6      	bne.n	800428c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	663b      	str	r3, [r7, #96]	; 0x60
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3308      	adds	r3, #8
 80042dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042de:	64ba      	str	r2, [r7, #72]	; 0x48
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e6:	e841 2300 	strex	r3, r2, [r1]
 80042ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e5      	bne.n	80042be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e067      	b.n	80043da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d04f      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004326:	d147      	bne.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004330:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004346:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
 8004352:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e6      	bne.n	8004332 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3308      	adds	r3, #8
 800436a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	613b      	str	r3, [r7, #16]
   return(result);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	66bb      	str	r3, [r7, #104]	; 0x68
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004384:	623a      	str	r2, [r7, #32]
 8004386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	69f9      	ldr	r1, [r7, #28]
 800438a:	6a3a      	ldr	r2, [r7, #32]
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	61bb      	str	r3, [r7, #24]
   return(result);
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e5      	bne.n	8004364 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e010      	b.n	80043da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69da      	ldr	r2, [r3, #28]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4013      	ands	r3, r2
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	f43f af4a 	beq.w	800426c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3770      	adds	r7, #112	; 0x70
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <__errno>:
 80043e4:	4b01      	ldr	r3, [pc, #4]	; (80043ec <__errno+0x8>)
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	2000000c 	.word	0x2000000c

080043f0 <__libc_init_array>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4d0d      	ldr	r5, [pc, #52]	; (8004428 <__libc_init_array+0x38>)
 80043f4:	4c0d      	ldr	r4, [pc, #52]	; (800442c <__libc_init_array+0x3c>)
 80043f6:	1b64      	subs	r4, r4, r5
 80043f8:	10a4      	asrs	r4, r4, #2
 80043fa:	2600      	movs	r6, #0
 80043fc:	42a6      	cmp	r6, r4
 80043fe:	d109      	bne.n	8004414 <__libc_init_array+0x24>
 8004400:	4d0b      	ldr	r5, [pc, #44]	; (8004430 <__libc_init_array+0x40>)
 8004402:	4c0c      	ldr	r4, [pc, #48]	; (8004434 <__libc_init_array+0x44>)
 8004404:	f000 ffae 	bl	8005364 <_init>
 8004408:	1b64      	subs	r4, r4, r5
 800440a:	10a4      	asrs	r4, r4, #2
 800440c:	2600      	movs	r6, #0
 800440e:	42a6      	cmp	r6, r4
 8004410:	d105      	bne.n	800441e <__libc_init_array+0x2e>
 8004412:	bd70      	pop	{r4, r5, r6, pc}
 8004414:	f855 3b04 	ldr.w	r3, [r5], #4
 8004418:	4798      	blx	r3
 800441a:	3601      	adds	r6, #1
 800441c:	e7ee      	b.n	80043fc <__libc_init_array+0xc>
 800441e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004422:	4798      	blx	r3
 8004424:	3601      	adds	r6, #1
 8004426:	e7f2      	b.n	800440e <__libc_init_array+0x1e>
 8004428:	0800543c 	.word	0x0800543c
 800442c:	0800543c 	.word	0x0800543c
 8004430:	0800543c 	.word	0x0800543c
 8004434:	08005440 	.word	0x08005440

08004438 <memset>:
 8004438:	4402      	add	r2, r0
 800443a:	4603      	mov	r3, r0
 800443c:	4293      	cmp	r3, r2
 800443e:	d100      	bne.n	8004442 <memset+0xa>
 8004440:	4770      	bx	lr
 8004442:	f803 1b01 	strb.w	r1, [r3], #1
 8004446:	e7f9      	b.n	800443c <memset+0x4>

08004448 <iprintf>:
 8004448:	b40f      	push	{r0, r1, r2, r3}
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <iprintf+0x2c>)
 800444c:	b513      	push	{r0, r1, r4, lr}
 800444e:	681c      	ldr	r4, [r3, #0]
 8004450:	b124      	cbz	r4, 800445c <iprintf+0x14>
 8004452:	69a3      	ldr	r3, [r4, #24]
 8004454:	b913      	cbnz	r3, 800445c <iprintf+0x14>
 8004456:	4620      	mov	r0, r4
 8004458:	f000 f866 	bl	8004528 <__sinit>
 800445c:	ab05      	add	r3, sp, #20
 800445e:	9a04      	ldr	r2, [sp, #16]
 8004460:	68a1      	ldr	r1, [r4, #8]
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	4620      	mov	r0, r4
 8004466:	f000 f9bd 	bl	80047e4 <_vfiprintf_r>
 800446a:	b002      	add	sp, #8
 800446c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004470:	b004      	add	sp, #16
 8004472:	4770      	bx	lr
 8004474:	2000000c 	.word	0x2000000c

08004478 <std>:
 8004478:	2300      	movs	r3, #0
 800447a:	b510      	push	{r4, lr}
 800447c:	4604      	mov	r4, r0
 800447e:	e9c0 3300 	strd	r3, r3, [r0]
 8004482:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004486:	6083      	str	r3, [r0, #8]
 8004488:	8181      	strh	r1, [r0, #12]
 800448a:	6643      	str	r3, [r0, #100]	; 0x64
 800448c:	81c2      	strh	r2, [r0, #14]
 800448e:	6183      	str	r3, [r0, #24]
 8004490:	4619      	mov	r1, r3
 8004492:	2208      	movs	r2, #8
 8004494:	305c      	adds	r0, #92	; 0x5c
 8004496:	f7ff ffcf 	bl	8004438 <memset>
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <std+0x38>)
 800449c:	6263      	str	r3, [r4, #36]	; 0x24
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <std+0x3c>)
 80044a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <std+0x40>)
 80044a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044a6:	4b05      	ldr	r3, [pc, #20]	; (80044bc <std+0x44>)
 80044a8:	6224      	str	r4, [r4, #32]
 80044aa:	6323      	str	r3, [r4, #48]	; 0x30
 80044ac:	bd10      	pop	{r4, pc}
 80044ae:	bf00      	nop
 80044b0:	08004d8d 	.word	0x08004d8d
 80044b4:	08004daf 	.word	0x08004daf
 80044b8:	08004de7 	.word	0x08004de7
 80044bc:	08004e0b 	.word	0x08004e0b

080044c0 <_cleanup_r>:
 80044c0:	4901      	ldr	r1, [pc, #4]	; (80044c8 <_cleanup_r+0x8>)
 80044c2:	f000 b8af 	b.w	8004624 <_fwalk_reent>
 80044c6:	bf00      	nop
 80044c8:	080050e5 	.word	0x080050e5

080044cc <__sfmoreglue>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	2268      	movs	r2, #104	; 0x68
 80044d0:	1e4d      	subs	r5, r1, #1
 80044d2:	4355      	muls	r5, r2
 80044d4:	460e      	mov	r6, r1
 80044d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044da:	f000 f8e5 	bl	80046a8 <_malloc_r>
 80044de:	4604      	mov	r4, r0
 80044e0:	b140      	cbz	r0, 80044f4 <__sfmoreglue+0x28>
 80044e2:	2100      	movs	r1, #0
 80044e4:	e9c0 1600 	strd	r1, r6, [r0]
 80044e8:	300c      	adds	r0, #12
 80044ea:	60a0      	str	r0, [r4, #8]
 80044ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044f0:	f7ff ffa2 	bl	8004438 <memset>
 80044f4:	4620      	mov	r0, r4
 80044f6:	bd70      	pop	{r4, r5, r6, pc}

080044f8 <__sfp_lock_acquire>:
 80044f8:	4801      	ldr	r0, [pc, #4]	; (8004500 <__sfp_lock_acquire+0x8>)
 80044fa:	f000 b8b3 	b.w	8004664 <__retarget_lock_acquire_recursive>
 80044fe:	bf00      	nop
 8004500:	20000169 	.word	0x20000169

08004504 <__sfp_lock_release>:
 8004504:	4801      	ldr	r0, [pc, #4]	; (800450c <__sfp_lock_release+0x8>)
 8004506:	f000 b8ae 	b.w	8004666 <__retarget_lock_release_recursive>
 800450a:	bf00      	nop
 800450c:	20000169 	.word	0x20000169

08004510 <__sinit_lock_acquire>:
 8004510:	4801      	ldr	r0, [pc, #4]	; (8004518 <__sinit_lock_acquire+0x8>)
 8004512:	f000 b8a7 	b.w	8004664 <__retarget_lock_acquire_recursive>
 8004516:	bf00      	nop
 8004518:	2000016a 	.word	0x2000016a

0800451c <__sinit_lock_release>:
 800451c:	4801      	ldr	r0, [pc, #4]	; (8004524 <__sinit_lock_release+0x8>)
 800451e:	f000 b8a2 	b.w	8004666 <__retarget_lock_release_recursive>
 8004522:	bf00      	nop
 8004524:	2000016a 	.word	0x2000016a

08004528 <__sinit>:
 8004528:	b510      	push	{r4, lr}
 800452a:	4604      	mov	r4, r0
 800452c:	f7ff fff0 	bl	8004510 <__sinit_lock_acquire>
 8004530:	69a3      	ldr	r3, [r4, #24]
 8004532:	b11b      	cbz	r3, 800453c <__sinit+0x14>
 8004534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004538:	f7ff bff0 	b.w	800451c <__sinit_lock_release>
 800453c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004540:	6523      	str	r3, [r4, #80]	; 0x50
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <__sinit+0x68>)
 8004544:	4a13      	ldr	r2, [pc, #76]	; (8004594 <__sinit+0x6c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	62a2      	str	r2, [r4, #40]	; 0x28
 800454a:	42a3      	cmp	r3, r4
 800454c:	bf04      	itt	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	61a3      	streq	r3, [r4, #24]
 8004552:	4620      	mov	r0, r4
 8004554:	f000 f820 	bl	8004598 <__sfp>
 8004558:	6060      	str	r0, [r4, #4]
 800455a:	4620      	mov	r0, r4
 800455c:	f000 f81c 	bl	8004598 <__sfp>
 8004560:	60a0      	str	r0, [r4, #8]
 8004562:	4620      	mov	r0, r4
 8004564:	f000 f818 	bl	8004598 <__sfp>
 8004568:	2200      	movs	r2, #0
 800456a:	60e0      	str	r0, [r4, #12]
 800456c:	2104      	movs	r1, #4
 800456e:	6860      	ldr	r0, [r4, #4]
 8004570:	f7ff ff82 	bl	8004478 <std>
 8004574:	68a0      	ldr	r0, [r4, #8]
 8004576:	2201      	movs	r2, #1
 8004578:	2109      	movs	r1, #9
 800457a:	f7ff ff7d 	bl	8004478 <std>
 800457e:	68e0      	ldr	r0, [r4, #12]
 8004580:	2202      	movs	r2, #2
 8004582:	2112      	movs	r1, #18
 8004584:	f7ff ff78 	bl	8004478 <std>
 8004588:	2301      	movs	r3, #1
 800458a:	61a3      	str	r3, [r4, #24]
 800458c:	e7d2      	b.n	8004534 <__sinit+0xc>
 800458e:	bf00      	nop
 8004590:	0800539c 	.word	0x0800539c
 8004594:	080044c1 	.word	0x080044c1

08004598 <__sfp>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	4607      	mov	r7, r0
 800459c:	f7ff ffac 	bl	80044f8 <__sfp_lock_acquire>
 80045a0:	4b1e      	ldr	r3, [pc, #120]	; (800461c <__sfp+0x84>)
 80045a2:	681e      	ldr	r6, [r3, #0]
 80045a4:	69b3      	ldr	r3, [r6, #24]
 80045a6:	b913      	cbnz	r3, 80045ae <__sfp+0x16>
 80045a8:	4630      	mov	r0, r6
 80045aa:	f7ff ffbd 	bl	8004528 <__sinit>
 80045ae:	3648      	adds	r6, #72	; 0x48
 80045b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	d503      	bpl.n	80045c0 <__sfp+0x28>
 80045b8:	6833      	ldr	r3, [r6, #0]
 80045ba:	b30b      	cbz	r3, 8004600 <__sfp+0x68>
 80045bc:	6836      	ldr	r6, [r6, #0]
 80045be:	e7f7      	b.n	80045b0 <__sfp+0x18>
 80045c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045c4:	b9d5      	cbnz	r5, 80045fc <__sfp+0x64>
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <__sfp+0x88>)
 80045c8:	60e3      	str	r3, [r4, #12]
 80045ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045ce:	6665      	str	r5, [r4, #100]	; 0x64
 80045d0:	f000 f847 	bl	8004662 <__retarget_lock_init_recursive>
 80045d4:	f7ff ff96 	bl	8004504 <__sfp_lock_release>
 80045d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045e0:	6025      	str	r5, [r4, #0]
 80045e2:	61a5      	str	r5, [r4, #24]
 80045e4:	2208      	movs	r2, #8
 80045e6:	4629      	mov	r1, r5
 80045e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045ec:	f7ff ff24 	bl	8004438 <memset>
 80045f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045f8:	4620      	mov	r0, r4
 80045fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fc:	3468      	adds	r4, #104	; 0x68
 80045fe:	e7d9      	b.n	80045b4 <__sfp+0x1c>
 8004600:	2104      	movs	r1, #4
 8004602:	4638      	mov	r0, r7
 8004604:	f7ff ff62 	bl	80044cc <__sfmoreglue>
 8004608:	4604      	mov	r4, r0
 800460a:	6030      	str	r0, [r6, #0]
 800460c:	2800      	cmp	r0, #0
 800460e:	d1d5      	bne.n	80045bc <__sfp+0x24>
 8004610:	f7ff ff78 	bl	8004504 <__sfp_lock_release>
 8004614:	230c      	movs	r3, #12
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	e7ee      	b.n	80045f8 <__sfp+0x60>
 800461a:	bf00      	nop
 800461c:	0800539c 	.word	0x0800539c
 8004620:	ffff0001 	.word	0xffff0001

08004624 <_fwalk_reent>:
 8004624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004628:	4606      	mov	r6, r0
 800462a:	4688      	mov	r8, r1
 800462c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004630:	2700      	movs	r7, #0
 8004632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004636:	f1b9 0901 	subs.w	r9, r9, #1
 800463a:	d505      	bpl.n	8004648 <_fwalk_reent+0x24>
 800463c:	6824      	ldr	r4, [r4, #0]
 800463e:	2c00      	cmp	r4, #0
 8004640:	d1f7      	bne.n	8004632 <_fwalk_reent+0xe>
 8004642:	4638      	mov	r0, r7
 8004644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004648:	89ab      	ldrh	r3, [r5, #12]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d907      	bls.n	800465e <_fwalk_reent+0x3a>
 800464e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004652:	3301      	adds	r3, #1
 8004654:	d003      	beq.n	800465e <_fwalk_reent+0x3a>
 8004656:	4629      	mov	r1, r5
 8004658:	4630      	mov	r0, r6
 800465a:	47c0      	blx	r8
 800465c:	4307      	orrs	r7, r0
 800465e:	3568      	adds	r5, #104	; 0x68
 8004660:	e7e9      	b.n	8004636 <_fwalk_reent+0x12>

08004662 <__retarget_lock_init_recursive>:
 8004662:	4770      	bx	lr

08004664 <__retarget_lock_acquire_recursive>:
 8004664:	4770      	bx	lr

08004666 <__retarget_lock_release_recursive>:
 8004666:	4770      	bx	lr

08004668 <sbrk_aligned>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4e0e      	ldr	r6, [pc, #56]	; (80046a4 <sbrk_aligned+0x3c>)
 800466c:	460c      	mov	r4, r1
 800466e:	6831      	ldr	r1, [r6, #0]
 8004670:	4605      	mov	r5, r0
 8004672:	b911      	cbnz	r1, 800467a <sbrk_aligned+0x12>
 8004674:	f000 fb7a 	bl	8004d6c <_sbrk_r>
 8004678:	6030      	str	r0, [r6, #0]
 800467a:	4621      	mov	r1, r4
 800467c:	4628      	mov	r0, r5
 800467e:	f000 fb75 	bl	8004d6c <_sbrk_r>
 8004682:	1c43      	adds	r3, r0, #1
 8004684:	d00a      	beq.n	800469c <sbrk_aligned+0x34>
 8004686:	1cc4      	adds	r4, r0, #3
 8004688:	f024 0403 	bic.w	r4, r4, #3
 800468c:	42a0      	cmp	r0, r4
 800468e:	d007      	beq.n	80046a0 <sbrk_aligned+0x38>
 8004690:	1a21      	subs	r1, r4, r0
 8004692:	4628      	mov	r0, r5
 8004694:	f000 fb6a 	bl	8004d6c <_sbrk_r>
 8004698:	3001      	adds	r0, #1
 800469a:	d101      	bne.n	80046a0 <sbrk_aligned+0x38>
 800469c:	f04f 34ff 	mov.w	r4, #4294967295
 80046a0:	4620      	mov	r0, r4
 80046a2:	bd70      	pop	{r4, r5, r6, pc}
 80046a4:	20000170 	.word	0x20000170

080046a8 <_malloc_r>:
 80046a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ac:	1ccd      	adds	r5, r1, #3
 80046ae:	f025 0503 	bic.w	r5, r5, #3
 80046b2:	3508      	adds	r5, #8
 80046b4:	2d0c      	cmp	r5, #12
 80046b6:	bf38      	it	cc
 80046b8:	250c      	movcc	r5, #12
 80046ba:	2d00      	cmp	r5, #0
 80046bc:	4607      	mov	r7, r0
 80046be:	db01      	blt.n	80046c4 <_malloc_r+0x1c>
 80046c0:	42a9      	cmp	r1, r5
 80046c2:	d905      	bls.n	80046d0 <_malloc_r+0x28>
 80046c4:	230c      	movs	r3, #12
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	2600      	movs	r6, #0
 80046ca:	4630      	mov	r0, r6
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d0:	4e2e      	ldr	r6, [pc, #184]	; (800478c <_malloc_r+0xe4>)
 80046d2:	f000 fdbb 	bl	800524c <__malloc_lock>
 80046d6:	6833      	ldr	r3, [r6, #0]
 80046d8:	461c      	mov	r4, r3
 80046da:	bb34      	cbnz	r4, 800472a <_malloc_r+0x82>
 80046dc:	4629      	mov	r1, r5
 80046de:	4638      	mov	r0, r7
 80046e0:	f7ff ffc2 	bl	8004668 <sbrk_aligned>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	4604      	mov	r4, r0
 80046e8:	d14d      	bne.n	8004786 <_malloc_r+0xde>
 80046ea:	6834      	ldr	r4, [r6, #0]
 80046ec:	4626      	mov	r6, r4
 80046ee:	2e00      	cmp	r6, #0
 80046f0:	d140      	bne.n	8004774 <_malloc_r+0xcc>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	4631      	mov	r1, r6
 80046f6:	4638      	mov	r0, r7
 80046f8:	eb04 0803 	add.w	r8, r4, r3
 80046fc:	f000 fb36 	bl	8004d6c <_sbrk_r>
 8004700:	4580      	cmp	r8, r0
 8004702:	d13a      	bne.n	800477a <_malloc_r+0xd2>
 8004704:	6821      	ldr	r1, [r4, #0]
 8004706:	3503      	adds	r5, #3
 8004708:	1a6d      	subs	r5, r5, r1
 800470a:	f025 0503 	bic.w	r5, r5, #3
 800470e:	3508      	adds	r5, #8
 8004710:	2d0c      	cmp	r5, #12
 8004712:	bf38      	it	cc
 8004714:	250c      	movcc	r5, #12
 8004716:	4629      	mov	r1, r5
 8004718:	4638      	mov	r0, r7
 800471a:	f7ff ffa5 	bl	8004668 <sbrk_aligned>
 800471e:	3001      	adds	r0, #1
 8004720:	d02b      	beq.n	800477a <_malloc_r+0xd2>
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	442b      	add	r3, r5
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	e00e      	b.n	8004748 <_malloc_r+0xa0>
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	1b52      	subs	r2, r2, r5
 800472e:	d41e      	bmi.n	800476e <_malloc_r+0xc6>
 8004730:	2a0b      	cmp	r2, #11
 8004732:	d916      	bls.n	8004762 <_malloc_r+0xba>
 8004734:	1961      	adds	r1, r4, r5
 8004736:	42a3      	cmp	r3, r4
 8004738:	6025      	str	r5, [r4, #0]
 800473a:	bf18      	it	ne
 800473c:	6059      	strne	r1, [r3, #4]
 800473e:	6863      	ldr	r3, [r4, #4]
 8004740:	bf08      	it	eq
 8004742:	6031      	streq	r1, [r6, #0]
 8004744:	5162      	str	r2, [r4, r5]
 8004746:	604b      	str	r3, [r1, #4]
 8004748:	4638      	mov	r0, r7
 800474a:	f104 060b 	add.w	r6, r4, #11
 800474e:	f000 fd83 	bl	8005258 <__malloc_unlock>
 8004752:	f026 0607 	bic.w	r6, r6, #7
 8004756:	1d23      	adds	r3, r4, #4
 8004758:	1af2      	subs	r2, r6, r3
 800475a:	d0b6      	beq.n	80046ca <_malloc_r+0x22>
 800475c:	1b9b      	subs	r3, r3, r6
 800475e:	50a3      	str	r3, [r4, r2]
 8004760:	e7b3      	b.n	80046ca <_malloc_r+0x22>
 8004762:	6862      	ldr	r2, [r4, #4]
 8004764:	42a3      	cmp	r3, r4
 8004766:	bf0c      	ite	eq
 8004768:	6032      	streq	r2, [r6, #0]
 800476a:	605a      	strne	r2, [r3, #4]
 800476c:	e7ec      	b.n	8004748 <_malloc_r+0xa0>
 800476e:	4623      	mov	r3, r4
 8004770:	6864      	ldr	r4, [r4, #4]
 8004772:	e7b2      	b.n	80046da <_malloc_r+0x32>
 8004774:	4634      	mov	r4, r6
 8004776:	6876      	ldr	r6, [r6, #4]
 8004778:	e7b9      	b.n	80046ee <_malloc_r+0x46>
 800477a:	230c      	movs	r3, #12
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	4638      	mov	r0, r7
 8004780:	f000 fd6a 	bl	8005258 <__malloc_unlock>
 8004784:	e7a1      	b.n	80046ca <_malloc_r+0x22>
 8004786:	6025      	str	r5, [r4, #0]
 8004788:	e7de      	b.n	8004748 <_malloc_r+0xa0>
 800478a:	bf00      	nop
 800478c:	2000016c 	.word	0x2000016c

08004790 <__sfputc_r>:
 8004790:	6893      	ldr	r3, [r2, #8]
 8004792:	3b01      	subs	r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	b410      	push	{r4}
 8004798:	6093      	str	r3, [r2, #8]
 800479a:	da08      	bge.n	80047ae <__sfputc_r+0x1e>
 800479c:	6994      	ldr	r4, [r2, #24]
 800479e:	42a3      	cmp	r3, r4
 80047a0:	db01      	blt.n	80047a6 <__sfputc_r+0x16>
 80047a2:	290a      	cmp	r1, #10
 80047a4:	d103      	bne.n	80047ae <__sfputc_r+0x1e>
 80047a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047aa:	f000 bb33 	b.w	8004e14 <__swbuf_r>
 80047ae:	6813      	ldr	r3, [r2, #0]
 80047b0:	1c58      	adds	r0, r3, #1
 80047b2:	6010      	str	r0, [r2, #0]
 80047b4:	7019      	strb	r1, [r3, #0]
 80047b6:	4608      	mov	r0, r1
 80047b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047bc:	4770      	bx	lr

080047be <__sfputs_r>:
 80047be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c0:	4606      	mov	r6, r0
 80047c2:	460f      	mov	r7, r1
 80047c4:	4614      	mov	r4, r2
 80047c6:	18d5      	adds	r5, r2, r3
 80047c8:	42ac      	cmp	r4, r5
 80047ca:	d101      	bne.n	80047d0 <__sfputs_r+0x12>
 80047cc:	2000      	movs	r0, #0
 80047ce:	e007      	b.n	80047e0 <__sfputs_r+0x22>
 80047d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d4:	463a      	mov	r2, r7
 80047d6:	4630      	mov	r0, r6
 80047d8:	f7ff ffda 	bl	8004790 <__sfputc_r>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d1f3      	bne.n	80047c8 <__sfputs_r+0xa>
 80047e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047e4 <_vfiprintf_r>:
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e8:	460d      	mov	r5, r1
 80047ea:	b09d      	sub	sp, #116	; 0x74
 80047ec:	4614      	mov	r4, r2
 80047ee:	4698      	mov	r8, r3
 80047f0:	4606      	mov	r6, r0
 80047f2:	b118      	cbz	r0, 80047fc <_vfiprintf_r+0x18>
 80047f4:	6983      	ldr	r3, [r0, #24]
 80047f6:	b90b      	cbnz	r3, 80047fc <_vfiprintf_r+0x18>
 80047f8:	f7ff fe96 	bl	8004528 <__sinit>
 80047fc:	4b89      	ldr	r3, [pc, #548]	; (8004a24 <_vfiprintf_r+0x240>)
 80047fe:	429d      	cmp	r5, r3
 8004800:	d11b      	bne.n	800483a <_vfiprintf_r+0x56>
 8004802:	6875      	ldr	r5, [r6, #4]
 8004804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004806:	07d9      	lsls	r1, r3, #31
 8004808:	d405      	bmi.n	8004816 <_vfiprintf_r+0x32>
 800480a:	89ab      	ldrh	r3, [r5, #12]
 800480c:	059a      	lsls	r2, r3, #22
 800480e:	d402      	bmi.n	8004816 <_vfiprintf_r+0x32>
 8004810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004812:	f7ff ff27 	bl	8004664 <__retarget_lock_acquire_recursive>
 8004816:	89ab      	ldrh	r3, [r5, #12]
 8004818:	071b      	lsls	r3, r3, #28
 800481a:	d501      	bpl.n	8004820 <_vfiprintf_r+0x3c>
 800481c:	692b      	ldr	r3, [r5, #16]
 800481e:	b9eb      	cbnz	r3, 800485c <_vfiprintf_r+0x78>
 8004820:	4629      	mov	r1, r5
 8004822:	4630      	mov	r0, r6
 8004824:	f000 fb5a 	bl	8004edc <__swsetup_r>
 8004828:	b1c0      	cbz	r0, 800485c <_vfiprintf_r+0x78>
 800482a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800482c:	07dc      	lsls	r4, r3, #31
 800482e:	d50e      	bpl.n	800484e <_vfiprintf_r+0x6a>
 8004830:	f04f 30ff 	mov.w	r0, #4294967295
 8004834:	b01d      	add	sp, #116	; 0x74
 8004836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483a:	4b7b      	ldr	r3, [pc, #492]	; (8004a28 <_vfiprintf_r+0x244>)
 800483c:	429d      	cmp	r5, r3
 800483e:	d101      	bne.n	8004844 <_vfiprintf_r+0x60>
 8004840:	68b5      	ldr	r5, [r6, #8]
 8004842:	e7df      	b.n	8004804 <_vfiprintf_r+0x20>
 8004844:	4b79      	ldr	r3, [pc, #484]	; (8004a2c <_vfiprintf_r+0x248>)
 8004846:	429d      	cmp	r5, r3
 8004848:	bf08      	it	eq
 800484a:	68f5      	ldreq	r5, [r6, #12]
 800484c:	e7da      	b.n	8004804 <_vfiprintf_r+0x20>
 800484e:	89ab      	ldrh	r3, [r5, #12]
 8004850:	0598      	lsls	r0, r3, #22
 8004852:	d4ed      	bmi.n	8004830 <_vfiprintf_r+0x4c>
 8004854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004856:	f7ff ff06 	bl	8004666 <__retarget_lock_release_recursive>
 800485a:	e7e9      	b.n	8004830 <_vfiprintf_r+0x4c>
 800485c:	2300      	movs	r3, #0
 800485e:	9309      	str	r3, [sp, #36]	; 0x24
 8004860:	2320      	movs	r3, #32
 8004862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004866:	f8cd 800c 	str.w	r8, [sp, #12]
 800486a:	2330      	movs	r3, #48	; 0x30
 800486c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a30 <_vfiprintf_r+0x24c>
 8004870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004874:	f04f 0901 	mov.w	r9, #1
 8004878:	4623      	mov	r3, r4
 800487a:	469a      	mov	sl, r3
 800487c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004880:	b10a      	cbz	r2, 8004886 <_vfiprintf_r+0xa2>
 8004882:	2a25      	cmp	r2, #37	; 0x25
 8004884:	d1f9      	bne.n	800487a <_vfiprintf_r+0x96>
 8004886:	ebba 0b04 	subs.w	fp, sl, r4
 800488a:	d00b      	beq.n	80048a4 <_vfiprintf_r+0xc0>
 800488c:	465b      	mov	r3, fp
 800488e:	4622      	mov	r2, r4
 8004890:	4629      	mov	r1, r5
 8004892:	4630      	mov	r0, r6
 8004894:	f7ff ff93 	bl	80047be <__sfputs_r>
 8004898:	3001      	adds	r0, #1
 800489a:	f000 80aa 	beq.w	80049f2 <_vfiprintf_r+0x20e>
 800489e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048a0:	445a      	add	r2, fp
 80048a2:	9209      	str	r2, [sp, #36]	; 0x24
 80048a4:	f89a 3000 	ldrb.w	r3, [sl]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 80a2 	beq.w	80049f2 <_vfiprintf_r+0x20e>
 80048ae:	2300      	movs	r3, #0
 80048b0:	f04f 32ff 	mov.w	r2, #4294967295
 80048b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048b8:	f10a 0a01 	add.w	sl, sl, #1
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	9307      	str	r3, [sp, #28]
 80048c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048c4:	931a      	str	r3, [sp, #104]	; 0x68
 80048c6:	4654      	mov	r4, sl
 80048c8:	2205      	movs	r2, #5
 80048ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ce:	4858      	ldr	r0, [pc, #352]	; (8004a30 <_vfiprintf_r+0x24c>)
 80048d0:	f7fb fc9e 	bl	8000210 <memchr>
 80048d4:	9a04      	ldr	r2, [sp, #16]
 80048d6:	b9d8      	cbnz	r0, 8004910 <_vfiprintf_r+0x12c>
 80048d8:	06d1      	lsls	r1, r2, #27
 80048da:	bf44      	itt	mi
 80048dc:	2320      	movmi	r3, #32
 80048de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048e2:	0713      	lsls	r3, r2, #28
 80048e4:	bf44      	itt	mi
 80048e6:	232b      	movmi	r3, #43	; 0x2b
 80048e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ec:	f89a 3000 	ldrb.w	r3, [sl]
 80048f0:	2b2a      	cmp	r3, #42	; 0x2a
 80048f2:	d015      	beq.n	8004920 <_vfiprintf_r+0x13c>
 80048f4:	9a07      	ldr	r2, [sp, #28]
 80048f6:	4654      	mov	r4, sl
 80048f8:	2000      	movs	r0, #0
 80048fa:	f04f 0c0a 	mov.w	ip, #10
 80048fe:	4621      	mov	r1, r4
 8004900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004904:	3b30      	subs	r3, #48	; 0x30
 8004906:	2b09      	cmp	r3, #9
 8004908:	d94e      	bls.n	80049a8 <_vfiprintf_r+0x1c4>
 800490a:	b1b0      	cbz	r0, 800493a <_vfiprintf_r+0x156>
 800490c:	9207      	str	r2, [sp, #28]
 800490e:	e014      	b.n	800493a <_vfiprintf_r+0x156>
 8004910:	eba0 0308 	sub.w	r3, r0, r8
 8004914:	fa09 f303 	lsl.w	r3, r9, r3
 8004918:	4313      	orrs	r3, r2
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	46a2      	mov	sl, r4
 800491e:	e7d2      	b.n	80048c6 <_vfiprintf_r+0xe2>
 8004920:	9b03      	ldr	r3, [sp, #12]
 8004922:	1d19      	adds	r1, r3, #4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	9103      	str	r1, [sp, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	bfbb      	ittet	lt
 800492c:	425b      	neglt	r3, r3
 800492e:	f042 0202 	orrlt.w	r2, r2, #2
 8004932:	9307      	strge	r3, [sp, #28]
 8004934:	9307      	strlt	r3, [sp, #28]
 8004936:	bfb8      	it	lt
 8004938:	9204      	strlt	r2, [sp, #16]
 800493a:	7823      	ldrb	r3, [r4, #0]
 800493c:	2b2e      	cmp	r3, #46	; 0x2e
 800493e:	d10c      	bne.n	800495a <_vfiprintf_r+0x176>
 8004940:	7863      	ldrb	r3, [r4, #1]
 8004942:	2b2a      	cmp	r3, #42	; 0x2a
 8004944:	d135      	bne.n	80049b2 <_vfiprintf_r+0x1ce>
 8004946:	9b03      	ldr	r3, [sp, #12]
 8004948:	1d1a      	adds	r2, r3, #4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	9203      	str	r2, [sp, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	bfb8      	it	lt
 8004952:	f04f 33ff 	movlt.w	r3, #4294967295
 8004956:	3402      	adds	r4, #2
 8004958:	9305      	str	r3, [sp, #20]
 800495a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a40 <_vfiprintf_r+0x25c>
 800495e:	7821      	ldrb	r1, [r4, #0]
 8004960:	2203      	movs	r2, #3
 8004962:	4650      	mov	r0, sl
 8004964:	f7fb fc54 	bl	8000210 <memchr>
 8004968:	b140      	cbz	r0, 800497c <_vfiprintf_r+0x198>
 800496a:	2340      	movs	r3, #64	; 0x40
 800496c:	eba0 000a 	sub.w	r0, r0, sl
 8004970:	fa03 f000 	lsl.w	r0, r3, r0
 8004974:	9b04      	ldr	r3, [sp, #16]
 8004976:	4303      	orrs	r3, r0
 8004978:	3401      	adds	r4, #1
 800497a:	9304      	str	r3, [sp, #16]
 800497c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004980:	482c      	ldr	r0, [pc, #176]	; (8004a34 <_vfiprintf_r+0x250>)
 8004982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004986:	2206      	movs	r2, #6
 8004988:	f7fb fc42 	bl	8000210 <memchr>
 800498c:	2800      	cmp	r0, #0
 800498e:	d03f      	beq.n	8004a10 <_vfiprintf_r+0x22c>
 8004990:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <_vfiprintf_r+0x254>)
 8004992:	bb1b      	cbnz	r3, 80049dc <_vfiprintf_r+0x1f8>
 8004994:	9b03      	ldr	r3, [sp, #12]
 8004996:	3307      	adds	r3, #7
 8004998:	f023 0307 	bic.w	r3, r3, #7
 800499c:	3308      	adds	r3, #8
 800499e:	9303      	str	r3, [sp, #12]
 80049a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a2:	443b      	add	r3, r7
 80049a4:	9309      	str	r3, [sp, #36]	; 0x24
 80049a6:	e767      	b.n	8004878 <_vfiprintf_r+0x94>
 80049a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ac:	460c      	mov	r4, r1
 80049ae:	2001      	movs	r0, #1
 80049b0:	e7a5      	b.n	80048fe <_vfiprintf_r+0x11a>
 80049b2:	2300      	movs	r3, #0
 80049b4:	3401      	adds	r4, #1
 80049b6:	9305      	str	r3, [sp, #20]
 80049b8:	4619      	mov	r1, r3
 80049ba:	f04f 0c0a 	mov.w	ip, #10
 80049be:	4620      	mov	r0, r4
 80049c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049c4:	3a30      	subs	r2, #48	; 0x30
 80049c6:	2a09      	cmp	r2, #9
 80049c8:	d903      	bls.n	80049d2 <_vfiprintf_r+0x1ee>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0c5      	beq.n	800495a <_vfiprintf_r+0x176>
 80049ce:	9105      	str	r1, [sp, #20]
 80049d0:	e7c3      	b.n	800495a <_vfiprintf_r+0x176>
 80049d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049d6:	4604      	mov	r4, r0
 80049d8:	2301      	movs	r3, #1
 80049da:	e7f0      	b.n	80049be <_vfiprintf_r+0x1da>
 80049dc:	ab03      	add	r3, sp, #12
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	462a      	mov	r2, r5
 80049e2:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <_vfiprintf_r+0x258>)
 80049e4:	a904      	add	r1, sp, #16
 80049e6:	4630      	mov	r0, r6
 80049e8:	f3af 8000 	nop.w
 80049ec:	4607      	mov	r7, r0
 80049ee:	1c78      	adds	r0, r7, #1
 80049f0:	d1d6      	bne.n	80049a0 <_vfiprintf_r+0x1bc>
 80049f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049f4:	07d9      	lsls	r1, r3, #31
 80049f6:	d405      	bmi.n	8004a04 <_vfiprintf_r+0x220>
 80049f8:	89ab      	ldrh	r3, [r5, #12]
 80049fa:	059a      	lsls	r2, r3, #22
 80049fc:	d402      	bmi.n	8004a04 <_vfiprintf_r+0x220>
 80049fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a00:	f7ff fe31 	bl	8004666 <__retarget_lock_release_recursive>
 8004a04:	89ab      	ldrh	r3, [r5, #12]
 8004a06:	065b      	lsls	r3, r3, #25
 8004a08:	f53f af12 	bmi.w	8004830 <_vfiprintf_r+0x4c>
 8004a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a0e:	e711      	b.n	8004834 <_vfiprintf_r+0x50>
 8004a10:	ab03      	add	r3, sp, #12
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	462a      	mov	r2, r5
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <_vfiprintf_r+0x258>)
 8004a18:	a904      	add	r1, sp, #16
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f000 f880 	bl	8004b20 <_printf_i>
 8004a20:	e7e4      	b.n	80049ec <_vfiprintf_r+0x208>
 8004a22:	bf00      	nop
 8004a24:	080053c0 	.word	0x080053c0
 8004a28:	080053e0 	.word	0x080053e0
 8004a2c:	080053a0 	.word	0x080053a0
 8004a30:	08005400 	.word	0x08005400
 8004a34:	0800540a 	.word	0x0800540a
 8004a38:	00000000 	.word	0x00000000
 8004a3c:	080047bf 	.word	0x080047bf
 8004a40:	08005406 	.word	0x08005406

08004a44 <_printf_common>:
 8004a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	4616      	mov	r6, r2
 8004a4a:	4699      	mov	r9, r3
 8004a4c:	688a      	ldr	r2, [r1, #8]
 8004a4e:	690b      	ldr	r3, [r1, #16]
 8004a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a54:	4293      	cmp	r3, r2
 8004a56:	bfb8      	it	lt
 8004a58:	4613      	movlt	r3, r2
 8004a5a:	6033      	str	r3, [r6, #0]
 8004a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a60:	4607      	mov	r7, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	b10a      	cbz	r2, 8004a6a <_printf_common+0x26>
 8004a66:	3301      	adds	r3, #1
 8004a68:	6033      	str	r3, [r6, #0]
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	0699      	lsls	r1, r3, #26
 8004a6e:	bf42      	ittt	mi
 8004a70:	6833      	ldrmi	r3, [r6, #0]
 8004a72:	3302      	addmi	r3, #2
 8004a74:	6033      	strmi	r3, [r6, #0]
 8004a76:	6825      	ldr	r5, [r4, #0]
 8004a78:	f015 0506 	ands.w	r5, r5, #6
 8004a7c:	d106      	bne.n	8004a8c <_printf_common+0x48>
 8004a7e:	f104 0a19 	add.w	sl, r4, #25
 8004a82:	68e3      	ldr	r3, [r4, #12]
 8004a84:	6832      	ldr	r2, [r6, #0]
 8004a86:	1a9b      	subs	r3, r3, r2
 8004a88:	42ab      	cmp	r3, r5
 8004a8a:	dc26      	bgt.n	8004ada <_printf_common+0x96>
 8004a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a90:	1e13      	subs	r3, r2, #0
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	bf18      	it	ne
 8004a96:	2301      	movne	r3, #1
 8004a98:	0692      	lsls	r2, r2, #26
 8004a9a:	d42b      	bmi.n	8004af4 <_printf_common+0xb0>
 8004a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	47c0      	blx	r8
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	d01e      	beq.n	8004ae8 <_printf_common+0xa4>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	68e5      	ldr	r5, [r4, #12]
 8004aae:	6832      	ldr	r2, [r6, #0]
 8004ab0:	f003 0306 	and.w	r3, r3, #6
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	bf08      	it	eq
 8004ab8:	1aad      	subeq	r5, r5, r2
 8004aba:	68a3      	ldr	r3, [r4, #8]
 8004abc:	6922      	ldr	r2, [r4, #16]
 8004abe:	bf0c      	ite	eq
 8004ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac4:	2500      	movne	r5, #0
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	bfc4      	itt	gt
 8004aca:	1a9b      	subgt	r3, r3, r2
 8004acc:	18ed      	addgt	r5, r5, r3
 8004ace:	2600      	movs	r6, #0
 8004ad0:	341a      	adds	r4, #26
 8004ad2:	42b5      	cmp	r5, r6
 8004ad4:	d11a      	bne.n	8004b0c <_printf_common+0xc8>
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e008      	b.n	8004aec <_printf_common+0xa8>
 8004ada:	2301      	movs	r3, #1
 8004adc:	4652      	mov	r2, sl
 8004ade:	4649      	mov	r1, r9
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	47c0      	blx	r8
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d103      	bne.n	8004af0 <_printf_common+0xac>
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af0:	3501      	adds	r5, #1
 8004af2:	e7c6      	b.n	8004a82 <_printf_common+0x3e>
 8004af4:	18e1      	adds	r1, r4, r3
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	2030      	movs	r0, #48	; 0x30
 8004afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004afe:	4422      	add	r2, r4
 8004b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b08:	3302      	adds	r3, #2
 8004b0a:	e7c7      	b.n	8004a9c <_printf_common+0x58>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4622      	mov	r2, r4
 8004b10:	4649      	mov	r1, r9
 8004b12:	4638      	mov	r0, r7
 8004b14:	47c0      	blx	r8
 8004b16:	3001      	adds	r0, #1
 8004b18:	d0e6      	beq.n	8004ae8 <_printf_common+0xa4>
 8004b1a:	3601      	adds	r6, #1
 8004b1c:	e7d9      	b.n	8004ad2 <_printf_common+0x8e>
	...

08004b20 <_printf_i>:
 8004b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	7e0f      	ldrb	r7, [r1, #24]
 8004b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b28:	2f78      	cmp	r7, #120	; 0x78
 8004b2a:	4691      	mov	r9, r2
 8004b2c:	4680      	mov	r8, r0
 8004b2e:	460c      	mov	r4, r1
 8004b30:	469a      	mov	sl, r3
 8004b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b36:	d807      	bhi.n	8004b48 <_printf_i+0x28>
 8004b38:	2f62      	cmp	r7, #98	; 0x62
 8004b3a:	d80a      	bhi.n	8004b52 <_printf_i+0x32>
 8004b3c:	2f00      	cmp	r7, #0
 8004b3e:	f000 80d8 	beq.w	8004cf2 <_printf_i+0x1d2>
 8004b42:	2f58      	cmp	r7, #88	; 0x58
 8004b44:	f000 80a3 	beq.w	8004c8e <_printf_i+0x16e>
 8004b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b50:	e03a      	b.n	8004bc8 <_printf_i+0xa8>
 8004b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b56:	2b15      	cmp	r3, #21
 8004b58:	d8f6      	bhi.n	8004b48 <_printf_i+0x28>
 8004b5a:	a101      	add	r1, pc, #4	; (adr r1, 8004b60 <_printf_i+0x40>)
 8004b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b60:	08004bb9 	.word	0x08004bb9
 8004b64:	08004bcd 	.word	0x08004bcd
 8004b68:	08004b49 	.word	0x08004b49
 8004b6c:	08004b49 	.word	0x08004b49
 8004b70:	08004b49 	.word	0x08004b49
 8004b74:	08004b49 	.word	0x08004b49
 8004b78:	08004bcd 	.word	0x08004bcd
 8004b7c:	08004b49 	.word	0x08004b49
 8004b80:	08004b49 	.word	0x08004b49
 8004b84:	08004b49 	.word	0x08004b49
 8004b88:	08004b49 	.word	0x08004b49
 8004b8c:	08004cd9 	.word	0x08004cd9
 8004b90:	08004bfd 	.word	0x08004bfd
 8004b94:	08004cbb 	.word	0x08004cbb
 8004b98:	08004b49 	.word	0x08004b49
 8004b9c:	08004b49 	.word	0x08004b49
 8004ba0:	08004cfb 	.word	0x08004cfb
 8004ba4:	08004b49 	.word	0x08004b49
 8004ba8:	08004bfd 	.word	0x08004bfd
 8004bac:	08004b49 	.word	0x08004b49
 8004bb0:	08004b49 	.word	0x08004b49
 8004bb4:	08004cc3 	.word	0x08004cc3
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	1d1a      	adds	r2, r3, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	602a      	str	r2, [r5, #0]
 8004bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0a3      	b.n	8004d14 <_printf_i+0x1f4>
 8004bcc:	6820      	ldr	r0, [r4, #0]
 8004bce:	6829      	ldr	r1, [r5, #0]
 8004bd0:	0606      	lsls	r6, r0, #24
 8004bd2:	f101 0304 	add.w	r3, r1, #4
 8004bd6:	d50a      	bpl.n	8004bee <_printf_i+0xce>
 8004bd8:	680e      	ldr	r6, [r1, #0]
 8004bda:	602b      	str	r3, [r5, #0]
 8004bdc:	2e00      	cmp	r6, #0
 8004bde:	da03      	bge.n	8004be8 <_printf_i+0xc8>
 8004be0:	232d      	movs	r3, #45	; 0x2d
 8004be2:	4276      	negs	r6, r6
 8004be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be8:	485e      	ldr	r0, [pc, #376]	; (8004d64 <_printf_i+0x244>)
 8004bea:	230a      	movs	r3, #10
 8004bec:	e019      	b.n	8004c22 <_printf_i+0x102>
 8004bee:	680e      	ldr	r6, [r1, #0]
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bf6:	bf18      	it	ne
 8004bf8:	b236      	sxthne	r6, r6
 8004bfa:	e7ef      	b.n	8004bdc <_printf_i+0xbc>
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	1d19      	adds	r1, r3, #4
 8004c02:	6029      	str	r1, [r5, #0]
 8004c04:	0601      	lsls	r1, r0, #24
 8004c06:	d501      	bpl.n	8004c0c <_printf_i+0xec>
 8004c08:	681e      	ldr	r6, [r3, #0]
 8004c0a:	e002      	b.n	8004c12 <_printf_i+0xf2>
 8004c0c:	0646      	lsls	r6, r0, #25
 8004c0e:	d5fb      	bpl.n	8004c08 <_printf_i+0xe8>
 8004c10:	881e      	ldrh	r6, [r3, #0]
 8004c12:	4854      	ldr	r0, [pc, #336]	; (8004d64 <_printf_i+0x244>)
 8004c14:	2f6f      	cmp	r7, #111	; 0x6f
 8004c16:	bf0c      	ite	eq
 8004c18:	2308      	moveq	r3, #8
 8004c1a:	230a      	movne	r3, #10
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c22:	6865      	ldr	r5, [r4, #4]
 8004c24:	60a5      	str	r5, [r4, #8]
 8004c26:	2d00      	cmp	r5, #0
 8004c28:	bfa2      	ittt	ge
 8004c2a:	6821      	ldrge	r1, [r4, #0]
 8004c2c:	f021 0104 	bicge.w	r1, r1, #4
 8004c30:	6021      	strge	r1, [r4, #0]
 8004c32:	b90e      	cbnz	r6, 8004c38 <_printf_i+0x118>
 8004c34:	2d00      	cmp	r5, #0
 8004c36:	d04d      	beq.n	8004cd4 <_printf_i+0x1b4>
 8004c38:	4615      	mov	r5, r2
 8004c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c42:	5dc7      	ldrb	r7, [r0, r7]
 8004c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c48:	4637      	mov	r7, r6
 8004c4a:	42bb      	cmp	r3, r7
 8004c4c:	460e      	mov	r6, r1
 8004c4e:	d9f4      	bls.n	8004c3a <_printf_i+0x11a>
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d10b      	bne.n	8004c6c <_printf_i+0x14c>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	07de      	lsls	r6, r3, #31
 8004c58:	d508      	bpl.n	8004c6c <_printf_i+0x14c>
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	6861      	ldr	r1, [r4, #4]
 8004c5e:	4299      	cmp	r1, r3
 8004c60:	bfde      	ittt	le
 8004c62:	2330      	movle	r3, #48	; 0x30
 8004c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c6c:	1b52      	subs	r2, r2, r5
 8004c6e:	6122      	str	r2, [r4, #16]
 8004c70:	f8cd a000 	str.w	sl, [sp]
 8004c74:	464b      	mov	r3, r9
 8004c76:	aa03      	add	r2, sp, #12
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	f7ff fee2 	bl	8004a44 <_printf_common>
 8004c80:	3001      	adds	r0, #1
 8004c82:	d14c      	bne.n	8004d1e <_printf_i+0x1fe>
 8004c84:	f04f 30ff 	mov.w	r0, #4294967295
 8004c88:	b004      	add	sp, #16
 8004c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8e:	4835      	ldr	r0, [pc, #212]	; (8004d64 <_printf_i+0x244>)
 8004c90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c94:	6829      	ldr	r1, [r5, #0]
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c9c:	6029      	str	r1, [r5, #0]
 8004c9e:	061d      	lsls	r5, r3, #24
 8004ca0:	d514      	bpl.n	8004ccc <_printf_i+0x1ac>
 8004ca2:	07df      	lsls	r7, r3, #31
 8004ca4:	bf44      	itt	mi
 8004ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8004caa:	6023      	strmi	r3, [r4, #0]
 8004cac:	b91e      	cbnz	r6, 8004cb6 <_printf_i+0x196>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	f023 0320 	bic.w	r3, r3, #32
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	2310      	movs	r3, #16
 8004cb8:	e7b0      	b.n	8004c1c <_printf_i+0xfc>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	f043 0320 	orr.w	r3, r3, #32
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	2378      	movs	r3, #120	; 0x78
 8004cc4:	4828      	ldr	r0, [pc, #160]	; (8004d68 <_printf_i+0x248>)
 8004cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cca:	e7e3      	b.n	8004c94 <_printf_i+0x174>
 8004ccc:	0659      	lsls	r1, r3, #25
 8004cce:	bf48      	it	mi
 8004cd0:	b2b6      	uxthmi	r6, r6
 8004cd2:	e7e6      	b.n	8004ca2 <_printf_i+0x182>
 8004cd4:	4615      	mov	r5, r2
 8004cd6:	e7bb      	b.n	8004c50 <_printf_i+0x130>
 8004cd8:	682b      	ldr	r3, [r5, #0]
 8004cda:	6826      	ldr	r6, [r4, #0]
 8004cdc:	6961      	ldr	r1, [r4, #20]
 8004cde:	1d18      	adds	r0, r3, #4
 8004ce0:	6028      	str	r0, [r5, #0]
 8004ce2:	0635      	lsls	r5, r6, #24
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	d501      	bpl.n	8004cec <_printf_i+0x1cc>
 8004ce8:	6019      	str	r1, [r3, #0]
 8004cea:	e002      	b.n	8004cf2 <_printf_i+0x1d2>
 8004cec:	0670      	lsls	r0, r6, #25
 8004cee:	d5fb      	bpl.n	8004ce8 <_printf_i+0x1c8>
 8004cf0:	8019      	strh	r1, [r3, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6123      	str	r3, [r4, #16]
 8004cf6:	4615      	mov	r5, r2
 8004cf8:	e7ba      	b.n	8004c70 <_printf_i+0x150>
 8004cfa:	682b      	ldr	r3, [r5, #0]
 8004cfc:	1d1a      	adds	r2, r3, #4
 8004cfe:	602a      	str	r2, [r5, #0]
 8004d00:	681d      	ldr	r5, [r3, #0]
 8004d02:	6862      	ldr	r2, [r4, #4]
 8004d04:	2100      	movs	r1, #0
 8004d06:	4628      	mov	r0, r5
 8004d08:	f7fb fa82 	bl	8000210 <memchr>
 8004d0c:	b108      	cbz	r0, 8004d12 <_printf_i+0x1f2>
 8004d0e:	1b40      	subs	r0, r0, r5
 8004d10:	6060      	str	r0, [r4, #4]
 8004d12:	6863      	ldr	r3, [r4, #4]
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	2300      	movs	r3, #0
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	e7a8      	b.n	8004c70 <_printf_i+0x150>
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	462a      	mov	r2, r5
 8004d22:	4649      	mov	r1, r9
 8004d24:	4640      	mov	r0, r8
 8004d26:	47d0      	blx	sl
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d0ab      	beq.n	8004c84 <_printf_i+0x164>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	079b      	lsls	r3, r3, #30
 8004d30:	d413      	bmi.n	8004d5a <_printf_i+0x23a>
 8004d32:	68e0      	ldr	r0, [r4, #12]
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	4298      	cmp	r0, r3
 8004d38:	bfb8      	it	lt
 8004d3a:	4618      	movlt	r0, r3
 8004d3c:	e7a4      	b.n	8004c88 <_printf_i+0x168>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	4632      	mov	r2, r6
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	47d0      	blx	sl
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d09b      	beq.n	8004c84 <_printf_i+0x164>
 8004d4c:	3501      	adds	r5, #1
 8004d4e:	68e3      	ldr	r3, [r4, #12]
 8004d50:	9903      	ldr	r1, [sp, #12]
 8004d52:	1a5b      	subs	r3, r3, r1
 8004d54:	42ab      	cmp	r3, r5
 8004d56:	dcf2      	bgt.n	8004d3e <_printf_i+0x21e>
 8004d58:	e7eb      	b.n	8004d32 <_printf_i+0x212>
 8004d5a:	2500      	movs	r5, #0
 8004d5c:	f104 0619 	add.w	r6, r4, #25
 8004d60:	e7f5      	b.n	8004d4e <_printf_i+0x22e>
 8004d62:	bf00      	nop
 8004d64:	08005411 	.word	0x08005411
 8004d68:	08005422 	.word	0x08005422

08004d6c <_sbrk_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d06      	ldr	r5, [pc, #24]	; (8004d88 <_sbrk_r+0x1c>)
 8004d70:	2300      	movs	r3, #0
 8004d72:	4604      	mov	r4, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	f7fc fca2 	bl	80016c0 <_sbrk>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_sbrk_r+0x1a>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_sbrk_r+0x1a>
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	20000174 	.word	0x20000174

08004d8c <__sread>:
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	460c      	mov	r4, r1
 8004d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d94:	f000 fab2 	bl	80052fc <_read_r>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	bfab      	itete	ge
 8004d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004da0:	181b      	addge	r3, r3, r0
 8004da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004da6:	bfac      	ite	ge
 8004da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004daa:	81a3      	strhlt	r3, [r4, #12]
 8004dac:	bd10      	pop	{r4, pc}

08004dae <__swrite>:
 8004dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db2:	461f      	mov	r7, r3
 8004db4:	898b      	ldrh	r3, [r1, #12]
 8004db6:	05db      	lsls	r3, r3, #23
 8004db8:	4605      	mov	r5, r0
 8004dba:	460c      	mov	r4, r1
 8004dbc:	4616      	mov	r6, r2
 8004dbe:	d505      	bpl.n	8004dcc <__swrite+0x1e>
 8004dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f000 f9c8 	bl	800515c <_lseek_r>
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	463b      	mov	r3, r7
 8004ddc:	4628      	mov	r0, r5
 8004dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004de2:	f000 b869 	b.w	8004eb8 <_write_r>

08004de6 <__sseek>:
 8004de6:	b510      	push	{r4, lr}
 8004de8:	460c      	mov	r4, r1
 8004dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dee:	f000 f9b5 	bl	800515c <_lseek_r>
 8004df2:	1c43      	adds	r3, r0, #1
 8004df4:	89a3      	ldrh	r3, [r4, #12]
 8004df6:	bf15      	itete	ne
 8004df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e02:	81a3      	strheq	r3, [r4, #12]
 8004e04:	bf18      	it	ne
 8004e06:	81a3      	strhne	r3, [r4, #12]
 8004e08:	bd10      	pop	{r4, pc}

08004e0a <__sclose>:
 8004e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0e:	f000 b8d3 	b.w	8004fb8 <_close_r>
	...

08004e14 <__swbuf_r>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	460e      	mov	r6, r1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	4605      	mov	r5, r0
 8004e1c:	b118      	cbz	r0, 8004e26 <__swbuf_r+0x12>
 8004e1e:	6983      	ldr	r3, [r0, #24]
 8004e20:	b90b      	cbnz	r3, 8004e26 <__swbuf_r+0x12>
 8004e22:	f7ff fb81 	bl	8004528 <__sinit>
 8004e26:	4b21      	ldr	r3, [pc, #132]	; (8004eac <__swbuf_r+0x98>)
 8004e28:	429c      	cmp	r4, r3
 8004e2a:	d12b      	bne.n	8004e84 <__swbuf_r+0x70>
 8004e2c:	686c      	ldr	r4, [r5, #4]
 8004e2e:	69a3      	ldr	r3, [r4, #24]
 8004e30:	60a3      	str	r3, [r4, #8]
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	071a      	lsls	r2, r3, #28
 8004e36:	d52f      	bpl.n	8004e98 <__swbuf_r+0x84>
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	b36b      	cbz	r3, 8004e98 <__swbuf_r+0x84>
 8004e3c:	6923      	ldr	r3, [r4, #16]
 8004e3e:	6820      	ldr	r0, [r4, #0]
 8004e40:	1ac0      	subs	r0, r0, r3
 8004e42:	6963      	ldr	r3, [r4, #20]
 8004e44:	b2f6      	uxtb	r6, r6
 8004e46:	4283      	cmp	r3, r0
 8004e48:	4637      	mov	r7, r6
 8004e4a:	dc04      	bgt.n	8004e56 <__swbuf_r+0x42>
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f000 f948 	bl	80050e4 <_fflush_r>
 8004e54:	bb30      	cbnz	r0, 8004ea4 <__swbuf_r+0x90>
 8004e56:	68a3      	ldr	r3, [r4, #8]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	60a3      	str	r3, [r4, #8]
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	6022      	str	r2, [r4, #0]
 8004e62:	701e      	strb	r6, [r3, #0]
 8004e64:	6963      	ldr	r3, [r4, #20]
 8004e66:	3001      	adds	r0, #1
 8004e68:	4283      	cmp	r3, r0
 8004e6a:	d004      	beq.n	8004e76 <__swbuf_r+0x62>
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	07db      	lsls	r3, r3, #31
 8004e70:	d506      	bpl.n	8004e80 <__swbuf_r+0x6c>
 8004e72:	2e0a      	cmp	r6, #10
 8004e74:	d104      	bne.n	8004e80 <__swbuf_r+0x6c>
 8004e76:	4621      	mov	r1, r4
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 f933 	bl	80050e4 <_fflush_r>
 8004e7e:	b988      	cbnz	r0, 8004ea4 <__swbuf_r+0x90>
 8004e80:	4638      	mov	r0, r7
 8004e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <__swbuf_r+0x9c>)
 8004e86:	429c      	cmp	r4, r3
 8004e88:	d101      	bne.n	8004e8e <__swbuf_r+0x7a>
 8004e8a:	68ac      	ldr	r4, [r5, #8]
 8004e8c:	e7cf      	b.n	8004e2e <__swbuf_r+0x1a>
 8004e8e:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <__swbuf_r+0xa0>)
 8004e90:	429c      	cmp	r4, r3
 8004e92:	bf08      	it	eq
 8004e94:	68ec      	ldreq	r4, [r5, #12]
 8004e96:	e7ca      	b.n	8004e2e <__swbuf_r+0x1a>
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 f81e 	bl	8004edc <__swsetup_r>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d0cb      	beq.n	8004e3c <__swbuf_r+0x28>
 8004ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ea8:	e7ea      	b.n	8004e80 <__swbuf_r+0x6c>
 8004eaa:	bf00      	nop
 8004eac:	080053c0 	.word	0x080053c0
 8004eb0:	080053e0 	.word	0x080053e0
 8004eb4:	080053a0 	.word	0x080053a0

08004eb8 <_write_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d07      	ldr	r5, [pc, #28]	; (8004ed8 <_write_r+0x20>)
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	602a      	str	r2, [r5, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f7fc f9ee 	bl	80012a8 <_write>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_write_r+0x1e>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_write_r+0x1e>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	20000174 	.word	0x20000174

08004edc <__swsetup_r>:
 8004edc:	4b32      	ldr	r3, [pc, #200]	; (8004fa8 <__swsetup_r+0xcc>)
 8004ede:	b570      	push	{r4, r5, r6, lr}
 8004ee0:	681d      	ldr	r5, [r3, #0]
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	b125      	cbz	r5, 8004ef2 <__swsetup_r+0x16>
 8004ee8:	69ab      	ldr	r3, [r5, #24]
 8004eea:	b913      	cbnz	r3, 8004ef2 <__swsetup_r+0x16>
 8004eec:	4628      	mov	r0, r5
 8004eee:	f7ff fb1b 	bl	8004528 <__sinit>
 8004ef2:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <__swsetup_r+0xd0>)
 8004ef4:	429c      	cmp	r4, r3
 8004ef6:	d10f      	bne.n	8004f18 <__swsetup_r+0x3c>
 8004ef8:	686c      	ldr	r4, [r5, #4]
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f00:	0719      	lsls	r1, r3, #28
 8004f02:	d42c      	bmi.n	8004f5e <__swsetup_r+0x82>
 8004f04:	06dd      	lsls	r5, r3, #27
 8004f06:	d411      	bmi.n	8004f2c <__swsetup_r+0x50>
 8004f08:	2309      	movs	r3, #9
 8004f0a:	6033      	str	r3, [r6, #0]
 8004f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f10:	81a3      	strh	r3, [r4, #12]
 8004f12:	f04f 30ff 	mov.w	r0, #4294967295
 8004f16:	e03e      	b.n	8004f96 <__swsetup_r+0xba>
 8004f18:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <__swsetup_r+0xd4>)
 8004f1a:	429c      	cmp	r4, r3
 8004f1c:	d101      	bne.n	8004f22 <__swsetup_r+0x46>
 8004f1e:	68ac      	ldr	r4, [r5, #8]
 8004f20:	e7eb      	b.n	8004efa <__swsetup_r+0x1e>
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <__swsetup_r+0xd8>)
 8004f24:	429c      	cmp	r4, r3
 8004f26:	bf08      	it	eq
 8004f28:	68ec      	ldreq	r4, [r5, #12]
 8004f2a:	e7e6      	b.n	8004efa <__swsetup_r+0x1e>
 8004f2c:	0758      	lsls	r0, r3, #29
 8004f2e:	d512      	bpl.n	8004f56 <__swsetup_r+0x7a>
 8004f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f32:	b141      	cbz	r1, 8004f46 <__swsetup_r+0x6a>
 8004f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f38:	4299      	cmp	r1, r3
 8004f3a:	d002      	beq.n	8004f42 <__swsetup_r+0x66>
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f000 f991 	bl	8005264 <_free_r>
 8004f42:	2300      	movs	r3, #0
 8004f44:	6363      	str	r3, [r4, #52]	; 0x34
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f4c:	81a3      	strh	r3, [r4, #12]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6063      	str	r3, [r4, #4]
 8004f52:	6923      	ldr	r3, [r4, #16]
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	f043 0308 	orr.w	r3, r3, #8
 8004f5c:	81a3      	strh	r3, [r4, #12]
 8004f5e:	6923      	ldr	r3, [r4, #16]
 8004f60:	b94b      	cbnz	r3, 8004f76 <__swsetup_r+0x9a>
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6c:	d003      	beq.n	8004f76 <__swsetup_r+0x9a>
 8004f6e:	4621      	mov	r1, r4
 8004f70:	4630      	mov	r0, r6
 8004f72:	f000 f92b 	bl	80051cc <__smakebuf_r>
 8004f76:	89a0      	ldrh	r0, [r4, #12]
 8004f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f7c:	f010 0301 	ands.w	r3, r0, #1
 8004f80:	d00a      	beq.n	8004f98 <__swsetup_r+0xbc>
 8004f82:	2300      	movs	r3, #0
 8004f84:	60a3      	str	r3, [r4, #8]
 8004f86:	6963      	ldr	r3, [r4, #20]
 8004f88:	425b      	negs	r3, r3
 8004f8a:	61a3      	str	r3, [r4, #24]
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	b943      	cbnz	r3, 8004fa2 <__swsetup_r+0xc6>
 8004f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f94:	d1ba      	bne.n	8004f0c <__swsetup_r+0x30>
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	0781      	lsls	r1, r0, #30
 8004f9a:	bf58      	it	pl
 8004f9c:	6963      	ldrpl	r3, [r4, #20]
 8004f9e:	60a3      	str	r3, [r4, #8]
 8004fa0:	e7f4      	b.n	8004f8c <__swsetup_r+0xb0>
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	e7f7      	b.n	8004f96 <__swsetup_r+0xba>
 8004fa6:	bf00      	nop
 8004fa8:	2000000c 	.word	0x2000000c
 8004fac:	080053c0 	.word	0x080053c0
 8004fb0:	080053e0 	.word	0x080053e0
 8004fb4:	080053a0 	.word	0x080053a0

08004fb8 <_close_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	4d06      	ldr	r5, [pc, #24]	; (8004fd4 <_close_r+0x1c>)
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	602b      	str	r3, [r5, #0]
 8004fc4:	f7fc fb47 	bl	8001656 <_close>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_close_r+0x1a>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_close_r+0x1a>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20000174 	.word	0x20000174

08004fd8 <__sflush_r>:
 8004fd8:	898a      	ldrh	r2, [r1, #12]
 8004fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fde:	4605      	mov	r5, r0
 8004fe0:	0710      	lsls	r0, r2, #28
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	d458      	bmi.n	8005098 <__sflush_r+0xc0>
 8004fe6:	684b      	ldr	r3, [r1, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dc05      	bgt.n	8004ff8 <__sflush_r+0x20>
 8004fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	dc02      	bgt.n	8004ff8 <__sflush_r+0x20>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ffa:	2e00      	cmp	r6, #0
 8004ffc:	d0f9      	beq.n	8004ff2 <__sflush_r+0x1a>
 8004ffe:	2300      	movs	r3, #0
 8005000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005004:	682f      	ldr	r7, [r5, #0]
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	d032      	beq.n	8005070 <__sflush_r+0x98>
 800500a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	075a      	lsls	r2, r3, #29
 8005010:	d505      	bpl.n	800501e <__sflush_r+0x46>
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	1ac0      	subs	r0, r0, r3
 8005016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005018:	b10b      	cbz	r3, 800501e <__sflush_r+0x46>
 800501a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800501c:	1ac0      	subs	r0, r0, r3
 800501e:	2300      	movs	r3, #0
 8005020:	4602      	mov	r2, r0
 8005022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005024:	6a21      	ldr	r1, [r4, #32]
 8005026:	4628      	mov	r0, r5
 8005028:	47b0      	blx	r6
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	d106      	bne.n	800503e <__sflush_r+0x66>
 8005030:	6829      	ldr	r1, [r5, #0]
 8005032:	291d      	cmp	r1, #29
 8005034:	d82c      	bhi.n	8005090 <__sflush_r+0xb8>
 8005036:	4a2a      	ldr	r2, [pc, #168]	; (80050e0 <__sflush_r+0x108>)
 8005038:	40ca      	lsrs	r2, r1
 800503a:	07d6      	lsls	r6, r2, #31
 800503c:	d528      	bpl.n	8005090 <__sflush_r+0xb8>
 800503e:	2200      	movs	r2, #0
 8005040:	6062      	str	r2, [r4, #4]
 8005042:	04d9      	lsls	r1, r3, #19
 8005044:	6922      	ldr	r2, [r4, #16]
 8005046:	6022      	str	r2, [r4, #0]
 8005048:	d504      	bpl.n	8005054 <__sflush_r+0x7c>
 800504a:	1c42      	adds	r2, r0, #1
 800504c:	d101      	bne.n	8005052 <__sflush_r+0x7a>
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	b903      	cbnz	r3, 8005054 <__sflush_r+0x7c>
 8005052:	6560      	str	r0, [r4, #84]	; 0x54
 8005054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005056:	602f      	str	r7, [r5, #0]
 8005058:	2900      	cmp	r1, #0
 800505a:	d0ca      	beq.n	8004ff2 <__sflush_r+0x1a>
 800505c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005060:	4299      	cmp	r1, r3
 8005062:	d002      	beq.n	800506a <__sflush_r+0x92>
 8005064:	4628      	mov	r0, r5
 8005066:	f000 f8fd 	bl	8005264 <_free_r>
 800506a:	2000      	movs	r0, #0
 800506c:	6360      	str	r0, [r4, #52]	; 0x34
 800506e:	e7c1      	b.n	8004ff4 <__sflush_r+0x1c>
 8005070:	6a21      	ldr	r1, [r4, #32]
 8005072:	2301      	movs	r3, #1
 8005074:	4628      	mov	r0, r5
 8005076:	47b0      	blx	r6
 8005078:	1c41      	adds	r1, r0, #1
 800507a:	d1c7      	bne.n	800500c <__sflush_r+0x34>
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0c4      	beq.n	800500c <__sflush_r+0x34>
 8005082:	2b1d      	cmp	r3, #29
 8005084:	d001      	beq.n	800508a <__sflush_r+0xb2>
 8005086:	2b16      	cmp	r3, #22
 8005088:	d101      	bne.n	800508e <__sflush_r+0xb6>
 800508a:	602f      	str	r7, [r5, #0]
 800508c:	e7b1      	b.n	8004ff2 <__sflush_r+0x1a>
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005094:	81a3      	strh	r3, [r4, #12]
 8005096:	e7ad      	b.n	8004ff4 <__sflush_r+0x1c>
 8005098:	690f      	ldr	r7, [r1, #16]
 800509a:	2f00      	cmp	r7, #0
 800509c:	d0a9      	beq.n	8004ff2 <__sflush_r+0x1a>
 800509e:	0793      	lsls	r3, r2, #30
 80050a0:	680e      	ldr	r6, [r1, #0]
 80050a2:	bf08      	it	eq
 80050a4:	694b      	ldreq	r3, [r1, #20]
 80050a6:	600f      	str	r7, [r1, #0]
 80050a8:	bf18      	it	ne
 80050aa:	2300      	movne	r3, #0
 80050ac:	eba6 0807 	sub.w	r8, r6, r7
 80050b0:	608b      	str	r3, [r1, #8]
 80050b2:	f1b8 0f00 	cmp.w	r8, #0
 80050b6:	dd9c      	ble.n	8004ff2 <__sflush_r+0x1a>
 80050b8:	6a21      	ldr	r1, [r4, #32]
 80050ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050bc:	4643      	mov	r3, r8
 80050be:	463a      	mov	r2, r7
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b0      	blx	r6
 80050c4:	2800      	cmp	r0, #0
 80050c6:	dc06      	bgt.n	80050d6 <__sflush_r+0xfe>
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ce:	81a3      	strh	r3, [r4, #12]
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	e78e      	b.n	8004ff4 <__sflush_r+0x1c>
 80050d6:	4407      	add	r7, r0
 80050d8:	eba8 0800 	sub.w	r8, r8, r0
 80050dc:	e7e9      	b.n	80050b2 <__sflush_r+0xda>
 80050de:	bf00      	nop
 80050e0:	20400001 	.word	0x20400001

080050e4 <_fflush_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	690b      	ldr	r3, [r1, #16]
 80050e8:	4605      	mov	r5, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	b913      	cbnz	r3, 80050f4 <_fflush_r+0x10>
 80050ee:	2500      	movs	r5, #0
 80050f0:	4628      	mov	r0, r5
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	b118      	cbz	r0, 80050fe <_fflush_r+0x1a>
 80050f6:	6983      	ldr	r3, [r0, #24]
 80050f8:	b90b      	cbnz	r3, 80050fe <_fflush_r+0x1a>
 80050fa:	f7ff fa15 	bl	8004528 <__sinit>
 80050fe:	4b14      	ldr	r3, [pc, #80]	; (8005150 <_fflush_r+0x6c>)
 8005100:	429c      	cmp	r4, r3
 8005102:	d11b      	bne.n	800513c <_fflush_r+0x58>
 8005104:	686c      	ldr	r4, [r5, #4]
 8005106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0ef      	beq.n	80050ee <_fflush_r+0xa>
 800510e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005110:	07d0      	lsls	r0, r2, #31
 8005112:	d404      	bmi.n	800511e <_fflush_r+0x3a>
 8005114:	0599      	lsls	r1, r3, #22
 8005116:	d402      	bmi.n	800511e <_fflush_r+0x3a>
 8005118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800511a:	f7ff faa3 	bl	8004664 <__retarget_lock_acquire_recursive>
 800511e:	4628      	mov	r0, r5
 8005120:	4621      	mov	r1, r4
 8005122:	f7ff ff59 	bl	8004fd8 <__sflush_r>
 8005126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005128:	07da      	lsls	r2, r3, #31
 800512a:	4605      	mov	r5, r0
 800512c:	d4e0      	bmi.n	80050f0 <_fflush_r+0xc>
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	059b      	lsls	r3, r3, #22
 8005132:	d4dd      	bmi.n	80050f0 <_fflush_r+0xc>
 8005134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005136:	f7ff fa96 	bl	8004666 <__retarget_lock_release_recursive>
 800513a:	e7d9      	b.n	80050f0 <_fflush_r+0xc>
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <_fflush_r+0x70>)
 800513e:	429c      	cmp	r4, r3
 8005140:	d101      	bne.n	8005146 <_fflush_r+0x62>
 8005142:	68ac      	ldr	r4, [r5, #8]
 8005144:	e7df      	b.n	8005106 <_fflush_r+0x22>
 8005146:	4b04      	ldr	r3, [pc, #16]	; (8005158 <_fflush_r+0x74>)
 8005148:	429c      	cmp	r4, r3
 800514a:	bf08      	it	eq
 800514c:	68ec      	ldreq	r4, [r5, #12]
 800514e:	e7da      	b.n	8005106 <_fflush_r+0x22>
 8005150:	080053c0 	.word	0x080053c0
 8005154:	080053e0 	.word	0x080053e0
 8005158:	080053a0 	.word	0x080053a0

0800515c <_lseek_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d07      	ldr	r5, [pc, #28]	; (800517c <_lseek_r+0x20>)
 8005160:	4604      	mov	r4, r0
 8005162:	4608      	mov	r0, r1
 8005164:	4611      	mov	r1, r2
 8005166:	2200      	movs	r2, #0
 8005168:	602a      	str	r2, [r5, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	f7fc fa9a 	bl	80016a4 <_lseek>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_lseek_r+0x1e>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	b103      	cbz	r3, 800517a <_lseek_r+0x1e>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	20000174 	.word	0x20000174

08005180 <__swhatbuf_r>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	460e      	mov	r6, r1
 8005184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005188:	2900      	cmp	r1, #0
 800518a:	b096      	sub	sp, #88	; 0x58
 800518c:	4614      	mov	r4, r2
 800518e:	461d      	mov	r5, r3
 8005190:	da08      	bge.n	80051a4 <__swhatbuf_r+0x24>
 8005192:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	602a      	str	r2, [r5, #0]
 800519a:	061a      	lsls	r2, r3, #24
 800519c:	d410      	bmi.n	80051c0 <__swhatbuf_r+0x40>
 800519e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a2:	e00e      	b.n	80051c2 <__swhatbuf_r+0x42>
 80051a4:	466a      	mov	r2, sp
 80051a6:	f000 f8bb 	bl	8005320 <_fstat_r>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	dbf1      	blt.n	8005192 <__swhatbuf_r+0x12>
 80051ae:	9a01      	ldr	r2, [sp, #4]
 80051b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051b8:	425a      	negs	r2, r3
 80051ba:	415a      	adcs	r2, r3
 80051bc:	602a      	str	r2, [r5, #0]
 80051be:	e7ee      	b.n	800519e <__swhatbuf_r+0x1e>
 80051c0:	2340      	movs	r3, #64	; 0x40
 80051c2:	2000      	movs	r0, #0
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	b016      	add	sp, #88	; 0x58
 80051c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080051cc <__smakebuf_r>:
 80051cc:	898b      	ldrh	r3, [r1, #12]
 80051ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051d0:	079d      	lsls	r5, r3, #30
 80051d2:	4606      	mov	r6, r0
 80051d4:	460c      	mov	r4, r1
 80051d6:	d507      	bpl.n	80051e8 <__smakebuf_r+0x1c>
 80051d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	6123      	str	r3, [r4, #16]
 80051e0:	2301      	movs	r3, #1
 80051e2:	6163      	str	r3, [r4, #20]
 80051e4:	b002      	add	sp, #8
 80051e6:	bd70      	pop	{r4, r5, r6, pc}
 80051e8:	ab01      	add	r3, sp, #4
 80051ea:	466a      	mov	r2, sp
 80051ec:	f7ff ffc8 	bl	8005180 <__swhatbuf_r>
 80051f0:	9900      	ldr	r1, [sp, #0]
 80051f2:	4605      	mov	r5, r0
 80051f4:	4630      	mov	r0, r6
 80051f6:	f7ff fa57 	bl	80046a8 <_malloc_r>
 80051fa:	b948      	cbnz	r0, 8005210 <__smakebuf_r+0x44>
 80051fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005200:	059a      	lsls	r2, r3, #22
 8005202:	d4ef      	bmi.n	80051e4 <__smakebuf_r+0x18>
 8005204:	f023 0303 	bic.w	r3, r3, #3
 8005208:	f043 0302 	orr.w	r3, r3, #2
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	e7e3      	b.n	80051d8 <__smakebuf_r+0xc>
 8005210:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <__smakebuf_r+0x7c>)
 8005212:	62b3      	str	r3, [r6, #40]	; 0x28
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	6020      	str	r0, [r4, #0]
 8005218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	9b00      	ldr	r3, [sp, #0]
 8005220:	6163      	str	r3, [r4, #20]
 8005222:	9b01      	ldr	r3, [sp, #4]
 8005224:	6120      	str	r0, [r4, #16]
 8005226:	b15b      	cbz	r3, 8005240 <__smakebuf_r+0x74>
 8005228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800522c:	4630      	mov	r0, r6
 800522e:	f000 f889 	bl	8005344 <_isatty_r>
 8005232:	b128      	cbz	r0, 8005240 <__smakebuf_r+0x74>
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	89a0      	ldrh	r0, [r4, #12]
 8005242:	4305      	orrs	r5, r0
 8005244:	81a5      	strh	r5, [r4, #12]
 8005246:	e7cd      	b.n	80051e4 <__smakebuf_r+0x18>
 8005248:	080044c1 	.word	0x080044c1

0800524c <__malloc_lock>:
 800524c:	4801      	ldr	r0, [pc, #4]	; (8005254 <__malloc_lock+0x8>)
 800524e:	f7ff ba09 	b.w	8004664 <__retarget_lock_acquire_recursive>
 8005252:	bf00      	nop
 8005254:	20000168 	.word	0x20000168

08005258 <__malloc_unlock>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__malloc_unlock+0x8>)
 800525a:	f7ff ba04 	b.w	8004666 <__retarget_lock_release_recursive>
 800525e:	bf00      	nop
 8005260:	20000168 	.word	0x20000168

08005264 <_free_r>:
 8005264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005266:	2900      	cmp	r1, #0
 8005268:	d044      	beq.n	80052f4 <_free_r+0x90>
 800526a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526e:	9001      	str	r0, [sp, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	f1a1 0404 	sub.w	r4, r1, #4
 8005276:	bfb8      	it	lt
 8005278:	18e4      	addlt	r4, r4, r3
 800527a:	f7ff ffe7 	bl	800524c <__malloc_lock>
 800527e:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <_free_r+0x94>)
 8005280:	9801      	ldr	r0, [sp, #4]
 8005282:	6813      	ldr	r3, [r2, #0]
 8005284:	b933      	cbnz	r3, 8005294 <_free_r+0x30>
 8005286:	6063      	str	r3, [r4, #4]
 8005288:	6014      	str	r4, [r2, #0]
 800528a:	b003      	add	sp, #12
 800528c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005290:	f7ff bfe2 	b.w	8005258 <__malloc_unlock>
 8005294:	42a3      	cmp	r3, r4
 8005296:	d908      	bls.n	80052aa <_free_r+0x46>
 8005298:	6825      	ldr	r5, [r4, #0]
 800529a:	1961      	adds	r1, r4, r5
 800529c:	428b      	cmp	r3, r1
 800529e:	bf01      	itttt	eq
 80052a0:	6819      	ldreq	r1, [r3, #0]
 80052a2:	685b      	ldreq	r3, [r3, #4]
 80052a4:	1949      	addeq	r1, r1, r5
 80052a6:	6021      	streq	r1, [r4, #0]
 80052a8:	e7ed      	b.n	8005286 <_free_r+0x22>
 80052aa:	461a      	mov	r2, r3
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	b10b      	cbz	r3, 80052b4 <_free_r+0x50>
 80052b0:	42a3      	cmp	r3, r4
 80052b2:	d9fa      	bls.n	80052aa <_free_r+0x46>
 80052b4:	6811      	ldr	r1, [r2, #0]
 80052b6:	1855      	adds	r5, r2, r1
 80052b8:	42a5      	cmp	r5, r4
 80052ba:	d10b      	bne.n	80052d4 <_free_r+0x70>
 80052bc:	6824      	ldr	r4, [r4, #0]
 80052be:	4421      	add	r1, r4
 80052c0:	1854      	adds	r4, r2, r1
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	6011      	str	r1, [r2, #0]
 80052c6:	d1e0      	bne.n	800528a <_free_r+0x26>
 80052c8:	681c      	ldr	r4, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	6053      	str	r3, [r2, #4]
 80052ce:	4421      	add	r1, r4
 80052d0:	6011      	str	r1, [r2, #0]
 80052d2:	e7da      	b.n	800528a <_free_r+0x26>
 80052d4:	d902      	bls.n	80052dc <_free_r+0x78>
 80052d6:	230c      	movs	r3, #12
 80052d8:	6003      	str	r3, [r0, #0]
 80052da:	e7d6      	b.n	800528a <_free_r+0x26>
 80052dc:	6825      	ldr	r5, [r4, #0]
 80052de:	1961      	adds	r1, r4, r5
 80052e0:	428b      	cmp	r3, r1
 80052e2:	bf04      	itt	eq
 80052e4:	6819      	ldreq	r1, [r3, #0]
 80052e6:	685b      	ldreq	r3, [r3, #4]
 80052e8:	6063      	str	r3, [r4, #4]
 80052ea:	bf04      	itt	eq
 80052ec:	1949      	addeq	r1, r1, r5
 80052ee:	6021      	streq	r1, [r4, #0]
 80052f0:	6054      	str	r4, [r2, #4]
 80052f2:	e7ca      	b.n	800528a <_free_r+0x26>
 80052f4:	b003      	add	sp, #12
 80052f6:	bd30      	pop	{r4, r5, pc}
 80052f8:	2000016c 	.word	0x2000016c

080052fc <_read_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4d07      	ldr	r5, [pc, #28]	; (800531c <_read_r+0x20>)
 8005300:	4604      	mov	r4, r0
 8005302:	4608      	mov	r0, r1
 8005304:	4611      	mov	r1, r2
 8005306:	2200      	movs	r2, #0
 8005308:	602a      	str	r2, [r5, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	f7fc f986 	bl	800161c <_read>
 8005310:	1c43      	adds	r3, r0, #1
 8005312:	d102      	bne.n	800531a <_read_r+0x1e>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	b103      	cbz	r3, 800531a <_read_r+0x1e>
 8005318:	6023      	str	r3, [r4, #0]
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	20000174 	.word	0x20000174

08005320 <_fstat_r>:
 8005320:	b538      	push	{r3, r4, r5, lr}
 8005322:	4d07      	ldr	r5, [pc, #28]	; (8005340 <_fstat_r+0x20>)
 8005324:	2300      	movs	r3, #0
 8005326:	4604      	mov	r4, r0
 8005328:	4608      	mov	r0, r1
 800532a:	4611      	mov	r1, r2
 800532c:	602b      	str	r3, [r5, #0]
 800532e:	f7fc f99e 	bl	800166e <_fstat>
 8005332:	1c43      	adds	r3, r0, #1
 8005334:	d102      	bne.n	800533c <_fstat_r+0x1c>
 8005336:	682b      	ldr	r3, [r5, #0]
 8005338:	b103      	cbz	r3, 800533c <_fstat_r+0x1c>
 800533a:	6023      	str	r3, [r4, #0]
 800533c:	bd38      	pop	{r3, r4, r5, pc}
 800533e:	bf00      	nop
 8005340:	20000174 	.word	0x20000174

08005344 <_isatty_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4d06      	ldr	r5, [pc, #24]	; (8005360 <_isatty_r+0x1c>)
 8005348:	2300      	movs	r3, #0
 800534a:	4604      	mov	r4, r0
 800534c:	4608      	mov	r0, r1
 800534e:	602b      	str	r3, [r5, #0]
 8005350:	f7fc f99d 	bl	800168e <_isatty>
 8005354:	1c43      	adds	r3, r0, #1
 8005356:	d102      	bne.n	800535e <_isatty_r+0x1a>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	b103      	cbz	r3, 800535e <_isatty_r+0x1a>
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	bd38      	pop	{r3, r4, r5, pc}
 8005360:	20000174 	.word	0x20000174

08005364 <_init>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr

08005370 <_fini>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr
